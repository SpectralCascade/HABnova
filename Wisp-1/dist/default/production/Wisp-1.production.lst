

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Sep 05 20:58:05 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    16                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	intentry,global,class=CODE,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	dabs	1,0x7E,2
    95  0000                     
    96                           ; Version 2.05
    97                           ; Generated 20/12/2018 GMT
    98                           ; 
    99                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC16F1619 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0090                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0095                     	;# 
   173  0096                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009A                     	;# 
   177  009B                     	;# 
   178  009B                     	;# 
   179  009C                     	;# 
   180  009D                     	;# 
   181  009E                     	;# 
   182  009F                     	;# 
   183  010C                     	;# 
   184  010D                     	;# 
   185  010E                     	;# 
   186  0111                     	;# 
   187  0112                     	;# 
   188  0113                     	;# 
   189  0114                     	;# 
   190  0115                     	;# 
   191  0116                     	;# 
   192  0117                     	;# 
   193  0118                     	;# 
   194  0119                     	;# 
   195  011C                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0197                     	;# 
   208  0199                     	;# 
   209  0199                     	;# 
   210  0199                     	;# 
   211  019A                     	;# 
   212  019A                     	;# 
   213  019A                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019D                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019E                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  019F                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  019F                     	;# 
   233  020C                     	;# 
   234  020D                     	;# 
   235  020E                     	;# 
   236  0211                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0212                     	;# 
   240  0213                     	;# 
   241  0213                     	;# 
   242  0214                     	;# 
   243  0214                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  028C                     	;# 
   253  028D                     	;# 
   254  028E                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0294                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  029B                     	;# 
   265  029E                     	;# 
   266  030C                     	;# 
   267  030D                     	;# 
   268  030E                     	;# 
   269  038C                     	;# 
   270  038D                     	;# 
   271  038E                     	;# 
   272  0391                     	;# 
   273  0392                     	;# 
   274  0393                     	;# 
   275  0394                     	;# 
   276  0395                     	;# 
   277  0396                     	;# 
   278  0397                     	;# 
   279  0398                     	;# 
   280  0399                     	;# 
   281  040E                     	;# 
   282  0413                     	;# 
   283  0413                     	;# 
   284  0414                     	;# 
   285  0414                     	;# 
   286  0415                     	;# 
   287  0416                     	;# 
   288  0417                     	;# 
   289  0418                     	;# 
   290  041A                     	;# 
   291  041A                     	;# 
   292  041B                     	;# 
   293  041B                     	;# 
   294  041C                     	;# 
   295  041D                     	;# 
   296  041E                     	;# 
   297  041F                     	;# 
   298  0493                     	;# 
   299  0494                     	;# 
   300  0495                     	;# 
   301  0496                     	;# 
   302  049A                     	;# 
   303  049B                     	;# 
   304  049C                     	;# 
   305  049D                     	;# 
   306  058C                     	;# 
   307  058C                     	;# 
   308  058D                     	;# 
   309  058E                     	;# 
   310  058E                     	;# 
   311  058F                     	;# 
   312  0590                     	;# 
   313  0590                     	;# 
   314  0591                     	;# 
   315  0592                     	;# 
   316  0592                     	;# 
   317  0593                     	;# 
   318  0594                     	;# 
   319  0594                     	;# 
   320  0595                     	;# 
   321  0596                     	;# 
   322  0596                     	;# 
   323  0597                     	;# 
   324  0598                     	;# 
   325  0599                     	;# 
   326  059A                     	;# 
   327  059B                     	;# 
   328  059B                     	;# 
   329  059C                     	;# 
   330  059D                     	;# 
   331  060C                     	;# 
   332  060C                     	;# 
   333  060D                     	;# 
   334  060E                     	;# 
   335  060F                     	;# 
   336  060F                     	;# 
   337  0610                     	;# 
   338  0611                     	;# 
   339  0612                     	;# 
   340  0613                     	;# 
   341  0614                     	;# 
   342  0617                     	;# 
   343  0617                     	;# 
   344  0618                     	;# 
   345  0619                     	;# 
   346  061A                     	;# 
   347  061A                     	;# 
   348  061B                     	;# 
   349  061C                     	;# 
   350  0691                     	;# 
   351  0692                     	;# 
   352  0693                     	;# 
   353  0694                     	;# 
   354  0695                     	;# 
   355  0696                     	;# 
   356  0697                     	;# 
   357  0699                     	;# 
   358  069A                     	;# 
   359  0711                     	;# 
   360  0712                     	;# 
   361  0713                     	;# 
   362  0714                     	;# 
   363  0715                     	;# 
   364  0718                     	;# 
   365  0718                     	;# 
   366  0719                     	;# 
   367  071A                     	;# 
   368  071A                     	;# 
   369  071B                     	;# 
   370  071C                     	;# 
   371  071D                     	;# 
   372  0791                     	;# 
   373  0791                     	;# 
   374  0792                     	;# 
   375  0793                     	;# 
   376  0793                     	;# 
   377  0794                     	;# 
   378  0795                     	;# 
   379  0795                     	;# 
   380  0796                     	;# 
   381  0797                     	;# 
   382  0797                     	;# 
   383  0798                     	;# 
   384  0799                     	;# 
   385  079A                     	;# 
   386  080C                     	;# 
   387  080C                     	;# 
   388  080D                     	;# 
   389  080E                     	;# 
   390  080E                     	;# 
   391  080F                     	;# 
   392  0810                     	;# 
   393  0810                     	;# 
   394  0811                     	;# 
   395  0812                     	;# 
   396  0812                     	;# 
   397  0813                     	;# 
   398  0814                     	;# 
   399  0815                     	;# 
   400  0816                     	;# 
   401  0817                     	;# 
   402  0818                     	;# 
   403  0819                     	;# 
   404  081A                     	;# 
   405  081A                     	;# 
   406  081B                     	;# 
   407  081C                     	;# 
   408  081C                     	;# 
   409  081D                     	;# 
   410  088C                     	;# 
   411  088D                     	;# 
   412  088E                     	;# 
   413  088F                     	;# 
   414  088F                     	;# 
   415  0890                     	;# 
   416  0891                     	;# 
   417  0892                     	;# 
   418  0893                     	;# 
   419  0893                     	;# 
   420  0894                     	;# 
   421  0895                     	;# 
   422  0896                     	;# 
   423  0897                     	;# 
   424  0897                     	;# 
   425  0898                     	;# 
   426  0899                     	;# 
   427  0D8C                     	;# 
   428  0D8C                     	;# 
   429  0D8D                     	;# 
   430  0D8E                     	;# 
   431  0D8F                     	;# 
   432  0D8F                     	;# 
   433  0D90                     	;# 
   434  0D91                     	;# 
   435  0D92                     	;# 
   436  0D92                     	;# 
   437  0D93                     	;# 
   438  0D94                     	;# 
   439  0D95                     	;# 
   440  0D95                     	;# 
   441  0D96                     	;# 
   442  0D97                     	;# 
   443  0D98                     	;# 
   444  0D99                     	;# 
   445  0D9A                     	;# 
   446  0D9B                     	;# 
   447  0D9C                     	;# 
   448  0D9D                     	;# 
   449  0D9E                     	;# 
   450  0D9E                     	;# 
   451  0D9F                     	;# 
   452  0DA0                     	;# 
   453  0DA1                     	;# 
   454  0DA1                     	;# 
   455  0DA2                     	;# 
   456  0DA3                     	;# 
   457  0DA4                     	;# 
   458  0DA4                     	;# 
   459  0DA5                     	;# 
   460  0DA6                     	;# 
   461  0DA7                     	;# 
   462  0DA7                     	;# 
   463  0DA8                     	;# 
   464  0DA9                     	;# 
   465  0DAA                     	;# 
   466  0DAB                     	;# 
   467  0DAC                     	;# 
   468  0DAD                     	;# 
   469  0DAE                     	;# 
   470  0DAF                     	;# 
   471  0E0F                     	;# 
   472  0E10                     	;# 
   473  0E11                     	;# 
   474  0E12                     	;# 
   475  0E13                     	;# 
   476  0E14                     	;# 
   477  0E15                     	;# 
   478  0E16                     	;# 
   479  0E17                     	;# 
   480  0E18                     	;# 
   481  0E19                     	;# 
   482  0E1A                     	;# 
   483  0E1B                     	;# 
   484  0E1C                     	;# 
   485  0E1D                     	;# 
   486  0E1E                     	;# 
   487  0E1F                     	;# 
   488  0E20                     	;# 
   489  0E21                     	;# 
   490  0E22                     	;# 
   491  0E23                     	;# 
   492  0E24                     	;# 
   493  0E25                     	;# 
   494  0E26                     	;# 
   495  0E27                     	;# 
   496  0E28                     	;# 
   497  0E29                     	;# 
   498  0E2A                     	;# 
   499  0E2B                     	;# 
   500  0E2C                     	;# 
   501  0E2D                     	;# 
   502  0E2E                     	;# 
   503  0E90                     	;# 
   504  0E91                     	;# 
   505  0E92                     	;# 
   506  0E94                     	;# 
   507  0E95                     	;# 
   508  0E9C                     	;# 
   509  0E9D                     	;# 
   510  0E9E                     	;# 
   511  0E9F                     	;# 
   512  0EA0                     	;# 
   513  0EA1                     	;# 
   514  0EA2                     	;# 
   515  0EA3                     	;# 
   516  0EA4                     	;# 
   517  0EA5                     	;# 
   518  0EA6                     	;# 
   519  0EA7                     	;# 
   520  0F0F                     	;# 
   521  0F10                     	;# 
   522  0F11                     	;# 
   523  0F12                     	;# 
   524  0F13                     	;# 
   525  0F14                     	;# 
   526  0F15                     	;# 
   527  0F16                     	;# 
   528  0F17                     	;# 
   529  0F18                     	;# 
   530  0F19                     	;# 
   531  0F1A                     	;# 
   532  0F1B                     	;# 
   533  0F1C                     	;# 
   534  0F1D                     	;# 
   535  0F1E                     	;# 
   536  0F1F                     	;# 
   537  0F20                     	;# 
   538  0F21                     	;# 
   539  0F22                     	;# 
   540  0F23                     	;# 
   541  0F24                     	;# 
   542  0F25                     	;# 
   543  0F26                     	;# 
   544  0F27                     	;# 
   545  0F28                     	;# 
   546  0F29                     	;# 
   547  0F2A                     	;# 
   548  0F2B                     	;# 
   549  0F2C                     	;# 
   550  0F2D                     	;# 
   551  0F2E                     	;# 
   552  0F2F                     	;# 
   553  0F30                     	;# 
   554  0F31                     	;# 
   555  0F32                     	;# 
   556  0F33                     	;# 
   557  0F34                     	;# 
   558  0F35                     	;# 
   559  0F36                     	;# 
   560  0F37                     	;# 
   561  0FE4                     	;# 
   562  0FE5                     	;# 
   563  0FE6                     	;# 
   564  0FE7                     	;# 
   565  0FE8                     	;# 
   566  0FE9                     	;# 
   567  0FEA                     	;# 
   568  0FEB                     	;# 
   569  0FED                     	;# 
   570  0FEE                     	;# 
   571  0FEF                     	;# 
   572  0000                     	;# 
   573  0001                     	;# 
   574  0002                     	;# 
   575  0003                     	;# 
   576  0004                     	;# 
   577  0005                     	;# 
   578  0006                     	;# 
   579  0007                     	;# 
   580  0008                     	;# 
   581  0009                     	;# 
   582  000A                     	;# 
   583  000B                     	;# 
   584  000C                     	;# 
   585  000D                     	;# 
   586  000E                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001A                     	;# 
   600  001B                     	;# 
   601  001B                     	;# 
   602  001C                     	;# 
   603  001D                     	;# 
   604  001E                     	;# 
   605  001F                     	;# 
   606  008C                     	;# 
   607  008D                     	;# 
   608  008E                     	;# 
   609  0090                     	;# 
   610  0091                     	;# 
   611  0092                     	;# 
   612  0093                     	;# 
   613  0094                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009A                     	;# 
   619  009B                     	;# 
   620  009B                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009E                     	;# 
   624  009F                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  0111                     	;# 
   629  0112                     	;# 
   630  0113                     	;# 
   631  0114                     	;# 
   632  0115                     	;# 
   633  0116                     	;# 
   634  0117                     	;# 
   635  0118                     	;# 
   636  0119                     	;# 
   637  011C                     	;# 
   638  018C                     	;# 
   639  018D                     	;# 
   640  018E                     	;# 
   641  0191                     	;# 
   642  0191                     	;# 
   643  0192                     	;# 
   644  0193                     	;# 
   645  0193                     	;# 
   646  0194                     	;# 
   647  0195                     	;# 
   648  0196                     	;# 
   649  0197                     	;# 
   650  0199                     	;# 
   651  0199                     	;# 
   652  0199                     	;# 
   653  019A                     	;# 
   654  019A                     	;# 
   655  019A                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019B                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019C                     	;# 
   662  019C                     	;# 
   663  019C                     	;# 
   664  019D                     	;# 
   665  019D                     	;# 
   666  019D                     	;# 
   667  019E                     	;# 
   668  019E                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  019F                     	;# 
   672  019F                     	;# 
   673  019F                     	;# 
   674  019F                     	;# 
   675  020C                     	;# 
   676  020D                     	;# 
   677  020E                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0216                     	;# 
   691  0216                     	;# 
   692  0217                     	;# 
   693  0217                     	;# 
   694  028C                     	;# 
   695  028D                     	;# 
   696  028E                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0294                     	;# 
   702  0298                     	;# 
   703  0298                     	;# 
   704  0299                     	;# 
   705  029A                     	;# 
   706  029B                     	;# 
   707  029E                     	;# 
   708  030C                     	;# 
   709  030D                     	;# 
   710  030E                     	;# 
   711  038C                     	;# 
   712  038D                     	;# 
   713  038E                     	;# 
   714  0391                     	;# 
   715  0392                     	;# 
   716  0393                     	;# 
   717  0394                     	;# 
   718  0395                     	;# 
   719  0396                     	;# 
   720  0397                     	;# 
   721  0398                     	;# 
   722  0399                     	;# 
   723  040E                     	;# 
   724  0413                     	;# 
   725  0413                     	;# 
   726  0414                     	;# 
   727  0414                     	;# 
   728  0415                     	;# 
   729  0416                     	;# 
   730  0417                     	;# 
   731  0418                     	;# 
   732  041A                     	;# 
   733  041A                     	;# 
   734  041B                     	;# 
   735  041B                     	;# 
   736  041C                     	;# 
   737  041D                     	;# 
   738  041E                     	;# 
   739  041F                     	;# 
   740  0493                     	;# 
   741  0494                     	;# 
   742  0495                     	;# 
   743  0496                     	;# 
   744  049A                     	;# 
   745  049B                     	;# 
   746  049C                     	;# 
   747  049D                     	;# 
   748  058C                     	;# 
   749  058C                     	;# 
   750  058D                     	;# 
   751  058E                     	;# 
   752  058E                     	;# 
   753  058F                     	;# 
   754  0590                     	;# 
   755  0590                     	;# 
   756  0591                     	;# 
   757  0592                     	;# 
   758  0592                     	;# 
   759  0593                     	;# 
   760  0594                     	;# 
   761  0594                     	;# 
   762  0595                     	;# 
   763  0596                     	;# 
   764  0596                     	;# 
   765  0597                     	;# 
   766  0598                     	;# 
   767  0599                     	;# 
   768  059A                     	;# 
   769  059B                     	;# 
   770  059B                     	;# 
   771  059C                     	;# 
   772  059D                     	;# 
   773  060C                     	;# 
   774  060C                     	;# 
   775  060D                     	;# 
   776  060E                     	;# 
   777  060F                     	;# 
   778  060F                     	;# 
   779  0610                     	;# 
   780  0611                     	;# 
   781  0612                     	;# 
   782  0613                     	;# 
   783  0614                     	;# 
   784  0617                     	;# 
   785  0617                     	;# 
   786  0618                     	;# 
   787  0619                     	;# 
   788  061A                     	;# 
   789  061A                     	;# 
   790  061B                     	;# 
   791  061C                     	;# 
   792  0691                     	;# 
   793  0692                     	;# 
   794  0693                     	;# 
   795  0694                     	;# 
   796  0695                     	;# 
   797  0696                     	;# 
   798  0697                     	;# 
   799  0699                     	;# 
   800  069A                     	;# 
   801  0711                     	;# 
   802  0712                     	;# 
   803  0713                     	;# 
   804  0714                     	;# 
   805  0715                     	;# 
   806  0718                     	;# 
   807  0718                     	;# 
   808  0719                     	;# 
   809  071A                     	;# 
   810  071A                     	;# 
   811  071B                     	;# 
   812  071C                     	;# 
   813  071D                     	;# 
   814  0791                     	;# 
   815  0791                     	;# 
   816  0792                     	;# 
   817  0793                     	;# 
   818  0793                     	;# 
   819  0794                     	;# 
   820  0795                     	;# 
   821  0795                     	;# 
   822  0796                     	;# 
   823  0797                     	;# 
   824  0797                     	;# 
   825  0798                     	;# 
   826  0799                     	;# 
   827  079A                     	;# 
   828  080C                     	;# 
   829  080C                     	;# 
   830  080D                     	;# 
   831  080E                     	;# 
   832  080E                     	;# 
   833  080F                     	;# 
   834  0810                     	;# 
   835  0810                     	;# 
   836  0811                     	;# 
   837  0812                     	;# 
   838  0812                     	;# 
   839  0813                     	;# 
   840  0814                     	;# 
   841  0815                     	;# 
   842  0816                     	;# 
   843  0817                     	;# 
   844  0818                     	;# 
   845  0819                     	;# 
   846  081A                     	;# 
   847  081A                     	;# 
   848  081B                     	;# 
   849  081C                     	;# 
   850  081C                     	;# 
   851  081D                     	;# 
   852  088C                     	;# 
   853  088D                     	;# 
   854  088E                     	;# 
   855  088F                     	;# 
   856  088F                     	;# 
   857  0890                     	;# 
   858  0891                     	;# 
   859  0892                     	;# 
   860  0893                     	;# 
   861  0893                     	;# 
   862  0894                     	;# 
   863  0895                     	;# 
   864  0896                     	;# 
   865  0897                     	;# 
   866  0897                     	;# 
   867  0898                     	;# 
   868  0899                     	;# 
   869  0D8C                     	;# 
   870  0D8C                     	;# 
   871  0D8D                     	;# 
   872  0D8E                     	;# 
   873  0D8F                     	;# 
   874  0D8F                     	;# 
   875  0D90                     	;# 
   876  0D91                     	;# 
   877  0D92                     	;# 
   878  0D92                     	;# 
   879  0D93                     	;# 
   880  0D94                     	;# 
   881  0D95                     	;# 
   882  0D95                     	;# 
   883  0D96                     	;# 
   884  0D97                     	;# 
   885  0D98                     	;# 
   886  0D99                     	;# 
   887  0D9A                     	;# 
   888  0D9B                     	;# 
   889  0D9C                     	;# 
   890  0D9D                     	;# 
   891  0D9E                     	;# 
   892  0D9E                     	;# 
   893  0D9F                     	;# 
   894  0DA0                     	;# 
   895  0DA1                     	;# 
   896  0DA1                     	;# 
   897  0DA2                     	;# 
   898  0DA3                     	;# 
   899  0DA4                     	;# 
   900  0DA4                     	;# 
   901  0DA5                     	;# 
   902  0DA6                     	;# 
   903  0DA7                     	;# 
   904  0DA7                     	;# 
   905  0DA8                     	;# 
   906  0DA9                     	;# 
   907  0DAA                     	;# 
   908  0DAB                     	;# 
   909  0DAC                     	;# 
   910  0DAD                     	;# 
   911  0DAE                     	;# 
   912  0DAF                     	;# 
   913  0E0F                     	;# 
   914  0E10                     	;# 
   915  0E11                     	;# 
   916  0E12                     	;# 
   917  0E13                     	;# 
   918  0E14                     	;# 
   919  0E15                     	;# 
   920  0E16                     	;# 
   921  0E17                     	;# 
   922  0E18                     	;# 
   923  0E19                     	;# 
   924  0E1A                     	;# 
   925  0E1B                     	;# 
   926  0E1C                     	;# 
   927  0E1D                     	;# 
   928  0E1E                     	;# 
   929  0E1F                     	;# 
   930  0E20                     	;# 
   931  0E21                     	;# 
   932  0E22                     	;# 
   933  0E23                     	;# 
   934  0E24                     	;# 
   935  0E25                     	;# 
   936  0E26                     	;# 
   937  0E27                     	;# 
   938  0E28                     	;# 
   939  0E29                     	;# 
   940  0E2A                     	;# 
   941  0E2B                     	;# 
   942  0E2C                     	;# 
   943  0E2D                     	;# 
   944  0E2E                     	;# 
   945  0E90                     	;# 
   946  0E91                     	;# 
   947  0E92                     	;# 
   948  0E94                     	;# 
   949  0E95                     	;# 
   950  0E9C                     	;# 
   951  0E9D                     	;# 
   952  0E9E                     	;# 
   953  0E9F                     	;# 
   954  0EA0                     	;# 
   955  0EA1                     	;# 
   956  0EA2                     	;# 
   957  0EA3                     	;# 
   958  0EA4                     	;# 
   959  0EA5                     	;# 
   960  0EA6                     	;# 
   961  0EA7                     	;# 
   962  0F0F                     	;# 
   963  0F10                     	;# 
   964  0F11                     	;# 
   965  0F12                     	;# 
   966  0F13                     	;# 
   967  0F14                     	;# 
   968  0F15                     	;# 
   969  0F16                     	;# 
   970  0F17                     	;# 
   971  0F18                     	;# 
   972  0F19                     	;# 
   973  0F1A                     	;# 
   974  0F1B                     	;# 
   975  0F1C                     	;# 
   976  0F1D                     	;# 
   977  0F1E                     	;# 
   978  0F1F                     	;# 
   979  0F20                     	;# 
   980  0F21                     	;# 
   981  0F22                     	;# 
   982  0F23                     	;# 
   983  0F24                     	;# 
   984  0F25                     	;# 
   985  0F26                     	;# 
   986  0F27                     	;# 
   987  0F28                     	;# 
   988  0F29                     	;# 
   989  0F2A                     	;# 
   990  0F2B                     	;# 
   991  0F2C                     	;# 
   992  0F2D                     	;# 
   993  0F2E                     	;# 
   994  0F2F                     	;# 
   995  0F30                     	;# 
   996  0F31                     	;# 
   997  0F32                     	;# 
   998  0F33                     	;# 
   999  0F34                     	;# 
  1000  0F35                     	;# 
  1001  0F36                     	;# 
  1002  0F37                     	;# 
  1003  0FE4                     	;# 
  1004  0FE5                     	;# 
  1005  0FE6                     	;# 
  1006  0FE7                     	;# 
  1007  0FE8                     	;# 
  1008  0FE9                     	;# 
  1009  0FEA                     	;# 
  1010  0FEB                     	;# 
  1011  0FED                     	;# 
  1012  0FEE                     	;# 
  1013  0FEF                     	;# 
  1014  0000                     	;# 
  1015  0001                     	;# 
  1016  0002                     	;# 
  1017  0003                     	;# 
  1018  0004                     	;# 
  1019  0005                     	;# 
  1020  0006                     	;# 
  1021  0007                     	;# 
  1022  0008                     	;# 
  1023  0009                     	;# 
  1024  000A                     	;# 
  1025  000B                     	;# 
  1026  000C                     	;# 
  1027  000D                     	;# 
  1028  000E                     	;# 
  1029  0010                     	;# 
  1030  0011                     	;# 
  1031  0012                     	;# 
  1032  0013                     	;# 
  1033  0014                     	;# 
  1034  0015                     	;# 
  1035  0016                     	;# 
  1036  0016                     	;# 
  1037  0017                     	;# 
  1038  0018                     	;# 
  1039  0019                     	;# 
  1040  001A                     	;# 
  1041  001A                     	;# 
  1042  001B                     	;# 
  1043  001B                     	;# 
  1044  001C                     	;# 
  1045  001D                     	;# 
  1046  001E                     	;# 
  1047  001F                     	;# 
  1048  008C                     	;# 
  1049  008D                     	;# 
  1050  008E                     	;# 
  1051  0090                     	;# 
  1052  0091                     	;# 
  1053  0092                     	;# 
  1054  0093                     	;# 
  1055  0094                     	;# 
  1056  0095                     	;# 
  1057  0096                     	;# 
  1058  0098                     	;# 
  1059  0099                     	;# 
  1060  009A                     	;# 
  1061  009B                     	;# 
  1062  009B                     	;# 
  1063  009C                     	;# 
  1064  009D                     	;# 
  1065  009E                     	;# 
  1066  009F                     	;# 
  1067  010C                     	;# 
  1068  010D                     	;# 
  1069  010E                     	;# 
  1070  0111                     	;# 
  1071  0112                     	;# 
  1072  0113                     	;# 
  1073  0114                     	;# 
  1074  0115                     	;# 
  1075  0116                     	;# 
  1076  0117                     	;# 
  1077  0118                     	;# 
  1078  0119                     	;# 
  1079  011C                     	;# 
  1080  018C                     	;# 
  1081  018D                     	;# 
  1082  018E                     	;# 
  1083  0191                     	;# 
  1084  0191                     	;# 
  1085  0192                     	;# 
  1086  0193                     	;# 
  1087  0193                     	;# 
  1088  0194                     	;# 
  1089  0195                     	;# 
  1090  0196                     	;# 
  1091  0197                     	;# 
  1092  0199                     	;# 
  1093  0199                     	;# 
  1094  0199                     	;# 
  1095  019A                     	;# 
  1096  019A                     	;# 
  1097  019A                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019C                     	;# 
  1104  019C                     	;# 
  1105  019C                     	;# 
  1106  019D                     	;# 
  1107  019D                     	;# 
  1108  019D                     	;# 
  1109  019E                     	;# 
  1110  019E                     	;# 
  1111  019E                     	;# 
  1112  019F                     	;# 
  1113  019F                     	;# 
  1114  019F                     	;# 
  1115  019F                     	;# 
  1116  019F                     	;# 
  1117  020C                     	;# 
  1118  020D                     	;# 
  1119  020E                     	;# 
  1120  0211                     	;# 
  1121  0211                     	;# 
  1122  0212                     	;# 
  1123  0212                     	;# 
  1124  0213                     	;# 
  1125  0213                     	;# 
  1126  0214                     	;# 
  1127  0214                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  028C                     	;# 
  1137  028D                     	;# 
  1138  028E                     	;# 
  1139  0291                     	;# 
  1140  0291                     	;# 
  1141  0292                     	;# 
  1142  0293                     	;# 
  1143  0294                     	;# 
  1144  0298                     	;# 
  1145  0298                     	;# 
  1146  0299                     	;# 
  1147  029A                     	;# 
  1148  029B                     	;# 
  1149  029E                     	;# 
  1150  030C                     	;# 
  1151  030D                     	;# 
  1152  030E                     	;# 
  1153  038C                     	;# 
  1154  038D                     	;# 
  1155  038E                     	;# 
  1156  0391                     	;# 
  1157  0392                     	;# 
  1158  0393                     	;# 
  1159  0394                     	;# 
  1160  0395                     	;# 
  1161  0396                     	;# 
  1162  0397                     	;# 
  1163  0398                     	;# 
  1164  0399                     	;# 
  1165  040E                     	;# 
  1166  0413                     	;# 
  1167  0413                     	;# 
  1168  0414                     	;# 
  1169  0414                     	;# 
  1170  0415                     	;# 
  1171  0416                     	;# 
  1172  0417                     	;# 
  1173  0418                     	;# 
  1174  041A                     	;# 
  1175  041A                     	;# 
  1176  041B                     	;# 
  1177  041B                     	;# 
  1178  041C                     	;# 
  1179  041D                     	;# 
  1180  041E                     	;# 
  1181  041F                     	;# 
  1182  0493                     	;# 
  1183  0494                     	;# 
  1184  0495                     	;# 
  1185  0496                     	;# 
  1186  049A                     	;# 
  1187  049B                     	;# 
  1188  049C                     	;# 
  1189  049D                     	;# 
  1190  058C                     	;# 
  1191  058C                     	;# 
  1192  058D                     	;# 
  1193  058E                     	;# 
  1194  058E                     	;# 
  1195  058F                     	;# 
  1196  0590                     	;# 
  1197  0590                     	;# 
  1198  0591                     	;# 
  1199  0592                     	;# 
  1200  0592                     	;# 
  1201  0593                     	;# 
  1202  0594                     	;# 
  1203  0594                     	;# 
  1204  0595                     	;# 
  1205  0596                     	;# 
  1206  0596                     	;# 
  1207  0597                     	;# 
  1208  0598                     	;# 
  1209  0599                     	;# 
  1210  059A                     	;# 
  1211  059B                     	;# 
  1212  059B                     	;# 
  1213  059C                     	;# 
  1214  059D                     	;# 
  1215  060C                     	;# 
  1216  060C                     	;# 
  1217  060D                     	;# 
  1218  060E                     	;# 
  1219  060F                     	;# 
  1220  060F                     	;# 
  1221  0610                     	;# 
  1222  0611                     	;# 
  1223  0612                     	;# 
  1224  0613                     	;# 
  1225  0614                     	;# 
  1226  0617                     	;# 
  1227  0617                     	;# 
  1228  0618                     	;# 
  1229  0619                     	;# 
  1230  061A                     	;# 
  1231  061A                     	;# 
  1232  061B                     	;# 
  1233  061C                     	;# 
  1234  0691                     	;# 
  1235  0692                     	;# 
  1236  0693                     	;# 
  1237  0694                     	;# 
  1238  0695                     	;# 
  1239  0696                     	;# 
  1240  0697                     	;# 
  1241  0699                     	;# 
  1242  069A                     	;# 
  1243  0711                     	;# 
  1244  0712                     	;# 
  1245  0713                     	;# 
  1246  0714                     	;# 
  1247  0715                     	;# 
  1248  0718                     	;# 
  1249  0718                     	;# 
  1250  0719                     	;# 
  1251  071A                     	;# 
  1252  071A                     	;# 
  1253  071B                     	;# 
  1254  071C                     	;# 
  1255  071D                     	;# 
  1256  0791                     	;# 
  1257  0791                     	;# 
  1258  0792                     	;# 
  1259  0793                     	;# 
  1260  0793                     	;# 
  1261  0794                     	;# 
  1262  0795                     	;# 
  1263  0795                     	;# 
  1264  0796                     	;# 
  1265  0797                     	;# 
  1266  0797                     	;# 
  1267  0798                     	;# 
  1268  0799                     	;# 
  1269  079A                     	;# 
  1270  080C                     	;# 
  1271  080C                     	;# 
  1272  080D                     	;# 
  1273  080E                     	;# 
  1274  080E                     	;# 
  1275  080F                     	;# 
  1276  0810                     	;# 
  1277  0810                     	;# 
  1278  0811                     	;# 
  1279  0812                     	;# 
  1280  0812                     	;# 
  1281  0813                     	;# 
  1282  0814                     	;# 
  1283  0815                     	;# 
  1284  0816                     	;# 
  1285  0817                     	;# 
  1286  0818                     	;# 
  1287  0819                     	;# 
  1288  081A                     	;# 
  1289  081A                     	;# 
  1290  081B                     	;# 
  1291  081C                     	;# 
  1292  081C                     	;# 
  1293  081D                     	;# 
  1294  088C                     	;# 
  1295  088D                     	;# 
  1296  088E                     	;# 
  1297  088F                     	;# 
  1298  088F                     	;# 
  1299  0890                     	;# 
  1300  0891                     	;# 
  1301  0892                     	;# 
  1302  0893                     	;# 
  1303  0893                     	;# 
  1304  0894                     	;# 
  1305  0895                     	;# 
  1306  0896                     	;# 
  1307  0897                     	;# 
  1308  0897                     	;# 
  1309  0898                     	;# 
  1310  0899                     	;# 
  1311  0D8C                     	;# 
  1312  0D8C                     	;# 
  1313  0D8D                     	;# 
  1314  0D8E                     	;# 
  1315  0D8F                     	;# 
  1316  0D8F                     	;# 
  1317  0D90                     	;# 
  1318  0D91                     	;# 
  1319  0D92                     	;# 
  1320  0D92                     	;# 
  1321  0D93                     	;# 
  1322  0D94                     	;# 
  1323  0D95                     	;# 
  1324  0D95                     	;# 
  1325  0D96                     	;# 
  1326  0D97                     	;# 
  1327  0D98                     	;# 
  1328  0D99                     	;# 
  1329  0D9A                     	;# 
  1330  0D9B                     	;# 
  1331  0D9C                     	;# 
  1332  0D9D                     	;# 
  1333  0D9E                     	;# 
  1334  0D9E                     	;# 
  1335  0D9F                     	;# 
  1336  0DA0                     	;# 
  1337  0DA1                     	;# 
  1338  0DA1                     	;# 
  1339  0DA2                     	;# 
  1340  0DA3                     	;# 
  1341  0DA4                     	;# 
  1342  0DA4                     	;# 
  1343  0DA5                     	;# 
  1344  0DA6                     	;# 
  1345  0DA7                     	;# 
  1346  0DA7                     	;# 
  1347  0DA8                     	;# 
  1348  0DA9                     	;# 
  1349  0DAA                     	;# 
  1350  0DAB                     	;# 
  1351  0DAC                     	;# 
  1352  0DAD                     	;# 
  1353  0DAE                     	;# 
  1354  0DAF                     	;# 
  1355  0E0F                     	;# 
  1356  0E10                     	;# 
  1357  0E11                     	;# 
  1358  0E12                     	;# 
  1359  0E13                     	;# 
  1360  0E14                     	;# 
  1361  0E15                     	;# 
  1362  0E16                     	;# 
  1363  0E17                     	;# 
  1364  0E18                     	;# 
  1365  0E19                     	;# 
  1366  0E1A                     	;# 
  1367  0E1B                     	;# 
  1368  0E1C                     	;# 
  1369  0E1D                     	;# 
  1370  0E1E                     	;# 
  1371  0E1F                     	;# 
  1372  0E20                     	;# 
  1373  0E21                     	;# 
  1374  0E22                     	;# 
  1375  0E23                     	;# 
  1376  0E24                     	;# 
  1377  0E25                     	;# 
  1378  0E26                     	;# 
  1379  0E27                     	;# 
  1380  0E28                     	;# 
  1381  0E29                     	;# 
  1382  0E2A                     	;# 
  1383  0E2B                     	;# 
  1384  0E2C                     	;# 
  1385  0E2D                     	;# 
  1386  0E2E                     	;# 
  1387  0E90                     	;# 
  1388  0E91                     	;# 
  1389  0E92                     	;# 
  1390  0E94                     	;# 
  1391  0E95                     	;# 
  1392  0E9C                     	;# 
  1393  0E9D                     	;# 
  1394  0E9E                     	;# 
  1395  0E9F                     	;# 
  1396  0EA0                     	;# 
  1397  0EA1                     	;# 
  1398  0EA2                     	;# 
  1399  0EA3                     	;# 
  1400  0EA4                     	;# 
  1401  0EA5                     	;# 
  1402  0EA6                     	;# 
  1403  0EA7                     	;# 
  1404  0F0F                     	;# 
  1405  0F10                     	;# 
  1406  0F11                     	;# 
  1407  0F12                     	;# 
  1408  0F13                     	;# 
  1409  0F14                     	;# 
  1410  0F15                     	;# 
  1411  0F16                     	;# 
  1412  0F17                     	;# 
  1413  0F18                     	;# 
  1414  0F19                     	;# 
  1415  0F1A                     	;# 
  1416  0F1B                     	;# 
  1417  0F1C                     	;# 
  1418  0F1D                     	;# 
  1419  0F1E                     	;# 
  1420  0F1F                     	;# 
  1421  0F20                     	;# 
  1422  0F21                     	;# 
  1423  0F22                     	;# 
  1424  0F23                     	;# 
  1425  0F24                     	;# 
  1426  0F25                     	;# 
  1427  0F26                     	;# 
  1428  0F27                     	;# 
  1429  0F28                     	;# 
  1430  0F29                     	;# 
  1431  0F2A                     	;# 
  1432  0F2B                     	;# 
  1433  0F2C                     	;# 
  1434  0F2D                     	;# 
  1435  0F2E                     	;# 
  1436  0F2F                     	;# 
  1437  0F30                     	;# 
  1438  0F31                     	;# 
  1439  0F32                     	;# 
  1440  0F33                     	;# 
  1441  0F34                     	;# 
  1442  0F35                     	;# 
  1443  0F36                     	;# 
  1444  0F37                     	;# 
  1445  0FE4                     	;# 
  1446  0FE5                     	;# 
  1447  0FE6                     	;# 
  1448  0FE7                     	;# 
  1449  0FE8                     	;# 
  1450  0FE9                     	;# 
  1451  0FEA                     	;# 
  1452  0FEB                     	;# 
  1453  0FED                     	;# 
  1454  0FEE                     	;# 
  1455  0FEF                     	;# 
  1456  0000                     	;# 
  1457  0001                     	;# 
  1458  0002                     	;# 
  1459  0003                     	;# 
  1460  0004                     	;# 
  1461  0005                     	;# 
  1462  0006                     	;# 
  1463  0007                     	;# 
  1464  0008                     	;# 
  1465  0009                     	;# 
  1466  000A                     	;# 
  1467  000B                     	;# 
  1468  000C                     	;# 
  1469  000D                     	;# 
  1470  000E                     	;# 
  1471  0010                     	;# 
  1472  0011                     	;# 
  1473  0012                     	;# 
  1474  0013                     	;# 
  1475  0014                     	;# 
  1476  0015                     	;# 
  1477  0016                     	;# 
  1478  0016                     	;# 
  1479  0017                     	;# 
  1480  0018                     	;# 
  1481  0019                     	;# 
  1482  001A                     	;# 
  1483  001A                     	;# 
  1484  001B                     	;# 
  1485  001B                     	;# 
  1486  001C                     	;# 
  1487  001D                     	;# 
  1488  001E                     	;# 
  1489  001F                     	;# 
  1490  008C                     	;# 
  1491  008D                     	;# 
  1492  008E                     	;# 
  1493  0090                     	;# 
  1494  0091                     	;# 
  1495  0092                     	;# 
  1496  0093                     	;# 
  1497  0094                     	;# 
  1498  0095                     	;# 
  1499  0096                     	;# 
  1500  0098                     	;# 
  1501  0099                     	;# 
  1502  009A                     	;# 
  1503  009B                     	;# 
  1504  009B                     	;# 
  1505  009C                     	;# 
  1506  009D                     	;# 
  1507  009E                     	;# 
  1508  009F                     	;# 
  1509  010C                     	;# 
  1510  010D                     	;# 
  1511  010E                     	;# 
  1512  0111                     	;# 
  1513  0112                     	;# 
  1514  0113                     	;# 
  1515  0114                     	;# 
  1516  0115                     	;# 
  1517  0116                     	;# 
  1518  0117                     	;# 
  1519  0118                     	;# 
  1520  0119                     	;# 
  1521  011C                     	;# 
  1522  018C                     	;# 
  1523  018D                     	;# 
  1524  018E                     	;# 
  1525  0191                     	;# 
  1526  0191                     	;# 
  1527  0192                     	;# 
  1528  0193                     	;# 
  1529  0193                     	;# 
  1530  0194                     	;# 
  1531  0195                     	;# 
  1532  0196                     	;# 
  1533  0197                     	;# 
  1534  0199                     	;# 
  1535  0199                     	;# 
  1536  0199                     	;# 
  1537  019A                     	;# 
  1538  019A                     	;# 
  1539  019A                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019C                     	;# 
  1546  019C                     	;# 
  1547  019C                     	;# 
  1548  019D                     	;# 
  1549  019D                     	;# 
  1550  019D                     	;# 
  1551  019E                     	;# 
  1552  019E                     	;# 
  1553  019E                     	;# 
  1554  019F                     	;# 
  1555  019F                     	;# 
  1556  019F                     	;# 
  1557  019F                     	;# 
  1558  019F                     	;# 
  1559  020C                     	;# 
  1560  020D                     	;# 
  1561  020E                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  028C                     	;# 
  1579  028D                     	;# 
  1580  028E                     	;# 
  1581  0291                     	;# 
  1582  0291                     	;# 
  1583  0292                     	;# 
  1584  0293                     	;# 
  1585  0294                     	;# 
  1586  0298                     	;# 
  1587  0298                     	;# 
  1588  0299                     	;# 
  1589  029A                     	;# 
  1590  029B                     	;# 
  1591  029E                     	;# 
  1592  030C                     	;# 
  1593  030D                     	;# 
  1594  030E                     	;# 
  1595  038C                     	;# 
  1596  038D                     	;# 
  1597  038E                     	;# 
  1598  0391                     	;# 
  1599  0392                     	;# 
  1600  0393                     	;# 
  1601  0394                     	;# 
  1602  0395                     	;# 
  1603  0396                     	;# 
  1604  0397                     	;# 
  1605  0398                     	;# 
  1606  0399                     	;# 
  1607  040E                     	;# 
  1608  0413                     	;# 
  1609  0413                     	;# 
  1610  0414                     	;# 
  1611  0414                     	;# 
  1612  0415                     	;# 
  1613  0416                     	;# 
  1614  0417                     	;# 
  1615  0418                     	;# 
  1616  041A                     	;# 
  1617  041A                     	;# 
  1618  041B                     	;# 
  1619  041B                     	;# 
  1620  041C                     	;# 
  1621  041D                     	;# 
  1622  041E                     	;# 
  1623  041F                     	;# 
  1624  0493                     	;# 
  1625  0494                     	;# 
  1626  0495                     	;# 
  1627  0496                     	;# 
  1628  049A                     	;# 
  1629  049B                     	;# 
  1630  049C                     	;# 
  1631  049D                     	;# 
  1632  058C                     	;# 
  1633  058C                     	;# 
  1634  058D                     	;# 
  1635  058E                     	;# 
  1636  058E                     	;# 
  1637  058F                     	;# 
  1638  0590                     	;# 
  1639  0590                     	;# 
  1640  0591                     	;# 
  1641  0592                     	;# 
  1642  0592                     	;# 
  1643  0593                     	;# 
  1644  0594                     	;# 
  1645  0594                     	;# 
  1646  0595                     	;# 
  1647  0596                     	;# 
  1648  0596                     	;# 
  1649  0597                     	;# 
  1650  0598                     	;# 
  1651  0599                     	;# 
  1652  059A                     	;# 
  1653  059B                     	;# 
  1654  059B                     	;# 
  1655  059C                     	;# 
  1656  059D                     	;# 
  1657  060C                     	;# 
  1658  060C                     	;# 
  1659  060D                     	;# 
  1660  060E                     	;# 
  1661  060F                     	;# 
  1662  060F                     	;# 
  1663  0610                     	;# 
  1664  0611                     	;# 
  1665  0612                     	;# 
  1666  0613                     	;# 
  1667  0614                     	;# 
  1668  0617                     	;# 
  1669  0617                     	;# 
  1670  0618                     	;# 
  1671  0619                     	;# 
  1672  061A                     	;# 
  1673  061A                     	;# 
  1674  061B                     	;# 
  1675  061C                     	;# 
  1676  0691                     	;# 
  1677  0692                     	;# 
  1678  0693                     	;# 
  1679  0694                     	;# 
  1680  0695                     	;# 
  1681  0696                     	;# 
  1682  0697                     	;# 
  1683  0699                     	;# 
  1684  069A                     	;# 
  1685  0711                     	;# 
  1686  0712                     	;# 
  1687  0713                     	;# 
  1688  0714                     	;# 
  1689  0715                     	;# 
  1690  0718                     	;# 
  1691  0718                     	;# 
  1692  0719                     	;# 
  1693  071A                     	;# 
  1694  071A                     	;# 
  1695  071B                     	;# 
  1696  071C                     	;# 
  1697  071D                     	;# 
  1698  0791                     	;# 
  1699  0791                     	;# 
  1700  0792                     	;# 
  1701  0793                     	;# 
  1702  0793                     	;# 
  1703  0794                     	;# 
  1704  0795                     	;# 
  1705  0795                     	;# 
  1706  0796                     	;# 
  1707  0797                     	;# 
  1708  0797                     	;# 
  1709  0798                     	;# 
  1710  0799                     	;# 
  1711  079A                     	;# 
  1712  080C                     	;# 
  1713  080C                     	;# 
  1714  080D                     	;# 
  1715  080E                     	;# 
  1716  080E                     	;# 
  1717  080F                     	;# 
  1718  0810                     	;# 
  1719  0810                     	;# 
  1720  0811                     	;# 
  1721  0812                     	;# 
  1722  0812                     	;# 
  1723  0813                     	;# 
  1724  0814                     	;# 
  1725  0815                     	;# 
  1726  0816                     	;# 
  1727  0817                     	;# 
  1728  0818                     	;# 
  1729  0819                     	;# 
  1730  081A                     	;# 
  1731  081A                     	;# 
  1732  081B                     	;# 
  1733  081C                     	;# 
  1734  081C                     	;# 
  1735  081D                     	;# 
  1736  088C                     	;# 
  1737  088D                     	;# 
  1738  088E                     	;# 
  1739  088F                     	;# 
  1740  088F                     	;# 
  1741  0890                     	;# 
  1742  0891                     	;# 
  1743  0892                     	;# 
  1744  0893                     	;# 
  1745  0893                     	;# 
  1746  0894                     	;# 
  1747  0895                     	;# 
  1748  0896                     	;# 
  1749  0897                     	;# 
  1750  0897                     	;# 
  1751  0898                     	;# 
  1752  0899                     	;# 
  1753  0D8C                     	;# 
  1754  0D8C                     	;# 
  1755  0D8D                     	;# 
  1756  0D8E                     	;# 
  1757  0D8F                     	;# 
  1758  0D8F                     	;# 
  1759  0D90                     	;# 
  1760  0D91                     	;# 
  1761  0D92                     	;# 
  1762  0D92                     	;# 
  1763  0D93                     	;# 
  1764  0D94                     	;# 
  1765  0D95                     	;# 
  1766  0D95                     	;# 
  1767  0D96                     	;# 
  1768  0D97                     	;# 
  1769  0D98                     	;# 
  1770  0D99                     	;# 
  1771  0D9A                     	;# 
  1772  0D9B                     	;# 
  1773  0D9C                     	;# 
  1774  0D9D                     	;# 
  1775  0D9E                     	;# 
  1776  0D9E                     	;# 
  1777  0D9F                     	;# 
  1778  0DA0                     	;# 
  1779  0DA1                     	;# 
  1780  0DA1                     	;# 
  1781  0DA2                     	;# 
  1782  0DA3                     	;# 
  1783  0DA4                     	;# 
  1784  0DA4                     	;# 
  1785  0DA5                     	;# 
  1786  0DA6                     	;# 
  1787  0DA7                     	;# 
  1788  0DA7                     	;# 
  1789  0DA8                     	;# 
  1790  0DA9                     	;# 
  1791  0DAA                     	;# 
  1792  0DAB                     	;# 
  1793  0DAC                     	;# 
  1794  0DAD                     	;# 
  1795  0DAE                     	;# 
  1796  0DAF                     	;# 
  1797  0E0F                     	;# 
  1798  0E10                     	;# 
  1799  0E11                     	;# 
  1800  0E12                     	;# 
  1801  0E13                     	;# 
  1802  0E14                     	;# 
  1803  0E15                     	;# 
  1804  0E16                     	;# 
  1805  0E17                     	;# 
  1806  0E18                     	;# 
  1807  0E19                     	;# 
  1808  0E1A                     	;# 
  1809  0E1B                     	;# 
  1810  0E1C                     	;# 
  1811  0E1D                     	;# 
  1812  0E1E                     	;# 
  1813  0E1F                     	;# 
  1814  0E20                     	;# 
  1815  0E21                     	;# 
  1816  0E22                     	;# 
  1817  0E23                     	;# 
  1818  0E24                     	;# 
  1819  0E25                     	;# 
  1820  0E26                     	;# 
  1821  0E27                     	;# 
  1822  0E28                     	;# 
  1823  0E29                     	;# 
  1824  0E2A                     	;# 
  1825  0E2B                     	;# 
  1826  0E2C                     	;# 
  1827  0E2D                     	;# 
  1828  0E2E                     	;# 
  1829  0E90                     	;# 
  1830  0E91                     	;# 
  1831  0E92                     	;# 
  1832  0E94                     	;# 
  1833  0E95                     	;# 
  1834  0E9C                     	;# 
  1835  0E9D                     	;# 
  1836  0E9E                     	;# 
  1837  0E9F                     	;# 
  1838  0EA0                     	;# 
  1839  0EA1                     	;# 
  1840  0EA2                     	;# 
  1841  0EA3                     	;# 
  1842  0EA4                     	;# 
  1843  0EA5                     	;# 
  1844  0EA6                     	;# 
  1845  0EA7                     	;# 
  1846  0F0F                     	;# 
  1847  0F10                     	;# 
  1848  0F11                     	;# 
  1849  0F12                     	;# 
  1850  0F13                     	;# 
  1851  0F14                     	;# 
  1852  0F15                     	;# 
  1853  0F16                     	;# 
  1854  0F17                     	;# 
  1855  0F18                     	;# 
  1856  0F19                     	;# 
  1857  0F1A                     	;# 
  1858  0F1B                     	;# 
  1859  0F1C                     	;# 
  1860  0F1D                     	;# 
  1861  0F1E                     	;# 
  1862  0F1F                     	;# 
  1863  0F20                     	;# 
  1864  0F21                     	;# 
  1865  0F22                     	;# 
  1866  0F23                     	;# 
  1867  0F24                     	;# 
  1868  0F25                     	;# 
  1869  0F26                     	;# 
  1870  0F27                     	;# 
  1871  0F28                     	;# 
  1872  0F29                     	;# 
  1873  0F2A                     	;# 
  1874  0F2B                     	;# 
  1875  0F2C                     	;# 
  1876  0F2D                     	;# 
  1877  0F2E                     	;# 
  1878  0F2F                     	;# 
  1879  0F30                     	;# 
  1880  0F31                     	;# 
  1881  0F32                     	;# 
  1882  0F33                     	;# 
  1883  0F34                     	;# 
  1884  0F35                     	;# 
  1885  0F36                     	;# 
  1886  0F37                     	;# 
  1887  0FE4                     	;# 
  1888  0FE5                     	;# 
  1889  0FE6                     	;# 
  1890  0FE7                     	;# 
  1891  0FE8                     	;# 
  1892  0FE9                     	;# 
  1893  0FEA                     	;# 
  1894  0FEB                     	;# 
  1895  0FED                     	;# 
  1896  0FEE                     	;# 
  1897  0FEF                     	;# 
  1898  0000                     	;# 
  1899  0001                     	;# 
  1900  0002                     	;# 
  1901  0003                     	;# 
  1902  0004                     	;# 
  1903  0005                     	;# 
  1904  0006                     	;# 
  1905  0007                     	;# 
  1906  0008                     	;# 
  1907  0009                     	;# 
  1908  000A                     	;# 
  1909  000B                     	;# 
  1910  000C                     	;# 
  1911  000D                     	;# 
  1912  000E                     	;# 
  1913  0010                     	;# 
  1914  0011                     	;# 
  1915  0012                     	;# 
  1916  0013                     	;# 
  1917  0014                     	;# 
  1918  0015                     	;# 
  1919  0016                     	;# 
  1920  0016                     	;# 
  1921  0017                     	;# 
  1922  0018                     	;# 
  1923  0019                     	;# 
  1924  001A                     	;# 
  1925  001A                     	;# 
  1926  001B                     	;# 
  1927  001B                     	;# 
  1928  001C                     	;# 
  1929  001D                     	;# 
  1930  001E                     	;# 
  1931  001F                     	;# 
  1932  008C                     	;# 
  1933  008D                     	;# 
  1934  008E                     	;# 
  1935  0090                     	;# 
  1936  0091                     	;# 
  1937  0092                     	;# 
  1938  0093                     	;# 
  1939  0094                     	;# 
  1940  0095                     	;# 
  1941  0096                     	;# 
  1942  0098                     	;# 
  1943  0099                     	;# 
  1944  009A                     	;# 
  1945  009B                     	;# 
  1946  009B                     	;# 
  1947  009C                     	;# 
  1948  009D                     	;# 
  1949  009E                     	;# 
  1950  009F                     	;# 
  1951  010C                     	;# 
  1952  010D                     	;# 
  1953  010E                     	;# 
  1954  0111                     	;# 
  1955  0112                     	;# 
  1956  0113                     	;# 
  1957  0114                     	;# 
  1958  0115                     	;# 
  1959  0116                     	;# 
  1960  0117                     	;# 
  1961  0118                     	;# 
  1962  0119                     	;# 
  1963  011C                     	;# 
  1964  018C                     	;# 
  1965  018D                     	;# 
  1966  018E                     	;# 
  1967  0191                     	;# 
  1968  0191                     	;# 
  1969  0192                     	;# 
  1970  0193                     	;# 
  1971  0193                     	;# 
  1972  0194                     	;# 
  1973  0195                     	;# 
  1974  0196                     	;# 
  1975  0197                     	;# 
  1976  0199                     	;# 
  1977  0199                     	;# 
  1978  0199                     	;# 
  1979  019A                     	;# 
  1980  019A                     	;# 
  1981  019A                     	;# 
  1982  019B                     	;# 
  1983  019B                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019B                     	;# 
  1987  019C                     	;# 
  1988  019C                     	;# 
  1989  019C                     	;# 
  1990  019D                     	;# 
  1991  019D                     	;# 
  1992  019D                     	;# 
  1993  019E                     	;# 
  1994  019E                     	;# 
  1995  019E                     	;# 
  1996  019F                     	;# 
  1997  019F                     	;# 
  1998  019F                     	;# 
  1999  019F                     	;# 
  2000  019F                     	;# 
  2001  020C                     	;# 
  2002  020D                     	;# 
  2003  020E                     	;# 
  2004  0211                     	;# 
  2005  0211                     	;# 
  2006  0212                     	;# 
  2007  0212                     	;# 
  2008  0213                     	;# 
  2009  0213                     	;# 
  2010  0214                     	;# 
  2011  0214                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  028C                     	;# 
  2021  028D                     	;# 
  2022  028E                     	;# 
  2023  0291                     	;# 
  2024  0291                     	;# 
  2025  0292                     	;# 
  2026  0293                     	;# 
  2027  0294                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  029B                     	;# 
  2033  029E                     	;# 
  2034  030C                     	;# 
  2035  030D                     	;# 
  2036  030E                     	;# 
  2037  038C                     	;# 
  2038  038D                     	;# 
  2039  038E                     	;# 
  2040  0391                     	;# 
  2041  0392                     	;# 
  2042  0393                     	;# 
  2043  0394                     	;# 
  2044  0395                     	;# 
  2045  0396                     	;# 
  2046  0397                     	;# 
  2047  0398                     	;# 
  2048  0399                     	;# 
  2049  040E                     	;# 
  2050  0413                     	;# 
  2051  0413                     	;# 
  2052  0414                     	;# 
  2053  0414                     	;# 
  2054  0415                     	;# 
  2055  0416                     	;# 
  2056  0417                     	;# 
  2057  0418                     	;# 
  2058  041A                     	;# 
  2059  041A                     	;# 
  2060  041B                     	;# 
  2061  041B                     	;# 
  2062  041C                     	;# 
  2063  041D                     	;# 
  2064  041E                     	;# 
  2065  041F                     	;# 
  2066  0493                     	;# 
  2067  0494                     	;# 
  2068  0495                     	;# 
  2069  0496                     	;# 
  2070  049A                     	;# 
  2071  049B                     	;# 
  2072  049C                     	;# 
  2073  049D                     	;# 
  2074  058C                     	;# 
  2075  058C                     	;# 
  2076  058D                     	;# 
  2077  058E                     	;# 
  2078  058E                     	;# 
  2079  058F                     	;# 
  2080  0590                     	;# 
  2081  0590                     	;# 
  2082  0591                     	;# 
  2083  0592                     	;# 
  2084  0592                     	;# 
  2085  0593                     	;# 
  2086  0594                     	;# 
  2087  0594                     	;# 
  2088  0595                     	;# 
  2089  0596                     	;# 
  2090  0596                     	;# 
  2091  0597                     	;# 
  2092  0598                     	;# 
  2093  0599                     	;# 
  2094  059A                     	;# 
  2095  059B                     	;# 
  2096  059B                     	;# 
  2097  059C                     	;# 
  2098  059D                     	;# 
  2099  060C                     	;# 
  2100  060C                     	;# 
  2101  060D                     	;# 
  2102  060E                     	;# 
  2103  060F                     	;# 
  2104  060F                     	;# 
  2105  0610                     	;# 
  2106  0611                     	;# 
  2107  0612                     	;# 
  2108  0613                     	;# 
  2109  0614                     	;# 
  2110  0617                     	;# 
  2111  0617                     	;# 
  2112  0618                     	;# 
  2113  0619                     	;# 
  2114  061A                     	;# 
  2115  061A                     	;# 
  2116  061B                     	;# 
  2117  061C                     	;# 
  2118  0691                     	;# 
  2119  0692                     	;# 
  2120  0693                     	;# 
  2121  0694                     	;# 
  2122  0695                     	;# 
  2123  0696                     	;# 
  2124  0697                     	;# 
  2125  0699                     	;# 
  2126  069A                     	;# 
  2127  0711                     	;# 
  2128  0712                     	;# 
  2129  0713                     	;# 
  2130  0714                     	;# 
  2131  0715                     	;# 
  2132  0718                     	;# 
  2133  0718                     	;# 
  2134  0719                     	;# 
  2135  071A                     	;# 
  2136  071A                     	;# 
  2137  071B                     	;# 
  2138  071C                     	;# 
  2139  071D                     	;# 
  2140  0791                     	;# 
  2141  0791                     	;# 
  2142  0792                     	;# 
  2143  0793                     	;# 
  2144  0793                     	;# 
  2145  0794                     	;# 
  2146  0795                     	;# 
  2147  0795                     	;# 
  2148  0796                     	;# 
  2149  0797                     	;# 
  2150  0797                     	;# 
  2151  0798                     	;# 
  2152  0799                     	;# 
  2153  079A                     	;# 
  2154  080C                     	;# 
  2155  080C                     	;# 
  2156  080D                     	;# 
  2157  080E                     	;# 
  2158  080E                     	;# 
  2159  080F                     	;# 
  2160  0810                     	;# 
  2161  0810                     	;# 
  2162  0811                     	;# 
  2163  0812                     	;# 
  2164  0812                     	;# 
  2165  0813                     	;# 
  2166  0814                     	;# 
  2167  0815                     	;# 
  2168  0816                     	;# 
  2169  0817                     	;# 
  2170  0818                     	;# 
  2171  0819                     	;# 
  2172  081A                     	;# 
  2173  081A                     	;# 
  2174  081B                     	;# 
  2175  081C                     	;# 
  2176  081C                     	;# 
  2177  081D                     	;# 
  2178  088C                     	;# 
  2179  088D                     	;# 
  2180  088E                     	;# 
  2181  088F                     	;# 
  2182  088F                     	;# 
  2183  0890                     	;# 
  2184  0891                     	;# 
  2185  0892                     	;# 
  2186  0893                     	;# 
  2187  0893                     	;# 
  2188  0894                     	;# 
  2189  0895                     	;# 
  2190  0896                     	;# 
  2191  0897                     	;# 
  2192  0897                     	;# 
  2193  0898                     	;# 
  2194  0899                     	;# 
  2195  0D8C                     	;# 
  2196  0D8C                     	;# 
  2197  0D8D                     	;# 
  2198  0D8E                     	;# 
  2199  0D8F                     	;# 
  2200  0D8F                     	;# 
  2201  0D90                     	;# 
  2202  0D91                     	;# 
  2203  0D92                     	;# 
  2204  0D92                     	;# 
  2205  0D93                     	;# 
  2206  0D94                     	;# 
  2207  0D95                     	;# 
  2208  0D95                     	;# 
  2209  0D96                     	;# 
  2210  0D97                     	;# 
  2211  0D98                     	;# 
  2212  0D99                     	;# 
  2213  0D9A                     	;# 
  2214  0D9B                     	;# 
  2215  0D9C                     	;# 
  2216  0D9D                     	;# 
  2217  0D9E                     	;# 
  2218  0D9E                     	;# 
  2219  0D9F                     	;# 
  2220  0DA0                     	;# 
  2221  0DA1                     	;# 
  2222  0DA1                     	;# 
  2223  0DA2                     	;# 
  2224  0DA3                     	;# 
  2225  0DA4                     	;# 
  2226  0DA4                     	;# 
  2227  0DA5                     	;# 
  2228  0DA6                     	;# 
  2229  0DA7                     	;# 
  2230  0DA7                     	;# 
  2231  0DA8                     	;# 
  2232  0DA9                     	;# 
  2233  0DAA                     	;# 
  2234  0DAB                     	;# 
  2235  0DAC                     	;# 
  2236  0DAD                     	;# 
  2237  0DAE                     	;# 
  2238  0DAF                     	;# 
  2239  0E0F                     	;# 
  2240  0E10                     	;# 
  2241  0E11                     	;# 
  2242  0E12                     	;# 
  2243  0E13                     	;# 
  2244  0E14                     	;# 
  2245  0E15                     	;# 
  2246  0E16                     	;# 
  2247  0E17                     	;# 
  2248  0E18                     	;# 
  2249  0E19                     	;# 
  2250  0E1A                     	;# 
  2251  0E1B                     	;# 
  2252  0E1C                     	;# 
  2253  0E1D                     	;# 
  2254  0E1E                     	;# 
  2255  0E1F                     	;# 
  2256  0E20                     	;# 
  2257  0E21                     	;# 
  2258  0E22                     	;# 
  2259  0E23                     	;# 
  2260  0E24                     	;# 
  2261  0E25                     	;# 
  2262  0E26                     	;# 
  2263  0E27                     	;# 
  2264  0E28                     	;# 
  2265  0E29                     	;# 
  2266  0E2A                     	;# 
  2267  0E2B                     	;# 
  2268  0E2C                     	;# 
  2269  0E2D                     	;# 
  2270  0E2E                     	;# 
  2271  0E90                     	;# 
  2272  0E91                     	;# 
  2273  0E92                     	;# 
  2274  0E94                     	;# 
  2275  0E95                     	;# 
  2276  0E9C                     	;# 
  2277  0E9D                     	;# 
  2278  0E9E                     	;# 
  2279  0E9F                     	;# 
  2280  0EA0                     	;# 
  2281  0EA1                     	;# 
  2282  0EA2                     	;# 
  2283  0EA3                     	;# 
  2284  0EA4                     	;# 
  2285  0EA5                     	;# 
  2286  0EA6                     	;# 
  2287  0EA7                     	;# 
  2288  0F0F                     	;# 
  2289  0F10                     	;# 
  2290  0F11                     	;# 
  2291  0F12                     	;# 
  2292  0F13                     	;# 
  2293  0F14                     	;# 
  2294  0F15                     	;# 
  2295  0F16                     	;# 
  2296  0F17                     	;# 
  2297  0F18                     	;# 
  2298  0F19                     	;# 
  2299  0F1A                     	;# 
  2300  0F1B                     	;# 
  2301  0F1C                     	;# 
  2302  0F1D                     	;# 
  2303  0F1E                     	;# 
  2304  0F1F                     	;# 
  2305  0F20                     	;# 
  2306  0F21                     	;# 
  2307  0F22                     	;# 
  2308  0F23                     	;# 
  2309  0F24                     	;# 
  2310  0F25                     	;# 
  2311  0F26                     	;# 
  2312  0F27                     	;# 
  2313  0F28                     	;# 
  2314  0F29                     	;# 
  2315  0F2A                     	;# 
  2316  0F2B                     	;# 
  2317  0F2C                     	;# 
  2318  0F2D                     	;# 
  2319  0F2E                     	;# 
  2320  0F2F                     	;# 
  2321  0F30                     	;# 
  2322  0F31                     	;# 
  2323  0F32                     	;# 
  2324  0F33                     	;# 
  2325  0F34                     	;# 
  2326  0F35                     	;# 
  2327  0F36                     	;# 
  2328  0F37                     	;# 
  2329  0FE4                     	;# 
  2330  0FE5                     	;# 
  2331  0FE6                     	;# 
  2332  0FE7                     	;# 
  2333  0FE8                     	;# 
  2334  0FE9                     	;# 
  2335  0FEA                     	;# 
  2336  0FEB                     	;# 
  2337  0FED                     	;# 
  2338  0FEE                     	;# 
  2339  0FEF                     	;# 
  2340  0000                     	;# 
  2341  0001                     	;# 
  2342  0002                     	;# 
  2343  0003                     	;# 
  2344  0004                     	;# 
  2345  0005                     	;# 
  2346  0006                     	;# 
  2347  0007                     	;# 
  2348  0008                     	;# 
  2349  0009                     	;# 
  2350  000A                     	;# 
  2351  000B                     	;# 
  2352  000C                     	;# 
  2353  000D                     	;# 
  2354  000E                     	;# 
  2355  0010                     	;# 
  2356  0011                     	;# 
  2357  0012                     	;# 
  2358  0013                     	;# 
  2359  0014                     	;# 
  2360  0015                     	;# 
  2361  0016                     	;# 
  2362  0016                     	;# 
  2363  0017                     	;# 
  2364  0018                     	;# 
  2365  0019                     	;# 
  2366  001A                     	;# 
  2367  001A                     	;# 
  2368  001B                     	;# 
  2369  001B                     	;# 
  2370  001C                     	;# 
  2371  001D                     	;# 
  2372  001E                     	;# 
  2373  001F                     	;# 
  2374  008C                     	;# 
  2375  008D                     	;# 
  2376  008E                     	;# 
  2377  0090                     	;# 
  2378  0091                     	;# 
  2379  0092                     	;# 
  2380  0093                     	;# 
  2381  0094                     	;# 
  2382  0095                     	;# 
  2383  0096                     	;# 
  2384  0098                     	;# 
  2385  0099                     	;# 
  2386  009A                     	;# 
  2387  009B                     	;# 
  2388  009B                     	;# 
  2389  009C                     	;# 
  2390  009D                     	;# 
  2391  009E                     	;# 
  2392  009F                     	;# 
  2393  010C                     	;# 
  2394  010D                     	;# 
  2395  010E                     	;# 
  2396  0111                     	;# 
  2397  0112                     	;# 
  2398  0113                     	;# 
  2399  0114                     	;# 
  2400  0115                     	;# 
  2401  0116                     	;# 
  2402  0117                     	;# 
  2403  0118                     	;# 
  2404  0119                     	;# 
  2405  011C                     	;# 
  2406  018C                     	;# 
  2407  018D                     	;# 
  2408  018E                     	;# 
  2409  0191                     	;# 
  2410  0191                     	;# 
  2411  0192                     	;# 
  2412  0193                     	;# 
  2413  0193                     	;# 
  2414  0194                     	;# 
  2415  0195                     	;# 
  2416  0196                     	;# 
  2417  0197                     	;# 
  2418  0199                     	;# 
  2419  0199                     	;# 
  2420  0199                     	;# 
  2421  019A                     	;# 
  2422  019A                     	;# 
  2423  019A                     	;# 
  2424  019B                     	;# 
  2425  019B                     	;# 
  2426  019B                     	;# 
  2427  019B                     	;# 
  2428  019B                     	;# 
  2429  019C                     	;# 
  2430  019C                     	;# 
  2431  019C                     	;# 
  2432  019D                     	;# 
  2433  019D                     	;# 
  2434  019D                     	;# 
  2435  019E                     	;# 
  2436  019E                     	;# 
  2437  019E                     	;# 
  2438  019F                     	;# 
  2439  019F                     	;# 
  2440  019F                     	;# 
  2441  019F                     	;# 
  2442  019F                     	;# 
  2443  020C                     	;# 
  2444  020D                     	;# 
  2445  020E                     	;# 
  2446  0211                     	;# 
  2447  0211                     	;# 
  2448  0212                     	;# 
  2449  0212                     	;# 
  2450  0213                     	;# 
  2451  0213                     	;# 
  2452  0214                     	;# 
  2453  0214                     	;# 
  2454  0215                     	;# 
  2455  0215                     	;# 
  2456  0215                     	;# 
  2457  0215                     	;# 
  2458  0216                     	;# 
  2459  0216                     	;# 
  2460  0217                     	;# 
  2461  0217                     	;# 
  2462  028C                     	;# 
  2463  028D                     	;# 
  2464  028E                     	;# 
  2465  0291                     	;# 
  2466  0291                     	;# 
  2467  0292                     	;# 
  2468  0293                     	;# 
  2469  0294                     	;# 
  2470  0298                     	;# 
  2471  0298                     	;# 
  2472  0299                     	;# 
  2473  029A                     	;# 
  2474  029B                     	;# 
  2475  029E                     	;# 
  2476  030C                     	;# 
  2477  030D                     	;# 
  2478  030E                     	;# 
  2479  038C                     	;# 
  2480  038D                     	;# 
  2481  038E                     	;# 
  2482  0391                     	;# 
  2483  0392                     	;# 
  2484  0393                     	;# 
  2485  0394                     	;# 
  2486  0395                     	;# 
  2487  0396                     	;# 
  2488  0397                     	;# 
  2489  0398                     	;# 
  2490  0399                     	;# 
  2491  040E                     	;# 
  2492  0413                     	;# 
  2493  0413                     	;# 
  2494  0414                     	;# 
  2495  0414                     	;# 
  2496  0415                     	;# 
  2497  0416                     	;# 
  2498  0417                     	;# 
  2499  0418                     	;# 
  2500  041A                     	;# 
  2501  041A                     	;# 
  2502  041B                     	;# 
  2503  041B                     	;# 
  2504  041C                     	;# 
  2505  041D                     	;# 
  2506  041E                     	;# 
  2507  041F                     	;# 
  2508  0493                     	;# 
  2509  0494                     	;# 
  2510  0495                     	;# 
  2511  0496                     	;# 
  2512  049A                     	;# 
  2513  049B                     	;# 
  2514  049C                     	;# 
  2515  049D                     	;# 
  2516  058C                     	;# 
  2517  058C                     	;# 
  2518  058D                     	;# 
  2519  058E                     	;# 
  2520  058E                     	;# 
  2521  058F                     	;# 
  2522  0590                     	;# 
  2523  0590                     	;# 
  2524  0591                     	;# 
  2525  0592                     	;# 
  2526  0592                     	;# 
  2527  0593                     	;# 
  2528  0594                     	;# 
  2529  0594                     	;# 
  2530  0595                     	;# 
  2531  0596                     	;# 
  2532  0596                     	;# 
  2533  0597                     	;# 
  2534  0598                     	;# 
  2535  0599                     	;# 
  2536  059A                     	;# 
  2537  059B                     	;# 
  2538  059B                     	;# 
  2539  059C                     	;# 
  2540  059D                     	;# 
  2541  060C                     	;# 
  2542  060C                     	;# 
  2543  060D                     	;# 
  2544  060E                     	;# 
  2545  060F                     	;# 
  2546  060F                     	;# 
  2547  0610                     	;# 
  2548  0611                     	;# 
  2549  0612                     	;# 
  2550  0613                     	;# 
  2551  0614                     	;# 
  2552  0617                     	;# 
  2553  0617                     	;# 
  2554  0618                     	;# 
  2555  0619                     	;# 
  2556  061A                     	;# 
  2557  061A                     	;# 
  2558  061B                     	;# 
  2559  061C                     	;# 
  2560  0691                     	;# 
  2561  0692                     	;# 
  2562  0693                     	;# 
  2563  0694                     	;# 
  2564  0695                     	;# 
  2565  0696                     	;# 
  2566  0697                     	;# 
  2567  0699                     	;# 
  2568  069A                     	;# 
  2569  0711                     	;# 
  2570  0712                     	;# 
  2571  0713                     	;# 
  2572  0714                     	;# 
  2573  0715                     	;# 
  2574  0718                     	;# 
  2575  0718                     	;# 
  2576  0719                     	;# 
  2577  071A                     	;# 
  2578  071A                     	;# 
  2579  071B                     	;# 
  2580  071C                     	;# 
  2581  071D                     	;# 
  2582  0791                     	;# 
  2583  0791                     	;# 
  2584  0792                     	;# 
  2585  0793                     	;# 
  2586  0793                     	;# 
  2587  0794                     	;# 
  2588  0795                     	;# 
  2589  0795                     	;# 
  2590  0796                     	;# 
  2591  0797                     	;# 
  2592  0797                     	;# 
  2593  0798                     	;# 
  2594  0799                     	;# 
  2595  079A                     	;# 
  2596  080C                     	;# 
  2597  080C                     	;# 
  2598  080D                     	;# 
  2599  080E                     	;# 
  2600  080E                     	;# 
  2601  080F                     	;# 
  2602  0810                     	;# 
  2603  0810                     	;# 
  2604  0811                     	;# 
  2605  0812                     	;# 
  2606  0812                     	;# 
  2607  0813                     	;# 
  2608  0814                     	;# 
  2609  0815                     	;# 
  2610  0816                     	;# 
  2611  0817                     	;# 
  2612  0818                     	;# 
  2613  0819                     	;# 
  2614  081A                     	;# 
  2615  081A                     	;# 
  2616  081B                     	;# 
  2617  081C                     	;# 
  2618  081C                     	;# 
  2619  081D                     	;# 
  2620  088C                     	;# 
  2621  088D                     	;# 
  2622  088E                     	;# 
  2623  088F                     	;# 
  2624  088F                     	;# 
  2625  0890                     	;# 
  2626  0891                     	;# 
  2627  0892                     	;# 
  2628  0893                     	;# 
  2629  0893                     	;# 
  2630  0894                     	;# 
  2631  0895                     	;# 
  2632  0896                     	;# 
  2633  0897                     	;# 
  2634  0897                     	;# 
  2635  0898                     	;# 
  2636  0899                     	;# 
  2637  0D8C                     	;# 
  2638  0D8C                     	;# 
  2639  0D8D                     	;# 
  2640  0D8E                     	;# 
  2641  0D8F                     	;# 
  2642  0D8F                     	;# 
  2643  0D90                     	;# 
  2644  0D91                     	;# 
  2645  0D92                     	;# 
  2646  0D92                     	;# 
  2647  0D93                     	;# 
  2648  0D94                     	;# 
  2649  0D95                     	;# 
  2650  0D95                     	;# 
  2651  0D96                     	;# 
  2652  0D97                     	;# 
  2653  0D98                     	;# 
  2654  0D99                     	;# 
  2655  0D9A                     	;# 
  2656  0D9B                     	;# 
  2657  0D9C                     	;# 
  2658  0D9D                     	;# 
  2659  0D9E                     	;# 
  2660  0D9E                     	;# 
  2661  0D9F                     	;# 
  2662  0DA0                     	;# 
  2663  0DA1                     	;# 
  2664  0DA1                     	;# 
  2665  0DA2                     	;# 
  2666  0DA3                     	;# 
  2667  0DA4                     	;# 
  2668  0DA4                     	;# 
  2669  0DA5                     	;# 
  2670  0DA6                     	;# 
  2671  0DA7                     	;# 
  2672  0DA7                     	;# 
  2673  0DA8                     	;# 
  2674  0DA9                     	;# 
  2675  0DAA                     	;# 
  2676  0DAB                     	;# 
  2677  0DAC                     	;# 
  2678  0DAD                     	;# 
  2679  0DAE                     	;# 
  2680  0DAF                     	;# 
  2681  0E0F                     	;# 
  2682  0E10                     	;# 
  2683  0E11                     	;# 
  2684  0E12                     	;# 
  2685  0E13                     	;# 
  2686  0E14                     	;# 
  2687  0E15                     	;# 
  2688  0E16                     	;# 
  2689  0E17                     	;# 
  2690  0E18                     	;# 
  2691  0E19                     	;# 
  2692  0E1A                     	;# 
  2693  0E1B                     	;# 
  2694  0E1C                     	;# 
  2695  0E1D                     	;# 
  2696  0E1E                     	;# 
  2697  0E1F                     	;# 
  2698  0E20                     	;# 
  2699  0E21                     	;# 
  2700  0E22                     	;# 
  2701  0E23                     	;# 
  2702  0E24                     	;# 
  2703  0E25                     	;# 
  2704  0E26                     	;# 
  2705  0E27                     	;# 
  2706  0E28                     	;# 
  2707  0E29                     	;# 
  2708  0E2A                     	;# 
  2709  0E2B                     	;# 
  2710  0E2C                     	;# 
  2711  0E2D                     	;# 
  2712  0E2E                     	;# 
  2713  0E90                     	;# 
  2714  0E91                     	;# 
  2715  0E92                     	;# 
  2716  0E94                     	;# 
  2717  0E95                     	;# 
  2718  0E9C                     	;# 
  2719  0E9D                     	;# 
  2720  0E9E                     	;# 
  2721  0E9F                     	;# 
  2722  0EA0                     	;# 
  2723  0EA1                     	;# 
  2724  0EA2                     	;# 
  2725  0EA3                     	;# 
  2726  0EA4                     	;# 
  2727  0EA5                     	;# 
  2728  0EA6                     	;# 
  2729  0EA7                     	;# 
  2730  0F0F                     	;# 
  2731  0F10                     	;# 
  2732  0F11                     	;# 
  2733  0F12                     	;# 
  2734  0F13                     	;# 
  2735  0F14                     	;# 
  2736  0F15                     	;# 
  2737  0F16                     	;# 
  2738  0F17                     	;# 
  2739  0F18                     	;# 
  2740  0F19                     	;# 
  2741  0F1A                     	;# 
  2742  0F1B                     	;# 
  2743  0F1C                     	;# 
  2744  0F1D                     	;# 
  2745  0F1E                     	;# 
  2746  0F1F                     	;# 
  2747  0F20                     	;# 
  2748  0F21                     	;# 
  2749  0F22                     	;# 
  2750  0F23                     	;# 
  2751  0F24                     	;# 
  2752  0F25                     	;# 
  2753  0F26                     	;# 
  2754  0F27                     	;# 
  2755  0F28                     	;# 
  2756  0F29                     	;# 
  2757  0F2A                     	;# 
  2758  0F2B                     	;# 
  2759  0F2C                     	;# 
  2760  0F2D                     	;# 
  2761  0F2E                     	;# 
  2762  0F2F                     	;# 
  2763  0F30                     	;# 
  2764  0F31                     	;# 
  2765  0F32                     	;# 
  2766  0F33                     	;# 
  2767  0F34                     	;# 
  2768  0F35                     	;# 
  2769  0F36                     	;# 
  2770  0F37                     	;# 
  2771  0FE4                     	;# 
  2772  0FE5                     	;# 
  2773  0FE6                     	;# 
  2774  0FE7                     	;# 
  2775  0FE8                     	;# 
  2776  0FE9                     	;# 
  2777  0FEA                     	;# 
  2778  0FEB                     	;# 
  2779  0FED                     	;# 
  2780  0FEE                     	;# 
  2781  0FEF                     	;# 
  2782  0000                     	;# 
  2783  0001                     	;# 
  2784  0002                     	;# 
  2785  0003                     	;# 
  2786  0004                     	;# 
  2787  0005                     	;# 
  2788  0006                     	;# 
  2789  0007                     	;# 
  2790  0008                     	;# 
  2791  0009                     	;# 
  2792  000A                     	;# 
  2793  000B                     	;# 
  2794  000C                     	;# 
  2795  000D                     	;# 
  2796  000E                     	;# 
  2797  0010                     	;# 
  2798  0011                     	;# 
  2799  0012                     	;# 
  2800  0013                     	;# 
  2801  0014                     	;# 
  2802  0015                     	;# 
  2803  0016                     	;# 
  2804  0016                     	;# 
  2805  0017                     	;# 
  2806  0018                     	;# 
  2807  0019                     	;# 
  2808  001A                     	;# 
  2809  001A                     	;# 
  2810  001B                     	;# 
  2811  001B                     	;# 
  2812  001C                     	;# 
  2813  001D                     	;# 
  2814  001E                     	;# 
  2815  001F                     	;# 
  2816  008C                     	;# 
  2817  008D                     	;# 
  2818  008E                     	;# 
  2819  0090                     	;# 
  2820  0091                     	;# 
  2821  0092                     	;# 
  2822  0093                     	;# 
  2823  0094                     	;# 
  2824  0095                     	;# 
  2825  0096                     	;# 
  2826  0098                     	;# 
  2827  0099                     	;# 
  2828  009A                     	;# 
  2829  009B                     	;# 
  2830  009B                     	;# 
  2831  009C                     	;# 
  2832  009D                     	;# 
  2833  009E                     	;# 
  2834  009F                     	;# 
  2835  010C                     	;# 
  2836  010D                     	;# 
  2837  010E                     	;# 
  2838  0111                     	;# 
  2839  0112                     	;# 
  2840  0113                     	;# 
  2841  0114                     	;# 
  2842  0115                     	;# 
  2843  0116                     	;# 
  2844  0117                     	;# 
  2845  0118                     	;# 
  2846  0119                     	;# 
  2847  011C                     	;# 
  2848  018C                     	;# 
  2849  018D                     	;# 
  2850  018E                     	;# 
  2851  0191                     	;# 
  2852  0191                     	;# 
  2853  0192                     	;# 
  2854  0193                     	;# 
  2855  0193                     	;# 
  2856  0194                     	;# 
  2857  0195                     	;# 
  2858  0196                     	;# 
  2859  0197                     	;# 
  2860  0199                     	;# 
  2861  0199                     	;# 
  2862  0199                     	;# 
  2863  019A                     	;# 
  2864  019A                     	;# 
  2865  019A                     	;# 
  2866  019B                     	;# 
  2867  019B                     	;# 
  2868  019B                     	;# 
  2869  019B                     	;# 
  2870  019B                     	;# 
  2871  019C                     	;# 
  2872  019C                     	;# 
  2873  019C                     	;# 
  2874  019D                     	;# 
  2875  019D                     	;# 
  2876  019D                     	;# 
  2877  019E                     	;# 
  2878  019E                     	;# 
  2879  019E                     	;# 
  2880  019F                     	;# 
  2881  019F                     	;# 
  2882  019F                     	;# 
  2883  019F                     	;# 
  2884  019F                     	;# 
  2885  020C                     	;# 
  2886  020D                     	;# 
  2887  020E                     	;# 
  2888  0211                     	;# 
  2889  0211                     	;# 
  2890  0212                     	;# 
  2891  0212                     	;# 
  2892  0213                     	;# 
  2893  0213                     	;# 
  2894  0214                     	;# 
  2895  0214                     	;# 
  2896  0215                     	;# 
  2897  0215                     	;# 
  2898  0215                     	;# 
  2899  0215                     	;# 
  2900  0216                     	;# 
  2901  0216                     	;# 
  2902  0217                     	;# 
  2903  0217                     	;# 
  2904  028C                     	;# 
  2905  028D                     	;# 
  2906  028E                     	;# 
  2907  0291                     	;# 
  2908  0291                     	;# 
  2909  0292                     	;# 
  2910  0293                     	;# 
  2911  0294                     	;# 
  2912  0298                     	;# 
  2913  0298                     	;# 
  2914  0299                     	;# 
  2915  029A                     	;# 
  2916  029B                     	;# 
  2917  029E                     	;# 
  2918  030C                     	;# 
  2919  030D                     	;# 
  2920  030E                     	;# 
  2921  038C                     	;# 
  2922  038D                     	;# 
  2923  038E                     	;# 
  2924  0391                     	;# 
  2925  0392                     	;# 
  2926  0393                     	;# 
  2927  0394                     	;# 
  2928  0395                     	;# 
  2929  0396                     	;# 
  2930  0397                     	;# 
  2931  0398                     	;# 
  2932  0399                     	;# 
  2933  040E                     	;# 
  2934  0413                     	;# 
  2935  0413                     	;# 
  2936  0414                     	;# 
  2937  0414                     	;# 
  2938  0415                     	;# 
  2939  0416                     	;# 
  2940  0417                     	;# 
  2941  0418                     	;# 
  2942  041A                     	;# 
  2943  041A                     	;# 
  2944  041B                     	;# 
  2945  041B                     	;# 
  2946  041C                     	;# 
  2947  041D                     	;# 
  2948  041E                     	;# 
  2949  041F                     	;# 
  2950  0493                     	;# 
  2951  0494                     	;# 
  2952  0495                     	;# 
  2953  0496                     	;# 
  2954  049A                     	;# 
  2955  049B                     	;# 
  2956  049C                     	;# 
  2957  049D                     	;# 
  2958  058C                     	;# 
  2959  058C                     	;# 
  2960  058D                     	;# 
  2961  058E                     	;# 
  2962  058E                     	;# 
  2963  058F                     	;# 
  2964  0590                     	;# 
  2965  0590                     	;# 
  2966  0591                     	;# 
  2967  0592                     	;# 
  2968  0592                     	;# 
  2969  0593                     	;# 
  2970  0594                     	;# 
  2971  0594                     	;# 
  2972  0595                     	;# 
  2973  0596                     	;# 
  2974  0596                     	;# 
  2975  0597                     	;# 
  2976  0598                     	;# 
  2977  0599                     	;# 
  2978  059A                     	;# 
  2979  059B                     	;# 
  2980  059B                     	;# 
  2981  059C                     	;# 
  2982  059D                     	;# 
  2983  060C                     	;# 
  2984  060C                     	;# 
  2985  060D                     	;# 
  2986  060E                     	;# 
  2987  060F                     	;# 
  2988  060F                     	;# 
  2989  0610                     	;# 
  2990  0611                     	;# 
  2991  0612                     	;# 
  2992  0613                     	;# 
  2993  0614                     	;# 
  2994  0617                     	;# 
  2995  0617                     	;# 
  2996  0618                     	;# 
  2997  0619                     	;# 
  2998  061A                     	;# 
  2999  061A                     	;# 
  3000  061B                     	;# 
  3001  061C                     	;# 
  3002  0691                     	;# 
  3003  0692                     	;# 
  3004  0693                     	;# 
  3005  0694                     	;# 
  3006  0695                     	;# 
  3007  0696                     	;# 
  3008  0697                     	;# 
  3009  0699                     	;# 
  3010  069A                     	;# 
  3011  0711                     	;# 
  3012  0712                     	;# 
  3013  0713                     	;# 
  3014  0714                     	;# 
  3015  0715                     	;# 
  3016  0718                     	;# 
  3017  0718                     	;# 
  3018  0719                     	;# 
  3019  071A                     	;# 
  3020  071A                     	;# 
  3021  071B                     	;# 
  3022  071C                     	;# 
  3023  071D                     	;# 
  3024  0791                     	;# 
  3025  0791                     	;# 
  3026  0792                     	;# 
  3027  0793                     	;# 
  3028  0793                     	;# 
  3029  0794                     	;# 
  3030  0795                     	;# 
  3031  0795                     	;# 
  3032  0796                     	;# 
  3033  0797                     	;# 
  3034  0797                     	;# 
  3035  0798                     	;# 
  3036  0799                     	;# 
  3037  079A                     	;# 
  3038  080C                     	;# 
  3039  080C                     	;# 
  3040  080D                     	;# 
  3041  080E                     	;# 
  3042  080E                     	;# 
  3043  080F                     	;# 
  3044  0810                     	;# 
  3045  0810                     	;# 
  3046  0811                     	;# 
  3047  0812                     	;# 
  3048  0812                     	;# 
  3049  0813                     	;# 
  3050  0814                     	;# 
  3051  0815                     	;# 
  3052  0816                     	;# 
  3053  0817                     	;# 
  3054  0818                     	;# 
  3055  0819                     	;# 
  3056  081A                     	;# 
  3057  081A                     	;# 
  3058  081B                     	;# 
  3059  081C                     	;# 
  3060  081C                     	;# 
  3061  081D                     	;# 
  3062  088C                     	;# 
  3063  088D                     	;# 
  3064  088E                     	;# 
  3065  088F                     	;# 
  3066  088F                     	;# 
  3067  0890                     	;# 
  3068  0891                     	;# 
  3069  0892                     	;# 
  3070  0893                     	;# 
  3071  0893                     	;# 
  3072  0894                     	;# 
  3073  0895                     	;# 
  3074  0896                     	;# 
  3075  0897                     	;# 
  3076  0897                     	;# 
  3077  0898                     	;# 
  3078  0899                     	;# 
  3079  0D8C                     	;# 
  3080  0D8C                     	;# 
  3081  0D8D                     	;# 
  3082  0D8E                     	;# 
  3083  0D8F                     	;# 
  3084  0D8F                     	;# 
  3085  0D90                     	;# 
  3086  0D91                     	;# 
  3087  0D92                     	;# 
  3088  0D92                     	;# 
  3089  0D93                     	;# 
  3090  0D94                     	;# 
  3091  0D95                     	;# 
  3092  0D95                     	;# 
  3093  0D96                     	;# 
  3094  0D97                     	;# 
  3095  0D98                     	;# 
  3096  0D99                     	;# 
  3097  0D9A                     	;# 
  3098  0D9B                     	;# 
  3099  0D9C                     	;# 
  3100  0D9D                     	;# 
  3101  0D9E                     	;# 
  3102  0D9E                     	;# 
  3103  0D9F                     	;# 
  3104  0DA0                     	;# 
  3105  0DA1                     	;# 
  3106  0DA1                     	;# 
  3107  0DA2                     	;# 
  3108  0DA3                     	;# 
  3109  0DA4                     	;# 
  3110  0DA4                     	;# 
  3111  0DA5                     	;# 
  3112  0DA6                     	;# 
  3113  0DA7                     	;# 
  3114  0DA7                     	;# 
  3115  0DA8                     	;# 
  3116  0DA9                     	;# 
  3117  0DAA                     	;# 
  3118  0DAB                     	;# 
  3119  0DAC                     	;# 
  3120  0DAD                     	;# 
  3121  0DAE                     	;# 
  3122  0DAF                     	;# 
  3123  0E0F                     	;# 
  3124  0E10                     	;# 
  3125  0E11                     	;# 
  3126  0E12                     	;# 
  3127  0E13                     	;# 
  3128  0E14                     	;# 
  3129  0E15                     	;# 
  3130  0E16                     	;# 
  3131  0E17                     	;# 
  3132  0E18                     	;# 
  3133  0E19                     	;# 
  3134  0E1A                     	;# 
  3135  0E1B                     	;# 
  3136  0E1C                     	;# 
  3137  0E1D                     	;# 
  3138  0E1E                     	;# 
  3139  0E1F                     	;# 
  3140  0E20                     	;# 
  3141  0E21                     	;# 
  3142  0E22                     	;# 
  3143  0E23                     	;# 
  3144  0E24                     	;# 
  3145  0E25                     	;# 
  3146  0E26                     	;# 
  3147  0E27                     	;# 
  3148  0E28                     	;# 
  3149  0E29                     	;# 
  3150  0E2A                     	;# 
  3151  0E2B                     	;# 
  3152  0E2C                     	;# 
  3153  0E2D                     	;# 
  3154  0E2E                     	;# 
  3155  0E90                     	;# 
  3156  0E91                     	;# 
  3157  0E92                     	;# 
  3158  0E94                     	;# 
  3159  0E95                     	;# 
  3160  0E9C                     	;# 
  3161  0E9D                     	;# 
  3162  0E9E                     	;# 
  3163  0E9F                     	;# 
  3164  0EA0                     	;# 
  3165  0EA1                     	;# 
  3166  0EA2                     	;# 
  3167  0EA3                     	;# 
  3168  0EA4                     	;# 
  3169  0EA5                     	;# 
  3170  0EA6                     	;# 
  3171  0EA7                     	;# 
  3172  0F0F                     	;# 
  3173  0F10                     	;# 
  3174  0F11                     	;# 
  3175  0F12                     	;# 
  3176  0F13                     	;# 
  3177  0F14                     	;# 
  3178  0F15                     	;# 
  3179  0F16                     	;# 
  3180  0F17                     	;# 
  3181  0F18                     	;# 
  3182  0F19                     	;# 
  3183  0F1A                     	;# 
  3184  0F1B                     	;# 
  3185  0F1C                     	;# 
  3186  0F1D                     	;# 
  3187  0F1E                     	;# 
  3188  0F1F                     	;# 
  3189  0F20                     	;# 
  3190  0F21                     	;# 
  3191  0F22                     	;# 
  3192  0F23                     	;# 
  3193  0F24                     	;# 
  3194  0F25                     	;# 
  3195  0F26                     	;# 
  3196  0F27                     	;# 
  3197  0F28                     	;# 
  3198  0F29                     	;# 
  3199  0F2A                     	;# 
  3200  0F2B                     	;# 
  3201  0F2C                     	;# 
  3202  0F2D                     	;# 
  3203  0F2E                     	;# 
  3204  0F2F                     	;# 
  3205  0F30                     	;# 
  3206  0F31                     	;# 
  3207  0F32                     	;# 
  3208  0F33                     	;# 
  3209  0F34                     	;# 
  3210  0F35                     	;# 
  3211  0F36                     	;# 
  3212  0F37                     	;# 
  3213  0FE4                     	;# 
  3214  0FE5                     	;# 
  3215  0FE6                     	;# 
  3216  0FE7                     	;# 
  3217  0FE8                     	;# 
  3218  0FE9                     	;# 
  3219  0FEA                     	;# 
  3220  0FEB                     	;# 
  3221  0FED                     	;# 
  3222  0FEE                     	;# 
  3223  0FEF                     	;# 
  3224  0000                     	;# 
  3225  0001                     	;# 
  3226  0002                     	;# 
  3227  0003                     	;# 
  3228  0004                     	;# 
  3229  0005                     	;# 
  3230  0006                     	;# 
  3231  0007                     	;# 
  3232  0008                     	;# 
  3233  0009                     	;# 
  3234  000A                     	;# 
  3235  000B                     	;# 
  3236  000C                     	;# 
  3237  000D                     	;# 
  3238  000E                     	;# 
  3239  0010                     	;# 
  3240  0011                     	;# 
  3241  0012                     	;# 
  3242  0013                     	;# 
  3243  0014                     	;# 
  3244  0015                     	;# 
  3245  0016                     	;# 
  3246  0016                     	;# 
  3247  0017                     	;# 
  3248  0018                     	;# 
  3249  0019                     	;# 
  3250  001A                     	;# 
  3251  001A                     	;# 
  3252  001B                     	;# 
  3253  001B                     	;# 
  3254  001C                     	;# 
  3255  001D                     	;# 
  3256  001E                     	;# 
  3257  001F                     	;# 
  3258  008C                     	;# 
  3259  008D                     	;# 
  3260  008E                     	;# 
  3261  0090                     	;# 
  3262  0091                     	;# 
  3263  0092                     	;# 
  3264  0093                     	;# 
  3265  0094                     	;# 
  3266  0095                     	;# 
  3267  0096                     	;# 
  3268  0098                     	;# 
  3269  0099                     	;# 
  3270  009A                     	;# 
  3271  009B                     	;# 
  3272  009B                     	;# 
  3273  009C                     	;# 
  3274  009D                     	;# 
  3275  009E                     	;# 
  3276  009F                     	;# 
  3277  010C                     	;# 
  3278  010D                     	;# 
  3279  010E                     	;# 
  3280  0111                     	;# 
  3281  0112                     	;# 
  3282  0113                     	;# 
  3283  0114                     	;# 
  3284  0115                     	;# 
  3285  0116                     	;# 
  3286  0117                     	;# 
  3287  0118                     	;# 
  3288  0119                     	;# 
  3289  011C                     	;# 
  3290  018C                     	;# 
  3291  018D                     	;# 
  3292  018E                     	;# 
  3293  0191                     	;# 
  3294  0191                     	;# 
  3295  0192                     	;# 
  3296  0193                     	;# 
  3297  0193                     	;# 
  3298  0194                     	;# 
  3299  0195                     	;# 
  3300  0196                     	;# 
  3301  0197                     	;# 
  3302  0199                     	;# 
  3303  0199                     	;# 
  3304  0199                     	;# 
  3305  019A                     	;# 
  3306  019A                     	;# 
  3307  019A                     	;# 
  3308  019B                     	;# 
  3309  019B                     	;# 
  3310  019B                     	;# 
  3311  019B                     	;# 
  3312  019B                     	;# 
  3313  019C                     	;# 
  3314  019C                     	;# 
  3315  019C                     	;# 
  3316  019D                     	;# 
  3317  019D                     	;# 
  3318  019D                     	;# 
  3319  019E                     	;# 
  3320  019E                     	;# 
  3321  019E                     	;# 
  3322  019F                     	;# 
  3323  019F                     	;# 
  3324  019F                     	;# 
  3325  019F                     	;# 
  3326  019F                     	;# 
  3327  020C                     	;# 
  3328  020D                     	;# 
  3329  020E                     	;# 
  3330  0211                     	;# 
  3331  0211                     	;# 
  3332  0212                     	;# 
  3333  0212                     	;# 
  3334  0213                     	;# 
  3335  0213                     	;# 
  3336  0214                     	;# 
  3337  0214                     	;# 
  3338  0215                     	;# 
  3339  0215                     	;# 
  3340  0215                     	;# 
  3341  0215                     	;# 
  3342  0216                     	;# 
  3343  0216                     	;# 
  3344  0217                     	;# 
  3345  0217                     	;# 
  3346  028C                     	;# 
  3347  028D                     	;# 
  3348  028E                     	;# 
  3349  0291                     	;# 
  3350  0291                     	;# 
  3351  0292                     	;# 
  3352  0293                     	;# 
  3353  0294                     	;# 
  3354  0298                     	;# 
  3355  0298                     	;# 
  3356  0299                     	;# 
  3357  029A                     	;# 
  3358  029B                     	;# 
  3359  029E                     	;# 
  3360  030C                     	;# 
  3361  030D                     	;# 
  3362  030E                     	;# 
  3363  038C                     	;# 
  3364  038D                     	;# 
  3365  038E                     	;# 
  3366  0391                     	;# 
  3367  0392                     	;# 
  3368  0393                     	;# 
  3369  0394                     	;# 
  3370  0395                     	;# 
  3371  0396                     	;# 
  3372  0397                     	;# 
  3373  0398                     	;# 
  3374  0399                     	;# 
  3375  040E                     	;# 
  3376  0413                     	;# 
  3377  0413                     	;# 
  3378  0414                     	;# 
  3379  0414                     	;# 
  3380  0415                     	;# 
  3381  0416                     	;# 
  3382  0417                     	;# 
  3383  0418                     	;# 
  3384  041A                     	;# 
  3385  041A                     	;# 
  3386  041B                     	;# 
  3387  041B                     	;# 
  3388  041C                     	;# 
  3389  041D                     	;# 
  3390  041E                     	;# 
  3391  041F                     	;# 
  3392  0493                     	;# 
  3393  0494                     	;# 
  3394  0495                     	;# 
  3395  0496                     	;# 
  3396  049A                     	;# 
  3397  049B                     	;# 
  3398  049C                     	;# 
  3399  049D                     	;# 
  3400  058C                     	;# 
  3401  058C                     	;# 
  3402  058D                     	;# 
  3403  058E                     	;# 
  3404  058E                     	;# 
  3405  058F                     	;# 
  3406  0590                     	;# 
  3407  0590                     	;# 
  3408  0591                     	;# 
  3409  0592                     	;# 
  3410  0592                     	;# 
  3411  0593                     	;# 
  3412  0594                     	;# 
  3413  0594                     	;# 
  3414  0595                     	;# 
  3415  0596                     	;# 
  3416  0596                     	;# 
  3417  0597                     	;# 
  3418  0598                     	;# 
  3419  0599                     	;# 
  3420  059A                     	;# 
  3421  059B                     	;# 
  3422  059B                     	;# 
  3423  059C                     	;# 
  3424  059D                     	;# 
  3425  060C                     	;# 
  3426  060C                     	;# 
  3427  060D                     	;# 
  3428  060E                     	;# 
  3429  060F                     	;# 
  3430  060F                     	;# 
  3431  0610                     	;# 
  3432  0611                     	;# 
  3433  0612                     	;# 
  3434  0613                     	;# 
  3435  0614                     	;# 
  3436  0617                     	;# 
  3437  0617                     	;# 
  3438  0618                     	;# 
  3439  0619                     	;# 
  3440  061A                     	;# 
  3441  061A                     	;# 
  3442  061B                     	;# 
  3443  061C                     	;# 
  3444  0691                     	;# 
  3445  0692                     	;# 
  3446  0693                     	;# 
  3447  0694                     	;# 
  3448  0695                     	;# 
  3449  0696                     	;# 
  3450  0697                     	;# 
  3451  0699                     	;# 
  3452  069A                     	;# 
  3453  0711                     	;# 
  3454  0712                     	;# 
  3455  0713                     	;# 
  3456  0714                     	;# 
  3457  0715                     	;# 
  3458  0718                     	;# 
  3459  0718                     	;# 
  3460  0719                     	;# 
  3461  071A                     	;# 
  3462  071A                     	;# 
  3463  071B                     	;# 
  3464  071C                     	;# 
  3465  071D                     	;# 
  3466  0791                     	;# 
  3467  0791                     	;# 
  3468  0792                     	;# 
  3469  0793                     	;# 
  3470  0793                     	;# 
  3471  0794                     	;# 
  3472  0795                     	;# 
  3473  0795                     	;# 
  3474  0796                     	;# 
  3475  0797                     	;# 
  3476  0797                     	;# 
  3477  0798                     	;# 
  3478  0799                     	;# 
  3479  079A                     	;# 
  3480  080C                     	;# 
  3481  080C                     	;# 
  3482  080D                     	;# 
  3483  080E                     	;# 
  3484  080E                     	;# 
  3485  080F                     	;# 
  3486  0810                     	;# 
  3487  0810                     	;# 
  3488  0811                     	;# 
  3489  0812                     	;# 
  3490  0812                     	;# 
  3491  0813                     	;# 
  3492  0814                     	;# 
  3493  0815                     	;# 
  3494  0816                     	;# 
  3495  0817                     	;# 
  3496  0818                     	;# 
  3497  0819                     	;# 
  3498  081A                     	;# 
  3499  081A                     	;# 
  3500  081B                     	;# 
  3501  081C                     	;# 
  3502  081C                     	;# 
  3503  081D                     	;# 
  3504  088C                     	;# 
  3505  088D                     	;# 
  3506  088E                     	;# 
  3507  088F                     	;# 
  3508  088F                     	;# 
  3509  0890                     	;# 
  3510  0891                     	;# 
  3511  0892                     	;# 
  3512  0893                     	;# 
  3513  0893                     	;# 
  3514  0894                     	;# 
  3515  0895                     	;# 
  3516  0896                     	;# 
  3517  0897                     	;# 
  3518  0897                     	;# 
  3519  0898                     	;# 
  3520  0899                     	;# 
  3521  0D8C                     	;# 
  3522  0D8C                     	;# 
  3523  0D8D                     	;# 
  3524  0D8E                     	;# 
  3525  0D8F                     	;# 
  3526  0D8F                     	;# 
  3527  0D90                     	;# 
  3528  0D91                     	;# 
  3529  0D92                     	;# 
  3530  0D92                     	;# 
  3531  0D93                     	;# 
  3532  0D94                     	;# 
  3533  0D95                     	;# 
  3534  0D95                     	;# 
  3535  0D96                     	;# 
  3536  0D97                     	;# 
  3537  0D98                     	;# 
  3538  0D99                     	;# 
  3539  0D9A                     	;# 
  3540  0D9B                     	;# 
  3541  0D9C                     	;# 
  3542  0D9D                     	;# 
  3543  0D9E                     	;# 
  3544  0D9E                     	;# 
  3545  0D9F                     	;# 
  3546  0DA0                     	;# 
  3547  0DA1                     	;# 
  3548  0DA1                     	;# 
  3549  0DA2                     	;# 
  3550  0DA3                     	;# 
  3551  0DA4                     	;# 
  3552  0DA4                     	;# 
  3553  0DA5                     	;# 
  3554  0DA6                     	;# 
  3555  0DA7                     	;# 
  3556  0DA7                     	;# 
  3557  0DA8                     	;# 
  3558  0DA9                     	;# 
  3559  0DAA                     	;# 
  3560  0DAB                     	;# 
  3561  0DAC                     	;# 
  3562  0DAD                     	;# 
  3563  0DAE                     	;# 
  3564  0DAF                     	;# 
  3565  0E0F                     	;# 
  3566  0E10                     	;# 
  3567  0E11                     	;# 
  3568  0E12                     	;# 
  3569  0E13                     	;# 
  3570  0E14                     	;# 
  3571  0E15                     	;# 
  3572  0E16                     	;# 
  3573  0E17                     	;# 
  3574  0E18                     	;# 
  3575  0E19                     	;# 
  3576  0E1A                     	;# 
  3577  0E1B                     	;# 
  3578  0E1C                     	;# 
  3579  0E1D                     	;# 
  3580  0E1E                     	;# 
  3581  0E1F                     	;# 
  3582  0E20                     	;# 
  3583  0E21                     	;# 
  3584  0E22                     	;# 
  3585  0E23                     	;# 
  3586  0E24                     	;# 
  3587  0E25                     	;# 
  3588  0E26                     	;# 
  3589  0E27                     	;# 
  3590  0E28                     	;# 
  3591  0E29                     	;# 
  3592  0E2A                     	;# 
  3593  0E2B                     	;# 
  3594  0E2C                     	;# 
  3595  0E2D                     	;# 
  3596  0E2E                     	;# 
  3597  0E90                     	;# 
  3598  0E91                     	;# 
  3599  0E92                     	;# 
  3600  0E94                     	;# 
  3601  0E95                     	;# 
  3602  0E9C                     	;# 
  3603  0E9D                     	;# 
  3604  0E9E                     	;# 
  3605  0E9F                     	;# 
  3606  0EA0                     	;# 
  3607  0EA1                     	;# 
  3608  0EA2                     	;# 
  3609  0EA3                     	;# 
  3610  0EA4                     	;# 
  3611  0EA5                     	;# 
  3612  0EA6                     	;# 
  3613  0EA7                     	;# 
  3614  0F0F                     	;# 
  3615  0F10                     	;# 
  3616  0F11                     	;# 
  3617  0F12                     	;# 
  3618  0F13                     	;# 
  3619  0F14                     	;# 
  3620  0F15                     	;# 
  3621  0F16                     	;# 
  3622  0F17                     	;# 
  3623  0F18                     	;# 
  3624  0F19                     	;# 
  3625  0F1A                     	;# 
  3626  0F1B                     	;# 
  3627  0F1C                     	;# 
  3628  0F1D                     	;# 
  3629  0F1E                     	;# 
  3630  0F1F                     	;# 
  3631  0F20                     	;# 
  3632  0F21                     	;# 
  3633  0F22                     	;# 
  3634  0F23                     	;# 
  3635  0F24                     	;# 
  3636  0F25                     	;# 
  3637  0F26                     	;# 
  3638  0F27                     	;# 
  3639  0F28                     	;# 
  3640  0F29                     	;# 
  3641  0F2A                     	;# 
  3642  0F2B                     	;# 
  3643  0F2C                     	;# 
  3644  0F2D                     	;# 
  3645  0F2E                     	;# 
  3646  0F2F                     	;# 
  3647  0F30                     	;# 
  3648  0F31                     	;# 
  3649  0F32                     	;# 
  3650  0F33                     	;# 
  3651  0F34                     	;# 
  3652  0F35                     	;# 
  3653  0F36                     	;# 
  3654  0F37                     	;# 
  3655  0FE4                     	;# 
  3656  0FE5                     	;# 
  3657  0FE6                     	;# 
  3658  0FE7                     	;# 
  3659  0FE8                     	;# 
  3660  0FE9                     	;# 
  3661  0FEA                     	;# 
  3662  0FEB                     	;# 
  3663  0FED                     	;# 
  3664  0FEE                     	;# 
  3665  0FEF                     	;# 
  3666  0000                     	;# 
  3667  0001                     	;# 
  3668  0002                     	;# 
  3669  0003                     	;# 
  3670  0004                     	;# 
  3671  0005                     	;# 
  3672  0006                     	;# 
  3673  0007                     	;# 
  3674  0008                     	;# 
  3675  0009                     	;# 
  3676  000A                     	;# 
  3677  000B                     	;# 
  3678  000C                     	;# 
  3679  000D                     	;# 
  3680  000E                     	;# 
  3681  0010                     	;# 
  3682  0011                     	;# 
  3683  0012                     	;# 
  3684  0013                     	;# 
  3685  0014                     	;# 
  3686  0015                     	;# 
  3687  0016                     	;# 
  3688  0016                     	;# 
  3689  0017                     	;# 
  3690  0018                     	;# 
  3691  0019                     	;# 
  3692  001A                     	;# 
  3693  001A                     	;# 
  3694  001B                     	;# 
  3695  001B                     	;# 
  3696  001C                     	;# 
  3697  001D                     	;# 
  3698  001E                     	;# 
  3699  001F                     	;# 
  3700  008C                     	;# 
  3701  008D                     	;# 
  3702  008E                     	;# 
  3703  0090                     	;# 
  3704  0091                     	;# 
  3705  0092                     	;# 
  3706  0093                     	;# 
  3707  0094                     	;# 
  3708  0095                     	;# 
  3709  0096                     	;# 
  3710  0098                     	;# 
  3711  0099                     	;# 
  3712  009A                     	;# 
  3713  009B                     	;# 
  3714  009B                     	;# 
  3715  009C                     	;# 
  3716  009D                     	;# 
  3717  009E                     	;# 
  3718  009F                     	;# 
  3719  010C                     	;# 
  3720  010D                     	;# 
  3721  010E                     	;# 
  3722  0111                     	;# 
  3723  0112                     	;# 
  3724  0113                     	;# 
  3725  0114                     	;# 
  3726  0115                     	;# 
  3727  0116                     	;# 
  3728  0117                     	;# 
  3729  0118                     	;# 
  3730  0119                     	;# 
  3731  011C                     	;# 
  3732  018C                     	;# 
  3733  018D                     	;# 
  3734  018E                     	;# 
  3735  0191                     	;# 
  3736  0191                     	;# 
  3737  0192                     	;# 
  3738  0193                     	;# 
  3739  0193                     	;# 
  3740  0194                     	;# 
  3741  0195                     	;# 
  3742  0196                     	;# 
  3743  0197                     	;# 
  3744  0199                     	;# 
  3745  0199                     	;# 
  3746  0199                     	;# 
  3747  019A                     	;# 
  3748  019A                     	;# 
  3749  019A                     	;# 
  3750  019B                     	;# 
  3751  019B                     	;# 
  3752  019B                     	;# 
  3753  019B                     	;# 
  3754  019B                     	;# 
  3755  019C                     	;# 
  3756  019C                     	;# 
  3757  019C                     	;# 
  3758  019D                     	;# 
  3759  019D                     	;# 
  3760  019D                     	;# 
  3761  019E                     	;# 
  3762  019E                     	;# 
  3763  019E                     	;# 
  3764  019F                     	;# 
  3765  019F                     	;# 
  3766  019F                     	;# 
  3767  019F                     	;# 
  3768  019F                     	;# 
  3769  020C                     	;# 
  3770  020D                     	;# 
  3771  020E                     	;# 
  3772  0211                     	;# 
  3773  0211                     	;# 
  3774  0212                     	;# 
  3775  0212                     	;# 
  3776  0213                     	;# 
  3777  0213                     	;# 
  3778  0214                     	;# 
  3779  0214                     	;# 
  3780  0215                     	;# 
  3781  0215                     	;# 
  3782  0215                     	;# 
  3783  0215                     	;# 
  3784  0216                     	;# 
  3785  0216                     	;# 
  3786  0217                     	;# 
  3787  0217                     	;# 
  3788  028C                     	;# 
  3789  028D                     	;# 
  3790  028E                     	;# 
  3791  0291                     	;# 
  3792  0291                     	;# 
  3793  0292                     	;# 
  3794  0293                     	;# 
  3795  0294                     	;# 
  3796  0298                     	;# 
  3797  0298                     	;# 
  3798  0299                     	;# 
  3799  029A                     	;# 
  3800  029B                     	;# 
  3801  029E                     	;# 
  3802  030C                     	;# 
  3803  030D                     	;# 
  3804  030E                     	;# 
  3805  038C                     	;# 
  3806  038D                     	;# 
  3807  038E                     	;# 
  3808  0391                     	;# 
  3809  0392                     	;# 
  3810  0393                     	;# 
  3811  0394                     	;# 
  3812  0395                     	;# 
  3813  0396                     	;# 
  3814  0397                     	;# 
  3815  0398                     	;# 
  3816  0399                     	;# 
  3817  040E                     	;# 
  3818  0413                     	;# 
  3819  0413                     	;# 
  3820  0414                     	;# 
  3821  0414                     	;# 
  3822  0415                     	;# 
  3823  0416                     	;# 
  3824  0417                     	;# 
  3825  0418                     	;# 
  3826  041A                     	;# 
  3827  041A                     	;# 
  3828  041B                     	;# 
  3829  041B                     	;# 
  3830  041C                     	;# 
  3831  041D                     	;# 
  3832  041E                     	;# 
  3833  041F                     	;# 
  3834  0493                     	;# 
  3835  0494                     	;# 
  3836  0495                     	;# 
  3837  0496                     	;# 
  3838  049A                     	;# 
  3839  049B                     	;# 
  3840  049C                     	;# 
  3841  049D                     	;# 
  3842  058C                     	;# 
  3843  058C                     	;# 
  3844  058D                     	;# 
  3845  058E                     	;# 
  3846  058E                     	;# 
  3847  058F                     	;# 
  3848  0590                     	;# 
  3849  0590                     	;# 
  3850  0591                     	;# 
  3851  0592                     	;# 
  3852  0592                     	;# 
  3853  0593                     	;# 
  3854  0594                     	;# 
  3855  0594                     	;# 
  3856  0595                     	;# 
  3857  0596                     	;# 
  3858  0596                     	;# 
  3859  0597                     	;# 
  3860  0598                     	;# 
  3861  0599                     	;# 
  3862  059A                     	;# 
  3863  059B                     	;# 
  3864  059B                     	;# 
  3865  059C                     	;# 
  3866  059D                     	;# 
  3867  060C                     	;# 
  3868  060C                     	;# 
  3869  060D                     	;# 
  3870  060E                     	;# 
  3871  060F                     	;# 
  3872  060F                     	;# 
  3873  0610                     	;# 
  3874  0611                     	;# 
  3875  0612                     	;# 
  3876  0613                     	;# 
  3877  0614                     	;# 
  3878  0617                     	;# 
  3879  0617                     	;# 
  3880  0618                     	;# 
  3881  0619                     	;# 
  3882  061A                     	;# 
  3883  061A                     	;# 
  3884  061B                     	;# 
  3885  061C                     	;# 
  3886  0691                     	;# 
  3887  0692                     	;# 
  3888  0693                     	;# 
  3889  0694                     	;# 
  3890  0695                     	;# 
  3891  0696                     	;# 
  3892  0697                     	;# 
  3893  0699                     	;# 
  3894  069A                     	;# 
  3895  0711                     	;# 
  3896  0712                     	;# 
  3897  0713                     	;# 
  3898  0714                     	;# 
  3899  0715                     	;# 
  3900  0718                     	;# 
  3901  0718                     	;# 
  3902  0719                     	;# 
  3903  071A                     	;# 
  3904  071A                     	;# 
  3905  071B                     	;# 
  3906  071C                     	;# 
  3907  071D                     	;# 
  3908  0791                     	;# 
  3909  0791                     	;# 
  3910  0792                     	;# 
  3911  0793                     	;# 
  3912  0793                     	;# 
  3913  0794                     	;# 
  3914  0795                     	;# 
  3915  0795                     	;# 
  3916  0796                     	;# 
  3917  0797                     	;# 
  3918  0797                     	;# 
  3919  0798                     	;# 
  3920  0799                     	;# 
  3921  079A                     	;# 
  3922  080C                     	;# 
  3923  080C                     	;# 
  3924  080D                     	;# 
  3925  080E                     	;# 
  3926  080E                     	;# 
  3927  080F                     	;# 
  3928  0810                     	;# 
  3929  0810                     	;# 
  3930  0811                     	;# 
  3931  0812                     	;# 
  3932  0812                     	;# 
  3933  0813                     	;# 
  3934  0814                     	;# 
  3935  0815                     	;# 
  3936  0816                     	;# 
  3937  0817                     	;# 
  3938  0818                     	;# 
  3939  0819                     	;# 
  3940  081A                     	;# 
  3941  081A                     	;# 
  3942  081B                     	;# 
  3943  081C                     	;# 
  3944  081C                     	;# 
  3945  081D                     	;# 
  3946  088C                     	;# 
  3947  088D                     	;# 
  3948  088E                     	;# 
  3949  088F                     	;# 
  3950  088F                     	;# 
  3951  0890                     	;# 
  3952  0891                     	;# 
  3953  0892                     	;# 
  3954  0893                     	;# 
  3955  0893                     	;# 
  3956  0894                     	;# 
  3957  0895                     	;# 
  3958  0896                     	;# 
  3959  0897                     	;# 
  3960  0897                     	;# 
  3961  0898                     	;# 
  3962  0899                     	;# 
  3963  0D8C                     	;# 
  3964  0D8C                     	;# 
  3965  0D8D                     	;# 
  3966  0D8E                     	;# 
  3967  0D8F                     	;# 
  3968  0D8F                     	;# 
  3969  0D90                     	;# 
  3970  0D91                     	;# 
  3971  0D92                     	;# 
  3972  0D92                     	;# 
  3973  0D93                     	;# 
  3974  0D94                     	;# 
  3975  0D95                     	;# 
  3976  0D95                     	;# 
  3977  0D96                     	;# 
  3978  0D97                     	;# 
  3979  0D98                     	;# 
  3980  0D99                     	;# 
  3981  0D9A                     	;# 
  3982  0D9B                     	;# 
  3983  0D9C                     	;# 
  3984  0D9D                     	;# 
  3985  0D9E                     	;# 
  3986  0D9E                     	;# 
  3987  0D9F                     	;# 
  3988  0DA0                     	;# 
  3989  0DA1                     	;# 
  3990  0DA1                     	;# 
  3991  0DA2                     	;# 
  3992  0DA3                     	;# 
  3993  0DA4                     	;# 
  3994  0DA4                     	;# 
  3995  0DA5                     	;# 
  3996  0DA6                     	;# 
  3997  0DA7                     	;# 
  3998  0DA7                     	;# 
  3999  0DA8                     	;# 
  4000  0DA9                     	;# 
  4001  0DAA                     	;# 
  4002  0DAB                     	;# 
  4003  0DAC                     	;# 
  4004  0DAD                     	;# 
  4005  0DAE                     	;# 
  4006  0DAF                     	;# 
  4007  0E0F                     	;# 
  4008  0E10                     	;# 
  4009  0E11                     	;# 
  4010  0E12                     	;# 
  4011  0E13                     	;# 
  4012  0E14                     	;# 
  4013  0E15                     	;# 
  4014  0E16                     	;# 
  4015  0E17                     	;# 
  4016  0E18                     	;# 
  4017  0E19                     	;# 
  4018  0E1A                     	;# 
  4019  0E1B                     	;# 
  4020  0E1C                     	;# 
  4021  0E1D                     	;# 
  4022  0E1E                     	;# 
  4023  0E1F                     	;# 
  4024  0E20                     	;# 
  4025  0E21                     	;# 
  4026  0E22                     	;# 
  4027  0E23                     	;# 
  4028  0E24                     	;# 
  4029  0E25                     	;# 
  4030  0E26                     	;# 
  4031  0E27                     	;# 
  4032  0E28                     	;# 
  4033  0E29                     	;# 
  4034  0E2A                     	;# 
  4035  0E2B                     	;# 
  4036  0E2C                     	;# 
  4037  0E2D                     	;# 
  4038  0E2E                     	;# 
  4039  0E90                     	;# 
  4040  0E91                     	;# 
  4041  0E92                     	;# 
  4042  0E94                     	;# 
  4043  0E95                     	;# 
  4044  0E9C                     	;# 
  4045  0E9D                     	;# 
  4046  0E9E                     	;# 
  4047  0E9F                     	;# 
  4048  0EA0                     	;# 
  4049  0EA1                     	;# 
  4050  0EA2                     	;# 
  4051  0EA3                     	;# 
  4052  0EA4                     	;# 
  4053  0EA5                     	;# 
  4054  0EA6                     	;# 
  4055  0EA7                     	;# 
  4056  0F0F                     	;# 
  4057  0F10                     	;# 
  4058  0F11                     	;# 
  4059  0F12                     	;# 
  4060  0F13                     	;# 
  4061  0F14                     	;# 
  4062  0F15                     	;# 
  4063  0F16                     	;# 
  4064  0F17                     	;# 
  4065  0F18                     	;# 
  4066  0F19                     	;# 
  4067  0F1A                     	;# 
  4068  0F1B                     	;# 
  4069  0F1C                     	;# 
  4070  0F1D                     	;# 
  4071  0F1E                     	;# 
  4072  0F1F                     	;# 
  4073  0F20                     	;# 
  4074  0F21                     	;# 
  4075  0F22                     	;# 
  4076  0F23                     	;# 
  4077  0F24                     	;# 
  4078  0F25                     	;# 
  4079  0F26                     	;# 
  4080  0F27                     	;# 
  4081  0F28                     	;# 
  4082  0F29                     	;# 
  4083  0F2A                     	;# 
  4084  0F2B                     	;# 
  4085  0F2C                     	;# 
  4086  0F2D                     	;# 
  4087  0F2E                     	;# 
  4088  0F2F                     	;# 
  4089  0F30                     	;# 
  4090  0F31                     	;# 
  4091  0F32                     	;# 
  4092  0F33                     	;# 
  4093  0F34                     	;# 
  4094  0F35                     	;# 
  4095  0F36                     	;# 
  4096  0F37                     	;# 
  4097  0FE4                     	;# 
  4098  0FE5                     	;# 
  4099  0FE6                     	;# 
  4100  0FE7                     	;# 
  4101  0FE8                     	;# 
  4102  0FE9                     	;# 
  4103  0FEA                     	;# 
  4104  0FEB                     	;# 
  4105  0FED                     	;# 
  4106  0FEE                     	;# 
  4107  0FEF                     	;# 
  4108  0000                     	;# 
  4109  0001                     	;# 
  4110  0002                     	;# 
  4111  0003                     	;# 
  4112  0004                     	;# 
  4113  0005                     	;# 
  4114  0006                     	;# 
  4115  0007                     	;# 
  4116  0008                     	;# 
  4117  0009                     	;# 
  4118  000A                     	;# 
  4119  000B                     	;# 
  4120  000C                     	;# 
  4121  000D                     	;# 
  4122  000E                     	;# 
  4123  0010                     	;# 
  4124  0011                     	;# 
  4125  0012                     	;# 
  4126  0013                     	;# 
  4127  0014                     	;# 
  4128  0015                     	;# 
  4129  0016                     	;# 
  4130  0016                     	;# 
  4131  0017                     	;# 
  4132  0018                     	;# 
  4133  0019                     	;# 
  4134  001A                     	;# 
  4135  001A                     	;# 
  4136  001B                     	;# 
  4137  001B                     	;# 
  4138  001C                     	;# 
  4139  001D                     	;# 
  4140  001E                     	;# 
  4141  001F                     	;# 
  4142  008C                     	;# 
  4143  008D                     	;# 
  4144  008E                     	;# 
  4145  0090                     	;# 
  4146  0091                     	;# 
  4147  0092                     	;# 
  4148  0093                     	;# 
  4149  0094                     	;# 
  4150  0095                     	;# 
  4151  0096                     	;# 
  4152  0098                     	;# 
  4153  0099                     	;# 
  4154  009A                     	;# 
  4155  009B                     	;# 
  4156  009B                     	;# 
  4157  009C                     	;# 
  4158  009D                     	;# 
  4159  009E                     	;# 
  4160  009F                     	;# 
  4161  010C                     	;# 
  4162  010D                     	;# 
  4163  010E                     	;# 
  4164  0111                     	;# 
  4165  0112                     	;# 
  4166  0113                     	;# 
  4167  0114                     	;# 
  4168  0115                     	;# 
  4169  0116                     	;# 
  4170  0117                     	;# 
  4171  0118                     	;# 
  4172  0119                     	;# 
  4173  011C                     	;# 
  4174  018C                     	;# 
  4175  018D                     	;# 
  4176  018E                     	;# 
  4177  0191                     	;# 
  4178  0191                     	;# 
  4179  0192                     	;# 
  4180  0193                     	;# 
  4181  0193                     	;# 
  4182  0194                     	;# 
  4183  0195                     	;# 
  4184  0196                     	;# 
  4185  0197                     	;# 
  4186  0199                     	;# 
  4187  0199                     	;# 
  4188  0199                     	;# 
  4189  019A                     	;# 
  4190  019A                     	;# 
  4191  019A                     	;# 
  4192  019B                     	;# 
  4193  019B                     	;# 
  4194  019B                     	;# 
  4195  019B                     	;# 
  4196  019B                     	;# 
  4197  019C                     	;# 
  4198  019C                     	;# 
  4199  019C                     	;# 
  4200  019D                     	;# 
  4201  019D                     	;# 
  4202  019D                     	;# 
  4203  019E                     	;# 
  4204  019E                     	;# 
  4205  019E                     	;# 
  4206  019F                     	;# 
  4207  019F                     	;# 
  4208  019F                     	;# 
  4209  019F                     	;# 
  4210  019F                     	;# 
  4211  020C                     	;# 
  4212  020D                     	;# 
  4213  020E                     	;# 
  4214  0211                     	;# 
  4215  0211                     	;# 
  4216  0212                     	;# 
  4217  0212                     	;# 
  4218  0213                     	;# 
  4219  0213                     	;# 
  4220  0214                     	;# 
  4221  0214                     	;# 
  4222  0215                     	;# 
  4223  0215                     	;# 
  4224  0215                     	;# 
  4225  0215                     	;# 
  4226  0216                     	;# 
  4227  0216                     	;# 
  4228  0217                     	;# 
  4229  0217                     	;# 
  4230  028C                     	;# 
  4231  028D                     	;# 
  4232  028E                     	;# 
  4233  0291                     	;# 
  4234  0291                     	;# 
  4235  0292                     	;# 
  4236  0293                     	;# 
  4237  0294                     	;# 
  4238  0298                     	;# 
  4239  0298                     	;# 
  4240  0299                     	;# 
  4241  029A                     	;# 
  4242  029B                     	;# 
  4243  029E                     	;# 
  4244  030C                     	;# 
  4245  030D                     	;# 
  4246  030E                     	;# 
  4247  038C                     	;# 
  4248  038D                     	;# 
  4249  038E                     	;# 
  4250  0391                     	;# 
  4251  0392                     	;# 
  4252  0393                     	;# 
  4253  0394                     	;# 
  4254  0395                     	;# 
  4255  0396                     	;# 
  4256  0397                     	;# 
  4257  0398                     	;# 
  4258  0399                     	;# 
  4259  040E                     	;# 
  4260  0413                     	;# 
  4261  0413                     	;# 
  4262  0414                     	;# 
  4263  0414                     	;# 
  4264  0415                     	;# 
  4265  0416                     	;# 
  4266  0417                     	;# 
  4267  0418                     	;# 
  4268  041A                     	;# 
  4269  041A                     	;# 
  4270  041B                     	;# 
  4271  041B                     	;# 
  4272  041C                     	;# 
  4273  041D                     	;# 
  4274  041E                     	;# 
  4275  041F                     	;# 
  4276  0493                     	;# 
  4277  0494                     	;# 
  4278  0495                     	;# 
  4279  0496                     	;# 
  4280  049A                     	;# 
  4281  049B                     	;# 
  4282  049C                     	;# 
  4283  049D                     	;# 
  4284  058C                     	;# 
  4285  058C                     	;# 
  4286  058D                     	;# 
  4287  058E                     	;# 
  4288  058E                     	;# 
  4289  058F                     	;# 
  4290  0590                     	;# 
  4291  0590                     	;# 
  4292  0591                     	;# 
  4293  0592                     	;# 
  4294  0592                     	;# 
  4295  0593                     	;# 
  4296  0594                     	;# 
  4297  0594                     	;# 
  4298  0595                     	;# 
  4299  0596                     	;# 
  4300  0596                     	;# 
  4301  0597                     	;# 
  4302  0598                     	;# 
  4303  0599                     	;# 
  4304  059A                     	;# 
  4305  059B                     	;# 
  4306  059B                     	;# 
  4307  059C                     	;# 
  4308  059D                     	;# 
  4309  060C                     	;# 
  4310  060C                     	;# 
  4311  060D                     	;# 
  4312  060E                     	;# 
  4313  060F                     	;# 
  4314  060F                     	;# 
  4315  0610                     	;# 
  4316  0611                     	;# 
  4317  0612                     	;# 
  4318  0613                     	;# 
  4319  0614                     	;# 
  4320  0617                     	;# 
  4321  0617                     	;# 
  4322  0618                     	;# 
  4323  0619                     	;# 
  4324  061A                     	;# 
  4325  061A                     	;# 
  4326  061B                     	;# 
  4327  061C                     	;# 
  4328  0691                     	;# 
  4329  0692                     	;# 
  4330  0693                     	;# 
  4331  0694                     	;# 
  4332  0695                     	;# 
  4333  0696                     	;# 
  4334  0697                     	;# 
  4335  0699                     	;# 
  4336  069A                     	;# 
  4337  0711                     	;# 
  4338  0712                     	;# 
  4339  0713                     	;# 
  4340  0714                     	;# 
  4341  0715                     	;# 
  4342  0718                     	;# 
  4343  0718                     	;# 
  4344  0719                     	;# 
  4345  071A                     	;# 
  4346  071A                     	;# 
  4347  071B                     	;# 
  4348  071C                     	;# 
  4349  071D                     	;# 
  4350  0791                     	;# 
  4351  0791                     	;# 
  4352  0792                     	;# 
  4353  0793                     	;# 
  4354  0793                     	;# 
  4355  0794                     	;# 
  4356  0795                     	;# 
  4357  0795                     	;# 
  4358  0796                     	;# 
  4359  0797                     	;# 
  4360  0797                     	;# 
  4361  0798                     	;# 
  4362  0799                     	;# 
  4363  079A                     	;# 
  4364  080C                     	;# 
  4365  080C                     	;# 
  4366  080D                     	;# 
  4367  080E                     	;# 
  4368  080E                     	;# 
  4369  080F                     	;# 
  4370  0810                     	;# 
  4371  0810                     	;# 
  4372  0811                     	;# 
  4373  0812                     	;# 
  4374  0812                     	;# 
  4375  0813                     	;# 
  4376  0814                     	;# 
  4377  0815                     	;# 
  4378  0816                     	;# 
  4379  0817                     	;# 
  4380  0818                     	;# 
  4381  0819                     	;# 
  4382  081A                     	;# 
  4383  081A                     	;# 
  4384  081B                     	;# 
  4385  081C                     	;# 
  4386  081C                     	;# 
  4387  081D                     	;# 
  4388  088C                     	;# 
  4389  088D                     	;# 
  4390  088E                     	;# 
  4391  088F                     	;# 
  4392  088F                     	;# 
  4393  0890                     	;# 
  4394  0891                     	;# 
  4395  0892                     	;# 
  4396  0893                     	;# 
  4397  0893                     	;# 
  4398  0894                     	;# 
  4399  0895                     	;# 
  4400  0896                     	;# 
  4401  0897                     	;# 
  4402  0897                     	;# 
  4403  0898                     	;# 
  4404  0899                     	;# 
  4405  0D8C                     	;# 
  4406  0D8C                     	;# 
  4407  0D8D                     	;# 
  4408  0D8E                     	;# 
  4409  0D8F                     	;# 
  4410  0D8F                     	;# 
  4411  0D90                     	;# 
  4412  0D91                     	;# 
  4413  0D92                     	;# 
  4414  0D92                     	;# 
  4415  0D93                     	;# 
  4416  0D94                     	;# 
  4417  0D95                     	;# 
  4418  0D95                     	;# 
  4419  0D96                     	;# 
  4420  0D97                     	;# 
  4421  0D98                     	;# 
  4422  0D99                     	;# 
  4423  0D9A                     	;# 
  4424  0D9B                     	;# 
  4425  0D9C                     	;# 
  4426  0D9D                     	;# 
  4427  0D9E                     	;# 
  4428  0D9E                     	;# 
  4429  0D9F                     	;# 
  4430  0DA0                     	;# 
  4431  0DA1                     	;# 
  4432  0DA1                     	;# 
  4433  0DA2                     	;# 
  4434  0DA3                     	;# 
  4435  0DA4                     	;# 
  4436  0DA4                     	;# 
  4437  0DA5                     	;# 
  4438  0DA6                     	;# 
  4439  0DA7                     	;# 
  4440  0DA7                     	;# 
  4441  0DA8                     	;# 
  4442  0DA9                     	;# 
  4443  0DAA                     	;# 
  4444  0DAB                     	;# 
  4445  0DAC                     	;# 
  4446  0DAD                     	;# 
  4447  0DAE                     	;# 
  4448  0DAF                     	;# 
  4449  0E0F                     	;# 
  4450  0E10                     	;# 
  4451  0E11                     	;# 
  4452  0E12                     	;# 
  4453  0E13                     	;# 
  4454  0E14                     	;# 
  4455  0E15                     	;# 
  4456  0E16                     	;# 
  4457  0E17                     	;# 
  4458  0E18                     	;# 
  4459  0E19                     	;# 
  4460  0E1A                     	;# 
  4461  0E1B                     	;# 
  4462  0E1C                     	;# 
  4463  0E1D                     	;# 
  4464  0E1E                     	;# 
  4465  0E1F                     	;# 
  4466  0E20                     	;# 
  4467  0E21                     	;# 
  4468  0E22                     	;# 
  4469  0E23                     	;# 
  4470  0E24                     	;# 
  4471  0E25                     	;# 
  4472  0E26                     	;# 
  4473  0E27                     	;# 
  4474  0E28                     	;# 
  4475  0E29                     	;# 
  4476  0E2A                     	;# 
  4477  0E2B                     	;# 
  4478  0E2C                     	;# 
  4479  0E2D                     	;# 
  4480  0E2E                     	;# 
  4481  0E90                     	;# 
  4482  0E91                     	;# 
  4483  0E92                     	;# 
  4484  0E94                     	;# 
  4485  0E95                     	;# 
  4486  0E9C                     	;# 
  4487  0E9D                     	;# 
  4488  0E9E                     	;# 
  4489  0E9F                     	;# 
  4490  0EA0                     	;# 
  4491  0EA1                     	;# 
  4492  0EA2                     	;# 
  4493  0EA3                     	;# 
  4494  0EA4                     	;# 
  4495  0EA5                     	;# 
  4496  0EA6                     	;# 
  4497  0EA7                     	;# 
  4498  0F0F                     	;# 
  4499  0F10                     	;# 
  4500  0F11                     	;# 
  4501  0F12                     	;# 
  4502  0F13                     	;# 
  4503  0F14                     	;# 
  4504  0F15                     	;# 
  4505  0F16                     	;# 
  4506  0F17                     	;# 
  4507  0F18                     	;# 
  4508  0F19                     	;# 
  4509  0F1A                     	;# 
  4510  0F1B                     	;# 
  4511  0F1C                     	;# 
  4512  0F1D                     	;# 
  4513  0F1E                     	;# 
  4514  0F1F                     	;# 
  4515  0F20                     	;# 
  4516  0F21                     	;# 
  4517  0F22                     	;# 
  4518  0F23                     	;# 
  4519  0F24                     	;# 
  4520  0F25                     	;# 
  4521  0F26                     	;# 
  4522  0F27                     	;# 
  4523  0F28                     	;# 
  4524  0F29                     	;# 
  4525  0F2A                     	;# 
  4526  0F2B                     	;# 
  4527  0F2C                     	;# 
  4528  0F2D                     	;# 
  4529  0F2E                     	;# 
  4530  0F2F                     	;# 
  4531  0F30                     	;# 
  4532  0F31                     	;# 
  4533  0F32                     	;# 
  4534  0F33                     	;# 
  4535  0F34                     	;# 
  4536  0F35                     	;# 
  4537  0F36                     	;# 
  4538  0F37                     	;# 
  4539  0FE4                     	;# 
  4540  0FE5                     	;# 
  4541  0FE6                     	;# 
  4542  0FE7                     	;# 
  4543  0FE8                     	;# 
  4544  0FE9                     	;# 
  4545  0FEA                     	;# 
  4546  0FEB                     	;# 
  4547  0FED                     	;# 
  4548  0FEE                     	;# 
  4549  0FEF                     	;# 
  4550                           
  4551                           	psect	idataBANK2
  4552  19B8                     __pidataBANK2:	
  4553                           
  4554                           ;initializer for _messages
  4555  19B8  34A0               	retlw	low (_message_start| (0+512))
  4556  19B9  3402               	retlw	high (_message_start| (0+512))
  4557  19BA  3420               	retlw	low (_message_end| (0+768))
  4558  19BB  3403               	retlw	high (_message_end| (0+768))
  4559                           
  4560                           	psect	nvBANK2
  4561  0162                     __pnvBANK2:	
  4562  0162                     _TMR0_InterruptHandler:	
  4563  0162                     	ds	2
  4564  0164                     _timer0ReloadVal:	
  4565  0164                     	ds	1
  4566  0015                     _TMR0	set	21
  4567  000B                     _INTCONbits	set	11
  4568  0010                     _PIR1bits	set	16
  4569  0095                     _OPTION_REG	set	149
  4570  0095                     _OPTION_REGbits	set	149
  4571  008E                     _TRISC	set	142
  4572  008D                     _TRISB	set	141
  4573  008C                     _TRISA	set	140
  4574  0098                     _OSCTUNE	set	152
  4575  0099                     _OSCCON	set	153
  4576  010E                     _LATCbits	set	270
  4577  010C                     _LATAbits	set	268
  4578  010E                     _LATC	set	270
  4579  010D                     _LATB	set	269
  4580  010C                     _LATA	set	268
  4581  0116                     _BORCON	set	278
  4582  019C                     _SPBRGH	set	412
  4583  019B                     _SPBRGL	set	411
  4584  019E                     _TX1STA	set	414
  4585  019D                     _RC1STA	set	413
  4586  019F                     _BAUD1CON	set	415
  4587  018C                     _ANSELA	set	396
  4588  018D                     _ANSELB	set	397
  4589  018E                     _ANSELC	set	398
  4590  0216                     _SSP1CON2bits	set	534
  4591  0211                     _SSP1BUF	set	529
  4592  0215                     _SSP1CON1bits	set	533
  4593  0212                     _SSP1ADD	set	530
  4594  0216                     _SSP1CON2	set	534
  4595  0215                     _SSP1CON1	set	533
  4596  0214                     _SSP1STAT	set	532
  4597  020E                     _WPUC	set	526
  4598  020C                     _WPUA	set	524
  4599  020D                     _WPUB	set	525
  4600  028E                     _ODCONC	set	654
  4601  028D                     _ODCONB	set	653
  4602  028C                     _ODCONA	set	652
  4603  030E                     _SLRCONC	set	782
  4604  030D                     _SLRCONB	set	781
  4605  030C                     _SLRCONA	set	780
  4606  0E21                     _SSPDATPPS	set	3617
  4607  0E20                     _SSPCLKPPS	set	3616
  4608  0E24                     _RXPPS	set	3620
  4609  0E9C                     _RB4PPS	set	3740
  4610  0E9E                     _RB6PPS	set	3742
  4611  0E9F                     _RB7PPS	set	3743
  4612                           
  4613                           	psect	stringtext1
  4614  1800                     __pstringtext1:	
  4615  1800                     STR_1:	
  4616  1800  3457               	retlw	87	;'W'
  4617  1801  3469               	retlw	105	;'i'
  4618  1802  3473               	retlw	115	;'s'
  4619  1803  3470               	retlw	112	;'p'
  4620  1804  342D               	retlw	45	;'-'
  4621  1805  3431               	retlw	49	;'1'
  4622  1806  3400               	retlw	0
  4623                           
  4624                           	psect	stringtext2
  4625  1807                     __pstringtext2:	
  4626  1807                     STR_2:	
  4627  1807  3424               	retlw	36	;'$'
  4628  1808  3424               	retlw	36	;'$'
  4629  1809  3400               	retlw	0
  4630                           
  4631                           	psect	stringtext3
  4632  0000                     __pstringtext3:	
  4633                           
  4634                           ; #config settings
  4635  0000                     
  4636                           	psect	cinit
  4637  000F                     start_initialization:	
  4638  000F                     __initialization:	
  4639                           
  4640                           ; Initialize objects allocated to BANK2
  4641  000F  0022               	movlb	2	; select bank2
  4642  0010  3199  21B8  3180   	fcall	__pidataBANK2	;fetch initializer
  4643  0013  00DE               	movwf	__pdataBANK2& (0+127)
  4644  0014  3199  21B9  3180   	fcall	__pidataBANK2+1	;fetch initializer
  4645  0017  00DF               	movwf	(__pdataBANK2+1)& (0+127)
  4646  0018  3199  21BA  3180   	fcall	__pidataBANK2+2	;fetch initializer
  4647  001B  00E0               	movwf	(__pdataBANK2+2)& (0+127)
  4648  001C  3199  21BB  3180   	fcall	__pidataBANK2+3	;fetch initializer
  4649  001F  00E1               	movwf	(__pdataBANK2+3)& (0+127)
  4650                           
  4651                           ; Clear objects allocated to BANK1
  4652  0020  30E8               	movlw	low __pbssBANK1
  4653  0021  0084               	movwf	4
  4654  0022  3000               	movlw	high __pbssBANK1
  4655  0023  0085               	movwf	5
  4656  0024  3008               	movlw	8
  4657  0025  3199  21C2  3180   	fcall	clear_ram0
  4658                           
  4659                           ; Clear objects allocated to BANK2
  4660  0028  3042               	movlw	low __pbssBANK2
  4661  0029  0084               	movwf	4
  4662  002A  3001               	movlw	high __pbssBANK2
  4663  002B  0085               	movwf	5
  4664  002C  301C               	movlw	28
  4665  002D  3199  21C2  3180   	fcall	clear_ram0
  4666                           
  4667                           ; Clear objects allocated to BANK3
  4668  0030  30A0               	movlw	low __pbssBANK3
  4669  0031  0084               	movwf	4
  4670  0032  3001               	movlw	high __pbssBANK3
  4671  0033  0085               	movwf	5
  4672  0034  3043               	movlw	67
  4673  0035  3199  21C2  3180   	fcall	clear_ram0
  4674                           
  4675                           ; Clear objects allocated to BANK4
  4676  0038  3020               	movlw	low __pbssBANK4
  4677  0039  0084               	movwf	4
  4678  003A  3002               	movlw	high __pbssBANK4
  4679  003B  0085               	movwf	5
  4680  003C  301A               	movlw	26
  4681  003D  3199  21C2  3180   	fcall	clear_ram0
  4682                           
  4683                           ; Clear objects allocated to BANK5
  4684  0040  30A0               	movlw	low __pbssBANK5
  4685  0041  0084               	movwf	4
  4686  0042  3002               	movlw	high __pbssBANK5
  4687  0043  0085               	movwf	5
  4688  0044  3046               	movlw	70
  4689  0045  3199  21C2  3180   	fcall	clear_ram0
  4690                           
  4691                           ; Clear objects allocated to BANK6
  4692  0048  3020               	movlw	low __pbssBANK6
  4693  0049  0084               	movwf	4
  4694  004A  3003               	movlw	high __pbssBANK6
  4695  004B  0085               	movwf	5
  4696  004C  3049               	movlw	73
  4697  004D  3199  21C2         	fcall	clear_ram0
  4698  004F                     end_of_initialization:	
  4699                           ;End of C runtime variable initialization code
  4700                           
  4701  004F                     __end_of__initialization:	
  4702  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4703  0050  0020               	movlb	0
  4704  0051  318A  2ABE         	ljmp	_main	;jump to C main() function
  4705                           
  4706                           	psect	bssBANK1
  4707  00E8                     __pbssBANK1:	
  4708  00E8                     _ticks:	
  4709  00E8                     	ds	4
  4710  00EC                     ___g_timeout_start:	
  4711  00EC                     	ds	4
  4712                           
  4713                           	psect	bssBANK2
  4714  0142                     __pbssBANK2:	
  4715  0142                     bme280_get_sensor_data@F273:	
  4716  0142                     	ds	12
  4717  014E                     bme280_get_sensor_data@F271:	
  4718  014E                     	ds	8
  4719  0156                     _id:	
  4720  0156                     	ds	2
  4721  0158                     _checksum:	
  4722  0158                     	ds	6
  4723                           
  4724                           	psect	dataBANK2
  4725  015E                     __pdataBANK2:	
  4726  015E                     _messages:	
  4727  015E                     	ds	4
  4728                           
  4729                           	psect	bssBANK3
  4730  01A0                     __pbssBANK3:	
  4731  01A0                     main@F10039:	
  4732  01A0                     	ds	16
  4733  01B0                     _EnvSensor:	
  4734  01B0                     	ds	51
  4735                           
  4736                           	psect	bssBANK4
  4737  0220                     __pbssBANK4:	
  4738  0220                     get_calib_data@F376:	
  4739  0220                     	ds	26
  4740                           
  4741                           	psect	bssBANK5
  4742  02A0                     __pbssBANK5:	
  4743  02A0                     _message_start:	
  4744  02A0                     	ds	70
  4745                           
  4746                           	psect	bssBANK6
  4747  0320                     __pbssBANK6:	
  4748  0320                     _message_end:	
  4749  0320                     	ds	73
  4750                           
  4751                           	psect	clrtext
  4752  19C2                     clear_ram0:	
  4753                           ;	Called with FSR0 containing the base address, and
  4754                           ;	WREG with the size to clear
  4755                           
  4756  19C2  0064               	clrwdt	;clear the watchdog before getting into this loop
  4757  19C3                     clrloop0:	
  4758  19C3  0180               	clrf	0	;clear RAM location pointed to by FSR
  4759  19C4  3101               	addfsr 0,1
  4760  19C5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4761  19C6  29C3               	goto	clrloop0	;have we reached the end yet?
  4762  19C7  3400               	retlw	0	;all done for this memory range, return
  4763                           
  4764                           	psect	cstackBANK2
  4765  0120                     __pcstackBANK2:	
  4766  0120                     main@convertedNumber:	
  4767                           
  4768                           ; 16 bytes @ 0x0
  4769  0120                     	ds	16
  4770  0130                     main@end:	
  4771                           
  4772                           ; 2 bytes @ 0x10
  4773  0130                     	ds	2
  4774  0132                     main@i:	
  4775                           
  4776                           ; 2 bytes @ 0x12
  4777  0132                     	ds	2
  4778  0134                     main@sensor_data:	
  4779                           
  4780                           ; 12 bytes @ 0x14
  4781  0134                     	ds	12
  4782  0140                     main@index:	
  4783                           
  4784                           ; 2 bytes @ 0x20
  4785  0140                     	ds	2
  4786                           
  4787                           	psect	cstackBANK1
  4788  00A0                     __pcstackBANK1:	
  4789  00A0                     ??_put_device_to_sleep:	
  4790  00A0                     compensate_pressure@var3:	
  4791                           ; 1 bytes @ 0x0
  4792                           
  4793                           
  4794                           ; 4 bytes @ 0x0
  4795  00A0                     	ds	3
  4796  00A3                     put_device_to_sleep@reg_data:	
  4797                           
  4798                           ; 4 bytes @ 0x3
  4799  00A3                     	ds	1
  4800  00A4                     compensate_pressure@var4:	
  4801                           
  4802                           ; 4 bytes @ 0x4
  4803  00A4                     	ds	3
  4804  00A7                     put_device_to_sleep@rslt:	
  4805                           
  4806                           ; 1 bytes @ 0x7
  4807  00A7                     	ds	1
  4808  00A8                     put_device_to_sleep@dev:	
  4809  00A8                     compensate_pressure@var5:	
  4810                           ; 1 bytes @ 0x8
  4811                           
  4812                           
  4813                           ; 4 bytes @ 0x8
  4814  00A8                     	ds	1
  4815  00A9                     put_device_to_sleep@settings:	
  4816                           
  4817                           ; 5 bytes @ 0x9
  4818  00A9                     	ds	3
  4819  00AC                     _compensate_pressure$2264:	
  4820                           
  4821                           ; 4 bytes @ 0xC
  4822  00AC                     	ds	2
  4823  00AE                     ?_bme280_set_sensor_settings:	
  4824  00AE                     ?_bme280_set_sensor_mode:	
  4825                           ; 1 bytes @ 0xE
  4826                           
  4827  00AE                     bme280_set_sensor_settings@dev:	
  4828                           ; 1 bytes @ 0xE
  4829                           
  4830  00AE                     bme280_set_sensor_mode@dev:	
  4831                           ; 1 bytes @ 0xE
  4832                           
  4833                           
  4834                           ; 1 bytes @ 0xE
  4835  00AE                     	ds	1
  4836  00AF                     ??_bme280_set_sensor_settings:	
  4837  00AF                     ??_bme280_set_sensor_mode:	
  4838                           ; 1 bytes @ 0xF
  4839                           
  4840                           
  4841                           ; 1 bytes @ 0xF
  4842  00AF                     	ds	1
  4843  00B0                     _compensate_pressure$2265:	
  4844                           
  4845                           ; 4 bytes @ 0x10
  4846  00B0                     	ds	1
  4847  00B1                     bme280_set_sensor_settings@desired_settings:	
  4848  00B1                     bme280_set_sensor_mode@sensor_mode:	
  4849                           ; 1 bytes @ 0x11
  4850                           
  4851                           
  4852                           ; 1 bytes @ 0x11
  4853  00B1                     	ds	1
  4854  00B2                     bme280_set_sensor_settings@sensor_mode:	
  4855  00B2                     bme280_set_sensor_mode@last_set_mode:	
  4856                           ; 1 bytes @ 0x12
  4857                           
  4858                           
  4859                           ; 1 bytes @ 0x12
  4860  00B2                     	ds	1
  4861  00B3                     bme280_set_sensor_settings@rslt:	
  4862  00B3                     bme280_set_sensor_mode@rslt:	
  4863                           ; 1 bytes @ 0x13
  4864                           
  4865                           
  4866                           ; 1 bytes @ 0x13
  4867  00B3                     	ds	1
  4868  00B4                     ??_BME280_Init:	
  4869  00B4                     compensate_pressure@uncomp_data:	
  4870                           ; 1 bytes @ 0x14
  4871                           
  4872                           
  4873                           ; 1 bytes @ 0x14
  4874  00B4                     	ds	1
  4875  00B5                     compensate_pressure@pressure_max:	
  4876                           
  4877                           ; 4 bytes @ 0x15
  4878  00B5                     	ds	1
  4879  00B6                     BME280_Init@settings_sel:	
  4880                           
  4881                           ; 1 bytes @ 0x16
  4882  00B6                     	ds	1
  4883  00B7                     BME280_Init@rslt:	
  4884                           
  4885                           ; 1 bytes @ 0x17
  4886  00B7                     	ds	2
  4887  00B9                     _compensate_pressure$2263:	
  4888                           
  4889                           ; 4 bytes @ 0x19
  4890  00B9                     	ds	8
  4891  00C1                     compensate_pressure@var2:	
  4892                           
  4893                           ; 4 bytes @ 0x21
  4894  00C1                     	ds	4
  4895  00C5                     compensate_pressure@pressure:	
  4896                           
  4897                           ; 4 bytes @ 0x25
  4898  00C5                     	ds	4
  4899  00C9                     compensate_pressure@var1:	
  4900                           
  4901                           ; 4 bytes @ 0x29
  4902  00C9                     	ds	4
  4903  00CD                     bme280_get_sensor_data@reg_data:	
  4904                           
  4905                           ; 8 bytes @ 0x2D
  4906  00CD                     	ds	8
  4907  00D5                     bme280_get_sensor_data@sensor_comp:	
  4908                           
  4909                           ; 1 bytes @ 0x35
  4910  00D5                     	ds	1
  4911  00D6                     bme280_get_sensor_data@rslt:	
  4912                           
  4913                           ; 1 bytes @ 0x36
  4914  00D6                     	ds	1
  4915  00D7                     bme280_get_sensor_data@uncomp_data:	
  4916                           
  4917                           ; 12 bytes @ 0x37
  4918  00D7                     	ds	12
  4919  00E3                     ??_main:	
  4920                           
  4921                           ; 1 bytes @ 0x43
  4922  00E3                     	ds	5
  4923                           
  4924                           	psect	cstackCOMMON
  4925  0070                     __pcstackCOMMON:	
  4926  0070                     ?_null_ptr_check:	
  4927  0070                     ??_null_ptr_check:	
  4928                           ; 1 bytes @ 0x0
  4929                           
  4930  0070                     ?_interleave_reg_addr:	
  4931                           ; 1 bytes @ 0x0
  4932                           
  4933  0070                     ?_are_settings_changed:	
  4934                           ; 1 bytes @ 0x0
  4935                           
  4936  0070                     ?_parse_device_settings:	
  4937                           ; 1 bytes @ 0x0
  4938                           
  4939  0070                     ?_bme280_parse_sensor_data:	
  4940                           ; 1 bytes @ 0x0
  4941                           
  4942  0070                     ?_fill_osr_press_settings:	
  4943                           ; 1 bytes @ 0x0
  4944                           
  4945  0070                     ?_fill_osr_temp_settings:	
  4946                           ; 1 bytes @ 0x0
  4947                           
  4948  0070                     ?_fill_filter_settings:	
  4949                           ; 1 bytes @ 0x0
  4950                           
  4951  0070                     ?_fill_standby_settings:	
  4952                           ; 1 bytes @ 0x0
  4953                           
  4954  0070                     ?_parse_temp_press_calib_data:	
  4955                           ; 1 bytes @ 0x0
  4956                           
  4957  0070                     ?_parse_humidity_calib_data:	
  4958                           ; 1 bytes @ 0x0
  4959                           
  4960  0070                     ?_PIN_MANAGER_Initialize:	
  4961                           ; 1 bytes @ 0x0
  4962                           
  4963  0070                     ??_PIN_MANAGER_Initialize:	
  4964                           ; 1 bytes @ 0x0
  4965                           
  4966  0070                     ?_OSCILLATOR_Initialize:	
  4967                           ; 1 bytes @ 0x0
  4968                           
  4969  0070                     ??_OSCILLATOR_Initialize:	
  4970                           ; 1 bytes @ 0x0
  4971                           
  4972  0070                     ?_TMR0_Initialize:	
  4973                           ; 1 bytes @ 0x0
  4974                           
  4975  0070                     ?_EUSART_Initialize:	
  4976                           ; 1 bytes @ 0x0
  4977                           
  4978  0070                     ??_EUSART_Initialize:	
  4979                           ; 1 bytes @ 0x0
  4980                           
  4981  0070                     ?_TMR0_ISR:	
  4982                           ; 1 bytes @ 0x0
  4983                           
  4984  0070                     ??_TMR0_ISR:	
  4985                           ; 1 bytes @ 0x0
  4986                           
  4987  0070                     ?_TMR0_SetInterruptHandler:	
  4988                           ; 1 bytes @ 0x0
  4989                           
  4990  0070                     ?_TMR0_DefaultInterruptHandler:	
  4991                           ; 1 bytes @ 0x0
  4992                           
  4993  0070                     ??_TMR0_DefaultInterruptHandler:	
  4994                           ; 1 bytes @ 0x0
  4995                           
  4996  0070                     ?_InitTiming:	
  4997                           ; 1 bytes @ 0x0
  4998                           
  4999  0070                     ?_BME280_Init:	
  5000                           ; 1 bytes @ 0x0
  5001                           
  5002  0070                     ?_I2C_UserAlert:	
  5003                           ; 1 bytes @ 0x0
  5004                           
  5005  0070                     ?_Sleep:	
  5006                           ; 1 bytes @ 0x0
  5007                           
  5008  0070                     ?_SYSTEM_Initialize:	
  5009                           ; 1 bytes @ 0x0
  5010                           
  5011  0070                     ?_INTERRUPT_InterruptManager:	
  5012                           ; 1 bytes @ 0x0
  5013                           
  5014  0070                     ??_INTERRUPT_InterruptManager:	
  5015                           ; 1 bytes @ 0x0
  5016                           
  5017  0070                     ?_ReverseString:	
  5018                           ; 1 bytes @ 0x0
  5019                           
  5020  0070                     ?_main:	
  5021                           ; 1 bytes @ 0x0
  5022                           
  5023  0070                     ?_I2C_Init:	
  5024                           ; 1 bytes @ 0x0
  5025                           
  5026  0070                     ??_I2C_Init:	
  5027                           ; 1 bytes @ 0x0
  5028                           
  5029  0070                     ?_I2C_WriteByte:	
  5030                           ; 1 bytes @ 0x0
  5031                           
  5032  0070                     ?_I2C_ReadByte:	
  5033                           ; 1 bytes @ 0x0
  5034                           
  5035  0070                     ?_I2C_Stop:	
  5036                           ; 1 bytes @ 0x0
  5037                           
  5038  0070                     ?_TimerISR:	
  5039                           ; 1 bytes @ 0x0
  5040                           
  5041  0070                     ??_TimerISR:	
  5042                           ; 1 bytes @ 0x0
  5043                           
  5044  0070                     ?_TransmitBit:	
  5045                           ; 1 bytes @ 0x0
  5046                           
  5047  0070                     ??_TransmitBit:	
  5048                           ; 1 bytes @ 0x0
  5049                           
  5050  0070                     ?_TransmitByte:	
  5051                           ; 1 bytes @ 0x0
  5052                           
  5053  0070                     ?_strlen:	
  5054                           ; 1 bytes @ 0x0
  5055                           
  5056  0070                     ?_Insert:	
  5057                           ; 2 bytes @ 0x0
  5058                           
  5059  0070                     ?___awdiv:	
  5060                           ; 2 bytes @ 0x0
  5061                           
  5062  0070                     ?___awmod:	
  5063                           ; 2 bytes @ 0x0
  5064                           
  5065  0070                     ?___lmul:	
  5066                           ; 2 bytes @ 0x0
  5067                           
  5068  0070                     ?___lldiv:	
  5069                           ; 4 bytes @ 0x0
  5070                           
  5071  0070                     ?___llmod:	
  5072                           ; 4 bytes @ 0x0
  5073                           
  5074  0070                     bme280_parse_sensor_data@uncomp_data:	
  5075                           ; 4 bytes @ 0x0
  5076                           
  5077  0070                     parse_device_settings@settings:	
  5078                           ; 1 bytes @ 0x0
  5079                           
  5080  0070                     interleave_reg_addr@temp_buff:	
  5081                           ; 1 bytes @ 0x0
  5082                           
  5083  0070                     parse_temp_press_calib_data@dev:	
  5084                           ; 1 bytes @ 0x0
  5085                           
  5086  0070                     parse_humidity_calib_data@dev:	
  5087                           ; 1 bytes @ 0x0
  5088                           
  5089  0070                     are_settings_changed@desired_settings:	
  5090                           ; 1 bytes @ 0x0
  5091                           
  5092  0070                     I2C_UserAlert@status:	
  5093                           ; 1 bytes @ 0x0
  5094                           
  5095  0070                     fill_filter_settings@settings:	
  5096                           ; 1 bytes @ 0x0
  5097                           
  5098  0070                     fill_standby_settings@settings:	
  5099                           ; 2 bytes @ 0x0
  5100                           
  5101  0070                     fill_osr_press_settings@settings:	
  5102                           ; 2 bytes @ 0x0
  5103                           
  5104  0070                     fill_osr_temp_settings@settings:	
  5105                           ; 2 bytes @ 0x0
  5106                           
  5107  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  5108                           ; 2 bytes @ 0x0
  5109                           
  5110  0070                     Insert@dest:	
  5111                           ; 2 bytes @ 0x0
  5112                           
  5113  0070                     ___awdiv@divisor:	
  5114                           ; 2 bytes @ 0x0
  5115                           
  5116  0070                     ___awmod@divisor:	
  5117                           ; 2 bytes @ 0x0
  5118                           
  5119  0070                     strlen@s:	
  5120                           ; 2 bytes @ 0x0
  5121                           
  5122  0070                     Sleep@ms:	
  5123                           ; 2 bytes @ 0x0
  5124                           
  5125  0070                     ___lmul@multiplier:	
  5126                           ; 4 bytes @ 0x0
  5127                           
  5128  0070                     ___lldiv@divisor:	
  5129                           ; 4 bytes @ 0x0
  5130                           
  5131  0070                     ___llmod@divisor:	
  5132                           ; 4 bytes @ 0x0
  5133                           
  5134                           
  5135                           ; 4 bytes @ 0x0
  5136  0070                     	ds	1
  5137  0071                     ??_are_settings_changed:	
  5138  0071                     ??_parse_device_settings:	
  5139                           ; 1 bytes @ 0x1
  5140                           
  5141  0071                     ??_bme280_parse_sensor_data:	
  5142                           ; 1 bytes @ 0x1
  5143                           
  5144  0071                     ??_parse_temp_press_calib_data:	
  5145                           ; 1 bytes @ 0x1
  5146                           
  5147  0071                     ??_parse_humidity_calib_data:	
  5148                           ; 1 bytes @ 0x1
  5149                           
  5150  0071                     interleave_reg_addr@reg_data:	
  5151                           ; 1 bytes @ 0x1
  5152                           
  5153  0071                     are_settings_changed@sub_settings:	
  5154                           ; 1 bytes @ 0x1
  5155                           
  5156  0071                     TransmitBit@b:	
  5157                           ; 1 bytes @ 0x1
  5158                           
  5159                           
  5160                           ; 1 bytes @ 0x1
  5161  0071                     	ds	1
  5162  0072                     ??_fill_osr_press_settings:	
  5163  0072                     ??_fill_osr_temp_settings:	
  5164                           ; 1 bytes @ 0x2
  5165                           
  5166  0072                     ??_fill_filter_settings:	
  5167                           ; 1 bytes @ 0x2
  5168                           
  5169  0072                     ??_fill_standby_settings:	
  5170                           ; 1 bytes @ 0x2
  5171                           
  5172  0072                     ??_TMR0_Initialize:	
  5173                           ; 1 bytes @ 0x2
  5174                           
  5175  0072                     ??_TMR0_SetInterruptHandler:	
  5176                           ; 1 bytes @ 0x2
  5177                           
  5178  0072                     ??_strlen:	
  5179                           ; 1 bytes @ 0x2
  5180                           
  5181  0072                     ??_InitTiming:	
  5182                           ; 1 bytes @ 0x2
  5183                           
  5184  0072                     ??_TransmitByte:	
  5185                           ; 1 bytes @ 0x2
  5186                           
  5187  0072                     interleave_reg_addr@len:	
  5188                           ; 1 bytes @ 0x2
  5189                           
  5190  0072                     parse_temp_press_calib_data@calib_data:	
  5191                           ; 1 bytes @ 0x2
  5192                           
  5193  0072                     are_settings_changed@settings_changed:	
  5194                           ; 1 bytes @ 0x2
  5195                           
  5196  0072                     null_ptr_check@rslt:	
  5197                           ; 1 bytes @ 0x2
  5198                           
  5199  0072                     Insert@src:	
  5200                           ; 1 bytes @ 0x2
  5201                           
  5202  0072                     ___awdiv@dividend:	
  5203                           ; 1 bytes @ 0x2
  5204                           
  5205  0072                     ___awmod@dividend:	
  5206                           ; 2 bytes @ 0x2
  5207                           
  5208                           
  5209                           ; 2 bytes @ 0x2
  5210  0072                     	ds	1
  5211  0073                     ??_interleave_reg_addr:	
  5212  0073                     ??_SYSTEM_Initialize:	
  5213                           ; 1 bytes @ 0x3
  5214                           
  5215  0073                     parse_device_settings@reg_data:	
  5216                           ; 1 bytes @ 0x3
  5217                           
  5218  0073                     parse_temp_press_calib_data@reg_data:	
  5219                           ; 1 bytes @ 0x3
  5220                           
  5221  0073                     null_ptr_check@dev:	
  5222                           ; 1 bytes @ 0x3
  5223                           
  5224  0073                     TransmitByte@byte:	
  5225                           ; 1 bytes @ 0x3
  5226                           
  5227  0073                     Insert@index:	
  5228                           ; 1 bytes @ 0x3
  5229                           
  5230  0073                     strlen@a:	
  5231                           ; 2 bytes @ 0x3
  5232                           
  5233                           
  5234                           ; 2 bytes @ 0x3
  5235  0073                     	ds	1
  5236  0074                     ??_Sleep:	
  5237  0074                     ??___awdiv:	
  5238                           ; 1 bytes @ 0x4
  5239                           
  5240  0074                     ??___awmod:	
  5241                           ; 1 bytes @ 0x4
  5242                           
  5243  0074                     parse_humidity_calib_data@dig_H4_lsb:	
  5244                           ; 1 bytes @ 0x4
  5245                           
  5246  0074                     TransmitByte@i:	
  5247                           ; 2 bytes @ 0x4
  5248                           
  5249  0074                     ___lmul@multiplicand:	
  5250                           ; 2 bytes @ 0x4
  5251                           
  5252  0074                     ___lldiv@dividend:	
  5253                           ; 4 bytes @ 0x4
  5254                           
  5255  0074                     ___llmod@dividend:	
  5256                           ; 4 bytes @ 0x4
  5257                           
  5258                           
  5259                           ; 4 bytes @ 0x4
  5260  0074                     	ds	1
  5261  0075                     ?_ClearString:	
  5262  0075                     ?_crc16_update:	
  5263                           ; 1 bytes @ 0x5
  5264                           
  5265  0075                     fill_filter_settings@reg_data:	
  5266                           ; 2 bytes @ 0x5
  5267                           
  5268  0075                     fill_standby_settings@reg_data:	
  5269                           ; 1 bytes @ 0x5
  5270                           
  5271  0075                     fill_osr_press_settings@reg_data:	
  5272                           ; 1 bytes @ 0x5
  5273                           
  5274  0075                     fill_osr_temp_settings@reg_data:	
  5275                           ; 1 bytes @ 0x5
  5276                           
  5277  0075                     ___awdiv@counter:	
  5278                           ; 1 bytes @ 0x5
  5279                           
  5280  0075                     ___awmod@counter:	
  5281                           ; 1 bytes @ 0x5
  5282                           
  5283  0075                     ClearString@str:	
  5284                           ; 1 bytes @ 0x5
  5285                           
  5286  0075                     Insert@destLimit:	
  5287                           ; 2 bytes @ 0x5
  5288                           
  5289  0075                     crc16_update@pData:	
  5290                           ; 2 bytes @ 0x5
  5291                           
  5292                           
  5293                           ; 2 bytes @ 0x5
  5294  0075                     	ds	1
  5295  0076                     ?_TransmitString:	
  5296  0076                     interleave_reg_addr@reg_addr:	
  5297                           ; 1 bytes @ 0x6
  5298                           
  5299  0076                     ___awdiv@sign:	
  5300                           ; 1 bytes @ 0x6
  5301                           
  5302  0076                     ___awmod@sign:	
  5303                           ; 1 bytes @ 0x6
  5304                           
  5305  0076                     parse_humidity_calib_data@dig_H4_msb:	
  5306                           ; 1 bytes @ 0x6
  5307                           
  5308  0076                     TransmitString@message:	
  5309                           ; 2 bytes @ 0x6
  5310                           
  5311                           
  5312                           ; 2 bytes @ 0x6
  5313  0076                     	ds	1
  5314  0077                     ??_ClearString:	
  5315  0077                     ??_Insert:	
  5316                           ; 1 bytes @ 0x7
  5317                           
  5318  0077                     interleave_reg_addr@index:	
  5319                           ; 1 bytes @ 0x7
  5320                           
  5321  0077                     crc16_update@length:	
  5322                           ; 1 bytes @ 0x7
  5323                           
  5324  0077                     ___awdiv@quotient:	
  5325                           ; 2 bytes @ 0x7
  5326                           
  5327                           
  5328                           ; 2 bytes @ 0x7
  5329  0077                     	ds	1
  5330  0078                     ??_TransmitString:	
  5331  0078                     ??___lmul:	
  5332                           ; 1 bytes @ 0x8
  5333                           
  5334  0078                     ??___lldiv:	
  5335                           ; 1 bytes @ 0x8
  5336                           
  5337  0078                     ??___llmod:	
  5338                           ; 1 bytes @ 0x8
  5339                           
  5340  0078                     parse_humidity_calib_data@dig_H5_lsb:	
  5341                           ; 1 bytes @ 0x8
  5342                           
  5343  0078                     ClearString@counti:	
  5344                           ; 2 bytes @ 0x8
  5345                           
  5346  0078                     Sleep@start:	
  5347                           ; 2 bytes @ 0x8
  5348                           
  5349  0078                     ___lmul@product:	
  5350                           ; 4 bytes @ 0x8
  5351                           
  5352                           
  5353                           ; 4 bytes @ 0x8
  5354  0078                     	ds	1
  5355  0079                     ??_ReverseString:	
  5356  0079                     Insert@temp:	
  5357                           ; 1 bytes @ 0x9
  5358                           
  5359  0079                     ___llmod@counter:	
  5360                           ; 1 bytes @ 0x9
  5361                           
  5362  0079                     crc16_update@wCrc:	
  5363                           ; 1 bytes @ 0x9
  5364                           
  5365  0079                     TransmitString@counti:	
  5366                           ; 2 bytes @ 0x9
  5367                           
  5368  0079                     ___lldiv@quotient:	
  5369                           ; 2 bytes @ 0x9
  5370                           
  5371                           
  5372                           ; 4 bytes @ 0x9
  5373  0079                     	ds	1
  5374  007A                     Insert@current:	
  5375  007A                     parse_humidity_calib_data@dig_H5_msb:	
  5376                           ; 1 bytes @ 0xA
  5377                           
  5378  007A                     ClearString@i:	
  5379                           ; 2 bytes @ 0xA
  5380                           
  5381                           
  5382                           ; 2 bytes @ 0xA
  5383  007A                     	ds	1
  5384  007B                     ??_InsertString:	
  5385  007B                     ?_IntToString:	
  5386                           ; 1 bytes @ 0xB
  5387                           
  5388  007B                     ??_crc16_update:	
  5389                           ; 1 bytes @ 0xB
  5390                           
  5391  007B                     IntToString@n:	
  5392                           ; 1 bytes @ 0xB
  5393                           
  5394  007B                     TransmitString@i:	
  5395                           ; 2 bytes @ 0xB
  5396                           
  5397                           
  5398                           ; 2 bytes @ 0xB
  5399  007B                     	ds	1
  5400  007C                     ??_DebugAlert:	
  5401  007C                     ??___aldiv:	
  5402                           ; 1 bytes @ 0xC
  5403                           
  5404  007C                     parse_humidity_calib_data@calib_data:	
  5405                           ; 1 bytes @ 0xC
  5406                           
  5407                           
  5408                           ; 1 bytes @ 0xC
  5409  007C                     	ds	1
  5410  007D                     ??_I2C_UserAlert:	
  5411  007D                     parse_humidity_calib_data@reg_data:	
  5412                           ; 1 bytes @ 0xD
  5413                           
  5414  007D                     IntToString@dest:	
  5415                           ; 1 bytes @ 0xD
  5416                           
  5417  007D                     I2C_WriteByte@data:	
  5418                           ; 1 bytes @ 0xD
  5419                           
  5420  007D                     ___lldiv@counter:	
  5421                           ; 1 bytes @ 0xD
  5422                           
  5423                           
  5424                           ; 1 bytes @ 0xD
  5425  007D                     	ds	1
  5426                           
  5427                           	psect	cstackBANK0
  5428  0020                     __pcstackBANK0:	
  5429  0020                     ?_DebugAlert:	
  5430  0020                     ?_InsertString:	
  5431                           ; 1 bytes @ 0x0
  5432                           
  5433  0020                     ?___aldiv:	
  5434                           ; 2 bytes @ 0x0
  5435                           
  5436  0020                     crc16_update@i:	
  5437                           ; 4 bytes @ 0x0
  5438                           
  5439  0020                     InsertString@dest:	
  5440                           ; 1 bytes @ 0x0
  5441                           
  5442  0020                     ReverseString@halfway:	
  5443                           ; 2 bytes @ 0x0
  5444                           
  5445  0020                     DebugAlert@delay_high:	
  5446                           ; 2 bytes @ 0x0
  5447                           
  5448  0020                     bme280_parse_sensor_data@data_xlsb:	
  5449                           ; 2 bytes @ 0x0
  5450                           
  5451  0020                     ___aldiv@divisor:	
  5452                           ; 4 bytes @ 0x0
  5453                           
  5454                           
  5455                           ; 4 bytes @ 0x0
  5456  0020                     	ds	1
  5457  0021                     ?_crc16:	
  5458  0021                     crc16@segments:	
  5459                           ; 2 bytes @ 0x1
  5460                           
  5461                           
  5462                           ; 2 bytes @ 0x1
  5463  0021                     	ds	1
  5464  0022                     ReverseString@temp:	
  5465  0022                     InsertString@src:	
  5466                           ; 1 bytes @ 0x2
  5467                           
  5468  0022                     DebugAlert@delay_low:	
  5469                           ; 2 bytes @ 0x2
  5470                           
  5471                           
  5472                           ; 2 bytes @ 0x2
  5473  0022                     	ds	1
  5474  0023                     ??_crc16:	
  5475  0023                     ReverseString@opposite:	
  5476                           ; 1 bytes @ 0x3
  5477                           
  5478                           
  5479                           ; 1 bytes @ 0x3
  5480  0023                     	ds	1
  5481  0024                     DebugAlert@num_flashes:	
  5482  0024                     InsertString@index:	
  5483                           ; 1 bytes @ 0x4
  5484                           
  5485  0024                     ReverseString@counti:	
  5486                           ; 2 bytes @ 0x4
  5487                           
  5488  0024                     bme280_parse_sensor_data@data_lsb:	
  5489                           ; 2 bytes @ 0x4
  5490                           
  5491  0024                     ___aldiv@dividend:	
  5492                           ; 4 bytes @ 0x4
  5493                           
  5494                           
  5495                           ; 4 bytes @ 0x4
  5496  0024                     	ds	1
  5497  0025                     crc16@data:	
  5498  0025                     DebugAlert@i:	
  5499                           ; 1 bytes @ 0x5
  5500                           
  5501                           
  5502                           ; 2 bytes @ 0x5
  5503  0025                     	ds	1
  5504  0026                     InsertString@destLimit:	
  5505  0026                     ReverseString@i:	
  5506                           ; 2 bytes @ 0x6
  5507                           
  5508  0026                     crc16@crc:	
  5509                           ; 2 bytes @ 0x6
  5510                           
  5511                           
  5512                           ; 2 bytes @ 0x6
  5513  0026                     	ds	1
  5514  0027                     ??_I2C_ReadByte:	
  5515  0027                     ??_I2C_Stop:	
  5516                           ; 1 bytes @ 0x7
  5517                           
  5518                           
  5519                           ; 1 bytes @ 0x7
  5520  0027                     	ds	1
  5521  0028                     ReverseString@str:	
  5522  0028                     ___aldiv@counter:	
  5523                           ; 1 bytes @ 0x8
  5524                           
  5525  0028                     InsertString@counti:	
  5526                           ; 1 bytes @ 0x8
  5527                           
  5528  0028                     crc16@i:	
  5529                           ; 2 bytes @ 0x8
  5530                           
  5531  0028                     bme280_parse_sensor_data@data_msb:	
  5532                           ; 2 bytes @ 0x8
  5533                           
  5534                           
  5535                           ; 4 bytes @ 0x8
  5536  0028                     	ds	1
  5537  0029                     ??_IntToString:	
  5538  0029                     ?_UIntToString:	
  5539                           ; 1 bytes @ 0x9
  5540                           
  5541  0029                     ___aldiv@sign:	
  5542                           ; 1 bytes @ 0x9
  5543                           
  5544  0029                     UIntToString@n:	
  5545                           ; 1 bytes @ 0x9
  5546                           
  5547                           
  5548                           ; 4 bytes @ 0x9
  5549  0029                     	ds	1
  5550  002A                     ?_UIntToHexString:	
  5551  002A                     InsertString@i:	
  5552                           ; 1 bytes @ 0xA
  5553                           
  5554  002A                     UIntToHexString@n:	
  5555                           ; 2 bytes @ 0xA
  5556                           
  5557  002A                     ___aldiv@quotient:	
  5558                           ; 4 bytes @ 0xA
  5559                           
  5560                           
  5561                           ; 4 bytes @ 0xA
  5562  002A                     	ds	1
  5563  002B                     ??_I2C_WriteByte:	
  5564  002B                     IntToString@sign:	
  5565                           ; 1 bytes @ 0xB
  5566                           
  5567  002B                     I2C_ReadByte@ackbit:	
  5568                           ; 1 bytes @ 0xB
  5569                           
  5570                           
  5571                           ; 1 bytes @ 0xB
  5572  002B                     	ds	1
  5573  002C                     bme280_parse_sensor_data@reg_data:	
  5574  002C                     I2C_ReadByte@rcvdata:	
  5575                           ; 1 bytes @ 0xC
  5576                           
  5577  002C                     IntToString@i:	
  5578                           ; 1 bytes @ 0xC
  5579                           
  5580                           
  5581                           ; 2 bytes @ 0xC
  5582  002C                     	ds	1
  5583  002D                     UIntToString@dest:	
  5584                           
  5585                           ; 1 bytes @ 0xD
  5586  002D                     	ds	1
  5587  002E                     ??_UIntToString:	
  5588  002E                     ?_compensate_temperature:	
  5589                           ; 1 bytes @ 0xE
  5590                           
  5591  002E                     ?_compensate_pressure:	
  5592                           ; 4 bytes @ 0xE
  5593                           
  5594  002E                     ?_compensate_humidity:	
  5595                           ; 4 bytes @ 0xE
  5596                           
  5597  002E                     compensate_temperature@calib_data:	
  5598                           ; 4 bytes @ 0xE
  5599                           
  5600  002E                     compensate_pressure@calib_data:	
  5601                           ; 1 bytes @ 0xE
  5602                           
  5603  002E                     compensate_humidity@calib_data:	
  5604                           ; 1 bytes @ 0xE
  5605                           
  5606  002E                     UIntToHexString@dest:	
  5607                           ; 1 bytes @ 0xE
  5608                           
  5609                           
  5610                           ; 1 bytes @ 0xE
  5611  002E                     	ds	1
  5612  002F                     ?_ReadEnvSensor:	
  5613  002F                     ?_WriteEnvSensor:	
  5614                           ; 1 bytes @ 0xF
  5615                           
  5616  002F                     ??_UIntToHexString:	
  5617                           ; 1 bytes @ 0xF
  5618                           
  5619  002F                     ReadEnvSensor@dev_id:	
  5620                           ; 1 bytes @ 0xF
  5621                           
  5622  002F                     WriteEnvSensor@dev_id:	
  5623                           ; 1 bytes @ 0xF
  5624                           
  5625                           
  5626                           ; 1 bytes @ 0xF
  5627  002F                     	ds	1
  5628  0030                     ReadEnvSensor@reg_addr:	
  5629  0030                     WriteEnvSensor@reg_addr:	
  5630                           ; 1 bytes @ 0x10
  5631                           
  5632  0030                     UIntToString@i:	
  5633                           ; 1 bytes @ 0x10
  5634                           
  5635                           
  5636                           ; 2 bytes @ 0x10
  5637  0030                     	ds	1
  5638  0031                     ReadEnvSensor@reg_data:	
  5639  0031                     WriteEnvSensor@reg_data:	
  5640                           ; 1 bytes @ 0x11
  5641                           
  5642  0031                     _UIntToHexString$1373:	
  5643                           ; 1 bytes @ 0x11
  5644                           
  5645                           
  5646                           ; 4 bytes @ 0x11
  5647  0031                     	ds	1
  5648  0032                     ??_compensate_temperature:	
  5649  0032                     ??_compensate_pressure:	
  5650                           ; 1 bytes @ 0x12
  5651                           
  5652  0032                     ??_compensate_humidity:	
  5653                           ; 1 bytes @ 0x12
  5654                           
  5655  0032                     ReadEnvSensor@len:	
  5656                           ; 1 bytes @ 0x12
  5657                           
  5658  0032                     WriteEnvSensor@len:	
  5659                           ; 2 bytes @ 0x12
  5660                           
  5661                           
  5662                           ; 2 bytes @ 0x12
  5663  0032                     	ds	2
  5664  0034                     ??_ReadEnvSensor:	
  5665  0034                     ??_WriteEnvSensor:	
  5666                           ; 1 bytes @ 0x14
  5667                           
  5668                           
  5669                           ; 1 bytes @ 0x14
  5670  0034                     	ds	1
  5671  0035                     UIntToHexString@remainder:	
  5672                           
  5673                           ; 4 bytes @ 0x15
  5674  0035                     	ds	3
  5675  0038                     ReadEnvSensor@rslt:	
  5676  0038                     WriteEnvSensor@rslt:	
  5677                           ; 1 bytes @ 0x18
  5678                           
  5679                           
  5680                           ; 1 bytes @ 0x18
  5681  0038                     	ds	1
  5682  0039                     ReadEnvSensor@i:	
  5683  0039                     WriteEnvSensor@i:	
  5684                           ; 2 bytes @ 0x19
  5685                           
  5686  0039                     UIntToHexString@i:	
  5687                           ; 2 bytes @ 0x19
  5688                           
  5689                           
  5690                           ; 4 bytes @ 0x19
  5691  0039                     	ds	1
  5692  003A                     _compensate_humidity$2266:	
  5693                           
  5694                           ; 4 bytes @ 0x1A
  5695  003A                     	ds	1
  5696  003B                     ?_bme280_get_regs:	
  5697  003B                     ?_bme280_set_regs:	
  5698                           ; 1 bytes @ 0x1B
  5699                           
  5700  003B                     bme280_get_regs@reg_data:	
  5701                           ; 1 bytes @ 0x1B
  5702                           
  5703  003B                     bme280_set_regs@reg_data:	
  5704                           ; 1 bytes @ 0x1B
  5705                           
  5706                           
  5707                           ; 1 bytes @ 0x1B
  5708  003B                     	ds	1
  5709  003C                     bme280_set_regs@len:	
  5710  003C                     bme280_get_regs@len:	
  5711                           ; 1 bytes @ 0x1C
  5712                           
  5713  003C                     _compensate_temperature$2262:	
  5714                           ; 2 bytes @ 0x1C
  5715                           
  5716                           
  5717                           ; 4 bytes @ 0x1C
  5718  003C                     	ds	1
  5719  003D                     bme280_set_regs@dev:	
  5720                           
  5721                           ; 1 bytes @ 0x1D
  5722  003D                     	ds	1
  5723  003E                     ?_get_calib_data:	
  5724  003E                     ??_bme280_set_regs:	
  5725                           ; 1 bytes @ 0x1E
  5726                           
  5727  003E                     bme280_get_regs@dev:	
  5728                           ; 1 bytes @ 0x1E
  5729                           
  5730  003E                     compensate_humidity@uncomp_data:	
  5731                           ; 1 bytes @ 0x1E
  5732                           
  5733                           
  5734                           ; 1 bytes @ 0x1E
  5735  003E                     	ds	1
  5736  003F                     ??_bme280_get_regs:	
  5737                           
  5738                           ; 1 bytes @ 0x1F
  5739  003F                     	ds	2
  5740  0041                     bme280_set_regs@temp_buff:	
  5741                           
  5742                           ; 20 bytes @ 0x21
  5743  0041                     	ds	1
  5744  0042                     bme280_get_regs@reg_addr:	
  5745                           
  5746                           ; 1 bytes @ 0x22
  5747  0042                     	ds	1
  5748  0043                     bme280_get_regs@rslt:	
  5749  0043                     compensate_humidity@humidity:	
  5750                           ; 1 bytes @ 0x23
  5751                           
  5752                           
  5753                           ; 4 bytes @ 0x23
  5754  0043                     	ds	1
  5755  0044                     ??_get_calib_data:	
  5756  0044                     ?_bme280_get_sensor_mode:	
  5757                           ; 1 bytes @ 0x24
  5758                           
  5759  0044                     bme280_get_sensor_mode@dev:	
  5760                           ; 1 bytes @ 0x24
  5761                           
  5762  0044                     compensate_temperature@temperature_max:	
  5763                           ; 1 bytes @ 0x24
  5764                           
  5765                           
  5766                           ; 4 bytes @ 0x24
  5767  0044                     	ds	1
  5768  0045                     ??_bme280_get_sensor_mode:	
  5769                           
  5770                           ; 1 bytes @ 0x25
  5771  0045                     	ds	2
  5772  0047                     compensate_humidity@var1:	
  5773  0047                     get_calib_data@calib_data:	
  5774                           ; 4 bytes @ 0x27
  5775                           
  5776                           
  5777                           ; 26 bytes @ 0x27
  5778  0047                     	ds	1
  5779  0048                     bme280_get_sensor_mode@rslt:	
  5780  0048                     compensate_temperature@var1:	
  5781                           ; 1 bytes @ 0x28
  5782                           
  5783                           
  5784                           ; 4 bytes @ 0x28
  5785  0048                     	ds	1
  5786  0049                     bme280_get_sensor_mode@sensor_mode:	
  5787                           
  5788                           ; 1 bytes @ 0x29
  5789  0049                     	ds	2
  5790  004B                     compensate_humidity@var2:	
  5791                           
  5792                           ; 4 bytes @ 0x2B
  5793  004B                     	ds	1
  5794  004C                     compensate_temperature@uncomp_data:	
  5795                           
  5796                           ; 1 bytes @ 0x2C
  5797  004C                     	ds	1
  5798  004D                     compensate_temperature@var2:	
  5799                           
  5800                           ; 4 bytes @ 0x2D
  5801  004D                     	ds	2
  5802  004F                     compensate_humidity@var4:	
  5803                           
  5804                           ; 4 bytes @ 0x2F
  5805  004F                     	ds	2
  5806  0051                     compensate_temperature@temperature:	
  5807                           
  5808                           ; 4 bytes @ 0x31
  5809  0051                     	ds	2
  5810  0053                     ?_bme280_soft_reset:	
  5811  0053                     compensate_humidity@var5:	
  5812                           ; 1 bytes @ 0x33
  5813                           
  5814                           
  5815                           ; 4 bytes @ 0x33
  5816  0053                     	ds	2
  5817  0055                     bme280_set_regs@temp_len:	
  5818                           
  5819                           ; 2 bytes @ 0x35
  5820  0055                     	ds	2
  5821  0057                     bme280_set_regs@reg_addr_cnt:	
  5822  0057                     compensate_humidity@var3:	
  5823                           ; 1 bytes @ 0x37
  5824                           
  5825                           
  5826                           ; 4 bytes @ 0x37
  5827  0057                     	ds	1
  5828  0058                     bme280_set_regs@rslt:	
  5829                           
  5830                           ; 1 bytes @ 0x38
  5831  0058                     	ds	1
  5832  0059                     bme280_set_regs@reg_addr:	
  5833                           
  5834                           ; 1 bytes @ 0x39
  5835  0059                     	ds	1
  5836  005A                     ??_bme280_soft_reset:	
  5837  005A                     ?_set_filter_standby_settings:	
  5838                           ; 1 bytes @ 0x3A
  5839                           
  5840  005A                     ?_write_power_mode:	
  5841                           ; 1 bytes @ 0x3A
  5842                           
  5843  005A                     ?_set_osr_humidity_settings:	
  5844                           ; 1 bytes @ 0x3A
  5845                           
  5846  005A                     ?_set_osr_press_temp_settings:	
  5847                           ; 1 bytes @ 0x3A
  5848                           
  5849  005A                     write_power_mode@dev:	
  5850                           ; 1 bytes @ 0x3A
  5851                           
  5852  005A                     set_osr_humidity_settings@settings:	
  5853                           ; 1 bytes @ 0x3A
  5854                           
  5855  005A                     set_osr_press_temp_settings@settings:	
  5856                           ; 2 bytes @ 0x3A
  5857                           
  5858  005A                     set_filter_standby_settings@settings:	
  5859                           ; 2 bytes @ 0x3A
  5860                           
  5861                           
  5862                           ; 2 bytes @ 0x3A
  5863  005A                     	ds	1
  5864  005B                     ??_write_power_mode:	
  5865  005B                     ?_bme280_compensate_data:	
  5866                           ; 1 bytes @ 0x3B
  5867                           
  5868  005B                     bme280_compensate_data@uncomp_data:	
  5869                           ; 1 bytes @ 0x3B
  5870                           
  5871                           
  5872                           ; 1 bytes @ 0x3B
  5873  005B                     	ds	1
  5874  005C                     bme280_compensate_data@comp_data:	
  5875  005C                     set_osr_humidity_settings@dev:	
  5876                           ; 1 bytes @ 0x3C
  5877                           
  5878  005C                     set_osr_press_temp_settings@dev:	
  5879                           ; 1 bytes @ 0x3C
  5880                           
  5881  005C                     set_filter_standby_settings@dev:	
  5882                           ; 1 bytes @ 0x3C
  5883                           
  5884                           
  5885                           ; 1 bytes @ 0x3C
  5886  005C                     	ds	1
  5887  005D                     ??_set_filter_standby_settings:	
  5888  005D                     ??_set_osr_humidity_settings:	
  5889                           ; 1 bytes @ 0x3D
  5890                           
  5891  005D                     ??_set_osr_press_temp_settings:	
  5892                           ; 1 bytes @ 0x3D
  5893                           
  5894  005D                     bme280_soft_reset@soft_rst_cmd:	
  5895                           ; 1 bytes @ 0x3D
  5896                           
  5897  005D                     bme280_compensate_data@calib_data:	
  5898                           ; 1 bytes @ 0x3D
  5899                           
  5900                           
  5901                           ; 1 bytes @ 0x3D
  5902  005D                     	ds	1
  5903  005E                     ??_bme280_compensate_data:	
  5904  005E                     ?_bme280_init:	
  5905                           ; 1 bytes @ 0x3E
  5906                           
  5907  005E                     bme280_soft_reset@rslt:	
  5908                           ; 1 bytes @ 0x3E
  5909                           
  5910  005E                     write_power_mode@sensor_mode:	
  5911                           ; 1 bytes @ 0x3E
  5912                           
  5913                           
  5914                           ; 1 bytes @ 0x3E
  5915  005E                     	ds	1
  5916  005F                     bme280_soft_reset@reg_addr:	
  5917  005F                     bme280_compensate_data@rslt:	
  5918                           ; 1 bytes @ 0x3F
  5919                           
  5920  005F                     write_power_mode@rslt:	
  5921                           ; 1 bytes @ 0x3F
  5922                           
  5923                           
  5924                           ; 1 bytes @ 0x3F
  5925  005F                     	ds	1
  5926  0060                     bme280_soft_reset@dev:	
  5927  0060                     bme280_compensate_data@sensor_comp:	
  5928                           ; 1 bytes @ 0x40
  5929                           
  5930  0060                     set_osr_humidity_settings@ctrl_hum:	
  5931                           ; 1 bytes @ 0x40
  5932                           
  5933  0060                     set_osr_press_temp_settings@desired_settings:	
  5934                           ; 1 bytes @ 0x40
  5935                           
  5936  0060                     set_filter_standby_settings@desired_settings:	
  5937                           ; 1 bytes @ 0x40
  5938                           
  5939  0060                     write_power_mode@reg_addr:	
  5940                           ; 1 bytes @ 0x40
  5941                           
  5942                           
  5943                           ; 1 bytes @ 0x40
  5944  0060                     	ds	1
  5945  0061                     ?_bme280_get_sensor_data:	
  5946  0061                     bme280_get_sensor_data@comp_data:	
  5947                           ; 1 bytes @ 0x41
  5948                           
  5949  0061                     set_osr_humidity_settings@ctrl_meas:	
  5950                           ; 1 bytes @ 0x41
  5951                           
  5952  0061                     set_osr_press_temp_settings@rslt:	
  5953                           ; 1 bytes @ 0x41
  5954                           
  5955  0061                     set_filter_standby_settings@rslt:	
  5956                           ; 1 bytes @ 0x41
  5957                           
  5958  0061                     write_power_mode@sensor_mode_reg_val:	
  5959                           ; 1 bytes @ 0x41
  5960                           
  5961                           
  5962                           ; 1 bytes @ 0x41
  5963  0061                     	ds	1
  5964  0062                     bme280_get_sensor_data@dev:	
  5965  0062                     set_osr_humidity_settings@rslt:	
  5966                           ; 1 bytes @ 0x42
  5967                           
  5968  0062                     set_osr_press_temp_settings@reg_addr:	
  5969                           ; 1 bytes @ 0x42
  5970                           
  5971  0062                     set_filter_standby_settings@reg_addr:	
  5972                           ; 1 bytes @ 0x42
  5973                           
  5974  0062                     get_calib_data@rslt:	
  5975                           ; 1 bytes @ 0x42
  5976                           
  5977                           
  5978                           ; 1 bytes @ 0x42
  5979  0062                     	ds	1
  5980  0063                     ??_bme280_get_sensor_data:	
  5981  0063                     set_osr_humidity_settings@reg_addr:	
  5982                           ; 1 bytes @ 0x43
  5983                           
  5984  0063                     set_osr_press_temp_settings@reg_data:	
  5985                           ; 1 bytes @ 0x43
  5986                           
  5987  0063                     set_filter_standby_settings@reg_data:	
  5988                           ; 1 bytes @ 0x43
  5989                           
  5990  0063                     get_calib_data@dev:	
  5991                           ; 1 bytes @ 0x43
  5992                           
  5993                           
  5994                           ; 1 bytes @ 0x43
  5995  0063                     	ds	1
  5996  0064                     ?_set_osr_settings:	
  5997  0064                     ??_bme280_init:	
  5998                           ; 1 bytes @ 0x44
  5999                           
  6000  0064                     set_osr_settings@settings:	
  6001                           ; 1 bytes @ 0x44
  6002                           
  6003                           
  6004                           ; 2 bytes @ 0x44
  6005  0064                     	ds	2
  6006  0066                     set_osr_settings@dev:	
  6007                           
  6008                           ; 1 bytes @ 0x46
  6009  0066                     	ds	1
  6010  0067                     ??_set_osr_settings:	
  6011  0067                     bme280_init@try_count:	
  6012                           ; 1 bytes @ 0x47
  6013                           
  6014                           
  6015                           ; 1 bytes @ 0x47
  6016  0067                     	ds	1
  6017  0068                     bme280_init@chip_id:	
  6018                           
  6019                           ; 1 bytes @ 0x48
  6020  0068                     	ds	1
  6021  0069                     ?_put_device_to_sleep:	
  6022  0069                     bme280_init@rslt:	
  6023                           ; 1 bytes @ 0x49
  6024                           
  6025  0069                     set_osr_settings@rslt:	
  6026                           ; 1 bytes @ 0x49
  6027                           
  6028                           
  6029                           ; 1 bytes @ 0x49
  6030  0069                     	ds	1
  6031  006A                     bme280_init@dev:	
  6032  006A                     set_osr_settings@desired_settings:	
  6033                           ; 1 bytes @ 0x4A
  6034                           
  6035                           
  6036                           ; 1 bytes @ 0x4A
  6037  006A                     	ds	1
  6038  006B                     ?_reload_device_settings:	
  6039  006B                     reload_device_settings@dev:	
  6040                           ; 1 bytes @ 0x4B
  6041                           
  6042                           
  6043                           ; 1 bytes @ 0x4B
  6044  006B                     	ds	1
  6045  006C                     ??_reload_device_settings:	
  6046                           
  6047                           ; 1 bytes @ 0x4C
  6048  006C                     	ds	2
  6049  006E                     reload_device_settings@settings:	
  6050                           
  6051                           ; 1 bytes @ 0x4E
  6052  006E                     	ds	1
  6053  006F                     reload_device_settings@rslt:	
  6054                           
  6055                           ; 1 bytes @ 0x4F
  6056  006F                     	ds	1
  6057                           
  6058                           	psect	maintext
  6059  0ABE                     __pmaintext:	
  6060 ;;
  6061 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  6062 ;;
  6063 ;; *************** function _main *****************
  6064 ;; Defined at:
  6065 ;;		line 663 in file "main.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;		None
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;  i               2   18[BANK2 ] int 
  6070 ;;  convertedNum   16    0[BANK2 ] unsigned char [16]
  6071 ;;  sensor_data    12   20[BANK2 ] struct bme280_data
  6072 ;;  index           2   32[BANK2 ] int 
  6073 ;;  end             2   16[BANK2 ] int 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      void 
  6076 ;; Registers used:
  6077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6078 ;; Tracked objects:
  6079 ;;		On entry : B1F/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Locals:         0       0       0      34       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Totals:         0       0       5      34       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;Total ram usage:       39 bytes
  6088 ;; Hardware stack levels required when called:   16
  6089 ;; This function calls:
  6090 ;;		_BME280_Init
  6091 ;;		_ClearString
  6092 ;;		_InitTiming
  6093 ;;		_Insert
  6094 ;;		_InsertString
  6095 ;;		_IntToString
  6096 ;;		_SYSTEM_Initialize
  6097 ;;		_TransmitString
  6098 ;;		_UIntToHexString
  6099 ;;		_UIntToString
  6100 ;;		_bme280_get_sensor_data
  6101 ;;		_crc16
  6102 ;;		_strlen
  6103 ;; This function is called by:
  6104 ;;		Startup code after reset
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           
  6109                           ;psect for function _main
  6110  0ABE                     _main:	
  6111                           
  6112                           ;main.c: 666:     SYSTEM_Initialize();
  6113                           
  6114                           ;incstack = 0
  6115                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6116  0ABE  3188  2001  318A   	fcall	_SYSTEM_Initialize
  6117                           
  6118                           ;main.c: 667:     InitTiming();
  6119  0AC1  3199  21CF  318A   	fcall	_InitTiming
  6120                           
  6121                           ;main.c: 670:     BME280_Init();
  6122  0AC4  3193  235B  318A   	fcall	_BME280_Init
  6123                           
  6124                           ;main.c: 672:     ClearString(messages[0]);
  6125  0AC7  0022               	movlb	2	; select bank2
  6126  0AC8  085F               	movf	(_messages+1)^(0+256),w
  6127  0AC9  00F6               	movwf	ClearString@str+1
  6128  0ACA  085E               	movf	_messages^(0+256),w
  6129  0ACB  00F5               	movwf	ClearString@str
  6130  0ACC  319B  2317  318A   	fcall	_ClearString
  6131                           
  6132                           ;main.c: 673:     ClearString(messages[1]);
  6133  0ACF  0022               	movlb	2	; select bank2
  6134  0AD0  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6135  0AD1  00F6               	movwf	ClearString@str+1
  6136  0AD2  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6137  0AD3  00F5               	movwf	ClearString@str
  6138  0AD4  319B  2317  318A   	fcall	_ClearString
  6139  0AD7                     l4686:	
  6140                           
  6141                           ;main.c: 690:         {;main.c: 692:             struct bme280_data sensor_data;;main.c:
      +                           693:             bme280_get_sensor_data(0x07, &sensor_data, &EnvSensor);
  6142  0AD7  3034               	movlw	(low (main@sensor_data| (0+256)))& (0+255)
  6143  0AD8  0021               	movlb	1	; select bank1
  6144  0AD9  00E3               	movwf	??_main^(0+128)
  6145  0ADA  0863               	movf	??_main^(0+128),w
  6146  0ADB  0020               	movlb	0	; select bank0
  6147  0ADC  00E1               	movwf	bme280_get_sensor_data@comp_data
  6148  0ADD  30B0               	movlw	(low (_EnvSensor| (0+256)))& (0+255)
  6149  0ADE  0021               	movlb	1	; select bank1
  6150  0ADF  00E4               	movwf	(??_main+1)^(0+128)
  6151  0AE0  0864               	movf	(??_main+1)^(0+128),w
  6152  0AE1  0020               	movlb	0	; select bank0
  6153  0AE2  00E2               	movwf	bme280_get_sensor_data@dev
  6154  0AE3  3007               	movlw	7
  6155  0AE4  3192  2233  318A   	fcall	_bme280_get_sensor_data
  6156                           
  6157                           ;main.c: 695:             ClearString(messages[0]);
  6158  0AE7  0022               	movlb	2	; select bank2
  6159  0AE8  085F               	movf	(_messages+1)^(0+256),w
  6160  0AE9  00F6               	movwf	ClearString@str+1
  6161  0AEA  085E               	movf	_messages^(0+256),w
  6162  0AEB  00F5               	movwf	ClearString@str
  6163  0AEC  319B  2317  318A   	fcall	_ClearString
  6164                           
  6165                           ;main.c: 696:             ClearString(messages[1]);
  6166  0AEF  0022               	movlb	2	; select bank2
  6167  0AF0  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6168  0AF1  00F6               	movwf	ClearString@str+1
  6169  0AF2  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6170  0AF3  00F5               	movwf	ClearString@str
  6171  0AF4  319B  2317  318A   	fcall	_ClearString
  6172                           
  6173                           ;main.c: 698:             char convertedNumber[16] = {'\0'};
  6174  0AF7  3020               	movlw	low main@convertedNumber
  6175  0AF8  0086               	movwf	6
  6176  0AF9  3001               	movlw	high main@convertedNumber
  6177  0AFA  0087               	movwf	7
  6178  0AFB  3010               	movlw	16
  6179  0AFC  0021               	movlb	1	; select bank1
  6180  0AFD  00E3               	movwf	??_main^(0+128)
  6181  0AFE  3000               	movlw	0
  6182  0AFF                     u5240:	
  6183  0AFF  001E               	movwi fsr1++
  6184  0B00  0BE3               	decfsz	??_main^(0+128),f
  6185  0B01  2AFF               	goto	u5240
  6186                           
  6187                           ;main.c: 700:             IntToString(sensor_data.temperature, convertedNumber);
  6188  0B02  0022               	movlb	2	; select bank2
  6189  0B03  0839               	movf	((main@sensor_data+1)^(0+256)+4),w
  6190  0B04  00FC               	movwf	IntToString@n+1
  6191  0B05  0838               	movf	(main@sensor_data^(0+256)+4),w
  6192  0B06  00FB               	movwf	IntToString@n
  6193  0B07  3020               	movlw	(low (main@convertedNumber| (0+256)))& (0+255)
  6194  0B08  0021               	movlb	1	; select bank1
  6195  0B09  00E3               	movwf	??_main^(0+128)
  6196  0B0A  0863               	movf	??_main^(0+128),w
  6197  0B0B  00FD               	movwf	IntToString@dest
  6198  0B0C  3193  23C3  318A   	fcall	_IntToString
  6199                           
  6200                           ;main.c: 701:             int index = strlen(messages[1]);
  6201  0B0F  0022               	movlb	2	; select bank2
  6202  0B10  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6203  0B11  00F1               	movwf	strlen@s+1
  6204  0B12  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6205  0B13  00F0               	movwf	strlen@s
  6206  0B14  319A  2231  318A   	fcall	_strlen
  6207  0B17  0871               	movf	?_strlen+1,w
  6208  0B18  0022               	movlb	2	; select bank2
  6209  0B19  00C1               	movwf	(main@index+1)^(0+256)
  6210  0B1A  0870               	movf	?_strlen,w
  6211  0B1B  00C0               	movwf	main@index^(0+256)
  6212                           
  6213                           ;main.c: 702:             index = InsertString(messages[1], convertedNumber, index, 70);
  6214  0B1C  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6215  0B1D  0020               	movlb	0	; select bank0
  6216  0B1E  00A1               	movwf	InsertString@dest+1
  6217  0B1F  0022               	movlb	2	; select bank2
  6218  0B20  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6219  0B21  0020               	movlb	0	; select bank0
  6220  0B22  00A0               	movwf	InsertString@dest
  6221  0B23  3020               	movlw	low main@convertedNumber
  6222  0B24  00A2               	movwf	InsertString@src
  6223  0B25  3001               	movlw	high main@convertedNumber
  6224  0B26  00A3               	movwf	InsertString@src+1
  6225  0B27  0022               	movlb	2	; select bank2
  6226  0B28  0841               	movf	(main@index+1)^(0+256),w
  6227  0B29  0020               	movlb	0	; select bank0
  6228  0B2A  00A5               	movwf	InsertString@index+1
  6229  0B2B  0022               	movlb	2	; select bank2
  6230  0B2C  0840               	movf	main@index^(0+256),w
  6231  0B2D  0020               	movlb	0	; select bank0
  6232  0B2E  00A4               	movwf	InsertString@index
  6233  0B2F  3046               	movlw	70
  6234  0B30  00A6               	movwf	InsertString@destLimit
  6235  0B31  3000               	movlw	0
  6236  0B32  00A7               	movwf	InsertString@destLimit+1
  6237  0B33  3190  2094  318A   	fcall	_InsertString
  6238  0B36  0821               	movf	?_InsertString+1,w
  6239  0B37  0022               	movlb	2	; select bank2
  6240  0B38  00C1               	movwf	(main@index+1)^(0+256)
  6241  0B39  0020               	movlb	0	; select bank0
  6242  0B3A  0820               	movf	?_InsertString,w
  6243  0B3B  0022               	movlb	2	; select bank2
  6244  0B3C  00C0               	movwf	main@index^(0+256)
  6245                           
  6246                           ;main.c: 703:             index = Insert(messages[1], ',', index, 70);
  6247  0B3D  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6248  0B3E  00F1               	movwf	Insert@dest+1
  6249  0B3F  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6250  0B40  00F0               	movwf	Insert@dest
  6251  0B41  302C               	movlw	44
  6252  0B42  0021               	movlb	1	; select bank1
  6253  0B43  00E3               	movwf	??_main^(0+128)
  6254  0B44  0863               	movf	??_main^(0+128),w
  6255  0B45  00F2               	movwf	Insert@src
  6256  0B46  0022               	movlb	2	; select bank2
  6257  0B47  0841               	movf	(main@index+1)^(0+256),w
  6258  0B48  00F4               	movwf	Insert@index+1
  6259  0B49  0840               	movf	main@index^(0+256),w
  6260  0B4A  00F3               	movwf	Insert@index
  6261  0B4B  3046               	movlw	70
  6262  0B4C  00F5               	movwf	Insert@destLimit
  6263  0B4D  3000               	movlw	0
  6264  0B4E  00F6               	movwf	Insert@destLimit+1
  6265  0B4F  3195  2501  318A   	fcall	_Insert
  6266  0B52  0871               	movf	?_Insert+1,w
  6267  0B53  0022               	movlb	2	; select bank2
  6268  0B54  00C1               	movwf	(main@index+1)^(0+256)
  6269  0B55  0870               	movf	?_Insert,w
  6270  0B56  00C0               	movwf	main@index^(0+256)
  6271                           
  6272                           ;main.c: 704:             ClearString(convertedNumber);
  6273  0B57  3020               	movlw	low main@convertedNumber
  6274  0B58  00F5               	movwf	ClearString@str
  6275  0B59  3001               	movlw	high main@convertedNumber
  6276  0B5A  00F6               	movwf	ClearString@str+1
  6277  0B5B  319B  2317  318A   	fcall	_ClearString
  6278                           
  6279                           ;main.c: 706:             UIntToString(sensor_data.pressure, convertedNumber);
  6280  0B5E  0022               	movlb	2	; select bank2
  6281  0B5F  0837               	movf	(main@sensor_data+3)^(0+256),w
  6282  0B60  0020               	movlb	0	; select bank0
  6283  0B61  00AC               	movwf	UIntToString@n+3
  6284  0B62  0022               	movlb	2	; select bank2
  6285  0B63  0836               	movf	(main@sensor_data+2)^(0+256),w
  6286  0B64  0020               	movlb	0	; select bank0
  6287  0B65  00AB               	movwf	UIntToString@n+2
  6288  0B66  0022               	movlb	2	; select bank2
  6289  0B67  0835               	movf	(main@sensor_data+1)^(0+256),w
  6290  0B68  0020               	movlb	0	; select bank0
  6291  0B69  00AA               	movwf	UIntToString@n+1
  6292  0B6A  0022               	movlb	2	; select bank2
  6293  0B6B  0834               	movf	main@sensor_data^(0+256),w
  6294  0B6C  0020               	movlb	0	; select bank0
  6295  0B6D  00A9               	movwf	UIntToString@n
  6296  0B6E  3020               	movlw	(low (main@convertedNumber| (0+256)))& (0+255)
  6297  0B6F  0021               	movlb	1	; select bank1
  6298  0B70  00E3               	movwf	??_main^(0+128)
  6299  0B71  0863               	movf	??_main^(0+128),w
  6300  0B72  0020               	movlb	0	; select bank0
  6301  0B73  00AD               	movwf	UIntToString@dest
  6302  0B74  3191  2188  318A   	fcall	_UIntToString
  6303                           
  6304                           ;main.c: 707:             index = InsertString(messages[1], convertedNumber, index, 70);
  6305  0B77  0022               	movlb	2	; select bank2
  6306  0B78  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6307  0B79  0020               	movlb	0	; select bank0
  6308  0B7A  00A1               	movwf	InsertString@dest+1
  6309  0B7B  0022               	movlb	2	; select bank2
  6310  0B7C  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6311  0B7D  0020               	movlb	0	; select bank0
  6312  0B7E  00A0               	movwf	InsertString@dest
  6313  0B7F  3020               	movlw	low main@convertedNumber
  6314  0B80  00A2               	movwf	InsertString@src
  6315  0B81  3001               	movlw	high main@convertedNumber
  6316  0B82  00A3               	movwf	InsertString@src+1
  6317  0B83  0022               	movlb	2	; select bank2
  6318  0B84  0841               	movf	(main@index+1)^(0+256),w
  6319  0B85  0020               	movlb	0	; select bank0
  6320  0B86  00A5               	movwf	InsertString@index+1
  6321  0B87  0022               	movlb	2	; select bank2
  6322  0B88  0840               	movf	main@index^(0+256),w
  6323  0B89  0020               	movlb	0	; select bank0
  6324  0B8A  00A4               	movwf	InsertString@index
  6325  0B8B  3046               	movlw	70
  6326  0B8C  00A6               	movwf	InsertString@destLimit
  6327  0B8D  3000               	movlw	0
  6328  0B8E  00A7               	movwf	InsertString@destLimit+1
  6329  0B8F  3190  2094  318A   	fcall	_InsertString
  6330  0B92  0821               	movf	?_InsertString+1,w
  6331  0B93  0022               	movlb	2	; select bank2
  6332  0B94  00C1               	movwf	(main@index+1)^(0+256)
  6333  0B95  0020               	movlb	0	; select bank0
  6334  0B96  0820               	movf	?_InsertString,w
  6335  0B97  0022               	movlb	2	; select bank2
  6336  0B98  00C0               	movwf	main@index^(0+256)
  6337                           
  6338                           ;main.c: 708:             index = Insert(messages[1], ',', index, 70);
  6339  0B99  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6340  0B9A  00F1               	movwf	Insert@dest+1
  6341  0B9B  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6342  0B9C  00F0               	movwf	Insert@dest
  6343  0B9D  302C               	movlw	44
  6344  0B9E  0021               	movlb	1	; select bank1
  6345  0B9F  00E3               	movwf	??_main^(0+128)
  6346  0BA0  0863               	movf	??_main^(0+128),w
  6347  0BA1  00F2               	movwf	Insert@src
  6348  0BA2  0022               	movlb	2	; select bank2
  6349  0BA3  0841               	movf	(main@index+1)^(0+256),w
  6350  0BA4  00F4               	movwf	Insert@index+1
  6351  0BA5  0840               	movf	main@index^(0+256),w
  6352  0BA6  00F3               	movwf	Insert@index
  6353  0BA7  3046               	movlw	70
  6354  0BA8  00F5               	movwf	Insert@destLimit
  6355  0BA9  3000               	movlw	0
  6356  0BAA  00F6               	movwf	Insert@destLimit+1
  6357  0BAB  3195  2501  318A   	fcall	_Insert
  6358  0BAE  0871               	movf	?_Insert+1,w
  6359  0BAF  0022               	movlb	2	; select bank2
  6360  0BB0  00C1               	movwf	(main@index+1)^(0+256)
  6361  0BB1  0870               	movf	?_Insert,w
  6362  0BB2  00C0               	movwf	main@index^(0+256)
  6363                           
  6364                           ;main.c: 709:             ClearString(convertedNumber);
  6365  0BB3  3020               	movlw	low main@convertedNumber
  6366  0BB4  00F5               	movwf	ClearString@str
  6367  0BB5  3001               	movlw	high main@convertedNumber
  6368  0BB6  00F6               	movwf	ClearString@str+1
  6369  0BB7  319B  2317  318A   	fcall	_ClearString
  6370                           
  6371                           ;main.c: 711:             UIntToString(sensor_data.humidity, convertedNumber);
  6372  0BBA  3008               	movlw	8
  6373  0BBB  3E34               	addlw	(low (main@sensor_data| (0+256)))& (0+255)
  6374  0BBC  0086               	movwf	6
  6375  0BBD  3001               	movlw	1	; select bank2/3
  6376  0BBE  0087               	movwf	7
  6377  0BBF  3F40               	moviw [0]fsr1
  6378  0BC0  0020               	movlb	0	; select bank0
  6379  0BC1  00A9               	movwf	UIntToString@n
  6380  0BC2  3F41               	moviw [1]fsr1
  6381  0BC3  00AA               	movwf	UIntToString@n+1
  6382  0BC4  3F42               	moviw [2]fsr1
  6383  0BC5  00AB               	movwf	UIntToString@n+2
  6384  0BC6  3F43               	moviw [3]fsr1
  6385  0BC7  00AC               	movwf	UIntToString@n+3
  6386  0BC8  3020               	movlw	(low (main@convertedNumber| (0+256)))& (0+255)
  6387  0BC9  0021               	movlb	1	; select bank1
  6388  0BCA  00E3               	movwf	??_main^(0+128)
  6389  0BCB  0863               	movf	??_main^(0+128),w
  6390  0BCC  0020               	movlb	0	; select bank0
  6391  0BCD  00AD               	movwf	UIntToString@dest
  6392  0BCE  3191  2188  318A   	fcall	_UIntToString
  6393                           
  6394                           ;main.c: 712:             index = InsertString(messages[1], convertedNumber, index, 70);
  6395  0BD1  0022               	movlb	2	; select bank2
  6396  0BD2  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6397  0BD3  0020               	movlb	0	; select bank0
  6398  0BD4  00A1               	movwf	InsertString@dest+1
  6399  0BD5  0022               	movlb	2	; select bank2
  6400  0BD6  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6401  0BD7  0020               	movlb	0	; select bank0
  6402  0BD8  00A0               	movwf	InsertString@dest
  6403  0BD9  3020               	movlw	low main@convertedNumber
  6404  0BDA  00A2               	movwf	InsertString@src
  6405  0BDB  3001               	movlw	high main@convertedNumber
  6406  0BDC  00A3               	movwf	InsertString@src+1
  6407  0BDD  0022               	movlb	2	; select bank2
  6408  0BDE  0841               	movf	(main@index+1)^(0+256),w
  6409  0BDF  0020               	movlb	0	; select bank0
  6410  0BE0  00A5               	movwf	InsertString@index+1
  6411  0BE1  0022               	movlb	2	; select bank2
  6412  0BE2  0840               	movf	main@index^(0+256),w
  6413  0BE3  0020               	movlb	0	; select bank0
  6414  0BE4  00A4               	movwf	InsertString@index
  6415  0BE5  3046               	movlw	70
  6416  0BE6  00A6               	movwf	InsertString@destLimit
  6417  0BE7  3000               	movlw	0
  6418  0BE8  00A7               	movwf	InsertString@destLimit+1
  6419  0BE9  3190  2094  318A   	fcall	_InsertString
  6420  0BEC  0821               	movf	?_InsertString+1,w
  6421  0BED  0022               	movlb	2	; select bank2
  6422  0BEE  00C1               	movwf	(main@index+1)^(0+256)
  6423  0BEF  0020               	movlb	0	; select bank0
  6424  0BF0  0820               	movf	?_InsertString,w
  6425  0BF1  0022               	movlb	2	; select bank2
  6426  0BF2  00C0               	movwf	main@index^(0+256)
  6427                           
  6428                           ;main.c: 714:             int end = index;
  6429  0BF3  0841               	movf	(main@index+1)^(0+256),w
  6430  0BF4  00B1               	movwf	(main@end+1)^(0+256)
  6431  0BF5  0840               	movf	main@index^(0+256),w
  6432  0BF6  00B0               	movwf	main@end^(0+256)
  6433                           
  6434                           ;main.c: 717:             index = InsertString(messages[0], "Wisp-1", 0, 70);
  6435  0BF7  085F               	movf	(_messages+1)^(0+256),w
  6436  0BF8  0020               	movlb	0	; select bank0
  6437  0BF9  00A1               	movwf	InsertString@dest+1
  6438  0BFA  0022               	movlb	2	; select bank2
  6439  0BFB  085E               	movf	_messages^(0+256),w
  6440  0BFC  0020               	movlb	0	; select bank0
  6441  0BFD  00A0               	movwf	InsertString@dest
  6442  0BFE  3000               	movlw	low (STR_1| (0+32768))
  6443  0BFF  00A2               	movwf	InsertString@src
  6444  0C00  3098               	movlw	high (STR_1| (0+32768))
  6445  0C01  00A3               	movwf	InsertString@src+1
  6446  0C02  3000               	movlw	0
  6447  0C03  00A4               	movwf	InsertString@index
  6448  0C04  00A5               	movwf	InsertString@index+1
  6449  0C05  3046               	movlw	70
  6450  0C06  00A6               	movwf	InsertString@destLimit
  6451  0C07  3000               	movlw	0
  6452  0C08  00A7               	movwf	InsertString@destLimit+1
  6453  0C09  3190  2094  318A   	fcall	_InsertString
  6454  0C0C  0821               	movf	?_InsertString+1,w
  6455  0C0D  0022               	movlb	2	; select bank2
  6456  0C0E  00C1               	movwf	(main@index+1)^(0+256)
  6457  0C0F  0020               	movlb	0	; select bank0
  6458  0C10  0820               	movf	?_InsertString,w
  6459  0C11  0022               	movlb	2	; select bank2
  6460  0C12  00C0               	movwf	main@index^(0+256)
  6461                           
  6462                           ;main.c: 718:             index = Insert(messages[0], ',', index, 70);
  6463  0C13  085F               	movf	(_messages+1)^(0+256),w
  6464  0C14  00F1               	movwf	Insert@dest+1
  6465  0C15  085E               	movf	_messages^(0+256),w
  6466  0C16  00F0               	movwf	Insert@dest
  6467  0C17  302C               	movlw	44
  6468  0C18  0021               	movlb	1	; select bank1
  6469  0C19  00E3               	movwf	??_main^(0+128)
  6470  0C1A  0863               	movf	??_main^(0+128),w
  6471  0C1B  00F2               	movwf	Insert@src
  6472  0C1C  0022               	movlb	2	; select bank2
  6473  0C1D  0841               	movf	(main@index+1)^(0+256),w
  6474  0C1E  00F4               	movwf	Insert@index+1
  6475  0C1F  0840               	movf	main@index^(0+256),w
  6476  0C20  00F3               	movwf	Insert@index
  6477  0C21  3046               	movlw	70
  6478  0C22  00F5               	movwf	Insert@destLimit
  6479  0C23  3000               	movlw	0
  6480  0C24  00F6               	movwf	Insert@destLimit+1
  6481  0C25  3195  2501  318A   	fcall	_Insert
  6482  0C28  0871               	movf	?_Insert+1,w
  6483  0C29  0022               	movlb	2	; select bank2
  6484  0C2A  00C1               	movwf	(main@index+1)^(0+256)
  6485  0C2B  0870               	movf	?_Insert,w
  6486  0C2C  00C0               	movwf	main@index^(0+256)
  6487                           
  6488                           ;main.c: 719:             ClearString(convertedNumber);
  6489  0C2D  3020               	movlw	low main@convertedNumber
  6490  0C2E  00F5               	movwf	ClearString@str
  6491  0C2F  3001               	movlw	high main@convertedNumber
  6492  0C30  00F6               	movwf	ClearString@str+1
  6493  0C31  319B  2317  318A   	fcall	_ClearString
  6494                           
  6495                           ;main.c: 720:             IntToString(id, convertedNumber);
  6496  0C34  0022               	movlb	2	; select bank2
  6497  0C35  0857               	movf	(_id+1)^(0+256),w
  6498  0C36  00FC               	movwf	IntToString@n+1
  6499  0C37  0856               	movf	_id^(0+256),w
  6500  0C38  00FB               	movwf	IntToString@n
  6501  0C39  3020               	movlw	(low (main@convertedNumber| (0+256)))& (0+255)
  6502  0C3A  0021               	movlb	1	; select bank1
  6503  0C3B  00E3               	movwf	??_main^(0+128)
  6504  0C3C  0863               	movf	??_main^(0+128),w
  6505  0C3D  00FD               	movwf	IntToString@dest
  6506  0C3E  3193  23C3  318A   	fcall	_IntToString
  6507                           
  6508                           ;main.c: 721:             index = InsertString(messages[0], convertedNumber, index, 70);
  6509  0C41  0022               	movlb	2	; select bank2
  6510  0C42  085F               	movf	(_messages+1)^(0+256),w
  6511  0C43  0020               	movlb	0	; select bank0
  6512  0C44  00A1               	movwf	InsertString@dest+1
  6513  0C45  0022               	movlb	2	; select bank2
  6514  0C46  085E               	movf	_messages^(0+256),w
  6515  0C47  0020               	movlb	0	; select bank0
  6516  0C48  00A0               	movwf	InsertString@dest
  6517  0C49  3020               	movlw	low main@convertedNumber
  6518  0C4A  00A2               	movwf	InsertString@src
  6519  0C4B  3001               	movlw	high main@convertedNumber
  6520  0C4C  00A3               	movwf	InsertString@src+1
  6521  0C4D  0022               	movlb	2	; select bank2
  6522  0C4E  0841               	movf	(main@index+1)^(0+256),w
  6523  0C4F  0020               	movlb	0	; select bank0
  6524  0C50  00A5               	movwf	InsertString@index+1
  6525  0C51  0022               	movlb	2	; select bank2
  6526  0C52  0840               	movf	main@index^(0+256),w
  6527  0C53  0020               	movlb	0	; select bank0
  6528  0C54  00A4               	movwf	InsertString@index
  6529  0C55  3046               	movlw	70
  6530  0C56  00A6               	movwf	InsertString@destLimit
  6531  0C57  3000               	movlw	0
  6532  0C58  00A7               	movwf	InsertString@destLimit+1
  6533  0C59  3190  2094  318A   	fcall	_InsertString
  6534  0C5C  0821               	movf	?_InsertString+1,w
  6535  0C5D  0022               	movlb	2	; select bank2
  6536  0C5E  00C1               	movwf	(main@index+1)^(0+256)
  6537  0C5F  0020               	movlb	0	; select bank0
  6538  0C60  0820               	movf	?_InsertString,w
  6539  0C61  0022               	movlb	2	; select bank2
  6540  0C62  00C0               	movwf	main@index^(0+256)
  6541                           
  6542                           ;main.c: 722:             Insert(messages[0], ',', index, 70);
  6543  0C63  085F               	movf	(_messages+1)^(0+256),w
  6544  0C64  00F1               	movwf	Insert@dest+1
  6545  0C65  085E               	movf	_messages^(0+256),w
  6546  0C66  00F0               	movwf	Insert@dest
  6547  0C67  302C               	movlw	44
  6548  0C68  0021               	movlb	1	; select bank1
  6549  0C69  00E3               	movwf	??_main^(0+128)
  6550  0C6A  0863               	movf	??_main^(0+128),w
  6551  0C6B  00F2               	movwf	Insert@src
  6552  0C6C  0022               	movlb	2	; select bank2
  6553  0C6D  0841               	movf	(main@index+1)^(0+256),w
  6554  0C6E  00F4               	movwf	Insert@index+1
  6555  0C6F  0840               	movf	main@index^(0+256),w
  6556  0C70  00F3               	movwf	Insert@index
  6557  0C71  3046               	movlw	70
  6558  0C72  00F5               	movwf	Insert@destLimit
  6559  0C73  3000               	movlw	0
  6560  0C74  00F6               	movwf	Insert@destLimit+1
  6561  0C75  3195  2501  318A   	fcall	_Insert
  6562                           
  6563                           ;main.c: 724:             UIntToHexString(crc16(messages, 2), checksum);
  6564  0C78  3002               	movlw	2
  6565  0C79  0020               	movlb	0	; select bank0
  6566  0C7A  00A1               	movwf	crc16@segments
  6567  0C7B  3000               	movlw	0
  6568  0C7C  00A2               	movwf	crc16@segments+1
  6569  0C7D  305E               	movlw	(low (_messages| (0+256)))& (0+255)
  6570  0C7E  319F  27B8  318A   	fcall	_crc16
  6571  0C81  0821               	movf	?_crc16,w
  6572  0C82  0021               	movlb	1	; select bank1
  6573  0C83  00E3               	movwf	??_main^(0+128)
  6574  0C84  0020               	movlb	0	; select bank0
  6575  0C85  0822               	movf	?_crc16+1,w
  6576  0C86  0021               	movlb	1	; select bank1
  6577  0C87  00E4               	movwf	(??_main^(0+128)+1)
  6578  0C88  01E5               	clrf	(??_main^(0+128)+2)
  6579  0C89  01E6               	clrf	(??_main^(0+128)+3)
  6580  0C8A  0866               	movf	(??_main+3)^(0+128),w
  6581  0C8B  0020               	movlb	0	; select bank0
  6582  0C8C  00AD               	movwf	UIntToHexString@n+3
  6583  0C8D  0021               	movlb	1	; select bank1
  6584  0C8E  0865               	movf	(??_main+2)^(0+128),w
  6585  0C8F  0020               	movlb	0	; select bank0
  6586  0C90  00AC               	movwf	UIntToHexString@n+2
  6587  0C91  0021               	movlb	1	; select bank1
  6588  0C92  0864               	movf	(??_main+1)^(0+128),w
  6589  0C93  0020               	movlb	0	; select bank0
  6590  0C94  00AB               	movwf	UIntToHexString@n+1
  6591  0C95  0021               	movlb	1	; select bank1
  6592  0C96  0863               	movf	??_main^(0+128),w
  6593  0C97  0020               	movlb	0	; select bank0
  6594  0C98  00AA               	movwf	UIntToHexString@n
  6595  0C99  3058               	movlw	(low (_checksum| (0+256)))& (0+255)
  6596  0C9A  0021               	movlb	1	; select bank1
  6597  0C9B  00E7               	movwf	(??_main+4)^(0+128)
  6598  0C9C  0867               	movf	(??_main+4)^(0+128),w
  6599  0C9D  0020               	movlb	0	; select bank0
  6600  0C9E  00AE               	movwf	UIntToHexString@dest
  6601  0C9F  3195  25E4  318A   	fcall	_UIntToHexString
  6602                           
  6603                           ;main.c: 727:             InsertString(messages[0], "$$", 0, 70);
  6604  0CA2  0022               	movlb	2	; select bank2
  6605  0CA3  085F               	movf	(_messages+1)^(0+256),w
  6606  0CA4  0020               	movlb	0	; select bank0
  6607  0CA5  00A1               	movwf	InsertString@dest+1
  6608  0CA6  0022               	movlb	2	; select bank2
  6609  0CA7  085E               	movf	_messages^(0+256),w
  6610  0CA8  0020               	movlb	0	; select bank0
  6611  0CA9  00A0               	movwf	InsertString@dest
  6612  0CAA  3007               	movlw	low (STR_2| (0+32768))
  6613  0CAB  00A2               	movwf	InsertString@src
  6614  0CAC  3098               	movlw	high (STR_2| (0+32768))
  6615  0CAD  00A3               	movwf	InsertString@src+1
  6616  0CAE  3000               	movlw	0
  6617  0CAF  00A4               	movwf	InsertString@index
  6618  0CB0  00A5               	movwf	InsertString@index+1
  6619  0CB1  3046               	movlw	70
  6620  0CB2  00A6               	movwf	InsertString@destLimit
  6621  0CB3  3000               	movlw	0
  6622  0CB4  00A7               	movwf	InsertString@destLimit+1
  6623  0CB5  3190  2094  318A   	fcall	_InsertString
  6624                           
  6625                           ;main.c: 729:             index = Insert(messages[1], '*', end, 70);
  6626  0CB8  0022               	movlb	2	; select bank2
  6627  0CB9  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6628  0CBA  00F1               	movwf	Insert@dest+1
  6629  0CBB  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6630  0CBC  00F0               	movwf	Insert@dest
  6631  0CBD  302A               	movlw	42
  6632  0CBE  0021               	movlb	1	; select bank1
  6633  0CBF  00E3               	movwf	??_main^(0+128)
  6634  0CC0  0863               	movf	??_main^(0+128),w
  6635  0CC1  00F2               	movwf	Insert@src
  6636  0CC2  0022               	movlb	2	; select bank2
  6637  0CC3  0831               	movf	(main@end+1)^(0+256),w
  6638  0CC4  00F4               	movwf	Insert@index+1
  6639  0CC5  0830               	movf	main@end^(0+256),w
  6640  0CC6  00F3               	movwf	Insert@index
  6641  0CC7  3046               	movlw	70
  6642  0CC8  00F5               	movwf	Insert@destLimit
  6643  0CC9  3000               	movlw	0
  6644  0CCA  00F6               	movwf	Insert@destLimit+1
  6645  0CCB  3195  2501  318A   	fcall	_Insert
  6646  0CCE  0871               	movf	?_Insert+1,w
  6647  0CCF  0022               	movlb	2	; select bank2
  6648  0CD0  00C1               	movwf	(main@index+1)^(0+256)
  6649  0CD1  0870               	movf	?_Insert,w
  6650  0CD2  00C0               	movwf	main@index^(0+256)
  6651                           
  6652                           ;main.c: 730:             index = InsertString(messages[1], checksum, index, 70);
  6653  0CD3  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6654  0CD4  0020               	movlb	0	; select bank0
  6655  0CD5  00A1               	movwf	InsertString@dest+1
  6656  0CD6  0022               	movlb	2	; select bank2
  6657  0CD7  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6658  0CD8  0020               	movlb	0	; select bank0
  6659  0CD9  00A0               	movwf	InsertString@dest
  6660  0CDA  3058               	movlw	low _checksum
  6661  0CDB  00A2               	movwf	InsertString@src
  6662  0CDC  3001               	movlw	high _checksum
  6663  0CDD  00A3               	movwf	InsertString@src+1
  6664  0CDE  0022               	movlb	2	; select bank2
  6665  0CDF  0841               	movf	(main@index+1)^(0+256),w
  6666  0CE0  0020               	movlb	0	; select bank0
  6667  0CE1  00A5               	movwf	InsertString@index+1
  6668  0CE2  0022               	movlb	2	; select bank2
  6669  0CE3  0840               	movf	main@index^(0+256),w
  6670  0CE4  0020               	movlb	0	; select bank0
  6671  0CE5  00A4               	movwf	InsertString@index
  6672  0CE6  3046               	movlw	70
  6673  0CE7  00A6               	movwf	InsertString@destLimit
  6674  0CE8  3000               	movlw	0
  6675  0CE9  00A7               	movwf	InsertString@destLimit+1
  6676  0CEA  3190  2094  318A   	fcall	_InsertString
  6677  0CED  0821               	movf	?_InsertString+1,w
  6678  0CEE  0022               	movlb	2	; select bank2
  6679  0CEF  00C1               	movwf	(main@index+1)^(0+256)
  6680  0CF0  0020               	movlb	0	; select bank0
  6681  0CF1  0820               	movf	?_InsertString,w
  6682  0CF2  0022               	movlb	2	; select bank2
  6683  0CF3  00C0               	movwf	main@index^(0+256)
  6684                           
  6685                           ;main.c: 731:             index = Insert(messages[1], '\n', index, 70);
  6686  0CF4  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6687  0CF5  00F1               	movwf	Insert@dest+1
  6688  0CF6  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6689  0CF7  00F0               	movwf	Insert@dest
  6690  0CF8  300A               	movlw	10
  6691  0CF9  0021               	movlb	1	; select bank1
  6692  0CFA  00E3               	movwf	??_main^(0+128)
  6693  0CFB  0863               	movf	??_main^(0+128),w
  6694  0CFC  00F2               	movwf	Insert@src
  6695  0CFD  0022               	movlb	2	; select bank2
  6696  0CFE  0841               	movf	(main@index+1)^(0+256),w
  6697  0CFF  00F4               	movwf	Insert@index+1
  6698  0D00  0840               	movf	main@index^(0+256),w
  6699  0D01  00F3               	movwf	Insert@index
  6700  0D02  3046               	movlw	70
  6701  0D03  00F5               	movwf	Insert@destLimit
  6702  0D04  3000               	movlw	0
  6703  0D05  00F6               	movwf	Insert@destLimit+1
  6704  0D06  3195  2501  318A   	fcall	_Insert
  6705  0D09  0871               	movf	?_Insert+1,w
  6706  0D0A  0022               	movlb	2	; select bank2
  6707  0D0B  00C1               	movwf	(main@index+1)^(0+256)
  6708  0D0C  0870               	movf	?_Insert,w
  6709  0D0D  00C0               	movwf	main@index^(0+256)
  6710                           
  6711                           ;main.c: 733:             id++;
  6712  0D0E  3001               	movlw	1
  6713  0D0F  07D6               	addwf	_id^(0+256),f
  6714  0D10  3000               	movlw	0
  6715  0D11  3DD7               	addwfc	(_id+1)^(0+256),f
  6716  0D12  150C               	bsf	12,2	;volatile
  6717                           
  6718                           ;main.c: 736:             TransmitString(messages[0]);
  6719  0D13  085F               	movf	(_messages+1)^(0+256),w
  6720  0D14  00F7               	movwf	TransmitString@message+1
  6721  0D15  085E               	movf	_messages^(0+256),w
  6722  0D16  00F6               	movwf	TransmitString@message
  6723  0D17  319B  2364  318A   	fcall	_TransmitString
  6724                           
  6725                           ;main.c: 737:             TransmitString(messages[1]);
  6726  0D1A  0022               	movlb	2	; select bank2
  6727  0D1B  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6728  0D1C  00F7               	movwf	TransmitString@message+1
  6729  0D1D  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6730  0D1E  00F6               	movwf	TransmitString@message
  6731  0D1F  319B  2364  318A   	fcall	_TransmitString
  6732  0D22  0022               	movlb	2	; select bank2
  6733  0D23  110C               	bcf	12,2	;volatile
  6734                           
  6735                           ;main.c: 747:         for (int i = 0; i < 1000; i++)
  6736  0D24  01B2               	clrf	main@i^(0+256)
  6737  0D25  01B3               	clrf	(main@i+1)^(0+256)
  6738  0D26                     l4756:	
  6739                           
  6740                           ;main.c: 748:         {;main.c: 749:             _delay((unsigned long)((5)*(4000000/400
      +                          0.0)));
  6741  0D26  3007               	movlw	7
  6742  0D27  0021               	movlb	1	; select bank1
  6743  0D28  00E3               	movwf	??_main^(0+128)
  6744  0D29  307D               	movlw	125
  6745  0D2A                     u5267:	
  6746  0D2A  0B89               	decfsz	9,f
  6747  0D2B  2D2A               	goto	u5267
  6748  0D2C  0BE3               	decfsz	??_main^(0+128),f
  6749  0D2D  2D2A               	goto	u5267
  6750                           
  6751                           ;main.c: 750:         }
  6752  0D2E  3001               	movlw	1
  6753  0D2F  0022               	movlb	2	; select bank2
  6754  0D30  07B2               	addwf	main@i^(0+256),f
  6755  0D31  3000               	movlw	0
  6756  0D32  3DB3               	addwfc	(main@i+1)^(0+256),f
  6757  0D33  0833               	movf	(main@i+1)^(0+256),w
  6758  0D34  3A80               	xorlw	128
  6759  0D35  0021               	movlb	1	; select bank1
  6760  0D36  00E3               	movwf	??_main^(0+128)
  6761  0D37  3083               	movlw	131
  6762  0D38  0263               	subwf	??_main^(0+128),w
  6763  0D39  1D03               	skipz
  6764  0D3A  2D3E               	goto	u5255
  6765  0D3B  30E8               	movlw	232
  6766  0D3C  0022               	movlb	2	; select bank2
  6767  0D3D  0232               	subwf	main@i^(0+256),w
  6768  0D3E                     u5255:	
  6769  0D3E  1803               	btfsc	3,0
  6770  0D3F  2AD7               	goto	l4686
  6771  0D40  2D26               	goto	l4756
  6772  0D41                     __end_of_main:	
  6773                           
  6774                           	psect	text1
  6775  1FB8                     __ptext1:	
  6776 ;; *************** function _crc16 *****************
  6777 ;; Defined at:
  6778 ;;		line 21 in file "rtty.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;  data            1    wreg     PTR PTR unsigned char 
  6781 ;;		 -> messages(4), 
  6782 ;;  segments        2    1[BANK0 ] int 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  data            1    5[BANK0 ] PTR PTR unsigned char 
  6785 ;;		 -> messages(4), 
  6786 ;;  i               2    8[BANK0 ] int 
  6787 ;;  crc             2    6[BANK0 ] unsigned short 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  2    1[BANK0 ] unsigned short 
  6790 ;; Registers used:
  6791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 1F/0
  6794 ;;		On exit  : 1F/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6797 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;Total ram usage:        9 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    4
  6804 ;; This function calls:
  6805 ;;		_crc16_update
  6806 ;;		_strlen
  6807 ;; This function is called by:
  6808 ;;		_main
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _crc16
  6814  1FB8                     _crc16:	
  6815                           
  6816                           ;incstack = 0
  6817                           ; Regs used in _crc16: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6818                           ;crc16@data stored from wreg
  6819  1FB8  00A5               	movwf	crc16@data
  6820                           
  6821                           ;rtty.c: 21: uint16_t crc16(char** data, int segments);rtty.c: 22: {;rtty.c: 23:     uin
      +                          t16_t crc = 0xFFFF;
  6822  1FB9  30FF               	movlw	255
  6823  1FBA  00A6               	movwf	crc16@crc
  6824  1FBB  30FF               	movlw	255
  6825  1FBC  00A7               	movwf	crc16@crc+1
  6826                           
  6827                           ;rtty.c: 24:     for (int i = 0; i < segments; i++)
  6828  1FBD  01A8               	clrf	crc16@i
  6829  1FBE  01A9               	clrf	crc16@i+1
  6830  1FBF                     l4662:	
  6831  1FBF  0829               	movf	crc16@i+1,w
  6832  1FC0  3A80               	xorlw	128
  6833  1FC1  00A3               	movwf	??_crc16
  6834  1FC2  0822               	movf	crc16@segments+1,w
  6835  1FC3  3A80               	xorlw	128
  6836  1FC4  0223               	subwf	??_crc16,w
  6837  1FC5  1D03               	skipz
  6838  1FC6  2FC9               	goto	u5225
  6839  1FC7  0821               	movf	crc16@segments,w
  6840  1FC8  0228               	subwf	crc16@i,w
  6841  1FC9                     u5225:	
  6842  1FC9  1803               	btfsc	3,0
  6843  1FCA  2FFA               	goto	l4664
  6844                           
  6845                           ;rtty.c: 25:     {;rtty.c: 26:         crc = crc16_update(data[i], strlen(data[i]), crc)
      +                          ;
  6846  1FCB  0020               	movlb	0	; select bank0
  6847  1FCC  3528               	lslf	crc16@i,w
  6848  1FCD  0725               	addwf	crc16@data,w
  6849  1FCE  00A3               	movwf	??_crc16
  6850  1FCF  0823               	movf	??_crc16,w
  6851  1FD0  0086               	movwf	6
  6852  1FD1  3001               	movlw	1	; select bank2/3
  6853  1FD2  0087               	movwf	7
  6854  1FD3  3F40               	moviw [0]fsr1
  6855  1FD4  00F5               	movwf	crc16_update@pData
  6856  1FD5  3F41               	moviw [1]fsr1
  6857  1FD6  00F6               	movwf	crc16_update@pData+1
  6858  1FD7  3528               	lslf	crc16@i,w
  6859  1FD8  0725               	addwf	crc16@data,w
  6860  1FD9  00A4               	movwf	??_crc16+1
  6861  1FDA  0824               	movf	??_crc16+1,w
  6862  1FDB  0086               	movwf	6
  6863  1FDC  3001               	movlw	1	; select bank2/3
  6864  1FDD  0087               	movwf	7
  6865  1FDE  3F40               	moviw [0]fsr1
  6866  1FDF  00F0               	movwf	strlen@s
  6867  1FE0  3F41               	moviw [1]fsr1
  6868  1FE1  00F1               	movwf	strlen@s+1
  6869  1FE2  319A  2231  319F   	fcall	_strlen
  6870  1FE5  0871               	movf	?_strlen+1,w
  6871  1FE6  00F8               	movwf	crc16_update@length+1
  6872  1FE7  0870               	movf	?_strlen,w
  6873  1FE8  00F7               	movwf	crc16_update@length
  6874  1FE9  0020               	movlb	0	; select bank0
  6875  1FEA  0827               	movf	crc16@crc+1,w
  6876  1FEB  00FA               	movwf	crc16_update@wCrc+1
  6877  1FEC  0826               	movf	crc16@crc,w
  6878  1FED  00F9               	movwf	crc16_update@wCrc
  6879  1FEE  319D  25A6  319F   	fcall	_crc16_update
  6880  1FF1  0876               	movf	?_crc16_update+1,w
  6881  1FF2  00A7               	movwf	crc16@crc+1
  6882  1FF3  0875               	movf	?_crc16_update,w
  6883  1FF4  00A6               	movwf	crc16@crc
  6884                           
  6885                           ;rtty.c: 27:     }
  6886  1FF5  3001               	movlw	1
  6887  1FF6  07A8               	addwf	crc16@i,f
  6888  1FF7  3000               	movlw	0
  6889  1FF8  3DA9               	addwfc	crc16@i+1,f
  6890  1FF9  2FBF               	goto	l4662
  6891  1FFA                     l4664:	
  6892                           
  6893                           ;rtty.c: 28:     return crc & 0xFFFF;
  6894  1FFA  0020               	movlb	0	; select bank0
  6895  1FFB  0827               	movf	crc16@crc+1,w
  6896  1FFC  00A2               	movwf	?_crc16+1
  6897  1FFD  0826               	movf	crc16@crc,w
  6898  1FFE  00A1               	movwf	?_crc16
  6899  1FFF  0008               	return
  6900  2000                     __end_of_crc16:	
  6901                           
  6902                           	psect	text2
  6903  1DA6                     __ptext2:	
  6904 ;; *************** function _crc16_update *****************
  6905 ;; Defined at:
  6906 ;;		line 10 in file "rtty.c"
  6907 ;; Parameters:    Size  Location     Type
  6908 ;;  pData           2    5[COMMON] PTR unsigned char 
  6909 ;;		 -> message_end(73), message_start(70), 
  6910 ;;  length          2    7[COMMON] int 
  6911 ;;  wCrc            2    9[COMMON] unsigned short 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  i               1    0[BANK0 ] unsigned char 
  6914 ;; Return value:  Size  Location     Type
  6915 ;;                  2    5[COMMON] unsigned short 
  6916 ;; Registers used:
  6917 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6918 ;; Tracked objects:
  6919 ;;		On entry : 1F/0
  6920 ;;		On exit  : 1F/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6923 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Totals:         9       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;Total ram usage:       10 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:    3
  6930 ;; This function calls:
  6931 ;;		Nothing
  6932 ;; This function is called by:
  6933 ;;		_crc16
  6934 ;; This function uses a non-reentrant model
  6935 ;;
  6936                           
  6937                           
  6938                           ;psect for function _crc16_update
  6939  1DA6                     _crc16_update:	
  6940  1DA6                     l4560:	
  6941                           ;rtty.c: 10: uint16_t crc16_update(char* pData, int length, uint16_t wCrc);rtty.c: 11: {
      +                          ;rtty.c: 12:     uint8_t i;;rtty.c: 13:     while (length--) {
  6942                           
  6943                           ;incstack = 0
  6944                           ; Regs used in _crc16_update: [wreg+fsr1l+fsr1h+status,2+status,0]
  6945                           
  6946                           
  6947                           ;rtty.c: 13:     while (length--) {
  6948  1DA6  30FF               	movlw	255
  6949  1DA7  07F7               	addwf	crc16_update@length,f
  6950  1DA8  30FF               	movlw	255
  6951  1DA9  3DF8               	addwfc	crc16_update@length+1,f
  6952  1DAA  0A77               	incf	crc16_update@length,w
  6953  1DAB  1903               	btfsc	3,2
  6954  1DAC  0A78               	incf	crc16_update@length+1,w
  6955  1DAD  1903               	btfsc	3,2
  6956  1DAE  2DDD               	goto	l4562
  6957                           
  6958                           ;rtty.c: 14:         wCrc ^= *(unsigned char *)pData++ << 8;
  6959  1DAF  0875               	movf	crc16_update@pData,w
  6960  1DB0  0086               	movwf	6
  6961  1DB1  0876               	movf	crc16_update@pData+1,w
  6962  1DB2  0087               	movwf	7
  6963  1DB3  0801               	movf	1,w
  6964  1DB4  00FB               	movwf	??_crc16_update
  6965  1DB5  01FC               	clrf	??_crc16_update+1
  6966  1DB6  087B               	movf	??_crc16_update,w
  6967  1DB7  00FC               	movwf	??_crc16_update+1
  6968  1DB8  01FB               	clrf	??_crc16_update
  6969  1DB9  087B               	movf	??_crc16_update,w
  6970  1DBA  06F9               	xorwf	crc16_update@wCrc,f
  6971  1DBB  087C               	movf	??_crc16_update+1,w
  6972  1DBC  06FA               	xorwf	crc16_update@wCrc+1,f
  6973  1DBD  3001               	movlw	1
  6974  1DBE  07F5               	addwf	crc16_update@pData,f
  6975  1DBF  3000               	movlw	0
  6976  1DC0  3DF6               	addwfc	crc16_update@pData+1,f
  6977                           
  6978                           ;rtty.c: 15:         for (i=0; i < 8; i++)
  6979  1DC1  01A0               	clrf	crc16_update@i
  6980  1DC2                     l685:	
  6981                           
  6982                           ;rtty.c: 16:             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
  6983  1DC2  1BFA               	btfsc	crc16_update@wCrc+1,7
  6984  1DC3  2DC8               	goto	l4556
  6985  1DC4  3579               	lslf	crc16_update@wCrc,w
  6986  1DC5  00F9               	movwf	crc16_update@wCrc
  6987  1DC6  0D7A               	rlf	crc16_update@wCrc+1,w
  6988  1DC7  2DD3               	goto	L1
  6989  1DC8                     l4556:	
  6990  1DC8  087A               	movf	crc16_update@wCrc+1,w
  6991  1DC9  00FC               	movwf	??_crc16_update+1
  6992  1DCA  0879               	movf	crc16_update@wCrc,w
  6993  1DCB  00FB               	movwf	??_crc16_update
  6994  1DCC  35FB               	lslf	??_crc16_update,f
  6995  1DCD  0DFC               	rlf	??_crc16_update+1,f
  6996  1DCE  3021               	movlw	33
  6997  1DCF  067B               	xorwf	??_crc16_update,w
  6998  1DD0  00F9               	movwf	crc16_update@wCrc
  6999  1DD1  3010               	movlw	16
  7000  1DD2  067C               	xorwf	??_crc16_update+1,w
  7001  1DD3                     L1:	
  7002  1DD3  00FA               	movwf	crc16_update@wCrc+1
  7003  1DD4  3001               	movlw	1
  7004  1DD5  00FB               	movwf	??_crc16_update
  7005  1DD6  087B               	movf	??_crc16_update,w
  7006  1DD7  07A0               	addwf	crc16_update@i,f
  7007  1DD8  3008               	movlw	8
  7008  1DD9  0220               	subwf	crc16_update@i,w
  7009  1DDA  1803               	btfsc	3,0
  7010  1DDB  2DA6               	goto	l4560
  7011  1DDC  2DC2               	goto	l685
  7012  1DDD                     l4562:	
  7013                           
  7014                           ;rtty.c: 18:     return wCrc;
  7015  1DDD  087A               	movf	crc16_update@wCrc+1,w
  7016  1DDE  00F6               	movwf	?_crc16_update+1
  7017  1DDF  0879               	movf	crc16_update@wCrc,w
  7018  1DE0  00F5               	movwf	?_crc16_update
  7019  1DE1  0008               	return
  7020  1DE2                     __end_of_crc16_update:	
  7021                           
  7022                           	psect	text3
  7023  1233                     __ptext3:	
  7024 ;; *************** function _bme280_get_sensor_data *****************
  7025 ;; Defined at:
  7026 ;;		line 660 in file "BME280_driver/bme280.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;  sensor_comp     1    wreg     unsigned char 
  7029 ;;  comp_data       1   65[BANK0 ] PTR struct bme280_data
  7030 ;;		 -> main@sensor_data(12), 
  7031 ;;  dev             1   66[BANK0 ] PTR struct bme280_dev
  7032 ;;		 -> EnvSensor(51), 
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  sensor_comp     1   53[BANK1 ] unsigned char 
  7035 ;;  uncomp_data    12   55[BANK1 ] struct bme280_uncomp_dat
  7036 ;;  reg_data        8   45[BANK1 ] unsigned char [8]
  7037 ;;  rslt            1   54[BANK1 ] char 
  7038 ;; Return value:  Size  Location     Type
  7039 ;;                  1    wreg      char 
  7040 ;; Registers used:
  7041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7042 ;; Tracked objects:
  7043 ;;		On entry : 1F/0
  7044 ;;		On exit  : 1E/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7048 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  7049 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7050 ;;      Totals:         0       5      22       0       0       0       0       0       0       0       0       0       
      +0       0
  7051 ;;Total ram usage:       27 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; Hardware stack levels required when called:   10
  7054 ;; This function calls:
  7055 ;;		_bme280_compensate_data
  7056 ;;		_bme280_get_regs
  7057 ;;		_bme280_parse_sensor_data
  7058 ;;		_null_ptr_check
  7059 ;; This function is called by:
  7060 ;;		_main
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function _bme280_get_sensor_data
  7066  1233                     _bme280_get_sensor_data:	
  7067                           
  7068                           ;incstack = 0
  7069                           ; Regs used in _bme280_get_sensor_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7070                           ;bme280_get_sensor_data@sensor_comp stored from wreg
  7071  1233  0021               	movlb	1	; select bank1
  7072  1234  00D5               	movwf	bme280_get_sensor_data@sensor_comp^(0+128)
  7073                           
  7074                           ;BME280_driver/bme280.c: 660: int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct 
      +                          bme280_data *comp_data, struct bme280_dev *dev);BME280_driver/bme280.c: 661: {;BME280_dr
      +                          iver/bme280.c: 662:     int8_t rslt;;BME280_driver/bme280.c: 667:     uint8_t reg_data[8
      +                          ] = { 0 };
  7075  1235  30CD               	movlw	low bme280_get_sensor_data@reg_data
  7076  1236  0086               	movwf	6
  7077  1237  3000               	movlw	high bme280_get_sensor_data@reg_data
  7078  1238  0087               	movwf	7
  7079  1239  3008               	movlw	8
  7080  123A  0020               	movlb	0	; select bank0
  7081  123B  00E3               	movwf	??_bme280_get_sensor_data
  7082  123C  3000               	movlw	0
  7083  123D                     u5120:	
  7084  123D  001E               	movwi fsr1++
  7085  123E  0BE3               	decfsz	??_bme280_get_sensor_data,f
  7086  123F  2A3D               	goto	u5120
  7087                           
  7088                           ;BME280_driver/bme280.c: 668:     struct bme280_uncomp_data uncomp_data = { 0 };
  7089  1240  3042               	movlw	low bme280_get_sensor_data@F273
  7090  1241  0086               	movwf	6
  7091  1242  3001               	movlw	high bme280_get_sensor_data@F273
  7092  1243  0087               	movwf	7
  7093  1244  30D7               	movlw	low bme280_get_sensor_data@uncomp_data
  7094  1245  0084               	movwf	4
  7095  1246  3000               	movlw	high bme280_get_sensor_data@uncomp_data
  7096  1247  0085               	movwf	5
  7097  1248  300C               	movlw	12
  7098  1249  00E3               	movwf	??_bme280_get_sensor_data
  7099  124A                     u5130:	
  7100  124A  0016               	moviw fsr1++
  7101  124B  001A               	movwi fsr0++
  7102  124C  0BE3               	decfsz	??_bme280_get_sensor_data,f
  7103  124D  2A4A               	goto	u5130
  7104                           
  7105                           ;BME280_driver/bme280.c: 671:     rslt = null_ptr_check(dev);
  7106  124E  0862               	movf	bme280_get_sensor_data@dev,w
  7107  124F  319A  22F2  3192   	fcall	_null_ptr_check
  7108  1252  0020               	movlb	0	; select bank0
  7109  1253  00E3               	movwf	??_bme280_get_sensor_data
  7110  1254  0863               	movf	??_bme280_get_sensor_data,w
  7111  1255  0021               	movlb	1	; select bank1
  7112  1256  00D6               	movwf	bme280_get_sensor_data@rslt^(0+128)
  7113                           
  7114                           ;BME280_driver/bme280.c: 672:     if ((rslt == 0) && (comp_data != ((void*)0)))
  7115  1257  0856               	movf	bme280_get_sensor_data@rslt^(0+128),w
  7116  1258  1D03               	btfss	3,2
  7117  1259  0008               	return
  7118  125A  0020               	movlb	0	; select bank0
  7119  125B  0861               	movf	bme280_get_sensor_data@comp_data,w
  7120  125C  1903               	btfsc	3,2
  7121  125D  0008               	return
  7122                           
  7123                           ;BME280_driver/bme280.c: 673:     {;BME280_driver/bme280.c: 675:         rslt = bme280_g
      +                          et_regs(0xF7, reg_data, 8, dev);
  7124  125E  30CD               	movlw	(low (bme280_get_sensor_data@reg_data| 0))& (0+255)
  7125  125F  00E3               	movwf	??_bme280_get_sensor_data
  7126  1260  0863               	movf	??_bme280_get_sensor_data,w
  7127  1261  00BB               	movwf	bme280_get_regs@reg_data
  7128  1262  3008               	movlw	8
  7129  1263  00BC               	movwf	bme280_get_regs@len
  7130  1264  3000               	movlw	0
  7131  1265  00BD               	movwf	bme280_get_regs@len+1
  7132  1266  0862               	movf	bme280_get_sensor_data@dev,w
  7133  1267  00E4               	movwf	??_bme280_get_sensor_data+1
  7134  1268  0864               	movf	??_bme280_get_sensor_data+1,w
  7135  1269  00BE               	movwf	bme280_get_regs@dev
  7136  126A  30F7               	movlw	247
  7137  126B  319E  2662  3192   	fcall	_bme280_get_regs
  7138  126E  00E5               	movwf	??_bme280_get_sensor_data+2
  7139  126F  0865               	movf	??_bme280_get_sensor_data+2,w
  7140  1270  0021               	movlb	1	; select bank1
  7141  1271  00D6               	movwf	bme280_get_sensor_data@rslt^(0+128)
  7142                           
  7143                           ;BME280_driver/bme280.c: 676:         if (rslt == 0)
  7144  1272  0856               	movf	bme280_get_sensor_data@rslt^(0+128),w
  7145  1273  1D03               	btfss	3,2
  7146  1274  0008               	return
  7147                           
  7148                           ;BME280_driver/bme280.c: 677:         {;BME280_driver/bme280.c: 679:             bme280_
      +                          parse_sensor_data(reg_data, &uncomp_data);
  7149  1275  30D7               	movlw	(low (bme280_get_sensor_data@uncomp_data| 0))& (0+255)
  7150  1276  0020               	movlb	0	; select bank0
  7151  1277  00E3               	movwf	??_bme280_get_sensor_data
  7152  1278  0863               	movf	??_bme280_get_sensor_data,w
  7153  1279  00F0               	movwf	bme280_parse_sensor_data@uncomp_data
  7154  127A  30CD               	movlw	(low (bme280_get_sensor_data@reg_data| 0))& (0+255)
  7155  127B  3189  21A0  3192   	fcall	_bme280_parse_sensor_data
  7156  127E  30D7               	movlw	(low (bme280_get_sensor_data@uncomp_data| 0))& (0+255)
  7157  127F  00E3               	movwf	??_bme280_get_sensor_data
  7158  1280  0863               	movf	??_bme280_get_sensor_data,w
  7159  1281  00DB               	movwf	bme280_compensate_data@uncomp_data
  7160  1282  0861               	movf	bme280_get_sensor_data@comp_data,w
  7161  1283  00E4               	movwf	??_bme280_get_sensor_data+1
  7162  1284  0864               	movf	??_bme280_get_sensor_data+1,w
  7163  1285  00DC               	movwf	bme280_compensate_data@comp_data
  7164  1286  0862               	movf	bme280_get_sensor_data@dev,w
  7165  1287  3E09               	addlw	9
  7166  1288  00E5               	movwf	??_bme280_get_sensor_data+2
  7167  1289  0865               	movf	??_bme280_get_sensor_data+2,w
  7168  128A  00DD               	movwf	bme280_compensate_data@calib_data
  7169  128B  0021               	movlb	1	; select bank1
  7170  128C  0855               	movf	bme280_get_sensor_data@sensor_comp^(0+128),w
  7171  128D  3195  256E         	fcall	_bme280_compensate_data
  7172  128F  0008               	return
  7173  1290                     __end_of_bme280_get_sensor_data:	
  7174                           ;BME280_driver/bme280.c: 687:     else
  7175                           
  7176                           
  7177                           	psect	text4
  7178  09A0                     __ptext4:	
  7179 ;; *************** function _bme280_parse_sensor_data *****************
  7180 ;; Defined at:
  7181 ;;		line 699 in file "BME280_driver/bme280.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;  reg_data        1    wreg     PTR const unsigned char 
  7184 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7185 ;;  uncomp_data     1    0[COMMON] PTR struct bme280_uncomp
  7186 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;  reg_data        1   12[BANK0 ] PTR const unsigned char 
  7189 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7190 ;;  data_msb        4    8[BANK0 ] unsigned long 
  7191 ;;  data_lsb        4    4[BANK0 ] unsigned long 
  7192 ;;  data_xlsb       4    0[BANK0 ] unsigned long 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      void 
  7195 ;; Registers used:
  7196 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7197 ;; Tracked objects:
  7198 ;;		On entry : 1F/0
  7199 ;;		On exit  : 1F/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7202 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7203 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Totals:         9      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;Total ram usage:       22 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    3
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_bme280_get_sensor_data
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           
  7217                           ;psect for function _bme280_parse_sensor_data
  7218  09A0                     _bme280_parse_sensor_data:	
  7219                           
  7220                           ;incstack = 0
  7221                           ; Regs used in _bme280_parse_sensor_data: [wreg+fsr1l+fsr1h+status,2+status,0]
  7222                           ;bme280_parse_sensor_data@reg_data stored from wreg
  7223  09A0  00AC               	movwf	bme280_parse_sensor_data@reg_data
  7224                           
  7225                           ;BME280_driver/bme280.c: 699: void bme280_parse_sensor_data(const uint8_t *reg_data, str
      +                          uct bme280_uncomp_data *uncomp_data);BME280_driver/bme280.c: 700: {;BME280_driver/bme280
      +                          .c: 702:     uint32_t data_xlsb;;BME280_driver/bme280.c: 703:     uint32_t data_lsb;;BME
      +                          280_driver/bme280.c: 704:     uint32_t data_msb;;BME280_driver/bme280.c: 707:     data_m
      +                          sb = (uint32_t)reg_data[0] << 12;
  7226  09A1  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7227  09A2  0086               	movwf	6
  7228  09A3  0187               	clrf	7
  7229  09A4  0801               	movf	1,w
  7230  09A5  00F1               	movwf	??_bme280_parse_sensor_data
  7231  09A6  01F2               	clrf	??_bme280_parse_sensor_data+1
  7232  09A7  01F3               	clrf	??_bme280_parse_sensor_data+2
  7233  09A8  01F4               	clrf	??_bme280_parse_sensor_data+3
  7234  09A9  300C               	movlw	12
  7235  09AA                     u3315:	
  7236  09AA  35F1               	lslf	??_bme280_parse_sensor_data,f
  7237  09AB  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7238  09AC  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7239  09AD  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7240  09AE  0B89               	decfsz	9,f
  7241  09AF  29AA               	goto	u3315
  7242  09B0  0874               	movf	??_bme280_parse_sensor_data+3,w
  7243  09B1  00AB               	movwf	bme280_parse_sensor_data@data_msb+3
  7244  09B2  0873               	movf	??_bme280_parse_sensor_data+2,w
  7245  09B3  00AA               	movwf	bme280_parse_sensor_data@data_msb+2
  7246  09B4  0872               	movf	??_bme280_parse_sensor_data+1,w
  7247  09B5  00A9               	movwf	bme280_parse_sensor_data@data_msb+1
  7248  09B6  0871               	movf	??_bme280_parse_sensor_data,w
  7249  09B7  00A8               	movwf	bme280_parse_sensor_data@data_msb
  7250                           
  7251                           ;BME280_driver/bme280.c: 708:     data_lsb = (uint32_t)reg_data[1] << 4;
  7252  09B8  0A2C               	incf	bme280_parse_sensor_data@reg_data,w
  7253  09B9  0086               	movwf	6
  7254  09BA  0187               	clrf	7
  7255  09BB  0801               	movf	1,w
  7256  09BC  00F1               	movwf	??_bme280_parse_sensor_data
  7257  09BD  01F2               	clrf	??_bme280_parse_sensor_data+1
  7258  09BE  01F3               	clrf	??_bme280_parse_sensor_data+2
  7259  09BF  01F4               	clrf	??_bme280_parse_sensor_data+3
  7260  09C0  3004               	movlw	4
  7261  09C1                     u3325:	
  7262  09C1  35F1               	lslf	??_bme280_parse_sensor_data,f
  7263  09C2  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7264  09C3  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7265  09C4  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7266  09C5  0B89               	decfsz	9,f
  7267  09C6  29C1               	goto	u3325
  7268  09C7  0874               	movf	??_bme280_parse_sensor_data+3,w
  7269  09C8  00A7               	movwf	bme280_parse_sensor_data@data_lsb+3
  7270  09C9  0873               	movf	??_bme280_parse_sensor_data+2,w
  7271  09CA  00A6               	movwf	bme280_parse_sensor_data@data_lsb+2
  7272  09CB  0872               	movf	??_bme280_parse_sensor_data+1,w
  7273  09CC  00A5               	movwf	bme280_parse_sensor_data@data_lsb+1
  7274  09CD  0871               	movf	??_bme280_parse_sensor_data,w
  7275  09CE  00A4               	movwf	bme280_parse_sensor_data@data_lsb
  7276                           
  7277                           ;BME280_driver/bme280.c: 709:     data_xlsb = (uint32_t)reg_data[2] >> 4;
  7278  09CF  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7279  09D0  3E02               	addlw	2
  7280  09D1  0086               	movwf	6
  7281  09D2  0187               	clrf	7
  7282  09D3  0801               	movf	1,w
  7283  09D4  00F1               	movwf	??_bme280_parse_sensor_data
  7284  09D5  3004               	movlw	4
  7285  09D6                     u3335:	
  7286  09D6  36F1               	lsrf	??_bme280_parse_sensor_data,f
  7287  09D7  0B89               	decfsz	9,f
  7288  09D8  29D6               	goto	u3335
  7289  09D9  0871               	movf	??_bme280_parse_sensor_data,w
  7290  09DA  00F2               	movwf	??_bme280_parse_sensor_data+1
  7291  09DB  01F3               	clrf	??_bme280_parse_sensor_data+2
  7292  09DC  01F4               	clrf	??_bme280_parse_sensor_data+3
  7293  09DD  01F5               	clrf	??_bme280_parse_sensor_data+4
  7294  09DE  0875               	movf	??_bme280_parse_sensor_data+4,w
  7295  09DF  00A3               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7296  09E0  0874               	movf	??_bme280_parse_sensor_data+3,w
  7297  09E1  00A2               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7298  09E2  0873               	movf	??_bme280_parse_sensor_data+2,w
  7299  09E3  00A1               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7300  09E4  0872               	movf	??_bme280_parse_sensor_data+1,w
  7301  09E5  00A0               	movwf	bme280_parse_sensor_data@data_xlsb
  7302                           
  7303                           ;BME280_driver/bme280.c: 710:     uncomp_data->pressure = data_msb | data_lsb | data_xls
      +                          b;
  7304  09E6  0820               	movf	bme280_parse_sensor_data@data_xlsb,w
  7305  09E7  00F1               	movwf	??_bme280_parse_sensor_data
  7306  09E8  0821               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7307  09E9  00F2               	movwf	??_bme280_parse_sensor_data+1
  7308  09EA  0822               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7309  09EB  00F3               	movwf	??_bme280_parse_sensor_data+2
  7310  09EC  0823               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7311  09ED  00F4               	movwf	??_bme280_parse_sensor_data+3
  7312  09EE  0828               	movf	bme280_parse_sensor_data@data_msb,w
  7313  09EF  0424               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7314  09F0  00F5               	movwf	??_bme280_parse_sensor_data+4
  7315  09F1  0829               	movf	bme280_parse_sensor_data@data_msb+1,w
  7316  09F2  0425               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7317  09F3  00F6               	movwf	??_bme280_parse_sensor_data+5
  7318  09F4  082A               	movf	bme280_parse_sensor_data@data_msb+2,w
  7319  09F5  0426               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7320  09F6  00F7               	movwf	??_bme280_parse_sensor_data+6
  7321  09F7  082B               	movf	bme280_parse_sensor_data@data_msb+3,w
  7322  09F8  0427               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7323  09F9  00F8               	movwf	??_bme280_parse_sensor_data+7
  7324  09FA  0875               	movf	??_bme280_parse_sensor_data+4,w
  7325  09FB  04F1               	iorwf	??_bme280_parse_sensor_data,f
  7326  09FC  0876               	movf	??_bme280_parse_sensor_data+5,w
  7327  09FD  04F2               	iorwf	??_bme280_parse_sensor_data+1,f
  7328  09FE  0877               	movf	??_bme280_parse_sensor_data+6,w
  7329  09FF  04F3               	iorwf	??_bme280_parse_sensor_data+2,f
  7330  0A00  0878               	movf	??_bme280_parse_sensor_data+7,w
  7331  0A01  04F4               	iorwf	??_bme280_parse_sensor_data+3,f
  7332  0A02  0870               	movf	bme280_parse_sensor_data@uncomp_data,w
  7333  0A03  0086               	movwf	6
  7334  0A04  0187               	clrf	7
  7335  0A05  0871               	movf	??_bme280_parse_sensor_data,w
  7336  0A06  3FC0               	movwi [0]fsr1
  7337  0A07  0872               	movf	??_bme280_parse_sensor_data+1,w
  7338  0A08  3FC1               	movwi [1]fsr1
  7339  0A09  0873               	movf	??_bme280_parse_sensor_data+2,w
  7340  0A0A  3FC2               	movwi [2]fsr1
  7341  0A0B  0874               	movf	??_bme280_parse_sensor_data+3,w
  7342  0A0C  3FC3               	movwi [3]fsr1
  7343                           
  7344                           ;BME280_driver/bme280.c: 713:     data_msb = (uint32_t)reg_data[3] << 12;
  7345  0A0D  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7346  0A0E  3E03               	addlw	3
  7347  0A0F  0086               	movwf	6
  7348  0A10  0187               	clrf	7
  7349  0A11  0801               	movf	1,w
  7350  0A12  00F1               	movwf	??_bme280_parse_sensor_data
  7351  0A13  01F2               	clrf	??_bme280_parse_sensor_data+1
  7352  0A14  01F3               	clrf	??_bme280_parse_sensor_data+2
  7353  0A15  01F4               	clrf	??_bme280_parse_sensor_data+3
  7354  0A16  300C               	movlw	12
  7355  0A17                     u3345:	
  7356  0A17  35F1               	lslf	??_bme280_parse_sensor_data,f
  7357  0A18  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7358  0A19  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7359  0A1A  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7360  0A1B  0B89               	decfsz	9,f
  7361  0A1C  2A17               	goto	u3345
  7362  0A1D  0874               	movf	??_bme280_parse_sensor_data+3,w
  7363  0A1E  00AB               	movwf	bme280_parse_sensor_data@data_msb+3
  7364  0A1F  0873               	movf	??_bme280_parse_sensor_data+2,w
  7365  0A20  00AA               	movwf	bme280_parse_sensor_data@data_msb+2
  7366  0A21  0872               	movf	??_bme280_parse_sensor_data+1,w
  7367  0A22  00A9               	movwf	bme280_parse_sensor_data@data_msb+1
  7368  0A23  0871               	movf	??_bme280_parse_sensor_data,w
  7369  0A24  00A8               	movwf	bme280_parse_sensor_data@data_msb
  7370                           
  7371                           ;BME280_driver/bme280.c: 714:     data_lsb = (uint32_t)reg_data[4] << 4;
  7372  0A25  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7373  0A26  3E04               	addlw	4
  7374  0A27  0086               	movwf	6
  7375  0A28  0187               	clrf	7
  7376  0A29  0801               	movf	1,w
  7377  0A2A  00F1               	movwf	??_bme280_parse_sensor_data
  7378  0A2B  01F2               	clrf	??_bme280_parse_sensor_data+1
  7379  0A2C  01F3               	clrf	??_bme280_parse_sensor_data+2
  7380  0A2D  01F4               	clrf	??_bme280_parse_sensor_data+3
  7381  0A2E  3004               	movlw	4
  7382  0A2F                     u3355:	
  7383  0A2F  35F1               	lslf	??_bme280_parse_sensor_data,f
  7384  0A30  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7385  0A31  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7386  0A32  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7387  0A33  0B89               	decfsz	9,f
  7388  0A34  2A2F               	goto	u3355
  7389  0A35  0874               	movf	??_bme280_parse_sensor_data+3,w
  7390  0A36  00A7               	movwf	bme280_parse_sensor_data@data_lsb+3
  7391  0A37  0873               	movf	??_bme280_parse_sensor_data+2,w
  7392  0A38  00A6               	movwf	bme280_parse_sensor_data@data_lsb+2
  7393  0A39  0872               	movf	??_bme280_parse_sensor_data+1,w
  7394  0A3A  00A5               	movwf	bme280_parse_sensor_data@data_lsb+1
  7395  0A3B  0871               	movf	??_bme280_parse_sensor_data,w
  7396  0A3C  00A4               	movwf	bme280_parse_sensor_data@data_lsb
  7397                           
  7398                           ;BME280_driver/bme280.c: 715:     data_xlsb = (uint32_t)reg_data[5] >> 4;
  7399  0A3D  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7400  0A3E  3E05               	addlw	5
  7401  0A3F  0086               	movwf	6
  7402  0A40  0187               	clrf	7
  7403  0A41  0801               	movf	1,w
  7404  0A42  00F1               	movwf	??_bme280_parse_sensor_data
  7405  0A43  3004               	movlw	4
  7406  0A44                     u3365:	
  7407  0A44  36F1               	lsrf	??_bme280_parse_sensor_data,f
  7408  0A45  0B89               	decfsz	9,f
  7409  0A46  2A44               	goto	u3365
  7410  0A47  0871               	movf	??_bme280_parse_sensor_data,w
  7411  0A48  00F2               	movwf	??_bme280_parse_sensor_data+1
  7412  0A49  01F3               	clrf	??_bme280_parse_sensor_data+2
  7413  0A4A  01F4               	clrf	??_bme280_parse_sensor_data+3
  7414  0A4B  01F5               	clrf	??_bme280_parse_sensor_data+4
  7415  0A4C  0875               	movf	??_bme280_parse_sensor_data+4,w
  7416  0A4D  00A3               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7417  0A4E  0874               	movf	??_bme280_parse_sensor_data+3,w
  7418  0A4F  00A2               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7419  0A50  0873               	movf	??_bme280_parse_sensor_data+2,w
  7420  0A51  00A1               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7421  0A52  0872               	movf	??_bme280_parse_sensor_data+1,w
  7422  0A53  00A0               	movwf	bme280_parse_sensor_data@data_xlsb
  7423                           
  7424                           ;BME280_driver/bme280.c: 716:     uncomp_data->temperature = data_msb | data_lsb | data_
      +                          xlsb;
  7425  0A54  0820               	movf	bme280_parse_sensor_data@data_xlsb,w
  7426  0A55  00F1               	movwf	??_bme280_parse_sensor_data
  7427  0A56  0821               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7428  0A57  00F2               	movwf	??_bme280_parse_sensor_data+1
  7429  0A58  0822               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7430  0A59  00F3               	movwf	??_bme280_parse_sensor_data+2
  7431  0A5A  0823               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7432  0A5B  00F4               	movwf	??_bme280_parse_sensor_data+3
  7433  0A5C  0828               	movf	bme280_parse_sensor_data@data_msb,w
  7434  0A5D  0424               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7435  0A5E  00F5               	movwf	??_bme280_parse_sensor_data+4
  7436  0A5F  0829               	movf	bme280_parse_sensor_data@data_msb+1,w
  7437  0A60  0425               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7438  0A61  00F6               	movwf	??_bme280_parse_sensor_data+5
  7439  0A62  082A               	movf	bme280_parse_sensor_data@data_msb+2,w
  7440  0A63  0426               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7441  0A64  00F7               	movwf	??_bme280_parse_sensor_data+6
  7442  0A65  082B               	movf	bme280_parse_sensor_data@data_msb+3,w
  7443  0A66  0427               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7444  0A67  00F8               	movwf	??_bme280_parse_sensor_data+7
  7445  0A68  0875               	movf	??_bme280_parse_sensor_data+4,w
  7446  0A69  04F1               	iorwf	??_bme280_parse_sensor_data,f
  7447  0A6A  0876               	movf	??_bme280_parse_sensor_data+5,w
  7448  0A6B  04F2               	iorwf	??_bme280_parse_sensor_data+1,f
  7449  0A6C  0877               	movf	??_bme280_parse_sensor_data+6,w
  7450  0A6D  04F3               	iorwf	??_bme280_parse_sensor_data+2,f
  7451  0A6E  0878               	movf	??_bme280_parse_sensor_data+7,w
  7452  0A6F  04F4               	iorwf	??_bme280_parse_sensor_data+3,f
  7453  0A70  0870               	movf	bme280_parse_sensor_data@uncomp_data,w
  7454  0A71  3E04               	addlw	4
  7455  0A72  0086               	movwf	6
  7456  0A73  0187               	clrf	7
  7457  0A74  0871               	movf	??_bme280_parse_sensor_data,w
  7458  0A75  3FC0               	movwi [0]fsr1
  7459  0A76  0872               	movf	??_bme280_parse_sensor_data+1,w
  7460  0A77  3FC1               	movwi [1]fsr1
  7461  0A78  0873               	movf	??_bme280_parse_sensor_data+2,w
  7462  0A79  3FC2               	movwi [2]fsr1
  7463  0A7A  0874               	movf	??_bme280_parse_sensor_data+3,w
  7464  0A7B  3FC3               	movwi [3]fsr1
  7465                           
  7466                           ;BME280_driver/bme280.c: 719:     data_lsb = (uint32_t)reg_data[6] << 8;
  7467  0A7C  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7468  0A7D  3E06               	addlw	6
  7469  0A7E  0086               	movwf	6
  7470  0A7F  0187               	clrf	7
  7471  0A80  0801               	movf	1,w
  7472  0A81  00F1               	movwf	??_bme280_parse_sensor_data
  7473  0A82  01F2               	clrf	??_bme280_parse_sensor_data+1
  7474  0A83  01F3               	clrf	??_bme280_parse_sensor_data+2
  7475  0A84  01F4               	clrf	??_bme280_parse_sensor_data+3
  7476  0A85  3008               	movlw	8
  7477  0A86                     u3375:	
  7478  0A86  35F1               	lslf	??_bme280_parse_sensor_data,f
  7479  0A87  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7480  0A88  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7481  0A89  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7482  0A8A  0B89               	decfsz	9,f
  7483  0A8B  2A86               	goto	u3375
  7484  0A8C  0874               	movf	??_bme280_parse_sensor_data+3,w
  7485  0A8D  00A7               	movwf	bme280_parse_sensor_data@data_lsb+3
  7486  0A8E  0873               	movf	??_bme280_parse_sensor_data+2,w
  7487  0A8F  00A6               	movwf	bme280_parse_sensor_data@data_lsb+2
  7488  0A90  0872               	movf	??_bme280_parse_sensor_data+1,w
  7489  0A91  00A5               	movwf	bme280_parse_sensor_data@data_lsb+1
  7490  0A92  0871               	movf	??_bme280_parse_sensor_data,w
  7491  0A93  00A4               	movwf	bme280_parse_sensor_data@data_lsb
  7492                           
  7493                           ;BME280_driver/bme280.c: 720:     data_msb = (uint32_t)reg_data[7];
  7494  0A94  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7495  0A95  3E07               	addlw	7
  7496  0A96  0086               	movwf	6
  7497  0A97  0187               	clrf	7
  7498  0A98  0801               	movf	1,w
  7499  0A99  00F1               	movwf	??_bme280_parse_sensor_data
  7500  0A9A  01F2               	clrf	??_bme280_parse_sensor_data+1
  7501  0A9B  01F3               	clrf	??_bme280_parse_sensor_data+2
  7502  0A9C  01F4               	clrf	??_bme280_parse_sensor_data+3
  7503  0A9D  0874               	movf	??_bme280_parse_sensor_data+3,w
  7504  0A9E  00AB               	movwf	bme280_parse_sensor_data@data_msb+3
  7505  0A9F  0873               	movf	??_bme280_parse_sensor_data+2,w
  7506  0AA0  00AA               	movwf	bme280_parse_sensor_data@data_msb+2
  7507  0AA1  0872               	movf	??_bme280_parse_sensor_data+1,w
  7508  0AA2  00A9               	movwf	bme280_parse_sensor_data@data_msb+1
  7509  0AA3  0871               	movf	??_bme280_parse_sensor_data,w
  7510  0AA4  00A8               	movwf	bme280_parse_sensor_data@data_msb
  7511                           
  7512                           ;BME280_driver/bme280.c: 721:     uncomp_data->humidity = data_msb | data_lsb;
  7513  0AA5  0828               	movf	bme280_parse_sensor_data@data_msb,w
  7514  0AA6  0424               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7515  0AA7  00F1               	movwf	??_bme280_parse_sensor_data
  7516  0AA8  0829               	movf	bme280_parse_sensor_data@data_msb+1,w
  7517  0AA9  0425               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7518  0AAA  00F2               	movwf	??_bme280_parse_sensor_data+1
  7519  0AAB  082A               	movf	bme280_parse_sensor_data@data_msb+2,w
  7520  0AAC  0426               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7521  0AAD  00F3               	movwf	??_bme280_parse_sensor_data+2
  7522  0AAE  082B               	movf	bme280_parse_sensor_data@data_msb+3,w
  7523  0AAF  0427               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7524  0AB0  00F4               	movwf	??_bme280_parse_sensor_data+3
  7525  0AB1  0870               	movf	bme280_parse_sensor_data@uncomp_data,w
  7526  0AB2  3E08               	addlw	8
  7527  0AB3  0086               	movwf	6
  7528  0AB4  0187               	clrf	7
  7529  0AB5  0871               	movf	??_bme280_parse_sensor_data,w
  7530  0AB6  3FC0               	movwi [0]fsr1
  7531  0AB7  0872               	movf	??_bme280_parse_sensor_data+1,w
  7532  0AB8  3FC1               	movwi [1]fsr1
  7533  0AB9  0873               	movf	??_bme280_parse_sensor_data+2,w
  7534  0ABA  3FC2               	movwi [2]fsr1
  7535  0ABB  0874               	movf	??_bme280_parse_sensor_data+3,w
  7536  0ABC  3FC3               	movwi [3]fsr1
  7537  0ABD  0008               	return
  7538  0ABE                     __end_of_bme280_parse_sensor_data:	
  7539                           
  7540                           	psect	text5
  7541  156E                     __ptext5:	
  7542 ;; *************** function _bme280_compensate_data *****************
  7543 ;; Defined at:
  7544 ;;		line 729 in file "BME280_driver/bme280.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  sensor_comp     1    wreg     unsigned char 
  7547 ;;  uncomp_data     1   59[BANK0 ] PTR const struct bme280_
  7548 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7549 ;;  comp_data       1   60[BANK0 ] PTR struct bme280_data
  7550 ;;		 -> main@sensor_data(12), 
  7551 ;;  calib_data      1   61[BANK0 ] PTR struct bme280_calib_
  7552 ;;		 -> EnvSensor(51), 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;  sensor_comp     1   64[BANK0 ] unsigned char 
  7555 ;;  rslt            1   63[BANK0 ] char 
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  1    wreg      char 
  7558 ;; Registers used:
  7559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7560 ;; Tracked objects:
  7561 ;;		On entry : 1F/1
  7562 ;;		On exit  : 1F/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7565 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;Total ram usage:        6 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    5
  7572 ;; This function calls:
  7573 ;;		_compensate_humidity
  7574 ;;		_compensate_pressure
  7575 ;;		_compensate_temperature
  7576 ;; This function is called by:
  7577 ;;		_bme280_get_sensor_data
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           
  7582                           ;psect for function _bme280_compensate_data
  7583  156E                     _bme280_compensate_data:	
  7584                           
  7585                           ;incstack = 0
  7586                           ; Regs used in _bme280_compensate_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7587                           ;bme280_compensate_data@sensor_comp stored from wreg
  7588  156E  0020               	movlb	0	; select bank0
  7589  156F  00E0               	movwf	bme280_compensate_data@sensor_comp
  7590                           
  7591                           ;BME280_driver/bme280.c: 729: int8_t bme280_compensate_data(uint8_t sensor_comp,;BME280_
      +                          driver/bme280.c: 730:                               const struct bme280_uncomp_data *unc
      +                          omp_data,;BME280_driver/bme280.c: 731:                               struct bme280_data 
      +                          *comp_data,;BME280_driver/bme280.c: 732:                               struct bme280_cal
      +                          ib_data *calib_data);BME280_driver/bme280.c: 733: {;BME280_driver/bme280.c: 734:     int
      +                          8_t rslt = 0;
  7592  1570  01DF               	clrf	bme280_compensate_data@rslt
  7593                           
  7594                           ;BME280_driver/bme280.c: 736:     if ((uncomp_data != ((void*)0)) && (comp_data != ((voi
      +                          d*)0)) && (calib_data != ((void*)0)))
  7595  1571  085B               	movf	bme280_compensate_data@uncomp_data,w
  7596  1572  1903               	btfsc	3,2
  7597  1573  2DE0               	goto	l126
  7598  1574  085C               	movf	bme280_compensate_data@comp_data,w
  7599  1575  1903               	btfsc	3,2
  7600  1576  2DE0               	goto	l126
  7601  1577  085D               	movf	bme280_compensate_data@calib_data,w
  7602  1578  1903               	btfsc	3,2
  7603  1579  2DE0               	goto	l126
  7604                           
  7605                           ;BME280_driver/bme280.c: 737:     {;BME280_driver/bme280.c: 739:         comp_data->temp
      +                          erature = 0;
  7606  157A  085C               	movf	bme280_compensate_data@comp_data,w
  7607  157B  3E04               	addlw	4
  7608  157C  0086               	movwf	6
  7609  157D  3001               	movlw	1	; select bank2/3
  7610  157E  0087               	movwf	7
  7611  157F  3000               	movlw	0
  7612  1580  3FC0               	movwi [0]fsr1
  7613  1581  3000               	movlw	0
  7614  1582  3FC1               	movwi [1]fsr1
  7615  1583  3FC2               	movwi [2]fsr1
  7616  1584  3FC3               	movwi [3]fsr1
  7617                           
  7618                           ;BME280_driver/bme280.c: 740:         comp_data->pressure = 0;
  7619  1585  085C               	movf	bme280_compensate_data@comp_data,w
  7620  1586  0086               	movwf	6
  7621  1587  3001               	movlw	1	; select bank2/3
  7622  1588  0087               	movwf	7
  7623  1589  3000               	movlw	0
  7624  158A  3FC0               	movwi [0]fsr1
  7625  158B  3FC1               	movwi [1]fsr1
  7626  158C  3FC2               	movwi [2]fsr1
  7627  158D  3FC3               	movwi [3]fsr1
  7628                           
  7629                           ;BME280_driver/bme280.c: 741:         comp_data->humidity = 0;
  7630  158E  085C               	movf	bme280_compensate_data@comp_data,w
  7631  158F  3E08               	addlw	8
  7632  1590  0086               	movwf	6
  7633  1591  3001               	movlw	1	; select bank2/3
  7634  1592  0087               	movwf	7
  7635  1593  3000               	movlw	0
  7636  1594  3FC0               	movwi [0]fsr1
  7637  1595  3000               	movlw	0
  7638  1596  3FC1               	movwi [1]fsr1
  7639  1597  3FC2               	movwi [2]fsr1
  7640  1598  3FC3               	movwi [3]fsr1
  7641                           
  7642                           ;BME280_driver/bme280.c: 744:         if (sensor_comp & (1 | 1 << 1 | 1 << 2))
  7643  1599  0860               	movf	bme280_compensate_data@sensor_comp,w
  7644  159A  3907               	andlw	7
  7645  159B  1903               	btfsc	3,2
  7646  159C  2DB2               	goto	l4500
  7647                           
  7648                           ;BME280_driver/bme280.c: 745:         {;BME280_driver/bme280.c: 747:             comp_da
      +                          ta->temperature = compensate_temperature(uncomp_data, calib_data);
  7649  159D  085D               	movf	bme280_compensate_data@calib_data,w
  7650  159E  00DE               	movwf	??_bme280_compensate_data
  7651  159F  085E               	movf	??_bme280_compensate_data,w
  7652  15A0  00AE               	movwf	compensate_temperature@calib_data
  7653  15A1  085B               	movf	bme280_compensate_data@uncomp_data,w
  7654  15A2  3185  259B  3195   	fcall	_compensate_temperature
  7655  15A5  085C               	movf	bme280_compensate_data@comp_data,w
  7656  15A6  3E04               	addlw	4
  7657  15A7  0086               	movwf	6
  7658  15A8  3001               	movlw	1	; select bank2/3
  7659  15A9  0087               	movwf	7
  7660  15AA  082E               	movf	?_compensate_temperature,w
  7661  15AB  3FC0               	movwi [0]fsr1
  7662  15AC  082F               	movf	?_compensate_temperature+1,w
  7663  15AD  3FC1               	movwi [1]fsr1
  7664  15AE  0830               	movf	?_compensate_temperature+2,w
  7665  15AF  3FC2               	movwi [2]fsr1
  7666  15B0  0831               	movf	?_compensate_temperature+3,w
  7667  15B1  3FC3               	movwi [3]fsr1
  7668  15B2                     l4500:	
  7669                           
  7670                           ;BME280_driver/bme280.c: 749:         if (sensor_comp & 1)
  7671  15B2  1C60               	btfss	bme280_compensate_data@sensor_comp,0
  7672  15B3  2DC8               	goto	l4504
  7673                           
  7674                           ;BME280_driver/bme280.c: 750:         {;BME280_driver/bme280.c: 752:             comp_da
      +                          ta->pressure = compensate_pressure(uncomp_data, calib_data);
  7675  15B4  085D               	movf	bme280_compensate_data@calib_data,w
  7676  15B5  00DE               	movwf	??_bme280_compensate_data
  7677  15B6  085E               	movf	??_bme280_compensate_data,w
  7678  15B7  00AE               	movwf	compensate_pressure@calib_data
  7679  15B8  085B               	movf	bme280_compensate_data@uncomp_data,w
  7680  15B9  3180  2053  3195   	fcall	_compensate_pressure
  7681  15BC  085C               	movf	bme280_compensate_data@comp_data,w
  7682  15BD  0086               	movwf	6
  7683  15BE  3001               	movlw	1	; select bank2/3
  7684  15BF  0087               	movwf	7
  7685  15C0  082E               	movf	?_compensate_pressure,w
  7686  15C1  3FC0               	movwi [0]fsr1
  7687  15C2  082F               	movf	?_compensate_pressure+1,w
  7688  15C3  3FC1               	movwi [1]fsr1
  7689  15C4  0830               	movf	?_compensate_pressure+2,w
  7690  15C5  3FC2               	movwi [2]fsr1
  7691  15C6  0831               	movf	?_compensate_pressure+3,w
  7692  15C7  3FC3               	movwi [3]fsr1
  7693  15C8                     l4504:	
  7694                           
  7695                           ;BME280_driver/bme280.c: 754:         if (sensor_comp & 1 << 2)
  7696  15C8  1D60               	btfss	bme280_compensate_data@sensor_comp,2
  7697  15C9  2DE2               	goto	l4508
  7698                           
  7699                           ;BME280_driver/bme280.c: 755:         {;BME280_driver/bme280.c: 758:             comp_da
      +                          ta->humidity = compensate_humidity(uncomp_data, calib_data);
  7700  15CA  085D               	movf	bme280_compensate_data@calib_data,w
  7701  15CB  00DE               	movwf	??_bme280_compensate_data
  7702  15CC  085E               	movf	??_bme280_compensate_data,w
  7703  15CD  00AE               	movwf	compensate_humidity@calib_data
  7704  15CE  085B               	movf	bme280_compensate_data@uncomp_data,w
  7705  15CF  318D  2541  3195   	fcall	_compensate_humidity
  7706  15D2  085C               	movf	bme280_compensate_data@comp_data,w
  7707  15D3  3E08               	addlw	8
  7708  15D4  0086               	movwf	6
  7709  15D5  3001               	movlw	1	; select bank2/3
  7710  15D6  0087               	movwf	7
  7711  15D7  082E               	movf	?_compensate_humidity,w
  7712  15D8  3FC0               	movwi [0]fsr1
  7713  15D9  082F               	movf	?_compensate_humidity+1,w
  7714  15DA  3FC1               	movwi [1]fsr1
  7715  15DB  0830               	movf	?_compensate_humidity+2,w
  7716  15DC  3FC2               	movwi [2]fsr1
  7717  15DD  0831               	movf	?_compensate_humidity+3,w
  7718  15DE  3FC3               	movwi [3]fsr1
  7719  15DF  2DE2               	goto	l4508
  7720  15E0                     l126:	
  7721                           ;BME280_driver/bme280.c: 765:     else
  7722                           
  7723                           
  7724                           ;BME280_driver/bme280.c: 766:     {;BME280_driver/bme280.c: 767:         rslt = -1;
  7725  15E0  01DF               	clrf	bme280_compensate_data@rslt
  7726  15E1  03DF               	decf	bme280_compensate_data@rslt,f
  7727  15E2                     l4508:	
  7728                           
  7729                           ;BME280_driver/bme280.c: 770:     return rslt;
  7730  15E2  085F               	movf	bme280_compensate_data@rslt,w
  7731  15E3  0008               	return
  7732  15E4                     __end_of_bme280_compensate_data:	
  7733                           
  7734                           	psect	text6
  7735  059B                     __ptext6:	
  7736 ;; *************** function _compensate_temperature *****************
  7737 ;; Defined at:
  7738 ;;		line 1126 in file "BME280_driver/bme280.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  7741 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7742 ;;  calib_data      1   14[BANK0 ] PTR struct bme280_calib_
  7743 ;;		 -> EnvSensor(51), 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  uncomp_data     1   44[BANK0 ] PTR const struct bme280_
  7746 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7747 ;;  temperature     4   49[BANK0 ] long 
  7748 ;;  var2            4   45[BANK0 ] long 
  7749 ;;  var1            4   40[BANK0 ] long 
  7750 ;;  temperature_    4   36[BANK0 ] long 
  7751 ;;  temperature_    4    0        long 
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  4   14[BANK0 ] long 
  7754 ;; Registers used:
  7755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7756 ;; Tracked objects:
  7757 ;;		On entry : 1F/0
  7758 ;;		On exit  : 1F/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7761 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7763 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7764 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;Total ram usage:       39 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; Hardware stack levels required when called:    4
  7768 ;; This function calls:
  7769 ;;		___aldiv
  7770 ;;		___lmul
  7771 ;; This function is called by:
  7772 ;;		_bme280_compensate_data
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           
  7777                           ;psect for function _compensate_temperature
  7778  059B                     _compensate_temperature:	
  7779                           
  7780                           ;incstack = 0
  7781                           ; Regs used in _compensate_temperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7782                           ;compensate_temperature@uncomp_data stored from wreg
  7783  059B  00CC               	movwf	compensate_temperature@uncomp_data
  7784                           
  7785                           ;BME280_driver/bme280.c: 1133:     int32_t temperature_max = 8500;
  7786  059C  3000               	movlw	0
  7787  059D  00C7               	movwf	compensate_temperature@temperature_max+3
  7788  059E  3000               	movlw	0
  7789  059F  00C6               	movwf	compensate_temperature@temperature_max+2
  7790  05A0  3021               	movlw	33
  7791  05A1  00C5               	movwf	compensate_temperature@temperature_max+1
  7792  05A2  3034               	movlw	52
  7793  05A3  00C4               	movwf	compensate_temperature@temperature_max
  7794                           
  7795                           ;BME280_driver/bme280.c: 1135:     var1 = (int32_t)((uncomp_data->temperature / 8) - ((i
      +                          nt32_t)calib_data->dig_T1 * 2));
  7796  05A4  082E               	movf	compensate_temperature@calib_data,w
  7797  05A5  0086               	movwf	6
  7798  05A6  3001               	movlw	1	; select bank2/3
  7799  05A7  0087               	movwf	7
  7800  05A8  3F40               	moviw [0]fsr1
  7801  05A9  00B2               	movwf	??_compensate_temperature
  7802  05AA  3F41               	moviw [1]fsr1
  7803  05AB  00B3               	movwf	??_compensate_temperature+1
  7804  05AC  0832               	movf	??_compensate_temperature,w
  7805  05AD  00B4               	movwf	??_compensate_temperature+2
  7806  05AE  0833               	movf	??_compensate_temperature+1,w
  7807  05AF  00B5               	movwf	??_compensate_temperature+3
  7808  05B0  01B6               	clrf	??_compensate_temperature+4
  7809  05B1  01B7               	clrf	??_compensate_temperature+5
  7810  05B2  3001               	movlw	1
  7811  05B3                     u4635:	
  7812  05B3  35B4               	lslf	??_compensate_temperature+2,f
  7813  05B4  0DB5               	rlf	??_compensate_temperature+3,f
  7814  05B5  0DB6               	rlf	??_compensate_temperature+4,f
  7815  05B6  0DB7               	rlf	??_compensate_temperature+5,f
  7816  05B7  0B89               	decfsz	9,f
  7817  05B8  2DB3               	goto	u4635
  7818  05B9  084C               	movf	compensate_temperature@uncomp_data,w
  7819  05BA  3E04               	addlw	4
  7820  05BB  0086               	movwf	6
  7821  05BC  0187               	clrf	7
  7822  05BD  3F40               	moviw [0]fsr1
  7823  05BE  00B8               	movwf	??_compensate_temperature+6
  7824  05BF  3F41               	moviw [1]fsr1
  7825  05C0  00B9               	movwf	??_compensate_temperature+7
  7826  05C1  3F42               	moviw [2]fsr1
  7827  05C2  00BA               	movwf	??_compensate_temperature+8
  7828  05C3  3F43               	moviw [3]fsr1
  7829  05C4  00BB               	movwf	??_compensate_temperature+9
  7830  05C5  3003               	movlw	3
  7831  05C6                     u4645:	
  7832  05C6  36BB               	lsrf	??_compensate_temperature+9,f
  7833  05C7  0CBA               	rrf	??_compensate_temperature+8,f
  7834  05C8  0CB9               	rrf	??_compensate_temperature+7,f
  7835  05C9  0CB8               	rrf	??_compensate_temperature+6,f
  7836  05CA  0B89               	decfsz	9,f
  7837  05CB  2DC6               	goto	u4645
  7838  05CC  0834               	movf	??_compensate_temperature+2,w
  7839  05CD  02B8               	subwf	??_compensate_temperature+6,f
  7840  05CE  0835               	movf	??_compensate_temperature+3,w
  7841  05CF  3BB9               	subwfb	??_compensate_temperature+7,f
  7842  05D0  0836               	movf	??_compensate_temperature+4,w
  7843  05D1  3BBA               	subwfb	??_compensate_temperature+8,f
  7844  05D2  0837               	movf	??_compensate_temperature+5,w
  7845  05D3  3BBB               	subwfb	??_compensate_temperature+9,f
  7846  05D4  083B               	movf	??_compensate_temperature+9,w
  7847  05D5  00CB               	movwf	compensate_temperature@var1+3
  7848  05D6  083A               	movf	??_compensate_temperature+8,w
  7849  05D7  00CA               	movwf	compensate_temperature@var1+2
  7850  05D8  0839               	movf	??_compensate_temperature+7,w
  7851  05D9  00C9               	movwf	compensate_temperature@var1+1
  7852  05DA  0838               	movf	??_compensate_temperature+6,w
  7853  05DB  00C8               	movwf	compensate_temperature@var1
  7854                           
  7855                           ;BME280_driver/bme280.c: 1136:     var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
  7856  05DC  3000               	movlw	0
  7857  05DD  00A3               	movwf	___aldiv@divisor+3
  7858  05DE  3000               	movlw	0
  7859  05DF  00A2               	movwf	___aldiv@divisor+2
  7860  05E0  3008               	movlw	8
  7861  05E1  00A1               	movwf	___aldiv@divisor+1
  7862  05E2  3000               	movlw	0
  7863  05E3  00A0               	movwf	___aldiv@divisor
  7864  05E4  082E               	movf	compensate_temperature@calib_data,w
  7865  05E5  3E02               	addlw	2
  7866  05E6  0086               	movwf	6
  7867  05E7  3001               	movlw	1	; select bank2/3
  7868  05E8  0087               	movwf	7
  7869  05E9  3F40               	moviw [0]fsr1
  7870  05EA  00B2               	movwf	??_compensate_temperature
  7871  05EB  3F41               	moviw [1]fsr1
  7872  05EC  00B3               	movwf	??_compensate_temperature+1
  7873  05ED  0832               	movf	??_compensate_temperature,w
  7874  05EE  00F0               	movwf	___lmul@multiplier
  7875  05EF  0833               	movf	??_compensate_temperature+1,w
  7876  05F0  00F1               	movwf	___lmul@multiplier+1
  7877  05F1  0D89               	rlf	9,f
  7878  05F2  3B89               	subwfb	9,f
  7879  05F3  0989               	comf	9,f
  7880  05F4  00F2               	movwf	___lmul@multiplier+2
  7881  05F5  00F3               	movwf	___lmul@multiplier+3
  7882  05F6  084B               	movf	compensate_temperature@var1+3,w
  7883  05F7  00F7               	movwf	___lmul@multiplicand+3
  7884  05F8  084A               	movf	compensate_temperature@var1+2,w
  7885  05F9  00F6               	movwf	___lmul@multiplicand+2
  7886  05FA  0849               	movf	compensate_temperature@var1+1,w
  7887  05FB  00F5               	movwf	___lmul@multiplicand+1
  7888  05FC  0848               	movf	compensate_temperature@var1,w
  7889  05FD  00F4               	movwf	___lmul@multiplicand
  7890  05FE  319C  2491  3185   	fcall	___lmul
  7891  0601  0873               	movf	?___lmul+3,w
  7892  0602  0020               	movlb	0	; select bank0
  7893  0603  00A7               	movwf	___aldiv@dividend+3
  7894  0604  0872               	movf	?___lmul+2,w
  7895  0605  00A6               	movwf	___aldiv@dividend+2
  7896  0606  0871               	movf	?___lmul+1,w
  7897  0607  00A5               	movwf	___aldiv@dividend+1
  7898  0608  0870               	movf	?___lmul,w
  7899  0609  00A4               	movwf	___aldiv@dividend
  7900  060A  3196  265B  3185   	fcall	___aldiv
  7901  060D  0823               	movf	?___aldiv+3,w
  7902  060E  00CB               	movwf	compensate_temperature@var1+3
  7903  060F  0822               	movf	?___aldiv+2,w
  7904  0610  00CA               	movwf	compensate_temperature@var1+2
  7905  0611  0821               	movf	?___aldiv+1,w
  7906  0612  00C9               	movwf	compensate_temperature@var1+1
  7907  0613  0820               	movf	?___aldiv,w
  7908  0614  00C8               	movwf	compensate_temperature@var1
  7909                           
  7910                           ;BME280_driver/bme280.c: 1137:     var2 = (int32_t)((uncomp_data->temperature / 16) - ((
      +                          int32_t)calib_data->dig_T1));
  7911  0615  082E               	movf	compensate_temperature@calib_data,w
  7912  0616  0086               	movwf	6
  7913  0617  3001               	movlw	1	; select bank2/3
  7914  0618  0087               	movwf	7
  7915  0619  3F40               	moviw [0]fsr1
  7916  061A  00B2               	movwf	??_compensate_temperature
  7917  061B  3F41               	moviw [1]fsr1
  7918  061C  00B3               	movwf	??_compensate_temperature+1
  7919  061D  0832               	movf	??_compensate_temperature,w
  7920  061E  00B4               	movwf	??_compensate_temperature+2
  7921  061F  0833               	movf	??_compensate_temperature+1,w
  7922  0620  00B5               	movwf	??_compensate_temperature+3
  7923  0621  01B6               	clrf	??_compensate_temperature+4
  7924  0622  01B7               	clrf	??_compensate_temperature+5
  7925  0623  084C               	movf	compensate_temperature@uncomp_data,w
  7926  0624  3E04               	addlw	4
  7927  0625  0086               	movwf	6
  7928  0626  0187               	clrf	7
  7929  0627  3F40               	moviw [0]fsr1
  7930  0628  00B8               	movwf	??_compensate_temperature+6
  7931  0629  3F41               	moviw [1]fsr1
  7932  062A  00B9               	movwf	??_compensate_temperature+7
  7933  062B  3F42               	moviw [2]fsr1
  7934  062C  00BA               	movwf	??_compensate_temperature+8
  7935  062D  3F43               	moviw [3]fsr1
  7936  062E  00BB               	movwf	??_compensate_temperature+9
  7937  062F  3004               	movlw	4
  7938  0630                     u4655:	
  7939  0630  36BB               	lsrf	??_compensate_temperature+9,f
  7940  0631  0CBA               	rrf	??_compensate_temperature+8,f
  7941  0632  0CB9               	rrf	??_compensate_temperature+7,f
  7942  0633  0CB8               	rrf	??_compensate_temperature+6,f
  7943  0634  0B89               	decfsz	9,f
  7944  0635  2E30               	goto	u4655
  7945  0636  0834               	movf	??_compensate_temperature+2,w
  7946  0637  02B8               	subwf	??_compensate_temperature+6,f
  7947  0638  0835               	movf	??_compensate_temperature+3,w
  7948  0639  3BB9               	subwfb	??_compensate_temperature+7,f
  7949  063A  0836               	movf	??_compensate_temperature+4,w
  7950  063B  3BBA               	subwfb	??_compensate_temperature+8,f
  7951  063C  0837               	movf	??_compensate_temperature+5,w
  7952  063D  3BBB               	subwfb	??_compensate_temperature+9,f
  7953  063E  083B               	movf	??_compensate_temperature+9,w
  7954  063F  00D0               	movwf	compensate_temperature@var2+3
  7955  0640  083A               	movf	??_compensate_temperature+8,w
  7956  0641  00CF               	movwf	compensate_temperature@var2+2
  7957  0642  0839               	movf	??_compensate_temperature+7,w
  7958  0643  00CE               	movwf	compensate_temperature@var2+1
  7959  0644  0838               	movf	??_compensate_temperature+6,w
  7960  0645  00CD               	movwf	compensate_temperature@var2
  7961                           
  7962                           ;BME280_driver/bme280.c: 1138:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  7963  0646  3000               	movlw	0
  7964  0647  00A3               	movwf	___aldiv@divisor+3
  7965  0648  3000               	movlw	0
  7966  0649  00A2               	movwf	___aldiv@divisor+2
  7967  064A  3010               	movlw	16
  7968  064B  00A1               	movwf	___aldiv@divisor+1
  7969  064C  3000               	movlw	0
  7970  064D  00A0               	movwf	___aldiv@divisor
  7971  064E  0850               	movf	compensate_temperature@var2+3,w
  7972  064F  00F3               	movwf	___lmul@multiplier+3
  7973  0650  084F               	movf	compensate_temperature@var2+2,w
  7974  0651  00F2               	movwf	___lmul@multiplier+2
  7975  0652  084E               	movf	compensate_temperature@var2+1,w
  7976  0653  00F1               	movwf	___lmul@multiplier+1
  7977  0654  084D               	movf	compensate_temperature@var2,w
  7978  0655  00F0               	movwf	___lmul@multiplier
  7979  0656  0850               	movf	compensate_temperature@var2+3,w
  7980  0657  00F7               	movwf	___lmul@multiplicand+3
  7981  0658  084F               	movf	compensate_temperature@var2+2,w
  7982  0659  00F6               	movwf	___lmul@multiplicand+2
  7983  065A  084E               	movf	compensate_temperature@var2+1,w
  7984  065B  00F5               	movwf	___lmul@multiplicand+1
  7985  065C  084D               	movf	compensate_temperature@var2,w
  7986  065D  00F4               	movwf	___lmul@multiplicand
  7987  065E  319C  2491  3185   	fcall	___lmul
  7988  0661  0873               	movf	?___lmul+3,w
  7989  0662  0020               	movlb	0	; select bank0
  7990  0663  00A7               	movwf	___aldiv@dividend+3
  7991  0664  0872               	movf	?___lmul+2,w
  7992  0665  00A6               	movwf	___aldiv@dividend+2
  7993  0666  0871               	movf	?___lmul+1,w
  7994  0667  00A5               	movwf	___aldiv@dividend+1
  7995  0668  0870               	movf	?___lmul,w
  7996  0669  00A4               	movwf	___aldiv@dividend
  7997  066A  3196  265B  3185   	fcall	___aldiv
  7998  066D  0823               	movf	?___aldiv+3,w
  7999  066E  00BF               	movwf	_compensate_temperature$2262+3
  8000  066F  0822               	movf	?___aldiv+2,w
  8001  0670  00BE               	movwf	_compensate_temperature$2262+2
  8002  0671  0821               	movf	?___aldiv+1,w
  8003  0672  00BD               	movwf	_compensate_temperature$2262+1
  8004  0673  0820               	movf	?___aldiv,w
  8005  0674  00BC               	movwf	_compensate_temperature$2262
  8006                           
  8007                           ;BME280_driver/bme280.c: 1138:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  8008  0675  3000               	movlw	0
  8009  0676  00A3               	movwf	___aldiv@divisor+3
  8010  0677  3000               	movlw	0
  8011  0678  00A2               	movwf	___aldiv@divisor+2
  8012  0679  3040               	movlw	64
  8013  067A  00A1               	movwf	___aldiv@divisor+1
  8014  067B  3000               	movlw	0
  8015  067C  00A0               	movwf	___aldiv@divisor
  8016  067D  083F               	movf	_compensate_temperature$2262+3,w
  8017  067E  00F3               	movwf	___lmul@multiplier+3
  8018  067F  083E               	movf	_compensate_temperature$2262+2,w
  8019  0680  00F2               	movwf	___lmul@multiplier+2
  8020  0681  083D               	movf	_compensate_temperature$2262+1,w
  8021  0682  00F1               	movwf	___lmul@multiplier+1
  8022  0683  083C               	movf	_compensate_temperature$2262,w
  8023  0684  00F0               	movwf	___lmul@multiplier
  8024  0685  082E               	movf	compensate_temperature@calib_data,w
  8025  0686  3E04               	addlw	4
  8026  0687  0086               	movwf	6
  8027  0688  3001               	movlw	1	; select bank2/3
  8028  0689  0087               	movwf	7
  8029  068A  3F40               	moviw [0]fsr1
  8030  068B  00B2               	movwf	??_compensate_temperature
  8031  068C  3F41               	moviw [1]fsr1
  8032  068D  00B3               	movwf	??_compensate_temperature+1
  8033  068E  0832               	movf	??_compensate_temperature,w
  8034  068F  00F4               	movwf	___lmul@multiplicand
  8035  0690  0833               	movf	??_compensate_temperature+1,w
  8036  0691  00F5               	movwf	___lmul@multiplicand+1
  8037  0692  0D89               	rlf	9,f
  8038  0693  3B89               	subwfb	9,f
  8039  0694  0989               	comf	9,f
  8040  0695  00F6               	movwf	___lmul@multiplicand+2
  8041  0696  00F7               	movwf	___lmul@multiplicand+3
  8042  0697  319C  2491  3185   	fcall	___lmul
  8043  069A  0873               	movf	?___lmul+3,w
  8044  069B  0020               	movlb	0	; select bank0
  8045  069C  00A7               	movwf	___aldiv@dividend+3
  8046  069D  0872               	movf	?___lmul+2,w
  8047  069E  00A6               	movwf	___aldiv@dividend+2
  8048  069F  0871               	movf	?___lmul+1,w
  8049  06A0  00A5               	movwf	___aldiv@dividend+1
  8050  06A1  0870               	movf	?___lmul,w
  8051  06A2  00A4               	movwf	___aldiv@dividend
  8052  06A3  3196  265B  3185   	fcall	___aldiv
  8053  06A6  0823               	movf	?___aldiv+3,w
  8054  06A7  00D0               	movwf	compensate_temperature@var2+3
  8055  06A8  0822               	movf	?___aldiv+2,w
  8056  06A9  00CF               	movwf	compensate_temperature@var2+2
  8057  06AA  0821               	movf	?___aldiv+1,w
  8058  06AB  00CE               	movwf	compensate_temperature@var2+1
  8059  06AC  0820               	movf	?___aldiv,w
  8060  06AD  00CD               	movwf	compensate_temperature@var2
  8061                           
  8062                           ;BME280_driver/bme280.c: 1139:     calib_data->t_fine = var1 + var2;
  8063  06AE  0848               	movf	compensate_temperature@var1,w
  8064  06AF  074D               	addwf	compensate_temperature@var2,w
  8065  06B0  00B2               	movwf	??_compensate_temperature
  8066  06B1  0849               	movf	compensate_temperature@var1+1,w
  8067  06B2  3D4E               	addwfc	compensate_temperature@var2+1,w
  8068  06B3  00B3               	movwf	??_compensate_temperature+1
  8069  06B4  084A               	movf	compensate_temperature@var1+2,w
  8070  06B5  3D4F               	addwfc	compensate_temperature@var2+2,w
  8071  06B6  00B4               	movwf	??_compensate_temperature+2
  8072  06B7  084B               	movf	compensate_temperature@var1+3,w
  8073  06B8  3D50               	addwfc	compensate_temperature@var2+3,w
  8074  06B9  00B5               	movwf	??_compensate_temperature+3
  8075  06BA  082E               	movf	compensate_temperature@calib_data,w
  8076  06BB  3E21               	addlw	33
  8077  06BC  0086               	movwf	6
  8078  06BD  3001               	movlw	1	; select bank2/3
  8079  06BE  0087               	movwf	7
  8080  06BF  0832               	movf	??_compensate_temperature,w
  8081  06C0  3FC0               	movwi [0]fsr1
  8082  06C1  0833               	movf	??_compensate_temperature+1,w
  8083  06C2  3FC1               	movwi [1]fsr1
  8084  06C3  0834               	movf	??_compensate_temperature+2,w
  8085  06C4  3FC2               	movwi [2]fsr1
  8086  06C5  0835               	movf	??_compensate_temperature+3,w
  8087  06C6  3FC3               	movwi [3]fsr1
  8088                           
  8089                           ;BME280_driver/bme280.c: 1140:     temperature = (calib_data->t_fine * 5 + 128) / 256;
  8090  06C7  3000               	movlw	0
  8091  06C8  00A3               	movwf	___aldiv@divisor+3
  8092  06C9  3000               	movlw	0
  8093  06CA  00A2               	movwf	___aldiv@divisor+2
  8094  06CB  3001               	movlw	1
  8095  06CC  00A1               	movwf	___aldiv@divisor+1
  8096  06CD  3000               	movlw	0
  8097  06CE  00A0               	movwf	___aldiv@divisor
  8098  06CF  3080               	movlw	128
  8099  06D0  00B2               	movwf	??_compensate_temperature
  8100  06D1  3000               	movlw	0
  8101  06D2  00B3               	movwf	??_compensate_temperature+1
  8102  06D3  3000               	movlw	0
  8103  06D4  00B4               	movwf	??_compensate_temperature+2
  8104  06D5  3000               	movlw	0
  8105  06D6  00B5               	movwf	??_compensate_temperature+3
  8106  06D7  082E               	movf	compensate_temperature@calib_data,w
  8107  06D8  3E21               	addlw	33
  8108  06D9  0086               	movwf	6
  8109  06DA  3001               	movlw	1	; select bank2/3
  8110  06DB  0087               	movwf	7
  8111  06DC  3F40               	moviw [0]fsr1
  8112  06DD  00F0               	movwf	___lmul@multiplier
  8113  06DE  3F41               	moviw [1]fsr1
  8114  06DF  00F1               	movwf	___lmul@multiplier+1
  8115  06E0  3F42               	moviw [2]fsr1
  8116  06E1  00F2               	movwf	___lmul@multiplier+2
  8117  06E2  3F43               	moviw [3]fsr1
  8118  06E3  00F3               	movwf	___lmul@multiplier+3
  8119  06E4  3000               	movlw	0
  8120  06E5  00F7               	movwf	___lmul@multiplicand+3
  8121  06E6  3000               	movlw	0
  8122  06E7  00F6               	movwf	___lmul@multiplicand+2
  8123  06E8  3000               	movlw	0
  8124  06E9  00F5               	movwf	___lmul@multiplicand+1
  8125  06EA  3005               	movlw	5
  8126  06EB  00F4               	movwf	___lmul@multiplicand
  8127  06EC  319C  2491  3185   	fcall	___lmul
  8128  06EF  0870               	movf	?___lmul,w
  8129  06F0  0020               	movlb	0	; select bank0
  8130  06F1  07B2               	addwf	??_compensate_temperature,f
  8131  06F2  0871               	movf	?___lmul+1,w
  8132  06F3  3DB3               	addwfc	??_compensate_temperature+1,f
  8133  06F4  0872               	movf	?___lmul+2,w
  8134  06F5  3DB4               	addwfc	??_compensate_temperature+2,f
  8135  06F6  0873               	movf	?___lmul+3,w
  8136  06F7  3DB5               	addwfc	??_compensate_temperature+3,f
  8137  06F8  0835               	movf	??_compensate_temperature+3,w
  8138  06F9  00A7               	movwf	___aldiv@dividend+3
  8139  06FA  0834               	movf	??_compensate_temperature+2,w
  8140  06FB  00A6               	movwf	___aldiv@dividend+2
  8141  06FC  0833               	movf	??_compensate_temperature+1,w
  8142  06FD  00A5               	movwf	___aldiv@dividend+1
  8143  06FE  0832               	movf	??_compensate_temperature,w
  8144  06FF  00A4               	movwf	___aldiv@dividend
  8145  0700  3196  265B  3185   	fcall	___aldiv
  8146  0703  0823               	movf	?___aldiv+3,w
  8147  0704  00D4               	movwf	compensate_temperature@temperature+3
  8148  0705  0822               	movf	?___aldiv+2,w
  8149  0706  00D3               	movwf	compensate_temperature@temperature+2
  8150  0707  0821               	movf	?___aldiv+1,w
  8151  0708  00D2               	movwf	compensate_temperature@temperature+1
  8152  0709  0820               	movf	?___aldiv,w
  8153  070A  00D1               	movwf	compensate_temperature@temperature
  8154                           
  8155                           ;BME280_driver/bme280.c: 1141:     if (temperature < temperature_min)
  8156  070B  1FD4               	btfss	compensate_temperature@temperature+3,7
  8157  070C  2F1F               	goto	l4290
  8158  070D  3060               	movlw	96
  8159  070E  0251               	subwf	compensate_temperature@temperature,w
  8160  070F  30F0               	movlw	240
  8161  0710  3B52               	subwfb	compensate_temperature@temperature+1,w
  8162  0711  30FF               	movlw	255
  8163  0712  3B53               	subwfb	compensate_temperature@temperature+2,w
  8164  0713  30FF               	movlw	255
  8165  0714  3B54               	subwfb	compensate_temperature@temperature+3,w
  8166  0715  1803               	btfsc	3,0
  8167  0716  2F1F               	goto	l4290
  8168                           
  8169                           ;BME280_driver/bme280.c: 1142:     {;BME280_driver/bme280.c: 1143:         temperature =
      +                           temperature_min;
  8170  0717  30FF               	movlw	255
  8171  0718  00D4               	movwf	compensate_temperature@temperature+3
  8172  0719  30FF               	movlw	255
  8173  071A  00D3               	movwf	compensate_temperature@temperature+2
  8174  071B  30F0               	movlw	240
  8175  071C  00D2               	movwf	compensate_temperature@temperature+1
  8176  071D  3060               	movlw	96
  8177  071E  2F34               	goto	L2
  8178  071F                     l4290:	
  8179                           ;BME280_driver/bme280.c: 1144:     }
  8180                           
  8181  071F  1BD4               	btfsc	compensate_temperature@temperature+3,7
  8182  0720  2F35               	goto	l185
  8183  0721  0854               	movf	compensate_temperature@temperature+3,w
  8184  0722  1D03               	btfss	3,2
  8185  0723  2F2D               	goto	l4292
  8186  0724  0853               	movf	compensate_temperature@temperature+2,w
  8187  0725  1D03               	btfss	3,2
  8188  0726  2F2D               	goto	l4292
  8189  0727  3035               	movlw	53
  8190  0728  0251               	subwf	compensate_temperature@temperature,w
  8191  0729  3021               	movlw	33
  8192  072A  3B52               	subwfb	compensate_temperature@temperature+1,w
  8193  072B  1C03               	btfss	3,0
  8194  072C  2F35               	goto	l185
  8195  072D                     l4292:	
  8196                           
  8197                           ;BME280_driver/bme280.c: 1146:     {;BME280_driver/bme280.c: 1147:         temperature =
      +                           temperature_max;
  8198  072D  3000               	movlw	0
  8199  072E  00D4               	movwf	compensate_temperature@temperature+3
  8200  072F  3000               	movlw	0
  8201  0730  00D3               	movwf	compensate_temperature@temperature+2
  8202  0731  3021               	movlw	33
  8203  0732  00D2               	movwf	compensate_temperature@temperature+1
  8204  0733  3034               	movlw	52
  8205  0734                     L2:	
  8206  0734  00D1               	movwf	compensate_temperature@temperature
  8207  0735                     l185:	
  8208                           
  8209                           ;BME280_driver/bme280.c: 1150:     return temperature;
  8210  0735  0854               	movf	compensate_temperature@temperature+3,w
  8211  0736  00B1               	movwf	?_compensate_temperature+3
  8212  0737  0853               	movf	compensate_temperature@temperature+2,w
  8213  0738  00B0               	movwf	?_compensate_temperature+2
  8214  0739  0852               	movf	compensate_temperature@temperature+1,w
  8215  073A  00AF               	movwf	?_compensate_temperature+1
  8216  073B  0851               	movf	compensate_temperature@temperature,w
  8217  073C  00AE               	movwf	?_compensate_temperature
  8218  073D  0008               	return
  8219  073E                     __end_of_compensate_temperature:	
  8220                           
  8221                           	psect	text7
  8222  0053                     __ptext7:	
  8223 ;; *************** function _compensate_pressure *****************
  8224 ;; Defined at:
  8225 ;;		line 1209 in file "BME280_driver/bme280.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  8228 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8229 ;;  calib_data      1   14[BANK0 ] PTR const struct bme280_
  8230 ;;		 -> EnvSensor(51), 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  uncomp_data     1   20[BANK1 ] PTR const struct bme280_
  8233 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8234 ;;  var1            4   41[BANK1 ] long 
  8235 ;;  pressure        4   37[BANK1 ] unsigned long 
  8236 ;;  var2            4   33[BANK1 ] long 
  8237 ;;  pressure_min    4    0        unsigned long 
  8238 ;;  pressure_max    4   21[BANK1 ] unsigned long 
  8239 ;;  var5            4    8[BANK1 ] unsigned long 
  8240 ;;  var4            4    4[BANK1 ] long 
  8241 ;;  var3            4    0[BANK1 ] long 
  8242 ;; Return value:  Size  Location     Type
  8243 ;;                  4   14[BANK0 ] unsigned long 
  8244 ;; Registers used:
  8245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8246 ;; Tracked objects:
  8247 ;;		On entry : 1F/0
  8248 ;;		On exit  : 1F/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8251 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Locals:         0       0      45       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;      Totals:         0      22      45       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;Total ram usage:       67 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    4
  8258 ;; This function calls:
  8259 ;;		___aldiv
  8260 ;;		___lldiv
  8261 ;;		___lmul
  8262 ;; This function is called by:
  8263 ;;		_bme280_compensate_data
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267                           
  8268                           ;psect for function _compensate_pressure
  8269  0053                     _compensate_pressure:	
  8270                           
  8271                           ;incstack = 0
  8272                           ; Regs used in _compensate_pressure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8273                           ;compensate_pressure@uncomp_data stored from wreg
  8274  0053  0021               	movlb	1	; select bank1
  8275  0054  00B4               	movwf	compensate_pressure@uncomp_data^(0+128)
  8276                           
  8277                           ;BME280_driver/bme280.c: 1219:     uint32_t pressure_max = 110000;
  8278  0055  3000               	movlw	0
  8279  0056  00B8               	movwf	(compensate_pressure@pressure_max+3)^(0+128)
  8280  0057  3001               	movlw	1
  8281  0058  00B7               	movwf	(compensate_pressure@pressure_max+2)^(0+128)
  8282  0059  30AD               	movlw	173
  8283  005A  00B6               	movwf	(compensate_pressure@pressure_max+1)^(0+128)
  8284  005B  30B0               	movlw	176
  8285  005C  00B5               	movwf	compensate_pressure@pressure_max^(0+128)
  8286                           
  8287                           ;BME280_driver/bme280.c: 1221:     var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t
      +                          )64000;
  8288  005D  3000               	movlw	0
  8289  005E  0020               	movlb	0	; select bank0
  8290  005F  00A3               	movwf	___aldiv@divisor+3
  8291  0060  3000               	movlw	0
  8292  0061  00A2               	movwf	___aldiv@divisor+2
  8293  0062  3000               	movlw	0
  8294  0063  00A1               	movwf	___aldiv@divisor+1
  8295  0064  3002               	movlw	2
  8296  0065  00A0               	movwf	___aldiv@divisor
  8297  0066  082E               	movf	compensate_pressure@calib_data,w
  8298  0067  3E21               	addlw	33
  8299  0068  0086               	movwf	6
  8300  0069  3001               	movlw	1	; select bank2/3
  8301  006A  0087               	movwf	7
  8302  006B  3F40               	moviw [0]fsr1
  8303  006C  00A4               	movwf	___aldiv@dividend
  8304  006D  3F41               	moviw [1]fsr1
  8305  006E  00A5               	movwf	___aldiv@dividend+1
  8306  006F  3F42               	moviw [2]fsr1
  8307  0070  00A6               	movwf	___aldiv@dividend+2
  8308  0071  3F43               	moviw [3]fsr1
  8309  0072  00A7               	movwf	___aldiv@dividend+3
  8310  0073  3196  265B  3180   	fcall	___aldiv
  8311  0076  3000               	movlw	0
  8312  0077  0720               	addwf	?___aldiv,w
  8313  0078  0021               	movlb	1	; select bank1
  8314  0079  00C9               	movwf	compensate_pressure@var1^(0+128)
  8315  007A  3006               	movlw	6
  8316  007B  0020               	movlb	0	; select bank0
  8317  007C  3D21               	addwfc	?___aldiv+1,w
  8318  007D  0021               	movlb	1	; select bank1
  8319  007E  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
  8320  007F  30FF               	movlw	255
  8321  0080  0020               	movlb	0	; select bank0
  8322  0081  3D22               	addwfc	?___aldiv+2,w
  8323  0082  0021               	movlb	1	; select bank1
  8324  0083  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
  8325  0084  30FF               	movlw	255
  8326  0085  0020               	movlb	0	; select bank0
  8327  0086  3D23               	addwfc	?___aldiv+3,w
  8328  0087  0021               	movlb	1	; select bank1
  8329  0088  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
  8330                           
  8331                           ;BME280_driver/bme280.c: 1222:     var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t
      +                          )calib_data->dig_P6);
  8332  0089  3000               	movlw	0
  8333  008A  0020               	movlb	0	; select bank0
  8334  008B  00A3               	movwf	___aldiv@divisor+3
  8335  008C  3000               	movlw	0
  8336  008D  00A2               	movwf	___aldiv@divisor+2
  8337  008E  3000               	movlw	0
  8338  008F  00A1               	movwf	___aldiv@divisor+1
  8339  0090  3004               	movlw	4
  8340  0091  00A0               	movwf	___aldiv@divisor
  8341  0092  0021               	movlb	1	; select bank1
  8342  0093  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8343  0094  0020               	movlb	0	; select bank0
  8344  0095  00A7               	movwf	___aldiv@dividend+3
  8345  0096  0021               	movlb	1	; select bank1
  8346  0097  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8347  0098  0020               	movlb	0	; select bank0
  8348  0099  00A6               	movwf	___aldiv@dividend+2
  8349  009A  0021               	movlb	1	; select bank1
  8350  009B  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8351  009C  0020               	movlb	0	; select bank0
  8352  009D  00A5               	movwf	___aldiv@dividend+1
  8353  009E  0021               	movlb	1	; select bank1
  8354  009F  0849               	movf	compensate_pressure@var1^(0+128),w
  8355  00A0  0020               	movlb	0	; select bank0
  8356  00A1  00A4               	movwf	___aldiv@dividend
  8357  00A2  3196  265B  3180   	fcall	___aldiv
  8358  00A5  0823               	movf	?___aldiv+3,w
  8359  00A6  00F3               	movwf	___lmul@multiplier+3
  8360  00A7  0822               	movf	?___aldiv+2,w
  8361  00A8  00F2               	movwf	___lmul@multiplier+2
  8362  00A9  0821               	movf	?___aldiv+1,w
  8363  00AA  00F1               	movwf	___lmul@multiplier+1
  8364  00AB  0820               	movf	?___aldiv,w
  8365  00AC  00F0               	movwf	___lmul@multiplier
  8366  00AD  3000               	movlw	0
  8367  00AE  00A3               	movwf	___aldiv@divisor+3
  8368  00AF  3000               	movlw	0
  8369  00B0  00A2               	movwf	___aldiv@divisor+2
  8370  00B1  3000               	movlw	0
  8371  00B2  00A1               	movwf	___aldiv@divisor+1
  8372  00B3  3004               	movlw	4
  8373  00B4  00A0               	movwf	___aldiv@divisor
  8374  00B5  0021               	movlb	1	; select bank1
  8375  00B6  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8376  00B7  0020               	movlb	0	; select bank0
  8377  00B8  00A7               	movwf	___aldiv@dividend+3
  8378  00B9  0021               	movlb	1	; select bank1
  8379  00BA  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8380  00BB  0020               	movlb	0	; select bank0
  8381  00BC  00A6               	movwf	___aldiv@dividend+2
  8382  00BD  0021               	movlb	1	; select bank1
  8383  00BE  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8384  00BF  0020               	movlb	0	; select bank0
  8385  00C0  00A5               	movwf	___aldiv@dividend+1
  8386  00C1  0021               	movlb	1	; select bank1
  8387  00C2  0849               	movf	compensate_pressure@var1^(0+128),w
  8388  00C3  0020               	movlb	0	; select bank0
  8389  00C4  00A4               	movwf	___aldiv@dividend
  8390  00C5  3196  265B  3180   	fcall	___aldiv
  8391  00C8  0823               	movf	?___aldiv+3,w
  8392  00C9  00F7               	movwf	___lmul@multiplicand+3
  8393  00CA  0822               	movf	?___aldiv+2,w
  8394  00CB  00F6               	movwf	___lmul@multiplicand+2
  8395  00CC  0821               	movf	?___aldiv+1,w
  8396  00CD  00F5               	movwf	___lmul@multiplicand+1
  8397  00CE  0820               	movf	?___aldiv,w
  8398  00CF  00F4               	movwf	___lmul@multiplicand
  8399  00D0  319C  2491  3180   	fcall	___lmul
  8400  00D3  0873               	movf	?___lmul+3,w
  8401  00D4  0021               	movlb	1	; select bank1
  8402  00D5  00BC               	movwf	(_compensate_pressure$2263+3)^(0+128)
  8403  00D6  0872               	movf	?___lmul+2,w
  8404  00D7  00BB               	movwf	(_compensate_pressure$2263+2)^(0+128)
  8405  00D8  0871               	movf	?___lmul+1,w
  8406  00D9  00BA               	movwf	(_compensate_pressure$2263+1)^(0+128)
  8407  00DA  0870               	movf	?___lmul,w
  8408  00DB  00B9               	movwf	_compensate_pressure$2263^(0+128)
  8409                           
  8410                           ;BME280_driver/bme280.c: 1222:     var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t
      +                          )calib_data->dig_P6);
  8411  00DC  3000               	movlw	0
  8412  00DD  0020               	movlb	0	; select bank0
  8413  00DE  00A3               	movwf	___aldiv@divisor+3
  8414  00DF  3000               	movlw	0
  8415  00E0  00A2               	movwf	___aldiv@divisor+2
  8416  00E1  3008               	movlw	8
  8417  00E2  00A1               	movwf	___aldiv@divisor+1
  8418  00E3  3000               	movlw	0
  8419  00E4  00A0               	movwf	___aldiv@divisor
  8420  00E5  0021               	movlb	1	; select bank1
  8421  00E6  083C               	movf	(_compensate_pressure$2263+3)^(0+128),w
  8422  00E7  0020               	movlb	0	; select bank0
  8423  00E8  00A7               	movwf	___aldiv@dividend+3
  8424  00E9  0021               	movlb	1	; select bank1
  8425  00EA  083B               	movf	(_compensate_pressure$2263+2)^(0+128),w
  8426  00EB  0020               	movlb	0	; select bank0
  8427  00EC  00A6               	movwf	___aldiv@dividend+2
  8428  00ED  0021               	movlb	1	; select bank1
  8429  00EE  083A               	movf	(_compensate_pressure$2263+1)^(0+128),w
  8430  00EF  0020               	movlb	0	; select bank0
  8431  00F0  00A5               	movwf	___aldiv@dividend+1
  8432  00F1  0021               	movlb	1	; select bank1
  8433  00F2  0839               	movf	_compensate_pressure$2263^(0+128),w
  8434  00F3  0020               	movlb	0	; select bank0
  8435  00F4  00A4               	movwf	___aldiv@dividend
  8436  00F5  3196  265B  3180   	fcall	___aldiv
  8437  00F8  0823               	movf	?___aldiv+3,w
  8438  00F9  00F3               	movwf	___lmul@multiplier+3
  8439  00FA  0822               	movf	?___aldiv+2,w
  8440  00FB  00F2               	movwf	___lmul@multiplier+2
  8441  00FC  0821               	movf	?___aldiv+1,w
  8442  00FD  00F1               	movwf	___lmul@multiplier+1
  8443  00FE  0820               	movf	?___aldiv,w
  8444  00FF  00F0               	movwf	___lmul@multiplier
  8445  0100  082E               	movf	compensate_pressure@calib_data,w
  8446  0101  3E10               	addlw	16
  8447  0102  0086               	movwf	6
  8448  0103  3001               	movlw	1	; select bank2/3
  8449  0104  0087               	movwf	7
  8450  0105  3F40               	moviw [0]fsr1
  8451  0106  00B2               	movwf	??_compensate_pressure
  8452  0107  3F41               	moviw [1]fsr1
  8453  0108  00B3               	movwf	??_compensate_pressure+1
  8454  0109  0832               	movf	??_compensate_pressure,w
  8455  010A  00F4               	movwf	___lmul@multiplicand
  8456  010B  0833               	movf	??_compensate_pressure+1,w
  8457  010C  00F5               	movwf	___lmul@multiplicand+1
  8458  010D  0D89               	rlf	9,f
  8459  010E  3B89               	subwfb	9,f
  8460  010F  0989               	comf	9,f
  8461  0110  00F6               	movwf	___lmul@multiplicand+2
  8462  0111  00F7               	movwf	___lmul@multiplicand+3
  8463  0112  319C  2491  3180   	fcall	___lmul
  8464  0115  0873               	movf	?___lmul+3,w
  8465  0116  0021               	movlb	1	; select bank1
  8466  0117  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
  8467  0118  0872               	movf	?___lmul+2,w
  8468  0119  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
  8469  011A  0871               	movf	?___lmul+1,w
  8470  011B  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
  8471  011C  0870               	movf	?___lmul,w
  8472  011D  00C1               	movwf	compensate_pressure@var2^(0+128)
  8473                           
  8474                           ;BME280_driver/bme280.c: 1223:     var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5))
      +                           * 2);
  8475  011E  0841               	movf	compensate_pressure@var2^(0+128),w
  8476  011F  0020               	movlb	0	; select bank0
  8477  0120  00B2               	movwf	??_compensate_pressure
  8478  0121  0021               	movlb	1	; select bank1
  8479  0122  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
  8480  0123  0020               	movlb	0	; select bank0
  8481  0124  00B3               	movwf	??_compensate_pressure+1
  8482  0125  0021               	movlb	1	; select bank1
  8483  0126  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
  8484  0127  0020               	movlb	0	; select bank0
  8485  0128  00B4               	movwf	??_compensate_pressure+2
  8486  0129  0021               	movlb	1	; select bank1
  8487  012A  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
  8488  012B  0020               	movlb	0	; select bank0
  8489  012C  00B5               	movwf	??_compensate_pressure+3
  8490  012D  082E               	movf	compensate_pressure@calib_data,w
  8491  012E  3E0E               	addlw	14
  8492  012F  0086               	movwf	6
  8493  0130  3001               	movlw	1	; select bank2/3
  8494  0131  0087               	movwf	7
  8495  0132  3F40               	moviw [0]fsr1
  8496  0133  00B6               	movwf	??_compensate_pressure+4
  8497  0134  3F41               	moviw [1]fsr1
  8498  0135  00B7               	movwf	??_compensate_pressure+5
  8499  0136  0836               	movf	??_compensate_pressure+4,w
  8500  0137  00F0               	movwf	___lmul@multiplier
  8501  0138  0837               	movf	??_compensate_pressure+5,w
  8502  0139  00F1               	movwf	___lmul@multiplier+1
  8503  013A  0D89               	rlf	9,f
  8504  013B  3B89               	subwfb	9,f
  8505  013C  0989               	comf	9,f
  8506  013D  00F2               	movwf	___lmul@multiplier+2
  8507  013E  00F3               	movwf	___lmul@multiplier+3
  8508  013F  0021               	movlb	1	; select bank1
  8509  0140  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8510  0141  00F7               	movwf	___lmul@multiplicand+3
  8511  0142  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8512  0143  00F6               	movwf	___lmul@multiplicand+2
  8513  0144  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8514  0145  00F5               	movwf	___lmul@multiplicand+1
  8515  0146  0849               	movf	compensate_pressure@var1^(0+128),w
  8516  0147  00F4               	movwf	___lmul@multiplicand
  8517  0148  319C  2491  3180   	fcall	___lmul
  8518  014B  0870               	movf	?___lmul,w
  8519  014C  0020               	movlb	0	; select bank0
  8520  014D  00B8               	movwf	??_compensate_pressure+6
  8521  014E  0871               	movf	?___lmul+1,w
  8522  014F  00B9               	movwf	??_compensate_pressure+7
  8523  0150  0872               	movf	?___lmul+2,w
  8524  0151  00BA               	movwf	??_compensate_pressure+8
  8525  0152  0873               	movf	?___lmul+3,w
  8526  0153  00BB               	movwf	??_compensate_pressure+9
  8527  0154  3001               	movlw	1
  8528  0155                     u4685:	
  8529  0155  35B8               	lslf	??_compensate_pressure+6,f
  8530  0156  0DB9               	rlf	??_compensate_pressure+7,f
  8531  0157  0DBA               	rlf	??_compensate_pressure+8,f
  8532  0158  0DBB               	rlf	??_compensate_pressure+9,f
  8533  0159  0B89               	decfsz	9,f
  8534  015A  2955               	goto	u4685
  8535  015B  0838               	movf	??_compensate_pressure+6,w
  8536  015C  07B2               	addwf	??_compensate_pressure,f
  8537  015D  0839               	movf	??_compensate_pressure+7,w
  8538  015E  3DB3               	addwfc	??_compensate_pressure+1,f
  8539  015F  083A               	movf	??_compensate_pressure+8,w
  8540  0160  3DB4               	addwfc	??_compensate_pressure+2,f
  8541  0161  083B               	movf	??_compensate_pressure+9,w
  8542  0162  3DB5               	addwfc	??_compensate_pressure+3,f
  8543  0163  0835               	movf	??_compensate_pressure+3,w
  8544  0164  0021               	movlb	1	; select bank1
  8545  0165  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
  8546  0166  0020               	movlb	0	; select bank0
  8547  0167  0834               	movf	??_compensate_pressure+2,w
  8548  0168  0021               	movlb	1	; select bank1
  8549  0169  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
  8550  016A  0020               	movlb	0	; select bank0
  8551  016B  0833               	movf	??_compensate_pressure+1,w
  8552  016C  0021               	movlb	1	; select bank1
  8553  016D  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
  8554  016E  0020               	movlb	0	; select bank0
  8555  016F  0832               	movf	??_compensate_pressure,w
  8556  0170  0021               	movlb	1	; select bank1
  8557  0171  00C1               	movwf	compensate_pressure@var2^(0+128)
  8558                           
  8559                           ;BME280_driver/bme280.c: 1224:     var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 
      +                          65536);
  8560  0172  0020               	movlb	0	; select bank0
  8561  0173  082E               	movf	compensate_pressure@calib_data,w
  8562  0174  3E0C               	addlw	12
  8563  0175  0086               	movwf	6
  8564  0176  3001               	movlw	1	; select bank2/3
  8565  0177  0087               	movwf	7
  8566  0178  3F40               	moviw [0]fsr1
  8567  0179  00B2               	movwf	??_compensate_pressure
  8568  017A  3F41               	moviw [1]fsr1
  8569  017B  00B3               	movwf	??_compensate_pressure+1
  8570  017C  0832               	movf	??_compensate_pressure,w
  8571  017D  00B4               	movwf	??_compensate_pressure+2
  8572  017E  0833               	movf	??_compensate_pressure+1,w
  8573  017F  00B5               	movwf	??_compensate_pressure+3
  8574  0180  01B6               	clrf	??_compensate_pressure+4
  8575  0181  01B7               	clrf	??_compensate_pressure+5
  8576  0182  3010               	movlw	16
  8577  0183                     u4695:	
  8578  0183  35B4               	lslf	??_compensate_pressure+2,f
  8579  0184  0DB5               	rlf	??_compensate_pressure+3,f
  8580  0185  0DB6               	rlf	??_compensate_pressure+4,f
  8581  0186  0DB7               	rlf	??_compensate_pressure+5,f
  8582  0187  0B89               	decfsz	9,f
  8583  0188  2983               	goto	u4695
  8584  0189  3000               	movlw	0
  8585  018A  00A3               	movwf	___aldiv@divisor+3
  8586  018B  3000               	movlw	0
  8587  018C  00A2               	movwf	___aldiv@divisor+2
  8588  018D  3000               	movlw	0
  8589  018E  00A1               	movwf	___aldiv@divisor+1
  8590  018F  3004               	movlw	4
  8591  0190  00A0               	movwf	___aldiv@divisor
  8592  0191  0021               	movlb	1	; select bank1
  8593  0192  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
  8594  0193  0020               	movlb	0	; select bank0
  8595  0194  00A7               	movwf	___aldiv@dividend+3
  8596  0195  0021               	movlb	1	; select bank1
  8597  0196  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
  8598  0197  0020               	movlb	0	; select bank0
  8599  0198  00A6               	movwf	___aldiv@dividend+2
  8600  0199  0021               	movlb	1	; select bank1
  8601  019A  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
  8602  019B  0020               	movlb	0	; select bank0
  8603  019C  00A5               	movwf	___aldiv@dividend+1
  8604  019D  0021               	movlb	1	; select bank1
  8605  019E  0841               	movf	compensate_pressure@var2^(0+128),w
  8606  019F  0020               	movlb	0	; select bank0
  8607  01A0  00A4               	movwf	___aldiv@dividend
  8608  01A1  3196  265B  3180   	fcall	___aldiv
  8609  01A4  0820               	movf	?___aldiv,w
  8610  01A5  07B4               	addwf	??_compensate_pressure+2,f
  8611  01A6  0821               	movf	?___aldiv+1,w
  8612  01A7  3DB5               	addwfc	??_compensate_pressure+3,f
  8613  01A8  0822               	movf	?___aldiv+2,w
  8614  01A9  3DB6               	addwfc	??_compensate_pressure+4,f
  8615  01AA  0823               	movf	?___aldiv+3,w
  8616  01AB  3DB7               	addwfc	??_compensate_pressure+5,f
  8617  01AC  0837               	movf	??_compensate_pressure+5,w
  8618  01AD  0021               	movlb	1	; select bank1
  8619  01AE  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
  8620  01AF  0020               	movlb	0	; select bank0
  8621  01B0  0836               	movf	??_compensate_pressure+4,w
  8622  01B1  0021               	movlb	1	; select bank1
  8623  01B2  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
  8624  01B3  0020               	movlb	0	; select bank0
  8625  01B4  0835               	movf	??_compensate_pressure+3,w
  8626  01B5  0021               	movlb	1	; select bank1
  8627  01B6  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
  8628  01B7  0020               	movlb	0	; select bank0
  8629  01B8  0834               	movf	??_compensate_pressure+2,w
  8630  01B9  0021               	movlb	1	; select bank1
  8631  01BA  00C1               	movwf	compensate_pressure@var2^(0+128)
  8632                           
  8633                           ;BME280_driver/bme280.c: 1225:     var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4
      +                          )) / 8192)) / 8;
  8634  01BB  3000               	movlw	0
  8635  01BC  0020               	movlb	0	; select bank0
  8636  01BD  00A3               	movwf	___aldiv@divisor+3
  8637  01BE  3000               	movlw	0
  8638  01BF  00A2               	movwf	___aldiv@divisor+2
  8639  01C0  3000               	movlw	0
  8640  01C1  00A1               	movwf	___aldiv@divisor+1
  8641  01C2  3004               	movlw	4
  8642  01C3  00A0               	movwf	___aldiv@divisor
  8643  01C4  0021               	movlb	1	; select bank1
  8644  01C5  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8645  01C6  0020               	movlb	0	; select bank0
  8646  01C7  00A7               	movwf	___aldiv@dividend+3
  8647  01C8  0021               	movlb	1	; select bank1
  8648  01C9  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8649  01CA  0020               	movlb	0	; select bank0
  8650  01CB  00A6               	movwf	___aldiv@dividend+2
  8651  01CC  0021               	movlb	1	; select bank1
  8652  01CD  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8653  01CE  0020               	movlb	0	; select bank0
  8654  01CF  00A5               	movwf	___aldiv@dividend+1
  8655  01D0  0021               	movlb	1	; select bank1
  8656  01D1  0849               	movf	compensate_pressure@var1^(0+128),w
  8657  01D2  0020               	movlb	0	; select bank0
  8658  01D3  00A4               	movwf	___aldiv@dividend
  8659  01D4  3196  265B  3180   	fcall	___aldiv
  8660  01D7  0823               	movf	?___aldiv+3,w
  8661  01D8  00F3               	movwf	___lmul@multiplier+3
  8662  01D9  0822               	movf	?___aldiv+2,w
  8663  01DA  00F2               	movwf	___lmul@multiplier+2
  8664  01DB  0821               	movf	?___aldiv+1,w
  8665  01DC  00F1               	movwf	___lmul@multiplier+1
  8666  01DD  0820               	movf	?___aldiv,w
  8667  01DE  00F0               	movwf	___lmul@multiplier
  8668  01DF  3000               	movlw	0
  8669  01E0  00A3               	movwf	___aldiv@divisor+3
  8670  01E1  3000               	movlw	0
  8671  01E2  00A2               	movwf	___aldiv@divisor+2
  8672  01E3  3000               	movlw	0
  8673  01E4  00A1               	movwf	___aldiv@divisor+1
  8674  01E5  3004               	movlw	4
  8675  01E6  00A0               	movwf	___aldiv@divisor
  8676  01E7  0021               	movlb	1	; select bank1
  8677  01E8  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8678  01E9  0020               	movlb	0	; select bank0
  8679  01EA  00A7               	movwf	___aldiv@dividend+3
  8680  01EB  0021               	movlb	1	; select bank1
  8681  01EC  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8682  01ED  0020               	movlb	0	; select bank0
  8683  01EE  00A6               	movwf	___aldiv@dividend+2
  8684  01EF  0021               	movlb	1	; select bank1
  8685  01F0  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8686  01F1  0020               	movlb	0	; select bank0
  8687  01F2  00A5               	movwf	___aldiv@dividend+1
  8688  01F3  0021               	movlb	1	; select bank1
  8689  01F4  0849               	movf	compensate_pressure@var1^(0+128),w
  8690  01F5  0020               	movlb	0	; select bank0
  8691  01F6  00A4               	movwf	___aldiv@dividend
  8692  01F7  3196  265B  3180   	fcall	___aldiv
  8693  01FA  0823               	movf	?___aldiv+3,w
  8694  01FB  00F7               	movwf	___lmul@multiplicand+3
  8695  01FC  0822               	movf	?___aldiv+2,w
  8696  01FD  00F6               	movwf	___lmul@multiplicand+2
  8697  01FE  0821               	movf	?___aldiv+1,w
  8698  01FF  00F5               	movwf	___lmul@multiplicand+1
  8699  0200  0820               	movf	?___aldiv,w
  8700  0201  00F4               	movwf	___lmul@multiplicand
  8701  0202  319C  2491  3180   	fcall	___lmul
  8702  0205  0873               	movf	?___lmul+3,w
  8703  0206  0021               	movlb	1	; select bank1
  8704  0207  00BC               	movwf	(_compensate_pressure$2263+3)^(0+128)
  8705  0208  0872               	movf	?___lmul+2,w
  8706  0209  00BB               	movwf	(_compensate_pressure$2263+2)^(0+128)
  8707  020A  0871               	movf	?___lmul+1,w
  8708  020B  00BA               	movwf	(_compensate_pressure$2263+1)^(0+128)
  8709  020C  0870               	movf	?___lmul,w
  8710  020D  00B9               	movwf	_compensate_pressure$2263^(0+128)
  8711                           
  8712                           ;BME280_driver/bme280.c: 1225:     var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4
      +                          )) / 8192)) / 8;
  8713  020E  0020               	movlb	0	; select bank0
  8714  020F  082E               	movf	compensate_pressure@calib_data,w
  8715  0210  3E0A               	addlw	10
  8716  0211  0086               	movwf	6
  8717  0212  3001               	movlw	1	; select bank2/3
  8718  0213  0087               	movwf	7
  8719  0214  3F40               	moviw [0]fsr1
  8720  0215  00B2               	movwf	??_compensate_pressure
  8721  0216  3F41               	moviw [1]fsr1
  8722  0217  00B3               	movwf	??_compensate_pressure+1
  8723  0218  0832               	movf	??_compensate_pressure,w
  8724  0219  00F0               	movwf	___lmul@multiplier
  8725  021A  0833               	movf	??_compensate_pressure+1,w
  8726  021B  00F1               	movwf	___lmul@multiplier+1
  8727  021C  0D89               	rlf	9,f
  8728  021D  3B89               	subwfb	9,f
  8729  021E  0989               	comf	9,f
  8730  021F  00F2               	movwf	___lmul@multiplier+2
  8731  0220  00F3               	movwf	___lmul@multiplier+3
  8732  0221  3000               	movlw	0
  8733  0222  00A3               	movwf	___aldiv@divisor+3
  8734  0223  3000               	movlw	0
  8735  0224  00A2               	movwf	___aldiv@divisor+2
  8736  0225  3020               	movlw	32
  8737  0226  00A1               	movwf	___aldiv@divisor+1
  8738  0227  3000               	movlw	0
  8739  0228  00A0               	movwf	___aldiv@divisor
  8740  0229  0021               	movlb	1	; select bank1
  8741  022A  083C               	movf	(_compensate_pressure$2263+3)^(0+128),w
  8742  022B  0020               	movlb	0	; select bank0
  8743  022C  00A7               	movwf	___aldiv@dividend+3
  8744  022D  0021               	movlb	1	; select bank1
  8745  022E  083B               	movf	(_compensate_pressure$2263+2)^(0+128),w
  8746  022F  0020               	movlb	0	; select bank0
  8747  0230  00A6               	movwf	___aldiv@dividend+2
  8748  0231  0021               	movlb	1	; select bank1
  8749  0232  083A               	movf	(_compensate_pressure$2263+1)^(0+128),w
  8750  0233  0020               	movlb	0	; select bank0
  8751  0234  00A5               	movwf	___aldiv@dividend+1
  8752  0235  0021               	movlb	1	; select bank1
  8753  0236  0839               	movf	_compensate_pressure$2263^(0+128),w
  8754  0237  0020               	movlb	0	; select bank0
  8755  0238  00A4               	movwf	___aldiv@dividend
  8756  0239  3196  265B  3180   	fcall	___aldiv
  8757  023C  0823               	movf	?___aldiv+3,w
  8758  023D  00F7               	movwf	___lmul@multiplicand+3
  8759  023E  0822               	movf	?___aldiv+2,w
  8760  023F  00F6               	movwf	___lmul@multiplicand+2
  8761  0240  0821               	movf	?___aldiv+1,w
  8762  0241  00F5               	movwf	___lmul@multiplicand+1
  8763  0242  0820               	movf	?___aldiv,w
  8764  0243  00F4               	movwf	___lmul@multiplicand
  8765  0244  319C  2491  3180   	fcall	___lmul
  8766  0247  0873               	movf	?___lmul+3,w
  8767  0248  0021               	movlb	1	; select bank1
  8768  0249  00AF               	movwf	(_compensate_pressure$2264+3)^(0+128)
  8769  024A  0872               	movf	?___lmul+2,w
  8770  024B  00AE               	movwf	(_compensate_pressure$2264+2)^(0+128)
  8771  024C  0871               	movf	?___lmul+1,w
  8772  024D  00AD               	movwf	(_compensate_pressure$2264+1)^(0+128)
  8773  024E  0870               	movf	?___lmul,w
  8774  024F  00AC               	movwf	_compensate_pressure$2264^(0+128)
  8775                           
  8776                           ;BME280_driver/bme280.c: 1225:     var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4
      +                          )) / 8192)) / 8;
  8777  0250  3000               	movlw	0
  8778  0251  0020               	movlb	0	; select bank0
  8779  0252  00A3               	movwf	___aldiv@divisor+3
  8780  0253  3000               	movlw	0
  8781  0254  00A2               	movwf	___aldiv@divisor+2
  8782  0255  3000               	movlw	0
  8783  0256  00A1               	movwf	___aldiv@divisor+1
  8784  0257  3008               	movlw	8
  8785  0258  00A0               	movwf	___aldiv@divisor
  8786  0259  0021               	movlb	1	; select bank1
  8787  025A  082F               	movf	(_compensate_pressure$2264+3)^(0+128),w
  8788  025B  0020               	movlb	0	; select bank0
  8789  025C  00A7               	movwf	___aldiv@dividend+3
  8790  025D  0021               	movlb	1	; select bank1
  8791  025E  082E               	movf	(_compensate_pressure$2264+2)^(0+128),w
  8792  025F  0020               	movlb	0	; select bank0
  8793  0260  00A6               	movwf	___aldiv@dividend+2
  8794  0261  0021               	movlb	1	; select bank1
  8795  0262  082D               	movf	(_compensate_pressure$2264+1)^(0+128),w
  8796  0263  0020               	movlb	0	; select bank0
  8797  0264  00A5               	movwf	___aldiv@dividend+1
  8798  0265  0021               	movlb	1	; select bank1
  8799  0266  082C               	movf	_compensate_pressure$2264^(0+128),w
  8800  0267  0020               	movlb	0	; select bank0
  8801  0268  00A4               	movwf	___aldiv@dividend
  8802  0269  3196  265B  3180   	fcall	___aldiv
  8803  026C  0823               	movf	?___aldiv+3,w
  8804  026D  0021               	movlb	1	; select bank1
  8805  026E  00A3               	movwf	(compensate_pressure@var3+3)^(0+128)
  8806  026F  0020               	movlb	0	; select bank0
  8807  0270  0822               	movf	?___aldiv+2,w
  8808  0271  0021               	movlb	1	; select bank1
  8809  0272  00A2               	movwf	(compensate_pressure@var3+2)^(0+128)
  8810  0273  0020               	movlb	0	; select bank0
  8811  0274  0821               	movf	?___aldiv+1,w
  8812  0275  0021               	movlb	1	; select bank1
  8813  0276  00A1               	movwf	(compensate_pressure@var3+1)^(0+128)
  8814  0277  0020               	movlb	0	; select bank0
  8815  0278  0820               	movf	?___aldiv,w
  8816  0279  0021               	movlb	1	; select bank1
  8817  027A  00A0               	movwf	compensate_pressure@var3^(0+128)
  8818                           
  8819                           ;BME280_driver/bme280.c: 1226:     var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
  8820  027B  3000               	movlw	0
  8821  027C  0020               	movlb	0	; select bank0
  8822  027D  00A3               	movwf	___aldiv@divisor+3
  8823  027E  3000               	movlw	0
  8824  027F  00A2               	movwf	___aldiv@divisor+2
  8825  0280  3000               	movlw	0
  8826  0281  00A1               	movwf	___aldiv@divisor+1
  8827  0282  3002               	movlw	2
  8828  0283  00A0               	movwf	___aldiv@divisor
  8829  0284  082E               	movf	compensate_pressure@calib_data,w
  8830  0285  3E08               	addlw	8
  8831  0286  0086               	movwf	6
  8832  0287  3001               	movlw	1	; select bank2/3
  8833  0288  0087               	movwf	7
  8834  0289  3F40               	moviw [0]fsr1
  8835  028A  00B2               	movwf	??_compensate_pressure
  8836  028B  3F41               	moviw [1]fsr1
  8837  028C  00B3               	movwf	??_compensate_pressure+1
  8838  028D  0832               	movf	??_compensate_pressure,w
  8839  028E  00F0               	movwf	___lmul@multiplier
  8840  028F  0833               	movf	??_compensate_pressure+1,w
  8841  0290  00F1               	movwf	___lmul@multiplier+1
  8842  0291  0D89               	rlf	9,f
  8843  0292  3B89               	subwfb	9,f
  8844  0293  0989               	comf	9,f
  8845  0294  00F2               	movwf	___lmul@multiplier+2
  8846  0295  00F3               	movwf	___lmul@multiplier+3
  8847  0296  0021               	movlb	1	; select bank1
  8848  0297  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8849  0298  00F7               	movwf	___lmul@multiplicand+3
  8850  0299  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8851  029A  00F6               	movwf	___lmul@multiplicand+2
  8852  029B  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8853  029C  00F5               	movwf	___lmul@multiplicand+1
  8854  029D  0849               	movf	compensate_pressure@var1^(0+128),w
  8855  029E  00F4               	movwf	___lmul@multiplicand
  8856  029F  319C  2491  3180   	fcall	___lmul
  8857  02A2  0873               	movf	?___lmul+3,w
  8858  02A3  0020               	movlb	0	; select bank0
  8859  02A4  00A7               	movwf	___aldiv@dividend+3
  8860  02A5  0872               	movf	?___lmul+2,w
  8861  02A6  00A6               	movwf	___aldiv@dividend+2
  8862  02A7  0871               	movf	?___lmul+1,w
  8863  02A8  00A5               	movwf	___aldiv@dividend+1
  8864  02A9  0870               	movf	?___lmul,w
  8865  02AA  00A4               	movwf	___aldiv@dividend
  8866  02AB  3196  265B  3180   	fcall	___aldiv
  8867  02AE  0823               	movf	?___aldiv+3,w
  8868  02AF  0021               	movlb	1	; select bank1
  8869  02B0  00A7               	movwf	(compensate_pressure@var4+3)^(0+128)
  8870  02B1  0020               	movlb	0	; select bank0
  8871  02B2  0822               	movf	?___aldiv+2,w
  8872  02B3  0021               	movlb	1	; select bank1
  8873  02B4  00A6               	movwf	(compensate_pressure@var4+2)^(0+128)
  8874  02B5  0020               	movlb	0	; select bank0
  8875  02B6  0821               	movf	?___aldiv+1,w
  8876  02B7  0021               	movlb	1	; select bank1
  8877  02B8  00A5               	movwf	(compensate_pressure@var4+1)^(0+128)
  8878  02B9  0020               	movlb	0	; select bank0
  8879  02BA  0820               	movf	?___aldiv,w
  8880  02BB  0021               	movlb	1	; select bank1
  8881  02BC  00A4               	movwf	compensate_pressure@var4^(0+128)
  8882                           
  8883                           ;BME280_driver/bme280.c: 1227:     var1 = (var3 + var4) / 262144;
  8884  02BD  3000               	movlw	0
  8885  02BE  0020               	movlb	0	; select bank0
  8886  02BF  00A3               	movwf	___aldiv@divisor+3
  8887  02C0  3004               	movlw	4
  8888  02C1  00A2               	movwf	___aldiv@divisor+2
  8889  02C2  3000               	movlw	0
  8890  02C3  00A1               	movwf	___aldiv@divisor+1
  8891  02C4  3000               	movlw	0
  8892  02C5  00A0               	movwf	___aldiv@divisor
  8893  02C6  0021               	movlb	1	; select bank1
  8894  02C7  0820               	movf	compensate_pressure@var3^(0+128),w
  8895  02C8  0724               	addwf	compensate_pressure@var4^(0+128),w
  8896  02C9  0020               	movlb	0	; select bank0
  8897  02CA  00B2               	movwf	??_compensate_pressure
  8898  02CB  0021               	movlb	1	; select bank1
  8899  02CC  0821               	movf	(compensate_pressure@var3+1)^(0+128),w
  8900  02CD  3D25               	addwfc	(compensate_pressure@var4+1)^(0+128),w
  8901  02CE  0020               	movlb	0	; select bank0
  8902  02CF  00B3               	movwf	??_compensate_pressure+1
  8903  02D0  0021               	movlb	1	; select bank1
  8904  02D1  0822               	movf	(compensate_pressure@var3+2)^(0+128),w
  8905  02D2  3D26               	addwfc	(compensate_pressure@var4+2)^(0+128),w
  8906  02D3  0020               	movlb	0	; select bank0
  8907  02D4  00B4               	movwf	??_compensate_pressure+2
  8908  02D5  0021               	movlb	1	; select bank1
  8909  02D6  0823               	movf	(compensate_pressure@var3+3)^(0+128),w
  8910  02D7  3D27               	addwfc	(compensate_pressure@var4+3)^(0+128),w
  8911  02D8  0020               	movlb	0	; select bank0
  8912  02D9  00B5               	movwf	??_compensate_pressure+3
  8913  02DA  0835               	movf	??_compensate_pressure+3,w
  8914  02DB  00A7               	movwf	___aldiv@dividend+3
  8915  02DC  0834               	movf	??_compensate_pressure+2,w
  8916  02DD  00A6               	movwf	___aldiv@dividend+2
  8917  02DE  0833               	movf	??_compensate_pressure+1,w
  8918  02DF  00A5               	movwf	___aldiv@dividend+1
  8919  02E0  0832               	movf	??_compensate_pressure,w
  8920  02E1  00A4               	movwf	___aldiv@dividend
  8921  02E2  3196  265B  3180   	fcall	___aldiv
  8922  02E5  0823               	movf	?___aldiv+3,w
  8923  02E6  0021               	movlb	1	; select bank1
  8924  02E7  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
  8925  02E8  0020               	movlb	0	; select bank0
  8926  02E9  0822               	movf	?___aldiv+2,w
  8927  02EA  0021               	movlb	1	; select bank1
  8928  02EB  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
  8929  02EC  0020               	movlb	0	; select bank0
  8930  02ED  0821               	movf	?___aldiv+1,w
  8931  02EE  0021               	movlb	1	; select bank1
  8932  02EF  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
  8933  02F0  0020               	movlb	0	; select bank0
  8934  02F1  0820               	movf	?___aldiv,w
  8935  02F2  0021               	movlb	1	; select bank1
  8936  02F3  00C9               	movwf	compensate_pressure@var1^(0+128)
  8937                           
  8938                           ;BME280_driver/bme280.c: 1228:     var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_
      +                          P1)) / 32768;
  8939  02F4  3000               	movlw	0
  8940  02F5  0020               	movlb	0	; select bank0
  8941  02F6  00A3               	movwf	___aldiv@divisor+3
  8942  02F7  3000               	movlw	0
  8943  02F8  00A2               	movwf	___aldiv@divisor+2
  8944  02F9  3080               	movlw	128
  8945  02FA  00A1               	movwf	___aldiv@divisor+1
  8946  02FB  3000               	movlw	0
  8947  02FC  00A0               	movwf	___aldiv@divisor
  8948  02FD  3000               	movlw	0
  8949  02FE  0021               	movlb	1	; select bank1
  8950  02FF  0749               	addwf	compensate_pressure@var1^(0+128),w
  8951  0300  00F0               	movwf	___lmul@multiplier
  8952  0301  3080               	movlw	128
  8953  0302  3D4A               	addwfc	(compensate_pressure@var1+1)^(0+128),w
  8954  0303  00F1               	movwf	___lmul@multiplier+1
  8955  0304  3000               	movlw	0
  8956  0305  3D4B               	addwfc	(compensate_pressure@var1+2)^(0+128),w
  8957  0306  00F2               	movwf	___lmul@multiplier+2
  8958  0307  3000               	movlw	0
  8959  0308  3D4C               	addwfc	(compensate_pressure@var1+3)^(0+128),w
  8960  0309  00F3               	movwf	___lmul@multiplier+3
  8961  030A  0020               	movlb	0	; select bank0
  8962  030B  082E               	movf	compensate_pressure@calib_data,w
  8963  030C  3E06               	addlw	6
  8964  030D  0086               	movwf	6
  8965  030E  3001               	movlw	1	; select bank2/3
  8966  030F  0087               	movwf	7
  8967  0310  3F40               	moviw [0]fsr1
  8968  0311  00B2               	movwf	??_compensate_pressure
  8969  0312  3F41               	moviw [1]fsr1
  8970  0313  00B3               	movwf	??_compensate_pressure+1
  8971  0314  0832               	movf	??_compensate_pressure,w
  8972  0315  00F4               	movwf	___lmul@multiplicand
  8973  0316  0833               	movf	??_compensate_pressure+1,w
  8974  0317  00F5               	movwf	___lmul@multiplicand+1
  8975  0318  01F6               	clrf	___lmul@multiplicand+2
  8976  0319  01F7               	clrf	___lmul@multiplicand+3
  8977  031A  319C  2491  3180   	fcall	___lmul
  8978  031D  0873               	movf	?___lmul+3,w
  8979  031E  0020               	movlb	0	; select bank0
  8980  031F  00A7               	movwf	___aldiv@dividend+3
  8981  0320  0872               	movf	?___lmul+2,w
  8982  0321  00A6               	movwf	___aldiv@dividend+2
  8983  0322  0871               	movf	?___lmul+1,w
  8984  0323  00A5               	movwf	___aldiv@dividend+1
  8985  0324  0870               	movf	?___lmul,w
  8986  0325  00A4               	movwf	___aldiv@dividend
  8987  0326  3196  265B  3180   	fcall	___aldiv
  8988  0329  0823               	movf	?___aldiv+3,w
  8989  032A  0021               	movlb	1	; select bank1
  8990  032B  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
  8991  032C  0020               	movlb	0	; select bank0
  8992  032D  0822               	movf	?___aldiv+2,w
  8993  032E  0021               	movlb	1	; select bank1
  8994  032F  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
  8995  0330  0020               	movlb	0	; select bank0
  8996  0331  0821               	movf	?___aldiv+1,w
  8997  0332  0021               	movlb	1	; select bank1
  8998  0333  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
  8999  0334  0020               	movlb	0	; select bank0
  9000  0335  0820               	movf	?___aldiv,w
  9001  0336  0021               	movlb	1	; select bank1
  9002  0337  00C9               	movwf	compensate_pressure@var1^(0+128)
  9003                           
  9004                           ;BME280_driver/bme280.c: 1231:     if (var1)
  9005  0338  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  9006  0339  044B               	iorwf	(compensate_pressure@var1+2)^(0+128),w
  9007  033A  044A               	iorwf	(compensate_pressure@var1+1)^(0+128),w
  9008  033B  0449               	iorwf	compensate_pressure@var1^(0+128),w
  9009  033C  1903               	skipnz
  9010  033D  2D70               	goto	l4340
  9011                           
  9012                           ;BME280_driver/bme280.c: 1232:     {;BME280_driver/bme280.c: 1233:         var5 = (uint3
      +                          2_t)((uint32_t)1048576) - uncomp_data->pressure;
  9013  033E  0834               	movf	compensate_pressure@uncomp_data^(0+128),w
  9014  033F  0086               	movwf	6
  9015  0340  0187               	clrf	7
  9016  0341  3F40               	moviw [0]fsr1
  9017  0342  0020               	movlb	0	; select bank0
  9018  0343  00B2               	movwf	??_compensate_pressure
  9019  0344  3F41               	moviw [1]fsr1
  9020  0345  00B3               	movwf	??_compensate_pressure+1
  9021  0346  3F42               	moviw [2]fsr1
  9022  0347  00B4               	movwf	??_compensate_pressure+2
  9023  0348  3F43               	moviw [3]fsr1
  9024  0349  00B5               	movwf	??_compensate_pressure+3
  9025  034A  3000               	movlw	0
  9026  034B  00B6               	movwf	??_compensate_pressure+4
  9027  034C  3000               	movlw	0
  9028  034D  00B7               	movwf	??_compensate_pressure+5
  9029  034E  3010               	movlw	16
  9030  034F  00B8               	movwf	??_compensate_pressure+6
  9031  0350  3000               	movlw	0
  9032  0351  00B9               	movwf	??_compensate_pressure+7
  9033  0352  0832               	movf	??_compensate_pressure,w
  9034  0353  02B6               	subwf	??_compensate_pressure+4,f
  9035  0354  0833               	movf	??_compensate_pressure+1,w
  9036  0355  3BB7               	subwfb	??_compensate_pressure+5,f
  9037  0356  0834               	movf	??_compensate_pressure+2,w
  9038  0357  3BB8               	subwfb	??_compensate_pressure+6,f
  9039  0358  0835               	movf	??_compensate_pressure+3,w
  9040  0359  3BB9               	subwfb	??_compensate_pressure+7,f
  9041  035A  0839               	movf	??_compensate_pressure+7,w
  9042  035B  0021               	movlb	1	; select bank1
  9043  035C  00AB               	movwf	(compensate_pressure@var5+3)^(0+128)
  9044  035D  0020               	movlb	0	; select bank0
  9045  035E  0838               	movf	??_compensate_pressure+6,w
  9046  035F  0021               	movlb	1	; select bank1
  9047  0360  00AA               	movwf	(compensate_pressure@var5+2)^(0+128)
  9048  0361  0020               	movlb	0	; select bank0
  9049  0362  0837               	movf	??_compensate_pressure+5,w
  9050  0363  0021               	movlb	1	; select bank1
  9051  0364  00A9               	movwf	(compensate_pressure@var5+1)^(0+128)
  9052  0365  0020               	movlb	0	; select bank0
  9053  0366  0836               	movf	??_compensate_pressure+4,w
  9054  0367  0021               	movlb	1	; select bank1
  9055  0368  00A8               	movwf	compensate_pressure@var5^(0+128)
  9056                           
  9057                           ;BME280_driver/bme280.c: 1234:         pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4
      +                          096))) * 3125;
  9058  0369  3000               	movlw	0
  9059  036A  0020               	movlb	0	; select bank0
  9060  036B  00A3               	movwf	___aldiv@divisor+3
  9061  036C  3000               	movlw	0
  9062  036D  00A2               	movwf	___aldiv@divisor+2
  9063  036E  3010               	movlw	16
  9064  036F  00A1               	movwf	___aldiv@divisor+1
  9065  0370  3000               	movlw	0
  9066  0371  00A0               	movwf	___aldiv@divisor
  9067  0372  0021               	movlb	1	; select bank1
  9068  0373  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
  9069  0374  0020               	movlb	0	; select bank0
  9070  0375  00A7               	movwf	___aldiv@dividend+3
  9071  0376  0021               	movlb	1	; select bank1
  9072  0377  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
  9073  0378  0020               	movlb	0	; select bank0
  9074  0379  00A6               	movwf	___aldiv@dividend+2
  9075  037A  0021               	movlb	1	; select bank1
  9076  037B  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
  9077  037C  0020               	movlb	0	; select bank0
  9078  037D  00A5               	movwf	___aldiv@dividend+1
  9079  037E  0021               	movlb	1	; select bank1
  9080  037F  0841               	movf	compensate_pressure@var2^(0+128),w
  9081  0380  0020               	movlb	0	; select bank0
  9082  0381  00A4               	movwf	___aldiv@dividend
  9083  0382  3196  265B  3180   	fcall	___aldiv
  9084  0385  0820               	movf	?___aldiv,w
  9085  0386  0021               	movlb	1	; select bank1
  9086  0387  0228               	subwf	compensate_pressure@var5^(0+128),w
  9087  0388  0020               	movlb	0	; select bank0
  9088  0389  00B2               	movwf	??_compensate_pressure
  9089  038A  0821               	movf	?___aldiv+1,w
  9090  038B  0021               	movlb	1	; select bank1
  9091  038C  3B29               	subwfb	(compensate_pressure@var5+1)^(0+128),w
  9092  038D  0020               	movlb	0	; select bank0
  9093  038E  00B3               	movwf	??_compensate_pressure+1
  9094  038F  0822               	movf	?___aldiv+2,w
  9095  0390  0021               	movlb	1	; select bank1
  9096  0391  3B2A               	subwfb	(compensate_pressure@var5+2)^(0+128),w
  9097  0392  0020               	movlb	0	; select bank0
  9098  0393  00B4               	movwf	??_compensate_pressure+2
  9099  0394  0823               	movf	?___aldiv+3,w
  9100  0395  0021               	movlb	1	; select bank1
  9101  0396  3B2B               	subwfb	(compensate_pressure@var5+3)^(0+128),w
  9102  0397  0020               	movlb	0	; select bank0
  9103  0398  00B5               	movwf	??_compensate_pressure+3
  9104  0399  0835               	movf	??_compensate_pressure+3,w
  9105  039A  00F3               	movwf	___lmul@multiplier+3
  9106  039B  0834               	movf	??_compensate_pressure+2,w
  9107  039C  00F2               	movwf	___lmul@multiplier+2
  9108  039D  0833               	movf	??_compensate_pressure+1,w
  9109  039E  00F1               	movwf	___lmul@multiplier+1
  9110  039F  0832               	movf	??_compensate_pressure,w
  9111  03A0  00F0               	movwf	___lmul@multiplier
  9112  03A1  3000               	movlw	0
  9113  03A2  00F7               	movwf	___lmul@multiplicand+3
  9114  03A3  3000               	movlw	0
  9115  03A4  00F6               	movwf	___lmul@multiplicand+2
  9116  03A5  300C               	movlw	12
  9117  03A6  00F5               	movwf	___lmul@multiplicand+1
  9118  03A7  3035               	movlw	53
  9119  03A8  00F4               	movwf	___lmul@multiplicand
  9120  03A9  319C  2491  3180   	fcall	___lmul
  9121  03AC  0873               	movf	?___lmul+3,w
  9122  03AD  0021               	movlb	1	; select bank1
  9123  03AE  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9124  03AF  0872               	movf	?___lmul+2,w
  9125  03B0  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9126  03B1  0871               	movf	?___lmul+1,w
  9127  03B2  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9128  03B3  0870               	movf	?___lmul,w
  9129  03B4  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9130                           
  9131                           ;BME280_driver/bme280.c: 1235:         if (pressure < 0x80000000)
  9132  03B5  3080               	movlw	128
  9133  03B6  0248               	subwf	(compensate_pressure@pressure+3)^(0+128),w
  9134  03B7  1803               	btfsc	3,0
  9135  03B8  2BD6               	goto	l4330
  9136                           
  9137                           ;BME280_driver/bme280.c: 1236:         {;BME280_driver/bme280.c: 1237:             press
      +                          ure = (pressure << 1) / ((uint32_t)var1);
  9138  03B9  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  9139  03BA  00F3               	movwf	___lldiv@divisor+3
  9140  03BB  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  9141  03BC  00F2               	movwf	___lldiv@divisor+2
  9142  03BD  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  9143  03BE  00F1               	movwf	___lldiv@divisor+1
  9144  03BF  0849               	movf	compensate_pressure@var1^(0+128),w
  9145  03C0  00F0               	movwf	___lldiv@divisor
  9146  03C1  3545               	lslf	compensate_pressure@pressure^(0+128),w
  9147  03C2  00F4               	movwf	___lldiv@dividend
  9148  03C3  0D46               	rlf	(compensate_pressure@pressure+1)^(0+128),w
  9149  03C4  00F5               	movwf	___lldiv@dividend+1
  9150  03C5  0D47               	rlf	(compensate_pressure@pressure+2)^(0+128),w
  9151  03C6  00F6               	movwf	___lldiv@dividend+2
  9152  03C7  0D48               	rlf	(compensate_pressure@pressure+3)^(0+128),w
  9153  03C8  00F7               	movwf	___lldiv@dividend+3
  9154  03C9  3191  2136  3180   	fcall	___lldiv
  9155  03CC  0873               	movf	?___lldiv+3,w
  9156  03CD  0021               	movlb	1	; select bank1
  9157  03CE  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9158  03CF  0872               	movf	?___lldiv+2,w
  9159  03D0  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9160  03D1  0871               	movf	?___lldiv+1,w
  9161  03D2  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9162  03D3  0870               	movf	?___lldiv,w
  9163  03D4  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9164                           
  9165                           ;BME280_driver/bme280.c: 1238:         }
  9166  03D5  2BF2               	goto	l192
  9167  03D6                     l4330:	
  9168                           
  9169                           ;BME280_driver/bme280.c: 1240:         {;BME280_driver/bme280.c: 1241:             press
      +                          ure = (pressure / (uint32_t)var1) * 2;
  9170  03D6  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  9171  03D7  00F3               	movwf	___lldiv@divisor+3
  9172  03D8  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  9173  03D9  00F2               	movwf	___lldiv@divisor+2
  9174  03DA  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  9175  03DB  00F1               	movwf	___lldiv@divisor+1
  9176  03DC  0849               	movf	compensate_pressure@var1^(0+128),w
  9177  03DD  00F0               	movwf	___lldiv@divisor
  9178  03DE  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9179  03DF  00F7               	movwf	___lldiv@dividend+3
  9180  03E0  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9181  03E1  00F6               	movwf	___lldiv@dividend+2
  9182  03E2  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9183  03E3  00F5               	movwf	___lldiv@dividend+1
  9184  03E4  0845               	movf	compensate_pressure@pressure^(0+128),w
  9185  03E5  00F4               	movwf	___lldiv@dividend
  9186  03E6  3191  2136  3180   	fcall	___lldiv
  9187  03E9  3570               	lslf	?___lldiv,w
  9188  03EA  0021               	movlb	1	; select bank1
  9189  03EB  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9190  03EC  0D71               	rlf	?___lldiv+1,w
  9191  03ED  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9192  03EE  0D72               	rlf	?___lldiv+2,w
  9193  03EF  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9194  03F0  0D73               	rlf	?___lldiv+3,w
  9195  03F1  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9196  03F2                     l192:	
  9197                           ;BME280_driver/bme280.c: 1242:         }
  9198                           
  9199                           
  9200                           ;BME280_driver/bme280.c: 1243:         var1 = (((int32_t)calib_data->dig_P9) * ((int32_t
      +                          )(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
  9201  03F2  0845               	movf	compensate_pressure@pressure^(0+128),w
  9202  03F3  0020               	movlb	0	; select bank0
  9203  03F4  00B2               	movwf	??_compensate_pressure
  9204  03F5  0021               	movlb	1	; select bank1
  9205  03F6  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9206  03F7  0020               	movlb	0	; select bank0
  9207  03F8  00B3               	movwf	??_compensate_pressure+1
  9208  03F9  0021               	movlb	1	; select bank1
  9209  03FA  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9210  03FB  0020               	movlb	0	; select bank0
  9211  03FC  00B4               	movwf	??_compensate_pressure+2
  9212  03FD  0021               	movlb	1	; select bank1
  9213  03FE  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9214  03FF  0020               	movlb	0	; select bank0
  9215  0400  00B5               	movwf	??_compensate_pressure+3
  9216  0401  3003               	movlw	3
  9217  0402                     u4725:	
  9218  0402  36B5               	lsrf	??_compensate_pressure+3,f
  9219  0403  0CB4               	rrf	??_compensate_pressure+2,f
  9220  0404  0CB3               	rrf	??_compensate_pressure+1,f
  9221  0405  0CB2               	rrf	??_compensate_pressure,f
  9222  0406  0B89               	decfsz	9,f
  9223  0407  2C02               	goto	u4725
  9224  0408  0835               	movf	??_compensate_pressure+3,w
  9225  0409  00F7               	movwf	___lmul@multiplicand+3
  9226  040A  0834               	movf	??_compensate_pressure+2,w
  9227  040B  00F6               	movwf	___lmul@multiplicand+2
  9228  040C  0833               	movf	??_compensate_pressure+1,w
  9229  040D  00F5               	movwf	___lmul@multiplicand+1
  9230  040E  0832               	movf	??_compensate_pressure,w
  9231  040F  00F4               	movwf	___lmul@multiplicand
  9232  0410  0021               	movlb	1	; select bank1
  9233  0411  0845               	movf	compensate_pressure@pressure^(0+128),w
  9234  0412  0020               	movlb	0	; select bank0
  9235  0413  00B6               	movwf	??_compensate_pressure+4
  9236  0414  0021               	movlb	1	; select bank1
  9237  0415  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9238  0416  0020               	movlb	0	; select bank0
  9239  0417  00B7               	movwf	??_compensate_pressure+5
  9240  0418  0021               	movlb	1	; select bank1
  9241  0419  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9242  041A  0020               	movlb	0	; select bank0
  9243  041B  00B8               	movwf	??_compensate_pressure+6
  9244  041C  0021               	movlb	1	; select bank1
  9245  041D  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9246  041E  0020               	movlb	0	; select bank0
  9247  041F  00B9               	movwf	??_compensate_pressure+7
  9248  0420  3003               	movlw	3
  9249  0421                     u4735:	
  9250  0421  36B9               	lsrf	??_compensate_pressure+7,f
  9251  0422  0CB8               	rrf	??_compensate_pressure+6,f
  9252  0423  0CB7               	rrf	??_compensate_pressure+5,f
  9253  0424  0CB6               	rrf	??_compensate_pressure+4,f
  9254  0425  0B89               	decfsz	9,f
  9255  0426  2C21               	goto	u4735
  9256  0427  0839               	movf	??_compensate_pressure+7,w
  9257  0428  00F3               	movwf	___lmul@multiplier+3
  9258  0429  0838               	movf	??_compensate_pressure+6,w
  9259  042A  00F2               	movwf	___lmul@multiplier+2
  9260  042B  0837               	movf	??_compensate_pressure+5,w
  9261  042C  00F1               	movwf	___lmul@multiplier+1
  9262  042D  0836               	movf	??_compensate_pressure+4,w
  9263  042E  00F0               	movwf	___lmul@multiplier
  9264  042F  319C  2491  3180   	fcall	___lmul
  9265  0432  0870               	movf	?___lmul,w
  9266  0433  0020               	movlb	0	; select bank0
  9267  0434  00BA               	movwf	??_compensate_pressure+8
  9268  0435  0871               	movf	?___lmul+1,w
  9269  0436  00BB               	movwf	??_compensate_pressure+9
  9270  0437  0872               	movf	?___lmul+2,w
  9271  0438  00BC               	movwf	??_compensate_pressure+10
  9272  0439  0873               	movf	?___lmul+3,w
  9273  043A  00BD               	movwf	??_compensate_pressure+11
  9274  043B  300D               	movlw	13
  9275  043C                     u4745:	
  9276  043C  36BD               	lsrf	??_compensate_pressure+11,f
  9277  043D  0CBC               	rrf	??_compensate_pressure+10,f
  9278  043E  0CBB               	rrf	??_compensate_pressure+9,f
  9279  043F  0CBA               	rrf	??_compensate_pressure+8,f
  9280  0440  0B89               	decfsz	9,f
  9281  0441  2C3C               	goto	u4745
  9282  0442  083D               	movf	??_compensate_pressure+11,w
  9283  0443  0021               	movlb	1	; select bank1
  9284  0444  00B3               	movwf	(_compensate_pressure$2265+3)^(0+128)
  9285  0445  0020               	movlb	0	; select bank0
  9286  0446  083C               	movf	??_compensate_pressure+10,w
  9287  0447  0021               	movlb	1	; select bank1
  9288  0448  00B2               	movwf	(_compensate_pressure$2265+2)^(0+128)
  9289  0449  0020               	movlb	0	; select bank0
  9290  044A  083B               	movf	??_compensate_pressure+9,w
  9291  044B  0021               	movlb	1	; select bank1
  9292  044C  00B1               	movwf	(_compensate_pressure$2265+1)^(0+128)
  9293  044D  0020               	movlb	0	; select bank0
  9294  044E  083A               	movf	??_compensate_pressure+8,w
  9295  044F  0021               	movlb	1	; select bank1
  9296  0450  00B0               	movwf	_compensate_pressure$2265^(0+128)
  9297                           
  9298                           ;BME280_driver/bme280.c: 1243:         var1 = (((int32_t)calib_data->dig_P9) * ((int32_t
      +                          )(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
  9299  0451  3000               	movlw	0
  9300  0452  0020               	movlb	0	; select bank0
  9301  0453  00A3               	movwf	___aldiv@divisor+3
  9302  0454  3000               	movlw	0
  9303  0455  00A2               	movwf	___aldiv@divisor+2
  9304  0456  3010               	movlw	16
  9305  0457  00A1               	movwf	___aldiv@divisor+1
  9306  0458  3000               	movlw	0
  9307  0459  00A0               	movwf	___aldiv@divisor
  9308  045A  082E               	movf	compensate_pressure@calib_data,w
  9309  045B  3E16               	addlw	22
  9310  045C  0086               	movwf	6
  9311  045D  3001               	movlw	1	; select bank2/3
  9312  045E  0087               	movwf	7
  9313  045F  3F40               	moviw [0]fsr1
  9314  0460  00B2               	movwf	??_compensate_pressure
  9315  0461  3F41               	moviw [1]fsr1
  9316  0462  00B3               	movwf	??_compensate_pressure+1
  9317  0463  0832               	movf	??_compensate_pressure,w
  9318  0464  00F0               	movwf	___lmul@multiplier
  9319  0465  0833               	movf	??_compensate_pressure+1,w
  9320  0466  00F1               	movwf	___lmul@multiplier+1
  9321  0467  0D89               	rlf	9,f
  9322  0468  3B89               	subwfb	9,f
  9323  0469  0989               	comf	9,f
  9324  046A  00F2               	movwf	___lmul@multiplier+2
  9325  046B  00F3               	movwf	___lmul@multiplier+3
  9326  046C  0021               	movlb	1	; select bank1
  9327  046D  0833               	movf	(_compensate_pressure$2265+3)^(0+128),w
  9328  046E  00F7               	movwf	___lmul@multiplicand+3
  9329  046F  0832               	movf	(_compensate_pressure$2265+2)^(0+128),w
  9330  0470  00F6               	movwf	___lmul@multiplicand+2
  9331  0471  0831               	movf	(_compensate_pressure$2265+1)^(0+128),w
  9332  0472  00F5               	movwf	___lmul@multiplicand+1
  9333  0473  0830               	movf	_compensate_pressure$2265^(0+128),w
  9334  0474  00F4               	movwf	___lmul@multiplicand
  9335  0475  319C  2491  3180   	fcall	___lmul
  9336  0478  0873               	movf	?___lmul+3,w
  9337  0479  0020               	movlb	0	; select bank0
  9338  047A  00A7               	movwf	___aldiv@dividend+3
  9339  047B  0872               	movf	?___lmul+2,w
  9340  047C  00A6               	movwf	___aldiv@dividend+2
  9341  047D  0871               	movf	?___lmul+1,w
  9342  047E  00A5               	movwf	___aldiv@dividend+1
  9343  047F  0870               	movf	?___lmul,w
  9344  0480  00A4               	movwf	___aldiv@dividend
  9345  0481  3196  265B  3180   	fcall	___aldiv
  9346  0484  0823               	movf	?___aldiv+3,w
  9347  0485  0021               	movlb	1	; select bank1
  9348  0486  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
  9349  0487  0020               	movlb	0	; select bank0
  9350  0488  0822               	movf	?___aldiv+2,w
  9351  0489  0021               	movlb	1	; select bank1
  9352  048A  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
  9353  048B  0020               	movlb	0	; select bank0
  9354  048C  0821               	movf	?___aldiv+1,w
  9355  048D  0021               	movlb	1	; select bank1
  9356  048E  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
  9357  048F  0020               	movlb	0	; select bank0
  9358  0490  0820               	movf	?___aldiv,w
  9359  0491  0021               	movlb	1	; select bank1
  9360  0492  00C9               	movwf	compensate_pressure@var1^(0+128)
  9361                           
  9362                           ;BME280_driver/bme280.c: 1244:         var2 = (((int32_t)(pressure / 4)) * ((int32_t)cal
      +                          ib_data->dig_P8)) / 8192;
  9363  0493  3000               	movlw	0
  9364  0494  0020               	movlb	0	; select bank0
  9365  0495  00A3               	movwf	___aldiv@divisor+3
  9366  0496  3000               	movlw	0
  9367  0497  00A2               	movwf	___aldiv@divisor+2
  9368  0498  3020               	movlw	32
  9369  0499  00A1               	movwf	___aldiv@divisor+1
  9370  049A  3000               	movlw	0
  9371  049B  00A0               	movwf	___aldiv@divisor
  9372  049C  0021               	movlb	1	; select bank1
  9373  049D  0845               	movf	compensate_pressure@pressure^(0+128),w
  9374  049E  0020               	movlb	0	; select bank0
  9375  049F  00B2               	movwf	??_compensate_pressure
  9376  04A0  0021               	movlb	1	; select bank1
  9377  04A1  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9378  04A2  0020               	movlb	0	; select bank0
  9379  04A3  00B3               	movwf	??_compensate_pressure+1
  9380  04A4  0021               	movlb	1	; select bank1
  9381  04A5  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9382  04A6  0020               	movlb	0	; select bank0
  9383  04A7  00B4               	movwf	??_compensate_pressure+2
  9384  04A8  0021               	movlb	1	; select bank1
  9385  04A9  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9386  04AA  0020               	movlb	0	; select bank0
  9387  04AB  00B5               	movwf	??_compensate_pressure+3
  9388  04AC  3002               	movlw	2
  9389  04AD                     u4755:	
  9390  04AD  36B5               	lsrf	??_compensate_pressure+3,f
  9391  04AE  0CB4               	rrf	??_compensate_pressure+2,f
  9392  04AF  0CB3               	rrf	??_compensate_pressure+1,f
  9393  04B0  0CB2               	rrf	??_compensate_pressure,f
  9394  04B1  0B89               	decfsz	9,f
  9395  04B2  2CAD               	goto	u4755
  9396  04B3  0835               	movf	??_compensate_pressure+3,w
  9397  04B4  00F3               	movwf	___lmul@multiplier+3
  9398  04B5  0834               	movf	??_compensate_pressure+2,w
  9399  04B6  00F2               	movwf	___lmul@multiplier+2
  9400  04B7  0833               	movf	??_compensate_pressure+1,w
  9401  04B8  00F1               	movwf	___lmul@multiplier+1
  9402  04B9  0832               	movf	??_compensate_pressure,w
  9403  04BA  00F0               	movwf	___lmul@multiplier
  9404  04BB  082E               	movf	compensate_pressure@calib_data,w
  9405  04BC  3E14               	addlw	20
  9406  04BD  0086               	movwf	6
  9407  04BE  3001               	movlw	1	; select bank2/3
  9408  04BF  0087               	movwf	7
  9409  04C0  3F40               	moviw [0]fsr1
  9410  04C1  00B6               	movwf	??_compensate_pressure+4
  9411  04C2  3F41               	moviw [1]fsr1
  9412  04C3  00B7               	movwf	??_compensate_pressure+5
  9413  04C4  0836               	movf	??_compensate_pressure+4,w
  9414  04C5  00F4               	movwf	___lmul@multiplicand
  9415  04C6  0837               	movf	??_compensate_pressure+5,w
  9416  04C7  00F5               	movwf	___lmul@multiplicand+1
  9417  04C8  0D89               	rlf	9,f
  9418  04C9  3B89               	subwfb	9,f
  9419  04CA  0989               	comf	9,f
  9420  04CB  00F6               	movwf	___lmul@multiplicand+2
  9421  04CC  00F7               	movwf	___lmul@multiplicand+3
  9422  04CD  319C  2491  3180   	fcall	___lmul
  9423  04D0  0873               	movf	?___lmul+3,w
  9424  04D1  0020               	movlb	0	; select bank0
  9425  04D2  00A7               	movwf	___aldiv@dividend+3
  9426  04D3  0872               	movf	?___lmul+2,w
  9427  04D4  00A6               	movwf	___aldiv@dividend+2
  9428  04D5  0871               	movf	?___lmul+1,w
  9429  04D6  00A5               	movwf	___aldiv@dividend+1
  9430  04D7  0870               	movf	?___lmul,w
  9431  04D8  00A4               	movwf	___aldiv@dividend
  9432  04D9  3196  265B  3180   	fcall	___aldiv
  9433  04DC  0823               	movf	?___aldiv+3,w
  9434  04DD  0021               	movlb	1	; select bank1
  9435  04DE  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
  9436  04DF  0020               	movlb	0	; select bank0
  9437  04E0  0822               	movf	?___aldiv+2,w
  9438  04E1  0021               	movlb	1	; select bank1
  9439  04E2  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
  9440  04E3  0020               	movlb	0	; select bank0
  9441  04E4  0821               	movf	?___aldiv+1,w
  9442  04E5  0021               	movlb	1	; select bank1
  9443  04E6  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
  9444  04E7  0020               	movlb	0	; select bank0
  9445  04E8  0820               	movf	?___aldiv,w
  9446  04E9  0021               	movlb	1	; select bank1
  9447  04EA  00C1               	movwf	compensate_pressure@var2^(0+128)
  9448                           
  9449                           ;BME280_driver/bme280.c: 1245:         pressure = (uint32_t)((int32_t)pressure + ((var1 
      +                          + var2 + calib_data->dig_P7) / 16));
  9450  04EB  3000               	movlw	0
  9451  04EC  0020               	movlb	0	; select bank0
  9452  04ED  00A3               	movwf	___aldiv@divisor+3
  9453  04EE  3000               	movlw	0
  9454  04EF  00A2               	movwf	___aldiv@divisor+2
  9455  04F0  3000               	movlw	0
  9456  04F1  00A1               	movwf	___aldiv@divisor+1
  9457  04F2  3010               	movlw	16
  9458  04F3  00A0               	movwf	___aldiv@divisor
  9459  04F4  0021               	movlb	1	; select bank1
  9460  04F5  0841               	movf	compensate_pressure@var2^(0+128),w
  9461  04F6  0020               	movlb	0	; select bank0
  9462  04F7  00B2               	movwf	??_compensate_pressure
  9463  04F8  0021               	movlb	1	; select bank1
  9464  04F9  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
  9465  04FA  0020               	movlb	0	; select bank0
  9466  04FB  00B3               	movwf	??_compensate_pressure+1
  9467  04FC  0021               	movlb	1	; select bank1
  9468  04FD  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
  9469  04FE  0020               	movlb	0	; select bank0
  9470  04FF  00B4               	movwf	??_compensate_pressure+2
  9471  0500  0021               	movlb	1	; select bank1
  9472  0501  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
  9473  0502  0020               	movlb	0	; select bank0
  9474  0503  00B5               	movwf	??_compensate_pressure+3
  9475  0504  0021               	movlb	1	; select bank1
  9476  0505  0849               	movf	compensate_pressure@var1^(0+128),w
  9477  0506  0020               	movlb	0	; select bank0
  9478  0507  00B6               	movwf	??_compensate_pressure+4
  9479  0508  0021               	movlb	1	; select bank1
  9480  0509  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  9481  050A  0020               	movlb	0	; select bank0
  9482  050B  00B7               	movwf	??_compensate_pressure+5
  9483  050C  0021               	movlb	1	; select bank1
  9484  050D  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  9485  050E  0020               	movlb	0	; select bank0
  9486  050F  00B8               	movwf	??_compensate_pressure+6
  9487  0510  0021               	movlb	1	; select bank1
  9488  0511  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  9489  0512  0020               	movlb	0	; select bank0
  9490  0513  00B9               	movwf	??_compensate_pressure+7
  9491  0514  082E               	movf	compensate_pressure@calib_data,w
  9492  0515  3E12               	addlw	18
  9493  0516  0086               	movwf	6
  9494  0517  3001               	movlw	1	; select bank2/3
  9495  0518  0087               	movwf	7
  9496  0519  3F40               	moviw [0]fsr1
  9497  051A  00BA               	movwf	??_compensate_pressure+8
  9498  051B  3F41               	moviw [1]fsr1
  9499  051C  00BB               	movwf	??_compensate_pressure+9
  9500  051D  083A               	movf	??_compensate_pressure+8,w
  9501  051E  00BC               	movwf	??_compensate_pressure+10
  9502  051F  083B               	movf	??_compensate_pressure+9,w
  9503  0520  00BD               	movwf	??_compensate_pressure+11
  9504  0521  3000               	movlw	0
  9505  0522  1BBD               	btfsc	??_compensate_pressure+11,7
  9506  0523  30FF               	movlw	255
  9507  0524  00BE               	movwf	??_compensate_pressure+12
  9508  0525  00BF               	movwf	??_compensate_pressure+13
  9509  0526  083C               	movf	??_compensate_pressure+10,w
  9510  0527  07B6               	addwf	??_compensate_pressure+4,f
  9511  0528  083D               	movf	??_compensate_pressure+11,w
  9512  0529  3DB7               	addwfc	??_compensate_pressure+5,f
  9513  052A  083E               	movf	??_compensate_pressure+12,w
  9514  052B  3DB8               	addwfc	??_compensate_pressure+6,f
  9515  052C  083F               	movf	??_compensate_pressure+13,w
  9516  052D  3DB9               	addwfc	??_compensate_pressure+7,f
  9517  052E  0836               	movf	??_compensate_pressure+4,w
  9518  052F  07B2               	addwf	??_compensate_pressure,f
  9519  0530  0837               	movf	??_compensate_pressure+5,w
  9520  0531  3DB3               	addwfc	??_compensate_pressure+1,f
  9521  0532  0838               	movf	??_compensate_pressure+6,w
  9522  0533  3DB4               	addwfc	??_compensate_pressure+2,f
  9523  0534  0839               	movf	??_compensate_pressure+7,w
  9524  0535  3DB5               	addwfc	??_compensate_pressure+3,f
  9525  0536  0835               	movf	??_compensate_pressure+3,w
  9526  0537  00A7               	movwf	___aldiv@dividend+3
  9527  0538  0834               	movf	??_compensate_pressure+2,w
  9528  0539  00A6               	movwf	___aldiv@dividend+2
  9529  053A  0833               	movf	??_compensate_pressure+1,w
  9530  053B  00A5               	movwf	___aldiv@dividend+1
  9531  053C  0832               	movf	??_compensate_pressure,w
  9532  053D  00A4               	movwf	___aldiv@dividend
  9533  053E  3196  265B  3180   	fcall	___aldiv
  9534  0541  0820               	movf	?___aldiv,w
  9535  0542  0021               	movlb	1	; select bank1
  9536  0543  0745               	addwf	compensate_pressure@pressure^(0+128),w
  9537  0544  0020               	movlb	0	; select bank0
  9538  0545  00C0               	movwf	??_compensate_pressure+14
  9539  0546  0821               	movf	?___aldiv+1,w
  9540  0547  0021               	movlb	1	; select bank1
  9541  0548  3D46               	addwfc	(compensate_pressure@pressure+1)^(0+128),w
  9542  0549  0020               	movlb	0	; select bank0
  9543  054A  00C1               	movwf	??_compensate_pressure+15
  9544  054B  0822               	movf	?___aldiv+2,w
  9545  054C  0021               	movlb	1	; select bank1
  9546  054D  3D47               	addwfc	(compensate_pressure@pressure+2)^(0+128),w
  9547  054E  0020               	movlb	0	; select bank0
  9548  054F  00C2               	movwf	??_compensate_pressure+16
  9549  0550  0823               	movf	?___aldiv+3,w
  9550  0551  0021               	movlb	1	; select bank1
  9551  0552  3D48               	addwfc	(compensate_pressure@pressure+3)^(0+128),w
  9552  0553  0020               	movlb	0	; select bank0
  9553  0554  00C3               	movwf	??_compensate_pressure+17
  9554  0555  0843               	movf	??_compensate_pressure+17,w
  9555  0556  0021               	movlb	1	; select bank1
  9556  0557  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9557  0558  0020               	movlb	0	; select bank0
  9558  0559  0842               	movf	??_compensate_pressure+16,w
  9559  055A  0021               	movlb	1	; select bank1
  9560  055B  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9561  055C  0020               	movlb	0	; select bank0
  9562  055D  0841               	movf	??_compensate_pressure+15,w
  9563  055E  0021               	movlb	1	; select bank1
  9564  055F  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9565  0560  0020               	movlb	0	; select bank0
  9566  0561  0840               	movf	??_compensate_pressure+14,w
  9567  0562  0021               	movlb	1	; select bank1
  9568  0563  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9569                           
  9570                           ;BME280_driver/bme280.c: 1246:         if (pressure < pressure_min)
  9571  0564  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9572  0565  1D03               	btfss	3,2
  9573  0566  2D78               	goto	l4342
  9574  0567  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9575  0568  1D03               	btfss	3,2
  9576  0569  2D78               	goto	l4342
  9577  056A  3030               	movlw	48
  9578  056B  0245               	subwf	compensate_pressure@pressure^(0+128),w
  9579  056C  3075               	movlw	117
  9580  056D  3B46               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
  9581  056E  1803               	btfsc	3,0
  9582  056F  2D78               	goto	l4342
  9583  0570                     l4340:	
  9584                           
  9585                           ;BME280_driver/bme280.c: 1247:         {;BME280_driver/bme280.c: 1248:             press
      +                          ure = pressure_min;
  9586  0570  3000               	movlw	0
  9587  0571  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9588  0572  3000               	movlw	0
  9589  0573  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9590  0574  3075               	movlw	117
  9591  0575  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9592  0576  3030               	movlw	48
  9593  0577  2D8A               	goto	L3
  9594  0578                     l4342:	
  9595                           ;BME280_driver/bme280.c: 1249:         }
  9596                           
  9597  0578  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9598  0579  1D03               	btfss	3,2
  9599  057A  2D83               	goto	l4344
  9600  057B  30B1               	movlw	177
  9601  057C  0245               	subwf	compensate_pressure@pressure^(0+128),w
  9602  057D  30AD               	movlw	173
  9603  057E  3B46               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
  9604  057F  3001               	movlw	1
  9605  0580  3B47               	subwfb	(compensate_pressure@pressure+2)^(0+128),w
  9606  0581  1C03               	btfss	3,0
  9607  0582  2D8B               	goto	l196
  9608  0583                     l4344:	
  9609                           
  9610                           ;BME280_driver/bme280.c: 1251:         {;BME280_driver/bme280.c: 1252:             press
      +                          ure = pressure_max;
  9611  0583  3000               	movlw	0
  9612  0584  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9613  0585  3001               	movlw	1
  9614  0586  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9615  0587  30AD               	movlw	173
  9616  0588  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9617  0589  30B0               	movlw	176
  9618  058A                     L3:	
  9619  058A  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9620  058B                     l196:	
  9621                           ;BME280_driver/bme280.c: 1258:     }
  9622                           
  9623                           
  9624                           ;BME280_driver/bme280.c: 1260:     return pressure;
  9625  058B  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9626  058C  0020               	movlb	0	; select bank0
  9627  058D  00B1               	movwf	?_compensate_pressure+3
  9628  058E  0021               	movlb	1	; select bank1
  9629  058F  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9630  0590  0020               	movlb	0	; select bank0
  9631  0591  00B0               	movwf	?_compensate_pressure+2
  9632  0592  0021               	movlb	1	; select bank1
  9633  0593  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9634  0594  0020               	movlb	0	; select bank0
  9635  0595  00AF               	movwf	?_compensate_pressure+1
  9636  0596  0021               	movlb	1	; select bank1
  9637  0597  0845               	movf	compensate_pressure@pressure^(0+128),w
  9638  0598  0020               	movlb	0	; select bank0
  9639  0599  00AE               	movwf	?_compensate_pressure
  9640  059A  0008               	return
  9641  059B                     __end_of_compensate_pressure:	
  9642                           
  9643                           	psect	text8
  9644  0D41                     __ptext8:	
  9645 ;; *************** function _compensate_humidity *****************
  9646 ;; Defined at:
  9647 ;;		line 1268 in file "BME280_driver/bme280.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  9650 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9651 ;;  calib_data      1   14[BANK0 ] PTR const struct bme280_
  9652 ;;		 -> EnvSensor(51), 
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  uncomp_data     1   30[BANK0 ] PTR const struct bme280_
  9655 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9656 ;;  var3            4   55[BANK0 ] long 
  9657 ;;  var5            4   51[BANK0 ] long 
  9658 ;;  var4            4   47[BANK0 ] long 
  9659 ;;  var2            4   43[BANK0 ] long 
  9660 ;;  var1            4   39[BANK0 ] long 
  9661 ;;  humidity        4   35[BANK0 ] unsigned long 
  9662 ;;  humidity_max    4    0        unsigned long 
  9663 ;; Return value:  Size  Location     Type
  9664 ;;                  4   14[BANK0 ] unsigned long 
  9665 ;; Registers used:
  9666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9667 ;; Tracked objects:
  9668 ;;		On entry : 1F/0
  9669 ;;		On exit  : 1F/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9672 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Totals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;Total ram usage:       45 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    4
  9679 ;; This function calls:
  9680 ;;		___aldiv
  9681 ;;		___lmul
  9682 ;; This function is called by:
  9683 ;;		_bme280_compensate_data
  9684 ;; This function uses a non-reentrant model
  9685 ;;
  9686                           
  9687                           
  9688                           ;psect for function _compensate_humidity
  9689  0D41                     _compensate_humidity:	
  9690                           
  9691                           ;incstack = 0
  9692                           ; Regs used in _compensate_humidity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9693                           ;compensate_humidity@uncomp_data stored from wreg
  9694  0D41  00BE               	movwf	compensate_humidity@uncomp_data
  9695                           
  9696                           ;BME280_driver/bme280.c: 1279:     var1 = calib_data->t_fine - ((int32_t)76800);
  9697  0D42  082E               	movf	compensate_humidity@calib_data,w
  9698  0D43  3E21               	addlw	33
  9699  0D44  0086               	movwf	6
  9700  0D45  3001               	movlw	1	; select bank2/3
  9701  0D46  0087               	movwf	7
  9702  0D47  3F40               	moviw [0]fsr1
  9703  0D48  00B2               	movwf	??_compensate_humidity
  9704  0D49  3F41               	moviw [1]fsr1
  9705  0D4A  00B3               	movwf	??_compensate_humidity+1
  9706  0D4B  3F42               	moviw [2]fsr1
  9707  0D4C  00B4               	movwf	??_compensate_humidity+2
  9708  0D4D  3F43               	moviw [3]fsr1
  9709  0D4E  00B5               	movwf	??_compensate_humidity+3
  9710  0D4F  3000               	movlw	0
  9711  0D50  0732               	addwf	??_compensate_humidity,w
  9712  0D51  00C7               	movwf	compensate_humidity@var1
  9713  0D52  30D4               	movlw	212
  9714  0D53  3D33               	addwfc	??_compensate_humidity+1,w
  9715  0D54  00C8               	movwf	compensate_humidity@var1+1
  9716  0D55  30FE               	movlw	254
  9717  0D56  3D34               	addwfc	??_compensate_humidity+2,w
  9718  0D57  00C9               	movwf	compensate_humidity@var1+2
  9719  0D58  30FF               	movlw	255
  9720  0D59  3D35               	addwfc	??_compensate_humidity+3,w
  9721  0D5A  00CA               	movwf	compensate_humidity@var1+3
  9722                           
  9723                           ;BME280_driver/bme280.c: 1280:     var2 = (int32_t)(uncomp_data->humidity * 16384);
  9724  0D5B  083E               	movf	compensate_humidity@uncomp_data,w
  9725  0D5C  3E08               	addlw	8
  9726  0D5D  0086               	movwf	6
  9727  0D5E  0187               	clrf	7
  9728  0D5F  3F40               	moviw [0]fsr1
  9729  0D60  00B2               	movwf	??_compensate_humidity
  9730  0D61  3F41               	moviw [1]fsr1
  9731  0D62  00B3               	movwf	??_compensate_humidity+1
  9732  0D63  3F42               	moviw [2]fsr1
  9733  0D64  00B4               	movwf	??_compensate_humidity+2
  9734  0D65  3F43               	moviw [3]fsr1
  9735  0D66  00B5               	movwf	??_compensate_humidity+3
  9736  0D67  300E               	movlw	14
  9737  0D68                     u4785:	
  9738  0D68  35B2               	lslf	??_compensate_humidity,f
  9739  0D69  0DB3               	rlf	??_compensate_humidity+1,f
  9740  0D6A  0DB4               	rlf	??_compensate_humidity+2,f
  9741  0D6B  0DB5               	rlf	??_compensate_humidity+3,f
  9742  0D6C  0B89               	decfsz	9,f
  9743  0D6D  2D68               	goto	u4785
  9744  0D6E  0835               	movf	??_compensate_humidity+3,w
  9745  0D6F  00CE               	movwf	compensate_humidity@var2+3
  9746  0D70  0834               	movf	??_compensate_humidity+2,w
  9747  0D71  00CD               	movwf	compensate_humidity@var2+2
  9748  0D72  0833               	movf	??_compensate_humidity+1,w
  9749  0D73  00CC               	movwf	compensate_humidity@var2+1
  9750  0D74  0832               	movf	??_compensate_humidity,w
  9751  0D75  00CB               	movwf	compensate_humidity@var2
  9752                           
  9753                           ;BME280_driver/bme280.c: 1281:     var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048
      +                          576);
  9754  0D76  082E               	movf	compensate_humidity@calib_data,w
  9755  0D77  3E1C               	addlw	28
  9756  0D78  0086               	movwf	6
  9757  0D79  3001               	movlw	1	; select bank2/3
  9758  0D7A  0087               	movwf	7
  9759  0D7B  3F40               	moviw [0]fsr1
  9760  0D7C  00B2               	movwf	??_compensate_humidity
  9761  0D7D  3F41               	moviw [1]fsr1
  9762  0D7E  00B3               	movwf	??_compensate_humidity+1
  9763  0D7F  0832               	movf	??_compensate_humidity,w
  9764  0D80  00B4               	movwf	??_compensate_humidity+2
  9765  0D81  0833               	movf	??_compensate_humidity+1,w
  9766  0D82  00B5               	movwf	??_compensate_humidity+3
  9767  0D83  01B6               	clrf	??_compensate_humidity+4
  9768  0D84  01B7               	clrf	??_compensate_humidity+5
  9769  0D85  3014               	movlw	20
  9770  0D86                     u4795:	
  9771  0D86  35B4               	lslf	??_compensate_humidity+2,f
  9772  0D87  0DB5               	rlf	??_compensate_humidity+3,f
  9773  0D88  0DB6               	rlf	??_compensate_humidity+4,f
  9774  0D89  0DB7               	rlf	??_compensate_humidity+5,f
  9775  0D8A  0B89               	decfsz	9,f
  9776  0D8B  2D86               	goto	u4795
  9777  0D8C  0837               	movf	??_compensate_humidity+5,w
  9778  0D8D  00DA               	movwf	compensate_humidity@var3+3
  9779  0D8E  0836               	movf	??_compensate_humidity+4,w
  9780  0D8F  00D9               	movwf	compensate_humidity@var3+2
  9781  0D90  0835               	movf	??_compensate_humidity+3,w
  9782  0D91  00D8               	movwf	compensate_humidity@var3+1
  9783  0D92  0834               	movf	??_compensate_humidity+2,w
  9784  0D93  00D7               	movwf	compensate_humidity@var3
  9785                           
  9786                           ;BME280_driver/bme280.c: 1282:     var4 = ((int32_t)calib_data->dig_H5) * var1;
  9787  0D94  082E               	movf	compensate_humidity@calib_data,w
  9788  0D95  3E1E               	addlw	30
  9789  0D96  0086               	movwf	6
  9790  0D97  3001               	movlw	1	; select bank2/3
  9791  0D98  0087               	movwf	7
  9792  0D99  3F40               	moviw [0]fsr1
  9793  0D9A  00B2               	movwf	??_compensate_humidity
  9794  0D9B  3F41               	moviw [1]fsr1
  9795  0D9C  00B3               	movwf	??_compensate_humidity+1
  9796  0D9D  0832               	movf	??_compensate_humidity,w
  9797  0D9E  00F0               	movwf	___lmul@multiplier
  9798  0D9F  0833               	movf	??_compensate_humidity+1,w
  9799  0DA0  00F1               	movwf	___lmul@multiplier+1
  9800  0DA1  0D89               	rlf	9,f
  9801  0DA2  3B89               	subwfb	9,f
  9802  0DA3  0989               	comf	9,f
  9803  0DA4  00F2               	movwf	___lmul@multiplier+2
  9804  0DA5  00F3               	movwf	___lmul@multiplier+3
  9805  0DA6  084A               	movf	compensate_humidity@var1+3,w
  9806  0DA7  00F7               	movwf	___lmul@multiplicand+3
  9807  0DA8  0849               	movf	compensate_humidity@var1+2,w
  9808  0DA9  00F6               	movwf	___lmul@multiplicand+2
  9809  0DAA  0848               	movf	compensate_humidity@var1+1,w
  9810  0DAB  00F5               	movwf	___lmul@multiplicand+1
  9811  0DAC  0847               	movf	compensate_humidity@var1,w
  9812  0DAD  00F4               	movwf	___lmul@multiplicand
  9813  0DAE  319C  2491  318D   	fcall	___lmul
  9814  0DB1  0873               	movf	?___lmul+3,w
  9815  0DB2  0020               	movlb	0	; select bank0
  9816  0DB3  00D2               	movwf	compensate_humidity@var4+3
  9817  0DB4  0872               	movf	?___lmul+2,w
  9818  0DB5  00D1               	movwf	compensate_humidity@var4+2
  9819  0DB6  0871               	movf	?___lmul+1,w
  9820  0DB7  00D0               	movwf	compensate_humidity@var4+1
  9821  0DB8  0870               	movf	?___lmul,w
  9822  0DB9  00CF               	movwf	compensate_humidity@var4
  9823                           
  9824                           ;BME280_driver/bme280.c: 1283:     var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32
      +                          768;
  9825  0DBA  3000               	movlw	0
  9826  0DBB  00A3               	movwf	___aldiv@divisor+3
  9827  0DBC  3000               	movlw	0
  9828  0DBD  00A2               	movwf	___aldiv@divisor+2
  9829  0DBE  3080               	movlw	128
  9830  0DBF  00A1               	movwf	___aldiv@divisor+1
  9831  0DC0  3000               	movlw	0
  9832  0DC1  00A0               	movwf	___aldiv@divisor
  9833  0DC2  084B               	movf	compensate_humidity@var2,w
  9834  0DC3  00B2               	movwf	??_compensate_humidity
  9835  0DC4  084C               	movf	compensate_humidity@var2+1,w
  9836  0DC5  00B3               	movwf	??_compensate_humidity+1
  9837  0DC6  084D               	movf	compensate_humidity@var2+2,w
  9838  0DC7  00B4               	movwf	??_compensate_humidity+2
  9839  0DC8  084E               	movf	compensate_humidity@var2+3,w
  9840  0DC9  00B5               	movwf	??_compensate_humidity+3
  9841  0DCA  0957               	comf	compensate_humidity@var3,w
  9842  0DCB  00B6               	movwf	??_compensate_humidity+4
  9843  0DCC  0958               	comf	compensate_humidity@var3+1,w
  9844  0DCD  00B7               	movwf	??_compensate_humidity+5
  9845  0DCE  0959               	comf	compensate_humidity@var3+2,w
  9846  0DCF  00B8               	movwf	??_compensate_humidity+6
  9847  0DD0  095A               	comf	compensate_humidity@var3+3,w
  9848  0DD1  00B9               	movwf	??_compensate_humidity+7
  9849  0DD2  0AB6               	incf	??_compensate_humidity+4,f
  9850  0DD3  1903               	skipnz
  9851  0DD4  0AB7               	incf	??_compensate_humidity+5,f
  9852  0DD5  1903               	skipnz
  9853  0DD6  0AB8               	incf	??_compensate_humidity+6,f
  9854  0DD7  1903               	skipnz
  9855  0DD8  0AB9               	incf	??_compensate_humidity+7,f
  9856  0DD9  084F               	movf	compensate_humidity@var4,w
  9857  0DDA  02B6               	subwf	??_compensate_humidity+4,f
  9858  0DDB  0850               	movf	compensate_humidity@var4+1,w
  9859  0DDC  3BB7               	subwfb	??_compensate_humidity+5,f
  9860  0DDD  0851               	movf	compensate_humidity@var4+2,w
  9861  0DDE  3BB8               	subwfb	??_compensate_humidity+6,f
  9862  0DDF  0852               	movf	compensate_humidity@var4+3,w
  9863  0DE0  3BB9               	subwfb	??_compensate_humidity+7,f
  9864  0DE1  0836               	movf	??_compensate_humidity+4,w
  9865  0DE2  07B2               	addwf	??_compensate_humidity,f
  9866  0DE3  0837               	movf	??_compensate_humidity+5,w
  9867  0DE4  3DB3               	addwfc	??_compensate_humidity+1,f
  9868  0DE5  0838               	movf	??_compensate_humidity+6,w
  9869  0DE6  3DB4               	addwfc	??_compensate_humidity+2,f
  9870  0DE7  0839               	movf	??_compensate_humidity+7,w
  9871  0DE8  3DB5               	addwfc	??_compensate_humidity+3,f
  9872  0DE9  3000               	movlw	0
  9873  0DEA  0732               	addwf	??_compensate_humidity,w
  9874  0DEB  00A4               	movwf	___aldiv@dividend
  9875  0DEC  3040               	movlw	64
  9876  0DED  3D33               	addwfc	??_compensate_humidity+1,w
  9877  0DEE  00A5               	movwf	___aldiv@dividend+1
  9878  0DEF  3000               	movlw	0
  9879  0DF0  3D34               	addwfc	??_compensate_humidity+2,w
  9880  0DF1  00A6               	movwf	___aldiv@dividend+2
  9881  0DF2  3000               	movlw	0
  9882  0DF3  3D35               	addwfc	??_compensate_humidity+3,w
  9883  0DF4  00A7               	movwf	___aldiv@dividend+3
  9884  0DF5  3196  265B  318D   	fcall	___aldiv
  9885  0DF8  0823               	movf	?___aldiv+3,w
  9886  0DF9  00D6               	movwf	compensate_humidity@var5+3
  9887  0DFA  0822               	movf	?___aldiv+2,w
  9888  0DFB  00D5               	movwf	compensate_humidity@var5+2
  9889  0DFC  0821               	movf	?___aldiv+1,w
  9890  0DFD  00D4               	movwf	compensate_humidity@var5+1
  9891  0DFE  0820               	movf	?___aldiv,w
  9892  0DFF  00D3               	movwf	compensate_humidity@var5
  9893                           
  9894                           ;BME280_driver/bme280.c: 1284:     var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
  9895  0E00  3000               	movlw	0
  9896  0E01  00A3               	movwf	___aldiv@divisor+3
  9897  0E02  3000               	movlw	0
  9898  0E03  00A2               	movwf	___aldiv@divisor+2
  9899  0E04  3004               	movlw	4
  9900  0E05  00A1               	movwf	___aldiv@divisor+1
  9901  0E06  3000               	movlw	0
  9902  0E07  00A0               	movwf	___aldiv@divisor
  9903  0E08  082E               	movf	compensate_humidity@calib_data,w
  9904  0E09  3E20               	addlw	32
  9905  0E0A  0086               	movwf	6
  9906  0E0B  3001               	movlw	1	; select bank2/3
  9907  0E0C  0087               	movwf	7
  9908  0E0D  0801               	movf	1,w
  9909  0E0E  00F0               	movwf	___lmul@multiplier
  9910  0E0F  3980               	andlw	128
  9911  0E10  1D03               	skipz
  9912  0E11  30FF               	movlw	255
  9913  0E12  00F1               	movwf	___lmul@multiplier+1
  9914  0E13  00F2               	movwf	___lmul@multiplier+2
  9915  0E14  00F3               	movwf	___lmul@multiplier+3
  9916  0E15  084A               	movf	compensate_humidity@var1+3,w
  9917  0E16  00F7               	movwf	___lmul@multiplicand+3
  9918  0E17  0849               	movf	compensate_humidity@var1+2,w
  9919  0E18  00F6               	movwf	___lmul@multiplicand+2
  9920  0E19  0848               	movf	compensate_humidity@var1+1,w
  9921  0E1A  00F5               	movwf	___lmul@multiplicand+1
  9922  0E1B  0847               	movf	compensate_humidity@var1,w
  9923  0E1C  00F4               	movwf	___lmul@multiplicand
  9924  0E1D  319C  2491  318D   	fcall	___lmul
  9925  0E20  0873               	movf	?___lmul+3,w
  9926  0E21  0020               	movlb	0	; select bank0
  9927  0E22  00A7               	movwf	___aldiv@dividend+3
  9928  0E23  0872               	movf	?___lmul+2,w
  9929  0E24  00A6               	movwf	___aldiv@dividend+2
  9930  0E25  0871               	movf	?___lmul+1,w
  9931  0E26  00A5               	movwf	___aldiv@dividend+1
  9932  0E27  0870               	movf	?___lmul,w
  9933  0E28  00A4               	movwf	___aldiv@dividend
  9934  0E29  3196  265B  318D   	fcall	___aldiv
  9935  0E2C  0823               	movf	?___aldiv+3,w
  9936  0E2D  00CE               	movwf	compensate_humidity@var2+3
  9937  0E2E  0822               	movf	?___aldiv+2,w
  9938  0E2F  00CD               	movwf	compensate_humidity@var2+2
  9939  0E30  0821               	movf	?___aldiv+1,w
  9940  0E31  00CC               	movwf	compensate_humidity@var2+1
  9941  0E32  0820               	movf	?___aldiv,w
  9942  0E33  00CB               	movwf	compensate_humidity@var2
  9943                           
  9944                           ;BME280_driver/bme280.c: 1285:     var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
  9945  0E34  3000               	movlw	0
  9946  0E35  00A3               	movwf	___aldiv@divisor+3
  9947  0E36  3000               	movlw	0
  9948  0E37  00A2               	movwf	___aldiv@divisor+2
  9949  0E38  3008               	movlw	8
  9950  0E39  00A1               	movwf	___aldiv@divisor+1
  9951  0E3A  3000               	movlw	0
  9952  0E3B  00A0               	movwf	___aldiv@divisor
  9953  0E3C  082E               	movf	compensate_humidity@calib_data,w
  9954  0E3D  3E1B               	addlw	27
  9955  0E3E  0086               	movwf	6
  9956  0E3F  3001               	movlw	1	; select bank2/3
  9957  0E40  0087               	movwf	7
  9958  0E41  0801               	movf	1,w
  9959  0E42  00B2               	movwf	??_compensate_humidity
  9960  0E43  01B3               	clrf	??_compensate_humidity+1
  9961  0E44  01B4               	clrf	??_compensate_humidity+2
  9962  0E45  01B5               	clrf	??_compensate_humidity+3
  9963  0E46  0835               	movf	??_compensate_humidity+3,w
  9964  0E47  00F3               	movwf	___lmul@multiplier+3
  9965  0E48  0834               	movf	??_compensate_humidity+2,w
  9966  0E49  00F2               	movwf	___lmul@multiplier+2
  9967  0E4A  0833               	movf	??_compensate_humidity+1,w
  9968  0E4B  00F1               	movwf	___lmul@multiplier+1
  9969  0E4C  0832               	movf	??_compensate_humidity,w
  9970  0E4D  00F0               	movwf	___lmul@multiplier
  9971  0E4E  084A               	movf	compensate_humidity@var1+3,w
  9972  0E4F  00F7               	movwf	___lmul@multiplicand+3
  9973  0E50  0849               	movf	compensate_humidity@var1+2,w
  9974  0E51  00F6               	movwf	___lmul@multiplicand+2
  9975  0E52  0848               	movf	compensate_humidity@var1+1,w
  9976  0E53  00F5               	movwf	___lmul@multiplicand+1
  9977  0E54  0847               	movf	compensate_humidity@var1,w
  9978  0E55  00F4               	movwf	___lmul@multiplicand
  9979  0E56  319C  2491  318D   	fcall	___lmul
  9980  0E59  0873               	movf	?___lmul+3,w
  9981  0E5A  0020               	movlb	0	; select bank0
  9982  0E5B  00A7               	movwf	___aldiv@dividend+3
  9983  0E5C  0872               	movf	?___lmul+2,w
  9984  0E5D  00A6               	movwf	___aldiv@dividend+2
  9985  0E5E  0871               	movf	?___lmul+1,w
  9986  0E5F  00A5               	movwf	___aldiv@dividend+1
  9987  0E60  0870               	movf	?___lmul,w
  9988  0E61  00A4               	movwf	___aldiv@dividend
  9989  0E62  3196  265B  318D   	fcall	___aldiv
  9990  0E65  0823               	movf	?___aldiv+3,w
  9991  0E66  00DA               	movwf	compensate_humidity@var3+3
  9992  0E67  0822               	movf	?___aldiv+2,w
  9993  0E68  00D9               	movwf	compensate_humidity@var3+2
  9994  0E69  0821               	movf	?___aldiv+1,w
  9995  0E6A  00D8               	movwf	compensate_humidity@var3+1
  9996  0E6B  0820               	movf	?___aldiv,w
  9997  0E6C  00D7               	movwf	compensate_humidity@var3
  9998                           
  9999                           ;BME280_driver/bme280.c: 1286:     var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (i
      +                          nt32_t)2097152;
 10000  0E6D  3000               	movlw	0
 10001  0E6E  00A3               	movwf	___aldiv@divisor+3
 10002  0E6F  3000               	movlw	0
 10003  0E70  00A2               	movwf	___aldiv@divisor+2
 10004  0E71  3004               	movlw	4
 10005  0E72  00A1               	movwf	___aldiv@divisor+1
 10006  0E73  3000               	movlw	0
 10007  0E74  00A0               	movwf	___aldiv@divisor
 10008  0E75  3000               	movlw	0
 10009  0E76  0757               	addwf	compensate_humidity@var3,w
 10010  0E77  00F0               	movwf	___lmul@multiplier
 10011  0E78  3080               	movlw	128
 10012  0E79  3D58               	addwfc	compensate_humidity@var3+1,w
 10013  0E7A  00F1               	movwf	___lmul@multiplier+1
 10014  0E7B  3000               	movlw	0
 10015  0E7C  3D59               	addwfc	compensate_humidity@var3+2,w
 10016  0E7D  00F2               	movwf	___lmul@multiplier+2
 10017  0E7E  3000               	movlw	0
 10018  0E7F  3D5A               	addwfc	compensate_humidity@var3+3,w
 10019  0E80  00F3               	movwf	___lmul@multiplier+3
 10020  0E81  084E               	movf	compensate_humidity@var2+3,w
 10021  0E82  00F7               	movwf	___lmul@multiplicand+3
 10022  0E83  084D               	movf	compensate_humidity@var2+2,w
 10023  0E84  00F6               	movwf	___lmul@multiplicand+2
 10024  0E85  084C               	movf	compensate_humidity@var2+1,w
 10025  0E86  00F5               	movwf	___lmul@multiplicand+1
 10026  0E87  084B               	movf	compensate_humidity@var2,w
 10027  0E88  00F4               	movwf	___lmul@multiplicand
 10028  0E89  319C  2491  318D   	fcall	___lmul
 10029  0E8C  0873               	movf	?___lmul+3,w
 10030  0E8D  0020               	movlb	0	; select bank0
 10031  0E8E  00A7               	movwf	___aldiv@dividend+3
 10032  0E8F  0872               	movf	?___lmul+2,w
 10033  0E90  00A6               	movwf	___aldiv@dividend+2
 10034  0E91  0871               	movf	?___lmul+1,w
 10035  0E92  00A5               	movwf	___aldiv@dividend+1
 10036  0E93  0870               	movf	?___lmul,w
 10037  0E94  00A4               	movwf	___aldiv@dividend
 10038  0E95  3196  265B  318D   	fcall	___aldiv
 10039  0E98  3000               	movlw	0
 10040  0E99  0720               	addwf	?___aldiv,w
 10041  0E9A  00CF               	movwf	compensate_humidity@var4
 10042  0E9B  3000               	movlw	0
 10043  0E9C  3D21               	addwfc	?___aldiv+1,w
 10044  0E9D  00D0               	movwf	compensate_humidity@var4+1
 10045  0E9E  3020               	movlw	32
 10046  0E9F  3D22               	addwfc	?___aldiv+2,w
 10047  0EA0  00D1               	movwf	compensate_humidity@var4+2
 10048  0EA1  3000               	movlw	0
 10049  0EA2  3D23               	addwfc	?___aldiv+3,w
 10050  0EA3  00D2               	movwf	compensate_humidity@var4+3
 10051                           
 10052                           ;BME280_driver/bme280.c: 1287:     var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192
      +                          ) / 16384;
 10053  0EA4  3000               	movlw	0
 10054  0EA5  00A3               	movwf	___aldiv@divisor+3
 10055  0EA6  3000               	movlw	0
 10056  0EA7  00A2               	movwf	___aldiv@divisor+2
 10057  0EA8  3040               	movlw	64
 10058  0EA9  00A1               	movwf	___aldiv@divisor+1
 10059  0EAA  3000               	movlw	0
 10060  0EAB  00A0               	movwf	___aldiv@divisor
 10061  0EAC  3000               	movlw	0
 10062  0EAD  00B2               	movwf	??_compensate_humidity
 10063  0EAE  3020               	movlw	32
 10064  0EAF  00B3               	movwf	??_compensate_humidity+1
 10065  0EB0  3000               	movlw	0
 10066  0EB1  00B4               	movwf	??_compensate_humidity+2
 10067  0EB2  3000               	movlw	0
 10068  0EB3  00B5               	movwf	??_compensate_humidity+3
 10069  0EB4  082E               	movf	compensate_humidity@calib_data,w
 10070  0EB5  3E19               	addlw	25
 10071  0EB6  0086               	movwf	6
 10072  0EB7  3001               	movlw	1	; select bank2/3
 10073  0EB8  0087               	movwf	7
 10074  0EB9  3F40               	moviw [0]fsr1
 10075  0EBA  00B6               	movwf	??_compensate_humidity+4
 10076  0EBB  3F41               	moviw [1]fsr1
 10077  0EBC  00B7               	movwf	??_compensate_humidity+5
 10078  0EBD  0836               	movf	??_compensate_humidity+4,w
 10079  0EBE  00F0               	movwf	___lmul@multiplier
 10080  0EBF  0837               	movf	??_compensate_humidity+5,w
 10081  0EC0  00F1               	movwf	___lmul@multiplier+1
 10082  0EC1  0D89               	rlf	9,f
 10083  0EC2  3B89               	subwfb	9,f
 10084  0EC3  0989               	comf	9,f
 10085  0EC4  00F2               	movwf	___lmul@multiplier+2
 10086  0EC5  00F3               	movwf	___lmul@multiplier+3
 10087  0EC6  0852               	movf	compensate_humidity@var4+3,w
 10088  0EC7  00F7               	movwf	___lmul@multiplicand+3
 10089  0EC8  0851               	movf	compensate_humidity@var4+2,w
 10090  0EC9  00F6               	movwf	___lmul@multiplicand+2
 10091  0ECA  0850               	movf	compensate_humidity@var4+1,w
 10092  0ECB  00F5               	movwf	___lmul@multiplicand+1
 10093  0ECC  084F               	movf	compensate_humidity@var4,w
 10094  0ECD  00F4               	movwf	___lmul@multiplicand
 10095  0ECE  319C  2491  318D   	fcall	___lmul
 10096  0ED1  0870               	movf	?___lmul,w
 10097  0ED2  0020               	movlb	0	; select bank0
 10098  0ED3  07B2               	addwf	??_compensate_humidity,f
 10099  0ED4  0871               	movf	?___lmul+1,w
 10100  0ED5  3DB3               	addwfc	??_compensate_humidity+1,f
 10101  0ED6  0872               	movf	?___lmul+2,w
 10102  0ED7  3DB4               	addwfc	??_compensate_humidity+2,f
 10103  0ED8  0873               	movf	?___lmul+3,w
 10104  0ED9  3DB5               	addwfc	??_compensate_humidity+3,f
 10105  0EDA  0835               	movf	??_compensate_humidity+3,w
 10106  0EDB  00A7               	movwf	___aldiv@dividend+3
 10107  0EDC  0834               	movf	??_compensate_humidity+2,w
 10108  0EDD  00A6               	movwf	___aldiv@dividend+2
 10109  0EDE  0833               	movf	??_compensate_humidity+1,w
 10110  0EDF  00A5               	movwf	___aldiv@dividend+1
 10111  0EE0  0832               	movf	??_compensate_humidity,w
 10112  0EE1  00A4               	movwf	___aldiv@dividend
 10113  0EE2  3196  265B  318D   	fcall	___aldiv
 10114  0EE5  0823               	movf	?___aldiv+3,w
 10115  0EE6  00CE               	movwf	compensate_humidity@var2+3
 10116  0EE7  0822               	movf	?___aldiv+2,w
 10117  0EE8  00CD               	movwf	compensate_humidity@var2+2
 10118  0EE9  0821               	movf	?___aldiv+1,w
 10119  0EEA  00CC               	movwf	compensate_humidity@var2+1
 10120  0EEB  0820               	movf	?___aldiv,w
 10121  0EEC  00CB               	movwf	compensate_humidity@var2
 10122                           
 10123                           ;BME280_driver/bme280.c: 1288:     var3 = var5 * var2;
 10124  0EED  0856               	movf	compensate_humidity@var5+3,w
 10125  0EEE  00F3               	movwf	___lmul@multiplier+3
 10126  0EEF  0855               	movf	compensate_humidity@var5+2,w
 10127  0EF0  00F2               	movwf	___lmul@multiplier+2
 10128  0EF1  0854               	movf	compensate_humidity@var5+1,w
 10129  0EF2  00F1               	movwf	___lmul@multiplier+1
 10130  0EF3  0853               	movf	compensate_humidity@var5,w
 10131  0EF4  00F0               	movwf	___lmul@multiplier
 10132  0EF5  084E               	movf	compensate_humidity@var2+3,w
 10133  0EF6  00F7               	movwf	___lmul@multiplicand+3
 10134  0EF7  084D               	movf	compensate_humidity@var2+2,w
 10135  0EF8  00F6               	movwf	___lmul@multiplicand+2
 10136  0EF9  084C               	movf	compensate_humidity@var2+1,w
 10137  0EFA  00F5               	movwf	___lmul@multiplicand+1
 10138  0EFB  084B               	movf	compensate_humidity@var2,w
 10139  0EFC  00F4               	movwf	___lmul@multiplicand
 10140  0EFD  319C  2491  318D   	fcall	___lmul
 10141  0F00  0873               	movf	?___lmul+3,w
 10142  0F01  0020               	movlb	0	; select bank0
 10143  0F02  00DA               	movwf	compensate_humidity@var3+3
 10144  0F03  0872               	movf	?___lmul+2,w
 10145  0F04  00D9               	movwf	compensate_humidity@var3+2
 10146  0F05  0871               	movf	?___lmul+1,w
 10147  0F06  00D8               	movwf	compensate_humidity@var3+1
 10148  0F07  0870               	movf	?___lmul,w
 10149  0F08  00D7               	movwf	compensate_humidity@var3
 10150                           
 10151                           ;BME280_driver/bme280.c: 1289:     var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 10152  0F09  3000               	movlw	0
 10153  0F0A  00A3               	movwf	___aldiv@divisor+3
 10154  0F0B  3000               	movlw	0
 10155  0F0C  00A2               	movwf	___aldiv@divisor+2
 10156  0F0D  3080               	movlw	128
 10157  0F0E  00A1               	movwf	___aldiv@divisor+1
 10158  0F0F  3000               	movlw	0
 10159  0F10  00A0               	movwf	___aldiv@divisor
 10160  0F11  085A               	movf	compensate_humidity@var3+3,w
 10161  0F12  00A7               	movwf	___aldiv@dividend+3
 10162  0F13  0859               	movf	compensate_humidity@var3+2,w
 10163  0F14  00A6               	movwf	___aldiv@dividend+2
 10164  0F15  0858               	movf	compensate_humidity@var3+1,w
 10165  0F16  00A5               	movwf	___aldiv@dividend+1
 10166  0F17  0857               	movf	compensate_humidity@var3,w
 10167  0F18  00A4               	movwf	___aldiv@dividend
 10168  0F19  3196  265B  318D   	fcall	___aldiv
 10169  0F1C  0823               	movf	?___aldiv+3,w
 10170  0F1D  00F3               	movwf	___lmul@multiplier+3
 10171  0F1E  0822               	movf	?___aldiv+2,w
 10172  0F1F  00F2               	movwf	___lmul@multiplier+2
 10173  0F20  0821               	movf	?___aldiv+1,w
 10174  0F21  00F1               	movwf	___lmul@multiplier+1
 10175  0F22  0820               	movf	?___aldiv,w
 10176  0F23  00F0               	movwf	___lmul@multiplier
 10177  0F24  3000               	movlw	0
 10178  0F25  00A3               	movwf	___aldiv@divisor+3
 10179  0F26  3000               	movlw	0
 10180  0F27  00A2               	movwf	___aldiv@divisor+2
 10181  0F28  3080               	movlw	128
 10182  0F29  00A1               	movwf	___aldiv@divisor+1
 10183  0F2A  3000               	movlw	0
 10184  0F2B  00A0               	movwf	___aldiv@divisor
 10185  0F2C  085A               	movf	compensate_humidity@var3+3,w
 10186  0F2D  00A7               	movwf	___aldiv@dividend+3
 10187  0F2E  0859               	movf	compensate_humidity@var3+2,w
 10188  0F2F  00A6               	movwf	___aldiv@dividend+2
 10189  0F30  0858               	movf	compensate_humidity@var3+1,w
 10190  0F31  00A5               	movwf	___aldiv@dividend+1
 10191  0F32  0857               	movf	compensate_humidity@var3,w
 10192  0F33  00A4               	movwf	___aldiv@dividend
 10193  0F34  3196  265B  318D   	fcall	___aldiv
 10194  0F37  0823               	movf	?___aldiv+3,w
 10195  0F38  00F7               	movwf	___lmul@multiplicand+3
 10196  0F39  0822               	movf	?___aldiv+2,w
 10197  0F3A  00F6               	movwf	___lmul@multiplicand+2
 10198  0F3B  0821               	movf	?___aldiv+1,w
 10199  0F3C  00F5               	movwf	___lmul@multiplicand+1
 10200  0F3D  0820               	movf	?___aldiv,w
 10201  0F3E  00F4               	movwf	___lmul@multiplicand
 10202  0F3F  319C  2491  318D   	fcall	___lmul
 10203  0F42  0873               	movf	?___lmul+3,w
 10204  0F43  0020               	movlb	0	; select bank0
 10205  0F44  00BD               	movwf	_compensate_humidity$2266+3
 10206  0F45  0872               	movf	?___lmul+2,w
 10207  0F46  00BC               	movwf	_compensate_humidity$2266+2
 10208  0F47  0871               	movf	?___lmul+1,w
 10209  0F48  00BB               	movwf	_compensate_humidity$2266+1
 10210  0F49  0870               	movf	?___lmul,w
 10211  0F4A  00BA               	movwf	_compensate_humidity$2266
 10212                           
 10213                           ;BME280_driver/bme280.c: 1289:     var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 10214  0F4B  3000               	movlw	0
 10215  0F4C  00A3               	movwf	___aldiv@divisor+3
 10216  0F4D  3000               	movlw	0
 10217  0F4E  00A2               	movwf	___aldiv@divisor+2
 10218  0F4F  3000               	movlw	0
 10219  0F50  00A1               	movwf	___aldiv@divisor+1
 10220  0F51  3080               	movlw	128
 10221  0F52  00A0               	movwf	___aldiv@divisor
 10222  0F53  083D               	movf	_compensate_humidity$2266+3,w
 10223  0F54  00A7               	movwf	___aldiv@dividend+3
 10224  0F55  083C               	movf	_compensate_humidity$2266+2,w
 10225  0F56  00A6               	movwf	___aldiv@dividend+2
 10226  0F57  083B               	movf	_compensate_humidity$2266+1,w
 10227  0F58  00A5               	movwf	___aldiv@dividend+1
 10228  0F59  083A               	movf	_compensate_humidity$2266,w
 10229  0F5A  00A4               	movwf	___aldiv@dividend
 10230  0F5B  3196  265B  318D   	fcall	___aldiv
 10231  0F5E  0823               	movf	?___aldiv+3,w
 10232  0F5F  00D2               	movwf	compensate_humidity@var4+3
 10233  0F60  0822               	movf	?___aldiv+2,w
 10234  0F61  00D1               	movwf	compensate_humidity@var4+2
 10235  0F62  0821               	movf	?___aldiv+1,w
 10236  0F63  00D0               	movwf	compensate_humidity@var4+1
 10237  0F64  0820               	movf	?___aldiv,w
 10238  0F65  00CF               	movwf	compensate_humidity@var4
 10239                           
 10240                           ;BME280_driver/bme280.c: 1290:     var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1))
      +                           / 16);
 10241  0F66  3000               	movlw	0
 10242  0F67  00A3               	movwf	___aldiv@divisor+3
 10243  0F68  3000               	movlw	0
 10244  0F69  00A2               	movwf	___aldiv@divisor+2
 10245  0F6A  3000               	movlw	0
 10246  0F6B  00A1               	movwf	___aldiv@divisor+1
 10247  0F6C  3010               	movlw	16
 10248  0F6D  00A0               	movwf	___aldiv@divisor
 10249  0F6E  082E               	movf	compensate_humidity@calib_data,w
 10250  0F6F  3E18               	addlw	24
 10251  0F70  0086               	movwf	6
 10252  0F71  3001               	movlw	1	; select bank2/3
 10253  0F72  0087               	movwf	7
 10254  0F73  0801               	movf	1,w
 10255  0F74  00B2               	movwf	??_compensate_humidity
 10256  0F75  01B3               	clrf	??_compensate_humidity+1
 10257  0F76  01B4               	clrf	??_compensate_humidity+2
 10258  0F77  01B5               	clrf	??_compensate_humidity+3
 10259  0F78  0835               	movf	??_compensate_humidity+3,w
 10260  0F79  00F3               	movwf	___lmul@multiplier+3
 10261  0F7A  0834               	movf	??_compensate_humidity+2,w
 10262  0F7B  00F2               	movwf	___lmul@multiplier+2
 10263  0F7C  0833               	movf	??_compensate_humidity+1,w
 10264  0F7D  00F1               	movwf	___lmul@multiplier+1
 10265  0F7E  0832               	movf	??_compensate_humidity,w
 10266  0F7F  00F0               	movwf	___lmul@multiplier
 10267  0F80  0852               	movf	compensate_humidity@var4+3,w
 10268  0F81  00F7               	movwf	___lmul@multiplicand+3
 10269  0F82  0851               	movf	compensate_humidity@var4+2,w
 10270  0F83  00F6               	movwf	___lmul@multiplicand+2
 10271  0F84  0850               	movf	compensate_humidity@var4+1,w
 10272  0F85  00F5               	movwf	___lmul@multiplicand+1
 10273  0F86  084F               	movf	compensate_humidity@var4,w
 10274  0F87  00F4               	movwf	___lmul@multiplicand
 10275  0F88  319C  2491  318D   	fcall	___lmul
 10276  0F8B  0873               	movf	?___lmul+3,w
 10277  0F8C  0020               	movlb	0	; select bank0
 10278  0F8D  00A7               	movwf	___aldiv@dividend+3
 10279  0F8E  0872               	movf	?___lmul+2,w
 10280  0F8F  00A6               	movwf	___aldiv@dividend+2
 10281  0F90  0871               	movf	?___lmul+1,w
 10282  0F91  00A5               	movwf	___aldiv@dividend+1
 10283  0F92  0870               	movf	?___lmul,w
 10284  0F93  00A4               	movwf	___aldiv@dividend
 10285  0F94  3196  265B  318D   	fcall	___aldiv
 10286  0F97  0820               	movf	?___aldiv,w
 10287  0F98  0257               	subwf	compensate_humidity@var3,w
 10288  0F99  00B6               	movwf	??_compensate_humidity+4
 10289  0F9A  0821               	movf	?___aldiv+1,w
 10290  0F9B  3B58               	subwfb	compensate_humidity@var3+1,w
 10291  0F9C  00B7               	movwf	??_compensate_humidity+5
 10292  0F9D  0822               	movf	?___aldiv+2,w
 10293  0F9E  3B59               	subwfb	compensate_humidity@var3+2,w
 10294  0F9F  00B8               	movwf	??_compensate_humidity+6
 10295  0FA0  0823               	movf	?___aldiv+3,w
 10296  0FA1  3B5A               	subwfb	compensate_humidity@var3+3,w
 10297  0FA2  00B9               	movwf	??_compensate_humidity+7
 10298  0FA3  0839               	movf	??_compensate_humidity+7,w
 10299  0FA4  00D6               	movwf	compensate_humidity@var5+3
 10300  0FA5  0838               	movf	??_compensate_humidity+6,w
 10301  0FA6  00D5               	movwf	compensate_humidity@var5+2
 10302  0FA7  0837               	movf	??_compensate_humidity+5,w
 10303  0FA8  00D4               	movwf	compensate_humidity@var5+1
 10304  0FA9  0836               	movf	??_compensate_humidity+4,w
 10305  0FAA  00D3               	movwf	compensate_humidity@var5
 10306                           
 10307                           ;BME280_driver/bme280.c: 1291:     var5 = (var5 < 0 ? 0 : var5);
 10308  0FAB  1FD6               	btfss	compensate_humidity@var5+3,7
 10309  0FAC  2FB5               	goto	l4384
 10310  0FAD  3000               	movlw	0
 10311  0FAE  00D6               	movwf	compensate_humidity@var5+3
 10312  0FAF  3000               	movlw	0
 10313  0FB0  00D5               	movwf	compensate_humidity@var5+2
 10314  0FB1  3000               	movlw	0
 10315  0FB2  00D4               	movwf	compensate_humidity@var5+1
 10316  0FB3  3000               	movlw	0
 10317  0FB4  00D3               	movwf	compensate_humidity@var5
 10318  0FB5                     l4384:	
 10319                           
 10320                           ;BME280_driver/bme280.c: 1292:     var5 = (var5 > 419430400 ? 419430400 : var5);
 10321  0FB5  1BD6               	btfsc	compensate_humidity@var5+3,7
 10322  0FB6  2FC9               	goto	l4390
 10323  0FB7  3001               	movlw	1
 10324  0FB8  0253               	subwf	compensate_humidity@var5,w
 10325  0FB9  3000               	movlw	0
 10326  0FBA  3B54               	subwfb	compensate_humidity@var5+1,w
 10327  0FBB  3000               	movlw	0
 10328  0FBC  3B55               	subwfb	compensate_humidity@var5+2,w
 10329  0FBD  3019               	movlw	25
 10330  0FBE  3B56               	subwfb	compensate_humidity@var5+3,w
 10331  0FBF  1C03               	btfss	3,0
 10332  0FC0  2FC9               	goto	l4390
 10333  0FC1  3019               	movlw	25
 10334  0FC2  00D6               	movwf	compensate_humidity@var5+3
 10335  0FC3  3000               	movlw	0
 10336  0FC4  00D5               	movwf	compensate_humidity@var5+2
 10337  0FC5  3000               	movlw	0
 10338  0FC6  00D4               	movwf	compensate_humidity@var5+1
 10339  0FC7  3000               	movlw	0
 10340  0FC8  00D3               	movwf	compensate_humidity@var5
 10341  0FC9                     l4390:	
 10342                           
 10343                           ;BME280_driver/bme280.c: 1293:     humidity = (uint32_t)(var5 / 4096);
 10344  0FC9  3000               	movlw	0
 10345  0FCA  00A3               	movwf	___aldiv@divisor+3
 10346  0FCB  3000               	movlw	0
 10347  0FCC  00A2               	movwf	___aldiv@divisor+2
 10348  0FCD  3010               	movlw	16
 10349  0FCE  00A1               	movwf	___aldiv@divisor+1
 10350  0FCF  3000               	movlw	0
 10351  0FD0  00A0               	movwf	___aldiv@divisor
 10352  0FD1  0856               	movf	compensate_humidity@var5+3,w
 10353  0FD2  00A7               	movwf	___aldiv@dividend+3
 10354  0FD3  0855               	movf	compensate_humidity@var5+2,w
 10355  0FD4  00A6               	movwf	___aldiv@dividend+2
 10356  0FD5  0854               	movf	compensate_humidity@var5+1,w
 10357  0FD6  00A5               	movwf	___aldiv@dividend+1
 10358  0FD7  0853               	movf	compensate_humidity@var5,w
 10359  0FD8  00A4               	movwf	___aldiv@dividend
 10360  0FD9  3196  265B  318D   	fcall	___aldiv
 10361  0FDC  0823               	movf	?___aldiv+3,w
 10362  0FDD  00C6               	movwf	compensate_humidity@humidity+3
 10363  0FDE  0822               	movf	?___aldiv+2,w
 10364  0FDF  00C5               	movwf	compensate_humidity@humidity+2
 10365  0FE0  0821               	movf	?___aldiv+1,w
 10366  0FE1  00C4               	movwf	compensate_humidity@humidity+1
 10367  0FE2  0820               	movf	?___aldiv,w
 10368  0FE3  00C3               	movwf	compensate_humidity@humidity
 10369                           
 10370                           ;BME280_driver/bme280.c: 1294:     if (humidity > humidity_max)
 10371  0FE4  0846               	movf	compensate_humidity@humidity+3,w
 10372  0FE5  1D03               	btfss	3,2
 10373  0FE6  2FEF               	goto	l4394
 10374  0FE7  3001               	movlw	1
 10375  0FE8  0243               	subwf	compensate_humidity@humidity,w
 10376  0FE9  3090               	movlw	144
 10377  0FEA  3B44               	subwfb	compensate_humidity@humidity+1,w
 10378  0FEB  3001               	movlw	1
 10379  0FEC  3B45               	subwfb	compensate_humidity@humidity+2,w
 10380  0FED  1C03               	btfss	3,0
 10381  0FEE  2FF7               	goto	l208
 10382  0FEF                     l4394:	
 10383                           
 10384                           ;BME280_driver/bme280.c: 1295:     {;BME280_driver/bme280.c: 1296:         humidity = hu
      +                          midity_max;
 10385  0FEF  3000               	movlw	0
 10386  0FF0  00C6               	movwf	compensate_humidity@humidity+3
 10387  0FF1  3001               	movlw	1
 10388  0FF2  00C5               	movwf	compensate_humidity@humidity+2
 10389  0FF3  3090               	movlw	144
 10390  0FF4  00C4               	movwf	compensate_humidity@humidity+1
 10391  0FF5  3000               	movlw	0
 10392  0FF6  00C3               	movwf	compensate_humidity@humidity
 10393  0FF7                     l208:	
 10394                           ;BME280_driver/bme280.c: 1297:     }
 10395                           
 10396                           
 10397                           ;BME280_driver/bme280.c: 1299:     return humidity;
 10398  0FF7  0846               	movf	compensate_humidity@humidity+3,w
 10399  0FF8  00B1               	movwf	?_compensate_humidity+3
 10400  0FF9  0845               	movf	compensate_humidity@humidity+2,w
 10401  0FFA  00B0               	movwf	?_compensate_humidity+2
 10402  0FFB  0844               	movf	compensate_humidity@humidity+1,w
 10403  0FFC  00AF               	movwf	?_compensate_humidity+1
 10404  0FFD  0843               	movf	compensate_humidity@humidity,w
 10405  0FFE  00AE               	movwf	?_compensate_humidity
 10406  0FFF  0008               	return
 10407  1000                     __end_of_compensate_humidity:	
 10408                           
 10409                           	psect	text9
 10410  1C91                     __ptext9:	
 10411 ;; *************** function ___lmul *****************
 10412 ;; Defined at:
 10413 ;;		line 15 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\Umul32.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;  multiplier      4    0[COMMON] unsigned long 
 10416 ;;  multiplicand    4    4[COMMON] unsigned long 
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;  product         4    8[COMMON] unsigned long 
 10419 ;; Return value:  Size  Location     Type
 10420 ;;                  4    0[COMMON] unsigned long 
 10421 ;; Registers used:
 10422 ;;		wreg, status,2, status,0
 10423 ;; Tracked objects:
 10424 ;;		On entry : 1E/0
 10425 ;;		On exit  : 1E/0
 10426 ;;		Unchanged: 1E/0
 10427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10428 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;Total ram usage:       12 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; Hardware stack levels required when called:    3
 10435 ;; This function calls:
 10436 ;;		Nothing
 10437 ;; This function is called by:
 10438 ;;		_compensate_temperature
 10439 ;;		_compensate_pressure
 10440 ;;		_compensate_humidity
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           
 10445                           ;psect for function ___lmul
 10446  1C91                     ___lmul:	
 10447                           
 10448                           ;incstack = 0
 10449                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10450  1C91  3000               	movlw	0
 10451  1C92  00FB               	movwf	___lmul@product+3
 10452  1C93  3000               	movlw	0
 10453  1C94  00FA               	movwf	___lmul@product+2
 10454  1C95  3000               	movlw	0
 10455  1C96  00F9               	movwf	___lmul@product+1
 10456  1C97  3000               	movlw	0
 10457  1C98  00F8               	movwf	___lmul@product
 10458  1C99                     l2904:	
 10459  1C99  1C70               	btfss	___lmul@multiplier,0
 10460  1C9A  2CA3               	goto	l2908
 10461  1C9B  0874               	movf	___lmul@multiplicand,w
 10462  1C9C  07F8               	addwf	___lmul@product,f
 10463  1C9D  0875               	movf	___lmul@multiplicand+1,w
 10464  1C9E  3DF9               	addwfc	___lmul@product+1,f
 10465  1C9F  0876               	movf	___lmul@multiplicand+2,w
 10466  1CA0  3DFA               	addwfc	___lmul@product+2,f
 10467  1CA1  0877               	movf	___lmul@multiplicand+3,w
 10468  1CA2  3DFB               	addwfc	___lmul@product+3,f
 10469  1CA3                     l2908:	
 10470  1CA3  3001               	movlw	1
 10471  1CA4                     u2545:	
 10472  1CA4  35F4               	lslf	___lmul@multiplicand,f
 10473  1CA5  0DF5               	rlf	___lmul@multiplicand+1,f
 10474  1CA6  0DF6               	rlf	___lmul@multiplicand+2,f
 10475  1CA7  0DF7               	rlf	___lmul@multiplicand+3,f
 10476  1CA8  0B89               	decfsz	9,f
 10477  1CA9  2CA4               	goto	u2545
 10478  1CAA  3001               	movlw	1
 10479  1CAB                     u2555:	
 10480  1CAB  36F3               	lsrf	___lmul@multiplier+3,f
 10481  1CAC  0CF2               	rrf	___lmul@multiplier+2,f
 10482  1CAD  0CF1               	rrf	___lmul@multiplier+1,f
 10483  1CAE  0CF0               	rrf	___lmul@multiplier,f
 10484  1CAF  0B89               	decfsz	9,f
 10485  1CB0  2CAB               	goto	u2555
 10486  1CB1  0873               	movf	___lmul@multiplier+3,w
 10487  1CB2  0472               	iorwf	___lmul@multiplier+2,w
 10488  1CB3  0471               	iorwf	___lmul@multiplier+1,w
 10489  1CB4  0470               	iorwf	___lmul@multiplier,w
 10490  1CB5  1D03               	skipz
 10491  1CB6  2C99               	goto	l2904
 10492  1CB7  087B               	movf	___lmul@product+3,w
 10493  1CB8  00F3               	movwf	?___lmul+3
 10494  1CB9  087A               	movf	___lmul@product+2,w
 10495  1CBA  00F2               	movwf	?___lmul+2
 10496  1CBB  0879               	movf	___lmul@product+1,w
 10497  1CBC  00F1               	movwf	?___lmul+1
 10498  1CBD  0878               	movf	___lmul@product,w
 10499  1CBE  00F0               	movwf	?___lmul
 10500  1CBF  0008               	return
 10501  1CC0                     __end_of___lmul:	
 10502                           
 10503                           	psect	text10
 10504  165B                     __ptext10:	
 10505 ;; *************** function ___aldiv *****************
 10506 ;; Defined at:
 10507 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aldiv.c"
 10508 ;; Parameters:    Size  Location     Type
 10509 ;;  divisor         4    0[BANK0 ] long 
 10510 ;;  dividend        4    4[BANK0 ] long 
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;  quotient        4   10[BANK0 ] long 
 10513 ;;  sign            1    9[BANK0 ] unsigned char 
 10514 ;;  counter         1    8[BANK0 ] unsigned char 
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  4    0[BANK0 ] long 
 10517 ;; Registers used:
 10518 ;;		wreg, status,2, status,0
 10519 ;; Tracked objects:
 10520 ;;		On entry : 1F/0
 10521 ;;		On exit  : 1F/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10524 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;Total ram usage:       15 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    3
 10531 ;; This function calls:
 10532 ;;		Nothing
 10533 ;; This function is called by:
 10534 ;;		_compensate_temperature
 10535 ;;		_compensate_pressure
 10536 ;;		_compensate_humidity
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           
 10541                           ;psect for function ___aldiv
 10542  165B                     ___aldiv:	
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10546  165B  01A9               	clrf	___aldiv@sign
 10547  165C  1FA3               	btfss	___aldiv@divisor+3,7
 10548  165D  2E6B               	goto	l865
 10549  165E  09A0               	comf	___aldiv@divisor,f
 10550  165F  09A1               	comf	___aldiv@divisor+1,f
 10551  1660  09A2               	comf	___aldiv@divisor+2,f
 10552  1661  09A3               	comf	___aldiv@divisor+3,f
 10553  1662  0AA0               	incf	___aldiv@divisor,f
 10554  1663  1903               	skipnz
 10555  1664  0AA1               	incf	___aldiv@divisor+1,f
 10556  1665  1903               	skipnz
 10557  1666  0AA2               	incf	___aldiv@divisor+2,f
 10558  1667  1903               	skipnz
 10559  1668  0AA3               	incf	___aldiv@divisor+3,f
 10560  1669  01A9               	clrf	___aldiv@sign
 10561  166A  0AA9               	incf	___aldiv@sign,f
 10562  166B                     l865:	
 10563  166B  1FA7               	btfss	___aldiv@dividend+3,7
 10564  166C  2E7C               	goto	l2950
 10565  166D  09A4               	comf	___aldiv@dividend,f
 10566  166E  09A5               	comf	___aldiv@dividend+1,f
 10567  166F  09A6               	comf	___aldiv@dividend+2,f
 10568  1670  09A7               	comf	___aldiv@dividend+3,f
 10569  1671  0AA4               	incf	___aldiv@dividend,f
 10570  1672  1903               	skipnz
 10571  1673  0AA5               	incf	___aldiv@dividend+1,f
 10572  1674  1903               	skipnz
 10573  1675  0AA6               	incf	___aldiv@dividend+2,f
 10574  1676  1903               	skipnz
 10575  1677  0AA7               	incf	___aldiv@dividend+3,f
 10576  1678  3001               	movlw	1
 10577  1679  00FC               	movwf	??___aldiv
 10578  167A  087C               	movf	??___aldiv,w
 10579  167B  06A9               	xorwf	___aldiv@sign,f
 10580  167C                     l2950:	
 10581  167C  3000               	movlw	0
 10582  167D  00AD               	movwf	___aldiv@quotient+3
 10583  167E  3000               	movlw	0
 10584  167F  00AC               	movwf	___aldiv@quotient+2
 10585  1680  3000               	movlw	0
 10586  1681  00AB               	movwf	___aldiv@quotient+1
 10587  1682  3000               	movlw	0
 10588  1683  00AA               	movwf	___aldiv@quotient
 10589  1684  0823               	movf	___aldiv@divisor+3,w
 10590  1685  0422               	iorwf	___aldiv@divisor+2,w
 10591  1686  0421               	iorwf	___aldiv@divisor+1,w
 10592  1687  0420               	iorwf	___aldiv@divisor,w
 10593  1688  1903               	skipnz
 10594  1689  2EC5               	goto	l2972
 10595  168A  01A8               	clrf	___aldiv@counter
 10596  168B  0AA8               	incf	___aldiv@counter,f
 10597  168C                     l2958:	
 10598  168C  1BA3               	btfsc	___aldiv@divisor+3,7
 10599  168D  2E9A               	goto	l2960
 10600  168E  3001               	movlw	1
 10601  168F                     u2675:	
 10602  168F  35A0               	lslf	___aldiv@divisor,f
 10603  1690  0DA1               	rlf	___aldiv@divisor+1,f
 10604  1691  0DA2               	rlf	___aldiv@divisor+2,f
 10605  1692  0DA3               	rlf	___aldiv@divisor+3,f
 10606  1693  0B89               	decfsz	9,f
 10607  1694  2E8F               	goto	u2675
 10608  1695  3001               	movlw	1
 10609  1696  00FC               	movwf	??___aldiv
 10610  1697  087C               	movf	??___aldiv,w
 10611  1698  07A8               	addwf	___aldiv@counter,f
 10612  1699  2E8C               	goto	l2958
 10613  169A                     l2960:	
 10614  169A  3001               	movlw	1
 10615  169B                     u2695:	
 10616  169B  35AA               	lslf	___aldiv@quotient,f
 10617  169C  0DAB               	rlf	___aldiv@quotient+1,f
 10618  169D  0DAC               	rlf	___aldiv@quotient+2,f
 10619  169E  0DAD               	rlf	___aldiv@quotient+3,f
 10620  169F  0B89               	decfsz	9,f
 10621  16A0  2E9B               	goto	u2695
 10622  16A1  0823               	movf	___aldiv@divisor+3,w
 10623  16A2  0227               	subwf	___aldiv@dividend+3,w
 10624  16A3  1D03               	skipz
 10625  16A4  2EAF               	goto	u2705
 10626  16A5  0822               	movf	___aldiv@divisor+2,w
 10627  16A6  0226               	subwf	___aldiv@dividend+2,w
 10628  16A7  1D03               	skipz
 10629  16A8  2EAF               	goto	u2705
 10630  16A9  0821               	movf	___aldiv@divisor+1,w
 10631  16AA  0225               	subwf	___aldiv@dividend+1,w
 10632  16AB  1D03               	skipz
 10633  16AC  2EAF               	goto	u2705
 10634  16AD  0820               	movf	___aldiv@divisor,w
 10635  16AE  0224               	subwf	___aldiv@dividend,w
 10636  16AF                     u2705:	
 10637  16AF  1C03               	skipc
 10638  16B0  2EBA               	goto	l2968
 10639  16B1  0820               	movf	___aldiv@divisor,w
 10640  16B2  02A4               	subwf	___aldiv@dividend,f
 10641  16B3  0821               	movf	___aldiv@divisor+1,w
 10642  16B4  3BA5               	subwfb	___aldiv@dividend+1,f
 10643  16B5  0822               	movf	___aldiv@divisor+2,w
 10644  16B6  3BA6               	subwfb	___aldiv@dividend+2,f
 10645  16B7  0823               	movf	___aldiv@divisor+3,w
 10646  16B8  3BA7               	subwfb	___aldiv@dividend+3,f
 10647  16B9  142A               	bsf	___aldiv@quotient,0
 10648  16BA                     l2968:	
 10649  16BA  3001               	movlw	1
 10650  16BB                     u2715:	
 10651  16BB  36A3               	lsrf	___aldiv@divisor+3,f
 10652  16BC  0CA2               	rrf	___aldiv@divisor+2,f
 10653  16BD  0CA1               	rrf	___aldiv@divisor+1,f
 10654  16BE  0CA0               	rrf	___aldiv@divisor,f
 10655  16BF  0B89               	decfsz	9,f
 10656  16C0  2EBB               	goto	u2715
 10657  16C1  3001               	movlw	1
 10658  16C2  02A8               	subwf	___aldiv@counter,f
 10659  16C3  1D03               	btfss	3,2
 10660  16C4  2E9A               	goto	l2960
 10661  16C5                     l2972:	
 10662  16C5  0829               	movf	___aldiv@sign,w
 10663  16C6  1903               	btfsc	3,2
 10664  16C7  2ED3               	goto	l2976
 10665  16C8  09AA               	comf	___aldiv@quotient,f
 10666  16C9  09AB               	comf	___aldiv@quotient+1,f
 10667  16CA  09AC               	comf	___aldiv@quotient+2,f
 10668  16CB  09AD               	comf	___aldiv@quotient+3,f
 10669  16CC  0AAA               	incf	___aldiv@quotient,f
 10670  16CD  1903               	skipnz
 10671  16CE  0AAB               	incf	___aldiv@quotient+1,f
 10672  16CF  1903               	skipnz
 10673  16D0  0AAC               	incf	___aldiv@quotient+2,f
 10674  16D1  1903               	skipnz
 10675  16D2  0AAD               	incf	___aldiv@quotient+3,f
 10676  16D3                     l2976:	
 10677  16D3  082D               	movf	___aldiv@quotient+3,w
 10678  16D4  00A3               	movwf	?___aldiv+3
 10679  16D5  082C               	movf	___aldiv@quotient+2,w
 10680  16D6  00A2               	movwf	?___aldiv+2
 10681  16D7  082B               	movf	___aldiv@quotient+1,w
 10682  16D8  00A1               	movwf	?___aldiv+1
 10683  16D9  082A               	movf	___aldiv@quotient,w
 10684  16DA  00A0               	movwf	?___aldiv
 10685  16DB  0008               	return
 10686  16DC                     __end_of___aldiv:	
 10687                           
 10688                           	psect	text11
 10689  1188                     __ptext11:	
 10690 ;; *************** function _UIntToString *****************
 10691 ;; Defined at:
 10692 ;;		line 175 in file "main.c"
 10693 ;; Parameters:    Size  Location     Type
 10694 ;;  n               4    9[BANK0 ] unsigned long 
 10695 ;;  dest            1   13[BANK0 ] PTR unsigned char 
 10696 ;;		 -> main@convertedNumber(16), 
 10697 ;; Auto vars:     Size  Location     Type
 10698 ;;  i               2   16[BANK0 ] int 
 10699 ;; Return value:  Size  Location     Type
 10700 ;;                  1    wreg      void 
 10701 ;; Registers used:
 10702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10703 ;; Tracked objects:
 10704 ;;		On entry : 1F/0
 10705 ;;		On exit  : 1F/0
 10706 ;;		Unchanged: 0/0
 10707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10708 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;Total ram usage:        9 bytes
 10713 ;; Hardware stack levels used:    1
 10714 ;; Hardware stack levels required when called:    5
 10715 ;; This function calls:
 10716 ;;		_ReverseString
 10717 ;;		___lldiv
 10718 ;;		___llmod
 10719 ;; This function is called by:
 10720 ;;		_main
 10721 ;; This function uses a non-reentrant model
 10722 ;;
 10723                           
 10724                           
 10725                           ;psect for function _UIntToString
 10726  1188                     _UIntToString:	
 10727                           
 10728                           ;main.c: 175: void UIntToString(uint32_t n, char* dest);main.c: 176: {;main.c: 177:     
      +                          int i = 0;
 10729                           
 10730                           ;incstack = 0
 10731                           ; Regs used in _UIntToString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10732  1188  01B0               	clrf	UIntToString@i
 10733  1189  01B1               	clrf	UIntToString@i+1
 10734  118A                     l3666:	
 10735                           
 10736                           ;main.c: 182:         dest[i++] = n % 10 + '0';
 10737  118A  3000               	movlw	0
 10738  118B  00F3               	movwf	___llmod@divisor+3
 10739  118C  3000               	movlw	0
 10740  118D  00F2               	movwf	___llmod@divisor+2
 10741  118E  3000               	movlw	0
 10742  118F  00F1               	movwf	___llmod@divisor+1
 10743  1190  300A               	movlw	10
 10744  1191  00F0               	movwf	___llmod@divisor
 10745  1192  082C               	movf	UIntToString@n+3,w
 10746  1193  00F7               	movwf	___llmod@dividend+3
 10747  1194  082B               	movf	UIntToString@n+2,w
 10748  1195  00F6               	movwf	___llmod@dividend+2
 10749  1196  082A               	movf	UIntToString@n+1,w
 10750  1197  00F5               	movwf	___llmod@dividend+1
 10751  1198  0829               	movf	UIntToString@n,w
 10752  1199  00F4               	movwf	___llmod@dividend
 10753  119A  319E  26E6  3191   	fcall	___llmod
 10754  119D  0870               	movf	?___llmod,w
 10755  119E  3E30               	addlw	48
 10756  119F  00AE               	movwf	??_UIntToString
 10757  11A0  0830               	movf	UIntToString@i,w
 10758  11A1  072D               	addwf	UIntToString@dest,w
 10759  11A2  00AF               	movwf	??_UIntToString+1
 10760  11A3  082F               	movf	??_UIntToString+1,w
 10761  11A4  0086               	movwf	6
 10762  11A5  3001               	movlw	1	; select bank2/3
 10763  11A6  0087               	movwf	7
 10764  11A7  082E               	movf	??_UIntToString,w
 10765  11A8  0081               	movwf	1
 10766  11A9  3001               	movlw	1
 10767  11AA  07B0               	addwf	UIntToString@i,f
 10768  11AB  3000               	movlw	0
 10769  11AC  3DB1               	addwfc	UIntToString@i+1,f
 10770                           
 10771                           ;main.c: 184:     } while ((n /= 10) > 0);
 10772  11AD  3000               	movlw	0
 10773  11AE  00F3               	movwf	___lldiv@divisor+3
 10774  11AF  3000               	movlw	0
 10775  11B0  00F2               	movwf	___lldiv@divisor+2
 10776  11B1  3000               	movlw	0
 10777  11B2  00F1               	movwf	___lldiv@divisor+1
 10778  11B3  300A               	movlw	10
 10779  11B4  00F0               	movwf	___lldiv@divisor
 10780  11B5  082C               	movf	UIntToString@n+3,w
 10781  11B6  00F7               	movwf	___lldiv@dividend+3
 10782  11B7  082B               	movf	UIntToString@n+2,w
 10783  11B8  00F6               	movwf	___lldiv@dividend+2
 10784  11B9  082A               	movf	UIntToString@n+1,w
 10785  11BA  00F5               	movwf	___lldiv@dividend+1
 10786  11BB  0829               	movf	UIntToString@n,w
 10787  11BC  00F4               	movwf	___lldiv@dividend
 10788  11BD  3191  2136  3191   	fcall	___lldiv
 10789  11C0  0873               	movf	?___lldiv+3,w
 10790  11C1  0020               	movlb	0	; select bank0
 10791  11C2  00AC               	movwf	UIntToString@n+3
 10792  11C3  0872               	movf	?___lldiv+2,w
 10793  11C4  00AB               	movwf	UIntToString@n+2
 10794  11C5  0871               	movf	?___lldiv+1,w
 10795  11C6  00AA               	movwf	UIntToString@n+1
 10796  11C7  0870               	movf	?___lldiv,w
 10797  11C8  00A9               	movwf	UIntToString@n
 10798  11C9  082C               	movf	UIntToString@n+3,w
 10799  11CA  042B               	iorwf	UIntToString@n+2,w
 10800  11CB  042A               	iorwf	UIntToString@n+1,w
 10801  11CC  0429               	iorwf	UIntToString@n,w
 10802  11CD  1D03               	skipz
 10803  11CE  298A               	goto	l3666
 10804                           
 10805                           ;main.c: 185:     dest[i] = '\0';
 10806  11CF  0830               	movf	UIntToString@i,w
 10807  11D0  072D               	addwf	UIntToString@dest,w
 10808  11D1  00AE               	movwf	??_UIntToString
 10809  11D2  082E               	movf	??_UIntToString,w
 10810  11D3  0086               	movwf	6
 10811  11D4  3001               	movlw	1	; select bank2/3
 10812  11D5  0087               	movwf	7
 10813  11D6  0181               	clrf	1
 10814                           
 10815                           ;main.c: 187:     ReverseString(dest);
 10816  11D7  082D               	movf	UIntToString@dest,w
 10817  11D8  3192  2290         	fcall	_ReverseString
 10818  11DA  0008               	return
 10819  11DB                     __end_of_UIntToString:	
 10820                           
 10821                           	psect	text12
 10822  1EE6                     __ptext12:	
 10823 ;; *************** function ___llmod *****************
 10824 ;; Defined at:
 10825 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\llmod.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;  divisor         4    0[COMMON] unsigned long 
 10828 ;;  dividend        4    4[COMMON] unsigned long 
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;  counter         1    9[COMMON] unsigned char 
 10831 ;; Return value:  Size  Location     Type
 10832 ;;                  4    0[COMMON] unsigned long 
 10833 ;; Registers used:
 10834 ;;		wreg, status,2, status,0
 10835 ;; Tracked objects:
 10836 ;;		On entry : 1F/0
 10837 ;;		On exit  : 1F/0
 10838 ;;		Unchanged: 1F/0
 10839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10840 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;Total ram usage:       10 bytes
 10845 ;; Hardware stack levels used:    1
 10846 ;; Hardware stack levels required when called:    3
 10847 ;; This function calls:
 10848 ;;		Nothing
 10849 ;; This function is called by:
 10850 ;;		_UIntToString
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function ___llmod
 10856  1EE6                     ___llmod:	
 10857                           
 10858                           ;incstack = 0
 10859                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 10860  1EE6  0873               	movf	___llmod@divisor+3,w
 10861  1EE7  0472               	iorwf	___llmod@divisor+2,w
 10862  1EE8  0471               	iorwf	___llmod@divisor+1,w
 10863  1EE9  0470               	iorwf	___llmod@divisor,w
 10864  1EEA  1903               	skipnz
 10865  1EEB  2F1F               	goto	l3560
 10866  1EEC  01F9               	clrf	___llmod@counter
 10867  1EED  0AF9               	incf	___llmod@counter,f
 10868  1EEE                     l3550:	
 10869  1EEE  1BF3               	btfsc	___llmod@divisor+3,7
 10870  1EEF  2EFC               	goto	l3552
 10871  1EF0  3001               	movlw	1
 10872  1EF1                     u3655:	
 10873  1EF1  35F0               	lslf	___llmod@divisor,f
 10874  1EF2  0DF1               	rlf	___llmod@divisor+1,f
 10875  1EF3  0DF2               	rlf	___llmod@divisor+2,f
 10876  1EF4  0DF3               	rlf	___llmod@divisor+3,f
 10877  1EF5  0B89               	decfsz	9,f
 10878  1EF6  2EF1               	goto	u3655
 10879  1EF7  3001               	movlw	1
 10880  1EF8  00F8               	movwf	??___llmod
 10881  1EF9  0878               	movf	??___llmod,w
 10882  1EFA  07F9               	addwf	___llmod@counter,f
 10883  1EFB  2EEE               	goto	l3550
 10884  1EFC                     l3552:	
 10885  1EFC  0873               	movf	___llmod@divisor+3,w
 10886  1EFD  0277               	subwf	___llmod@dividend+3,w
 10887  1EFE  1D03               	skipz
 10888  1EFF  2F0A               	goto	u3675
 10889  1F00  0872               	movf	___llmod@divisor+2,w
 10890  1F01  0276               	subwf	___llmod@dividend+2,w
 10891  1F02  1D03               	skipz
 10892  1F03  2F0A               	goto	u3675
 10893  1F04  0871               	movf	___llmod@divisor+1,w
 10894  1F05  0275               	subwf	___llmod@dividend+1,w
 10895  1F06  1D03               	skipz
 10896  1F07  2F0A               	goto	u3675
 10897  1F08  0870               	movf	___llmod@divisor,w
 10898  1F09  0274               	subwf	___llmod@dividend,w
 10899  1F0A                     u3675:	
 10900  1F0A  1C03               	skipc
 10901  1F0B  2F14               	goto	l3556
 10902  1F0C  0870               	movf	___llmod@divisor,w
 10903  1F0D  02F4               	subwf	___llmod@dividend,f
 10904  1F0E  0871               	movf	___llmod@divisor+1,w
 10905  1F0F  3BF5               	subwfb	___llmod@dividend+1,f
 10906  1F10  0872               	movf	___llmod@divisor+2,w
 10907  1F11  3BF6               	subwfb	___llmod@dividend+2,f
 10908  1F12  0873               	movf	___llmod@divisor+3,w
 10909  1F13  3BF7               	subwfb	___llmod@dividend+3,f
 10910  1F14                     l3556:	
 10911  1F14  3001               	movlw	1
 10912  1F15                     u3685:	
 10913  1F15  36F3               	lsrf	___llmod@divisor+3,f
 10914  1F16  0CF2               	rrf	___llmod@divisor+2,f
 10915  1F17  0CF1               	rrf	___llmod@divisor+1,f
 10916  1F18  0CF0               	rrf	___llmod@divisor,f
 10917  1F19  0B89               	decfsz	9,f
 10918  1F1A  2F15               	goto	u3685
 10919  1F1B  3001               	movlw	1
 10920  1F1C  02F9               	subwf	___llmod@counter,f
 10921  1F1D  1D03               	btfss	3,2
 10922  1F1E  2EFC               	goto	l3552
 10923  1F1F                     l3560:	
 10924  1F1F  0877               	movf	___llmod@dividend+3,w
 10925  1F20  00F3               	movwf	?___llmod+3
 10926  1F21  0876               	movf	___llmod@dividend+2,w
 10927  1F22  00F2               	movwf	?___llmod+2
 10928  1F23  0875               	movf	___llmod@dividend+1,w
 10929  1F24  00F1               	movwf	?___llmod+1
 10930  1F25  0874               	movf	___llmod@dividend,w
 10931  1F26  00F0               	movwf	?___llmod
 10932  1F27  0008               	return
 10933  1F28                     __end_of___llmod:	
 10934                           
 10935                           	psect	text13
 10936  1136                     __ptext13:	
 10937 ;; *************** function ___lldiv *****************
 10938 ;; Defined at:
 10939 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\__lldiv.c"
 10940 ;; Parameters:    Size  Location     Type
 10941 ;;  divisor         4    0[COMMON] unsigned long 
 10942 ;;  dividend        4    4[COMMON] unsigned long 
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;  quotient        4    9[COMMON] unsigned long 
 10945 ;;  counter         1   13[COMMON] unsigned char 
 10946 ;; Return value:  Size  Location     Type
 10947 ;;                  4    0[COMMON] unsigned long 
 10948 ;; Registers used:
 10949 ;;		wreg, status,2, status,0
 10950 ;; Tracked objects:
 10951 ;;		On entry : 1E/1
 10952 ;;		On exit  : 1E/0
 10953 ;;		Unchanged: 1E/0
 10954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10955 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;Total ram usage:       14 bytes
 10960 ;; Hardware stack levels used:    1
 10961 ;; Hardware stack levels required when called:    3
 10962 ;; This function calls:
 10963 ;;		Nothing
 10964 ;; This function is called by:
 10965 ;;		_compensate_pressure
 10966 ;;		_UIntToString
 10967 ;; This function uses a non-reentrant model
 10968 ;;
 10969                           
 10970                           
 10971                           ;psect for function ___lldiv
 10972  1136                     ___lldiv:	
 10973                           
 10974                           ;incstack = 0
 10975                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10976  1136  3000               	movlw	0
 10977  1137  00FC               	movwf	___lldiv@quotient+3
 10978  1138  3000               	movlw	0
 10979  1139  00FB               	movwf	___lldiv@quotient+2
 10980  113A  3000               	movlw	0
 10981  113B  00FA               	movwf	___lldiv@quotient+1
 10982  113C  3000               	movlw	0
 10983  113D  00F9               	movwf	___lldiv@quotient
 10984  113E  0873               	movf	___lldiv@divisor+3,w
 10985  113F  0472               	iorwf	___lldiv@divisor+2,w
 10986  1140  0471               	iorwf	___lldiv@divisor+1,w
 10987  1141  0470               	iorwf	___lldiv@divisor,w
 10988  1142  1903               	skipnz
 10989  1143  297F               	goto	l2936
 10990  1144  01FD               	clrf	___lldiv@counter
 10991  1145  0AFD               	incf	___lldiv@counter,f
 10992  1146                     l2922:	
 10993  1146  1BF3               	btfsc	___lldiv@divisor+3,7
 10994  1147  2954               	goto	l2924
 10995  1148  3001               	movlw	1
 10996  1149                     u2585:	
 10997  1149  35F0               	lslf	___lldiv@divisor,f
 10998  114A  0DF1               	rlf	___lldiv@divisor+1,f
 10999  114B  0DF2               	rlf	___lldiv@divisor+2,f
 11000  114C  0DF3               	rlf	___lldiv@divisor+3,f
 11001  114D  0B89               	decfsz	9,f
 11002  114E  2949               	goto	u2585
 11003  114F  3001               	movlw	1
 11004  1150  00F8               	movwf	??___lldiv
 11005  1151  0878               	movf	??___lldiv,w
 11006  1152  07FD               	addwf	___lldiv@counter,f
 11007  1153  2946               	goto	l2922
 11008  1154                     l2924:	
 11009  1154  3001               	movlw	1
 11010  1155                     u2605:	
 11011  1155  35F9               	lslf	___lldiv@quotient,f
 11012  1156  0DFA               	rlf	___lldiv@quotient+1,f
 11013  1157  0DFB               	rlf	___lldiv@quotient+2,f
 11014  1158  0DFC               	rlf	___lldiv@quotient+3,f
 11015  1159  0B89               	decfsz	9,f
 11016  115A  2955               	goto	u2605
 11017  115B  0873               	movf	___lldiv@divisor+3,w
 11018  115C  0277               	subwf	___lldiv@dividend+3,w
 11019  115D  1D03               	skipz
 11020  115E  2969               	goto	u2615
 11021  115F  0872               	movf	___lldiv@divisor+2,w
 11022  1160  0276               	subwf	___lldiv@dividend+2,w
 11023  1161  1D03               	skipz
 11024  1162  2969               	goto	u2615
 11025  1163  0871               	movf	___lldiv@divisor+1,w
 11026  1164  0275               	subwf	___lldiv@dividend+1,w
 11027  1165  1D03               	skipz
 11028  1166  2969               	goto	u2615
 11029  1167  0870               	movf	___lldiv@divisor,w
 11030  1168  0274               	subwf	___lldiv@dividend,w
 11031  1169                     u2615:	
 11032  1169  1C03               	skipc
 11033  116A  2974               	goto	l2932
 11034  116B  0870               	movf	___lldiv@divisor,w
 11035  116C  02F4               	subwf	___lldiv@dividend,f
 11036  116D  0871               	movf	___lldiv@divisor+1,w
 11037  116E  3BF5               	subwfb	___lldiv@dividend+1,f
 11038  116F  0872               	movf	___lldiv@divisor+2,w
 11039  1170  3BF6               	subwfb	___lldiv@dividend+2,f
 11040  1171  0873               	movf	___lldiv@divisor+3,w
 11041  1172  3BF7               	subwfb	___lldiv@dividend+3,f
 11042  1173  1479               	bsf	___lldiv@quotient,0
 11043  1174                     l2932:	
 11044  1174  3001               	movlw	1
 11045  1175                     u2625:	
 11046  1175  36F3               	lsrf	___lldiv@divisor+3,f
 11047  1176  0CF2               	rrf	___lldiv@divisor+2,f
 11048  1177  0CF1               	rrf	___lldiv@divisor+1,f
 11049  1178  0CF0               	rrf	___lldiv@divisor,f
 11050  1179  0B89               	decfsz	9,f
 11051  117A  2975               	goto	u2625
 11052  117B  3001               	movlw	1
 11053  117C  02FD               	subwf	___lldiv@counter,f
 11054  117D  1D03               	btfss	3,2
 11055  117E  2954               	goto	l2924
 11056  117F                     l2936:	
 11057  117F  087C               	movf	___lldiv@quotient+3,w
 11058  1180  00F3               	movwf	?___lldiv+3
 11059  1181  087B               	movf	___lldiv@quotient+2,w
 11060  1182  00F2               	movwf	?___lldiv+2
 11061  1183  087A               	movf	___lldiv@quotient+1,w
 11062  1184  00F1               	movwf	?___lldiv+1
 11063  1185  0879               	movf	___lldiv@quotient,w
 11064  1186  00F0               	movwf	?___lldiv
 11065  1187  0008               	return
 11066  1188                     __end_of___lldiv:	
 11067                           
 11068                           	psect	text14
 11069  15E4                     __ptext14:	
 11070 ;; *************** function _UIntToHexString *****************
 11071 ;; Defined at:
 11072 ;;		line 106 in file "main.c"
 11073 ;; Parameters:    Size  Location     Type
 11074 ;;  n               4   10[BANK0 ] unsigned long 
 11075 ;;  dest            1   14[BANK0 ] PTR unsigned char 
 11076 ;;		 -> checksum(6), 
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;  remainder       4   21[BANK0 ] unsigned long 
 11079 ;;  i               4   25[BANK0 ] unsigned long 
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      void 
 11082 ;; Registers used:
 11083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11084 ;; Tracked objects:
 11085 ;;		On entry : 1F/0
 11086 ;;		On exit  : 1F/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11089 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;Total ram usage:       19 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; Hardware stack levels required when called:    5
 11096 ;; This function calls:
 11097 ;;		_ReverseString
 11098 ;; This function is called by:
 11099 ;;		_main
 11100 ;; This function uses a non-reentrant model
 11101 ;;
 11102                           
 11103                           
 11104                           ;psect for function _UIntToHexString
 11105  15E4                     _UIntToHexString:	
 11106                           
 11107                           ;main.c: 106: void UIntToHexString(uint32_t n, char* dest);main.c: 107: {;main.c: 108:  
      +                             uint32_t i = 0;
 11108                           
 11109                           ;incstack = 0
 11110                           ; Regs used in _UIntToHexString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11111  15E4  3000               	movlw	0
 11112  15E5  00BC               	movwf	UIntToHexString@i+3
 11113  15E6  3000               	movlw	0
 11114  15E7  00BB               	movwf	UIntToHexString@i+2
 11115  15E8  3000               	movlw	0
 11116  15E9  00BA               	movwf	UIntToHexString@i+1
 11117  15EA  3000               	movlw	0
 11118  15EB  00B9               	movwf	UIntToHexString@i
 11119  15EC                     l464:	
 11120                           ;main.c: 109:     do {
 11121                           
 11122                           
 11123                           ;main.c: 112:         uint32_t remainder = n % 16;
 11124  15EC  300F               	movlw	15
 11125  15ED  052A               	andwf	UIntToHexString@n,w
 11126  15EE  00B5               	movwf	UIntToHexString@remainder
 11127  15EF  3000               	movlw	0
 11128  15F0  052B               	andwf	UIntToHexString@n+1,w
 11129  15F1  00B6               	movwf	UIntToHexString@remainder+1
 11130  15F2  3000               	movlw	0
 11131  15F3  052C               	andwf	UIntToHexString@n+2,w
 11132  15F4  00B7               	movwf	UIntToHexString@remainder+2
 11133  15F5  3000               	movlw	0
 11134  15F6  052D               	andwf	UIntToHexString@n+3,w
 11135  15F7  00B8               	movwf	UIntToHexString@remainder+3
 11136                           
 11137                           ;main.c: 114:         dest[i++] = remainder + (remainder >= 10 ? 55 : '0');
 11138  15F8  0838               	movf	UIntToHexString@remainder+3,w
 11139  15F9  1D03               	btfss	3,2
 11140  15FA  2E0D               	goto	l3624
 11141  15FB  0837               	movf	UIntToHexString@remainder+2,w
 11142  15FC  1D03               	btfss	3,2
 11143  15FD  2E0D               	goto	l3624
 11144  15FE  0836               	movf	UIntToHexString@remainder+1,w
 11145  15FF  1D03               	btfss	3,2
 11146  1600  2E0D               	goto	l3624
 11147  1601  300A               	movlw	10
 11148  1602  0235               	subwf	UIntToHexString@remainder,w
 11149  1603  1803               	btfsc	3,0
 11150  1604  2E0D               	goto	l3624
 11151  1605  3000               	movlw	0
 11152  1606  00B4               	movwf	_UIntToHexString$1373+3
 11153  1607  3000               	movlw	0
 11154  1608  00B3               	movwf	_UIntToHexString$1373+2
 11155  1609  3000               	movlw	0
 11156  160A  00B2               	movwf	_UIntToHexString$1373+1
 11157  160B  3030               	movlw	48
 11158  160C  2E14               	goto	L4
 11159  160D                     l3624:	
 11160  160D  3000               	movlw	0
 11161  160E  00B4               	movwf	_UIntToHexString$1373+3
 11162  160F  3000               	movlw	0
 11163  1610  00B3               	movwf	_UIntToHexString$1373+2
 11164  1611  3000               	movlw	0
 11165  1612  00B2               	movwf	_UIntToHexString$1373+1
 11166  1613  3037               	movlw	55
 11167  1614                     L4:	
 11168  1614  00B1               	movwf	_UIntToHexString$1373
 11169  1615  0831               	movf	_UIntToHexString$1373,w
 11170  1616  0735               	addwf	UIntToHexString@remainder,w
 11171  1617  00AF               	movwf	??_UIntToHexString
 11172  1618  0839               	movf	UIntToHexString@i,w
 11173  1619  072E               	addwf	UIntToHexString@dest,w
 11174  161A  00B0               	movwf	??_UIntToHexString+1
 11175  161B  0830               	movf	??_UIntToHexString+1,w
 11176  161C  0086               	movwf	6
 11177  161D  3001               	movlw	1	; select bank2/3
 11178  161E  0087               	movwf	7
 11179  161F  082F               	movf	??_UIntToHexString,w
 11180  1620  0081               	movwf	1
 11181  1621  3001               	movlw	1
 11182  1622  07B9               	addwf	UIntToHexString@i,f
 11183  1623  3000               	movlw	0
 11184  1624  3DBA               	addwfc	UIntToHexString@i+1,f
 11185  1625  3000               	movlw	0
 11186  1626  3DBB               	addwfc	UIntToHexString@i+2,f
 11187  1627  3000               	movlw	0
 11188  1628  3DBC               	addwfc	UIntToHexString@i+3,f
 11189                           
 11190                           ;main.c: 116:     } while ((n /= 16) > 0);
 11191  1629  3004               	movlw	4
 11192  162A                     u3805:	
 11193  162A  36AD               	lsrf	UIntToHexString@n+3,f
 11194  162B  0CAC               	rrf	UIntToHexString@n+2,f
 11195  162C  0CAB               	rrf	UIntToHexString@n+1,f
 11196  162D  0CAA               	rrf	UIntToHexString@n,f
 11197  162E  0B89               	decfsz	9,f
 11198  162F  2E2A               	goto	u3805
 11199  1630  082D               	movf	UIntToHexString@n+3,w
 11200  1631  042C               	iorwf	UIntToHexString@n+2,w
 11201  1632  042B               	iorwf	UIntToHexString@n+1,w
 11202  1633  042A               	iorwf	UIntToHexString@n,w
 11203  1634  1903               	btfsc	3,2
 11204  1635  2E4A               	goto	l3636
 11205  1636  2DEC               	goto	l464
 11206  1637                     l3632:	
 11207                           
 11208                           ;main.c: 118:     {;main.c: 119:         dest[i] = '0';
 11209  1637  3030               	movlw	48
 11210  1638  00AF               	movwf	??_UIntToHexString
 11211  1639  0839               	movf	UIntToHexString@i,w
 11212  163A  072E               	addwf	UIntToHexString@dest,w
 11213  163B  00B0               	movwf	??_UIntToHexString+1
 11214  163C  0830               	movf	??_UIntToHexString+1,w
 11215  163D  0086               	movwf	6
 11216  163E  3001               	movlw	1	; select bank2/3
 11217  163F  0087               	movwf	7
 11218  1640  082F               	movf	??_UIntToHexString,w
 11219  1641  0081               	movwf	1
 11220                           
 11221                           ;main.c: 120:         i++;
 11222  1642  3001               	movlw	1
 11223  1643  07B9               	addwf	UIntToHexString@i,f
 11224  1644  3000               	movlw	0
 11225  1645  3DBA               	addwfc	UIntToHexString@i+1,f
 11226  1646  3000               	movlw	0
 11227  1647  3DBB               	addwfc	UIntToHexString@i+2,f
 11228  1648  3000               	movlw	0
 11229  1649  3DBC               	addwfc	UIntToHexString@i+3,f
 11230  164A                     l3636:	
 11231                           
 11232                           ;main.c: 117:     while (i < 4)
 11233  164A  083C               	movf	UIntToHexString@i+3,w
 11234  164B  1D03               	btfss	3,2
 11235  164C  2E57               	goto	l3638
 11236  164D  083B               	movf	UIntToHexString@i+2,w
 11237  164E  1D03               	btfss	3,2
 11238  164F  2E57               	goto	l3638
 11239  1650  083A               	movf	UIntToHexString@i+1,w
 11240  1651  1D03               	btfss	3,2
 11241  1652  2E57               	goto	l3638
 11242  1653  3004               	movlw	4
 11243  1654  0239               	subwf	UIntToHexString@i,w
 11244  1655  1C03               	btfss	3,0
 11245  1656  2E37               	goto	l3632
 11246  1657                     l3638:	
 11247                           
 11248                           ;main.c: 122:     ReverseString(dest);
 11249  1657  082E               	movf	UIntToHexString@dest,w
 11250  1658  3192  2290         	fcall	_ReverseString
 11251  165A  0008               	return
 11252  165B                     __end_of_UIntToHexString:	
 11253                           
 11254                           	psect	text15
 11255  1B64                     __ptext15:	
 11256 ;; *************** function _TransmitString *****************
 11257 ;; Defined at:
 11258 ;;		line 73 in file "rtty.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;  message         2    6[COMMON] PTR unsigned char 
 11261 ;;		 -> message_end(73), message_start(70), 
 11262 ;; Auto vars:     Size  Location     Type
 11263 ;;  i               2   11[COMMON] int 
 11264 ;;  counti          2    9[COMMON] int 
 11265 ;; Return value:  Size  Location     Type
 11266 ;;                  1    wreg      void 
 11267 ;; Registers used:
 11268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11269 ;; Tracked objects:
 11270 ;;		On entry : 1F/2
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11274 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;Total ram usage:        7 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; Hardware stack levels required when called:    5
 11281 ;; This function calls:
 11282 ;;		_TransmitByte
 11283 ;;		_strlen
 11284 ;; This function is called by:
 11285 ;;		_main
 11286 ;; This function uses a non-reentrant model
 11287 ;;
 11288                           
 11289                           
 11290                           ;psect for function _TransmitString
 11291  1B64                     _TransmitString:	
 11292                           
 11293                           ;rtty.c: 73: void TransmitString(char* message);rtty.c: 74: {;rtty.c: 78:  for (int i = 
      +                          0, counti = strlen(message); i < counti; i++)
 11294                           
 11295                           ;incstack = 0
 11296                           ; Regs used in _TransmitString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11297  1B64  01FB               	clrf	TransmitString@i
 11298  1B65  01FC               	clrf	TransmitString@i+1
 11299  1B66  0877               	movf	TransmitString@message+1,w
 11300  1B67  00F1               	movwf	strlen@s+1
 11301  1B68  0876               	movf	TransmitString@message,w
 11302  1B69  00F0               	movwf	strlen@s
 11303  1B6A  319A  2231  319B   	fcall	_strlen
 11304  1B6D  0871               	movf	?_strlen+1,w
 11305  1B6E  00FA               	movwf	TransmitString@counti+1
 11306  1B6F  0870               	movf	?_strlen,w
 11307  1B70  00F9               	movwf	TransmitString@counti
 11308  1B71                     l4676:	
 11309  1B71  087C               	movf	TransmitString@i+1,w
 11310  1B72  3A80               	xorlw	128
 11311  1B73  00F8               	movwf	??_TransmitString
 11312  1B74  087A               	movf	TransmitString@counti+1,w
 11313  1B75  3A80               	xorlw	128
 11314  1B76  0278               	subwf	??_TransmitString,w
 11315  1B77  1D03               	skipz
 11316  1B78  2B7B               	goto	u5235
 11317  1B79  0879               	movf	TransmitString@counti,w
 11318  1B7A  027B               	subwf	TransmitString@i,w
 11319  1B7B                     u5235:	
 11320  1B7B  1803               	btfsc	3,0
 11321  1B7C  0008               	return
 11322                           
 11323                           ;rtty.c: 79:  {;rtty.c: 80:   TransmitByte(message[i]);
 11324  1B7D  087B               	movf	TransmitString@i,w
 11325  1B7E  0776               	addwf	TransmitString@message,w
 11326  1B7F  0086               	movwf	6
 11327  1B80  087C               	movf	TransmitString@i+1,w
 11328  1B81  3D77               	addwfc	TransmitString@message+1,w
 11329  1B82  0087               	movwf	7
 11330  1B83  0801               	movf	1,w
 11331  1B84  319C  2464  319B   	fcall	_TransmitByte
 11332                           
 11333                           ;rtty.c: 81:  }
 11334  1B87  3001               	movlw	1
 11335  1B88  07FB               	addwf	TransmitString@i,f
 11336  1B89  3000               	movlw	0
 11337  1B8A  3DFC               	addwfc	TransmitString@i+1,f
 11338  1B8B  2B71               	goto	l4676
 11339  1B8C                     __end_of_TransmitString:	
 11340                           
 11341                           	psect	text16
 11342  1C64                     __ptext16:	
 11343 ;; *************** function _TransmitByte *****************
 11344 ;; Defined at:
 11345 ;;		line 51 in file "rtty.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;  byte            1    wreg     unsigned char 
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;  byte            1    3[COMMON] unsigned char 
 11350 ;;  i               2    4[COMMON] int 
 11351 ;; Return value:  Size  Location     Type
 11352 ;;                  1    wreg      void 
 11353 ;; Registers used:
 11354 ;;		wreg, status,2, status,0, pclath, cstack
 11355 ;; Tracked objects:
 11356 ;;		On entry : 0/2
 11357 ;;		On exit  : 0/0
 11358 ;;		Unchanged: 0/0
 11359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;Total ram usage:        4 bytes
 11365 ;; Hardware stack levels used:    1
 11366 ;; Hardware stack levels required when called:    4
 11367 ;; This function calls:
 11368 ;;		_TransmitBit
 11369 ;; This function is called by:
 11370 ;;		_TransmitString
 11371 ;; This function uses a non-reentrant model
 11372 ;;
 11373                           
 11374                           
 11375                           ;psect for function _TransmitByte
 11376  1C64                     _TransmitByte:	
 11377                           
 11378                           ;incstack = 0
 11379                           ; Regs used in _TransmitByte: [wreg+status,2+status,0+pclath+cstack]
 11380                           ;TransmitByte@byte stored from wreg
 11381  1C64  00F3               	movwf	TransmitByte@byte
 11382                           
 11383                           ;rtty.c: 51: void TransmitByte(char byte);rtty.c: 52: {;rtty.c: 62:     TransmitBit(0);
 11384  1C65  3000               	movlw	0
 11385  1C66  319A  2248  319C   	fcall	_TransmitBit
 11386                           
 11387                           ;rtty.c: 64:  for (int i = 0; i < 7; i++)
 11388  1C69  01F4               	clrf	TransmitByte@i
 11389  1C6A  01F5               	clrf	TransmitByte@i+1
 11390  1C6B                     l3498:	
 11391                           
 11392                           ;rtty.c: 65:  {;rtty.c: 66:   TransmitBit((byte >> i) & 1);
 11393  1C6B  0873               	movf	TransmitByte@byte,w
 11394  1C6C  00F2               	movwf	??_TransmitByte
 11395  1C6D  0A74               	incf	TransmitByte@i,w
 11396  1C6E  2C70               	goto	u3514
 11397  1C6F                     u3515:	
 11398  1C6F  36F2               	lsrf	??_TransmitByte,f
 11399  1C70                     u3514:	
 11400  1C70  0B89               	decfsz	9,f
 11401  1C71  2C6F               	goto	u3515
 11402  1C72  1C72               	btfss	??_TransmitByte,0
 11403  1C73  2C76               	goto	u3520
 11404  1C74  3001               	movlw	1
 11405  1C75  2C77               	goto	u3530
 11406  1C76                     u3520:	
 11407  1C76  3000               	movlw	0
 11408  1C77                     u3530:	
 11409  1C77  319A  2248  319C   	fcall	_TransmitBit
 11410                           
 11411                           ;rtty.c: 67:  }
 11412  1C7A  3001               	movlw	1
 11413  1C7B  07F4               	addwf	TransmitByte@i,f
 11414  1C7C  3000               	movlw	0
 11415  1C7D  3DF5               	addwfc	TransmitByte@i+1,f
 11416  1C7E  0875               	movf	TransmitByte@i+1,w
 11417  1C7F  3A80               	xorlw	128
 11418  1C80  00F2               	movwf	??_TransmitByte
 11419  1C81  3080               	movlw	128
 11420  1C82  0272               	subwf	??_TransmitByte,w
 11421  1C83  1D03               	skipz
 11422  1C84  2C87               	goto	u3545
 11423  1C85  3007               	movlw	7
 11424  1C86  0274               	subwf	TransmitByte@i,w
 11425  1C87                     u3545:	
 11426  1C87  1C03               	skipc
 11427  1C88  2C6B               	goto	l3498
 11428                           
 11429                           ;rtty.c: 69:  TransmitBit(1);
 11430  1C89  3001               	movlw	1
 11431  1C8A  319A  2248  319C   	fcall	_TransmitBit
 11432                           
 11433                           ;rtty.c: 70:  TransmitBit(1);
 11434  1C8D  3001               	movlw	1
 11435  1C8E  319A  2248         	fcall	_TransmitBit
 11436  1C90  0008               	return
 11437  1C91                     __end_of_TransmitByte:	
 11438                           
 11439                           	psect	text17
 11440  1A48                     __ptext17:	
 11441 ;; *************** function _TransmitBit *****************
 11442 ;; Defined at:
 11443 ;;		line 31 in file "rtty.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;  b               1    wreg     _Bool 
 11446 ;; Auto vars:     Size  Location     Type
 11447 ;;  b               1    1[COMMON] _Bool 
 11448 ;; Return value:  Size  Location     Type
 11449 ;;                  1    wreg      void 
 11450 ;; Registers used:
 11451 ;;		wreg, status,2, status,0
 11452 ;; Tracked objects:
 11453 ;;		On entry : 0/2
 11454 ;;		On exit  : 0/0
 11455 ;;		Unchanged: 0/0
 11456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11461 ;;Total ram usage:        2 bytes
 11462 ;; Hardware stack levels used:    1
 11463 ;; Hardware stack levels required when called:    3
 11464 ;; This function calls:
 11465 ;;		Nothing
 11466 ;; This function is called by:
 11467 ;;		_TransmitByte
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           
 11472                           ;psect for function _TransmitBit
 11473  1A48                     _TransmitBit:	
 11474                           
 11475                           ;incstack = 0
 11476                           ; Regs used in _TransmitBit: [wreg+status,2+status,0]
 11477                           ;TransmitBit@b stored from wreg
 11478  1A48  00F1               	movwf	TransmitBit@b
 11479                           
 11480                           ;rtty.c: 31: void TransmitBit(_Bool b);rtty.c: 32: {;rtty.c: 33:  if (b)
 11481  1A49  0871               	movf	TransmitBit@b,w
 11482  1A4A  1903               	btfsc	3,2
 11483  1A4B  2A4F               	goto	l705
 11484                           
 11485                           ;rtty.c: 34:  {;rtty.c: 35:   do { LATAbits.LATA4 = 1; } while(0);
 11486  1A4C  0022               	movlb	2	; select bank2
 11487  1A4D  160C               	bsf	12,4	;volatile
 11488  1A4E  2A51               	goto	l3196
 11489  1A4F                     l705:	
 11490                           ;rtty.c: 38:  {;rtty.c: 39:   do { LATAbits.LATA4 = 0; } while(0);
 11491                           
 11492  1A4F  0022               	movlb	2	; select bank2
 11493  1A50  120C               	bcf	12,4	;volatile
 11494  1A51                     l3196:	
 11495                           
 11496                           ;rtty.c: 46:  _delay((unsigned long)((((1000 / 50) / 2) * 1000)*(4000000/4000000.0)));
 11497  1A51  300D               	movlw	13
 11498  1A52  00F0               	movwf	??_TransmitBit
 11499  1A53  30FC               	movlw	252
 11500  1A54                     u5277:	
 11501  1A54  0B89               	decfsz	9,f
 11502  1A55  2A54               	goto	u5277
 11503  1A56  0BF0               	decfsz	??_TransmitBit,f
 11504  1A57  2A54               	goto	u5277
 11505                           
 11506                           ;rtty.c: 47:  _delay((unsigned long)((((1000 / 50) / 2) * 1000)*(4000000/4000000.0)));
 11507  1A58  300D               	movlw	13
 11508  1A59  00F0               	movwf	??_TransmitBit
 11509  1A5A  30FC               	movlw	252
 11510  1A5B                     u5287:	
 11511  1A5B  0B89               	decfsz	9,f
 11512  1A5C  2A5B               	goto	u5287
 11513  1A5D  0BF0               	decfsz	??_TransmitBit,f
 11514  1A5E  2A5B               	goto	u5287
 11515  1A5F  0008               	return
 11516  1A60                     __end_of_TransmitBit:	
 11517                           
 11518                           	psect	text18
 11519  0801                     __ptext18:	
 11520 ;; *************** function _SYSTEM_Initialize *****************
 11521 ;; Defined at:
 11522 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11523 ;; Parameters:    Size  Location     Type
 11524 ;;		None
 11525 ;; Auto vars:     Size  Location     Type
 11526 ;;		None
 11527 ;; Return value:  Size  Location     Type
 11528 ;;                  1    wreg      void 
 11529 ;; Registers used:
 11530 ;;		wreg, status,2, status,0, pclath, cstack
 11531 ;; Tracked objects:
 11532 ;;		On entry : B1F/0
 11533 ;;		On exit  : 1F/3
 11534 ;;		Unchanged: 0/0
 11535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;Total ram usage:        0 bytes
 11541 ;; Hardware stack levels used:    1
 11542 ;; Hardware stack levels required when called:    5
 11543 ;; This function calls:
 11544 ;;		_EUSART_Initialize
 11545 ;;		_OSCILLATOR_Initialize
 11546 ;;		_PIN_MANAGER_Initialize
 11547 ;;		_TMR0_Initialize
 11548 ;; This function is called by:
 11549 ;;		_main
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           
 11554                           ;psect for function _SYSTEM_Initialize
 11555  0801                     _SYSTEM_Initialize:	
 11556                           
 11557                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
 11558                           
 11559                           ;incstack = 0
 11560                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11561  0801  319B  238C  3188   	fcall	_PIN_MANAGER_Initialize
 11562                           
 11563                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
 11564  0804  3199  21C8  3188   	fcall	_OSCILLATOR_Initialize
 11565                           
 11566                           ;mcc_generated_files/mcc.c: 54:     TMR0_Initialize();
 11567  0807  319A  221B  3188   	fcall	_TMR0_Initialize
 11568                           
 11569                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
 11570  080A  3199  21EC         	fcall	_EUSART_Initialize
 11571  080C  0008               	return
 11572  080D                     __end_of_SYSTEM_Initialize:	
 11573                           
 11574                           	psect	text19
 11575  1A1B                     __ptext19:	
 11576 ;; *************** function _TMR0_Initialize *****************
 11577 ;; Defined at:
 11578 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;		None
 11581 ;; Auto vars:     Size  Location     Type
 11582 ;;		None
 11583 ;; Return value:  Size  Location     Type
 11584 ;;                  1    wreg      void 
 11585 ;; Registers used:
 11586 ;;		wreg, status,2, status,0, pclath, cstack
 11587 ;; Tracked objects:
 11588 ;;		On entry : B1F/2
 11589 ;;		On exit  : 1F/2
 11590 ;;		Unchanged: 0/0
 11591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;Total ram usage:        1 bytes
 11597 ;; Hardware stack levels used:    1
 11598 ;; Hardware stack levels required when called:    4
 11599 ;; This function calls:
 11600 ;;		_TMR0_SetInterruptHandler
 11601 ;; This function is called by:
 11602 ;;		_SYSTEM_Initialize
 11603 ;; This function uses a non-reentrant model
 11604 ;;
 11605                           
 11606                           
 11607                           ;psect for function _TMR0_Initialize
 11608  1A1B                     _TMR0_Initialize:	
 11609                           
 11610                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
 11611                           
 11612                           ;incstack = 0
 11613                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11614  1A1B  0021               	movlb	1	; select bank1
 11615  1A1C  0815               	movf	21,w	;volatile
 11616  1A1D  39C0               	andlw	192
 11617  1A1E  3812               	iorlw	18
 11618  1A1F  0095               	movwf	21	;volatile
 11619                           
 11620                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
 11621  1A20  3083               	movlw	131
 11622  1A21  0020               	movlb	0	; select bank0
 11623  1A22  0095               	movwf	21	;volatile
 11624                           
 11625                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
 11626  1A23  3083               	movlw	131
 11627  1A24  00F2               	movwf	??_TMR0_Initialize
 11628  1A25  0872               	movf	??_TMR0_Initialize,w
 11629  1A26  0022               	movlb	2	; select bank2
 11630  1A27  00E4               	movwf	_timer0ReloadVal^(0+256)	;volatile
 11631                           
 11632                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
 11633  1A28  110B               	bcf	11,2	;volatile
 11634                           
 11635                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
 11636  1A29  168B               	bsf	11,5	;volatile
 11637                           
 11638                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11639  1A2A  3003               	movlw	low _TMR0_DefaultInterruptHandler
 11640  1A2B  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 11641  1A2C  3000               	movlw	high _TMR0_DefaultInterruptHandler
 11642  1A2D  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 11643  1A2E  3199  21BC         	fcall	_TMR0_SetInterruptHandler
 11644  1A30  0008               	return
 11645  1A31                     __end_of_TMR0_Initialize:	
 11646                           
 11647                           	psect	text20
 11648  1B8C                     __ptext20:	
 11649 ;; *************** function _PIN_MANAGER_Initialize *****************
 11650 ;; Defined at:
 11651 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 11652 ;; Parameters:    Size  Location     Type
 11653 ;;		None
 11654 ;; Auto vars:     Size  Location     Type
 11655 ;;		None
 11656 ;; Return value:  Size  Location     Type
 11657 ;;                  1    wreg      void 
 11658 ;; Registers used:
 11659 ;;		wreg, status,2
 11660 ;; Tracked objects:
 11661 ;;		On entry : B1F/0
 11662 ;;		On exit  : B1F/1D
 11663 ;;		Unchanged: B00/0
 11664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;Total ram usage:        0 bytes
 11670 ;; Hardware stack levels used:    1
 11671 ;; Hardware stack levels required when called:    3
 11672 ;; This function calls:
 11673 ;;		Nothing
 11674 ;; This function is called by:
 11675 ;;		_SYSTEM_Initialize
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           
 11680                           ;psect for function _PIN_MANAGER_Initialize
 11681  1B8C                     _PIN_MANAGER_Initialize:	
 11682                           
 11683                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 11684                           
 11685                           ;incstack = 0
 11686                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11687  1B8C  0022               	movlb	2	; select bank2
 11688  1B8D  018C               	clrf	12	;volatile
 11689                           
 11690                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 11691  1B8E  018D               	clrf	13	;volatile
 11692                           
 11693                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 11694  1B8F  018E               	clrf	14	;volatile
 11695                           
 11696                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x03;
 11697  1B90  3003               	movlw	3
 11698  1B91  0021               	movlb	1	; select bank1
 11699  1B92  008C               	movwf	12	;volatile
 11700                           
 11701                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x70;
 11702  1B93  3070               	movlw	112
 11703  1B94  008D               	movwf	13	;volatile
 11704                           
 11705                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xDF;
 11706  1B95  30DF               	movlw	223
 11707  1B96  008E               	movwf	14	;volatile
 11708                           
 11709                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x4F;
 11710  1B97  304F               	movlw	79
 11711  1B98  0023               	movlb	3	; select bank3
 11712  1B99  008E               	movwf	14	;volatile
 11713                           
 11714                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x80;
 11715  1B9A  3080               	movlw	128
 11716  1B9B  008D               	movwf	13	;volatile
 11717                           
 11718                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x03;
 11719  1B9C  3003               	movlw	3
 11720  1B9D  008C               	movwf	12	;volatile
 11721                           
 11722                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 11723  1B9E  0024               	movlb	4	; select bank4
 11724  1B9F  018D               	clrf	13	;volatile
 11725                           
 11726                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 11727  1BA0  018C               	clrf	12	;volatile
 11728                           
 11729                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
 11730  1BA1  018E               	clrf	14	;volatile
 11731                           
 11732                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 1;
 11733  1BA2  0021               	movlb	1	; select bank1
 11734  1BA3  1795               	bsf	21,7	;volatile
 11735                           
 11736                           ;mcc_generated_files/pin_manager.c: 91:     ODCONA = 0x00;
 11737  1BA4  0025               	movlb	5	; select bank5
 11738  1BA5  018C               	clrf	12	;volatile
 11739                           
 11740                           ;mcc_generated_files/pin_manager.c: 92:     ODCONB = 0x00;
 11741  1BA6  018D               	clrf	13	;volatile
 11742                           
 11743                           ;mcc_generated_files/pin_manager.c: 93:     ODCONC = 0x00;
 11744  1BA7  018E               	clrf	14	;volatile
 11745                           
 11746                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONA = 0x37;
 11747  1BA8  3037               	movlw	55
 11748  1BA9  0026               	movlb	6	; select bank6
 11749  1BAA  008C               	movwf	12	;volatile
 11750                           
 11751                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONB = 0xF0;
 11752  1BAB  30F0               	movlw	240
 11753  1BAC  008D               	movwf	13	;volatile
 11754                           
 11755                           ;mcc_generated_files/pin_manager.c: 100:     SLRCONC = 0xFF;
 11756  1BAD  30FF               	movlw	255
 11757  1BAE  008E               	movwf	14	;volatile
 11758                           
 11759                           ;mcc_generated_files/pin_manager.c: 109:     RXPPS = 0x0D;
 11760  1BAF  300D               	movlw	13
 11761  1BB0  003C               	movlb	28	; select bank28
 11762  1BB1  00A4               	movwf	36	;volatile
 11763                           
 11764                           ;mcc_generated_files/pin_manager.c: 110:     RB7PPS = 0x12;
 11765  1BB2  3012               	movlw	18
 11766  1BB3  003D               	movlb	29	; select bank29
 11767  1BB4  009F               	movwf	31	;volatile
 11768  1BB5  0008               	return
 11769  1BB6                     __end_of_PIN_MANAGER_Initialize:	
 11770                           
 11771                           	psect	text21
 11772  19C8                     __ptext21:	
 11773 ;; *************** function _OSCILLATOR_Initialize *****************
 11774 ;; Defined at:
 11775 ;;		line 58 in file "mcc_generated_files/mcc.c"
 11776 ;; Parameters:    Size  Location     Type
 11777 ;;		None
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;		None
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  1    wreg      void 
 11782 ;; Registers used:
 11783 ;;		wreg, status,2
 11784 ;; Tracked objects:
 11785 ;;		On entry : B1F/1D
 11786 ;;		On exit  : B1F/2
 11787 ;;		Unchanged: B00/0
 11788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;Total ram usage:        0 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:    3
 11796 ;; This function calls:
 11797 ;;		Nothing
 11798 ;; This function is called by:
 11799 ;;		_SYSTEM_Initialize
 11800 ;; This function uses a non-reentrant model
 11801 ;;
 11802                           
 11803                           
 11804                           ;psect for function _OSCILLATOR_Initialize
 11805  19C8                     _OSCILLATOR_Initialize:	
 11806                           
 11807                           ;mcc_generated_files/mcc.c: 61:     OSCCON = 0x68;
 11808                           
 11809                           ;incstack = 0
 11810                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11811  19C8  3068               	movlw	104
 11812  19C9  0021               	movlb	1	; select bank1
 11813  19CA  0099               	movwf	25	;volatile
 11814                           
 11815                           ;mcc_generated_files/mcc.c: 63:     OSCTUNE = 0x00;
 11816  19CB  0198               	clrf	24	;volatile
 11817                           
 11818                           ;mcc_generated_files/mcc.c: 65:     BORCON = 0x00;
 11819  19CC  0022               	movlb	2	; select bank2
 11820  19CD  0196               	clrf	22	;volatile
 11821  19CE  0008               	return
 11822  19CF                     __end_of_OSCILLATOR_Initialize:	
 11823                           
 11824                           	psect	text22
 11825  19EC                     __ptext22:	
 11826 ;; *************** function _EUSART_Initialize *****************
 11827 ;; Defined at:
 11828 ;;		line 56 in file "mcc_generated_files/eusart.c"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;		None
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;		None
 11833 ;; Return value:  Size  Location     Type
 11834 ;;                  1    wreg      void 
 11835 ;; Registers used:
 11836 ;;		wreg, status,2
 11837 ;; Tracked objects:
 11838 ;;		On entry : 1F/2
 11839 ;;		On exit  : 1F/3
 11840 ;;		Unchanged: 0/0
 11841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;Total ram usage:        0 bytes
 11847 ;; Hardware stack levels used:    1
 11848 ;; Hardware stack levels required when called:    3
 11849 ;; This function calls:
 11850 ;;		Nothing
 11851 ;; This function is called by:
 11852 ;;		_SYSTEM_Initialize
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856                           
 11857                           ;psect for function _EUSART_Initialize
 11858  19EC                     _EUSART_Initialize:	
 11859                           
 11860                           ;mcc_generated_files/eusart.c: 61:     BAUD1CON = 0x08;
 11861                           
 11862                           ;incstack = 0
 11863                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 11864  19EC  3008               	movlw	8
 11865  19ED  0023               	movlb	3	; select bank3
 11866  19EE  009F               	movwf	31	;volatile
 11867                           
 11868                           ;mcc_generated_files/eusart.c: 64:     RC1STA = 0x90;
 11869  19EF  3090               	movlw	144
 11870  19F0  009D               	movwf	29	;volatile
 11871                           
 11872                           ;mcc_generated_files/eusart.c: 67:     TX1STA = 0x24;
 11873  19F1  3024               	movlw	36
 11874  19F2  009E               	movwf	30	;volatile
 11875                           
 11876                           ;mcc_generated_files/eusart.c: 70:     SPBRGL = 0x67;
 11877  19F3  3067               	movlw	103
 11878  19F4  009B               	movwf	27	;volatile
 11879                           
 11880                           ;mcc_generated_files/eusart.c: 73:     SPBRGH = 0x00;
 11881  19F5  019C               	clrf	28	;volatile
 11882  19F6  0008               	return
 11883  19F7                     __end_of_EUSART_Initialize:	
 11884                           
 11885                           	psect	text23
 11886  13C3                     __ptext23:	
 11887 ;; *************** function _IntToString *****************
 11888 ;; Defined at:
 11889 ;;		line 148 in file "main.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;  n               2   11[COMMON] int 
 11892 ;;  dest            1   13[COMMON] PTR unsigned char 
 11893 ;;		 -> main@convertedNumber(16), 
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;  i               2   12[BANK0 ] int 
 11896 ;;  sign            1   11[BANK0 ] _Bool 
 11897 ;; Return value:  Size  Location     Type
 11898 ;;                  1    wreg      void 
 11899 ;; Registers used:
 11900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11901 ;; Tracked objects:
 11902 ;;		On entry : 1F/1
 11903 ;;		On exit  : 1F/0
 11904 ;;		Unchanged: 0/0
 11905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11906 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11910 ;;Total ram usage:        8 bytes
 11911 ;; Hardware stack levels used:    1
 11912 ;; Hardware stack levels required when called:    5
 11913 ;; This function calls:
 11914 ;;		_ReverseString
 11915 ;;		___awdiv
 11916 ;;		___awmod
 11917 ;; This function is called by:
 11918 ;;		_main
 11919 ;; This function uses a non-reentrant model
 11920 ;;
 11921                           
 11922                           
 11923                           ;psect for function _IntToString
 11924  13C3                     _IntToString:	
 11925                           
 11926                           ;main.c: 148: void IntToString(int n, char* dest);main.c: 149: {;main.c: 150:     int i 
      +                          = 0;
 11927                           
 11928                           ;incstack = 0
 11929                           ; Regs used in _IntToString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11930  13C3  0020               	movlb	0	; select bank0
 11931  13C4  01AC               	clrf	IntToString@i
 11932  13C5  01AD               	clrf	IntToString@i+1
 11933                           
 11934                           ;main.c: 151:     _Bool sign = n < 0;
 11935  13C6  1FFC               	btfss	IntToString@n+1,7
 11936  13C7  2BCA               	goto	u3830
 11937  13C8  3001               	movlw	1
 11938  13C9  2BCB               	goto	u3840
 11939  13CA                     u3830:	
 11940  13CA  3000               	movlw	0
 11941  13CB                     u3840:	
 11942  13CB  00A9               	movwf	??_IntToString
 11943  13CC  0829               	movf	??_IntToString,w
 11944  13CD  00AB               	movwf	IntToString@sign
 11945                           
 11946                           ;main.c: 152:     if (sign)
 11947  13CE  082B               	movf	IntToString@sign,w
 11948  13CF  1903               	btfsc	3,2
 11949  13D0  2BD6               	goto	l3648
 11950                           
 11951                           ;main.c: 153:     {;main.c: 155:         n = -n;
 11952  13D1  09FB               	comf	IntToString@n,f
 11953  13D2  09FC               	comf	IntToString@n+1,f
 11954  13D3  0AFB               	incf	IntToString@n,f
 11955  13D4  1903               	skipnz
 11956  13D5  0AFC               	incf	IntToString@n+1,f
 11957  13D6                     l3648:	
 11958                           
 11959                           ;main.c: 161:         dest[i++] = n % 10 + '0';
 11960  13D6  300A               	movlw	10
 11961  13D7  00F0               	movwf	___awmod@divisor
 11962  13D8  3000               	movlw	0
 11963  13D9  00F1               	movwf	___awmod@divisor+1
 11964  13DA  087C               	movf	IntToString@n+1,w
 11965  13DB  00F3               	movwf	___awmod@dividend+1
 11966  13DC  087B               	movf	IntToString@n,w
 11967  13DD  00F2               	movwf	___awmod@dividend
 11968  13DE  3190  2001  3193   	fcall	___awmod
 11969  13E1  0870               	movf	?___awmod,w
 11970  13E2  3E30               	addlw	48
 11971  13E3  0020               	movlb	0	; select bank0
 11972  13E4  00A9               	movwf	??_IntToString
 11973  13E5  082C               	movf	IntToString@i,w
 11974  13E6  077D               	addwf	IntToString@dest,w
 11975  13E7  00AA               	movwf	??_IntToString+1
 11976  13E8  082A               	movf	??_IntToString+1,w
 11977  13E9  0086               	movwf	6
 11978  13EA  3001               	movlw	1	; select bank2/3
 11979  13EB  0087               	movwf	7
 11980  13EC  0829               	movf	??_IntToString,w
 11981  13ED  0081               	movwf	1
 11982  13EE  3001               	movlw	1
 11983  13EF  07AC               	addwf	IntToString@i,f
 11984  13F0  3000               	movlw	0
 11985  13F1  3DAD               	addwfc	IntToString@i+1,f
 11986                           
 11987                           ;main.c: 163:     } while ((n /= 10) > 0);
 11988  13F2  300A               	movlw	10
 11989  13F3  00F0               	movwf	___awdiv@divisor
 11990  13F4  3000               	movlw	0
 11991  13F5  00F1               	movwf	___awdiv@divisor+1
 11992  13F6  087C               	movf	IntToString@n+1,w
 11993  13F7  00F3               	movwf	___awdiv@dividend+1
 11994  13F8  087B               	movf	IntToString@n,w
 11995  13F9  00F2               	movwf	___awdiv@dividend
 11996  13FA  3190  20E5  3193   	fcall	___awdiv
 11997  13FD  0871               	movf	?___awdiv+1,w
 11998  13FE  00FC               	movwf	IntToString@n+1
 11999  13FF  0870               	movf	?___awdiv,w
 12000  1400  00FB               	movwf	IntToString@n
 12001  1401  087C               	movf	IntToString@n+1,w
 12002  1402  3A80               	xorlw	128
 12003  1403  00A9               	movwf	??_IntToString
 12004  1404  3080               	movlw	128
 12005  1405  0229               	subwf	??_IntToString,w
 12006  1406  1D03               	skipz
 12007  1407  2C0A               	goto	u3865
 12008  1408  3001               	movlw	1
 12009  1409  027B               	subwf	IntToString@n,w
 12010  140A                     u3865:	
 12011  140A  1803               	skipnc
 12012  140B  2BD6               	goto	l3648
 12013                           
 12014                           ;main.c: 164:     if (sign)
 12015  140C  0020               	movlb	0	; select bank0
 12016  140D  082B               	movf	IntToString@sign,w
 12017  140E  1903               	btfsc	3,2
 12018  140F  2C1F               	goto	l3660
 12019                           
 12020                           ;main.c: 165:     {;main.c: 166:         dest[i++] = '-';
 12021  1410  302D               	movlw	45
 12022  1411  00A9               	movwf	??_IntToString
 12023  1412  082C               	movf	IntToString@i,w
 12024  1413  077D               	addwf	IntToString@dest,w
 12025  1414  00AA               	movwf	??_IntToString+1
 12026  1415  082A               	movf	??_IntToString+1,w
 12027  1416  0086               	movwf	6
 12028  1417  3001               	movlw	1	; select bank2/3
 12029  1418  0087               	movwf	7
 12030  1419  0829               	movf	??_IntToString,w
 12031  141A  0081               	movwf	1
 12032  141B  3001               	movlw	1
 12033  141C  07AC               	addwf	IntToString@i,f
 12034  141D  3000               	movlw	0
 12035  141E  3DAD               	addwfc	IntToString@i+1,f
 12036  141F                     l3660:	
 12037                           
 12038                           ;main.c: 168:     dest[i] = '\0';
 12039  141F  082C               	movf	IntToString@i,w
 12040  1420  077D               	addwf	IntToString@dest,w
 12041  1421  00A9               	movwf	??_IntToString
 12042  1422  0829               	movf	??_IntToString,w
 12043  1423  0086               	movwf	6
 12044  1424  3001               	movlw	1	; select bank2/3
 12045  1425  0087               	movwf	7
 12046  1426  0181               	clrf	1
 12047                           
 12048                           ;main.c: 170:     ReverseString(dest);
 12049  1427  087D               	movf	IntToString@dest,w
 12050  1428  3192  2290         	fcall	_ReverseString
 12051  142A  0008               	return
 12052  142B                     __end_of_IntToString:	
 12053                           
 12054                           	psect	text24
 12055  1001                     __ptext24:	
 12056 ;; *************** function ___awmod *****************
 12057 ;; Defined at:
 12058 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\awmod.c"
 12059 ;; Parameters:    Size  Location     Type
 12060 ;;  divisor         2    0[COMMON] int 
 12061 ;;  dividend        2    2[COMMON] int 
 12062 ;; Auto vars:     Size  Location     Type
 12063 ;;  sign            1    6[COMMON] unsigned char 
 12064 ;;  counter         1    5[COMMON] unsigned char 
 12065 ;; Return value:  Size  Location     Type
 12066 ;;                  2    0[COMMON] int 
 12067 ;; Registers used:
 12068 ;;		wreg, status,2, status,0
 12069 ;; Tracked objects:
 12070 ;;		On entry : 0/0
 12071 ;;		On exit  : 0/0
 12072 ;;		Unchanged: 0/0
 12073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12074 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;Total ram usage:        7 bytes
 12079 ;; Hardware stack levels used:    1
 12080 ;; Hardware stack levels required when called:    3
 12081 ;; This function calls:
 12082 ;;		Nothing
 12083 ;; This function is called by:
 12084 ;;		_IntToString
 12085 ;; This function uses a non-reentrant model
 12086 ;;
 12087                           
 12088                           
 12089                           ;psect for function ___awmod
 12090  1001                     ___awmod:	
 12091                           
 12092                           ;incstack = 0
 12093                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12094  1001  01F6               	clrf	___awmod@sign
 12095  1002  1FF3               	btfss	___awmod@dividend+1,7
 12096  1003  280B               	goto	l3514
 12097  1004  09F2               	comf	___awmod@dividend,f
 12098  1005  09F3               	comf	___awmod@dividend+1,f
 12099  1006  0AF2               	incf	___awmod@dividend,f
 12100  1007  1903               	skipnz
 12101  1008  0AF3               	incf	___awmod@dividend+1,f
 12102  1009  01F6               	clrf	___awmod@sign
 12103  100A  0AF6               	incf	___awmod@sign,f
 12104  100B                     l3514:	
 12105  100B  1FF1               	btfss	___awmod@divisor+1,7
 12106  100C  2812               	goto	l3518
 12107  100D  09F0               	comf	___awmod@divisor,f
 12108  100E  09F1               	comf	___awmod@divisor+1,f
 12109  100F  0AF0               	incf	___awmod@divisor,f
 12110  1010  1903               	skipnz
 12111  1011  0AF1               	incf	___awmod@divisor+1,f
 12112  1012                     l3518:	
 12113  1012  0870               	movf	___awmod@divisor,w
 12114  1013  0471               	iorwf	___awmod@divisor+1,w
 12115  1014  1903               	btfsc	3,2
 12116  1015  2839               	goto	l3536
 12117  1016  01F5               	clrf	___awmod@counter
 12118  1017  0AF5               	incf	___awmod@counter,f
 12119  1018                     l3526:	
 12120  1018  1BF1               	btfsc	___awmod@divisor+1,7
 12121  1019  2824               	goto	l3528
 12122  101A  3001               	movlw	1
 12123  101B                     u3585:	
 12124  101B  35F0               	lslf	___awmod@divisor,f
 12125  101C  0DF1               	rlf	___awmod@divisor+1,f
 12126  101D  0B89               	decfsz	9,f
 12127  101E  281B               	goto	u3585
 12128  101F  3001               	movlw	1
 12129  1020  00F4               	movwf	??___awmod
 12130  1021  0874               	movf	??___awmod,w
 12131  1022  07F5               	addwf	___awmod@counter,f
 12132  1023  2818               	goto	l3526
 12133  1024                     l3528:	
 12134  1024  0871               	movf	___awmod@divisor+1,w
 12135  1025  0273               	subwf	___awmod@dividend+1,w
 12136  1026  1D03               	skipz
 12137  1027  282A               	goto	u3605
 12138  1028  0870               	movf	___awmod@divisor,w
 12139  1029  0272               	subwf	___awmod@dividend,w
 12140  102A                     u3605:	
 12141  102A  1C03               	skipc
 12142  102B  2830               	goto	l3532
 12143  102C  0870               	movf	___awmod@divisor,w
 12144  102D  02F2               	subwf	___awmod@dividend,f
 12145  102E  0871               	movf	___awmod@divisor+1,w
 12146  102F  3BF3               	subwfb	___awmod@dividend+1,f
 12147  1030                     l3532:	
 12148  1030  3001               	movlw	1
 12149  1031                     u3615:	
 12150  1031  36F1               	lsrf	___awmod@divisor+1,f
 12151  1032  0CF0               	rrf	___awmod@divisor,f
 12152  1033  0B89               	decfsz	9,f
 12153  1034  2831               	goto	u3615
 12154  1035  3001               	movlw	1
 12155  1036  02F5               	subwf	___awmod@counter,f
 12156  1037  1D03               	btfss	3,2
 12157  1038  2824               	goto	l3528
 12158  1039                     l3536:	
 12159  1039  0876               	movf	___awmod@sign,w
 12160  103A  1903               	btfsc	3,2
 12161  103B  2841               	goto	l3540
 12162  103C  09F2               	comf	___awmod@dividend,f
 12163  103D  09F3               	comf	___awmod@dividend+1,f
 12164  103E  0AF2               	incf	___awmod@dividend,f
 12165  103F  1903               	skipnz
 12166  1040  0AF3               	incf	___awmod@dividend+1,f
 12167  1041                     l3540:	
 12168  1041  0873               	movf	___awmod@dividend+1,w
 12169  1042  00F1               	movwf	?___awmod+1
 12170  1043  0872               	movf	___awmod@dividend,w
 12171  1044  00F0               	movwf	?___awmod
 12172  1045  0008               	return
 12173  1046                     __end_of___awmod:	
 12174                           
 12175                           	psect	text25
 12176  1290                     __ptext25:	
 12177 ;; *************** function _ReverseString *****************
 12178 ;; Defined at:
 12179 ;;		line 93 in file "main.c"
 12180 ;; Parameters:    Size  Location     Type
 12181 ;;  str             1    wreg     PTR unsigned char 
 12182 ;;		 -> checksum(6), main@convertedNumber(16), 
 12183 ;; Auto vars:     Size  Location     Type
 12184 ;;  str             1    8[BANK0 ] PTR unsigned char 
 12185 ;;		 -> checksum(6), main@convertedNumber(16), 
 12186 ;;  opposite        1    3[BANK0 ] PTR unsigned char 
 12187 ;;		 -> checksum(6), main@convertedNumber(16), 
 12188 ;;  temp            1    2[BANK0 ] unsigned char 
 12189 ;;  i               2    6[BANK0 ] int 
 12190 ;;  halfway         2    0[BANK0 ] int 
 12191 ;;  counti          2    4[BANK0 ] int 
 12192 ;; Return value:  Size  Location     Type
 12193 ;;                  1    wreg      void 
 12194 ;; Registers used:
 12195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12196 ;; Tracked objects:
 12197 ;;		On entry : 1F/0
 12198 ;;		On exit  : 1F/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;Total ram usage:       11 bytes
 12206 ;; Hardware stack levels used:    1
 12207 ;; Hardware stack levels required when called:    4
 12208 ;; This function calls:
 12209 ;;		___awdiv
 12210 ;;		_strlen
 12211 ;; This function is called by:
 12212 ;;		_UIntToHexString
 12213 ;;		_IntToString
 12214 ;;		_UIntToString
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           
 12219                           ;psect for function _ReverseString
 12220  1290                     _ReverseString:	
 12221                           
 12222                           ;incstack = 0
 12223                           ; Regs used in _ReverseString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12224                           ;ReverseString@str stored from wreg
 12225  1290  00A8               	movwf	ReverseString@str
 12226                           
 12227                           ;main.c: 93: void ReverseString(char* str);main.c: 94: {;main.c: 95:     int counti = st
      +                          rlen(str);
 12228  1291  0828               	movf	ReverseString@str,w
 12229  1292  00F0               	movwf	strlen@s
 12230  1293  3001               	movlw	1
 12231  1294  00F1               	movwf	strlen@s+1
 12232  1295  319A  2231  3192   	fcall	_strlen
 12233  1298  0871               	movf	?_strlen+1,w
 12234  1299  0020               	movlb	0	; select bank0
 12235  129A  00A5               	movwf	ReverseString@counti+1
 12236  129B  0870               	movf	?_strlen,w
 12237  129C  00A4               	movwf	ReverseString@counti
 12238                           
 12239                           ;main.c: 96:     for (int i = 0, halfway = counti / 2; i < halfway; i++)
 12240  129D  01A6               	clrf	ReverseString@i
 12241  129E  01A7               	clrf	ReverseString@i+1
 12242  129F  3002               	movlw	2
 12243  12A0  00F0               	movwf	___awdiv@divisor
 12244  12A1  3000               	movlw	0
 12245  12A2  00F1               	movwf	___awdiv@divisor+1
 12246  12A3  0825               	movf	ReverseString@counti+1,w
 12247  12A4  00F3               	movwf	___awdiv@dividend+1
 12248  12A5  0824               	movf	ReverseString@counti,w
 12249  12A6  00F2               	movwf	___awdiv@dividend
 12250  12A7  3190  20E5  3192   	fcall	___awdiv
 12251  12AA  0871               	movf	?___awdiv+1,w
 12252  12AB  00A1               	movwf	ReverseString@halfway+1
 12253  12AC  0870               	movf	?___awdiv,w
 12254  12AD  00A0               	movwf	ReverseString@halfway
 12255  12AE                     l3452:	
 12256  12AE  0827               	movf	ReverseString@i+1,w
 12257  12AF  3A80               	xorlw	128
 12258  12B0  00F9               	movwf	??_ReverseString
 12259  12B1  0821               	movf	ReverseString@halfway+1,w
 12260  12B2  3A80               	xorlw	128
 12261  12B3  0279               	subwf	??_ReverseString,w
 12262  12B4  1D03               	skipz
 12263  12B5  2AB8               	goto	u3475
 12264  12B6  0820               	movf	ReverseString@halfway,w
 12265  12B7  0226               	subwf	ReverseString@i,w
 12266  12B8                     u3475:	
 12267  12B8  1803               	btfsc	3,0
 12268  12B9  2AE9               	goto	l3454
 12269                           
 12270                           ;main.c: 97:     {;main.c: 98:         char temp = str[i];
 12271  12BA  0020               	movlb	0	; select bank0
 12272  12BB  0826               	movf	ReverseString@i,w
 12273  12BC  0728               	addwf	ReverseString@str,w
 12274  12BD  00F9               	movwf	??_ReverseString
 12275  12BE  0879               	movf	??_ReverseString,w
 12276  12BF  0086               	movwf	6
 12277  12C0  3001               	movlw	1	; select bank2/3
 12278  12C1  0087               	movwf	7
 12279  12C2  0801               	movf	1,w
 12280  12C3  00FA               	movwf	??_ReverseString+1
 12281  12C4  087A               	movf	??_ReverseString+1,w
 12282  12C5  00A2               	movwf	ReverseString@temp
 12283                           
 12284                           ;main.c: 99:         char* opposite = str + (counti - 1 - i);
 12285  12C6  0826               	movf	ReverseString@i,w
 12286  12C7  0228               	subwf	ReverseString@str,w
 12287  12C8  0724               	addwf	ReverseString@counti,w
 12288  12C9  3EFF               	addlw	-1
 12289  12CA  00F9               	movwf	??_ReverseString
 12290  12CB  0879               	movf	??_ReverseString,w
 12291  12CC  00A3               	movwf	ReverseString@opposite
 12292                           
 12293                           ;main.c: 100:         str[i] = *opposite;
 12294  12CD  0823               	movf	ReverseString@opposite,w
 12295  12CE  0086               	movwf	6
 12296  12CF  3001               	movlw	1	; select bank2/3
 12297  12D0  0087               	movwf	7
 12298  12D1  0801               	movf	1,w
 12299  12D2  00F9               	movwf	??_ReverseString
 12300  12D3  0826               	movf	ReverseString@i,w
 12301  12D4  0728               	addwf	ReverseString@str,w
 12302  12D5  00FA               	movwf	??_ReverseString+1
 12303  12D6  087A               	movf	??_ReverseString+1,w
 12304  12D7  0086               	movwf	6
 12305  12D8  3001               	movlw	1	; select bank2/3
 12306  12D9  0087               	movwf	7
 12307  12DA  0879               	movf	??_ReverseString,w
 12308  12DB  0081               	movwf	1
 12309                           
 12310                           ;main.c: 101:         *opposite = temp;
 12311  12DC  0822               	movf	ReverseString@temp,w
 12312  12DD  00F9               	movwf	??_ReverseString
 12313  12DE  0823               	movf	ReverseString@opposite,w
 12314  12DF  0086               	movwf	6
 12315  12E0  3001               	movlw	1	; select bank2/3
 12316  12E1  0087               	movwf	7
 12317  12E2  0879               	movf	??_ReverseString,w
 12318  12E3  0081               	movwf	1
 12319                           
 12320                           ;main.c: 102:     }
 12321  12E4  3001               	movlw	1
 12322  12E5  07A6               	addwf	ReverseString@i,f
 12323  12E6  3000               	movlw	0
 12324  12E7  3DA7               	addwfc	ReverseString@i+1,f
 12325  12E8  2AAE               	goto	l3452
 12326  12E9                     l3454:	
 12327                           
 12328                           ;main.c: 103:     str[counti] = '\0';
 12329  12E9  0020               	movlb	0	; select bank0
 12330  12EA  0824               	movf	ReverseString@counti,w
 12331  12EB  0728               	addwf	ReverseString@str,w
 12332  12EC  00F9               	movwf	??_ReverseString
 12333  12ED  0879               	movf	??_ReverseString,w
 12334  12EE  0086               	movwf	6
 12335  12EF  3001               	movlw	1	; select bank2/3
 12336  12F0  0087               	movwf	7
 12337  12F1  0181               	clrf	1
 12338  12F2  0008               	return
 12339  12F3                     __end_of_ReverseString:	
 12340                           
 12341                           	psect	text26
 12342  10E5                     __ptext26:	
 12343 ;; *************** function ___awdiv *****************
 12344 ;; Defined at:
 12345 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\awdiv.c"
 12346 ;; Parameters:    Size  Location     Type
 12347 ;;  divisor         2    0[COMMON] int 
 12348 ;;  dividend        2    2[COMMON] int 
 12349 ;; Auto vars:     Size  Location     Type
 12350 ;;  quotient        2    7[COMMON] int 
 12351 ;;  sign            1    6[COMMON] unsigned char 
 12352 ;;  counter         1    5[COMMON] unsigned char 
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  2    0[COMMON] int 
 12355 ;; Registers used:
 12356 ;;		wreg, status,2, status,0
 12357 ;; Tracked objects:
 12358 ;;		On entry : 1F/0
 12359 ;;		On exit  : 1F/0
 12360 ;;		Unchanged: 1F/0
 12361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12362 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;Total ram usage:        9 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; Hardware stack levels required when called:    3
 12369 ;; This function calls:
 12370 ;;		Nothing
 12371 ;; This function is called by:
 12372 ;;		_ReverseString
 12373 ;;		_IntToString
 12374 ;; This function uses a non-reentrant model
 12375 ;;
 12376                           
 12377                           
 12378                           ;psect for function ___awdiv
 12379  10E5                     ___awdiv:	
 12380                           
 12381                           ;incstack = 0
 12382                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12383  10E5  01F6               	clrf	___awdiv@sign
 12384  10E6  1FF1               	btfss	___awdiv@divisor+1,7
 12385  10E7  28EF               	goto	l3206
 12386  10E8  09F0               	comf	___awdiv@divisor,f
 12387  10E9  09F1               	comf	___awdiv@divisor+1,f
 12388  10EA  0AF0               	incf	___awdiv@divisor,f
 12389  10EB  1903               	skipnz
 12390  10EC  0AF1               	incf	___awdiv@divisor+1,f
 12391  10ED  01F6               	clrf	___awdiv@sign
 12392  10EE  0AF6               	incf	___awdiv@sign,f
 12393  10EF                     l3206:	
 12394  10EF  1FF3               	btfss	___awdiv@dividend+1,7
 12395  10F0  28FA               	goto	l3212
 12396  10F1  09F2               	comf	___awdiv@dividend,f
 12397  10F2  09F3               	comf	___awdiv@dividend+1,f
 12398  10F3  0AF2               	incf	___awdiv@dividend,f
 12399  10F4  1903               	skipnz
 12400  10F5  0AF3               	incf	___awdiv@dividend+1,f
 12401  10F6  3001               	movlw	1
 12402  10F7  00F4               	movwf	??___awdiv
 12403  10F8  0874               	movf	??___awdiv,w
 12404  10F9  06F6               	xorwf	___awdiv@sign,f
 12405  10FA                     l3212:	
 12406  10FA  01F7               	clrf	___awdiv@quotient
 12407  10FB  01F8               	clrf	___awdiv@quotient+1
 12408  10FC  0870               	movf	___awdiv@divisor,w
 12409  10FD  0471               	iorwf	___awdiv@divisor+1,w
 12410  10FE  1903               	btfsc	3,2
 12411  10FF  2929               	goto	l3234
 12412  1100  01F5               	clrf	___awdiv@counter
 12413  1101  0AF5               	incf	___awdiv@counter,f
 12414  1102                     l3222:	
 12415  1102  1BF1               	btfsc	___awdiv@divisor+1,7
 12416  1103  290E               	goto	l3224
 12417  1104  3001               	movlw	1
 12418  1105                     u3075:	
 12419  1105  35F0               	lslf	___awdiv@divisor,f
 12420  1106  0DF1               	rlf	___awdiv@divisor+1,f
 12421  1107  0B89               	decfsz	9,f
 12422  1108  2905               	goto	u3075
 12423  1109  3001               	movlw	1
 12424  110A  00F4               	movwf	??___awdiv
 12425  110B  0874               	movf	??___awdiv,w
 12426  110C  07F5               	addwf	___awdiv@counter,f
 12427  110D  2902               	goto	l3222
 12428  110E                     l3224:	
 12429  110E  3001               	movlw	1
 12430  110F                     u3095:	
 12431  110F  35F7               	lslf	___awdiv@quotient,f
 12432  1110  0DF8               	rlf	___awdiv@quotient+1,f
 12433  1111  0B89               	decfsz	9,f
 12434  1112  290F               	goto	u3095
 12435  1113  0871               	movf	___awdiv@divisor+1,w
 12436  1114  0273               	subwf	___awdiv@dividend+1,w
 12437  1115  1D03               	skipz
 12438  1116  2919               	goto	u3105
 12439  1117  0870               	movf	___awdiv@divisor,w
 12440  1118  0272               	subwf	___awdiv@dividend,w
 12441  1119                     u3105:	
 12442  1119  1C03               	skipc
 12443  111A  2920               	goto	l3230
 12444  111B  0870               	movf	___awdiv@divisor,w
 12445  111C  02F2               	subwf	___awdiv@dividend,f
 12446  111D  0871               	movf	___awdiv@divisor+1,w
 12447  111E  3BF3               	subwfb	___awdiv@dividend+1,f
 12448  111F  1477               	bsf	___awdiv@quotient,0
 12449  1120                     l3230:	
 12450  1120  3001               	movlw	1
 12451  1121                     u3115:	
 12452  1121  36F1               	lsrf	___awdiv@divisor+1,f
 12453  1122  0CF0               	rrf	___awdiv@divisor,f
 12454  1123  0B89               	decfsz	9,f
 12455  1124  2921               	goto	u3115
 12456  1125  3001               	movlw	1
 12457  1126  02F5               	subwf	___awdiv@counter,f
 12458  1127  1D03               	btfss	3,2
 12459  1128  290E               	goto	l3224
 12460  1129                     l3234:	
 12461  1129  0876               	movf	___awdiv@sign,w
 12462  112A  1903               	btfsc	3,2
 12463  112B  2931               	goto	l3238
 12464  112C  09F7               	comf	___awdiv@quotient,f
 12465  112D  09F8               	comf	___awdiv@quotient+1,f
 12466  112E  0AF7               	incf	___awdiv@quotient,f
 12467  112F  1903               	skipnz
 12468  1130  0AF8               	incf	___awdiv@quotient+1,f
 12469  1131                     l3238:	
 12470  1131  0878               	movf	___awdiv@quotient+1,w
 12471  1132  00F1               	movwf	?___awdiv+1
 12472  1133  0877               	movf	___awdiv@quotient,w
 12473  1134  00F0               	movwf	?___awdiv
 12474  1135  0008               	return
 12475  1136                     __end_of___awdiv:	
 12476                           
 12477                           	psect	text27
 12478  1094                     __ptext27:	
 12479 ;; *************** function _InsertString *****************
 12480 ;; Defined at:
 12481 ;;		line 80 in file "main.c"
 12482 ;; Parameters:    Size  Location     Type
 12483 ;;  dest            2    0[BANK0 ] PTR unsigned char 
 12484 ;;		 -> message_end(73), message_start(70), 
 12485 ;;  src             2    2[BANK0 ] PTR unsigned char 
 12486 ;;		 -> STR_2(3), checksum(6), STR_1(7), main@convertedNumber(16), 
 12487 ;;  index           2    4[BANK0 ] int 
 12488 ;;  destLimit       2    6[BANK0 ] int 
 12489 ;; Auto vars:     Size  Location     Type
 12490 ;;  i               2   10[BANK0 ] int 
 12491 ;;  counti          2    8[BANK0 ] int 
 12492 ;; Return value:  Size  Location     Type
 12493 ;;                  2    0[BANK0 ] int 
 12494 ;; Registers used:
 12495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12496 ;; Tracked objects:
 12497 ;;		On entry : 1F/0
 12498 ;;		On exit  : 1F/0
 12499 ;;		Unchanged: 0/0
 12500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12501 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12502 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12503 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;      Totals:         1      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;Total ram usage:       13 bytes
 12506 ;; Hardware stack levels used:    1
 12507 ;; Hardware stack levels required when called:    4
 12508 ;; This function calls:
 12509 ;;		_Insert
 12510 ;;		_strlen
 12511 ;; This function is called by:
 12512 ;;		_main
 12513 ;; This function uses a non-reentrant model
 12514 ;;
 12515                           
 12516                           
 12517                           ;psect for function _InsertString
 12518  1094                     _InsertString:	
 12519                           
 12520                           ;main.c: 80: int InsertString(char* dest, char* src, int index, int destLimit);main.c: 8
      +                          1: {;main.c: 82:     for (int i = 0, counti = strlen(src); i < counti && index < destLim
      +                          it; i++)
 12521                           
 12522                           ;incstack = 0
 12523                           ; Regs used in _InsertString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12524  1094  01AA               	clrf	InsertString@i
 12525  1095  01AB               	clrf	InsertString@i+1
 12526  1096  0823               	movf	InsertString@src+1,w
 12527  1097  00F1               	movwf	strlen@s+1
 12528  1098  0822               	movf	InsertString@src,w
 12529  1099  00F0               	movwf	strlen@s
 12530  109A  319A  2231  3190   	fcall	_strlen
 12531  109D  0871               	movf	?_strlen+1,w
 12532  109E  0020               	movlb	0	; select bank0
 12533  109F  00A9               	movwf	InsertString@counti+1
 12534  10A0  0870               	movf	?_strlen,w
 12535  10A1  00A8               	movwf	InsertString@counti
 12536  10A2  28D3               	goto	l4602
 12537  10A3                     l4604:	
 12538  10A3  0020               	movlb	0	; select bank0
 12539  10A4  0825               	movf	InsertString@index+1,w
 12540  10A5  3A80               	xorlw	128
 12541  10A6  00FB               	movwf	??_InsertString
 12542  10A7  0827               	movf	InsertString@destLimit+1,w
 12543  10A8  3A80               	xorlw	128
 12544  10A9  027B               	subwf	??_InsertString,w
 12545  10AA  1D03               	skipz
 12546  10AB  28AE               	goto	u5195
 12547  10AC  0826               	movf	InsertString@destLimit,w
 12548  10AD  0224               	subwf	InsertString@index,w
 12549  10AE                     u5195:	
 12550  10AE  1803               	btfsc	3,0
 12551  10AF  28DF               	goto	l4606
 12552                           
 12553                           ;main.c: 83:     {;main.c: 85:         Insert(dest, src[i], index++, destLimit);
 12554  10B0  0020               	movlb	0	; select bank0
 12555  10B1  0821               	movf	InsertString@dest+1,w
 12556  10B2  00F1               	movwf	Insert@dest+1
 12557  10B3  0820               	movf	InsertString@dest,w
 12558  10B4  00F0               	movwf	Insert@dest
 12559  10B5  0822               	movf	InsertString@src,w
 12560  10B6  072A               	addwf	InsertString@i,w
 12561  10B7  0084               	movwf	4
 12562  10B8  0823               	movf	InsertString@src+1,w
 12563  10B9  3D2B               	addwfc	InsertString@i+1,w
 12564  10BA  0085               	movwf	5
 12565  10BB  0800               	movf	0,w	;code access
 12566  10BC  00FB               	movwf	??_InsertString
 12567  10BD  087B               	movf	??_InsertString,w
 12568  10BE  00F2               	movwf	Insert@src
 12569  10BF  0825               	movf	InsertString@index+1,w
 12570  10C0  00F4               	movwf	Insert@index+1
 12571  10C1  0824               	movf	InsertString@index,w
 12572  10C2  00F3               	movwf	Insert@index
 12573  10C3  0827               	movf	InsertString@destLimit+1,w
 12574  10C4  00F6               	movwf	Insert@destLimit+1
 12575  10C5  0826               	movf	InsertString@destLimit,w
 12576  10C6  00F5               	movwf	Insert@destLimit
 12577  10C7  3195  2501  3190   	fcall	_Insert
 12578  10CA  3001               	movlw	1
 12579  10CB  0020               	movlb	0	; select bank0
 12580  10CC  07A4               	addwf	InsertString@index,f
 12581  10CD  3000               	movlw	0
 12582  10CE  3DA5               	addwfc	InsertString@index+1,f
 12583                           
 12584                           ;main.c: 86:     }
 12585  10CF  3001               	movlw	1
 12586  10D0  07AA               	addwf	InsertString@i,f
 12587  10D1  3000               	movlw	0
 12588  10D2  3DAB               	addwfc	InsertString@i+1,f
 12589  10D3                     l4602:	
 12590  10D3  082B               	movf	InsertString@i+1,w
 12591  10D4  3A80               	xorlw	128
 12592  10D5  00FB               	movwf	??_InsertString
 12593  10D6  0829               	movf	InsertString@counti+1,w
 12594  10D7  3A80               	xorlw	128
 12595  10D8  027B               	subwf	??_InsertString,w
 12596  10D9  1D03               	skipz
 12597  10DA  28DD               	goto	u5185
 12598  10DB  0828               	movf	InsertString@counti,w
 12599  10DC  022A               	subwf	InsertString@i,w
 12600  10DD                     u5185:	
 12601  10DD  1C03               	btfss	3,0
 12602  10DE  28A3               	goto	l4604
 12603  10DF                     l4606:	
 12604                           
 12605                           ;main.c: 87:     return index;
 12606  10DF  0020               	movlb	0	; select bank0
 12607  10E0  0825               	movf	InsertString@index+1,w
 12608  10E1  00A1               	movwf	?_InsertString+1
 12609  10E2  0824               	movf	InsertString@index,w
 12610  10E3  00A0               	movwf	?_InsertString
 12611  10E4  0008               	return
 12612  10E5                     __end_of_InsertString:	
 12613                           
 12614                           	psect	text28
 12615  1501                     __ptext28:	
 12616 ;; *************** function _Insert *****************
 12617 ;; Defined at:
 12618 ;;		line 55 in file "main.c"
 12619 ;; Parameters:    Size  Location     Type
 12620 ;;  dest            2    0[COMMON] PTR unsigned char 
 12621 ;;		 -> message_end(73), message_start(70), 
 12622 ;;  src             1    2[COMMON] unsigned char 
 12623 ;;  index           2    3[COMMON] int 
 12624 ;;  destLimit       2    5[COMMON] int 
 12625 ;; Auto vars:     Size  Location     Type
 12626 ;;  current         1   10[COMMON] unsigned char 
 12627 ;;  temp            1    9[COMMON] unsigned char 
 12628 ;; Return value:  Size  Location     Type
 12629 ;;                  2    0[COMMON] int 
 12630 ;; Registers used:
 12631 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12632 ;; Tracked objects:
 12633 ;;		On entry : 1D/2
 12634 ;;		On exit  : 0/0
 12635 ;;		Unchanged: 0/0
 12636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12637 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;Total ram usage:       11 bytes
 12642 ;; Hardware stack levels used:    1
 12643 ;; Hardware stack levels required when called:    3
 12644 ;; This function calls:
 12645 ;;		Nothing
 12646 ;; This function is called by:
 12647 ;;		_InsertString
 12648 ;;		_main
 12649 ;; This function uses a non-reentrant model
 12650 ;;
 12651                           
 12652                           
 12653                           ;psect for function _Insert
 12654  1501                     _Insert:	
 12655                           
 12656                           ;main.c: 58:     temp = dest[index];
 12657                           
 12658                           ;incstack = 0
 12659                           ; Regs used in _Insert: [wreg+fsr1l+fsr1h+status,2+status,0]
 12660  1501  0873               	movf	Insert@index,w
 12661  1502  0770               	addwf	Insert@dest,w
 12662  1503  0086               	movwf	6
 12663  1504  0874               	movf	Insert@index+1,w
 12664  1505  3D71               	addwfc	Insert@dest+1,w
 12665  1506  0087               	movwf	7
 12666  1507  0801               	movf	1,w
 12667  1508  00F7               	movwf	??_Insert
 12668  1509  0877               	movf	??_Insert,w
 12669  150A  00F9               	movwf	Insert@temp
 12670                           
 12671                           ;main.c: 59:     dest[index] = src;
 12672  150B  0873               	movf	Insert@index,w
 12673  150C  0770               	addwf	Insert@dest,w
 12674  150D  00F7               	movwf	??_Insert
 12675  150E  0874               	movf	Insert@index+1,w
 12676  150F  3D71               	addwfc	Insert@dest+1,w
 12677  1510  00F8               	movwf	??_Insert+1
 12678  1511  0877               	movf	??_Insert,w
 12679  1512  0086               	movwf	6
 12680  1513  0878               	movf	??_Insert+1,w
 12681  1514  0087               	movwf	7
 12682  1515  0872               	movf	Insert@src,w
 12683  1516  0081               	movwf	1
 12684                           
 12685                           ;main.c: 60:     if (dest[index + 1] == '\0')
 12686  1517  0873               	movf	Insert@index,w
 12687  1518  0770               	addwf	Insert@dest,w
 12688  1519  00F7               	movwf	??_Insert
 12689  151A  0874               	movf	Insert@index+1,w
 12690  151B  3D71               	addwfc	Insert@dest+1,w
 12691  151C  00F8               	movwf	??_Insert+1
 12692  151D  0877               	movf	??_Insert,w
 12693  151E  0086               	movwf	6
 12694  151F  0878               	movf	??_Insert+1,w
 12695  1520  0087               	movwf	7
 12696  1521  3141               	addfsr 1,1
 12697  1522  0801               	movf	1,w
 12698  1523  1D03               	btfss	3,2
 12699  1524  2D2C               	goto	l4524
 12700                           
 12701                           ;main.c: 61:     {;main.c: 62:         return index + 1;
 12702  1525  0873               	movf	Insert@index,w
 12703  1526  3E01               	addlw	1
 12704  1527  00F0               	movwf	?_Insert
 12705  1528  3000               	movlw	0
 12706  1529  3D74               	addwfc	Insert@index+1,w
 12707  152A  00F1               	movwf	?_Insert+1
 12708  152B  0008               	return
 12709  152C                     l4524:	
 12710                           
 12711                           ;main.c: 64:     index++;
 12712  152C  3001               	movlw	1
 12713  152D  07F3               	addwf	Insert@index,f
 12714  152E  3000               	movlw	0
 12715  152F  3DF4               	addwfc	Insert@index+1,f
 12716  1530                     l4536:	
 12717                           ;main.c: 65:     while (index < destLimit)
 12718                           
 12719                           
 12720                           ;main.c: 65:     while (index < destLimit)
 12721  1530  0874               	movf	Insert@index+1,w
 12722  1531  3A80               	xorlw	128
 12723  1532  00F7               	movwf	??_Insert
 12724  1533  0876               	movf	Insert@destLimit+1,w
 12725  1534  3A80               	xorlw	128
 12726  1535  0277               	subwf	??_Insert,w
 12727  1536  1D03               	skipz
 12728  1537  2D3A               	goto	u5085
 12729  1538  0875               	movf	Insert@destLimit,w
 12730  1539  0273               	subwf	Insert@index,w
 12731  153A                     u5085:	
 12732  153A  1803               	btfsc	3,0
 12733  153B  2D69               	goto	l4538
 12734                           
 12735                           ;main.c: 66:     {;main.c: 67:         char current = dest[index];
 12736  153C  0873               	movf	Insert@index,w
 12737  153D  0770               	addwf	Insert@dest,w
 12738  153E  0086               	movwf	6
 12739  153F  0874               	movf	Insert@index+1,w
 12740  1540  3D71               	addwfc	Insert@dest+1,w
 12741  1541  0087               	movwf	7
 12742  1542  0801               	movf	1,w
 12743  1543  00F7               	movwf	??_Insert
 12744  1544  0877               	movf	??_Insert,w
 12745  1545  00FA               	movwf	Insert@current
 12746                           
 12747                           ;main.c: 68:         dest[index] = temp;
 12748  1546  0873               	movf	Insert@index,w
 12749  1547  0770               	addwf	Insert@dest,w
 12750  1548  00F7               	movwf	??_Insert
 12751  1549  0874               	movf	Insert@index+1,w
 12752  154A  3D71               	addwfc	Insert@dest+1,w
 12753  154B  00F8               	movwf	??_Insert+1
 12754  154C  0877               	movf	??_Insert,w
 12755  154D  0086               	movwf	6
 12756  154E  0878               	movf	??_Insert+1,w
 12757  154F  0087               	movwf	7
 12758  1550  0879               	movf	Insert@temp,w
 12759  1551  0081               	movwf	1
 12760                           
 12761                           ;main.c: 69:         temp = current;
 12762  1552  087A               	movf	Insert@current,w
 12763  1553  00F7               	movwf	??_Insert
 12764  1554  0877               	movf	??_Insert,w
 12765  1555  00F9               	movwf	Insert@temp
 12766                           
 12767                           ;main.c: 70:         index++;
 12768  1556  3001               	movlw	1
 12769  1557  07F3               	addwf	Insert@index,f
 12770  1558  3000               	movlw	0
 12771  1559  3DF4               	addwfc	Insert@index+1,f
 12772                           
 12773                           ;main.c: 71:         if (current == '\0')
 12774  155A  087A               	movf	Insert@current,w
 12775  155B  1D03               	btfss	3,2
 12776  155C  2D30               	goto	l4536
 12777                           
 12778                           ;main.c: 72:         {;main.c: 73:             dest[index] = current;
 12779  155D  0873               	movf	Insert@index,w
 12780  155E  0770               	addwf	Insert@dest,w
 12781  155F  00F7               	movwf	??_Insert
 12782  1560  0874               	movf	Insert@index+1,w
 12783  1561  3D71               	addwfc	Insert@dest+1,w
 12784  1562  00F8               	movwf	??_Insert+1
 12785  1563  0877               	movf	??_Insert,w
 12786  1564  0086               	movwf	6
 12787  1565  0878               	movf	??_Insert+1,w
 12788  1566  0087               	movwf	7
 12789  1567  087A               	movf	Insert@current,w
 12790  1568  0081               	movwf	1
 12791  1569                     l4538:	
 12792                           ;main.c: 74:             break;
 12793                           
 12794                           
 12795                           ;main.c: 77:     return index;
 12796  1569  0874               	movf	Insert@index+1,w
 12797  156A  00F1               	movwf	?_Insert+1
 12798  156B  0873               	movf	Insert@index,w
 12799  156C  00F0               	movwf	?_Insert
 12800  156D  0008               	return
 12801  156E                     __end_of_Insert:	
 12802                           
 12803                           	psect	text29
 12804  19CF                     __ptext29:	
 12805 ;; *************** function _InitTiming *****************
 12806 ;; Defined at:
 12807 ;;		line 11 in file "timing.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;		None
 12810 ;; Auto vars:     Size  Location     Type
 12811 ;;		None
 12812 ;; Return value:  Size  Location     Type
 12813 ;;                  1    wreg      void 
 12814 ;; Registers used:
 12815 ;;		wreg, status,2, status,0, pclath, cstack
 12816 ;; Tracked objects:
 12817 ;;		On entry : 1F/3
 12818 ;;		On exit  : 1F/2
 12819 ;;		Unchanged: 0/0
 12820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12825 ;;Total ram usage:        0 bytes
 12826 ;; Hardware stack levels used:    1
 12827 ;; Hardware stack levels required when called:    4
 12828 ;; This function calls:
 12829 ;;		_TMR0_SetInterruptHandler
 12830 ;; This function is called by:
 12831 ;;		_main
 12832 ;; This function uses a non-reentrant model
 12833 ;;
 12834                           
 12835                           
 12836                           ;psect for function _InitTiming
 12837  19CF                     _InitTiming:	
 12838                           
 12839                           ;timing.c: 13:     (INTCONbits.GIE = 1);
 12840                           
 12841                           ;incstack = 0
 12842                           ; Regs used in _InitTiming: [wreg+status,2+status,0+pclath+cstack]
 12843  19CF  178B               	bsf	11,7	;volatile
 12844                           
 12845                           ;timing.c: 14:     TMR0_SetInterruptHandler(TimerISR);
 12846  19D0  30D7               	movlw	low _TimerISR
 12847  19D1  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 12848  19D2  3019               	movlw	high _TimerISR
 12849  19D3  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 12850  19D4  3199  21BC         	fcall	_TMR0_SetInterruptHandler
 12851  19D6  0008               	return
 12852  19D7                     __end_of_InitTiming:	
 12853                           
 12854                           	psect	text30
 12855  19BC                     __ptext30:	
 12856 ;; *************** function _TMR0_SetInterruptHandler *****************
 12857 ;; Defined at:
 12858 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 12859 ;; Parameters:    Size  Location     Type
 12860 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
 12861 ;;		 -> TimerISR(1), TMR0_DefaultInterruptHandler(1), 
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;		None
 12864 ;; Return value:  Size  Location     Type
 12865 ;;                  1    wreg      void 
 12866 ;; Registers used:
 12867 ;;		wreg
 12868 ;; Tracked objects:
 12869 ;;		On entry : 1E/2
 12870 ;;		On exit  : 1F/2
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12873 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;Total ram usage:        2 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:    3
 12880 ;; This function calls:
 12881 ;;		Nothing
 12882 ;; This function is called by:
 12883 ;;		_TMR0_Initialize
 12884 ;;		_InitTiming
 12885 ;; This function uses a non-reentrant model
 12886 ;;
 12887                           
 12888                           
 12889                           ;psect for function _TMR0_SetInterruptHandler
 12890  19BC                     _TMR0_SetInterruptHandler:	
 12891                           
 12892                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
 12893                           
 12894                           ;incstack = 0
 12895                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 12896  19BC  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 12897  19BD  0022               	movlb	2	; select bank2
 12898  19BE  00E3               	movwf	(_TMR0_InterruptHandler+1)^(0+256)
 12899  19BF  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 12900  19C0  00E2               	movwf	_TMR0_InterruptHandler^(0+256)
 12901  19C1  0008               	return
 12902  19C2                     __end_of_TMR0_SetInterruptHandler:	
 12903                           
 12904                           	psect	text31
 12905  1B17                     __ptext31:	
 12906 ;; *************** function _ClearString *****************
 12907 ;; Defined at:
 12908 ;;		line 25 in file "main.c"
 12909 ;; Parameters:    Size  Location     Type
 12910 ;;  str             2    5[COMMON] PTR unsigned char 
 12911 ;;		 -> main@convertedNumber(16), message_end(73), message_start(70), 
 12912 ;; Auto vars:     Size  Location     Type
 12913 ;;  i               2   10[COMMON] int 
 12914 ;;  counti          2    8[COMMON] int 
 12915 ;; Return value:  Size  Location     Type
 12916 ;;                  1    wreg      void 
 12917 ;; Registers used:
 12918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12919 ;; Tracked objects:
 12920 ;;		On entry : 1F/2
 12921 ;;		On exit  : 0/0
 12922 ;;		Unchanged: 0/0
 12923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12924 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;Total ram usage:        7 bytes
 12929 ;; Hardware stack levels used:    1
 12930 ;; Hardware stack levels required when called:    4
 12931 ;; This function calls:
 12932 ;;		_strlen
 12933 ;; This function is called by:
 12934 ;;		_main
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938                           
 12939                           ;psect for function _ClearString
 12940  1B17                     _ClearString:	
 12941                           
 12942                           ;main.c: 25: void ClearString(char* str);main.c: 26: {;main.c: 27:     for (int i = 0, c
      +                          ounti = strlen(str); i < counti; i++)
 12943                           
 12944                           ;incstack = 0
 12945                           ; Regs used in _ClearString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12946  1B17  01FA               	clrf	ClearString@i
 12947  1B18  01FB               	clrf	ClearString@i+1
 12948  1B19  0876               	movf	ClearString@str+1,w
 12949  1B1A  00F1               	movwf	strlen@s+1
 12950  1B1B  0875               	movf	ClearString@str,w
 12951  1B1C  00F0               	movwf	strlen@s
 12952  1B1D  319A  2231  319B   	fcall	_strlen
 12953  1B20  0871               	movf	?_strlen+1,w
 12954  1B21  00F9               	movwf	ClearString@counti+1
 12955  1B22  0870               	movf	?_strlen,w
 12956  1B23  00F8               	movwf	ClearString@counti
 12957  1B24                     l4590:	
 12958  1B24  087B               	movf	ClearString@i+1,w
 12959  1B25  3A80               	xorlw	128
 12960  1B26  00F7               	movwf	??_ClearString
 12961  1B27  0879               	movf	ClearString@counti+1,w
 12962  1B28  3A80               	xorlw	128
 12963  1B29  0277               	subwf	??_ClearString,w
 12964  1B2A  1D03               	skipz
 12965  1B2B  2B2E               	goto	u5175
 12966  1B2C  0878               	movf	ClearString@counti,w
 12967  1B2D  027A               	subwf	ClearString@i,w
 12968  1B2E                     u5175:	
 12969  1B2E  1803               	btfsc	3,0
 12970  1B2F  0008               	return
 12971                           
 12972                           ;main.c: 28:     {;main.c: 29:         str[i] = '\0';
 12973  1B30  087A               	movf	ClearString@i,w
 12974  1B31  0775               	addwf	ClearString@str,w
 12975  1B32  0086               	movwf	6
 12976  1B33  087B               	movf	ClearString@i+1,w
 12977  1B34  3D76               	addwfc	ClearString@str+1,w
 12978  1B35  0087               	movwf	7
 12979  1B36  0181               	clrf	1
 12980                           
 12981                           ;main.c: 30:     }
 12982  1B37  3001               	movlw	1
 12983  1B38  07FA               	addwf	ClearString@i,f
 12984  1B39  3000               	movlw	0
 12985  1B3A  3DFB               	addwfc	ClearString@i+1,f
 12986  1B3B  2B24               	goto	l4590
 12987  1B3C                     __end_of_ClearString:	
 12988                           
 12989                           	psect	text32
 12990  1A31                     __ptext32:	
 12991 ;; *************** function _strlen *****************
 12992 ;; Defined at:
 12993 ;;		line 12 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strlen.c"
 12994 ;; Parameters:    Size  Location     Type
 12995 ;;  s               2    0[COMMON] PTR const unsigned char 
 12996 ;;		 -> STR_2(3), checksum(6), STR_1(7), main@convertedNumber(16), 
 12997 ;;		 -> message_end(73), message_start(70), 
 12998 ;; Auto vars:     Size  Location     Type
 12999 ;;  a               2    3[COMMON] PTR const unsigned char 
 13000 ;;		 -> STR_2(3), checksum(6), STR_1(7), main@convertedNumber(16), 
 13001 ;;		 -> message_end(73), message_start(70), 
 13002 ;; Return value:  Size  Location     Type
 13003 ;;                  2    0[COMMON] unsigned int 
 13004 ;; Registers used:
 13005 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13006 ;; Tracked objects:
 13007 ;;		On entry : 1D/2
 13008 ;;		On exit  : 1D/0
 13009 ;;		Unchanged: 1D/0
 13010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13011 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;Total ram usage:        5 bytes
 13016 ;; Hardware stack levels used:    1
 13017 ;; Hardware stack levels required when called:    3
 13018 ;; This function calls:
 13019 ;;		Nothing
 13020 ;; This function is called by:
 13021 ;;		_ClearString
 13022 ;;		_InsertString
 13023 ;;		_ReverseString
 13024 ;;		_main
 13025 ;;		_crc16
 13026 ;;		_TransmitString
 13027 ;; This function uses a non-reentrant model
 13028 ;;
 13029                           
 13030                           
 13031                           ;psect for function _strlen
 13032  1A31                     _strlen:	
 13033                           
 13034                           ;incstack = 0
 13035                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 13036  1A31  0871               	movf	strlen@s+1,w
 13037  1A32  00F4               	movwf	strlen@a+1
 13038  1A33  0870               	movf	strlen@s,w
 13039  1A34  00F3               	movwf	strlen@a
 13040  1A35                     l3188:	
 13041  1A35  0870               	movf	strlen@s,w
 13042  1A36  0084               	movwf	4
 13043  1A37  0871               	movf	strlen@s+1,w
 13044  1A38  0085               	movwf	5
 13045  1A39  0012               	moviw fsr0++
 13046  1A3A  1903               	btfsc	3,2
 13047  1A3B  2A41               	goto	l3190
 13048  1A3C  3001               	movlw	1
 13049  1A3D  07F0               	addwf	strlen@s,f
 13050  1A3E  3000               	movlw	0
 13051  1A3F  3DF1               	addwfc	strlen@s+1,f
 13052  1A40  2A35               	goto	l3188
 13053  1A41                     l3190:	
 13054  1A41  0873               	movf	strlen@a,w
 13055  1A42  0270               	subwf	strlen@s,w
 13056  1A43  00F0               	movwf	?_strlen
 13057  1A44  0874               	movf	strlen@a+1,w
 13058  1A45  3B71               	subwfb	strlen@s+1,w
 13059  1A46  00F1               	movwf	?_strlen+1
 13060  1A47  0008               	return
 13061  1A48                     __end_of_strlen:	
 13062                           
 13063                           	psect	text33
 13064  135B                     __ptext33:	
 13065 ;; *************** function _BME280_Init *****************
 13066 ;; Defined at:
 13067 ;;		line 76 in file "bme280_i2c.c"
 13068 ;; Parameters:    Size  Location     Type
 13069 ;;		None
 13070 ;; Auto vars:     Size  Location     Type
 13071 ;;  settings_sel    1   22[BANK1 ] unsigned char 
 13072 ;;  rslt            1   23[BANK1 ] char 
 13073 ;; Return value:  Size  Location     Type
 13074 ;;                  1    wreg      void 
 13075 ;; Registers used:
 13076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13077 ;; Tracked objects:
 13078 ;;		On entry : 1F/2
 13079 ;;		On exit  : 0/0
 13080 ;;		Unchanged: 0/0
 13081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13086 ;;Total ram usage:        4 bytes
 13087 ;; Hardware stack levels used:    1
 13088 ;; Hardware stack levels required when called:   15
 13089 ;; This function calls:
 13090 ;;		_DebugAlert
 13091 ;;		_I2C_Init
 13092 ;;		_bme280_init
 13093 ;;		_bme280_set_sensor_mode
 13094 ;;		_bme280_set_sensor_settings
 13095 ;; This function is called by:
 13096 ;;		_main
 13097 ;; This function uses a non-reentrant model
 13098 ;;
 13099                           
 13100                           
 13101                           ;psect for function _BME280_Init
 13102  135B                     _BME280_Init:	
 13103                           
 13104                           ;bme280_i2c.c: 78:     I2C_Init();
 13105                           
 13106                           ;incstack = 0
 13107                           ; Regs used in _BME280_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13108  135B  319A  2207  3193   	fcall	_I2C_Init
 13109                           
 13110                           ;bme280_i2c.c: 82:     EnvSensor.dev_id = 0x76;
 13111  135E  3076               	movlw	118
 13112  135F  0021               	movlb	1	; select bank1
 13113  1360  00B4               	movwf	??_BME280_Init^(0+128)
 13114  1361  0834               	movf	??_BME280_Init^(0+128),w
 13115  1362  0023               	movlb	3	; select bank3
 13116  1363  00B1               	movwf	(_EnvSensor^(0+384)+1)
 13117                           
 13118                           ;bme280_i2c.c: 83:     EnvSensor.intf = BME280_I2C_INTF;
 13119  1364  01B2               	clrf	(_EnvSensor^(0+384)+2)
 13120  1365  0AB2               	incf	(_EnvSensor^(0+384)+2),f
 13121                           
 13122                           ;bme280_i2c.c: 84:     EnvSensor.read = ReadEnvSensor;
 13123  1366  303E               	movlw	low _ReadEnvSensor
 13124  1367  00B3               	movwf	(low ((_EnvSensor| (0+256)+3)))^(0+128)
 13125  1368  3007               	movlw	high _ReadEnvSensor
 13126  1369  00B4               	movwf	((low ((_EnvSensor| (0+256)+3)))^(0+128)+1)
 13127                           
 13128                           ;bme280_i2c.c: 85:     EnvSensor.write = WriteEnvSensor;
 13129  136A  302B               	movlw	low _WriteEnvSensor
 13130  136B  00B5               	movwf	(low ((_EnvSensor| (0+256)+5)))^(0+128)
 13131  136C  3014               	movlw	high _WriteEnvSensor
 13132  136D  00B6               	movwf	((low ((_EnvSensor| (0+256)+5)))^(0+128)+1)
 13133                           
 13134                           ;bme280_i2c.c: 86:     EnvSensor.delay_ms = Sleep;
 13135  136E  30B6               	movlw	low _Sleep
 13136  136F  00B7               	movwf	(low ((_EnvSensor| (0+256)+7)))^(0+128)
 13137  1370  301B               	movlw	high _Sleep
 13138  1371  00B8               	movwf	((low ((_EnvSensor| (0+256)+7)))^(0+128)+1)
 13139                           
 13140                           ;bme280_i2c.c: 88:     rslt = bme280_init(&EnvSensor);
 13141  1372  30B0               	movlw	(low (_EnvSensor| (0+256)))& (0+255)
 13142  1373  3192  22F3  3193   	fcall	_bme280_init
 13143  1376  0021               	movlb	1	; select bank1
 13144  1377  00B4               	movwf	??_BME280_Init^(0+128)
 13145  1378  0834               	movf	??_BME280_Init^(0+128),w
 13146  1379  00B7               	movwf	BME280_Init@rslt^(0+128)
 13147                           
 13148                           ;bme280_i2c.c: 90:     if (rslt == 0){
 13149  137A  0837               	movf	BME280_Init@rslt^(0+128),w
 13150  137B  1D03               	btfss	3,2
 13151  137C  2BB1               	goto	l4652
 13152                           
 13153                           ;bme280_i2c.c: 91:         uint8_t settings_sel;;bme280_i2c.c: 94:         EnvSensor.set
      +                          tings.osr_h = 0x01;
 13154  137D  0023               	movlb	3	; select bank3
 13155  137E  01E0               	clrf	(_EnvSensor^(0+384)+48)
 13156  137F  0AE0               	incf	(_EnvSensor^(0+384)+48),f
 13157                           
 13158                           ;bme280_i2c.c: 95:         EnvSensor.settings.osr_p = 0x05;
 13159  1380  3005               	movlw	5
 13160  1381  0021               	movlb	1	; select bank1
 13161  1382  00B4               	movwf	??_BME280_Init^(0+128)
 13162  1383  0834               	movf	??_BME280_Init^(0+128),w
 13163  1384  0023               	movlb	3	; select bank3
 13164  1385  00DE               	movwf	(_EnvSensor^(0+384)+46)
 13165                           
 13166                           ;bme280_i2c.c: 96:         EnvSensor.settings.osr_t = 0x02;
 13167  1386  3002               	movlw	2
 13168  1387  0021               	movlb	1	; select bank1
 13169  1388  00B4               	movwf	??_BME280_Init^(0+128)
 13170  1389  0834               	movf	??_BME280_Init^(0+128),w
 13171  138A  0023               	movlb	3	; select bank3
 13172  138B  00DF               	movwf	(_EnvSensor^(0+384)+47)
 13173                           
 13174                           ;bme280_i2c.c: 97:         EnvSensor.settings.filter = (0x04);
 13175  138C  3004               	movlw	4
 13176  138D  0021               	movlb	1	; select bank1
 13177  138E  00B4               	movwf	??_BME280_Init^(0+128)
 13178  138F  0834               	movf	??_BME280_Init^(0+128),w
 13179  1390  0023               	movlb	3	; select bank3
 13180  1391  00E1               	movwf	(_EnvSensor^(0+384)+49)
 13181                           
 13182                           ;bme280_i2c.c: 98:         EnvSensor.settings.standby_time = (0x01);
 13183  1392  01E2               	clrf	(_EnvSensor^(0+384)+50)
 13184  1393  0AE2               	incf	(_EnvSensor^(0+384)+50),f
 13185                           
 13186                           ;bme280_i2c.c: 100:         settings_sel = 1;
 13187  1394  0021               	movlb	1	; select bank1
 13188  1395  01B6               	clrf	BME280_Init@settings_sel^(0+128)
 13189  1396  0AB6               	incf	BME280_Init@settings_sel^(0+128),f
 13190                           
 13191                           ;bme280_i2c.c: 101:         settings_sel |= 1 << 1;
 13192  1397  14B6               	bsf	BME280_Init@settings_sel^(0+128),1
 13193                           
 13194                           ;bme280_i2c.c: 102:         settings_sel |= 1 << 2;
 13195  1398  1536               	bsf	BME280_Init@settings_sel^(0+128),2
 13196                           
 13197                           ;bme280_i2c.c: 103:         settings_sel |= 1 << 4;
 13198  1399  1636               	bsf	BME280_Init@settings_sel^(0+128),4
 13199                           
 13200                           ;bme280_i2c.c: 104:         settings_sel |= 1 << 3;
 13201  139A  15B6               	bsf	BME280_Init@settings_sel^(0+128),3
 13202  139B  30B0               	movlw	(low (_EnvSensor| (0+256)))& (0+255)
 13203  139C  00B4               	movwf	??_BME280_Init^(0+128)
 13204  139D  0834               	movf	??_BME280_Init^(0+128),w
 13205  139E  00AE               	movwf	bme280_set_sensor_settings@dev^(0+128)
 13206  139F  0836               	movf	BME280_Init@settings_sel^(0+128),w
 13207  13A0  3194  2494  3193   	fcall	_bme280_set_sensor_settings
 13208                           
 13209                           ;bme280_i2c.c: 106:         rslt = bme280_set_sensor_mode(0x03, &EnvSensor);
 13210  13A3  30B0               	movlw	(low (_EnvSensor| (0+256)))& (0+255)
 13211  13A4  00B4               	movwf	??_BME280_Init^(0+128)
 13212  13A5  0834               	movf	??_BME280_Init^(0+128),w
 13213  13A6  00AE               	movwf	bme280_set_sensor_mode@dev^(0+128)
 13214  13A7  3003               	movlw	3
 13215  13A8  319C  24F7  3193   	fcall	_bme280_set_sensor_mode
 13216  13AB  00B5               	movwf	(??_BME280_Init+1)^(0+128)
 13217  13AC  0835               	movf	(??_BME280_Init+1)^(0+128),w
 13218  13AD  00B7               	movwf	BME280_Init@rslt^(0+128)
 13219                           
 13220                           ;bme280_i2c.c: 108:         if (rslt == 0)
 13221  13AE  0837               	movf	BME280_Init@rslt^(0+128),w
 13222  13AF  1903               	btfsc	3,2
 13223  13B0  0008               	return
 13224  13B1                     l4652:	
 13225                           
 13226                           ;bme280_i2c.c: 114:     DebugAlert(200, 200, 3);;
 13227  13B1  30C8               	movlw	200
 13228  13B2  0020               	movlb	0	; select bank0
 13229  13B3  00A0               	movwf	DebugAlert@delay_high
 13230  13B4  3000               	movlw	0
 13231  13B5  00A1               	movwf	DebugAlert@delay_high+1
 13232  13B6  30C8               	movlw	200
 13233  13B7  00A2               	movwf	DebugAlert@delay_low
 13234  13B8  3000               	movlw	0
 13235  13B9  00A3               	movwf	DebugAlert@delay_low+1
 13236  13BA  3003               	movlw	3
 13237  13BB  0021               	movlb	1	; select bank1
 13238  13BC  00B4               	movwf	??_BME280_Init^(0+128)
 13239  13BD  0834               	movf	??_BME280_Init^(0+128),w
 13240  13BE  0020               	movlb	0	; select bank0
 13241  13BF  00A4               	movwf	DebugAlert@num_flashes
 13242  13C0  319B  23E1         	fcall	_DebugAlert
 13243  13C2  0008               	return
 13244  13C3                     __end_of_BME280_Init:	
 13245                           
 13246                           	psect	text34
 13247  1494                     __ptext34:	
 13248 ;; *************** function _bme280_set_sensor_settings *****************
 13249 ;; Defined at:
 13250 ;;		line 511 in file "BME280_driver/bme280.c"
 13251 ;; Parameters:    Size  Location     Type
 13252 ;;  desired_sett    1    wreg     unsigned char 
 13253 ;;  dev             1   14[BANK1 ] PTR const struct bme280_
 13254 ;;		 -> EnvSensor(51), 
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;  desired_sett    1   17[BANK1 ] unsigned char 
 13257 ;;  rslt            1   19[BANK1 ] char 
 13258 ;;  sensor_mode     1   18[BANK1 ] unsigned char 
 13259 ;; Return value:  Size  Location     Type
 13260 ;;                  1    wreg      char 
 13261 ;; Registers used:
 13262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13263 ;; Tracked objects:
 13264 ;;		On entry : 1F/1
 13265 ;;		On exit  : 1F/1
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13268 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 13272 ;;Total ram usage:        6 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; Hardware stack levels required when called:   14
 13275 ;; This function calls:
 13276 ;;		_are_settings_changed
 13277 ;;		_bme280_get_sensor_mode
 13278 ;;		_null_ptr_check
 13279 ;;		_put_device_to_sleep
 13280 ;;		_set_filter_standby_settings
 13281 ;;		_set_osr_settings
 13282 ;; This function is called by:
 13283 ;;		_BME280_Init
 13284 ;; This function uses a non-reentrant model
 13285 ;;
 13286                           
 13287                           
 13288                           ;psect for function _bme280_set_sensor_settings
 13289  1494                     _bme280_set_sensor_settings:	
 13290                           
 13291                           ;incstack = 0
 13292                           ; Regs used in _bme280_set_sensor_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13293                           ;bme280_set_sensor_settings@desired_settings stored from wreg
 13294  1494  00B1               	movwf	bme280_set_sensor_settings@desired_settings^(0+128)
 13295                           
 13296                           ;BME280_driver/bme280.c: 511: int8_t bme280_set_sensor_settings(uint8_t desired_settings
      +                          , const struct bme280_dev *dev);BME280_driver/bme280.c: 512: {;BME280_driver/bme280.c: 5
      +                          13:     int8_t rslt;;BME280_driver/bme280.c: 514:     uint8_t sensor_mode;;BME280_driver
      +                          /bme280.c: 517:     rslt = null_ptr_check(dev);
 13297  1495  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13298  1496  319A  22F2  3194   	fcall	_null_ptr_check
 13299  1499  0021               	movlb	1	; select bank1
 13300  149A  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13301  149B  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13302  149C  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13303                           
 13304                           ;BME280_driver/bme280.c: 520:     if (rslt == 0)
 13305  149D  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13306  149E  1D03               	btfss	3,2
 13307  149F  2CFF               	goto	l4458
 13308                           
 13309                           ;BME280_driver/bme280.c: 521:     {;BME280_driver/bme280.c: 522:         rslt = bme280_g
      +                          et_sensor_mode(&sensor_mode, dev);
 13310  14A0  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13311  14A1  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13312  14A2  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13313  14A3  0020               	movlb	0	; select bank0
 13314  14A4  00C4               	movwf	bme280_get_sensor_mode@dev
 13315  14A5  30B2               	movlw	(low (bme280_set_sensor_settings@sensor_mode| 0))& (0+255)
 13316  14A6  319C  240C  3194   	fcall	_bme280_get_sensor_mode
 13317  14A9  0021               	movlb	1	; select bank1
 13318  14AA  00B0               	movwf	(??_bme280_set_sensor_settings+1)^(0+128)
 13319  14AB  0830               	movf	(??_bme280_set_sensor_settings+1)^(0+128),w
 13320  14AC  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13321                           
 13322                           ;BME280_driver/bme280.c: 523:         if ((rslt == 0) && (sensor_mode != 0x00))
 13323  14AD  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13324  14AE  1D03               	btfss	3,2
 13325  14AF  2CBA               	goto	l4446
 13326  14B0  0832               	movf	bme280_set_sensor_settings@sensor_mode^(0+128),w
 13327  14B1  1903               	btfsc	3,2
 13328  14B2  2CBA               	goto	l4446
 13329                           
 13330                           ;BME280_driver/bme280.c: 524:         {;BME280_driver/bme280.c: 525:             rslt = 
      +                          put_device_to_sleep(dev);
 13331  14B3  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13332  14B4  319D  256A  3194   	fcall	_put_device_to_sleep
 13333  14B7  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13334  14B8  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13335  14B9  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13336  14BA                     l4446:	
 13337                           
 13338                           ;BME280_driver/bme280.c: 527:         if (rslt == 0)
 13339  14BA  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13340  14BB  1D03               	btfss	3,2
 13341  14BC  2CFF               	goto	l4458
 13342                           
 13343                           ;BME280_driver/bme280.c: 528:         {;BME280_driver/bme280.c: 532:             if (are
      +                          _settings_changed(0x07, desired_settings))
 13344  14BD  0831               	movf	bme280_set_sensor_settings@desired_settings^(0+128),w
 13345  14BE  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13346  14BF  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13347  14C0  00F0               	movwf	are_settings_changed@desired_settings
 13348  14C1  3007               	movlw	7
 13349  14C2  3199  21E1  3194   	fcall	_are_settings_changed
 13350  14C5  3A00               	xorlw	0
 13351  14C6  1903               	skipnz
 13352  14C7  2CDD               	goto	l4452
 13353                           
 13354                           ;BME280_driver/bme280.c: 533:             {;BME280_driver/bme280.c: 534:                
      +                           rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 13355  14C8  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13356  14C9  3E2E               	addlw	46
 13357  14CA  0020               	movlb	0	; select bank0
 13358  14CB  00E4               	movwf	set_osr_settings@settings
 13359  14CC  3001               	movlw	1
 13360  14CD  00E5               	movwf	set_osr_settings@settings+1
 13361  14CE  0021               	movlb	1	; select bank1
 13362  14CF  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13363  14D0  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13364  14D1  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13365  14D2  0020               	movlb	0	; select bank0
 13366  14D3  00E6               	movwf	set_osr_settings@dev
 13367  14D4  0021               	movlb	1	; select bank1
 13368  14D5  0831               	movf	bme280_set_sensor_settings@desired_settings^(0+128),w
 13369  14D6  319B  233C  3194   	fcall	_set_osr_settings
 13370  14D9  0021               	movlb	1	; select bank1
 13371  14DA  00B0               	movwf	(??_bme280_set_sensor_settings+1)^(0+128)
 13372  14DB  0830               	movf	(??_bme280_set_sensor_settings+1)^(0+128),w
 13373  14DC  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13374  14DD                     l4452:	
 13375                           
 13376                           ;BME280_driver/bme280.c: 540:             if ((rslt == 0) && are_settings_changed(0x18, 
      +                          desired_settings))
 13377  14DD  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13378  14DE  1D03               	btfss	3,2
 13379  14DF  2CFF               	goto	l4458
 13380  14E0  0831               	movf	bme280_set_sensor_settings@desired_settings^(0+128),w
 13381  14E1  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13382  14E2  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13383  14E3  00F0               	movwf	are_settings_changed@desired_settings
 13384  14E4  3018               	movlw	24
 13385  14E5  3199  21E1  3194   	fcall	_are_settings_changed
 13386  14E8  3A00               	xorlw	0
 13387  14E9  1903               	skipnz
 13388  14EA  2CFF               	goto	l4458
 13389                           
 13390                           ;BME280_driver/bme280.c: 541:             {;BME280_driver/bme280.c: 542:                
      +                           rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 13391  14EB  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13392  14EC  3E2E               	addlw	46
 13393  14ED  0020               	movlb	0	; select bank0
 13394  14EE  00DA               	movwf	set_filter_standby_settings@settings
 13395  14EF  3001               	movlw	1
 13396  14F0  00DB               	movwf	set_filter_standby_settings@settings+1
 13397  14F1  0021               	movlb	1	; select bank1
 13398  14F2  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13399  14F3  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13400  14F4  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13401  14F5  0020               	movlb	0	; select bank0
 13402  14F6  00DC               	movwf	set_filter_standby_settings@dev
 13403  14F7  0021               	movlb	1	; select bank1
 13404  14F8  0831               	movf	bme280_set_sensor_settings@desired_settings^(0+128),w
 13405  14F9  319E  26A4         	fcall	_set_filter_standby_settings
 13406  14FB  0021               	movlb	1	; select bank1
 13407  14FC  00B0               	movwf	(??_bme280_set_sensor_settings+1)^(0+128)
 13408  14FD  0830               	movf	(??_bme280_set_sensor_settings+1)^(0+128),w
 13409  14FE  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13410  14FF                     l4458:	
 13411                           
 13412                           ;BME280_driver/bme280.c: 547:     return rslt;
 13413  14FF  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13414  1500  0008               	return
 13415  1501                     __end_of_bme280_set_sensor_settings:	
 13416                           
 13417                           	psect	text35
 13418  19E1                     __ptext35:	
 13419 ;; *************** function _are_settings_changed *****************
 13420 ;; Defined at:
 13421 ;;		line 1404 in file "BME280_driver/bme280.c"
 13422 ;; Parameters:    Size  Location     Type
 13423 ;;  sub_settings    1    wreg     unsigned char 
 13424 ;;  desired_sett    1    0[COMMON] unsigned char 
 13425 ;; Auto vars:     Size  Location     Type
 13426 ;;  sub_settings    1    1[COMMON] unsigned char 
 13427 ;;  settings_cha    1    2[COMMON] unsigned char 
 13428 ;; Return value:  Size  Location     Type
 13429 ;;                  1    wreg      unsigned char 
 13430 ;; Registers used:
 13431 ;;		wreg, status,2, status,0
 13432 ;; Tracked objects:
 13433 ;;		On entry : 1F/1
 13434 ;;		On exit  : 1F/1
 13435 ;;		Unchanged: 1F/0
 13436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13437 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13440 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13441 ;;Total ram usage:        3 bytes
 13442 ;; Hardware stack levels used:    1
 13443 ;; Hardware stack levels required when called:    3
 13444 ;; This function calls:
 13445 ;;		Nothing
 13446 ;; This function is called by:
 13447 ;;		_bme280_set_sensor_settings
 13448 ;; This function uses a non-reentrant model
 13449 ;;
 13450                           
 13451                           
 13452                           ;psect for function _are_settings_changed
 13453  19E1                     _are_settings_changed:	
 13454                           
 13455                           ;incstack = 0
 13456                           ; Regs used in _are_settings_changed: [wreg+status,2+status,0]
 13457                           ;are_settings_changed@sub_settings stored from wreg
 13458  19E1  00F1               	movwf	are_settings_changed@sub_settings
 13459                           
 13460                           ;BME280_driver/bme280.c: 1408:     if (sub_settings & desired_settings)
 13461  19E2  0871               	movf	are_settings_changed@sub_settings,w
 13462  19E3  0570               	andwf	are_settings_changed@desired_settings,w
 13463  19E4  1903               	btfsc	3,2
 13464  19E5  29E9               	goto	l4250
 13465                           
 13466                           ;BME280_driver/bme280.c: 1409:     {;BME280_driver/bme280.c: 1411:         settings_chan
      +                          ged = 1;
 13467  19E6  01F2               	clrf	are_settings_changed@settings_changed
 13468  19E7  0AF2               	incf	are_settings_changed@settings_changed,f
 13469                           
 13470                           ;BME280_driver/bme280.c: 1412:     }
 13471  19E8  29EA               	goto	l4252
 13472  19E9                     l4250:	
 13473                           
 13474                           ;BME280_driver/bme280.c: 1414:     {;BME280_driver/bme280.c: 1416:         settings_chan
      +                          ged = 0;
 13475  19E9  01F2               	clrf	are_settings_changed@settings_changed
 13476  19EA                     l4252:	
 13477                           
 13478                           ;BME280_driver/bme280.c: 1419:     return settings_changed;
 13479  19EA  0872               	movf	are_settings_changed@settings_changed,w
 13480  19EB  0008               	return
 13481  19EC                     __end_of_are_settings_changed:	
 13482                           
 13483                           	psect	text36
 13484  1CF7                     __ptext36:	
 13485 ;; *************** function _bme280_set_sensor_mode *****************
 13486 ;; Defined at:
 13487 ;;		line 578 in file "BME280_driver/bme280.c"
 13488 ;; Parameters:    Size  Location     Type
 13489 ;;  sensor_mode     1    wreg     unsigned char 
 13490 ;;  dev             1   14[BANK1 ] PTR const struct bme280_
 13491 ;;		 -> EnvSensor(51), 
 13492 ;; Auto vars:     Size  Location     Type
 13493 ;;  sensor_mode     1   17[BANK1 ] unsigned char 
 13494 ;;  rslt            1   19[BANK1 ] char 
 13495 ;;  last_set_mod    1   18[BANK1 ] unsigned char 
 13496 ;; Return value:  Size  Location     Type
 13497 ;;                  1    wreg      char 
 13498 ;; Registers used:
 13499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13500 ;; Tracked objects:
 13501 ;;		On entry : 1F/1
 13502 ;;		On exit  : 1F/1
 13503 ;;		Unchanged: 0/0
 13504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13505 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13506 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13508 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;Total ram usage:        6 bytes
 13510 ;; Hardware stack levels used:    1
 13511 ;; Hardware stack levels required when called:   14
 13512 ;; This function calls:
 13513 ;;		_bme280_get_sensor_mode
 13514 ;;		_null_ptr_check
 13515 ;;		_put_device_to_sleep
 13516 ;;		_write_power_mode
 13517 ;; This function is called by:
 13518 ;;		_BME280_Init
 13519 ;; This function uses a non-reentrant model
 13520 ;;
 13521                           
 13522                           
 13523                           ;psect for function _bme280_set_sensor_mode
 13524  1CF7                     _bme280_set_sensor_mode:	
 13525                           
 13526                           ;incstack = 0
 13527                           ; Regs used in _bme280_set_sensor_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13528                           ;bme280_set_sensor_mode@sensor_mode stored from wreg
 13529  1CF7  00B1               	movwf	bme280_set_sensor_mode@sensor_mode^(0+128)
 13530                           
 13531                           ;BME280_driver/bme280.c: 578: int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const s
      +                          truct bme280_dev *dev);BME280_driver/bme280.c: 579: {;BME280_driver/bme280.c: 580:     i
      +                          nt8_t rslt;;BME280_driver/bme280.c: 581:     uint8_t last_set_mode;;BME280_driver/bme280
      +                          .c: 584:     rslt = null_ptr_check(dev);
 13532  1CF8  082E               	movf	bme280_set_sensor_mode@dev^(0+128),w
 13533  1CF9  319A  22F2  319C   	fcall	_null_ptr_check
 13534  1CFC  0021               	movlb	1	; select bank1
 13535  1CFD  00AF               	movwf	??_bme280_set_sensor_mode^(0+128)
 13536  1CFE  082F               	movf	??_bme280_set_sensor_mode^(0+128),w
 13537  1CFF  00B3               	movwf	bme280_set_sensor_mode@rslt^(0+128)
 13538                           
 13539                           ;BME280_driver/bme280.c: 585:     if (rslt == 0)
 13540  1D00  0833               	movf	bme280_set_sensor_mode@rslt^(0+128),w
 13541  1D01  1D03               	btfss	3,2
 13542  1D02  2D2D               	goto	l4478
 13543                           
 13544                           ;BME280_driver/bme280.c: 586:     {;BME280_driver/bme280.c: 587:         rslt = bme280_g
      +                          et_sensor_mode(&last_set_mode, dev);
 13545  1D03  082E               	movf	bme280_set_sensor_mode@dev^(0+128),w
 13546  1D04  00AF               	movwf	??_bme280_set_sensor_mode^(0+128)
 13547  1D05  082F               	movf	??_bme280_set_sensor_mode^(0+128),w
 13548  1D06  0020               	movlb	0	; select bank0
 13549  1D07  00C4               	movwf	bme280_get_sensor_mode@dev
 13550  1D08  30B2               	movlw	(low (bme280_set_sensor_mode@last_set_mode| 0))& (0+255)
 13551  1D09  319C  240C  319C   	fcall	_bme280_get_sensor_mode
 13552  1D0C  0021               	movlb	1	; select bank1
 13553  1D0D  00B0               	movwf	(??_bme280_set_sensor_mode+1)^(0+128)
 13554  1D0E  0830               	movf	(??_bme280_set_sensor_mode+1)^(0+128),w
 13555  1D0F  00B3               	movwf	bme280_set_sensor_mode@rslt^(0+128)
 13556                           
 13557                           ;BME280_driver/bme280.c: 592:         if ((rslt == 0) && (last_set_mode != 0x00))
 13558  1D10  0833               	movf	bme280_set_sensor_mode@rslt^(0+128),w
 13559  1D11  1D03               	btfss	3,2
 13560  1D12  2D1D               	goto	l4474
 13561  1D13  0832               	movf	bme280_set_sensor_mode@last_set_mode^(0+128),w
 13562  1D14  1903               	btfsc	3,2
 13563  1D15  2D1D               	goto	l4474
 13564                           
 13565                           ;BME280_driver/bme280.c: 593:         {;BME280_driver/bme280.c: 594:             rslt = 
      +                          put_device_to_sleep(dev);
 13566  1D16  082E               	movf	bme280_set_sensor_mode@dev^(0+128),w
 13567  1D17  319D  256A  319C   	fcall	_put_device_to_sleep
 13568  1D1A  00AF               	movwf	??_bme280_set_sensor_mode^(0+128)
 13569  1D1B  082F               	movf	??_bme280_set_sensor_mode^(0+128),w
 13570  1D1C  00B3               	movwf	bme280_set_sensor_mode@rslt^(0+128)
 13571  1D1D                     l4474:	
 13572                           
 13573                           ;BME280_driver/bme280.c: 598:         if (rslt == 0)
 13574  1D1D  0833               	movf	bme280_set_sensor_mode@rslt^(0+128),w
 13575  1D1E  1D03               	btfss	3,2
 13576  1D1F  2D2D               	goto	l4478
 13577                           
 13578                           ;BME280_driver/bme280.c: 599:         {;BME280_driver/bme280.c: 600:             rslt = 
      +                          write_power_mode(sensor_mode, dev);
 13579  1D20  082E               	movf	bme280_set_sensor_mode@dev^(0+128),w
 13580  1D21  00AF               	movwf	??_bme280_set_sensor_mode^(0+128)
 13581  1D22  082F               	movf	??_bme280_set_sensor_mode^(0+128),w
 13582  1D23  0020               	movlb	0	; select bank0
 13583  1D24  00DA               	movwf	write_power_mode@dev
 13584  1D25  0021               	movlb	1	; select bank1
 13585  1D26  0831               	movf	bme280_set_sensor_mode@sensor_mode^(0+128),w
 13586  1D27  319C  24C0         	fcall	_write_power_mode
 13587  1D29  0021               	movlb	1	; select bank1
 13588  1D2A  00B0               	movwf	(??_bme280_set_sensor_mode+1)^(0+128)
 13589  1D2B  0830               	movf	(??_bme280_set_sensor_mode+1)^(0+128),w
 13590  1D2C  00B3               	movwf	bme280_set_sensor_mode@rslt^(0+128)
 13591  1D2D                     l4478:	
 13592                           
 13593                           ;BME280_driver/bme280.c: 604:     return rslt;
 13594  1D2D  0833               	movf	bme280_set_sensor_mode@rslt^(0+128),w
 13595  1D2E  0008               	return
 13596  1D2F                     __end_of_bme280_set_sensor_mode:	
 13597                           
 13598                           	psect	text37
 13599  1CC0                     __ptext37:	
 13600 ;; *************** function _write_power_mode *****************
 13601 ;; Defined at:
 13602 ;;		line 941 in file "BME280_driver/bme280.c"
 13603 ;; Parameters:    Size  Location     Type
 13604 ;;  sensor_mode     1    wreg     unsigned char 
 13605 ;;  dev             1   58[BANK0 ] PTR const struct bme280_
 13606 ;;		 -> EnvSensor(51), 
 13607 ;; Auto vars:     Size  Location     Type
 13608 ;;  sensor_mode     1   62[BANK0 ] unsigned char 
 13609 ;;  sensor_mode_    1   65[BANK0 ] unsigned char 
 13610 ;;  reg_addr        1   64[BANK0 ] unsigned char 
 13611 ;;  rslt            1   63[BANK0 ] char 
 13612 ;; Return value:  Size  Location     Type
 13613 ;;                  1    wreg      char 
 13614 ;; Registers used:
 13615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13616 ;; Tracked objects:
 13617 ;;		On entry : 1F/1
 13618 ;;		On exit  : 1F/0
 13619 ;;		Unchanged: 0/0
 13620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13621 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13624 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13625 ;;Total ram usage:        8 bytes
 13626 ;; Hardware stack levels used:    1
 13627 ;; Hardware stack levels required when called:   10
 13628 ;; This function calls:
 13629 ;;		_bme280_get_regs
 13630 ;;		_bme280_set_regs
 13631 ;; This function is called by:
 13632 ;;		_bme280_set_sensor_mode
 13633 ;; This function uses a non-reentrant model
 13634 ;;
 13635                           
 13636                           
 13637                           ;psect for function _write_power_mode
 13638  1CC0                     _write_power_mode:	
 13639                           
 13640                           ;incstack = 0
 13641                           ; Regs used in _write_power_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13642                           ;write_power_mode@sensor_mode stored from wreg
 13643  1CC0  0020               	movlb	0	; select bank0
 13644  1CC1  00DE               	movwf	write_power_mode@sensor_mode
 13645                           
 13646                           ;BME280_driver/bme280.c: 941: static int8_t write_power_mode(uint8_t sensor_mode, const 
      +                          struct bme280_dev *dev);BME280_driver/bme280.c: 942: {;BME280_driver/bme280.c: 943:     
      +                          int8_t rslt;;BME280_driver/bme280.c: 944:     uint8_t reg_addr = 0xF4;
 13647  1CC2  30F4               	movlw	244
 13648  1CC3  00DB               	movwf	??_write_power_mode
 13649  1CC4  085B               	movf	??_write_power_mode,w
 13650  1CC5  00E0               	movwf	write_power_mode@reg_addr
 13651                           
 13652                           ;BME280_driver/bme280.c: 947:     uint8_t sensor_mode_reg_val;;BME280_driver/bme280.c: 9
      +                          50:     rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 13653  1CC6  3061               	movlw	(low (write_power_mode@sensor_mode_reg_val| 0))& (0+255)
 13654  1CC7  00DB               	movwf	??_write_power_mode
 13655  1CC8  085B               	movf	??_write_power_mode,w
 13656  1CC9  00BB               	movwf	bme280_get_regs@reg_data
 13657  1CCA  3001               	movlw	1
 13658  1CCB  00BC               	movwf	bme280_get_regs@len
 13659  1CCC  3000               	movlw	0
 13660  1CCD  00BD               	movwf	bme280_get_regs@len+1
 13661  1CCE  085A               	movf	write_power_mode@dev,w
 13662  1CCF  00DC               	movwf	??_write_power_mode+1
 13663  1CD0  085C               	movf	??_write_power_mode+1,w
 13664  1CD1  00BE               	movwf	bme280_get_regs@dev
 13665  1CD2  0860               	movf	write_power_mode@reg_addr,w
 13666  1CD3  319E  2662  319C   	fcall	_bme280_get_regs
 13667  1CD6  00DD               	movwf	??_write_power_mode+2
 13668  1CD7  085D               	movf	??_write_power_mode+2,w
 13669  1CD8  00DF               	movwf	write_power_mode@rslt
 13670                           
 13671                           ;BME280_driver/bme280.c: 953:     if (rslt == 0)
 13672  1CD9  085F               	movf	write_power_mode@rslt,w
 13673  1CDA  1D03               	btfss	3,2
 13674  1CDB  2CF5               	goto	l4266
 13675                           
 13676                           ;BME280_driver/bme280.c: 954:     {;BME280_driver/bme280.c: 955:         sensor_mode_reg
      +                          _val = ((sensor_mode_reg_val & ~( 0x03)) | (sensor_mode & 0x03));
 13677  1CDC  3003               	movlw	3
 13678  1CDD  055E               	andwf	write_power_mode@sensor_mode,w
 13679  1CDE  00DB               	movwf	??_write_power_mode
 13680  1CDF  0861               	movf	write_power_mode@sensor_mode_reg_val,w
 13681  1CE0  39FC               	andlw	252
 13682  1CE1  045B               	iorwf	??_write_power_mode,w
 13683  1CE2  00DC               	movwf	??_write_power_mode+1
 13684  1CE3  085C               	movf	??_write_power_mode+1,w
 13685  1CE4  00E1               	movwf	write_power_mode@sensor_mode_reg_val
 13686                           
 13687                           ;BME280_driver/bme280.c: 958:         rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg
      +                          _val, 1, dev);
 13688  1CE5  3061               	movlw	(low (write_power_mode@sensor_mode_reg_val| 0))& (0+255)
 13689  1CE6  00DB               	movwf	??_write_power_mode
 13690  1CE7  085B               	movf	??_write_power_mode,w
 13691  1CE8  00BB               	movwf	bme280_set_regs@reg_data
 13692  1CE9  01BC               	clrf	bme280_set_regs@len
 13693  1CEA  0ABC               	incf	bme280_set_regs@len,f
 13694  1CEB  085A               	movf	write_power_mode@dev,w
 13695  1CEC  00DC               	movwf	??_write_power_mode+1
 13696  1CED  085C               	movf	??_write_power_mode+1,w
 13697  1CEE  00BD               	movwf	bme280_set_regs@dev
 13698  1CEF  3060               	movlw	(low (write_power_mode@reg_addr| 0))& (0+255)
 13699  1CF0  3188  200D         	fcall	_bme280_set_regs
 13700  1CF2  00DD               	movwf	??_write_power_mode+2
 13701  1CF3  085D               	movf	??_write_power_mode+2,w
 13702  1CF4  00DF               	movwf	write_power_mode@rslt
 13703  1CF5                     l4266:	
 13704                           
 13705                           ;BME280_driver/bme280.c: 961:     return rslt;
 13706  1CF5  085F               	movf	write_power_mode@rslt,w
 13707  1CF6  0008               	return
 13708  1CF7                     __end_of_write_power_mode:	
 13709                           
 13710                           	psect	text38
 13711  1D6A                     __ptext38:	
 13712 ;; *************** function _put_device_to_sleep *****************
 13713 ;; Defined at:
 13714 ;;		line 967 in file "BME280_driver/bme280.c"
 13715 ;; Parameters:    Size  Location     Type
 13716 ;;  dev             1    wreg     PTR const struct bme280_
 13717 ;;		 -> EnvSensor(51), 
 13718 ;; Auto vars:     Size  Location     Type
 13719 ;;  dev             1    8[BANK1 ] PTR const struct bme280_
 13720 ;;		 -> EnvSensor(51), 
 13721 ;;  settings        5    9[BANK1 ] struct bme280_settings
 13722 ;;  reg_data        4    3[BANK1 ] unsigned char [4]
 13723 ;;  rslt            1    7[BANK1 ] char 
 13724 ;; Return value:  Size  Location     Type
 13725 ;;                  1    wreg      char 
 13726 ;; Registers used:
 13727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13728 ;; Tracked objects:
 13729 ;;		On entry : 1F/1
 13730 ;;		On exit  : 1F/1
 13731 ;;		Unchanged: 0/0
 13732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;Total ram usage:       14 bytes
 13738 ;; Hardware stack levels used:    1
 13739 ;; Hardware stack levels required when called:   13
 13740 ;; This function calls:
 13741 ;;		_bme280_get_regs
 13742 ;;		_bme280_soft_reset
 13743 ;;		_parse_device_settings
 13744 ;;		_reload_device_settings
 13745 ;; This function is called by:
 13746 ;;		_bme280_set_sensor_settings
 13747 ;;		_bme280_set_sensor_mode
 13748 ;; This function uses a non-reentrant model
 13749 ;;
 13750                           
 13751                           
 13752                           ;psect for function _put_device_to_sleep
 13753  1D6A                     _put_device_to_sleep:	
 13754                           
 13755                           ;incstack = 0
 13756                           ; Regs used in _put_device_to_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13757                           ;put_device_to_sleep@dev stored from wreg
 13758  1D6A  00A8               	movwf	put_device_to_sleep@dev^(0+128)
 13759                           
 13760                           ;BME280_driver/bme280.c: 967: static int8_t put_device_to_sleep(const struct bme280_dev 
      +                          *dev);BME280_driver/bme280.c: 968: {;BME280_driver/bme280.c: 969:     int8_t rslt;;BME28
      +                          0_driver/bme280.c: 970:     uint8_t reg_data[4];;BME280_driver/bme280.c: 971:     struct
      +                           bme280_settings settings;;BME280_driver/bme280.c: 973:     rslt = bme280_get_regs(0xF2,
      +                           reg_data, 4, dev);
 13761  1D6B  30A3               	movlw	(low (put_device_to_sleep@reg_data| 0))& (0+255)
 13762  1D6C  00A0               	movwf	??_put_device_to_sleep^(0+128)
 13763  1D6D  0820               	movf	??_put_device_to_sleep^(0+128),w
 13764  1D6E  0020               	movlb	0	; select bank0
 13765  1D6F  00BB               	movwf	bme280_get_regs@reg_data
 13766  1D70  3004               	movlw	4
 13767  1D71  00BC               	movwf	bme280_get_regs@len
 13768  1D72  3000               	movlw	0
 13769  1D73  00BD               	movwf	bme280_get_regs@len+1
 13770  1D74  0021               	movlb	1	; select bank1
 13771  1D75  0828               	movf	put_device_to_sleep@dev^(0+128),w
 13772  1D76  00A1               	movwf	(??_put_device_to_sleep+1)^(0+128)
 13773  1D77  0821               	movf	(??_put_device_to_sleep+1)^(0+128),w
 13774  1D78  0020               	movlb	0	; select bank0
 13775  1D79  00BE               	movwf	bme280_get_regs@dev
 13776  1D7A  30F2               	movlw	242
 13777  1D7B  319E  2662  319D   	fcall	_bme280_get_regs
 13778  1D7E  0021               	movlb	1	; select bank1
 13779  1D7F  00A2               	movwf	(??_put_device_to_sleep+2)^(0+128)
 13780  1D80  0822               	movf	(??_put_device_to_sleep+2)^(0+128),w
 13781  1D81  00A7               	movwf	put_device_to_sleep@rslt^(0+128)
 13782                           
 13783                           ;BME280_driver/bme280.c: 974:     if (rslt == 0)
 13784  1D82  0827               	movf	put_device_to_sleep@rslt^(0+128),w
 13785  1D83  1D03               	btfss	3,2
 13786  1D84  2DA4               	goto	l4240
 13787                           
 13788                           ;BME280_driver/bme280.c: 975:     {;BME280_driver/bme280.c: 976:         parse_device_se
      +                          ttings(reg_data, &settings);
 13789  1D85  30A9               	movlw	(low (put_device_to_sleep@settings| 0))& (0+255)
 13790  1D86  00A0               	movwf	??_put_device_to_sleep^(0+128)
 13791  1D87  0820               	movf	??_put_device_to_sleep^(0+128),w
 13792  1D88  00F0               	movwf	parse_device_settings@settings
 13793  1D89  30A3               	movlw	(low (put_device_to_sleep@reg_data| 0))& (0+255)
 13794  1D8A  3191  21DB  319D   	fcall	_parse_device_settings
 13795                           
 13796                           ;BME280_driver/bme280.c: 977:         rslt = bme280_soft_reset(dev);
 13797  1D8D  0828               	movf	put_device_to_sleep@dev^(0+128),w
 13798  1D8E  319D  252F  319D   	fcall	_bme280_soft_reset
 13799  1D91  0021               	movlb	1	; select bank1
 13800  1D92  00A0               	movwf	??_put_device_to_sleep^(0+128)
 13801  1D93  0820               	movf	??_put_device_to_sleep^(0+128),w
 13802  1D94  00A7               	movwf	put_device_to_sleep@rslt^(0+128)
 13803                           
 13804                           ;BME280_driver/bme280.c: 978:         if (rslt == 0)
 13805  1D95  0827               	movf	put_device_to_sleep@rslt^(0+128),w
 13806  1D96  1D03               	btfss	3,2
 13807  1D97  2DA4               	goto	l4240
 13808                           
 13809                           ;BME280_driver/bme280.c: 979:         {;BME280_driver/bme280.c: 980:             rslt = 
      +                          reload_device_settings(&settings, dev);
 13810  1D98  0828               	movf	put_device_to_sleep@dev^(0+128),w
 13811  1D99  00A0               	movwf	??_put_device_to_sleep^(0+128)
 13812  1D9A  0820               	movf	??_put_device_to_sleep^(0+128),w
 13813  1D9B  0020               	movlb	0	; select bank0
 13814  1D9C  00EB               	movwf	reload_device_settings@dev
 13815  1D9D  30A9               	movlw	(low (put_device_to_sleep@settings| 0))& (0+255)
 13816  1D9E  319A  22CF         	fcall	_reload_device_settings
 13817  1DA0  0021               	movlb	1	; select bank1
 13818  1DA1  00A1               	movwf	(??_put_device_to_sleep+1)^(0+128)
 13819  1DA2  0821               	movf	(??_put_device_to_sleep+1)^(0+128),w
 13820  1DA3  00A7               	movwf	put_device_to_sleep@rslt^(0+128)
 13821  1DA4                     l4240:	
 13822                           
 13823                           ;BME280_driver/bme280.c: 984:     return rslt;
 13824  1DA4  0827               	movf	put_device_to_sleep@rslt^(0+128),w
 13825  1DA5  0008               	return
 13826  1DA6                     __end_of_put_device_to_sleep:	
 13827                           
 13828                           	psect	text39
 13829  1ACF                     __ptext39:	
 13830 ;; *************** function _reload_device_settings *****************
 13831 ;; Defined at:
 13832 ;;		line 991 in file "BME280_driver/bme280.c"
 13833 ;; Parameters:    Size  Location     Type
 13834 ;;  settings        1    wreg     PTR const struct bme280_
 13835 ;;		 -> put_device_to_sleep@settings(5), 
 13836 ;;  dev             1   75[BANK0 ] PTR const struct bme280_
 13837 ;;		 -> EnvSensor(51), 
 13838 ;; Auto vars:     Size  Location     Type
 13839 ;;  settings        1   78[BANK0 ] PTR const struct bme280_
 13840 ;;		 -> put_device_to_sleep@settings(5), 
 13841 ;;  rslt            1   79[BANK0 ] char 
 13842 ;; Return value:  Size  Location     Type
 13843 ;;                  1    wreg      char 
 13844 ;; Registers used:
 13845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13846 ;; Tracked objects:
 13847 ;;		On entry : 1F/0
 13848 ;;		On exit  : 1F/0
 13849 ;;		Unchanged: 0/0
 13850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13851 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13855 ;;Total ram usage:        5 bytes
 13856 ;; Hardware stack levels used:    1
 13857 ;; Hardware stack levels required when called:   12
 13858 ;; This function calls:
 13859 ;;		_set_filter_standby_settings
 13860 ;;		_set_osr_settings
 13861 ;; This function is called by:
 13862 ;;		_put_device_to_sleep
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           
 13867                           ;psect for function _reload_device_settings
 13868  1ACF                     _reload_device_settings:	
 13869                           
 13870                           ;incstack = 0
 13871                           ; Regs used in _reload_device_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13872                           ;reload_device_settings@settings stored from wreg
 13873  1ACF  00EE               	movwf	reload_device_settings@settings
 13874                           
 13875                           ;BME280_driver/bme280.c: 991: static int8_t reload_device_settings(const struct bme280_s
      +                          ettings *settings, const struct bme280_dev *dev);BME280_driver/bme280.c: 992: {;BME280_d
      +                          river/bme280.c: 993:     int8_t rslt;;BME280_driver/bme280.c: 995:     rslt = set_osr_se
      +                          ttings(0x1F, settings, dev);
 13876  1AD0  086E               	movf	reload_device_settings@settings,w
 13877  1AD1  00E4               	movwf	set_osr_settings@settings
 13878  1AD2  3000               	movlw	0
 13879  1AD3  00E5               	movwf	set_osr_settings@settings+1
 13880  1AD4  086B               	movf	reload_device_settings@dev,w
 13881  1AD5  00EC               	movwf	??_reload_device_settings
 13882  1AD6  086C               	movf	??_reload_device_settings,w
 13883  1AD7  00E6               	movwf	set_osr_settings@dev
 13884  1AD8  301F               	movlw	31
 13885  1AD9  319B  233C  319A   	fcall	_set_osr_settings
 13886  1ADC  00ED               	movwf	??_reload_device_settings+1
 13887  1ADD  086D               	movf	??_reload_device_settings+1,w
 13888  1ADE  00EF               	movwf	reload_device_settings@rslt
 13889                           
 13890                           ;BME280_driver/bme280.c: 996:     if (rslt == 0)
 13891  1ADF  086F               	movf	reload_device_settings@rslt,w
 13892  1AE0  1D03               	btfss	3,2
 13893  1AE1  2AF0               	goto	l4144
 13894                           
 13895                           ;BME280_driver/bme280.c: 997:     {;BME280_driver/bme280.c: 998:         rslt = set_filt
      +                          er_standby_settings(0x1F, settings, dev);
 13896  1AE2  086E               	movf	reload_device_settings@settings,w
 13897  1AE3  00DA               	movwf	set_filter_standby_settings@settings
 13898  1AE4  3000               	movlw	0
 13899  1AE5  00DB               	movwf	set_filter_standby_settings@settings+1
 13900  1AE6  086B               	movf	reload_device_settings@dev,w
 13901  1AE7  00EC               	movwf	??_reload_device_settings
 13902  1AE8  086C               	movf	??_reload_device_settings,w
 13903  1AE9  00DC               	movwf	set_filter_standby_settings@dev
 13904  1AEA  301F               	movlw	31
 13905  1AEB  319E  26A4         	fcall	_set_filter_standby_settings
 13906  1AED  00ED               	movwf	??_reload_device_settings+1
 13907  1AEE  086D               	movf	??_reload_device_settings+1,w
 13908  1AEF  00EF               	movwf	reload_device_settings@rslt
 13909  1AF0                     l4144:	
 13910                           
 13911                           ;BME280_driver/bme280.c: 1001:     return rslt;
 13912  1AF0  086F               	movf	reload_device_settings@rslt,w
 13913  1AF1  0008               	return
 13914  1AF2                     __end_of_reload_device_settings:	
 13915                           
 13916                           	psect	text40
 13917  1B3C                     __ptext40:	
 13918 ;; *************** function _set_osr_settings *****************
 13919 ;; Defined at:
 13920 ;;		line 777 in file "BME280_driver/bme280.c"
 13921 ;; Parameters:    Size  Location     Type
 13922 ;;  desired_sett    1    wreg     unsigned char 
 13923 ;;  settings        2   68[BANK0 ] PTR const struct bme280_
 13924 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 13925 ;;  dev             1   70[BANK0 ] PTR const struct bme280_
 13926 ;;		 -> EnvSensor(51), 
 13927 ;; Auto vars:     Size  Location     Type
 13928 ;;  desired_sett    1   74[BANK0 ] unsigned char 
 13929 ;;  rslt            1   73[BANK0 ] char 
 13930 ;; Return value:  Size  Location     Type
 13931 ;;                  1    wreg      char 
 13932 ;; Registers used:
 13933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13934 ;; Tracked objects:
 13935 ;;		On entry : 1E/1
 13936 ;;		On exit  : 1F/0
 13937 ;;		Unchanged: 0/0
 13938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13939 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;Total ram usage:        7 bytes
 13944 ;; Hardware stack levels used:    1
 13945 ;; Hardware stack levels required when called:   11
 13946 ;; This function calls:
 13947 ;;		_set_osr_humidity_settings
 13948 ;;		_set_osr_press_temp_settings
 13949 ;; This function is called by:
 13950 ;;		_bme280_set_sensor_settings
 13951 ;;		_reload_device_settings
 13952 ;; This function uses a non-reentrant model
 13953 ;;
 13954                           
 13955                           
 13956                           ;psect for function _set_osr_settings
 13957  1B3C                     _set_osr_settings:	
 13958                           
 13959                           ;incstack = 0
 13960                           ; Regs used in _set_osr_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13961                           ;set_osr_settings@desired_settings stored from wreg
 13962  1B3C  0020               	movlb	0	; select bank0
 13963  1B3D  00EA               	movwf	set_osr_settings@desired_settings
 13964                           
 13965                           ;BME280_driver/bme280.c: 777: static int8_t set_osr_settings(uint8_t desired_settings,;B
      +                          ME280_driver/bme280.c: 778:                                const struct bme280_settings 
      +                          *settings,;BME280_driver/bme280.c: 779:                                const struct bme2
      +                          80_dev *dev);BME280_driver/bme280.c: 780: {;BME280_driver/bme280.c: 781:     int8_t rslt
      +                           = 1;
 13966  1B3E  01E9               	clrf	set_osr_settings@rslt
 13967  1B3F  0AE9               	incf	set_osr_settings@rslt,f
 13968                           
 13969                           ;BME280_driver/bme280.c: 783:     if (desired_settings & 1 << 2)
 13970  1B40  1D6A               	btfss	set_osr_settings@desired_settings,2
 13971  1B41  2B50               	goto	l4098
 13972                           
 13973                           ;BME280_driver/bme280.c: 784:     {;BME280_driver/bme280.c: 785:         rslt = set_osr_
      +                          humidity_settings(settings, dev);
 13974  1B42  0865               	movf	set_osr_settings@settings+1,w
 13975  1B43  00DB               	movwf	set_osr_humidity_settings@settings+1
 13976  1B44  0864               	movf	set_osr_settings@settings,w
 13977  1B45  00DA               	movwf	set_osr_humidity_settings@settings
 13978  1B46  0866               	movf	set_osr_settings@dev,w
 13979  1B47  00E7               	movwf	??_set_osr_settings
 13980  1B48  0867               	movf	??_set_osr_settings,w
 13981  1B49  00DC               	movwf	set_osr_humidity_settings@dev
 13982  1B4A  3190  2046  319B   	fcall	_set_osr_humidity_settings
 13983  1B4D  00E8               	movwf	??_set_osr_settings+1
 13984  1B4E  0868               	movf	??_set_osr_settings+1,w
 13985  1B4F  00E9               	movwf	set_osr_settings@rslt
 13986  1B50                     l4098:	
 13987                           
 13988                           ;BME280_driver/bme280.c: 787:     if (desired_settings & (1 | 1 << 1))
 13989  1B50  086A               	movf	set_osr_settings@desired_settings,w
 13990  1B51  3903               	andlw	3
 13991  1B52  1903               	btfsc	3,2
 13992  1B53  2B62               	goto	l4102
 13993                           
 13994                           ;BME280_driver/bme280.c: 788:     {;BME280_driver/bme280.c: 789:         rslt = set_osr_
      +                          press_temp_settings(desired_settings, settings, dev);
 13995  1B54  0865               	movf	set_osr_settings@settings+1,w
 13996  1B55  00DB               	movwf	set_osr_press_temp_settings@settings+1
 13997  1B56  0864               	movf	set_osr_settings@settings,w
 13998  1B57  00DA               	movwf	set_osr_press_temp_settings@settings
 13999  1B58  0866               	movf	set_osr_settings@dev,w
 14000  1B59  00E7               	movwf	??_set_osr_settings
 14001  1B5A  0867               	movf	??_set_osr_settings,w
 14002  1B5B  00DC               	movwf	set_osr_press_temp_settings@dev
 14003  1B5C  086A               	movf	set_osr_settings@desired_settings,w
 14004  1B5D  319E  2621         	fcall	_set_osr_press_temp_settings
 14005  1B5F  00E8               	movwf	??_set_osr_settings+1
 14006  1B60  0868               	movf	??_set_osr_settings+1,w
 14007  1B61  00E9               	movwf	set_osr_settings@rslt
 14008  1B62                     l4102:	
 14009                           
 14010                           ;BME280_driver/bme280.c: 792:     return rslt;
 14011  1B62  0869               	movf	set_osr_settings@rslt,w
 14012  1B63  0008               	return
 14013  1B64                     __end_of_set_osr_settings:	
 14014                           
 14015                           	psect	text41
 14016  1E21                     __ptext41:	
 14017 ;; *************** function _set_osr_press_temp_settings *****************
 14018 ;; Defined at:
 14019 ;;		line 830 in file "BME280_driver/bme280.c"
 14020 ;; Parameters:    Size  Location     Type
 14021 ;;  desired_sett    1    wreg     unsigned char 
 14022 ;;  settings        2   58[BANK0 ] PTR const struct bme280_
 14023 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14024 ;;  dev             1   60[BANK0 ] PTR const struct bme280_
 14025 ;;		 -> EnvSensor(51), 
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;  desired_sett    1   64[BANK0 ] unsigned char 
 14028 ;;  reg_data        1   67[BANK0 ] unsigned char 
 14029 ;;  reg_addr        1   66[BANK0 ] unsigned char 
 14030 ;;  rslt            1   65[BANK0 ] char 
 14031 ;; Return value:  Size  Location     Type
 14032 ;;                  1    wreg      char 
 14033 ;; Registers used:
 14034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14035 ;; Tracked objects:
 14036 ;;		On entry : 1F/0
 14037 ;;		On exit  : 1F/0
 14038 ;;		Unchanged: 0/0
 14039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14040 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14043 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14044 ;;Total ram usage:       10 bytes
 14045 ;; Hardware stack levels used:    1
 14046 ;; Hardware stack levels required when called:   10
 14047 ;; This function calls:
 14048 ;;		_bme280_get_regs
 14049 ;;		_bme280_set_regs
 14050 ;;		_fill_osr_press_settings
 14051 ;;		_fill_osr_temp_settings
 14052 ;; This function is called by:
 14053 ;;		_set_osr_settings
 14054 ;; This function uses a non-reentrant model
 14055 ;;
 14056                           
 14057                           
 14058                           ;psect for function _set_osr_press_temp_settings
 14059  1E21                     _set_osr_press_temp_settings:	
 14060                           
 14061                           ;incstack = 0
 14062                           ; Regs used in _set_osr_press_temp_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14063                           ;set_osr_press_temp_settings@desired_settings stored from wreg
 14064  1E21  00E0               	movwf	set_osr_press_temp_settings@desired_settings
 14065                           
 14066                           ;BME280_driver/bme280.c: 830: static int8_t set_osr_press_temp_settings(uint8_t desired_
      +                          settings,;BME280_driver/bme280.c: 831:                                           const s
      +                          truct bme280_settings *settings,;BME280_driver/bme280.c: 832:                           
      +                                          const struct bme280_dev *dev);BME280_driver/bme280.c: 833: {;BME280_driv
      +                          er/bme280.c: 834:     int8_t rslt;;BME280_driver/bme280.c: 835:     uint8_t reg_addr = 0
      +                          xF4;
 14067  1E22  30F4               	movlw	244
 14068  1E23  00DD               	movwf	??_set_osr_press_temp_settings
 14069  1E24  085D               	movf	??_set_osr_press_temp_settings,w
 14070  1E25  00E2               	movwf	set_osr_press_temp_settings@reg_addr
 14071                           
 14072                           ;BME280_driver/bme280.c: 836:     uint8_t reg_data;;BME280_driver/bme280.c: 838:     rsl
      +                          t = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 14073  1E26  3063               	movlw	(low (set_osr_press_temp_settings@reg_data| 0))& (0+255)
 14074  1E27  00DD               	movwf	??_set_osr_press_temp_settings
 14075  1E28  085D               	movf	??_set_osr_press_temp_settings,w
 14076  1E29  00BB               	movwf	bme280_get_regs@reg_data
 14077  1E2A  3001               	movlw	1
 14078  1E2B  00BC               	movwf	bme280_get_regs@len
 14079  1E2C  3000               	movlw	0
 14080  1E2D  00BD               	movwf	bme280_get_regs@len+1
 14081  1E2E  085C               	movf	set_osr_press_temp_settings@dev,w
 14082  1E2F  00DE               	movwf	??_set_osr_press_temp_settings+1
 14083  1E30  085E               	movf	??_set_osr_press_temp_settings+1,w
 14084  1E31  00BE               	movwf	bme280_get_regs@dev
 14085  1E32  0862               	movf	set_osr_press_temp_settings@reg_addr,w
 14086  1E33  319E  2662  319E   	fcall	_bme280_get_regs
 14087  1E36  00DF               	movwf	??_set_osr_press_temp_settings+2
 14088  1E37  085F               	movf	??_set_osr_press_temp_settings+2,w
 14089  1E38  00E1               	movwf	set_osr_press_temp_settings@rslt
 14090                           
 14091                           ;BME280_driver/bme280.c: 839:     if (rslt == 0)
 14092  1E39  0861               	movf	set_osr_press_temp_settings@rslt,w
 14093  1E3A  1D03               	btfss	3,2
 14094  1E3B  2E60               	goto	l4084
 14095                           
 14096                           ;BME280_driver/bme280.c: 840:     {;BME280_driver/bme280.c: 841:         if (desired_set
      +                          tings & 1)
 14097  1E3C  1C60               	btfss	set_osr_press_temp_settings@desired_settings,0
 14098  1E3D  2E46               	goto	l4080
 14099                           
 14100                           ;BME280_driver/bme280.c: 842:         {;BME280_driver/bme280.c: 843:             fill_os
      +                          r_press_settings(&reg_data, settings);
 14101  1E3E  085B               	movf	set_osr_press_temp_settings@settings+1,w
 14102  1E3F  00F1               	movwf	fill_osr_press_settings@settings+1
 14103  1E40  085A               	movf	set_osr_press_temp_settings@settings,w
 14104  1E41  00F0               	movwf	fill_osr_press_settings@settings
 14105  1E42  3063               	movlw	(low (set_osr_press_temp_settings@reg_data| 0))& (0+255)
 14106  1E43  319A  2260  319E   	fcall	_fill_osr_press_settings
 14107  1E46                     l4080:	
 14108                           
 14109                           ;BME280_driver/bme280.c: 845:         if (desired_settings & 1 << 1)
 14110  1E46  1CE0               	btfss	set_osr_press_temp_settings@desired_settings,1
 14111  1E47  2E50               	goto	l146
 14112                           
 14113                           ;BME280_driver/bme280.c: 846:         {;BME280_driver/bme280.c: 847:             fill_os
      +                          r_temp_settings(&reg_data, settings);
 14114  1E48  085B               	movf	set_osr_press_temp_settings@settings+1,w
 14115  1E49  00F1               	movwf	fill_osr_temp_settings@settings+1
 14116  1E4A  085A               	movf	set_osr_press_temp_settings@settings,w
 14117  1E4B  00F0               	movwf	fill_osr_temp_settings@settings
 14118  1E4C  3063               	movlw	(low (set_osr_press_temp_settings@reg_data| 0))& (0+255)
 14119  1E4D  319A  22B3  319E   	fcall	_fill_osr_temp_settings
 14120  1E50                     l146:	
 14121                           ;BME280_driver/bme280.c: 848:         }
 14122                           
 14123                           
 14124                           ;BME280_driver/bme280.c: 851:         rslt = bme280_set_regs(&reg_addr, &reg_data, 1, de
      +                          v);
 14125  1E50  3063               	movlw	(low (set_osr_press_temp_settings@reg_data| 0))& (0+255)
 14126  1E51  00DD               	movwf	??_set_osr_press_temp_settings
 14127  1E52  085D               	movf	??_set_osr_press_temp_settings,w
 14128  1E53  00BB               	movwf	bme280_set_regs@reg_data
 14129  1E54  01BC               	clrf	bme280_set_regs@len
 14130  1E55  0ABC               	incf	bme280_set_regs@len,f
 14131  1E56  085C               	movf	set_osr_press_temp_settings@dev,w
 14132  1E57  00DE               	movwf	??_set_osr_press_temp_settings+1
 14133  1E58  085E               	movf	??_set_osr_press_temp_settings+1,w
 14134  1E59  00BD               	movwf	bme280_set_regs@dev
 14135  1E5A  3062               	movlw	(low (set_osr_press_temp_settings@reg_addr| 0))& (0+255)
 14136  1E5B  3188  200D         	fcall	_bme280_set_regs
 14137  1E5D  00DF               	movwf	??_set_osr_press_temp_settings+2
 14138  1E5E  085F               	movf	??_set_osr_press_temp_settings+2,w
 14139  1E5F  00E1               	movwf	set_osr_press_temp_settings@rslt
 14140  1E60                     l4084:	
 14141                           
 14142                           ;BME280_driver/bme280.c: 854:     return rslt;
 14143  1E60  0861               	movf	set_osr_press_temp_settings@rslt,w
 14144  1E61  0008               	return
 14145  1E62                     __end_of_set_osr_press_temp_settings:	
 14146                           
 14147                           	psect	text42
 14148  1AB3                     __ptext42:	
 14149 ;; *************** function _fill_osr_temp_settings *****************
 14150 ;; Defined at:
 14151 ;;		line 919 in file "BME280_driver/bme280.c"
 14152 ;; Parameters:    Size  Location     Type
 14153 ;;  reg_data        1    wreg     PTR unsigned char 
 14154 ;;		 -> set_osr_press_temp_settings@reg_data(1), 
 14155 ;;  settings        2    0[COMMON] PTR const struct bme280_
 14156 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14157 ;; Auto vars:     Size  Location     Type
 14158 ;;  reg_data        1    5[COMMON] PTR unsigned char 
 14159 ;;		 -> set_osr_press_temp_settings@reg_data(1), 
 14160 ;; Return value:  Size  Location     Type
 14161 ;;                  1    wreg      void 
 14162 ;; Registers used:
 14163 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14164 ;; Tracked objects:
 14165 ;;		On entry : 1F/0
 14166 ;;		On exit  : 1F/0
 14167 ;;		Unchanged: 1F/0
 14168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14169 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14171 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14172 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;Total ram usage:        6 bytes
 14174 ;; Hardware stack levels used:    1
 14175 ;; Hardware stack levels required when called:    3
 14176 ;; This function calls:
 14177 ;;		Nothing
 14178 ;; This function is called by:
 14179 ;;		_set_osr_press_temp_settings
 14180 ;; This function uses a non-reentrant model
 14181 ;;
 14182                           
 14183                           
 14184                           ;psect for function _fill_osr_temp_settings
 14185  1AB3                     _fill_osr_temp_settings:	
 14186                           
 14187                           ;incstack = 0
 14188                           ; Regs used in _fill_osr_temp_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14189                           ;fill_osr_temp_settings@reg_data stored from wreg
 14190  1AB3  00F5               	movwf	fill_osr_temp_settings@reg_data
 14191                           
 14192                           ;BME280_driver/bme280.c: 919: static void fill_osr_temp_settings(uint8_t *reg_data, cons
      +                          t struct bme280_settings *settings);BME280_driver/bme280.c: 920: {;BME280_driver/bme280.
      +                          c: 921:     *reg_data = ((*reg_data & ~( 0xE0)) | ((settings->osr_t << 0x05) & 0xE0));
 14193  1AB4  0870               	movf	fill_osr_temp_settings@settings,w
 14194  1AB5  0086               	movwf	6
 14195  1AB6  0871               	movf	fill_osr_temp_settings@settings+1,w
 14196  1AB7  0087               	movwf	7
 14197  1AB8  3141               	addfsr 1,1
 14198  1AB9  0801               	movf	1,w
 14199  1ABA  00F2               	movwf	??_fill_osr_temp_settings
 14200  1ABB  3005               	movlw	5
 14201  1ABC                     u4355:	
 14202  1ABC  35F2               	lslf	??_fill_osr_temp_settings,f
 14203  1ABD  0B89               	decfsz	9,f
 14204  1ABE  2ABC               	goto	u4355
 14205  1ABF  30E0               	movlw	224
 14206  1AC0  0572               	andwf	??_fill_osr_temp_settings,w
 14207  1AC1  00F3               	movwf	??_fill_osr_temp_settings+1
 14208  1AC2  0875               	movf	fill_osr_temp_settings@reg_data,w
 14209  1AC3  0086               	movwf	6
 14210  1AC4  0187               	clrf	7
 14211  1AC5  0801               	movf	1,w
 14212  1AC6  391F               	andlw	31
 14213  1AC7  0473               	iorwf	??_fill_osr_temp_settings+1,w
 14214  1AC8  00F4               	movwf	??_fill_osr_temp_settings+2
 14215  1AC9  0875               	movf	fill_osr_temp_settings@reg_data,w
 14216  1ACA  0086               	movwf	6
 14217  1ACB  0187               	clrf	7
 14218  1ACC  0874               	movf	??_fill_osr_temp_settings+2,w
 14219  1ACD  0081               	movwf	1
 14220  1ACE  0008               	return
 14221  1ACF                     __end_of_fill_osr_temp_settings:	
 14222                           
 14223                           	psect	text43
 14224  1A60                     __ptext43:	
 14225 ;; *************** function _fill_osr_press_settings *****************
 14226 ;; Defined at:
 14227 ;;		line 910 in file "BME280_driver/bme280.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;  reg_data        1    wreg     PTR unsigned char 
 14230 ;;		 -> set_osr_press_temp_settings@reg_data(1), 
 14231 ;;  settings        2    0[COMMON] PTR const struct bme280_
 14232 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14233 ;; Auto vars:     Size  Location     Type
 14234 ;;  reg_data        1    5[COMMON] PTR unsigned char 
 14235 ;;		 -> set_osr_press_temp_settings@reg_data(1), 
 14236 ;; Return value:  Size  Location     Type
 14237 ;;                  1    wreg      void 
 14238 ;; Registers used:
 14239 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14240 ;; Tracked objects:
 14241 ;;		On entry : 1F/0
 14242 ;;		On exit  : 1F/0
 14243 ;;		Unchanged: 1F/0
 14244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14245 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14249 ;;Total ram usage:        6 bytes
 14250 ;; Hardware stack levels used:    1
 14251 ;; Hardware stack levels required when called:    3
 14252 ;; This function calls:
 14253 ;;		Nothing
 14254 ;; This function is called by:
 14255 ;;		_set_osr_press_temp_settings
 14256 ;; This function uses a non-reentrant model
 14257 ;;
 14258                           
 14259                           
 14260                           ;psect for function _fill_osr_press_settings
 14261  1A60                     _fill_osr_press_settings:	
 14262                           
 14263                           ;incstack = 0
 14264                           ; Regs used in _fill_osr_press_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14265                           ;fill_osr_press_settings@reg_data stored from wreg
 14266  1A60  00F5               	movwf	fill_osr_press_settings@reg_data
 14267                           
 14268                           ;BME280_driver/bme280.c: 910: static void fill_osr_press_settings(uint8_t *reg_data, con
      +                          st struct bme280_settings *settings);BME280_driver/bme280.c: 911: {;BME280_driver/bme280
      +                          .c: 912:     *reg_data = ((*reg_data & ~( 0x1C)) | ((settings->osr_p << 0x02) & 0x1C));
 14269  1A61  0870               	movf	fill_osr_press_settings@settings,w
 14270  1A62  0086               	movwf	6
 14271  1A63  0871               	movf	fill_osr_press_settings@settings+1,w
 14272  1A64  0087               	movwf	7
 14273  1A65  0801               	movf	1,w
 14274  1A66  00F2               	movwf	??_fill_osr_press_settings
 14275  1A67  3002               	movlw	2
 14276  1A68                     u4345:	
 14277  1A68  35F2               	lslf	??_fill_osr_press_settings,f
 14278  1A69  0B89               	decfsz	9,f
 14279  1A6A  2A68               	goto	u4345
 14280  1A6B  301C               	movlw	28
 14281  1A6C  0572               	andwf	??_fill_osr_press_settings,w
 14282  1A6D  00F3               	movwf	??_fill_osr_press_settings+1
 14283  1A6E  0875               	movf	fill_osr_press_settings@reg_data,w
 14284  1A6F  0086               	movwf	6
 14285  1A70  0187               	clrf	7
 14286  1A71  0801               	movf	1,w
 14287  1A72  39E3               	andlw	227
 14288  1A73  0473               	iorwf	??_fill_osr_press_settings+1,w
 14289  1A74  00F4               	movwf	??_fill_osr_press_settings+2
 14290  1A75  0875               	movf	fill_osr_press_settings@reg_data,w
 14291  1A76  0086               	movwf	6
 14292  1A77  0187               	clrf	7
 14293  1A78  0874               	movf	??_fill_osr_press_settings+2,w
 14294  1A79  0081               	movwf	1
 14295  1A7A  0008               	return
 14296  1A7B                     __end_of_fill_osr_press_settings:	
 14297                           
 14298                           	psect	text44
 14299  1046                     __ptext44:	
 14300 ;; *************** function _set_osr_humidity_settings *****************
 14301 ;; Defined at:
 14302 ;;		line 798 in file "BME280_driver/bme280.c"
 14303 ;; Parameters:    Size  Location     Type
 14304 ;;  settings        2   58[BANK0 ] PTR const struct bme280_
 14305 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14306 ;;  dev             1   60[BANK0 ] PTR const struct bme280_
 14307 ;;		 -> EnvSensor(51), 
 14308 ;; Auto vars:     Size  Location     Type
 14309 ;;  reg_addr        1   67[BANK0 ] unsigned char 
 14310 ;;  rslt            1   66[BANK0 ] char 
 14311 ;;  ctrl_meas       1   65[BANK0 ] unsigned char 
 14312 ;;  ctrl_hum        1   64[BANK0 ] unsigned char 
 14313 ;; Return value:  Size  Location     Type
 14314 ;;                  1    wreg      char 
 14315 ;; Registers used:
 14316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14317 ;; Tracked objects:
 14318 ;;		On entry : 1F/0
 14319 ;;		On exit  : 1F/0
 14320 ;;		Unchanged: 0/0
 14321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14322 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14323 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14324 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14326 ;;Total ram usage:       10 bytes
 14327 ;; Hardware stack levels used:    1
 14328 ;; Hardware stack levels required when called:   10
 14329 ;; This function calls:
 14330 ;;		_bme280_get_regs
 14331 ;;		_bme280_set_regs
 14332 ;; This function is called by:
 14333 ;;		_set_osr_settings
 14334 ;; This function uses a non-reentrant model
 14335 ;;
 14336                           
 14337                           
 14338                           ;psect for function _set_osr_humidity_settings
 14339  1046                     _set_osr_humidity_settings:	
 14340                           
 14341                           ;BME280_driver/bme280.c: 798: static int8_t set_osr_humidity_settings(const struct bme28
      +                          0_settings *settings, const struct bme280_dev *dev);BME280_driver/bme280.c: 799: {;BME28
      +                          0_driver/bme280.c: 800:     int8_t rslt;;BME280_driver/bme280.c: 801:     uint8_t ctrl_h
      +                          um;;BME280_driver/bme280.c: 802:     uint8_t ctrl_meas;;BME280_driver/bme280.c: 803:    
      +                           uint8_t reg_addr = 0xF2;
 14342                           
 14343                           ;incstack = 0
 14344                           ; Regs used in _set_osr_humidity_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14345  1046  30F2               	movlw	242
 14346  1047  00DD               	movwf	??_set_osr_humidity_settings
 14347  1048  085D               	movf	??_set_osr_humidity_settings,w
 14348  1049  00E3               	movwf	set_osr_humidity_settings@reg_addr
 14349                           
 14350                           ;BME280_driver/bme280.c: 805:     ctrl_hum = settings->osr_h & 0x07;
 14351  104A  085A               	movf	set_osr_humidity_settings@settings,w
 14352  104B  0086               	movwf	6
 14353  104C  085B               	movf	set_osr_humidity_settings@settings+1,w
 14354  104D  0087               	movwf	7
 14355  104E  3142               	addfsr 1,2
 14356  104F  0801               	movf	1,w
 14357  1050  3907               	andlw	7
 14358  1051  00DD               	movwf	??_set_osr_humidity_settings
 14359  1052  085D               	movf	??_set_osr_humidity_settings,w
 14360  1053  00E0               	movwf	set_osr_humidity_settings@ctrl_hum
 14361                           
 14362                           ;BME280_driver/bme280.c: 808:     rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 14363  1054  3060               	movlw	(low (set_osr_humidity_settings@ctrl_hum| 0))& (0+255)
 14364  1055  00DD               	movwf	??_set_osr_humidity_settings
 14365  1056  085D               	movf	??_set_osr_humidity_settings,w
 14366  1057  00BB               	movwf	bme280_set_regs@reg_data
 14367  1058  01BC               	clrf	bme280_set_regs@len
 14368  1059  0ABC               	incf	bme280_set_regs@len,f
 14369  105A  085C               	movf	set_osr_humidity_settings@dev,w
 14370  105B  00DE               	movwf	??_set_osr_humidity_settings+1
 14371  105C  085E               	movf	??_set_osr_humidity_settings+1,w
 14372  105D  00BD               	movwf	bme280_set_regs@dev
 14373  105E  3063               	movlw	(low (set_osr_humidity_settings@reg_addr| 0))& (0+255)
 14374  105F  3188  200D  3190   	fcall	_bme280_set_regs
 14375  1062  00DF               	movwf	??_set_osr_humidity_settings+2
 14376  1063  085F               	movf	??_set_osr_humidity_settings+2,w
 14377  1064  00E2               	movwf	set_osr_humidity_settings@rslt
 14378                           
 14379                           ;BME280_driver/bme280.c: 813:     if (rslt == 0)
 14380  1065  0862               	movf	set_osr_humidity_settings@rslt,w
 14381  1066  1D03               	btfss	3,2
 14382  1067  2892               	goto	l4066
 14383                           
 14384                           ;BME280_driver/bme280.c: 814:     {;BME280_driver/bme280.c: 815:         reg_addr = 0xF4
      +                          ;
 14385  1068  30F4               	movlw	244
 14386  1069  00DD               	movwf	??_set_osr_humidity_settings
 14387  106A  085D               	movf	??_set_osr_humidity_settings,w
 14388  106B  00E3               	movwf	set_osr_humidity_settings@reg_addr
 14389                           
 14390                           ;BME280_driver/bme280.c: 816:         rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, de
      +                          v);
 14391  106C  3061               	movlw	(low (set_osr_humidity_settings@ctrl_meas| 0))& (0+255)
 14392  106D  00DD               	movwf	??_set_osr_humidity_settings
 14393  106E  085D               	movf	??_set_osr_humidity_settings,w
 14394  106F  00BB               	movwf	bme280_get_regs@reg_data
 14395  1070  3001               	movlw	1
 14396  1071  00BC               	movwf	bme280_get_regs@len
 14397  1072  3000               	movlw	0
 14398  1073  00BD               	movwf	bme280_get_regs@len+1
 14399  1074  085C               	movf	set_osr_humidity_settings@dev,w
 14400  1075  00DE               	movwf	??_set_osr_humidity_settings+1
 14401  1076  085E               	movf	??_set_osr_humidity_settings+1,w
 14402  1077  00BE               	movwf	bme280_get_regs@dev
 14403  1078  0863               	movf	set_osr_humidity_settings@reg_addr,w
 14404  1079  319E  2662  3190   	fcall	_bme280_get_regs
 14405  107C  00DF               	movwf	??_set_osr_humidity_settings+2
 14406  107D  085F               	movf	??_set_osr_humidity_settings+2,w
 14407  107E  00E2               	movwf	set_osr_humidity_settings@rslt
 14408                           
 14409                           ;BME280_driver/bme280.c: 817:         if (rslt == 0)
 14410  107F  0862               	movf	set_osr_humidity_settings@rslt,w
 14411  1080  1D03               	btfss	3,2
 14412  1081  2892               	goto	l4066
 14413                           
 14414                           ;BME280_driver/bme280.c: 818:         {;BME280_driver/bme280.c: 819:             rslt = 
      +                          bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 14415  1082  3061               	movlw	(low (set_osr_humidity_settings@ctrl_meas| 0))& (0+255)
 14416  1083  00DD               	movwf	??_set_osr_humidity_settings
 14417  1084  085D               	movf	??_set_osr_humidity_settings,w
 14418  1085  00BB               	movwf	bme280_set_regs@reg_data
 14419  1086  01BC               	clrf	bme280_set_regs@len
 14420  1087  0ABC               	incf	bme280_set_regs@len,f
 14421  1088  085C               	movf	set_osr_humidity_settings@dev,w
 14422  1089  00DE               	movwf	??_set_osr_humidity_settings+1
 14423  108A  085E               	movf	??_set_osr_humidity_settings+1,w
 14424  108B  00BD               	movwf	bme280_set_regs@dev
 14425  108C  3063               	movlw	(low (set_osr_humidity_settings@reg_addr| 0))& (0+255)
 14426  108D  3188  200D         	fcall	_bme280_set_regs
 14427  108F  00DF               	movwf	??_set_osr_humidity_settings+2
 14428  1090  085F               	movf	??_set_osr_humidity_settings+2,w
 14429  1091  00E2               	movwf	set_osr_humidity_settings@rslt
 14430  1092                     l4066:	
 14431                           
 14432                           ;BME280_driver/bme280.c: 823:     return rslt;
 14433  1092  0862               	movf	set_osr_humidity_settings@rslt,w
 14434  1093  0008               	return
 14435  1094                     __end_of_set_osr_humidity_settings:	
 14436                           
 14437                           	psect	text45
 14438  1EA4                     __ptext45:	
 14439 ;; *************** function _set_filter_standby_settings *****************
 14440 ;; Defined at:
 14441 ;;		line 861 in file "BME280_driver/bme280.c"
 14442 ;; Parameters:    Size  Location     Type
 14443 ;;  desired_sett    1    wreg     unsigned char 
 14444 ;;  settings        2   58[BANK0 ] PTR const struct bme280_
 14445 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14446 ;;  dev             1   60[BANK0 ] PTR const struct bme280_
 14447 ;;		 -> EnvSensor(51), 
 14448 ;; Auto vars:     Size  Location     Type
 14449 ;;  desired_sett    1   64[BANK0 ] unsigned char 
 14450 ;;  reg_data        1   67[BANK0 ] unsigned char 
 14451 ;;  reg_addr        1   66[BANK0 ] unsigned char 
 14452 ;;  rslt            1   65[BANK0 ] char 
 14453 ;; Return value:  Size  Location     Type
 14454 ;;                  1    wreg      char 
 14455 ;; Registers used:
 14456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14457 ;; Tracked objects:
 14458 ;;		On entry : 1E/1
 14459 ;;		On exit  : 1F/0
 14460 ;;		Unchanged: 0/0
 14461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14462 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14466 ;;Total ram usage:       10 bytes
 14467 ;; Hardware stack levels used:    1
 14468 ;; Hardware stack levels required when called:   10
 14469 ;; This function calls:
 14470 ;;		_bme280_get_regs
 14471 ;;		_bme280_set_regs
 14472 ;;		_fill_filter_settings
 14473 ;;		_fill_standby_settings
 14474 ;; This function is called by:
 14475 ;;		_bme280_set_sensor_settings
 14476 ;;		_reload_device_settings
 14477 ;; This function uses a non-reentrant model
 14478 ;;
 14479                           
 14480                           
 14481                           ;psect for function _set_filter_standby_settings
 14482  1EA4                     _set_filter_standby_settings:	
 14483                           
 14484                           ;incstack = 0
 14485                           ; Regs used in _set_filter_standby_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14486                           ;set_filter_standby_settings@desired_settings stored from wreg
 14487  1EA4  0020               	movlb	0	; select bank0
 14488  1EA5  00E0               	movwf	set_filter_standby_settings@desired_settings
 14489                           
 14490                           ;BME280_driver/bme280.c: 861: static int8_t set_filter_standby_settings(uint8_t desired_
      +                          settings,;BME280_driver/bme280.c: 862:                                           const s
      +                          truct bme280_settings *settings,;BME280_driver/bme280.c: 863:                           
      +                                          const struct bme280_dev *dev);BME280_driver/bme280.c: 864: {;BME280_driv
      +                          er/bme280.c: 865:     int8_t rslt;;BME280_driver/bme280.c: 866:     uint8_t reg_addr = 0
      +                          xF5;
 14491  1EA6  30F5               	movlw	245
 14492  1EA7  00DD               	movwf	??_set_filter_standby_settings
 14493  1EA8  085D               	movf	??_set_filter_standby_settings,w
 14494  1EA9  00E2               	movwf	set_filter_standby_settings@reg_addr
 14495                           
 14496                           ;BME280_driver/bme280.c: 867:     uint8_t reg_data;;BME280_driver/bme280.c: 869:     rsl
      +                          t = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 14497  1EAA  3063               	movlw	(low (set_filter_standby_settings@reg_data| 0))& (0+255)
 14498  1EAB  00DD               	movwf	??_set_filter_standby_settings
 14499  1EAC  085D               	movf	??_set_filter_standby_settings,w
 14500  1EAD  00BB               	movwf	bme280_get_regs@reg_data
 14501  1EAE  3001               	movlw	1
 14502  1EAF  00BC               	movwf	bme280_get_regs@len
 14503  1EB0  3000               	movlw	0
 14504  1EB1  00BD               	movwf	bme280_get_regs@len+1
 14505  1EB2  085C               	movf	set_filter_standby_settings@dev,w
 14506  1EB3  00DE               	movwf	??_set_filter_standby_settings+1
 14507  1EB4  085E               	movf	??_set_filter_standby_settings+1,w
 14508  1EB5  00BE               	movwf	bme280_get_regs@dev
 14509  1EB6  0862               	movf	set_filter_standby_settings@reg_addr,w
 14510  1EB7  319E  2662  319E   	fcall	_bme280_get_regs
 14511  1EBA  00DF               	movwf	??_set_filter_standby_settings+2
 14512  1EBB  085F               	movf	??_set_filter_standby_settings+2,w
 14513  1EBC  00E1               	movwf	set_filter_standby_settings@rslt
 14514                           
 14515                           ;BME280_driver/bme280.c: 870:     if (rslt == 0)
 14516  1EBD  0861               	movf	set_filter_standby_settings@rslt,w
 14517  1EBE  1D03               	btfss	3,2
 14518  1EBF  2EE4               	goto	l4120
 14519                           
 14520                           ;BME280_driver/bme280.c: 871:     {;BME280_driver/bme280.c: 872:         if (desired_set
      +                          tings & 1 << 3)
 14521  1EC0  1DE0               	btfss	set_filter_standby_settings@desired_settings,3
 14522  1EC1  2ECA               	goto	l4116
 14523                           
 14524                           ;BME280_driver/bme280.c: 873:         {;BME280_driver/bme280.c: 874:             fill_fi
      +                          lter_settings(&reg_data, settings);
 14525  1EC2  085B               	movf	set_filter_standby_settings@settings+1,w
 14526  1EC3  00F1               	movwf	fill_filter_settings@settings+1
 14527  1EC4  085A               	movf	set_filter_standby_settings@settings,w
 14528  1EC5  00F0               	movwf	fill_filter_settings@settings
 14529  1EC6  3063               	movlw	(low (set_filter_standby_settings@reg_data| 0))& (0+255)
 14530  1EC7  319A  227B  319E   	fcall	_fill_filter_settings
 14531  1ECA                     l4116:	
 14532                           
 14533                           ;BME280_driver/bme280.c: 876:         if (desired_settings & 1 << 4)
 14534  1ECA  1E60               	btfss	set_filter_standby_settings@desired_settings,4
 14535  1ECB  2ED4               	goto	l152
 14536                           
 14537                           ;BME280_driver/bme280.c: 877:         {;BME280_driver/bme280.c: 878:             fill_st
      +                          andby_settings(&reg_data, settings);
 14538  1ECC  085B               	movf	set_filter_standby_settings@settings+1,w
 14539  1ECD  00F1               	movwf	fill_standby_settings@settings+1
 14540  1ECE  085A               	movf	set_filter_standby_settings@settings,w
 14541  1ECF  00F0               	movwf	fill_standby_settings@settings
 14542  1ED0  3063               	movlw	(low (set_filter_standby_settings@reg_data| 0))& (0+255)
 14543  1ED1  319A  2297  319E   	fcall	_fill_standby_settings
 14544  1ED4                     l152:	
 14545                           ;BME280_driver/bme280.c: 879:         }
 14546                           
 14547                           
 14548                           ;BME280_driver/bme280.c: 882:         rslt = bme280_set_regs(&reg_addr, &reg_data, 1, de
      +                          v);
 14549  1ED4  3063               	movlw	(low (set_filter_standby_settings@reg_data| 0))& (0+255)
 14550  1ED5  00DD               	movwf	??_set_filter_standby_settings
 14551  1ED6  085D               	movf	??_set_filter_standby_settings,w
 14552  1ED7  00BB               	movwf	bme280_set_regs@reg_data
 14553  1ED8  01BC               	clrf	bme280_set_regs@len
 14554  1ED9  0ABC               	incf	bme280_set_regs@len,f
 14555  1EDA  085C               	movf	set_filter_standby_settings@dev,w
 14556  1EDB  00DE               	movwf	??_set_filter_standby_settings+1
 14557  1EDC  085E               	movf	??_set_filter_standby_settings+1,w
 14558  1EDD  00BD               	movwf	bme280_set_regs@dev
 14559  1EDE  3062               	movlw	(low (set_filter_standby_settings@reg_addr| 0))& (0+255)
 14560  1EDF  3188  200D         	fcall	_bme280_set_regs
 14561  1EE1  00DF               	movwf	??_set_filter_standby_settings+2
 14562  1EE2  085F               	movf	??_set_filter_standby_settings+2,w
 14563  1EE3  00E1               	movwf	set_filter_standby_settings@rslt
 14564  1EE4                     l4120:	
 14565                           
 14566                           ;BME280_driver/bme280.c: 885:     return rslt;
 14567  1EE4  0861               	movf	set_filter_standby_settings@rslt,w
 14568  1EE5  0008               	return
 14569  1EE6                     __end_of_set_filter_standby_settings:	
 14570                           
 14571                           	psect	text46
 14572  1A97                     __ptext46:	
 14573 ;; *************** function _fill_standby_settings *****************
 14574 ;; Defined at:
 14575 ;;		line 901 in file "BME280_driver/bme280.c"
 14576 ;; Parameters:    Size  Location     Type
 14577 ;;  reg_data        1    wreg     PTR unsigned char 
 14578 ;;		 -> set_filter_standby_settings@reg_data(1), 
 14579 ;;  settings        2    0[COMMON] PTR const struct bme280_
 14580 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14581 ;; Auto vars:     Size  Location     Type
 14582 ;;  reg_data        1    5[COMMON] PTR unsigned char 
 14583 ;;		 -> set_filter_standby_settings@reg_data(1), 
 14584 ;; Return value:  Size  Location     Type
 14585 ;;                  1    wreg      void 
 14586 ;; Registers used:
 14587 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14588 ;; Tracked objects:
 14589 ;;		On entry : 1F/0
 14590 ;;		On exit  : 1F/0
 14591 ;;		Unchanged: 1F/0
 14592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14593 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14595 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14596 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14597 ;;Total ram usage:        6 bytes
 14598 ;; Hardware stack levels used:    1
 14599 ;; Hardware stack levels required when called:    3
 14600 ;; This function calls:
 14601 ;;		Nothing
 14602 ;; This function is called by:
 14603 ;;		_set_filter_standby_settings
 14604 ;; This function uses a non-reentrant model
 14605 ;;
 14606                           
 14607                           
 14608                           ;psect for function _fill_standby_settings
 14609  1A97                     _fill_standby_settings:	
 14610                           
 14611                           ;incstack = 0
 14612                           ; Regs used in _fill_standby_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14613                           ;fill_standby_settings@reg_data stored from wreg
 14614  1A97  00F5               	movwf	fill_standby_settings@reg_data
 14615                           
 14616                           ;BME280_driver/bme280.c: 901: static void fill_standby_settings(uint8_t *reg_data, const
      +                           struct bme280_settings *settings);BME280_driver/bme280.c: 902: {;BME280_driver/bme280.c
      +                          : 903:     *reg_data = ((*reg_data & ~( 0xE0)) | ((settings->standby_time << 0x05) & 0xE
      +                          0));
 14617  1A98  0870               	movf	fill_standby_settings@settings,w
 14618  1A99  0086               	movwf	6
 14619  1A9A  0871               	movf	fill_standby_settings@settings+1,w
 14620  1A9B  0087               	movwf	7
 14621  1A9C  3144               	addfsr 1,4
 14622  1A9D  0801               	movf	1,w
 14623  1A9E  00F2               	movwf	??_fill_standby_settings
 14624  1A9F  3005               	movlw	5
 14625  1AA0                     u4425:	
 14626  1AA0  35F2               	lslf	??_fill_standby_settings,f
 14627  1AA1  0B89               	decfsz	9,f
 14628  1AA2  2AA0               	goto	u4425
 14629  1AA3  30E0               	movlw	224
 14630  1AA4  0572               	andwf	??_fill_standby_settings,w
 14631  1AA5  00F3               	movwf	??_fill_standby_settings+1
 14632  1AA6  0875               	movf	fill_standby_settings@reg_data,w
 14633  1AA7  0086               	movwf	6
 14634  1AA8  0187               	clrf	7
 14635  1AA9  0801               	movf	1,w
 14636  1AAA  391F               	andlw	31
 14637  1AAB  0473               	iorwf	??_fill_standby_settings+1,w
 14638  1AAC  00F4               	movwf	??_fill_standby_settings+2
 14639  1AAD  0875               	movf	fill_standby_settings@reg_data,w
 14640  1AAE  0086               	movwf	6
 14641  1AAF  0187               	clrf	7
 14642  1AB0  0874               	movf	??_fill_standby_settings+2,w
 14643  1AB1  0081               	movwf	1
 14644  1AB2  0008               	return
 14645  1AB3                     __end_of_fill_standby_settings:	
 14646                           
 14647                           	psect	text47
 14648  1A7B                     __ptext47:	
 14649 ;; *************** function _fill_filter_settings *****************
 14650 ;; Defined at:
 14651 ;;		line 892 in file "BME280_driver/bme280.c"
 14652 ;; Parameters:    Size  Location     Type
 14653 ;;  reg_data        1    wreg     PTR unsigned char 
 14654 ;;		 -> set_filter_standby_settings@reg_data(1), 
 14655 ;;  settings        2    0[COMMON] PTR const struct bme280_
 14656 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14657 ;; Auto vars:     Size  Location     Type
 14658 ;;  reg_data        1    5[COMMON] PTR unsigned char 
 14659 ;;		 -> set_filter_standby_settings@reg_data(1), 
 14660 ;; Return value:  Size  Location     Type
 14661 ;;                  1    wreg      void 
 14662 ;; Registers used:
 14663 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14664 ;; Tracked objects:
 14665 ;;		On entry : 1F/0
 14666 ;;		On exit  : 1F/0
 14667 ;;		Unchanged: 1F/0
 14668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14669 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;Total ram usage:        6 bytes
 14674 ;; Hardware stack levels used:    1
 14675 ;; Hardware stack levels required when called:    3
 14676 ;; This function calls:
 14677 ;;		Nothing
 14678 ;; This function is called by:
 14679 ;;		_set_filter_standby_settings
 14680 ;; This function uses a non-reentrant model
 14681 ;;
 14682                           
 14683                           
 14684                           ;psect for function _fill_filter_settings
 14685  1A7B                     _fill_filter_settings:	
 14686                           
 14687                           ;incstack = 0
 14688                           ; Regs used in _fill_filter_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14689                           ;fill_filter_settings@reg_data stored from wreg
 14690  1A7B  00F5               	movwf	fill_filter_settings@reg_data
 14691                           
 14692                           ;BME280_driver/bme280.c: 892: static void fill_filter_settings(uint8_t *reg_data, const 
      +                          struct bme280_settings *settings);BME280_driver/bme280.c: 893: {;BME280_driver/bme280.c:
      +                           894:     *reg_data = ((*reg_data & ~( 0x1C)) | ((settings->filter << 0x02) & 0x1C));
 14693  1A7C  0870               	movf	fill_filter_settings@settings,w
 14694  1A7D  0086               	movwf	6
 14695  1A7E  0871               	movf	fill_filter_settings@settings+1,w
 14696  1A7F  0087               	movwf	7
 14697  1A80  3143               	addfsr 1,3
 14698  1A81  0801               	movf	1,w
 14699  1A82  00F2               	movwf	??_fill_filter_settings
 14700  1A83  3002               	movlw	2
 14701  1A84                     u4415:	
 14702  1A84  35F2               	lslf	??_fill_filter_settings,f
 14703  1A85  0B89               	decfsz	9,f
 14704  1A86  2A84               	goto	u4415
 14705  1A87  301C               	movlw	28
 14706  1A88  0572               	andwf	??_fill_filter_settings,w
 14707  1A89  00F3               	movwf	??_fill_filter_settings+1
 14708  1A8A  0875               	movf	fill_filter_settings@reg_data,w
 14709  1A8B  0086               	movwf	6
 14710  1A8C  0187               	clrf	7
 14711  1A8D  0801               	movf	1,w
 14712  1A8E  39E3               	andlw	227
 14713  1A8F  0473               	iorwf	??_fill_filter_settings+1,w
 14714  1A90  00F4               	movwf	??_fill_filter_settings+2
 14715  1A91  0875               	movf	fill_filter_settings@reg_data,w
 14716  1A92  0086               	movwf	6
 14717  1A93  0187               	clrf	7
 14718  1A94  0874               	movf	??_fill_filter_settings+2,w
 14719  1A95  0081               	movwf	1
 14720  1A96  0008               	return
 14721  1A97                     __end_of_fill_filter_settings:	
 14722                           
 14723                           	psect	text48
 14724  11DB                     __ptext48:	
 14725 ;; *************** function _parse_device_settings *****************
 14726 ;; Defined at:
 14727 ;;		line 929 in file "BME280_driver/bme280.c"
 14728 ;; Parameters:    Size  Location     Type
 14729 ;;  reg_data        1    wreg     PTR const unsigned char 
 14730 ;;		 -> put_device_to_sleep@reg_data(4), bme280_get_sensor_settings@reg_data(4), 
 14731 ;;  settings        1    0[COMMON] PTR struct bme280_settin
 14732 ;;		 -> put_device_to_sleep@settings(5), 
 14733 ;; Auto vars:     Size  Location     Type
 14734 ;;  reg_data        1    3[COMMON] PTR const unsigned char 
 14735 ;;		 -> put_device_to_sleep@reg_data(4), bme280_get_sensor_settings@reg_data(4), 
 14736 ;; Return value:  Size  Location     Type
 14737 ;;                  1    wreg      void 
 14738 ;; Registers used:
 14739 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14740 ;; Tracked objects:
 14741 ;;		On entry : 1F/1
 14742 ;;		On exit  : 1F/1
 14743 ;;		Unchanged: 1F/0
 14744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14745 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14747 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14748 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;Total ram usage:        4 bytes
 14750 ;; Hardware stack levels used:    1
 14751 ;; Hardware stack levels required when called:    3
 14752 ;; This function calls:
 14753 ;;		Nothing
 14754 ;; This function is called by:
 14755 ;;		_put_device_to_sleep
 14756 ;; This function uses a non-reentrant model
 14757 ;;
 14758                           
 14759                           
 14760                           ;psect for function _parse_device_settings
 14761  11DB                     _parse_device_settings:	
 14762                           
 14763                           ;incstack = 0
 14764                           ; Regs used in _parse_device_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14765                           ;parse_device_settings@reg_data stored from wreg
 14766  11DB  00F3               	movwf	parse_device_settings@reg_data
 14767                           
 14768                           ;BME280_driver/bme280.c: 929: static void parse_device_settings(const uint8_t *reg_data,
      +                           struct bme280_settings *settings);BME280_driver/bme280.c: 930: {;BME280_driver/bme280.c
      +                          : 931:     settings->osr_h = (reg_data[0] & ( 0x07));
 14769  11DC  0873               	movf	parse_device_settings@reg_data,w
 14770  11DD  0086               	movwf	6
 14771  11DE  0187               	clrf	7
 14772  11DF  0801               	movf	1,w
 14773  11E0  3907               	andlw	7
 14774  11E1  00F1               	movwf	??_parse_device_settings
 14775  11E2  0870               	movf	parse_device_settings@settings,w
 14776  11E3  3E02               	addlw	2
 14777  11E4  0086               	movwf	6
 14778  11E5  0187               	clrf	7
 14779  11E6  0871               	movf	??_parse_device_settings,w
 14780  11E7  0081               	movwf	1
 14781                           
 14782                           ;BME280_driver/bme280.c: 932:     settings->osr_p = ((reg_data[2] & ( 0x1C)) >> ( 0x02))
      +                          ;
 14783  11E8  0873               	movf	parse_device_settings@reg_data,w
 14784  11E9  3E02               	addlw	2
 14785  11EA  0086               	movwf	6
 14786  11EB  0187               	clrf	7
 14787  11EC  0801               	movf	1,w
 14788  11ED  00F1               	movwf	??_parse_device_settings
 14789  11EE  3002               	movlw	2
 14790  11EF                     u4495:	
 14791  11EF  36F1               	lsrf	??_parse_device_settings,f
 14792  11F0  0B89               	decfsz	9,f
 14793  11F1  29EF               	goto	u4495
 14794  11F2  0871               	movf	??_parse_device_settings,w
 14795  11F3  3907               	andlw	7
 14796  11F4  00F2               	movwf	??_parse_device_settings+1
 14797  11F5  0870               	movf	parse_device_settings@settings,w
 14798  11F6  0086               	movwf	6
 14799  11F7  0187               	clrf	7
 14800  11F8  0872               	movf	??_parse_device_settings+1,w
 14801  11F9  0081               	movwf	1
 14802                           
 14803                           ;BME280_driver/bme280.c: 933:     settings->osr_t = ((reg_data[2] & ( 0xE0)) >> ( 0x05))
      +                          ;
 14804  11FA  0873               	movf	parse_device_settings@reg_data,w
 14805  11FB  3E02               	addlw	2
 14806  11FC  0086               	movwf	6
 14807  11FD  0187               	clrf	7
 14808  11FE  0801               	movf	1,w
 14809  11FF  00F1               	movwf	??_parse_device_settings
 14810  1200  3005               	movlw	5
 14811  1201                     u4505:	
 14812  1201  36F1               	lsrf	??_parse_device_settings,f
 14813  1202  0B89               	decfsz	9,f
 14814  1203  2A01               	goto	u4505
 14815  1204  0871               	movf	??_parse_device_settings,w
 14816  1205  3907               	andlw	7
 14817  1206  00F2               	movwf	??_parse_device_settings+1
 14818  1207  0A70               	incf	parse_device_settings@settings,w
 14819  1208  0086               	movwf	6
 14820  1209  0187               	clrf	7
 14821  120A  0872               	movf	??_parse_device_settings+1,w
 14822  120B  0081               	movwf	1
 14823                           
 14824                           ;BME280_driver/bme280.c: 934:     settings->filter = ((reg_data[3] & ( 0x1C)) >> ( 0x02)
      +                          );
 14825  120C  0873               	movf	parse_device_settings@reg_data,w
 14826  120D  3E03               	addlw	3
 14827  120E  0086               	movwf	6
 14828  120F  0187               	clrf	7
 14829  1210  0801               	movf	1,w
 14830  1211  00F1               	movwf	??_parse_device_settings
 14831  1212  3002               	movlw	2
 14832  1213                     u4515:	
 14833  1213  36F1               	lsrf	??_parse_device_settings,f
 14834  1214  0B89               	decfsz	9,f
 14835  1215  2A13               	goto	u4515
 14836  1216  0871               	movf	??_parse_device_settings,w
 14837  1217  3907               	andlw	7
 14838  1218  00F2               	movwf	??_parse_device_settings+1
 14839  1219  0870               	movf	parse_device_settings@settings,w
 14840  121A  3E03               	addlw	3
 14841  121B  0086               	movwf	6
 14842  121C  0187               	clrf	7
 14843  121D  0872               	movf	??_parse_device_settings+1,w
 14844  121E  0081               	movwf	1
 14845                           
 14846                           ;BME280_driver/bme280.c: 935:     settings->standby_time = ((reg_data[3] & ( 0xE0)) >> (
      +                           0x05));
 14847  121F  0873               	movf	parse_device_settings@reg_data,w
 14848  1220  3E03               	addlw	3
 14849  1221  0086               	movwf	6
 14850  1222  0187               	clrf	7
 14851  1223  0801               	movf	1,w
 14852  1224  00F1               	movwf	??_parse_device_settings
 14853  1225  3005               	movlw	5
 14854  1226                     u4525:	
 14855  1226  36F1               	lsrf	??_parse_device_settings,f
 14856  1227  0B89               	decfsz	9,f
 14857  1228  2A26               	goto	u4525
 14858  1229  0871               	movf	??_parse_device_settings,w
 14859  122A  3907               	andlw	7
 14860  122B  00F2               	movwf	??_parse_device_settings+1
 14861  122C  0870               	movf	parse_device_settings@settings,w
 14862  122D  3E04               	addlw	4
 14863  122E  0086               	movwf	6
 14864  122F  0187               	clrf	7
 14865  1230  0872               	movf	??_parse_device_settings+1,w
 14866  1231  0081               	movwf	1
 14867  1232  0008               	return
 14868  1233                     __end_of_parse_device_settings:	
 14869                           
 14870                           	psect	text49
 14871  1C0C                     __ptext49:	
 14872 ;; *************** function _bme280_get_sensor_mode *****************
 14873 ;; Defined at:
 14874 ;;		line 610 in file "BME280_driver/bme280.c"
 14875 ;; Parameters:    Size  Location     Type
 14876 ;;  sensor_mode     1    wreg     PTR unsigned char 
 14877 ;;		 -> bme280_set_sensor_mode@last_set_mode(1), bme280_set_sensor_settings@sensor_mode(1), 
 14878 ;;  dev             1   36[BANK0 ] PTR const struct bme280_
 14879 ;;		 -> EnvSensor(51), 
 14880 ;; Auto vars:     Size  Location     Type
 14881 ;;  sensor_mode     1   41[BANK0 ] PTR unsigned char 
 14882 ;;		 -> bme280_set_sensor_mode@last_set_mode(1), bme280_set_sensor_settings@sensor_mode(1), 
 14883 ;;  rslt            1   40[BANK0 ] char 
 14884 ;; Return value:  Size  Location     Type
 14885 ;;                  1    wreg      char 
 14886 ;; Registers used:
 14887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14888 ;; Tracked objects:
 14889 ;;		On entry : 1F/0
 14890 ;;		On exit  : 1F/0
 14891 ;;		Unchanged: 0/0
 14892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14893 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14895 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14896 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14897 ;;Total ram usage:        6 bytes
 14898 ;; Hardware stack levels used:    1
 14899 ;; Hardware stack levels required when called:   10
 14900 ;; This function calls:
 14901 ;;		_bme280_get_regs
 14902 ;;		_null_ptr_check
 14903 ;; This function is called by:
 14904 ;;		_bme280_set_sensor_settings
 14905 ;;		_bme280_set_sensor_mode
 14906 ;; This function uses a non-reentrant model
 14907 ;;
 14908                           
 14909                           
 14910                           ;psect for function _bme280_get_sensor_mode
 14911  1C0C                     _bme280_get_sensor_mode:	
 14912                           
 14913                           ;incstack = 0
 14914                           ; Regs used in _bme280_get_sensor_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14915                           ;bme280_get_sensor_mode@sensor_mode stored from wreg
 14916  1C0C  00C9               	movwf	bme280_get_sensor_mode@sensor_mode
 14917                           
 14918                           ;BME280_driver/bme280.c: 610: int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const 
      +                          struct bme280_dev *dev);BME280_driver/bme280.c: 611: {;BME280_driver/bme280.c: 612:     
      +                          int8_t rslt;;BME280_driver/bme280.c: 615:     rslt = null_ptr_check(dev);
 14919  1C0D  0844               	movf	bme280_get_sensor_mode@dev,w
 14920  1C0E  319A  22F2  319C   	fcall	_null_ptr_check
 14921  1C11  0020               	movlb	0	; select bank0
 14922  1C12  00C5               	movwf	??_bme280_get_sensor_mode
 14923  1C13  0845               	movf	??_bme280_get_sensor_mode,w
 14924  1C14  00C8               	movwf	bme280_get_sensor_mode@rslt
 14925                           
 14926                           ;BME280_driver/bme280.c: 616:     if (rslt == 0)
 14927  1C15  0848               	movf	bme280_get_sensor_mode@rslt,w
 14928  1C16  1D03               	btfss	3,2
 14929  1C17  2C35               	goto	l4226
 14930                           
 14931                           ;BME280_driver/bme280.c: 617:     {;BME280_driver/bme280.c: 619:         rslt = bme280_g
      +                          et_regs(0xF4, sensor_mode, 1, dev);
 14932  1C18  0849               	movf	bme280_get_sensor_mode@sensor_mode,w
 14933  1C19  00C5               	movwf	??_bme280_get_sensor_mode
 14934  1C1A  0845               	movf	??_bme280_get_sensor_mode,w
 14935  1C1B  00BB               	movwf	bme280_get_regs@reg_data
 14936  1C1C  3001               	movlw	1
 14937  1C1D  00BC               	movwf	bme280_get_regs@len
 14938  1C1E  3000               	movlw	0
 14939  1C1F  00BD               	movwf	bme280_get_regs@len+1
 14940  1C20  0844               	movf	bme280_get_sensor_mode@dev,w
 14941  1C21  00C6               	movwf	??_bme280_get_sensor_mode+1
 14942  1C22  0846               	movf	??_bme280_get_sensor_mode+1,w
 14943  1C23  00BE               	movwf	bme280_get_regs@dev
 14944  1C24  30F4               	movlw	244
 14945  1C25  319E  2662         	fcall	_bme280_get_regs
 14946  1C27  00C7               	movwf	??_bme280_get_sensor_mode+2
 14947  1C28  0847               	movf	??_bme280_get_sensor_mode+2,w
 14948  1C29  00C8               	movwf	bme280_get_sensor_mode@rslt
 14949                           
 14950                           ;BME280_driver/bme280.c: 622:         *sensor_mode = (*sensor_mode & ( 0x03));
 14951  1C2A  0849               	movf	bme280_get_sensor_mode@sensor_mode,w
 14952  1C2B  0086               	movwf	6
 14953  1C2C  0187               	clrf	7
 14954  1C2D  0801               	movf	1,w
 14955  1C2E  3903               	andlw	3
 14956  1C2F  00C5               	movwf	??_bme280_get_sensor_mode
 14957  1C30  0849               	movf	bme280_get_sensor_mode@sensor_mode,w
 14958  1C31  0086               	movwf	6
 14959  1C32  0187               	clrf	7
 14960  1C33  0845               	movf	??_bme280_get_sensor_mode,w
 14961  1C34  0081               	movwf	1
 14962  1C35                     l4226:	
 14963                           
 14964                           ;BME280_driver/bme280.c: 625:     return rslt;
 14965  1C35  0848               	movf	bme280_get_sensor_mode@rslt,w
 14966  1C36  0008               	return
 14967  1C37                     __end_of_bme280_get_sensor_mode:	
 14968                           
 14969                           	psect	text50
 14970  12F3                     __ptext50:	
 14971 ;; *************** function _bme280_init *****************
 14972 ;; Defined at:
 14973 ;;		line 357 in file "BME280_driver/bme280.c"
 14974 ;; Parameters:    Size  Location     Type
 14975 ;;  dev             1    wreg     PTR struct bme280_dev
 14976 ;;		 -> EnvSensor(51), 
 14977 ;; Auto vars:     Size  Location     Type
 14978 ;;  dev             1   74[BANK0 ] PTR struct bme280_dev
 14979 ;;		 -> EnvSensor(51), 
 14980 ;;  rslt            1   73[BANK0 ] char 
 14981 ;;  chip_id         1   72[BANK0 ] unsigned char 
 14982 ;;  try_count       1   71[BANK0 ] unsigned char 
 14983 ;; Return value:  Size  Location     Type
 14984 ;;                  1    wreg      char 
 14985 ;; Registers used:
 14986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14987 ;; Tracked objects:
 14988 ;;		On entry : 1F/3
 14989 ;;		On exit  : 1F/0
 14990 ;;		Unchanged: 0/0
 14991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;Total ram usage:        7 bytes
 14997 ;; Hardware stack levels used:    1
 14998 ;; Hardware stack levels required when called:   11
 14999 ;; This function calls:
 15000 ;;		_Sleep
 15001 ;;		_bme280_get_regs
 15002 ;;		_bme280_soft_reset
 15003 ;;		_get_calib_data
 15004 ;;		_null_ptr_check
 15005 ;; This function is called by:
 15006 ;;		_BME280_Init
 15007 ;; This function uses a non-reentrant model
 15008 ;;
 15009                           
 15010                           
 15011                           ;psect for function _bme280_init
 15012  12F3                     _bme280_init:	
 15013                           
 15014                           ;incstack = 0
 15015                           ; Regs used in _bme280_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15016                           ;bme280_init@dev stored from wreg
 15017  12F3  0020               	movlb	0	; select bank0
 15018  12F4  00EA               	movwf	bme280_init@dev
 15019                           
 15020                           ;BME280_driver/bme280.c: 357: int8_t bme280_init(struct bme280_dev *dev);BME280_driver/b
      +                          me280.c: 358: {;BME280_driver/bme280.c: 359:     int8_t rslt;;BME280_driver/bme280.c: 36
      +                          2:     uint8_t try_count = 5;
 15021  12F5  3005               	movlw	5
 15022  12F6  00E4               	movwf	??_bme280_init
 15023  12F7  0864               	movf	??_bme280_init,w
 15024  12F8  00E7               	movwf	bme280_init@try_count
 15025                           
 15026                           ;BME280_driver/bme280.c: 363:     uint8_t chip_id = 0;
 15027  12F9  01E8               	clrf	bme280_init@chip_id
 15028                           
 15029                           ;BME280_driver/bme280.c: 366:     rslt = null_ptr_check(dev);
 15030  12FA  086A               	movf	bme280_init@dev,w
 15031  12FB  319A  22F2  3192   	fcall	_null_ptr_check
 15032  12FE  0020               	movlb	0	; select bank0
 15033  12FF  00E4               	movwf	??_bme280_init
 15034  1300  0864               	movf	??_bme280_init,w
 15035  1301  00E9               	movwf	bme280_init@rslt
 15036                           
 15037                           ;BME280_driver/bme280.c: 369:     if (rslt == 0)
 15038  1302  0869               	movf	bme280_init@rslt,w
 15039  1303  1903               	btfsc	3,2
 15040  1304  2B4F               	goto	l4426
 15041  1305  2B59               	goto	l55
 15042  1306                     l4408:	
 15043                           
 15044                           ;BME280_driver/bme280.c: 372:         {;BME280_driver/bme280.c: 374:             rslt = 
      +                          bme280_get_regs(0xD0, &chip_id, 1, dev);
 15045  1306  3068               	movlw	(low (bme280_init@chip_id| 0))& (0+255)
 15046  1307  00E4               	movwf	??_bme280_init
 15047  1308  0864               	movf	??_bme280_init,w
 15048  1309  00BB               	movwf	bme280_get_regs@reg_data
 15049  130A  3001               	movlw	1
 15050  130B  00BC               	movwf	bme280_get_regs@len
 15051  130C  3000               	movlw	0
 15052  130D  00BD               	movwf	bme280_get_regs@len+1
 15053  130E  086A               	movf	bme280_init@dev,w
 15054  130F  00E5               	movwf	??_bme280_init+1
 15055  1310  0865               	movf	??_bme280_init+1,w
 15056  1311  00BE               	movwf	bme280_get_regs@dev
 15057  1312  30D0               	movlw	208
 15058  1313  319E  2662  3192   	fcall	_bme280_get_regs
 15059  1316  00E6               	movwf	??_bme280_init+2
 15060  1317  0866               	movf	??_bme280_init+2,w
 15061  1318  00E9               	movwf	bme280_init@rslt
 15062                           
 15063                           ;BME280_driver/bme280.c: 377:             if ((rslt == 0) && (chip_id == 0x60))
 15064  1319  0869               	movf	bme280_init@rslt,w
 15065  131A  1D03               	btfss	3,2
 15066  131B  2B3A               	goto	l4422
 15067  131C  3060               	movlw	96
 15068  131D  0668               	xorwf	bme280_init@chip_id,w
 15069  131E  1D03               	btfss	3,2
 15070  131F  2B3A               	goto	l4422
 15071                           
 15072                           ;BME280_driver/bme280.c: 378:             {;BME280_driver/bme280.c: 379:                
      +                           dev->chip_id = chip_id;
 15073  1320  0868               	movf	bme280_init@chip_id,w
 15074  1321  00E4               	movwf	??_bme280_init
 15075  1322  086A               	movf	bme280_init@dev,w
 15076  1323  0086               	movwf	6
 15077  1324  3001               	movlw	1	; select bank2/3
 15078  1325  0087               	movwf	7
 15079  1326  0864               	movf	??_bme280_init,w
 15080  1327  0081               	movwf	1
 15081                           
 15082                           ;BME280_driver/bme280.c: 382:                 rslt = bme280_soft_reset(dev);
 15083  1328  086A               	movf	bme280_init@dev,w
 15084  1329  319D  252F  3192   	fcall	_bme280_soft_reset
 15085  132C  00E4               	movwf	??_bme280_init
 15086  132D  0864               	movf	??_bme280_init,w
 15087  132E  00E9               	movwf	bme280_init@rslt
 15088                           
 15089                           ;BME280_driver/bme280.c: 383:                 if (rslt == 0)
 15090  132F  0869               	movf	bme280_init@rslt,w
 15091  1330  1D03               	btfss	3,2
 15092  1331  2B52               	goto	l4428
 15093                           
 15094                           ;BME280_driver/bme280.c: 384:                 {;BME280_driver/bme280.c: 386:            
      +                                   rslt = get_calib_data(dev);
 15095  1332  086A               	movf	bme280_init@dev,w
 15096  1333  319F  2770  3192   	fcall	_get_calib_data
 15097  1336  00E4               	movwf	??_bme280_init
 15098  1337  0864               	movf	??_bme280_init,w
 15099  1338  00E9               	movwf	bme280_init@rslt
 15100  1339  2B52               	goto	l4428
 15101  133A                     l4422:	
 15102                           
 15103                           ;BME280_driver/bme280.c: 392:             dev->delay_ms(1);
 15104  133A  3000               	movlw	0
 15105  133B  00F3               	movwf	Sleep@ms+3
 15106  133C  3000               	movlw	0
 15107  133D  00F2               	movwf	Sleep@ms+2
 15108  133E  3000               	movlw	0
 15109  133F  00F1               	movwf	Sleep@ms+1
 15110  1340  3001               	movlw	1
 15111  1341  00F0               	movwf	Sleep@ms
 15112  1342  086A               	movf	bme280_init@dev,w
 15113  1343  3E07               	addlw	7
 15114  1344  0086               	movwf	6
 15115  1345  3001               	movlw	1	; select bank2/3
 15116  1346  0087               	movwf	7
 15117  1347  3F41               	moviw [1]fsr1
 15118  1348  008A               	movwf	10
 15119  1349  3F40               	moviw [0]fsr1
 15120  134A  000A               	callw
 15121  134B  3192               	pagesel	$
 15122                           
 15123                           ;BME280_driver/bme280.c: 393:             --try_count;
 15124  134C  3001               	movlw	1
 15125  134D  0020               	movlb	0	; select bank0
 15126  134E  02E7               	subwf	bme280_init@try_count,f
 15127  134F                     l4426:	
 15128                           
 15129                           ;BME280_driver/bme280.c: 371:         while (try_count)
 15130  134F  0867               	movf	bme280_init@try_count,w
 15131  1350  1D03               	btfss	3,2
 15132  1351  2B06               	goto	l4408
 15133  1352                     l4428:	
 15134                           
 15135                           ;BME280_driver/bme280.c: 397:         if (!try_count)
 15136  1352  0867               	movf	bme280_init@try_count,w
 15137  1353  1D03               	btfss	3,2
 15138  1354  2B59               	goto	l55
 15139                           
 15140                           ;BME280_driver/bme280.c: 398:         {;BME280_driver/bme280.c: 399:             rslt = 
      +                          -2;
 15141  1355  30FE               	movlw	254
 15142  1356  00E4               	movwf	??_bme280_init
 15143  1357  0864               	movf	??_bme280_init,w
 15144  1358  00E9               	movwf	bme280_init@rslt
 15145  1359                     l55:	
 15146                           ;BME280_driver/bme280.c: 401:     }
 15147                           
 15148                           
 15149                           ;BME280_driver/bme280.c: 403:     return rslt;
 15150  1359  0869               	movf	bme280_init@rslt,w
 15151  135A  0008               	return
 15152  135B                     __end_of_bme280_init:	
 15153                           
 15154                           	psect	text51
 15155  1F70                     __ptext51:	
 15156 ;; *************** function _get_calib_data *****************
 15157 ;; Defined at:
 15158 ;;		line 1307 in file "BME280_driver/bme280.c"
 15159 ;; Parameters:    Size  Location     Type
 15160 ;;  dev             1    wreg     PTR struct bme280_dev
 15161 ;;		 -> EnvSensor(51), 
 15162 ;; Auto vars:     Size  Location     Type
 15163 ;;  dev             1   67[BANK0 ] PTR struct bme280_dev
 15164 ;;		 -> EnvSensor(51), 
 15165 ;;  calib_data     26   39[BANK0 ] unsigned char [26]
 15166 ;;  rslt            1   66[BANK0 ] char 
 15167 ;;  reg_addr        1    0        unsigned char 
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  1    wreg      char 
 15170 ;; Registers used:
 15171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15172 ;; Tracked objects:
 15173 ;;		On entry : 1F/0
 15174 ;;		On exit  : 1F/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;Total ram usage:       32 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:   10
 15184 ;; This function calls:
 15185 ;;		_bme280_get_regs
 15186 ;;		_parse_humidity_calib_data
 15187 ;;		_parse_temp_press_calib_data
 15188 ;; This function is called by:
 15189 ;;		_bme280_init
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           
 15194                           ;psect for function _get_calib_data
 15195  1F70                     _get_calib_data:	
 15196                           
 15197                           ;incstack = 0
 15198                           ; Regs used in _get_calib_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15199                           ;get_calib_data@dev stored from wreg
 15200  1F70  00E3               	movwf	get_calib_data@dev
 15201                           
 15202                           ;BME280_driver/bme280.c: 1313:     uint8_t calib_data[26] = { 0 };
 15203  1F71  3047               	movlw	low get_calib_data@calib_data
 15204  1F72  0086               	movwf	6
 15205  1F73  3000               	movlw	high get_calib_data@calib_data
 15206  1F74  0087               	movwf	7
 15207  1F75  301A               	movlw	26
 15208  1F76  00C4               	movwf	??_get_calib_data
 15209  1F77  3000               	movlw	0
 15210  1F78                     u4550:	
 15211  1F78  001E               	movwi fsr1++
 15212  1F79  0BC4               	decfsz	??_get_calib_data,f
 15213  1F7A  2F78               	goto	u4550
 15214                           
 15215                           ;BME280_driver/bme280.c: 1316:     rslt = bme280_get_regs(reg_addr, calib_data, 26, dev)
      +                          ;
 15216  1F7B  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
 15217  1F7C  00C4               	movwf	??_get_calib_data
 15218  1F7D  0844               	movf	??_get_calib_data,w
 15219  1F7E  00BB               	movwf	bme280_get_regs@reg_data
 15220  1F7F  301A               	movlw	26
 15221  1F80  00BC               	movwf	bme280_get_regs@len
 15222  1F81  3000               	movlw	0
 15223  1F82  00BD               	movwf	bme280_get_regs@len+1
 15224  1F83  0863               	movf	get_calib_data@dev,w
 15225  1F84  00C5               	movwf	??_get_calib_data+1
 15226  1F85  0845               	movf	??_get_calib_data+1,w
 15227  1F86  00BE               	movwf	bme280_get_regs@dev
 15228  1F87  3088               	movlw	136
 15229  1F88  319E  2662  319F   	fcall	_bme280_get_regs
 15230  1F8B  00C6               	movwf	??_get_calib_data+2
 15231  1F8C  0846               	movf	??_get_calib_data+2,w
 15232  1F8D  00E2               	movwf	get_calib_data@rslt
 15233                           
 15234                           ;BME280_driver/bme280.c: 1317:     if (rslt == 0)
 15235  1F8E  0862               	movf	get_calib_data@rslt,w
 15236  1F8F  1D03               	btfss	3,2
 15237  1F90  2FB6               	goto	l4214
 15238                           
 15239                           ;BME280_driver/bme280.c: 1318:     {;BME280_driver/bme280.c: 1322:         parse_temp_pr
      +                          ess_calib_data(calib_data, dev);
 15240  1F91  0863               	movf	get_calib_data@dev,w
 15241  1F92  00C4               	movwf	??_get_calib_data
 15242  1F93  0844               	movf	??_get_calib_data,w
 15243  1F94  00F0               	movwf	parse_temp_press_calib_data@dev
 15244  1F95  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
 15245  1F96  3188  20AB  319F   	fcall	_parse_temp_press_calib_data
 15246                           
 15247                           ;BME280_driver/bme280.c: 1326:         rslt = bme280_get_regs(reg_addr, calib_data, 7, d
      +                          ev);
 15248  1F99  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
 15249  1F9A  00C4               	movwf	??_get_calib_data
 15250  1F9B  0844               	movf	??_get_calib_data,w
 15251  1F9C  00BB               	movwf	bme280_get_regs@reg_data
 15252  1F9D  3007               	movlw	7
 15253  1F9E  00BC               	movwf	bme280_get_regs@len
 15254  1F9F  3000               	movlw	0
 15255  1FA0  00BD               	movwf	bme280_get_regs@len+1
 15256  1FA1  0863               	movf	get_calib_data@dev,w
 15257  1FA2  00C5               	movwf	??_get_calib_data+1
 15258  1FA3  0845               	movf	??_get_calib_data+1,w
 15259  1FA4  00BE               	movwf	bme280_get_regs@dev
 15260  1FA5  30E1               	movlw	225
 15261  1FA6  319E  2662  319F   	fcall	_bme280_get_regs
 15262  1FA9  00C6               	movwf	??_get_calib_data+2
 15263  1FAA  0846               	movf	??_get_calib_data+2,w
 15264  1FAB  00E2               	movwf	get_calib_data@rslt
 15265                           
 15266                           ;BME280_driver/bme280.c: 1327:         if (rslt == 0)
 15267  1FAC  0862               	movf	get_calib_data@rslt,w
 15268  1FAD  1D03               	btfss	3,2
 15269  1FAE  2FB6               	goto	l4214
 15270                           
 15271                           ;BME280_driver/bme280.c: 1328:         {;BME280_driver/bme280.c: 1332:             parse
      +                          _humidity_calib_data(calib_data, dev);
 15272  1FAF  0863               	movf	get_calib_data@dev,w
 15273  1FB0  00C4               	movwf	??_get_calib_data
 15274  1FB1  0844               	movf	??_get_calib_data,w
 15275  1FB2  00F0               	movwf	parse_humidity_calib_data@dev
 15276  1FB3  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
 15277  1FB4  3197  2767         	fcall	_parse_humidity_calib_data
 15278  1FB6                     l4214:	
 15279                           
 15280                           ;BME280_driver/bme280.c: 1336:     return rslt;
 15281  1FB6  0862               	movf	get_calib_data@rslt,w
 15282  1FB7  0008               	return
 15283  1FB8                     __end_of_get_calib_data:	
 15284                           
 15285                           	psect	text52
 15286  08AB                     __ptext52:	
 15287 ;; *************** function _parse_temp_press_calib_data *****************
 15288 ;; Defined at:
 15289 ;;		line 1358 in file "BME280_driver/bme280.c"
 15290 ;; Parameters:    Size  Location     Type
 15291 ;;  reg_data        1    wreg     PTR const unsigned char 
 15292 ;;		 -> get_calib_data@calib_data(26), 
 15293 ;;  dev             1    0[COMMON] PTR struct bme280_dev
 15294 ;;		 -> EnvSensor(51), 
 15295 ;; Auto vars:     Size  Location     Type
 15296 ;;  reg_data        1    3[COMMON] PTR const unsigned char 
 15297 ;;		 -> get_calib_data@calib_data(26), 
 15298 ;;  calib_data      1    2[COMMON] PTR struct bme280_calib_
 15299 ;;		 -> EnvSensor.calib_data(37), EnvSensor(51), 
 15300 ;; Return value:  Size  Location     Type
 15301 ;;                  1    wreg      void 
 15302 ;; Registers used:
 15303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15304 ;; Tracked objects:
 15305 ;;		On entry : 1F/0
 15306 ;;		On exit  : 1F/0
 15307 ;;		Unchanged: 1F/0
 15308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15309 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15310 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15311 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15312 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;Total ram usage:        4 bytes
 15314 ;; Hardware stack levels used:    1
 15315 ;; Hardware stack levels required when called:    3
 15316 ;; This function calls:
 15317 ;;		Nothing
 15318 ;; This function is called by:
 15319 ;;		_get_calib_data
 15320 ;; This function uses a non-reentrant model
 15321 ;;
 15322                           
 15323                           
 15324                           ;psect for function _parse_temp_press_calib_data
 15325  08AB                     _parse_temp_press_calib_data:	
 15326                           
 15327                           ;incstack = 0
 15328                           ; Regs used in _parse_temp_press_calib_data: [wreg-fsr1h+status,2+status,0]
 15329                           ;parse_temp_press_calib_data@reg_data stored from wreg
 15330  08AB  00F3               	movwf	parse_temp_press_calib_data@reg_data
 15331                           
 15332                           ;BME280_driver/bme280.c: 1358: static void parse_temp_press_calib_data(const uint8_t *re
      +                          g_data, struct bme280_dev *dev);BME280_driver/bme280.c: 1359: {;BME280_driver/bme280.c: 
      +                          1360:     struct bme280_calib_data *calib_data = &dev->calib_data;
 15333  08AC  0870               	movf	parse_temp_press_calib_data@dev,w
 15334  08AD  3E09               	addlw	9
 15335  08AE  00F1               	movwf	??_parse_temp_press_calib_data
 15336  08AF  0871               	movf	??_parse_temp_press_calib_data,w
 15337  08B0  00F2               	movwf	parse_temp_press_calib_data@calib_data
 15338                           
 15339                           ;BME280_driver/bme280.c: 1362:     calib_data->dig_T1 = (((uint16_t)reg_data[1] << 8) | 
      +                          (uint16_t)reg_data[0]);
 15340  08B1  0A73               	incf	parse_temp_press_calib_data@reg_data,w
 15341  08B2  0084               	movwf	4
 15342  08B3  0185               	clrf	5
 15343  08B4  0800               	movf	0,w
 15344  08B5  00F1               	movwf	??_parse_temp_press_calib_data
 15345  08B6  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15346  08B7  0084               	movwf	4
 15347  08B8  0185               	clrf	5
 15348  08B9  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15349  08BA  0086               	movwf	6
 15350  08BB  3001               	movlw	1	; select bank2/3
 15351  08BC  0087               	movwf	7
 15352  08BD  0800               	movf	0,w
 15353  08BE  3FC0               	movwi [0]fsr1
 15354  08BF  0871               	movf	??_parse_temp_press_calib_data,w
 15355  08C0  3FC1               	movwi [1]fsr1
 15356                           
 15357                           ;BME280_driver/bme280.c: 1363:     calib_data->dig_T2 = (int16_t)(((uint16_t)reg_data[3]
      +                           << 8) | (uint16_t)reg_data[2]);
 15358  08C1  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15359  08C2  3E03               	addlw	3
 15360  08C3  0084               	movwf	4
 15361  08C4  0185               	clrf	5
 15362  08C5  0800               	movf	0,w
 15363  08C6  00F1               	movwf	??_parse_temp_press_calib_data
 15364  08C7  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15365  08C8  3E02               	addlw	2
 15366  08C9  0084               	movwf	4
 15367  08CA  0185               	clrf	5
 15368  08CB  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15369  08CC  3E02               	addlw	2
 15370  08CD  0086               	movwf	6
 15371  08CE  3001               	movlw	1	; select bank2/3
 15372  08CF  0087               	movwf	7
 15373  08D0  0800               	movf	0,w
 15374  08D1  3FC0               	movwi [0]fsr1
 15375  08D2  0871               	movf	??_parse_temp_press_calib_data,w
 15376  08D3  3FC1               	movwi [1]fsr1
 15377                           
 15378                           ;BME280_driver/bme280.c: 1364:     calib_data->dig_T3 = (int16_t)(((uint16_t)reg_data[5]
      +                           << 8) | (uint16_t)reg_data[4]);
 15379  08D4  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15380  08D5  3E05               	addlw	5
 15381  08D6  0084               	movwf	4
 15382  08D7  0185               	clrf	5
 15383  08D8  0800               	movf	0,w
 15384  08D9  00F1               	movwf	??_parse_temp_press_calib_data
 15385  08DA  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15386  08DB  3E04               	addlw	4
 15387  08DC  0084               	movwf	4
 15388  08DD  0185               	clrf	5
 15389  08DE  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15390  08DF  3E04               	addlw	4
 15391  08E0  0086               	movwf	6
 15392  08E1  3001               	movlw	1	; select bank2/3
 15393  08E2  0087               	movwf	7
 15394  08E3  0800               	movf	0,w
 15395  08E4  3FC0               	movwi [0]fsr1
 15396  08E5  0871               	movf	??_parse_temp_press_calib_data,w
 15397  08E6  3FC1               	movwi [1]fsr1
 15398                           
 15399                           ;BME280_driver/bme280.c: 1365:     calib_data->dig_P1 = (((uint16_t)reg_data[7] << 8) | 
      +                          (uint16_t)reg_data[6]);
 15400  08E7  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15401  08E8  3E07               	addlw	7
 15402  08E9  0084               	movwf	4
 15403  08EA  0185               	clrf	5
 15404  08EB  0800               	movf	0,w
 15405  08EC  00F1               	movwf	??_parse_temp_press_calib_data
 15406  08ED  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15407  08EE  3E06               	addlw	6
 15408  08EF  0084               	movwf	4
 15409  08F0  0185               	clrf	5
 15410  08F1  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15411  08F2  3E06               	addlw	6
 15412  08F3  0086               	movwf	6
 15413  08F4  3001               	movlw	1	; select bank2/3
 15414  08F5  0087               	movwf	7
 15415  08F6  0800               	movf	0,w
 15416  08F7  3FC0               	movwi [0]fsr1
 15417  08F8  0871               	movf	??_parse_temp_press_calib_data,w
 15418  08F9  3FC1               	movwi [1]fsr1
 15419                           
 15420                           ;BME280_driver/bme280.c: 1366:     calib_data->dig_P2 = (int16_t)(((uint16_t)reg_data[9]
      +                           << 8) | (uint16_t)reg_data[8]);
 15421  08FA  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15422  08FB  3E09               	addlw	9
 15423  08FC  0084               	movwf	4
 15424  08FD  0185               	clrf	5
 15425  08FE  0800               	movf	0,w
 15426  08FF  00F1               	movwf	??_parse_temp_press_calib_data
 15427  0900  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15428  0901  3E08               	addlw	8
 15429  0902  0084               	movwf	4
 15430  0903  0185               	clrf	5
 15431  0904  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15432  0905  3E08               	addlw	8
 15433  0906  0086               	movwf	6
 15434  0907  3001               	movlw	1	; select bank2/3
 15435  0908  0087               	movwf	7
 15436  0909  0800               	movf	0,w
 15437  090A  3FC0               	movwi [0]fsr1
 15438  090B  0871               	movf	??_parse_temp_press_calib_data,w
 15439  090C  3FC1               	movwi [1]fsr1
 15440                           
 15441                           ;BME280_driver/bme280.c: 1367:     calib_data->dig_P3 = (int16_t)(((uint16_t)reg_data[11
      +                          ] << 8) | (uint16_t)reg_data[10]);
 15442  090D  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15443  090E  3E0B               	addlw	11
 15444  090F  0084               	movwf	4
 15445  0910  0185               	clrf	5
 15446  0911  0800               	movf	0,w
 15447  0912  00F1               	movwf	??_parse_temp_press_calib_data
 15448  0913  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15449  0914  3E0A               	addlw	10
 15450  0915  0084               	movwf	4
 15451  0916  0185               	clrf	5
 15452  0917  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15453  0918  3E0A               	addlw	10
 15454  0919  0086               	movwf	6
 15455  091A  3001               	movlw	1	; select bank2/3
 15456  091B  0087               	movwf	7
 15457  091C  0800               	movf	0,w
 15458  091D  3FC0               	movwi [0]fsr1
 15459  091E  0871               	movf	??_parse_temp_press_calib_data,w
 15460  091F  3FC1               	movwi [1]fsr1
 15461                           
 15462                           ;BME280_driver/bme280.c: 1368:     calib_data->dig_P4 = (int16_t)(((uint16_t)reg_data[13
      +                          ] << 8) | (uint16_t)reg_data[12]);
 15463  0920  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15464  0921  3E0D               	addlw	13
 15465  0922  0084               	movwf	4
 15466  0923  0185               	clrf	5
 15467  0924  0800               	movf	0,w
 15468  0925  00F1               	movwf	??_parse_temp_press_calib_data
 15469  0926  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15470  0927  3E0C               	addlw	12
 15471  0928  0084               	movwf	4
 15472  0929  0185               	clrf	5
 15473  092A  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15474  092B  3E0C               	addlw	12
 15475  092C  0086               	movwf	6
 15476  092D  3001               	movlw	1	; select bank2/3
 15477  092E  0087               	movwf	7
 15478  092F  0800               	movf	0,w
 15479  0930  3FC0               	movwi [0]fsr1
 15480  0931  0871               	movf	??_parse_temp_press_calib_data,w
 15481  0932  3FC1               	movwi [1]fsr1
 15482                           
 15483                           ;BME280_driver/bme280.c: 1369:     calib_data->dig_P5 = (int16_t)(((uint16_t)reg_data[15
      +                          ] << 8) | (uint16_t)reg_data[14]);
 15484  0933  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15485  0934  3E0F               	addlw	15
 15486  0935  0084               	movwf	4
 15487  0936  0185               	clrf	5
 15488  0937  0800               	movf	0,w
 15489  0938  00F1               	movwf	??_parse_temp_press_calib_data
 15490  0939  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15491  093A  3E0E               	addlw	14
 15492  093B  0084               	movwf	4
 15493  093C  0185               	clrf	5
 15494  093D  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15495  093E  3E0E               	addlw	14
 15496  093F  0086               	movwf	6
 15497  0940  3001               	movlw	1	; select bank2/3
 15498  0941  0087               	movwf	7
 15499  0942  0800               	movf	0,w
 15500  0943  3FC0               	movwi [0]fsr1
 15501  0944  0871               	movf	??_parse_temp_press_calib_data,w
 15502  0945  3FC1               	movwi [1]fsr1
 15503                           
 15504                           ;BME280_driver/bme280.c: 1370:     calib_data->dig_P6 = (int16_t)(((uint16_t)reg_data[17
      +                          ] << 8) | (uint16_t)reg_data[16]);
 15505  0946  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15506  0947  3E11               	addlw	17
 15507  0948  0084               	movwf	4
 15508  0949  0185               	clrf	5
 15509  094A  0800               	movf	0,w
 15510  094B  00F1               	movwf	??_parse_temp_press_calib_data
 15511  094C  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15512  094D  3E10               	addlw	16
 15513  094E  0084               	movwf	4
 15514  094F  0185               	clrf	5
 15515  0950  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15516  0951  3E10               	addlw	16
 15517  0952  0086               	movwf	6
 15518  0953  3001               	movlw	1	; select bank2/3
 15519  0954  0087               	movwf	7
 15520  0955  0800               	movf	0,w
 15521  0956  3FC0               	movwi [0]fsr1
 15522  0957  0871               	movf	??_parse_temp_press_calib_data,w
 15523  0958  3FC1               	movwi [1]fsr1
 15524                           
 15525                           ;BME280_driver/bme280.c: 1371:     calib_data->dig_P7 = (int16_t)(((uint16_t)reg_data[19
      +                          ] << 8) | (uint16_t)reg_data[18]);
 15526  0959  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15527  095A  3E13               	addlw	19
 15528  095B  0084               	movwf	4
 15529  095C  0185               	clrf	5
 15530  095D  0800               	movf	0,w
 15531  095E  00F1               	movwf	??_parse_temp_press_calib_data
 15532  095F  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15533  0960  3E12               	addlw	18
 15534  0961  0084               	movwf	4
 15535  0962  0185               	clrf	5
 15536  0963  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15537  0964  3E12               	addlw	18
 15538  0965  0086               	movwf	6
 15539  0966  3001               	movlw	1	; select bank2/3
 15540  0967  0087               	movwf	7
 15541  0968  0800               	movf	0,w
 15542  0969  3FC0               	movwi [0]fsr1
 15543  096A  0871               	movf	??_parse_temp_press_calib_data,w
 15544  096B  3FC1               	movwi [1]fsr1
 15545                           
 15546                           ;BME280_driver/bme280.c: 1372:     calib_data->dig_P8 = (int16_t)(((uint16_t)reg_data[21
      +                          ] << 8) | (uint16_t)reg_data[20]);
 15547  096C  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15548  096D  3E15               	addlw	21
 15549  096E  0084               	movwf	4
 15550  096F  0185               	clrf	5
 15551  0970  0800               	movf	0,w
 15552  0971  00F1               	movwf	??_parse_temp_press_calib_data
 15553  0972  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15554  0973  3E14               	addlw	20
 15555  0974  0084               	movwf	4
 15556  0975  0185               	clrf	5
 15557  0976  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15558  0977  3E14               	addlw	20
 15559  0978  0086               	movwf	6
 15560  0979  3001               	movlw	1	; select bank2/3
 15561  097A  0087               	movwf	7
 15562  097B  0800               	movf	0,w
 15563  097C  3FC0               	movwi [0]fsr1
 15564  097D  0871               	movf	??_parse_temp_press_calib_data,w
 15565  097E  3FC1               	movwi [1]fsr1
 15566                           
 15567                           ;BME280_driver/bme280.c: 1373:     calib_data->dig_P9 = (int16_t)(((uint16_t)reg_data[23
      +                          ] << 8) | (uint16_t)reg_data[22]);
 15568  097F  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15569  0980  3E17               	addlw	23
 15570  0981  0084               	movwf	4
 15571  0982  0185               	clrf	5
 15572  0983  0800               	movf	0,w
 15573  0984  00F1               	movwf	??_parse_temp_press_calib_data
 15574  0985  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15575  0986  3E16               	addlw	22
 15576  0987  0084               	movwf	4
 15577  0988  0185               	clrf	5
 15578  0989  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15579  098A  3E16               	addlw	22
 15580  098B  0086               	movwf	6
 15581  098C  3001               	movlw	1	; select bank2/3
 15582  098D  0087               	movwf	7
 15583  098E  0800               	movf	0,w
 15584  098F  3FC0               	movwi [0]fsr1
 15585  0990  0871               	movf	??_parse_temp_press_calib_data,w
 15586  0991  3FC1               	movwi [1]fsr1
 15587                           
 15588                           ;BME280_driver/bme280.c: 1374:     calib_data->dig_H1 = reg_data[25];
 15589  0992  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15590  0993  3E19               	addlw	25
 15591  0994  0086               	movwf	6
 15592  0995  0187               	clrf	7
 15593  0996  0801               	movf	1,w
 15594  0997  00F1               	movwf	??_parse_temp_press_calib_data
 15595  0998  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15596  0999  3E18               	addlw	24
 15597  099A  0086               	movwf	6
 15598  099B  3001               	movlw	1	; select bank2/3
 15599  099C  0087               	movwf	7
 15600  099D  0871               	movf	??_parse_temp_press_calib_data,w
 15601  099E  0081               	movwf	1
 15602  099F  0008               	return
 15603  09A0                     __end_of_parse_temp_press_calib_data:	
 15604                           
 15605                           	psect	text53
 15606  1767                     __ptext53:	
 15607 ;; *************** function _parse_humidity_calib_data *****************
 15608 ;; Defined at:
 15609 ;;		line 1381 in file "BME280_driver/bme280.c"
 15610 ;; Parameters:    Size  Location     Type
 15611 ;;  reg_data        1    wreg     PTR const unsigned char 
 15612 ;;		 -> get_calib_data@calib_data(26), 
 15613 ;;  dev             1    0[COMMON] PTR struct bme280_dev
 15614 ;;		 -> EnvSensor(51), 
 15615 ;; Auto vars:     Size  Location     Type
 15616 ;;  reg_data        1   13[COMMON] PTR const unsigned char 
 15617 ;;		 -> get_calib_data@calib_data(26), 
 15618 ;;  dig_H5_msb      2   10[COMMON] short 
 15619 ;;  dig_H5_lsb      2    8[COMMON] short 
 15620 ;;  dig_H4_msb      2    6[COMMON] short 
 15621 ;;  dig_H4_lsb      2    4[COMMON] short 
 15622 ;;  calib_data      1   12[COMMON] PTR struct bme280_calib_
 15623 ;;		 -> EnvSensor.calib_data(37), EnvSensor(51), 
 15624 ;; Return value:  Size  Location     Type
 15625 ;;                  1    wreg      void 
 15626 ;; Registers used:
 15627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15628 ;; Tracked objects:
 15629 ;;		On entry : 1F/0
 15630 ;;		On exit  : 1F/0
 15631 ;;		Unchanged: 1F/0
 15632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15633 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15634 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15635 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15636 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15637 ;;Total ram usage:       14 bytes
 15638 ;; Hardware stack levels used:    1
 15639 ;; Hardware stack levels required when called:    3
 15640 ;; This function calls:
 15641 ;;		Nothing
 15642 ;; This function is called by:
 15643 ;;		_get_calib_data
 15644 ;; This function uses a non-reentrant model
 15645 ;;
 15646                           
 15647                           
 15648                           ;psect for function _parse_humidity_calib_data
 15649  1767                     _parse_humidity_calib_data:	
 15650                           
 15651                           ;incstack = 0
 15652                           ; Regs used in _parse_humidity_calib_data: [wreg-fsr1h+status,2+status,0]
 15653                           ;parse_humidity_calib_data@reg_data stored from wreg
 15654  1767  00FD               	movwf	parse_humidity_calib_data@reg_data
 15655                           
 15656                           ;BME280_driver/bme280.c: 1381: static void parse_humidity_calib_data(const uint8_t *reg_
      +                          data, struct bme280_dev *dev);BME280_driver/bme280.c: 1382: {;BME280_driver/bme280.c: 13
      +                          83:     struct bme280_calib_data *calib_data = &dev->calib_data;
 15657  1768  0870               	movf	parse_humidity_calib_data@dev,w
 15658  1769  3E09               	addlw	9
 15659  176A  00F1               	movwf	??_parse_humidity_calib_data
 15660  176B  0871               	movf	??_parse_humidity_calib_data,w
 15661  176C  00FC               	movwf	parse_humidity_calib_data@calib_data
 15662                           
 15663                           ;BME280_driver/bme280.c: 1384:     int16_t dig_H4_lsb;;BME280_driver/bme280.c: 1385:    
      +                           int16_t dig_H4_msb;;BME280_driver/bme280.c: 1386:     int16_t dig_H5_lsb;;BME280_driver
      +                          /bme280.c: 1387:     int16_t dig_H5_msb;;BME280_driver/bme280.c: 1389:     calib_data->d
      +                          ig_H2 = (int16_t)(((uint16_t)reg_data[1] << 8) | (uint16_t)reg_data[0]);
 15664  176D  0A7D               	incf	parse_humidity_calib_data@reg_data,w
 15665  176E  0084               	movwf	4
 15666  176F  0185               	clrf	5
 15667  1770  0800               	movf	0,w
 15668  1771  00F1               	movwf	??_parse_humidity_calib_data
 15669  1772  087D               	movf	parse_humidity_calib_data@reg_data,w
 15670  1773  0084               	movwf	4
 15671  1774  0185               	clrf	5
 15672  1775  087C               	movf	parse_humidity_calib_data@calib_data,w
 15673  1776  3E19               	addlw	25
 15674  1777  0086               	movwf	6
 15675  1778  3001               	movlw	1	; select bank2/3
 15676  1779  0087               	movwf	7
 15677  177A  0800               	movf	0,w
 15678  177B  3FC0               	movwi [0]fsr1
 15679  177C  0871               	movf	??_parse_humidity_calib_data,w
 15680  177D  3FC1               	movwi [1]fsr1
 15681                           
 15682                           ;BME280_driver/bme280.c: 1390:     calib_data->dig_H3 = reg_data[2];
 15683  177E  087D               	movf	parse_humidity_calib_data@reg_data,w
 15684  177F  3E02               	addlw	2
 15685  1780  0086               	movwf	6
 15686  1781  0187               	clrf	7
 15687  1782  0801               	movf	1,w
 15688  1783  00F1               	movwf	??_parse_humidity_calib_data
 15689  1784  087C               	movf	parse_humidity_calib_data@calib_data,w
 15690  1785  3E1B               	addlw	27
 15691  1786  0086               	movwf	6
 15692  1787  3001               	movlw	1	; select bank2/3
 15693  1788  0087               	movwf	7
 15694  1789  0871               	movf	??_parse_humidity_calib_data,w
 15695  178A  0081               	movwf	1
 15696                           
 15697                           ;BME280_driver/bme280.c: 1391:     dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 15698  178B  087D               	movf	parse_humidity_calib_data@reg_data,w
 15699  178C  3E03               	addlw	3
 15700  178D  0086               	movwf	6
 15701  178E  0187               	clrf	7
 15702  178F  0801               	movf	1,w
 15703  1790  00F1               	movwf	??_parse_humidity_calib_data
 15704  1791  01F2               	clrf	??_parse_humidity_calib_data+1
 15705  1792  1BF1               	btfsc	??_parse_humidity_calib_data,7
 15706  1793  03F2               	decf	??_parse_humidity_calib_data+1,f
 15707  1794  0EF1               	swapf	??_parse_humidity_calib_data,f
 15708  1795  0EF2               	swapf	??_parse_humidity_calib_data+1,f
 15709  1796  30F0               	movlw	240
 15710  1797  05F2               	andwf	??_parse_humidity_calib_data+1,f
 15711  1798  0871               	movf	??_parse_humidity_calib_data,w
 15712  1799  390F               	andlw	15
 15713  179A  04F2               	iorwf	??_parse_humidity_calib_data+1,f
 15714  179B  30F0               	movlw	240
 15715  179C  05F1               	andwf	??_parse_humidity_calib_data,f
 15716  179D  0871               	movf	??_parse_humidity_calib_data,w
 15717  179E  00F6               	movwf	parse_humidity_calib_data@dig_H4_msb
 15718  179F  0872               	movf	??_parse_humidity_calib_data+1,w
 15719  17A0  00F7               	movwf	parse_humidity_calib_data@dig_H4_msb+1
 15720                           
 15721                           ;BME280_driver/bme280.c: 1392:     dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 15722  17A1  087D               	movf	parse_humidity_calib_data@reg_data,w
 15723  17A2  3E04               	addlw	4
 15724  17A3  0086               	movwf	6
 15725  17A4  0187               	clrf	7
 15726  17A5  0801               	movf	1,w
 15727  17A6  390F               	andlw	15
 15728  17A7  00F1               	movwf	??_parse_humidity_calib_data
 15729  17A8  01F2               	clrf	??_parse_humidity_calib_data+1
 15730  17A9  0871               	movf	??_parse_humidity_calib_data,w
 15731  17AA  00F4               	movwf	parse_humidity_calib_data@dig_H4_lsb
 15732  17AB  0872               	movf	??_parse_humidity_calib_data+1,w
 15733  17AC  00F5               	movwf	parse_humidity_calib_data@dig_H4_lsb+1
 15734                           
 15735                           ;BME280_driver/bme280.c: 1393:     calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 15736  17AD  0874               	movf	parse_humidity_calib_data@dig_H4_lsb,w
 15737  17AE  0476               	iorwf	parse_humidity_calib_data@dig_H4_msb,w
 15738  17AF  00F1               	movwf	??_parse_humidity_calib_data
 15739  17B0  0875               	movf	parse_humidity_calib_data@dig_H4_lsb+1,w
 15740  17B1  0477               	iorwf	parse_humidity_calib_data@dig_H4_msb+1,w
 15741  17B2  00F2               	movwf	??_parse_humidity_calib_data+1
 15742  17B3  087C               	movf	parse_humidity_calib_data@calib_data,w
 15743  17B4  3E1C               	addlw	28
 15744  17B5  0086               	movwf	6
 15745  17B6  3001               	movlw	1	; select bank2/3
 15746  17B7  0087               	movwf	7
 15747  17B8  0871               	movf	??_parse_humidity_calib_data,w
 15748  17B9  3FC0               	movwi [0]fsr1
 15749  17BA  0872               	movf	??_parse_humidity_calib_data+1,w
 15750  17BB  3FC1               	movwi [1]fsr1
 15751                           
 15752                           ;BME280_driver/bme280.c: 1394:     dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 15753  17BC  087D               	movf	parse_humidity_calib_data@reg_data,w
 15754  17BD  3E05               	addlw	5
 15755  17BE  0086               	movwf	6
 15756  17BF  0187               	clrf	7
 15757  17C0  0801               	movf	1,w
 15758  17C1  00F1               	movwf	??_parse_humidity_calib_data
 15759  17C2  01F2               	clrf	??_parse_humidity_calib_data+1
 15760  17C3  1BF1               	btfsc	??_parse_humidity_calib_data,7
 15761  17C4  03F2               	decf	??_parse_humidity_calib_data+1,f
 15762  17C5  0EF1               	swapf	??_parse_humidity_calib_data,f
 15763  17C6  0EF2               	swapf	??_parse_humidity_calib_data+1,f
 15764  17C7  30F0               	movlw	240
 15765  17C8  05F2               	andwf	??_parse_humidity_calib_data+1,f
 15766  17C9  0871               	movf	??_parse_humidity_calib_data,w
 15767  17CA  390F               	andlw	15
 15768  17CB  04F2               	iorwf	??_parse_humidity_calib_data+1,f
 15769  17CC  30F0               	movlw	240
 15770  17CD  05F1               	andwf	??_parse_humidity_calib_data,f
 15771  17CE  0871               	movf	??_parse_humidity_calib_data,w
 15772  17CF  00FA               	movwf	parse_humidity_calib_data@dig_H5_msb
 15773  17D0  0872               	movf	??_parse_humidity_calib_data+1,w
 15774  17D1  00FB               	movwf	parse_humidity_calib_data@dig_H5_msb+1
 15775                           
 15776                           ;BME280_driver/bme280.c: 1395:     dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 15777  17D2  087D               	movf	parse_humidity_calib_data@reg_data,w
 15778  17D3  3E04               	addlw	4
 15779  17D4  0086               	movwf	6
 15780  17D5  0187               	clrf	7
 15781  17D6  0801               	movf	1,w
 15782  17D7  00F1               	movwf	??_parse_humidity_calib_data
 15783  17D8  3004               	movlw	4
 15784  17D9                     u4545:	
 15785  17D9  36F1               	lsrf	??_parse_humidity_calib_data,f
 15786  17DA  0B89               	decfsz	9,f
 15787  17DB  2FD9               	goto	u4545
 15788  17DC  0871               	movf	??_parse_humidity_calib_data,w
 15789  17DD  00F2               	movwf	??_parse_humidity_calib_data+1
 15790  17DE  01F3               	clrf	??_parse_humidity_calib_data+2
 15791  17DF  0872               	movf	??_parse_humidity_calib_data+1,w
 15792  17E0  00F8               	movwf	parse_humidity_calib_data@dig_H5_lsb
 15793  17E1  0873               	movf	??_parse_humidity_calib_data+2,w
 15794  17E2  00F9               	movwf	parse_humidity_calib_data@dig_H5_lsb+1
 15795                           
 15796                           ;BME280_driver/bme280.c: 1396:     calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 15797  17E3  0878               	movf	parse_humidity_calib_data@dig_H5_lsb,w
 15798  17E4  047A               	iorwf	parse_humidity_calib_data@dig_H5_msb,w
 15799  17E5  00F1               	movwf	??_parse_humidity_calib_data
 15800  17E6  0879               	movf	parse_humidity_calib_data@dig_H5_lsb+1,w
 15801  17E7  047B               	iorwf	parse_humidity_calib_data@dig_H5_msb+1,w
 15802  17E8  00F2               	movwf	??_parse_humidity_calib_data+1
 15803  17E9  087C               	movf	parse_humidity_calib_data@calib_data,w
 15804  17EA  3E1E               	addlw	30
 15805  17EB  0086               	movwf	6
 15806  17EC  3001               	movlw	1	; select bank2/3
 15807  17ED  0087               	movwf	7
 15808  17EE  0871               	movf	??_parse_humidity_calib_data,w
 15809  17EF  3FC0               	movwi [0]fsr1
 15810  17F0  0872               	movf	??_parse_humidity_calib_data+1,w
 15811  17F1  3FC1               	movwi [1]fsr1
 15812                           
 15813                           ;BME280_driver/bme280.c: 1397:     calib_data->dig_H6 = (int8_t)reg_data[6];
 15814  17F2  087D               	movf	parse_humidity_calib_data@reg_data,w
 15815  17F3  3E06               	addlw	6
 15816  17F4  0086               	movwf	6
 15817  17F5  0187               	clrf	7
 15818  17F6  0801               	movf	1,w
 15819  17F7  00F1               	movwf	??_parse_humidity_calib_data
 15820  17F8  087C               	movf	parse_humidity_calib_data@calib_data,w
 15821  17F9  3E20               	addlw	32
 15822  17FA  0086               	movwf	6
 15823  17FB  3001               	movlw	1	; select bank2/3
 15824  17FC  0087               	movwf	7
 15825  17FD  0871               	movf	??_parse_humidity_calib_data,w
 15826  17FE  0081               	movwf	1
 15827  17FF  0008               	return
 15828  1800                     __end_of_parse_humidity_calib_data:	
 15829                           
 15830                           	psect	text54
 15831  1E62                     __ptext54:	
 15832 ;; *************** function _bme280_get_regs *****************
 15833 ;; Defined at:
 15834 ;;		line 409 in file "BME280_driver/bme280.c"
 15835 ;; Parameters:    Size  Location     Type
 15836 ;;  reg_addr        1    wreg     unsigned char 
 15837 ;;  reg_data        1   27[BANK0 ] PTR unsigned char 
 15838 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
 15839 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
 15840 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
 15841 ;;  len             2   28[BANK0 ] unsigned short 
 15842 ;;  dev             1   30[BANK0 ] PTR const struct bme280_
 15843 ;;		 -> EnvSensor(51), 
 15844 ;; Auto vars:     Size  Location     Type
 15845 ;;  reg_addr        1   34[BANK0 ] unsigned char 
 15846 ;;  rslt            1   35[BANK0 ] char 
 15847 ;; Return value:  Size  Location     Type
 15848 ;;                  1    wreg      char 
 15849 ;; Registers used:
 15850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15851 ;; Tracked objects:
 15852 ;;		On entry : 1F/0
 15853 ;;		On exit  : 1F/0
 15854 ;;		Unchanged: 0/0
 15855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15856 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15857 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15858 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15859 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15860 ;;Total ram usage:        9 bytes
 15861 ;; Hardware stack levels used:    1
 15862 ;; Hardware stack levels required when called:    9
 15863 ;; This function calls:
 15864 ;;		_ReadEnvSensor
 15865 ;;		_null_ptr_check
 15866 ;; This function is called by:
 15867 ;;		_bme280_init
 15868 ;;		_bme280_get_sensor_mode
 15869 ;;		_bme280_get_sensor_data
 15870 ;;		_set_osr_humidity_settings
 15871 ;;		_set_osr_press_temp_settings
 15872 ;;		_set_filter_standby_settings
 15873 ;;		_write_power_mode
 15874 ;;		_put_device_to_sleep
 15875 ;;		_get_calib_data
 15876 ;; This function uses a non-reentrant model
 15877 ;;
 15878                           
 15879                           
 15880                           ;psect for function _bme280_get_regs
 15881  1E62                     _bme280_get_regs:	
 15882                           
 15883                           ;incstack = 0
 15884                           ; Regs used in _bme280_get_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15885                           ;bme280_get_regs@reg_addr stored from wreg
 15886  1E62  00C2               	movwf	bme280_get_regs@reg_addr
 15887                           
 15888                           ;BME280_driver/bme280.c: 409: int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data
      +                          , uint16_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 410: {;BME280_driv
      +                          er/bme280.c: 411:     int8_t rslt;;BME280_driver/bme280.c: 414:     rslt = null_ptr_chec
      +                          k(dev);
 15889  1E63  083E               	movf	bme280_get_regs@dev,w
 15890  1E64  319A  22F2  319E   	fcall	_null_ptr_check
 15891  1E67  0020               	movlb	0	; select bank0
 15892  1E68  00BF               	movwf	??_bme280_get_regs
 15893  1E69  083F               	movf	??_bme280_get_regs,w
 15894  1E6A  00C3               	movwf	bme280_get_regs@rslt
 15895                           
 15896                           ;BME280_driver/bme280.c: 417:     if (rslt == 0)
 15897  1E6B  0843               	movf	bme280_get_regs@rslt,w
 15898  1E6C  1D03               	btfss	3,2
 15899  1E6D  2EA2               	goto	l65
 15900                           
 15901                           ;BME280_driver/bme280.c: 418:     {;BME280_driver/bme280.c: 420:         if (dev->intf !
      +                          = BME280_I2C_INTF)
 15902  1E6E  083E               	movf	bme280_get_regs@dev,w
 15903  1E6F  3E02               	addlw	2
 15904  1E70  0086               	movwf	6
 15905  1E71  3001               	movlw	1	; select bank2/3
 15906  1E72  0087               	movwf	7
 15907  1E73  0301               	decf	1,w
 15908  1E74  1903               	btfsc	3,2
 15909  1E75  2E7B               	goto	l3992
 15910                           
 15911                           ;BME280_driver/bme280.c: 421:         {;BME280_driver/bme280.c: 422:             reg_add
      +                          r = reg_addr | 0x80;
 15912  1E76  0842               	movf	bme280_get_regs@reg_addr,w
 15913  1E77  3880               	iorlw	128
 15914  1E78  00BF               	movwf	??_bme280_get_regs
 15915  1E79  083F               	movf	??_bme280_get_regs,w
 15916  1E7A  00C2               	movwf	bme280_get_regs@reg_addr
 15917  1E7B                     l3992:	
 15918                           
 15919                           ;BME280_driver/bme280.c: 426:         rslt = dev->read(dev->dev_id, reg_addr, reg_data, 
      +                          len);
 15920  1E7B  083E               	movf	bme280_get_regs@dev,w
 15921  1E7C  0086               	movwf	6
 15922  1E7D  3001               	movlw	1	; select bank2/3
 15923  1E7E  0087               	movwf	7
 15924  1E7F  3001               	movlw	1	; select bank2/3
 15925  1E80  3F41               	moviw [1]fsr1
 15926  1E81  00AF               	movwf	ReadEnvSensor@dev_id
 15927  1E82  0842               	movf	bme280_get_regs@reg_addr,w
 15928  1E83  00BF               	movwf	??_bme280_get_regs
 15929  1E84  083F               	movf	??_bme280_get_regs,w
 15930  1E85  00B0               	movwf	ReadEnvSensor@reg_addr
 15931  1E86  083B               	movf	bme280_get_regs@reg_data,w
 15932  1E87  00C0               	movwf	??_bme280_get_regs+1
 15933  1E88  0840               	movf	??_bme280_get_regs+1,w
 15934  1E89  00B1               	movwf	ReadEnvSensor@reg_data
 15935  1E8A  083D               	movf	bme280_get_regs@len+1,w
 15936  1E8B  00B3               	movwf	ReadEnvSensor@len+1
 15937  1E8C  083C               	movf	bme280_get_regs@len,w
 15938  1E8D  00B2               	movwf	ReadEnvSensor@len
 15939  1E8E  083E               	movf	bme280_get_regs@dev,w
 15940  1E8F  3E03               	addlw	3
 15941  1E90  0086               	movwf	6
 15942  1E91  3001               	movlw	1	; select bank2/3
 15943  1E92  0087               	movwf	7
 15944  1E93  3F41               	moviw [1]fsr1
 15945  1E94  008A               	movwf	10
 15946  1E95  3F40               	moviw [0]fsr1
 15947  1E96  000A               	callw
 15948  1E97  319E               	pagesel	$
 15949  1E98  00C1               	movwf	??_bme280_get_regs+2
 15950  1E99  0841               	movf	??_bme280_get_regs+2,w
 15951  1E9A  00C3               	movwf	bme280_get_regs@rslt
 15952                           
 15953                           ;BME280_driver/bme280.c: 429:         if (rslt != 0)
 15954  1E9B  0843               	movf	bme280_get_regs@rslt,w
 15955  1E9C  1903               	btfsc	3,2
 15956  1E9D  2EA2               	goto	l65
 15957                           
 15958                           ;BME280_driver/bme280.c: 430:         {;BME280_driver/bme280.c: 431:             rslt = 
      +                          -4;
 15959  1E9E  30FC               	movlw	252
 15960  1E9F  00BF               	movwf	??_bme280_get_regs
 15961  1EA0  083F               	movf	??_bme280_get_regs,w
 15962  1EA1  00C3               	movwf	bme280_get_regs@rslt
 15963  1EA2                     l65:	
 15964                           ;BME280_driver/bme280.c: 433:     }
 15965                           
 15966                           
 15967                           ;BME280_driver/bme280.c: 435:     return rslt;
 15968  1EA2  0843               	movf	bme280_get_regs@rslt,w
 15969  1EA3  0008               	return
 15970  1EA4                     __end_of_bme280_get_regs:	
 15971                           
 15972                           	psect	text55
 15973  073E                     __ptext55:	
 15974 ;; *************** function _ReadEnvSensor *****************
 15975 ;; Defined at:
 15976 ;;		line 117 in file "bme280_i2c.c"
 15977 ;; Parameters:    Size  Location     Type
 15978 ;;  dev_id          1   15[BANK0 ] unsigned char 
 15979 ;;  reg_addr        1   16[BANK0 ] unsigned char 
 15980 ;;  reg_data        1   17[BANK0 ] PTR unsigned char 
 15981 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
 15982 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
 15983 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
 15984 ;;  len             2   18[BANK0 ] unsigned short 
 15985 ;; Auto vars:     Size  Location     Type
 15986 ;;  i               2   25[BANK0 ] int 
 15987 ;;  rslt            1   24[BANK0 ] char 
 15988 ;; Return value:  Size  Location     Type
 15989 ;;                  1    wreg      char 
 15990 ;; Registers used:
 15991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15992 ;; Tracked objects:
 15993 ;;		On entry : 1F/0
 15994 ;;		On exit  : 1F/0
 15995 ;;		Unchanged: 0/0
 15996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15997 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15998 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16000 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16001 ;;Total ram usage:       12 bytes
 16002 ;; Hardware stack levels used:    1
 16003 ;; Hardware stack levels required when called:    8
 16004 ;; This function calls:
 16005 ;;		_DebugAlert
 16006 ;;		_I2C_ReadByte
 16007 ;;		_I2C_Stop
 16008 ;;		_I2C_WriteByte
 16009 ;; This function is called by:
 16010 ;;		_BME280_Init
 16011 ;;		_bme280_get_regs
 16012 ;; This function uses a non-reentrant model
 16013 ;;
 16014                           
 16015                           
 16016                           ;psect for function _ReadEnvSensor
 16017  073E                     _ReadEnvSensor:	
 16018                           
 16019                           ;bme280_i2c.c: 117: int8_t ReadEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_
      +                          data, uint16_t len);bme280_i2c.c: 118: {;bme280_i2c.c: 119:     int8_t rslt = 0;
 16020                           
 16021                           ;incstack = 0
 16022                           ; Regs used in _ReadEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16023  073E  01B8               	clrf	ReadEnvSensor@rslt
 16024                           
 16025                           ;bme280_i2c.c: 121:     PIR1bits.SSP1IF = 0;
 16026  073F  1190               	bcf	16,3	;volatile
 16027                           
 16028                           ;bme280_i2c.c: 124:     SSP1CON2bits.SEN = 1;
 16029  0740  0024               	movlb	4	; select bank4
 16030  0741  1416               	bsf	22,0	;volatile
 16031                           
 16032                           ;bme280_i2c.c: 125:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if 
      +                          (ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1
      +                          IF = 0;;
 16033  0742  0021               	movlb	1	; select bank1
 16034  0743  086B               	movf	(_ticks+3)^(0+128),w
 16035  0744  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 16036  0745  086A               	movf	(_ticks+2)^(0+128),w
 16037  0746  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 16038  0747  0869               	movf	(_ticks+1)^(0+128),w
 16039  0748  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 16040  0749  0868               	movf	_ticks^(0+128),w
 16041  074A  00EC               	movwf	___g_timeout_start^(0+128)
 16042  074B                     l629:	
 16043  074B  0020               	movlb	0	; select bank0
 16044  074C  1990               	btfsc	16,3	;volatile
 16045  074D  2F7D               	goto	l632
 16046  074E  0021               	movlb	1	; select bank1
 16047  074F  086C               	movf	___g_timeout_start^(0+128),w
 16048  0750  0268               	subwf	_ticks^(0+128),w
 16049  0751  0020               	movlb	0	; select bank0
 16050  0752  00B4               	movwf	??_ReadEnvSensor
 16051  0753  0021               	movlb	1	; select bank1
 16052  0754  086D               	movf	(___g_timeout_start+1)^(0+128),w
 16053  0755  3B69               	subwfb	(_ticks+1)^(0+128),w
 16054  0756  0020               	movlb	0	; select bank0
 16055  0757  00B5               	movwf	??_ReadEnvSensor+1
 16056  0758  0021               	movlb	1	; select bank1
 16057  0759  086E               	movf	(___g_timeout_start+2)^(0+128),w
 16058  075A  3B6A               	subwfb	(_ticks+2)^(0+128),w
 16059  075B  0020               	movlb	0	; select bank0
 16060  075C  00B6               	movwf	??_ReadEnvSensor+2
 16061  075D  0021               	movlb	1	; select bank1
 16062  075E  086F               	movf	(___g_timeout_start+3)^(0+128),w
 16063  075F  3B6B               	subwfb	(_ticks+3)^(0+128),w
 16064  0760  0020               	movlb	0	; select bank0
 16065  0761  00B7               	movwf	??_ReadEnvSensor+3
 16066  0762  0837               	movf	??_ReadEnvSensor+3,w
 16067  0763  1D03               	btfss	3,2
 16068  0764  2F6E               	goto	l3924
 16069  0765  0836               	movf	??_ReadEnvSensor+2,w
 16070  0766  1D03               	btfss	3,2
 16071  0767  2F6E               	goto	l3924
 16072  0768  30B9               	movlw	185
 16073  0769  0234               	subwf	??_ReadEnvSensor,w
 16074  076A  300B               	movlw	11
 16075  076B  3B35               	subwfb	??_ReadEnvSensor+1,w
 16076  076C  1C03               	btfss	3,0
 16077  076D  2F4B               	goto	l629
 16078  076E                     l3924:	
 16079  076E  30C8               	movlw	200
 16080  076F  00A0               	movwf	DebugAlert@delay_high
 16081  0770  3000               	movlw	0
 16082  0771  00A1               	movwf	DebugAlert@delay_high+1
 16083  0772  30C8               	movlw	200
 16084  0773  00A2               	movwf	DebugAlert@delay_low
 16085  0774  3000               	movlw	0
 16086  0775  00A3               	movwf	DebugAlert@delay_low+1
 16087  0776  3003               	movlw	3
 16088  0777  00B4               	movwf	??_ReadEnvSensor
 16089  0778  0834               	movf	??_ReadEnvSensor,w
 16090  0779  00A4               	movwf	DebugAlert@num_flashes
 16091  077A  319B  23E1  3187   	fcall	_DebugAlert
 16092  077D                     l632:	
 16093  077D  0020               	movlb	0	; select bank0
 16094  077E  1190               	bcf	16,3	;volatile
 16095                           
 16096                           ;bme280_i2c.c: 128:     I2C_WriteByte(dev_id << 1);
 16097  077F  352F               	lslf	ReadEnvSensor@dev_id,w
 16098  0780  319F  2728  3187   	fcall	_I2C_WriteByte
 16099                           
 16100                           ;bme280_i2c.c: 131:     I2C_WriteByte(reg_addr);
 16101  0783  0020               	movlb	0	; select bank0
 16102  0784  0830               	movf	ReadEnvSensor@reg_addr,w
 16103  0785  319F  2728  3187   	fcall	_I2C_WriteByte
 16104                           
 16105                           ;bme280_i2c.c: 134:     SSP1CON2bits.RSEN = 1;
 16106  0788  0024               	movlb	4	; select bank4
 16107  0789  1496               	bsf	22,1	;volatile
 16108                           
 16109                           ;bme280_i2c.c: 135:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if 
      +                          (ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1
      +                          IF = 0;;
 16110  078A  0021               	movlb	1	; select bank1
 16111  078B  086B               	movf	(_ticks+3)^(0+128),w
 16112  078C  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 16113  078D  086A               	movf	(_ticks+2)^(0+128),w
 16114  078E  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 16115  078F  0869               	movf	(_ticks+1)^(0+128),w
 16116  0790  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 16117  0791  0868               	movf	_ticks^(0+128),w
 16118  0792  00EC               	movwf	___g_timeout_start^(0+128)
 16119  0793                     l633:	
 16120  0793  0020               	movlb	0	; select bank0
 16121  0794  1990               	btfsc	16,3	;volatile
 16122  0795  2FC5               	goto	l636
 16123  0796  0021               	movlb	1	; select bank1
 16124  0797  086C               	movf	___g_timeout_start^(0+128),w
 16125  0798  0268               	subwf	_ticks^(0+128),w
 16126  0799  0020               	movlb	0	; select bank0
 16127  079A  00B4               	movwf	??_ReadEnvSensor
 16128  079B  0021               	movlb	1	; select bank1
 16129  079C  086D               	movf	(___g_timeout_start+1)^(0+128),w
 16130  079D  3B69               	subwfb	(_ticks+1)^(0+128),w
 16131  079E  0020               	movlb	0	; select bank0
 16132  079F  00B5               	movwf	??_ReadEnvSensor+1
 16133  07A0  0021               	movlb	1	; select bank1
 16134  07A1  086E               	movf	(___g_timeout_start+2)^(0+128),w
 16135  07A2  3B6A               	subwfb	(_ticks+2)^(0+128),w
 16136  07A3  0020               	movlb	0	; select bank0
 16137  07A4  00B6               	movwf	??_ReadEnvSensor+2
 16138  07A5  0021               	movlb	1	; select bank1
 16139  07A6  086F               	movf	(___g_timeout_start+3)^(0+128),w
 16140  07A7  3B6B               	subwfb	(_ticks+3)^(0+128),w
 16141  07A8  0020               	movlb	0	; select bank0
 16142  07A9  00B7               	movwf	??_ReadEnvSensor+3
 16143  07AA  0837               	movf	??_ReadEnvSensor+3,w
 16144  07AB  1D03               	btfss	3,2
 16145  07AC  2FB6               	goto	l3934
 16146  07AD  0836               	movf	??_ReadEnvSensor+2,w
 16147  07AE  1D03               	btfss	3,2
 16148  07AF  2FB6               	goto	l3934
 16149  07B0  30B9               	movlw	185
 16150  07B1  0234               	subwf	??_ReadEnvSensor,w
 16151  07B2  300B               	movlw	11
 16152  07B3  3B35               	subwfb	??_ReadEnvSensor+1,w
 16153  07B4  1C03               	btfss	3,0
 16154  07B5  2F93               	goto	l633
 16155  07B6                     l3934:	
 16156  07B6  30C8               	movlw	200
 16157  07B7  00A0               	movwf	DebugAlert@delay_high
 16158  07B8  3000               	movlw	0
 16159  07B9  00A1               	movwf	DebugAlert@delay_high+1
 16160  07BA  30C8               	movlw	200
 16161  07BB  00A2               	movwf	DebugAlert@delay_low
 16162  07BC  3000               	movlw	0
 16163  07BD  00A3               	movwf	DebugAlert@delay_low+1
 16164  07BE  3003               	movlw	3
 16165  07BF  00B4               	movwf	??_ReadEnvSensor
 16166  07C0  0834               	movf	??_ReadEnvSensor,w
 16167  07C1  00A4               	movwf	DebugAlert@num_flashes
 16168  07C2  319B  23E1  3187   	fcall	_DebugAlert
 16169  07C5                     l636:	
 16170  07C5  0020               	movlb	0	; select bank0
 16171  07C6  1190               	bcf	16,3	;volatile
 16172                           
 16173                           ;bme280_i2c.c: 138:     I2C_WriteByte((dev_id << 1) | 0x01);
 16174  07C7  1403               	setc
 16175  07C8  0D2F               	rlf	ReadEnvSensor@dev_id,w
 16176  07C9  319F  2728  3187   	fcall	_I2C_WriteByte
 16177                           
 16178                           ;bme280_i2c.c: 141:     for(int i = 0; i < len; i++){
 16179  07CC  0020               	movlb	0	; select bank0
 16180  07CD  01B9               	clrf	ReadEnvSensor@i
 16181  07CE  01BA               	clrf	ReadEnvSensor@i+1
 16182  07CF                     l3948:	
 16183  07CF  0833               	movf	ReadEnvSensor@len+1,w
 16184  07D0  023A               	subwf	ReadEnvSensor@i+1,w
 16185  07D1  1D03               	skipz
 16186  07D2  2FD5               	goto	u4185
 16187  07D3  0832               	movf	ReadEnvSensor@len,w
 16188  07D4  0239               	subwf	ReadEnvSensor@i,w
 16189  07D5                     u4185:	
 16190  07D5  1803               	btfsc	3,0
 16191  07D6  2FF9               	goto	l3950
 16192                           
 16193                           ;bme280_i2c.c: 142:         if(i == len - 1){
 16194  07D7  0832               	movf	ReadEnvSensor@len,w
 16195  07D8  3EFF               	addlw	255
 16196  07D9  00B4               	movwf	??_ReadEnvSensor
 16197  07DA  30FF               	movlw	255
 16198  07DB  3D33               	addwfc	ReadEnvSensor@len+1,w
 16199  07DC  00B5               	movwf	??_ReadEnvSensor+1
 16200  07DD  083A               	movf	ReadEnvSensor@i+1,w
 16201  07DE  0635               	xorwf	??_ReadEnvSensor+1,w
 16202  07DF  1D03               	skipz
 16203  07E0  2FE3               	goto	u4175
 16204  07E1  0839               	movf	ReadEnvSensor@i,w
 16205  07E2  0634               	xorwf	??_ReadEnvSensor,w
 16206  07E3                     u4175:	
 16207  07E3  1D03               	skipz
 16208  07E4  2FE7               	goto	l3944
 16209                           
 16210                           ;bme280_i2c.c: 143:             reg_data[i] = I2C_ReadByte(1);
 16211  07E5  3001               	movlw	1
 16212  07E6  2FE8               	goto	L5
 16213  07E7                     l3944:	
 16214                           ;bme280_i2c.c: 144:         }
 16215                           
 16216                           
 16217                           ;bme280_i2c.c: 146:             reg_data[i]=I2C_ReadByte(0);
 16218  07E7  3000               	movlw	0
 16219  07E8                     L5:	
 16220  07E8  3196  26DC  3187   	fcall	_I2C_ReadByte
 16221  07EB  00B4               	movwf	??_ReadEnvSensor
 16222  07EC  0839               	movf	ReadEnvSensor@i,w
 16223  07ED  0731               	addwf	ReadEnvSensor@reg_data,w
 16224  07EE  00B5               	movwf	??_ReadEnvSensor+1
 16225  07EF  0835               	movf	??_ReadEnvSensor+1,w
 16226  07F0  0086               	movwf	6
 16227  07F1  0187               	clrf	7
 16228  07F2  0834               	movf	??_ReadEnvSensor,w
 16229  07F3  0081               	movwf	1
 16230                           
 16231                           ;bme280_i2c.c: 148:     }
 16232  07F4  3001               	movlw	1
 16233  07F5  07B9               	addwf	ReadEnvSensor@i,f
 16234  07F6  3000               	movlw	0
 16235  07F7  3DBA               	addwfc	ReadEnvSensor@i+1,f
 16236  07F8  2FCF               	goto	l3948
 16237  07F9                     l3950:	
 16238                           
 16239                           ;bme280_i2c.c: 151:     I2C_Stop();
 16240  07F9  319D  25E2         	fcall	_I2C_Stop
 16241                           
 16242                           ;bme280_i2c.c: 153:     return rslt;
 16243  07FB  0838               	movf	ReadEnvSensor@rslt,w
 16244  07FC  0008               	return
 16245  07FD                     __end_of_ReadEnvSensor:	
 16246                           
 16247                           	psect	text56
 16248  16DC                     __ptext56:	
 16249 ;; *************** function _I2C_ReadByte *****************
 16250 ;; Defined at:
 16251 ;;		line 44 in file "bme280_i2c.c"
 16252 ;; Parameters:    Size  Location     Type
 16253 ;;  ackbit          1    wreg     unsigned char 
 16254 ;; Auto vars:     Size  Location     Type
 16255 ;;  ackbit          1   11[BANK0 ] unsigned char 
 16256 ;;  rcvdata         1   12[BANK0 ] unsigned char 
 16257 ;; Return value:  Size  Location     Type
 16258 ;;                  1    wreg      unsigned char 
 16259 ;; Registers used:
 16260 ;;		wreg, status,2, status,0, pclath, cstack
 16261 ;; Tracked objects:
 16262 ;;		On entry : 1F/0
 16263 ;;		On exit  : 1F/0
 16264 ;;		Unchanged: 0/0
 16265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16267 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16268 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16269 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;Total ram usage:        6 bytes
 16271 ;; Hardware stack levels used:    1
 16272 ;; Hardware stack levels required when called:    5
 16273 ;; This function calls:
 16274 ;;		_DebugAlert
 16275 ;; This function is called by:
 16276 ;;		_ReadEnvSensor
 16277 ;; This function uses a non-reentrant model
 16278 ;;
 16279                           
 16280                           
 16281                           ;psect for function _I2C_ReadByte
 16282  16DC                     _I2C_ReadByte:	
 16283                           
 16284                           ;incstack = 0
 16285                           ; Regs used in _I2C_ReadByte: [wreg+status,2+status,0+pclath+cstack]
 16286                           ;I2C_ReadByte@ackbit stored from wreg
 16287  16DC  00AB               	movwf	I2C_ReadByte@ackbit
 16288                           
 16289                           ;bme280_i2c.c: 44: uint8_t I2C_ReadByte(uint8_t ackbit);bme280_i2c.c: 45: {;bme280_i2c.c
      +                          : 46:     uint8_t rcvdata;;bme280_i2c.c: 48:     SSP1CON2bits.RCEN = 1;
 16290  16DD  0024               	movlb	4	; select bank4
 16291  16DE  1596               	bsf	22,3	;volatile
 16292                           
 16293                           ;bme280_i2c.c: 49:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if (
      +                          ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1I
      +                          F = 0;;
 16294  16DF  0021               	movlb	1	; select bank1
 16295  16E0  086B               	movf	(_ticks+3)^(0+128),w
 16296  16E1  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 16297  16E2  086A               	movf	(_ticks+2)^(0+128),w
 16298  16E3  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 16299  16E4  0869               	movf	(_ticks+1)^(0+128),w
 16300  16E5  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 16301  16E6  0868               	movf	_ticks^(0+128),w
 16302  16E7  00EC               	movwf	___g_timeout_start^(0+128)
 16303  16E8                     l601:	
 16304  16E8  0020               	movlb	0	; select bank0
 16305  16E9  1990               	btfsc	16,3	;volatile
 16306  16EA  2F1A               	goto	l604
 16307  16EB  0021               	movlb	1	; select bank1
 16308  16EC  086C               	movf	___g_timeout_start^(0+128),w
 16309  16ED  0268               	subwf	_ticks^(0+128),w
 16310  16EE  0020               	movlb	0	; select bank0
 16311  16EF  00A7               	movwf	??_I2C_ReadByte
 16312  16F0  0021               	movlb	1	; select bank1
 16313  16F1  086D               	movf	(___g_timeout_start+1)^(0+128),w
 16314  16F2  3B69               	subwfb	(_ticks+1)^(0+128),w
 16315  16F3  0020               	movlb	0	; select bank0
 16316  16F4  00A8               	movwf	??_I2C_ReadByte+1
 16317  16F5  0021               	movlb	1	; select bank1
 16318  16F6  086E               	movf	(___g_timeout_start+2)^(0+128),w
 16319  16F7  3B6A               	subwfb	(_ticks+2)^(0+128),w
 16320  16F8  0020               	movlb	0	; select bank0
 16321  16F9  00A9               	movwf	??_I2C_ReadByte+2
 16322  16FA  0021               	movlb	1	; select bank1
 16323  16FB  086F               	movf	(___g_timeout_start+3)^(0+128),w
 16324  16FC  3B6B               	subwfb	(_ticks+3)^(0+128),w
 16325  16FD  0020               	movlb	0	; select bank0
 16326  16FE  00AA               	movwf	??_I2C_ReadByte+3
 16327  16FF  082A               	movf	??_I2C_ReadByte+3,w
 16328  1700  1D03               	btfss	3,2
 16329  1701  2F0B               	goto	l3874
 16330  1702  0829               	movf	??_I2C_ReadByte+2,w
 16331  1703  1D03               	btfss	3,2
 16332  1704  2F0B               	goto	l3874
 16333  1705  30B9               	movlw	185
 16334  1706  0227               	subwf	??_I2C_ReadByte,w
 16335  1707  300B               	movlw	11
 16336  1708  3B28               	subwfb	??_I2C_ReadByte+1,w
 16337  1709  1C03               	btfss	3,0
 16338  170A  2EE8               	goto	l601
 16339  170B                     l3874:	
 16340  170B  30C8               	movlw	200
 16341  170C  00A0               	movwf	DebugAlert@delay_high
 16342  170D  3000               	movlw	0
 16343  170E  00A1               	movwf	DebugAlert@delay_high+1
 16344  170F  30C8               	movlw	200
 16345  1710  00A2               	movwf	DebugAlert@delay_low
 16346  1711  3000               	movlw	0
 16347  1712  00A3               	movwf	DebugAlert@delay_low+1
 16348  1713  3003               	movlw	3
 16349  1714  00A7               	movwf	??_I2C_ReadByte
 16350  1715  0827               	movf	??_I2C_ReadByte,w
 16351  1716  00A4               	movwf	DebugAlert@num_flashes
 16352  1717  319B  23E1  3196   	fcall	_DebugAlert
 16353  171A                     l604:	
 16354  171A  0020               	movlb	0	; select bank0
 16355  171B  1190               	bcf	16,3	;volatile
 16356                           
 16357                           ;bme280_i2c.c: 51:     rcvdata = SSP1BUF;
 16358  171C  0024               	movlb	4	; select bank4
 16359  171D  0811               	movf	17,w	;volatile
 16360  171E  0020               	movlb	0	; select bank0
 16361  171F  00A7               	movwf	??_I2C_ReadByte
 16362  1720  0827               	movf	??_I2C_ReadByte,w
 16363  1721  00AC               	movwf	I2C_ReadByte@rcvdata
 16364                           
 16365                           ;bme280_i2c.c: 54:     SSP1CON2bits.ACKDT=ackbit;
 16366  1722  0C2B               	rrf	I2C_ReadByte@ackbit,w
 16367  1723  0024               	movlb	4	; select bank4
 16368  1724  1C03               	skipc
 16369  1725  1296               	bcf	22,5	;volatile
 16370  1726  1803               	skipnc
 16371  1727  1696               	bsf	22,5	;volatile
 16372                           
 16373                           ;bme280_i2c.c: 55:     SSP1CON2bits.ACKEN = 1;
 16374  1728  1616               	bsf	22,4	;volatile
 16375                           
 16376                           ;bme280_i2c.c: 56:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if (
      +                          ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1I
      +                          F = 0;;
 16377  1729  0021               	movlb	1	; select bank1
 16378  172A  086B               	movf	(_ticks+3)^(0+128),w
 16379  172B  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 16380  172C  086A               	movf	(_ticks+2)^(0+128),w
 16381  172D  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 16382  172E  0869               	movf	(_ticks+1)^(0+128),w
 16383  172F  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 16384  1730  0868               	movf	_ticks^(0+128),w
 16385  1731  00EC               	movwf	___g_timeout_start^(0+128)
 16386  1732                     l605:	
 16387  1732  0020               	movlb	0	; select bank0
 16388  1733  1990               	btfsc	16,3	;volatile
 16389  1734  2F63               	goto	l608
 16390  1735  0021               	movlb	1	; select bank1
 16391  1736  086C               	movf	___g_timeout_start^(0+128),w
 16392  1737  0268               	subwf	_ticks^(0+128),w
 16393  1738  0020               	movlb	0	; select bank0
 16394  1739  00A7               	movwf	??_I2C_ReadByte
 16395  173A  0021               	movlb	1	; select bank1
 16396  173B  086D               	movf	(___g_timeout_start+1)^(0+128),w
 16397  173C  3B69               	subwfb	(_ticks+1)^(0+128),w
 16398  173D  0020               	movlb	0	; select bank0
 16399  173E  00A8               	movwf	??_I2C_ReadByte+1
 16400  173F  0021               	movlb	1	; select bank1
 16401  1740  086E               	movf	(___g_timeout_start+2)^(0+128),w
 16402  1741  3B6A               	subwfb	(_ticks+2)^(0+128),w
 16403  1742  0020               	movlb	0	; select bank0
 16404  1743  00A9               	movwf	??_I2C_ReadByte+2
 16405  1744  0021               	movlb	1	; select bank1
 16406  1745  086F               	movf	(___g_timeout_start+3)^(0+128),w
 16407  1746  3B6B               	subwfb	(_ticks+3)^(0+128),w
 16408  1747  0020               	movlb	0	; select bank0
 16409  1748  00AA               	movwf	??_I2C_ReadByte+3
 16410  1749  082A               	movf	??_I2C_ReadByte+3,w
 16411  174A  1D03               	btfss	3,2
 16412  174B  2F55               	goto	l3886
 16413  174C  0829               	movf	??_I2C_ReadByte+2,w
 16414  174D  1D03               	btfss	3,2
 16415  174E  2F55               	goto	l3886
 16416  174F  30B9               	movlw	185
 16417  1750  0227               	subwf	??_I2C_ReadByte,w
 16418  1751  300B               	movlw	11
 16419  1752  3B28               	subwfb	??_I2C_ReadByte+1,w
 16420  1753  1C03               	btfss	3,0
 16421  1754  2F32               	goto	l605
 16422  1755                     l3886:	
 16423  1755  30C8               	movlw	200
 16424  1756  00A0               	movwf	DebugAlert@delay_high
 16425  1757  3000               	movlw	0
 16426  1758  00A1               	movwf	DebugAlert@delay_high+1
 16427  1759  30C8               	movlw	200
 16428  175A  00A2               	movwf	DebugAlert@delay_low
 16429  175B  3000               	movlw	0
 16430  175C  00A3               	movwf	DebugAlert@delay_low+1
 16431  175D  3003               	movlw	3
 16432  175E  00A7               	movwf	??_I2C_ReadByte
 16433  175F  0827               	movf	??_I2C_ReadByte,w
 16434  1760  00A4               	movwf	DebugAlert@num_flashes
 16435  1761  319B  23E1         	fcall	_DebugAlert
 16436  1763                     l608:	
 16437  1763  0020               	movlb	0	; select bank0
 16438  1764  1190               	bcf	16,3	;volatile
 16439                           
 16440                           ;bme280_i2c.c: 58:     return (rcvdata);
 16441  1765  082C               	movf	I2C_ReadByte@rcvdata,w
 16442  1766  0008               	return
 16443  1767                     __end_of_I2C_ReadByte:	
 16444                           
 16445                           	psect	text57
 16446  1D2F                     __ptext57:	
 16447 ;; *************** function _bme280_soft_reset *****************
 16448 ;; Defined at:
 16449 ;;		line 631 in file "BME280_driver/bme280.c"
 16450 ;; Parameters:    Size  Location     Type
 16451 ;;  dev             1    wreg     PTR const struct bme280_
 16452 ;;		 -> EnvSensor(51), 
 16453 ;; Auto vars:     Size  Location     Type
 16454 ;;  dev             1   64[BANK0 ] PTR const struct bme280_
 16455 ;;		 -> EnvSensor(51), 
 16456 ;;  reg_addr        1   63[BANK0 ] unsigned char 
 16457 ;;  rslt            1   62[BANK0 ] char 
 16458 ;;  soft_rst_cmd    1   61[BANK0 ] unsigned char 
 16459 ;; Return value:  Size  Location     Type
 16460 ;;                  1    wreg      char 
 16461 ;; Registers used:
 16462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16463 ;; Tracked objects:
 16464 ;;		On entry : 1E/1
 16465 ;;		On exit  : 1F/0
 16466 ;;		Unchanged: 0/0
 16467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16469 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16470 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16471 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16472 ;;Total ram usage:        7 bytes
 16473 ;; Hardware stack levels used:    1
 16474 ;; Hardware stack levels required when called:   10
 16475 ;; This function calls:
 16476 ;;		_Sleep
 16477 ;;		_bme280_set_regs
 16478 ;;		_null_ptr_check
 16479 ;; This function is called by:
 16480 ;;		_bme280_init
 16481 ;;		_put_device_to_sleep
 16482 ;; This function uses a non-reentrant model
 16483 ;;
 16484                           
 16485                           
 16486                           ;psect for function _bme280_soft_reset
 16487  1D2F                     _bme280_soft_reset:	
 16488                           
 16489                           ;incstack = 0
 16490                           ; Regs used in _bme280_soft_reset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16491                           ;bme280_soft_reset@dev stored from wreg
 16492  1D2F  0020               	movlb	0	; select bank0
 16493  1D30  00E0               	movwf	bme280_soft_reset@dev
 16494                           
 16495                           ;BME280_driver/bme280.c: 631: int8_t bme280_soft_reset(const struct bme280_dev *dev);BME
      +                          280_driver/bme280.c: 632: {;BME280_driver/bme280.c: 633:     int8_t rslt;;BME280_driver/
      +                          bme280.c: 634:     uint8_t reg_addr = 0xE0;
 16496  1D31  30E0               	movlw	224
 16497  1D32  00DA               	movwf	??_bme280_soft_reset
 16498  1D33  085A               	movf	??_bme280_soft_reset,w
 16499  1D34  00DF               	movwf	bme280_soft_reset@reg_addr
 16500                           
 16501                           ;BME280_driver/bme280.c: 637:     uint8_t soft_rst_cmd = 0xB6;
 16502  1D35  30B6               	movlw	182
 16503  1D36  00DA               	movwf	??_bme280_soft_reset
 16504  1D37  085A               	movf	??_bme280_soft_reset,w
 16505  1D38  00DD               	movwf	bme280_soft_reset@soft_rst_cmd
 16506                           
 16507                           ;BME280_driver/bme280.c: 640:     rslt = null_ptr_check(dev);
 16508  1D39  0860               	movf	bme280_soft_reset@dev,w
 16509  1D3A  319A  22F2  319D   	fcall	_null_ptr_check
 16510  1D3D  0020               	movlb	0	; select bank0
 16511  1D3E  00DA               	movwf	??_bme280_soft_reset
 16512  1D3F  085A               	movf	??_bme280_soft_reset,w
 16513  1D40  00DE               	movwf	bme280_soft_reset@rslt
 16514                           
 16515                           ;BME280_driver/bme280.c: 643:     if (rslt == 0)
 16516  1D41  085E               	movf	bme280_soft_reset@rslt,w
 16517  1D42  1D03               	btfss	3,2
 16518  1D43  2D67               	goto	l4132
 16519                           
 16520                           ;BME280_driver/bme280.c: 644:     {;BME280_driver/bme280.c: 646:         rslt = bme280_s
      +                          et_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 16521  1D44  305D               	movlw	(low (bme280_soft_reset@soft_rst_cmd| 0))& (0+255)
 16522  1D45  00DA               	movwf	??_bme280_soft_reset
 16523  1D46  085A               	movf	??_bme280_soft_reset,w
 16524  1D47  00BB               	movwf	bme280_set_regs@reg_data
 16525  1D48  01BC               	clrf	bme280_set_regs@len
 16526  1D49  0ABC               	incf	bme280_set_regs@len,f
 16527  1D4A  0860               	movf	bme280_soft_reset@dev,w
 16528  1D4B  00DB               	movwf	??_bme280_soft_reset+1
 16529  1D4C  085B               	movf	??_bme280_soft_reset+1,w
 16530  1D4D  00BD               	movwf	bme280_set_regs@dev
 16531  1D4E  305F               	movlw	(low (bme280_soft_reset@reg_addr| 0))& (0+255)
 16532  1D4F  3188  200D  319D   	fcall	_bme280_set_regs
 16533  1D52  00DC               	movwf	??_bme280_soft_reset+2
 16534  1D53  085C               	movf	??_bme280_soft_reset+2,w
 16535  1D54  00DE               	movwf	bme280_soft_reset@rslt
 16536                           
 16537                           ;BME280_driver/bme280.c: 649:         dev->delay_ms(2);
 16538  1D55  3000               	movlw	0
 16539  1D56  00F3               	movwf	Sleep@ms+3
 16540  1D57  3000               	movlw	0
 16541  1D58  00F2               	movwf	Sleep@ms+2
 16542  1D59  3000               	movlw	0
 16543  1D5A  00F1               	movwf	Sleep@ms+1
 16544  1D5B  3002               	movlw	2
 16545  1D5C  00F0               	movwf	Sleep@ms
 16546  1D5D  0860               	movf	bme280_soft_reset@dev,w
 16547  1D5E  3E07               	addlw	7
 16548  1D5F  0086               	movwf	6
 16549  1D60  3001               	movlw	1	; select bank2/3
 16550  1D61  0087               	movwf	7
 16551  1D62  3F41               	moviw [1]fsr1
 16552  1D63  008A               	movwf	10
 16553  1D64  3F40               	moviw [0]fsr1
 16554  1D65  000A               	callw
 16555  1D66  319D               	pagesel	$
 16556  1D67                     l4132:	
 16557                           
 16558                           ;BME280_driver/bme280.c: 652:     return rslt;
 16559  1D67  0020               	movlb	0	; select bank0
 16560  1D68  085E               	movf	bme280_soft_reset@rslt,w
 16561  1D69  0008               	return
 16562  1D6A                     __end_of_bme280_soft_reset:	
 16563                           
 16564                           	psect	text58
 16565  080D                     __ptext58:	
 16566 ;; *************** function _bme280_set_regs *****************
 16567 ;; Defined at:
 16568 ;;		line 442 in file "BME280_driver/bme280.c"
 16569 ;; Parameters:    Size  Location     Type
 16570 ;;  reg_addr        1    wreg     PTR unsigned char 
 16571 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
 16572 ;;		 -> bme280_soft_reset@reg_addr(1), 
 16573 ;;  reg_data        1   27[BANK0 ] PTR const unsigned char 
 16574 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
 16575 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
 16576 ;;  len             1   28[BANK0 ] unsigned char 
 16577 ;;  dev             1   29[BANK0 ] PTR const struct bme280_
 16578 ;;		 -> EnvSensor(51), 
 16579 ;; Auto vars:     Size  Location     Type
 16580 ;;  reg_addr        1   57[BANK0 ] PTR unsigned char 
 16581 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
 16582 ;;		 -> bme280_soft_reset@reg_addr(1), 
 16583 ;;  temp_buff      20   33[BANK0 ] unsigned char [20]
 16584 ;;  temp_len        2   53[BANK0 ] unsigned short 
 16585 ;;  rslt            1   56[BANK0 ] char 
 16586 ;;  reg_addr_cnt    1   55[BANK0 ] unsigned char 
 16587 ;; Return value:  Size  Location     Type
 16588 ;;                  1    wreg      char 
 16589 ;; Registers used:
 16590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16591 ;; Tracked objects:
 16592 ;;		On entry : 1F/0
 16593 ;;		On exit  : 1F/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16596 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16597 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16598 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16599 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16600 ;;Total ram usage:       31 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:    9
 16603 ;; This function calls:
 16604 ;;		_WriteEnvSensor
 16605 ;;		_interleave_reg_addr
 16606 ;;		_null_ptr_check
 16607 ;; This function is called by:
 16608 ;;		_bme280_soft_reset
 16609 ;;		_set_osr_humidity_settings
 16610 ;;		_set_osr_press_temp_settings
 16611 ;;		_set_filter_standby_settings
 16612 ;;		_write_power_mode
 16613 ;; This function uses a non-reentrant model
 16614 ;;
 16615                           
 16616                           
 16617                           ;psect for function _bme280_set_regs
 16618  080D                     _bme280_set_regs:	
 16619                           
 16620                           ;incstack = 0
 16621                           ; Regs used in _bme280_set_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16622                           ;bme280_set_regs@reg_addr stored from wreg
 16623  080D  00D9               	movwf	bme280_set_regs@reg_addr
 16624                           
 16625                           ;BME280_driver/bme280.c: 442: int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *r
      +                          eg_data, uint8_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 443: {;BME28
      +                          0_driver/bme280.c: 444:     int8_t rslt;;BME280_driver/bme280.c: 445:     uint8_t temp_b
      +                          uff[20];;BME280_driver/bme280.c: 447:     if (len > 10)
 16626  080E  300B               	movlw	11
 16627  080F  023C               	subwf	bme280_set_regs@len,w
 16628  0810  1C03               	skipc
 16629  0811  2816               	goto	l4004
 16630                           
 16631                           ;BME280_driver/bme280.c: 448:     {;BME280_driver/bme280.c: 449:         len = 10;
 16632  0812  300A               	movlw	10
 16633  0813  00BE               	movwf	??_bme280_set_regs
 16634  0814  083E               	movf	??_bme280_set_regs,w
 16635  0815  00BC               	movwf	bme280_set_regs@len
 16636  0816                     l4004:	
 16637                           
 16638                           ;BME280_driver/bme280.c: 451:     uint16_t temp_len;;BME280_driver/bme280.c: 452:     ui
      +                          nt8_t reg_addr_cnt;;BME280_driver/bme280.c: 455:     rslt = null_ptr_check(dev);
 16639  0816  083D               	movf	bme280_set_regs@dev,w
 16640  0817  319A  22F2  3188   	fcall	_null_ptr_check
 16641  081A  0020               	movlb	0	; select bank0
 16642  081B  00BE               	movwf	??_bme280_set_regs
 16643  081C  083E               	movf	??_bme280_set_regs,w
 16644  081D  00D8               	movwf	bme280_set_regs@rslt
 16645                           
 16646                           ;BME280_driver/bme280.c: 458:     if ((rslt == 0) && (reg_addr != ((void*)0)) && (reg_da
      +                          ta != ((void*)0)))
 16647  081E  0858               	movf	bme280_set_regs@rslt,w
 16648  081F  1D03               	btfss	3,2
 16649  0820  28A7               	goto	l72
 16650  0821  0859               	movf	bme280_set_regs@reg_addr,w
 16651  0822  1903               	btfsc	3,2
 16652  0823  28A7               	goto	l72
 16653  0824  083B               	movf	bme280_set_regs@reg_data,w
 16654  0825  1903               	btfsc	3,2
 16655  0826  28A7               	goto	l72
 16656                           
 16657                           ;BME280_driver/bme280.c: 459:     {;BME280_driver/bme280.c: 460:         if (len != 0)
 16658  0827  083C               	movf	bme280_set_regs@len,w
 16659  0828  1903               	btfsc	3,2
 16660  0829  28A2               	goto	l4040
 16661                           
 16662                           ;BME280_driver/bme280.c: 461:         {;BME280_driver/bme280.c: 462:             temp_bu
      +                          ff[0] = reg_data[0];
 16663  082A  083B               	movf	bme280_set_regs@reg_data,w
 16664  082B  0086               	movwf	6
 16665  082C  0187               	clrf	7
 16666  082D  0801               	movf	1,w
 16667  082E  00BE               	movwf	??_bme280_set_regs
 16668  082F  083E               	movf	??_bme280_set_regs,w
 16669  0830  00C1               	movwf	bme280_set_regs@temp_buff
 16670                           
 16671                           ;BME280_driver/bme280.c: 465:             if (dev->intf != BME280_I2C_INTF)
 16672  0831  083D               	movf	bme280_set_regs@dev,w
 16673  0832  3E02               	addlw	2
 16674  0833  0086               	movwf	6
 16675  0834  3001               	movlw	1	; select bank2/3
 16676  0835  0087               	movwf	7
 16677  0836  0301               	decf	1,w
 16678  0837  1903               	btfsc	3,2
 16679  0838  2854               	goto	l4026
 16680                           
 16681                           ;BME280_driver/bme280.c: 466:             {;BME280_driver/bme280.c: 467:                
      +                           for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 16682  0839  01D7               	clrf	bme280_set_regs@reg_addr_cnt
 16683  083A                     l4024:	
 16684  083A  083C               	movf	bme280_set_regs@len,w
 16685  083B  0257               	subwf	bme280_set_regs@reg_addr_cnt,w
 16686  083C  1803               	btfsc	3,0
 16687  083D  2854               	goto	l4026
 16688                           
 16689                           ;BME280_driver/bme280.c: 468:                 {;BME280_driver/bme280.c: 469:            
      +                                   reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 16690  083E  0857               	movf	bme280_set_regs@reg_addr_cnt,w
 16691  083F  0759               	addwf	bme280_set_regs@reg_addr,w
 16692  0840  00BE               	movwf	??_bme280_set_regs
 16693  0841  083E               	movf	??_bme280_set_regs,w
 16694  0842  0086               	movwf	6
 16695  0843  0187               	clrf	7
 16696  0844  0801               	movf	1,w
 16697  0845  397F               	andlw	127
 16698  0846  00BF               	movwf	??_bme280_set_regs+1
 16699  0847  0857               	movf	bme280_set_regs@reg_addr_cnt,w
 16700  0848  0759               	addwf	bme280_set_regs@reg_addr,w
 16701  0849  00C0               	movwf	??_bme280_set_regs+2
 16702  084A  0840               	movf	??_bme280_set_regs+2,w
 16703  084B  0086               	movwf	6
 16704  084C  0187               	clrf	7
 16705  084D  083F               	movf	??_bme280_set_regs+1,w
 16706  084E  0081               	movwf	1
 16707                           
 16708                           ;BME280_driver/bme280.c: 470:                 }
 16709  084F  3001               	movlw	1
 16710  0850  00BE               	movwf	??_bme280_set_regs
 16711  0851  083E               	movf	??_bme280_set_regs,w
 16712  0852  07D7               	addwf	bme280_set_regs@reg_addr_cnt,f
 16713  0853  283A               	goto	l4024
 16714  0854                     l4026:	
 16715                           
 16716                           ;BME280_driver/bme280.c: 474:             if (len > 1)
 16717  0854  3002               	movlw	2
 16718  0855  023C               	subwf	bme280_set_regs@len,w
 16719  0856  1C03               	skipc
 16720  0857  2873               	goto	l4032
 16721                           
 16722                           ;BME280_driver/bme280.c: 475:             {;BME280_driver/bme280.c: 479:                
      +                           interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 16723  0858  3041               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
 16724  0859  00BE               	movwf	??_bme280_set_regs
 16725  085A  083E               	movf	??_bme280_set_regs,w
 16726  085B  00F0               	movwf	interleave_reg_addr@temp_buff
 16727  085C  083B               	movf	bme280_set_regs@reg_data,w
 16728  085D  00BF               	movwf	??_bme280_set_regs+1
 16729  085E  083F               	movf	??_bme280_set_regs+1,w
 16730  085F  00F1               	movwf	interleave_reg_addr@reg_data
 16731  0860  083C               	movf	bme280_set_regs@len,w
 16732  0861  00C0               	movwf	??_bme280_set_regs+2
 16733  0862  0840               	movf	??_bme280_set_regs+2,w
 16734  0863  00F2               	movwf	interleave_reg_addr@len
 16735  0864  0859               	movf	bme280_set_regs@reg_addr,w
 16736  0865  319C  2437  3188   	fcall	_interleave_reg_addr
 16737                           
 16738                           ;BME280_driver/bme280.c: 480:                 temp_len = ((len * 2) - 1);
 16739  0868  083C               	movf	bme280_set_regs@len,w
 16740  0869  00BE               	movwf	??_bme280_set_regs
 16741  086A  01BF               	clrf	??_bme280_set_regs+1
 16742  086B  35BE               	lslf	??_bme280_set_regs,f
 16743  086C  0DBF               	rlf	??_bme280_set_regs+1,f
 16744  086D  083E               	movf	??_bme280_set_regs,w
 16745  086E  3EFF               	addlw	255
 16746  086F  00D5               	movwf	bme280_set_regs@temp_len
 16747  0870  30FF               	movlw	255
 16748  0871  3D3F               	addwfc	??_bme280_set_regs+1,w
 16749  0872  2879               	goto	L6
 16750  0873                     l4032:	
 16751                           ;BME280_driver/bme280.c: 481:             }
 16752                           
 16753                           
 16754                           ;BME280_driver/bme280.c: 483:             {;BME280_driver/bme280.c: 484:                
      +                           temp_len = len;
 16755  0873  083C               	movf	bme280_set_regs@len,w
 16756  0874  00BE               	movwf	??_bme280_set_regs
 16757  0875  01BF               	clrf	??_bme280_set_regs+1
 16758  0876  083E               	movf	??_bme280_set_regs,w
 16759  0877  00D5               	movwf	bme280_set_regs@temp_len
 16760  0878  083F               	movf	??_bme280_set_regs+1,w
 16761  0879                     L6:	
 16762  0879  00D6               	movwf	bme280_set_regs@temp_len+1
 16763                           
 16764                           ;BME280_driver/bme280.c: 486:             rslt = dev->write(dev->dev_id, reg_addr[0], te
      +                          mp_buff, temp_len);
 16765  087A  083D               	movf	bme280_set_regs@dev,w
 16766  087B  0086               	movwf	6
 16767  087C  3001               	movlw	1	; select bank2/3
 16768  087D  0087               	movwf	7
 16769  087E  3001               	movlw	1	; select bank2/3
 16770  087F  3F41               	moviw [1]fsr1
 16771  0880  00AF               	movwf	WriteEnvSensor@dev_id
 16772  0881  0859               	movf	bme280_set_regs@reg_addr,w
 16773  0882  0086               	movwf	6
 16774  0883  0187               	clrf	7
 16775  0884  0801               	movf	1,w
 16776  0885  00BE               	movwf	??_bme280_set_regs
 16777  0886  083E               	movf	??_bme280_set_regs,w
 16778  0887  00B0               	movwf	WriteEnvSensor@reg_addr
 16779  0888  3041               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
 16780  0889  00BF               	movwf	??_bme280_set_regs+1
 16781  088A  083F               	movf	??_bme280_set_regs+1,w
 16782  088B  00B1               	movwf	WriteEnvSensor@reg_data
 16783  088C  0856               	movf	bme280_set_regs@temp_len+1,w
 16784  088D  00B3               	movwf	WriteEnvSensor@len+1
 16785  088E  0855               	movf	bme280_set_regs@temp_len,w
 16786  088F  00B2               	movwf	WriteEnvSensor@len
 16787  0890  083D               	movf	bme280_set_regs@dev,w
 16788  0891  3E05               	addlw	5
 16789  0892  0086               	movwf	6
 16790  0893  3001               	movlw	1	; select bank2/3
 16791  0894  0087               	movwf	7
 16792  0895  3F41               	moviw [1]fsr1
 16793  0896  008A               	movwf	10
 16794  0897  3F40               	moviw [0]fsr1
 16795  0898  000A               	callw
 16796  0899  3188               	pagesel	$
 16797  089A  00C0               	movwf	??_bme280_set_regs+2
 16798  089B  0840               	movf	??_bme280_set_regs+2,w
 16799  089C  00D8               	movwf	bme280_set_regs@rslt
 16800                           
 16801                           ;BME280_driver/bme280.c: 489:             if (rslt != 0)
 16802  089D  0858               	movf	bme280_set_regs@rslt,w
 16803  089E  1903               	btfsc	3,2
 16804  089F  28A9               	goto	l4042
 16805                           
 16806                           ;BME280_driver/bme280.c: 490:             {;BME280_driver/bme280.c: 491:                
      +                           rslt = -4;
 16807  08A0  30FC               	movlw	252
 16808  08A1  28A3               	goto	L7
 16809  08A2                     l4040:	
 16810                           
 16811                           ;BME280_driver/bme280.c: 495:         {;BME280_driver/bme280.c: 496:             rslt = 
      +                          -3;
 16812  08A2  30FD               	movlw	253
 16813  08A3                     L7:	
 16814  08A3  00BE               	movwf	??_bme280_set_regs
 16815  08A4  083E               	movf	??_bme280_set_regs,w
 16816  08A5  00D8               	movwf	bme280_set_regs@rslt
 16817  08A6  28A9               	goto	l4042
 16818  08A7                     l72:	
 16819                           ;BME280_driver/bme280.c: 499:     else
 16820                           
 16821                           
 16822                           ;BME280_driver/bme280.c: 500:     {;BME280_driver/bme280.c: 501:         rslt = -1;
 16823  08A7  01D8               	clrf	bme280_set_regs@rslt
 16824  08A8  03D8               	decf	bme280_set_regs@rslt,f
 16825  08A9                     l4042:	
 16826                           
 16827                           ;BME280_driver/bme280.c: 504:     return rslt;
 16828  08A9  0858               	movf	bme280_set_regs@rslt,w
 16829  08AA  0008               	return
 16830  08AB                     __end_of_bme280_set_regs:	
 16831                           
 16832                           	psect	text59
 16833  1AF2                     __ptext59:	
 16834 ;; *************** function _null_ptr_check *****************
 16835 ;; Defined at:
 16836 ;;		line 1426 in file "BME280_driver/bme280.c"
 16837 ;; Parameters:    Size  Location     Type
 16838 ;;  dev             1    wreg     PTR const struct bme280_
 16839 ;;		 -> EnvSensor(51), 
 16840 ;; Auto vars:     Size  Location     Type
 16841 ;;  dev             1    3[COMMON] PTR const struct bme280_
 16842 ;;		 -> EnvSensor(51), 
 16843 ;;  rslt            1    2[COMMON] char 
 16844 ;; Return value:  Size  Location     Type
 16845 ;;                  1    wreg      char 
 16846 ;; Registers used:
 16847 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16848 ;; Tracked objects:
 16849 ;;		On entry : 1E/0
 16850 ;;		On exit  : 1E/0
 16851 ;;		Unchanged: 1E/0
 16852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16854 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16855 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16856 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16857 ;;Total ram usage:        4 bytes
 16858 ;; Hardware stack levels used:    1
 16859 ;; Hardware stack levels required when called:    3
 16860 ;; This function calls:
 16861 ;;		Nothing
 16862 ;; This function is called by:
 16863 ;;		_bme280_init
 16864 ;;		_bme280_get_regs
 16865 ;;		_bme280_set_regs
 16866 ;;		_bme280_set_sensor_settings
 16867 ;;		_bme280_set_sensor_mode
 16868 ;;		_bme280_get_sensor_mode
 16869 ;;		_bme280_soft_reset
 16870 ;;		_bme280_get_sensor_data
 16871 ;; This function uses a non-reentrant model
 16872 ;;
 16873                           
 16874                           
 16875                           ;psect for function _null_ptr_check
 16876  1AF2                     _null_ptr_check:	
 16877                           
 16878                           ;incstack = 0
 16879                           ; Regs used in _null_ptr_check: [wreg+fsr1l+fsr1h+status,2+status,0]
 16880                           ;null_ptr_check@dev stored from wreg
 16881  1AF2  00F3               	movwf	null_ptr_check@dev
 16882                           
 16883                           ;BME280_driver/bme280.c: 1426: static int8_t null_ptr_check(const struct bme280_dev *dev
      +                          );BME280_driver/bme280.c: 1427: {;BME280_driver/bme280.c: 1428:     int8_t rslt;;BME280_
      +                          driver/bme280.c: 1430:     if ((dev == ((void*)0)) || (dev->read == ((void*)0)) || (dev-
      +                          >write == ((void*)0)) || (dev->delay_ms == ((void*)0)))
 16884  1AF3  0873               	movf	null_ptr_check@dev,w
 16885  1AF4  1903               	btfsc	3,2
 16886  1AF5  2B11               	goto	l238
 16887  1AF6  0873               	movf	null_ptr_check@dev,w
 16888  1AF7  3E03               	addlw	3
 16889  1AF8  0086               	movwf	6
 16890  1AF9  3001               	movlw	1	; select bank2/3
 16891  1AFA  0087               	movwf	7
 16892  1AFB  0016               	moviw fsr1++
 16893  1AFC  0401               	iorwf	1,w
 16894  1AFD  1903               	btfsc	3,2
 16895  1AFE  2B11               	goto	l238
 16896  1AFF  0873               	movf	null_ptr_check@dev,w
 16897  1B00  3E05               	addlw	5
 16898  1B01  0086               	movwf	6
 16899  1B02  3001               	movlw	1	; select bank2/3
 16900  1B03  0087               	movwf	7
 16901  1B04  0016               	moviw fsr1++
 16902  1B05  0401               	iorwf	1,w
 16903  1B06  1903               	btfsc	3,2
 16904  1B07  2B11               	goto	l238
 16905  1B08  0873               	movf	null_ptr_check@dev,w
 16906  1B09  3E07               	addlw	7
 16907  1B0A  0086               	movwf	6
 16908  1B0B  3001               	movlw	1	; select bank2/3
 16909  1B0C  0087               	movwf	7
 16910  1B0D  0016               	moviw fsr1++
 16911  1B0E  0401               	iorwf	1,w
 16912  1B0F  1D03               	btfss	3,2
 16913  1B10  2B14               	goto	l3900
 16914  1B11                     l238:	
 16915                           
 16916                           ;BME280_driver/bme280.c: 1431:     {;BME280_driver/bme280.c: 1433:         rslt = -1;
 16917  1B11  01F2               	clrf	null_ptr_check@rslt
 16918  1B12  03F2               	decf	null_ptr_check@rslt,f
 16919                           
 16920                           ;BME280_driver/bme280.c: 1434:     }
 16921  1B13  2B15               	goto	l3902
 16922  1B14                     l3900:	
 16923                           
 16924                           ;BME280_driver/bme280.c: 1436:     {;BME280_driver/bme280.c: 1438:         rslt = 0;
 16925  1B14  01F2               	clrf	null_ptr_check@rslt
 16926  1B15                     l3902:	
 16927                           
 16928                           ;BME280_driver/bme280.c: 1441:     return rslt;
 16929  1B15  0872               	movf	null_ptr_check@rslt,w
 16930  1B16  0008               	return
 16931  1B17                     __end_of_null_ptr_check:	
 16932                           
 16933                           	psect	text60
 16934  1C37                     __ptext60:	
 16935 ;; *************** function _interleave_reg_addr *****************
 16936 ;; Defined at:
 16937 ;;		line 1343 in file "BME280_driver/bme280.c"
 16938 ;; Parameters:    Size  Location     Type
 16939 ;;  reg_addr        1    wreg     PTR const unsigned char 
 16940 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
 16941 ;;		 -> bme280_soft_reset@reg_addr(1), 
 16942 ;;  temp_buff       1    0[COMMON] PTR unsigned char 
 16943 ;;		 -> bme280_set_regs@temp_buff(20), 
 16944 ;;  reg_data        1    1[COMMON] PTR const unsigned char 
 16945 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
 16946 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
 16947 ;;  len             1    2[COMMON] unsigned char 
 16948 ;; Auto vars:     Size  Location     Type
 16949 ;;  reg_addr        1    6[COMMON] PTR const unsigned char 
 16950 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
 16951 ;;		 -> bme280_soft_reset@reg_addr(1), 
 16952 ;;  index           1    7[COMMON] unsigned char 
 16953 ;; Return value:  Size  Location     Type
 16954 ;;                  1    wreg      void 
 16955 ;; Registers used:
 16956 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16957 ;; Tracked objects:
 16958 ;;		On entry : 1F/0
 16959 ;;		On exit  : 1F/0
 16960 ;;		Unchanged: 1F/0
 16961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16962 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16963 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16964 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16965 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16966 ;;Total ram usage:        8 bytes
 16967 ;; Hardware stack levels used:    1
 16968 ;; Hardware stack levels required when called:    3
 16969 ;; This function calls:
 16970 ;;		Nothing
 16971 ;; This function is called by:
 16972 ;;		_bme280_set_regs
 16973 ;; This function uses a non-reentrant model
 16974 ;;
 16975                           
 16976                           
 16977                           ;psect for function _interleave_reg_addr
 16978  1C37                     _interleave_reg_addr:	
 16979                           
 16980                           ;incstack = 0
 16981                           ; Regs used in _interleave_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0]
 16982                           ;interleave_reg_addr@reg_addr stored from wreg
 16983  1C37  00F6               	movwf	interleave_reg_addr@reg_addr
 16984                           
 16985                           ;BME280_driver/bme280.c: 1343: static void interleave_reg_addr(const uint8_t *reg_addr, 
      +                          uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len);BME280_driver/bme280.c: 1344: 
      +                          {;BME280_driver/bme280.c: 1345:     uint8_t index;;BME280_driver/bme280.c: 1347:     for
      +                           (index = 1; index < len; index++)
 16986  1C38  01F7               	clrf	interleave_reg_addr@index
 16987  1C39  0AF7               	incf	interleave_reg_addr@index,f
 16988  1C3A                     l3912:	
 16989  1C3A  0872               	movf	interleave_reg_addr@len,w
 16990  1C3B  0277               	subwf	interleave_reg_addr@index,w
 16991  1C3C  1803               	btfsc	3,0
 16992  1C3D  0008               	return
 16993                           
 16994                           ;BME280_driver/bme280.c: 1348:     {;BME280_driver/bme280.c: 1349:         temp_buff[(in
      +                          dex * 2) - 1] = reg_addr[index];
 16995  1C3E  0877               	movf	interleave_reg_addr@index,w
 16996  1C3F  0776               	addwf	interleave_reg_addr@reg_addr,w
 16997  1C40  00F3               	movwf	??_interleave_reg_addr
 16998  1C41  0873               	movf	??_interleave_reg_addr,w
 16999  1C42  0086               	movwf	6
 17000  1C43  0187               	clrf	7
 17001  1C44  0801               	movf	1,w
 17002  1C45  00F4               	movwf	??_interleave_reg_addr+1
 17003  1C46  3577               	lslf	interleave_reg_addr@index,w
 17004  1C47  0770               	addwf	interleave_reg_addr@temp_buff,w
 17005  1C48  00F5               	movwf	??_interleave_reg_addr+2
 17006  1C49  0875               	movf	??_interleave_reg_addr+2,w
 17007  1C4A  3EFF               	addlw	-1
 17008  1C4B  0086               	movwf	6
 17009  1C4C  0187               	clrf	7
 17010  1C4D  0874               	movf	??_interleave_reg_addr+1,w
 17011  1C4E  0081               	movwf	1
 17012                           
 17013                           ;BME280_driver/bme280.c: 1350:         temp_buff[index * 2] = reg_data[index];
 17014  1C4F  0877               	movf	interleave_reg_addr@index,w
 17015  1C50  0771               	addwf	interleave_reg_addr@reg_data,w
 17016  1C51  00F3               	movwf	??_interleave_reg_addr
 17017  1C52  0873               	movf	??_interleave_reg_addr,w
 17018  1C53  0086               	movwf	6
 17019  1C54  0187               	clrf	7
 17020  1C55  0801               	movf	1,w
 17021  1C56  00F4               	movwf	??_interleave_reg_addr+1
 17022  1C57  3577               	lslf	interleave_reg_addr@index,w
 17023  1C58  0770               	addwf	interleave_reg_addr@temp_buff,w
 17024  1C59  00F5               	movwf	??_interleave_reg_addr+2
 17025  1C5A  0875               	movf	??_interleave_reg_addr+2,w
 17026  1C5B  0086               	movwf	6
 17027  1C5C  0187               	clrf	7
 17028  1C5D  0874               	movf	??_interleave_reg_addr+1,w
 17029  1C5E  0081               	movwf	1
 17030                           
 17031                           ;BME280_driver/bme280.c: 1351:     }
 17032  1C5F  3001               	movlw	1
 17033  1C60  00F3               	movwf	??_interleave_reg_addr
 17034  1C61  0873               	movf	??_interleave_reg_addr,w
 17035  1C62  07F7               	addwf	interleave_reg_addr@index,f
 17036  1C63  2C3A               	goto	l3912
 17037  1C64                     __end_of_interleave_reg_addr:	
 17038                           
 17039                           	psect	text61
 17040  142B                     __ptext61:	
 17041 ;; *************** function _WriteEnvSensor *****************
 17042 ;; Defined at:
 17043 ;;		line 156 in file "bme280_i2c.c"
 17044 ;; Parameters:    Size  Location     Type
 17045 ;;  dev_id          1   15[BANK0 ] unsigned char 
 17046 ;;  reg_addr        1   16[BANK0 ] unsigned char 
 17047 ;;  reg_data        1   17[BANK0 ] PTR unsigned char 
 17048 ;;		 -> bme280_set_regs@temp_buff(20), 
 17049 ;;  len             2   18[BANK0 ] unsigned short 
 17050 ;; Auto vars:     Size  Location     Type
 17051 ;;  i               2   25[BANK0 ] int 
 17052 ;;  rslt            1   24[BANK0 ] char 
 17053 ;; Return value:  Size  Location     Type
 17054 ;;                  1    wreg      char 
 17055 ;; Registers used:
 17056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17057 ;; Tracked objects:
 17058 ;;		On entry : 1F/0
 17059 ;;		On exit  : 1F/0
 17060 ;;		Unchanged: 0/0
 17061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17062 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17063 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17064 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17065 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17066 ;;Total ram usage:       12 bytes
 17067 ;; Hardware stack levels used:    1
 17068 ;; Hardware stack levels required when called:    8
 17069 ;; This function calls:
 17070 ;;		_DebugAlert
 17071 ;;		_I2C_Stop
 17072 ;;		_I2C_WriteByte
 17073 ;; This function is called by:
 17074 ;;		_BME280_Init
 17075 ;;		_bme280_set_regs
 17076 ;; This function uses a non-reentrant model
 17077 ;;
 17078                           
 17079                           
 17080                           ;psect for function _WriteEnvSensor
 17081  142B                     _WriteEnvSensor:	
 17082                           
 17083                           ;bme280_i2c.c: 156: int8_t WriteEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg
      +                          _data, uint16_t len);bme280_i2c.c: 157: {;bme280_i2c.c: 158:     int8_t rslt = 0;
 17084                           
 17085                           ;incstack = 0
 17086                           ; Regs used in _WriteEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17087  142B  01B8               	clrf	WriteEnvSensor@rslt
 17088                           
 17089                           ;bme280_i2c.c: 160:     PIR1bits.SSP1IF = 0;
 17090  142C  1190               	bcf	16,3	;volatile
 17091                           
 17092                           ;bme280_i2c.c: 163:     SSP1CON2bits.SEN = 1;
 17093  142D  0024               	movlb	4	; select bank4
 17094  142E  1416               	bsf	22,0	;volatile
 17095                           
 17096                           ;bme280_i2c.c: 164:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if 
      +                          (ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1
      +                          IF = 0;;
 17097  142F  0021               	movlb	1	; select bank1
 17098  1430  086B               	movf	(_ticks+3)^(0+128),w
 17099  1431  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 17100  1432  086A               	movf	(_ticks+2)^(0+128),w
 17101  1433  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 17102  1434  0869               	movf	(_ticks+1)^(0+128),w
 17103  1435  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 17104  1436  0868               	movf	_ticks^(0+128),w
 17105  1437  00EC               	movwf	___g_timeout_start^(0+128)
 17106  1438                     l645:	
 17107  1438  0020               	movlb	0	; select bank0
 17108  1439  1990               	btfsc	16,3	;volatile
 17109  143A  2C6A               	goto	l648
 17110  143B  0021               	movlb	1	; select bank1
 17111  143C  086C               	movf	___g_timeout_start^(0+128),w
 17112  143D  0268               	subwf	_ticks^(0+128),w
 17113  143E  0020               	movlb	0	; select bank0
 17114  143F  00B4               	movwf	??_WriteEnvSensor
 17115  1440  0021               	movlb	1	; select bank1
 17116  1441  086D               	movf	(___g_timeout_start+1)^(0+128),w
 17117  1442  3B69               	subwfb	(_ticks+1)^(0+128),w
 17118  1443  0020               	movlb	0	; select bank0
 17119  1444  00B5               	movwf	??_WriteEnvSensor+1
 17120  1445  0021               	movlb	1	; select bank1
 17121  1446  086E               	movf	(___g_timeout_start+2)^(0+128),w
 17122  1447  3B6A               	subwfb	(_ticks+2)^(0+128),w
 17123  1448  0020               	movlb	0	; select bank0
 17124  1449  00B6               	movwf	??_WriteEnvSensor+2
 17125  144A  0021               	movlb	1	; select bank1
 17126  144B  086F               	movf	(___g_timeout_start+3)^(0+128),w
 17127  144C  3B6B               	subwfb	(_ticks+3)^(0+128),w
 17128  144D  0020               	movlb	0	; select bank0
 17129  144E  00B7               	movwf	??_WriteEnvSensor+3
 17130  144F  0837               	movf	??_WriteEnvSensor+3,w
 17131  1450  1D03               	btfss	3,2
 17132  1451  2C5B               	goto	l3966
 17133  1452  0836               	movf	??_WriteEnvSensor+2,w
 17134  1453  1D03               	btfss	3,2
 17135  1454  2C5B               	goto	l3966
 17136  1455  30B9               	movlw	185
 17137  1456  0234               	subwf	??_WriteEnvSensor,w
 17138  1457  300B               	movlw	11
 17139  1458  3B35               	subwfb	??_WriteEnvSensor+1,w
 17140  1459  1C03               	btfss	3,0
 17141  145A  2C38               	goto	l645
 17142  145B                     l3966:	
 17143  145B  30C8               	movlw	200
 17144  145C  00A0               	movwf	DebugAlert@delay_high
 17145  145D  3000               	movlw	0
 17146  145E  00A1               	movwf	DebugAlert@delay_high+1
 17147  145F  30C8               	movlw	200
 17148  1460  00A2               	movwf	DebugAlert@delay_low
 17149  1461  3000               	movlw	0
 17150  1462  00A3               	movwf	DebugAlert@delay_low+1
 17151  1463  3003               	movlw	3
 17152  1464  00B4               	movwf	??_WriteEnvSensor
 17153  1465  0834               	movf	??_WriteEnvSensor,w
 17154  1466  00A4               	movwf	DebugAlert@num_flashes
 17155  1467  319B  23E1  3194   	fcall	_DebugAlert
 17156  146A                     l648:	
 17157  146A  0020               	movlb	0	; select bank0
 17158  146B  1190               	bcf	16,3	;volatile
 17159                           
 17160                           ;bme280_i2c.c: 167:     I2C_WriteByte(dev_id<<1);
 17161  146C  352F               	lslf	WriteEnvSensor@dev_id,w
 17162  146D  319F  2728  3194   	fcall	_I2C_WriteByte
 17163                           
 17164                           ;bme280_i2c.c: 170:     I2C_WriteByte(reg_addr);
 17165  1470  0020               	movlb	0	; select bank0
 17166  1471  0830               	movf	WriteEnvSensor@reg_addr,w
 17167  1472  319F  2728  3194   	fcall	_I2C_WriteByte
 17168                           
 17169                           ;bme280_i2c.c: 172:     for(int i = 0; i < len; i++){
 17170  1475  0020               	movlb	0	; select bank0
 17171  1476  01B9               	clrf	WriteEnvSensor@i
 17172  1477  01BA               	clrf	WriteEnvSensor@i+1
 17173  1478                     l3976:	
 17174  1478  0833               	movf	WriteEnvSensor@len+1,w
 17175  1479  023A               	subwf	WriteEnvSensor@i+1,w
 17176  147A  1D03               	skipz
 17177  147B  2C7E               	goto	u4215
 17178  147C  0832               	movf	WriteEnvSensor@len,w
 17179  147D  0239               	subwf	WriteEnvSensor@i,w
 17180  147E                     u4215:	
 17181  147E  1803               	btfsc	3,0
 17182  147F  2C90               	goto	l3978
 17183                           
 17184                           ;bme280_i2c.c: 173:         I2C_WriteByte(reg_data[i]);
 17185  1480  0839               	movf	WriteEnvSensor@i,w
 17186  1481  0731               	addwf	WriteEnvSensor@reg_data,w
 17187  1482  00B4               	movwf	??_WriteEnvSensor
 17188  1483  0834               	movf	??_WriteEnvSensor,w
 17189  1484  0086               	movwf	6
 17190  1485  0187               	clrf	7
 17191  1486  0801               	movf	1,w
 17192  1487  319F  2728  3194   	fcall	_I2C_WriteByte
 17193                           
 17194                           ;bme280_i2c.c: 174:     }
 17195  148A  3001               	movlw	1
 17196  148B  0020               	movlb	0	; select bank0
 17197  148C  07B9               	addwf	WriteEnvSensor@i,f
 17198  148D  3000               	movlw	0
 17199  148E  3DBA               	addwfc	WriteEnvSensor@i+1,f
 17200  148F  2C78               	goto	l3976
 17201  1490                     l3978:	
 17202                           
 17203                           ;bme280_i2c.c: 176:     I2C_Stop();
 17204  1490  319D  25E2         	fcall	_I2C_Stop
 17205                           
 17206                           ;bme280_i2c.c: 178:     return rslt;
 17207  1492  0838               	movf	WriteEnvSensor@rslt,w
 17208  1493  0008               	return
 17209  1494                     __end_of_WriteEnvSensor:	
 17210                           
 17211                           	psect	text62
 17212  1F28                     __ptext62:	
 17213 ;; *************** function _I2C_WriteByte *****************
 17214 ;; Defined at:
 17215 ;;		line 31 in file "bme280_i2c.c"
 17216 ;; Parameters:    Size  Location     Type
 17217 ;;  data            1    wreg     unsigned char 
 17218 ;; Auto vars:     Size  Location     Type
 17219 ;;  data            1   13[COMMON] unsigned char 
 17220 ;; Return value:  Size  Location     Type
 17221 ;;                  1    wreg      void 
 17222 ;; Registers used:
 17223 ;;		wreg, status,2, status,0, pclath, cstack
 17224 ;; Tracked objects:
 17225 ;;		On entry : 1F/0
 17226 ;;		On exit  : 1B/0
 17227 ;;		Unchanged: 0/0
 17228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17231 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17232 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17233 ;;Total ram usage:        5 bytes
 17234 ;; Hardware stack levels used:    1
 17235 ;; Hardware stack levels required when called:    7
 17236 ;; This function calls:
 17237 ;;		_DebugAlert
 17238 ;;		_I2C_UserAlert
 17239 ;; This function is called by:
 17240 ;;		_ReadEnvSensor
 17241 ;;		_WriteEnvSensor
 17242 ;; This function uses a non-reentrant model
 17243 ;;
 17244                           
 17245                           
 17246                           ;psect for function _I2C_WriteByte
 17247  1F28                     _I2C_WriteByte:	
 17248                           
 17249                           ;incstack = 0
 17250                           ; Regs used in _I2C_WriteByte: [wreg+status,2+status,0+pclath+cstack]
 17251                           ;I2C_WriteByte@data stored from wreg
 17252  1F28  00FD               	movwf	I2C_WriteByte@data
 17253                           
 17254                           ;bme280_i2c.c: 31: void I2C_WriteByte(uint8_t data);bme280_i2c.c: 32: {;bme280_i2c.c: 33
      +                          :     SSP1BUF = data;
 17255  1F29  087D               	movf	I2C_WriteByte@data,w
 17256  1F2A  0024               	movlb	4	; select bank4
 17257  1F2B  0091               	movwf	17	;volatile
 17258                           
 17259                           ;bme280_i2c.c: 34:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if (
      +                          ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1I
      +                          F = 0;;
 17260  1F2C  0021               	movlb	1	; select bank1
 17261  1F2D  086B               	movf	(_ticks+3)^(0+128),w
 17262  1F2E  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 17263  1F2F  086A               	movf	(_ticks+2)^(0+128),w
 17264  1F30  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 17265  1F31  0869               	movf	(_ticks+1)^(0+128),w
 17266  1F32  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 17267  1F33  0868               	movf	_ticks^(0+128),w
 17268  1F34  00EC               	movwf	___g_timeout_start^(0+128)
 17269  1F35                     l593:	
 17270  1F35  0020               	movlb	0	; select bank0
 17271  1F36  1990               	btfsc	16,3	;volatile
 17272  1F37  2F67               	goto	l596
 17273  1F38  0021               	movlb	1	; select bank1
 17274  1F39  086C               	movf	___g_timeout_start^(0+128),w
 17275  1F3A  0268               	subwf	_ticks^(0+128),w
 17276  1F3B  0020               	movlb	0	; select bank0
 17277  1F3C  00AB               	movwf	??_I2C_WriteByte
 17278  1F3D  0021               	movlb	1	; select bank1
 17279  1F3E  086D               	movf	(___g_timeout_start+1)^(0+128),w
 17280  1F3F  3B69               	subwfb	(_ticks+1)^(0+128),w
 17281  1F40  0020               	movlb	0	; select bank0
 17282  1F41  00AC               	movwf	??_I2C_WriteByte+1
 17283  1F42  0021               	movlb	1	; select bank1
 17284  1F43  086E               	movf	(___g_timeout_start+2)^(0+128),w
 17285  1F44  3B6A               	subwfb	(_ticks+2)^(0+128),w
 17286  1F45  0020               	movlb	0	; select bank0
 17287  1F46  00AD               	movwf	??_I2C_WriteByte+2
 17288  1F47  0021               	movlb	1	; select bank1
 17289  1F48  086F               	movf	(___g_timeout_start+3)^(0+128),w
 17290  1F49  3B6B               	subwfb	(_ticks+3)^(0+128),w
 17291  1F4A  0020               	movlb	0	; select bank0
 17292  1F4B  00AE               	movwf	??_I2C_WriteByte+3
 17293  1F4C  082E               	movf	??_I2C_WriteByte+3,w
 17294  1F4D  1D03               	btfss	3,2
 17295  1F4E  2F58               	goto	l3862
 17296  1F4F  082D               	movf	??_I2C_WriteByte+2,w
 17297  1F50  1D03               	btfss	3,2
 17298  1F51  2F58               	goto	l3862
 17299  1F52  30B9               	movlw	185
 17300  1F53  022B               	subwf	??_I2C_WriteByte,w
 17301  1F54  300B               	movlw	11
 17302  1F55  3B2C               	subwfb	??_I2C_WriteByte+1,w
 17303  1F56  1C03               	btfss	3,0
 17304  1F57  2F35               	goto	l593
 17305  1F58                     l3862:	
 17306  1F58  30C8               	movlw	200
 17307  1F59  00A0               	movwf	DebugAlert@delay_high
 17308  1F5A  3000               	movlw	0
 17309  1F5B  00A1               	movwf	DebugAlert@delay_high+1
 17310  1F5C  30C8               	movlw	200
 17311  1F5D  00A2               	movwf	DebugAlert@delay_low
 17312  1F5E  3000               	movlw	0
 17313  1F5F  00A3               	movwf	DebugAlert@delay_low+1
 17314  1F60  3003               	movlw	3
 17315  1F61  00AB               	movwf	??_I2C_WriteByte
 17316  1F62  082B               	movf	??_I2C_WriteByte,w
 17317  1F63  00A4               	movwf	DebugAlert@num_flashes
 17318  1F64  319B  23E1  319F   	fcall	_DebugAlert
 17319  1F67                     l596:	
 17320  1F67  0020               	movlb	0	; select bank0
 17321  1F68  1190               	bcf	16,3	;volatile
 17322                           
 17323                           ;bme280_i2c.c: 37:     if(SSP1CON2bits.ACKSTAT!=0){
 17324  1F69  0024               	movlb	4	; select bank4
 17325  1F6A  1F16               	btfss	22,6	;volatile
 17326  1F6B  0008               	return
 17327                           
 17328                           ;bme280_i2c.c: 38:         I2C_UserAlert(I2C_ERROR_WRITE_NO_ACK);
 17329  1F6C  3001               	movlw	1
 17330  1F6D  3187  27FD         	fcall	_I2C_UserAlert
 17331  1F6F  0008               	return
 17332  1F70                     __end_of_I2C_WriteByte:	
 17333                           
 17334                           	psect	text63
 17335  07FD                     __ptext63:	
 17336 ;; *************** function _I2C_UserAlert *****************
 17337 ;; Defined at:
 17338 ;;		line 67 in file "bme280_i2c.c"
 17339 ;; Parameters:    Size  Location     Type
 17340 ;;  status          1    wreg     enum E10053
 17341 ;; Auto vars:     Size  Location     Type
 17342 ;;  status          1    0[COMMON] enum E10053
 17343 ;; Return value:  Size  Location     Type
 17344 ;;                  1    wreg      void 
 17345 ;; Registers used:
 17346 ;;		wreg, status,2, status,0, pclath, cstack
 17347 ;; Tracked objects:
 17348 ;;		On entry : 1F/4
 17349 ;;		On exit  : 1F/0
 17350 ;;		Unchanged: 0/0
 17351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17356 ;;Total ram usage:        0 bytes
 17357 ;; Hardware stack levels used:    1
 17358 ;; Hardware stack levels required when called:    6
 17359 ;; This function calls:
 17360 ;;		_I2C_Stop
 17361 ;; This function is called by:
 17362 ;;		_I2C_WriteByte
 17363 ;; This function uses a non-reentrant model
 17364 ;;
 17365                           
 17366                           
 17367                           ;psect for function _I2C_UserAlert
 17368  07FD                     _I2C_UserAlert:	
 17369                           
 17370                           ;bme280_i2c.c: 67: void I2C_UserAlert(I2C_ERROR status);bme280_i2c.c: 68: {;bme280_i2c.c
      +                          : 69:     I2C_Stop();
 17371                           
 17372                           ;incstack = 0
 17373                           ; Regs used in _I2C_UserAlert: [wreg+status,2+status,0+pclath+cstack]
 17374  07FD  319D  25E2         	fcall	_I2C_Stop
 17375  07FF  0008               	return
 17376  0800                     __end_of_I2C_UserAlert:	
 17377                           
 17378                           	psect	text64
 17379  1DE2                     __ptext64:	
 17380 ;; *************** function _I2C_Stop *****************
 17381 ;; Defined at:
 17382 ;;		line 61 in file "bme280_i2c.c"
 17383 ;; Parameters:    Size  Location     Type
 17384 ;;		None
 17385 ;; Auto vars:     Size  Location     Type
 17386 ;;		None
 17387 ;; Return value:  Size  Location     Type
 17388 ;;                  1    wreg      void 
 17389 ;; Registers used:
 17390 ;;		wreg, status,2, status,0, pclath, cstack
 17391 ;; Tracked objects:
 17392 ;;		On entry : 1B/0
 17393 ;;		On exit  : 1F/0
 17394 ;;		Unchanged: 0/0
 17395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17398 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17399 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17400 ;;Total ram usage:        4 bytes
 17401 ;; Hardware stack levels used:    1
 17402 ;; Hardware stack levels required when called:    5
 17403 ;; This function calls:
 17404 ;;		_DebugAlert
 17405 ;; This function is called by:
 17406 ;;		_I2C_UserAlert
 17407 ;;		_ReadEnvSensor
 17408 ;;		_WriteEnvSensor
 17409 ;; This function uses a non-reentrant model
 17410 ;;
 17411                           
 17412                           
 17413                           ;psect for function _I2C_Stop
 17414  1DE2                     _I2C_Stop:	
 17415                           
 17416                           ;bme280_i2c.c: 63:     SSP1CON2bits.PEN = 1;
 17417                           
 17418                           ;incstack = 0
 17419                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
 17420  1DE2  0024               	movlb	4	; select bank4
 17421  1DE3  1516               	bsf	22,2	;volatile
 17422                           
 17423                           ;bme280_i2c.c: 64:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if (
      +                          ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1I
      +                          F = 0;;
 17424  1DE4  0021               	movlb	1	; select bank1
 17425  1DE5  086B               	movf	(_ticks+3)^(0+128),w
 17426  1DE6  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 17427  1DE7  086A               	movf	(_ticks+2)^(0+128),w
 17428  1DE8  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 17429  1DE9  0869               	movf	(_ticks+1)^(0+128),w
 17430  1DEA  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 17431  1DEB  0868               	movf	_ticks^(0+128),w
 17432  1DEC  00EC               	movwf	___g_timeout_start^(0+128)
 17433  1DED                     l612:	
 17434  1DED  0020               	movlb	0	; select bank0
 17435  1DEE  1990               	btfsc	16,3	;volatile
 17436  1DEF  2E1E               	goto	l615
 17437  1DF0  0021               	movlb	1	; select bank1
 17438  1DF1  086C               	movf	___g_timeout_start^(0+128),w
 17439  1DF2  0268               	subwf	_ticks^(0+128),w
 17440  1DF3  0020               	movlb	0	; select bank0
 17441  1DF4  00A7               	movwf	??_I2C_Stop
 17442  1DF5  0021               	movlb	1	; select bank1
 17443  1DF6  086D               	movf	(___g_timeout_start+1)^(0+128),w
 17444  1DF7  3B69               	subwfb	(_ticks+1)^(0+128),w
 17445  1DF8  0020               	movlb	0	; select bank0
 17446  1DF9  00A8               	movwf	??_I2C_Stop+1
 17447  1DFA  0021               	movlb	1	; select bank1
 17448  1DFB  086E               	movf	(___g_timeout_start+2)^(0+128),w
 17449  1DFC  3B6A               	subwfb	(_ticks+2)^(0+128),w
 17450  1DFD  0020               	movlb	0	; select bank0
 17451  1DFE  00A9               	movwf	??_I2C_Stop+2
 17452  1DFF  0021               	movlb	1	; select bank1
 17453  1E00  086F               	movf	(___g_timeout_start+3)^(0+128),w
 17454  1E01  3B6B               	subwfb	(_ticks+3)^(0+128),w
 17455  1E02  0020               	movlb	0	; select bank0
 17456  1E03  00AA               	movwf	??_I2C_Stop+3
 17457  1E04  082A               	movf	??_I2C_Stop+3,w
 17458  1E05  1D03               	btfss	3,2
 17459  1E06  2E10               	goto	l3854
 17460  1E07  0829               	movf	??_I2C_Stop+2,w
 17461  1E08  1D03               	btfss	3,2
 17462  1E09  2E10               	goto	l3854
 17463  1E0A  30B9               	movlw	185
 17464  1E0B  0227               	subwf	??_I2C_Stop,w
 17465  1E0C  300B               	movlw	11
 17466  1E0D  3B28               	subwfb	??_I2C_Stop+1,w
 17467  1E0E  1C03               	btfss	3,0
 17468  1E0F  2DED               	goto	l612
 17469  1E10                     l3854:	
 17470  1E10  30C8               	movlw	200
 17471  1E11  00A0               	movwf	DebugAlert@delay_high
 17472  1E12  3000               	movlw	0
 17473  1E13  00A1               	movwf	DebugAlert@delay_high+1
 17474  1E14  30C8               	movlw	200
 17475  1E15  00A2               	movwf	DebugAlert@delay_low
 17476  1E16  3000               	movlw	0
 17477  1E17  00A3               	movwf	DebugAlert@delay_low+1
 17478  1E18  3003               	movlw	3
 17479  1E19  00A7               	movwf	??_I2C_Stop
 17480  1E1A  0827               	movf	??_I2C_Stop,w
 17481  1E1B  00A4               	movwf	DebugAlert@num_flashes
 17482  1E1C  319B  23E1         	fcall	_DebugAlert
 17483  1E1E                     l615:	
 17484  1E1E  0020               	movlb	0	; select bank0
 17485  1E1F  1190               	bcf	16,3	;volatile
 17486  1E20  0008               	return
 17487  1E21                     __end_of_I2C_Stop:	
 17488                           
 17489                           	psect	text65
 17490  1BE1                     __ptext65:	
 17491 ;; *************** function _DebugAlert *****************
 17492 ;; Defined at:
 17493 ;;		line 4 in file "debug.c"
 17494 ;; Parameters:    Size  Location     Type
 17495 ;;  delay_high      2    0[BANK0 ] unsigned int 
 17496 ;;  delay_low       2    2[BANK0 ] unsigned int 
 17497 ;;  num_flashes     1    4[BANK0 ] unsigned char 
 17498 ;; Auto vars:     Size  Location     Type
 17499 ;;  i               2    5[BANK0 ] int 
 17500 ;; Return value:  Size  Location     Type
 17501 ;;                  1    wreg      void 
 17502 ;; Registers used:
 17503 ;;		wreg, status,2, status,0, pclath, cstack
 17504 ;; Tracked objects:
 17505 ;;		On entry : 1F/0
 17506 ;;		On exit  : 0/0
 17507 ;;		Unchanged: 0/0
 17508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17509 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17510 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17512 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17513 ;;Total ram usage:        8 bytes
 17514 ;; Hardware stack levels used:    1
 17515 ;; Hardware stack levels required when called:    4
 17516 ;; This function calls:
 17517 ;;		_Sleep
 17518 ;; This function is called by:
 17519 ;;		_I2C_WriteByte
 17520 ;;		_I2C_ReadByte
 17521 ;;		_I2C_Stop
 17522 ;;		_BME280_Init
 17523 ;;		_ReadEnvSensor
 17524 ;;		_WriteEnvSensor
 17525 ;; This function uses a non-reentrant model
 17526 ;;
 17527                           
 17528                           
 17529                           ;psect for function _DebugAlert
 17530  1BE1                     _DebugAlert:	
 17531                           
 17532                           ;debug.c: 4: void DebugAlert(unsigned int delay_high, unsigned int delay_low, uint8_t nu
      +                          m_flashes);debug.c: 5: {;debug.c: 7:     for (int i = 0; i < num_flashes; i++)
 17533                           
 17534                           ;incstack = 0
 17535                           ; Regs used in _DebugAlert: [wreg+status,2+status,0+pclath+cstack]
 17536  1BE1  01A5               	clrf	DebugAlert@i
 17537  1BE2  01A6               	clrf	DebugAlert@i+1
 17538  1BE3                     l3846:	
 17539  1BE3  0826               	movf	DebugAlert@i+1,w
 17540  1BE4  3A80               	xorlw	128
 17541  1BE5  00FC               	movwf	??_DebugAlert
 17542  1BE6  3080               	movlw	128
 17543  1BE7  027C               	subwf	??_DebugAlert,w
 17544  1BE8  1D03               	skipz
 17545  1BE9  2BEC               	goto	u3985
 17546  1BEA  0824               	movf	DebugAlert@num_flashes,w
 17547  1BEB  0225               	subwf	DebugAlert@i,w
 17548  1BEC                     u3985:	
 17549  1BEC  1803               	btfsc	3,0
 17550  1BED  0008               	return
 17551                           
 17552                           ;debug.c: 8:     {;debug.c: 9:         do { LATCbits.LATC5 = 1; } while(0);
 17553  1BEE  0022               	movlb	2	; select bank2
 17554  1BEF  168E               	bsf	14,5	;volatile
 17555                           
 17556                           ;debug.c: 10:         Sleep(delay_high);
 17557  1BF0  0020               	movlb	0	; select bank0
 17558  1BF1  0820               	movf	DebugAlert@delay_high,w
 17559  1BF2  00F0               	movwf	Sleep@ms
 17560  1BF3  0821               	movf	DebugAlert@delay_high+1,w
 17561  1BF4  00F1               	movwf	Sleep@ms+1
 17562  1BF5  01F2               	clrf	Sleep@ms+2
 17563  1BF6  01F3               	clrf	Sleep@ms+3
 17564  1BF7  319B  23B6  319B   	fcall	_Sleep
 17565  1BFA  0022               	movlb	2	; select bank2
 17566  1BFB  128E               	bcf	14,5	;volatile
 17567                           
 17568                           ;debug.c: 12:         Sleep(delay_low);
 17569  1BFC  0020               	movlb	0	; select bank0
 17570  1BFD  0822               	movf	DebugAlert@delay_low,w
 17571  1BFE  00F0               	movwf	Sleep@ms
 17572  1BFF  0823               	movf	DebugAlert@delay_low+1,w
 17573  1C00  00F1               	movwf	Sleep@ms+1
 17574  1C01  01F2               	clrf	Sleep@ms+2
 17575  1C02  01F3               	clrf	Sleep@ms+3
 17576  1C03  319B  23B6  319B   	fcall	_Sleep
 17577                           
 17578                           ;debug.c: 13:     }
 17579  1C06  3001               	movlw	1
 17580  1C07  0020               	movlb	0	; select bank0
 17581  1C08  07A5               	addwf	DebugAlert@i,f
 17582  1C09  3000               	movlw	0
 17583  1C0A  3DA6               	addwfc	DebugAlert@i+1,f
 17584  1C0B  2BE3               	goto	l3846
 17585  1C0C                     __end_of_DebugAlert:	
 17586                           
 17587                           	psect	text66
 17588  1BB6                     __ptext66:	
 17589 ;; *************** function _Sleep *****************
 17590 ;; Defined at:
 17591 ;;		line 17 in file "timing.c"
 17592 ;; Parameters:    Size  Location     Type
 17593 ;;  ms              4    0[COMMON] unsigned long 
 17594 ;; Auto vars:     Size  Location     Type
 17595 ;;  start           4    8[COMMON] unsigned long 
 17596 ;; Return value:  Size  Location     Type
 17597 ;;                  1    wreg      void 
 17598 ;; Registers used:
 17599 ;;		wreg
 17600 ;; Tracked objects:
 17601 ;;		On entry : 1F/0
 17602 ;;		On exit  : 1F/1
 17603 ;;		Unchanged: 0/0
 17604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17605 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17606 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17607 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17608 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17609 ;;Total ram usage:       12 bytes
 17610 ;; Hardware stack levels used:    1
 17611 ;; Hardware stack levels required when called:    3
 17612 ;; This function calls:
 17613 ;;		Nothing
 17614 ;; This function is called by:
 17615 ;;		_BME280_Init
 17616 ;;		_DebugAlert
 17617 ;;		_bme280_soft_reset
 17618 ;;		_bme280_init
 17619 ;; This function uses a non-reentrant model
 17620 ;;
 17621                           
 17622                           
 17623                           ;psect for function _Sleep
 17624  1BB6                     _Sleep:	
 17625                           
 17626                           ;timing.c: 17: void Sleep(uint32_t ms);timing.c: 18: {;timing.c: 19:     unsigned long s
      +                          tart = ticks;
 17627                           
 17628                           ;incstack = 0
 17629                           ; Regs used in _Sleep: [wreg]
 17630  1BB6  0021               	movlb	1	; select bank1
 17631  1BB7  086B               	movf	(_ticks+3)^(0+128),w
 17632  1BB8  00FB               	movwf	Sleep@start+3
 17633  1BB9  086A               	movf	(_ticks+2)^(0+128),w
 17634  1BBA  00FA               	movwf	Sleep@start+2
 17635  1BBB  0869               	movf	(_ticks+1)^(0+128),w
 17636  1BBC  00F9               	movwf	Sleep@start+1
 17637  1BBD  0868               	movf	_ticks^(0+128),w
 17638  1BBE  00F8               	movwf	Sleep@start
 17639  1BBF                     l669:	
 17640                           ;timing.c: 23:     }
 17641                           
 17642                           ;timing.c: 20:     while (ticks - start < ms)
 17643                           
 17644                           
 17645                           ;timing.c: 20:     while (ticks - start < ms)
 17646  1BBF  0878               	movf	Sleep@start,w
 17647  1BC0  0021               	movlb	1	; select bank1
 17648  1BC1  0268               	subwf	_ticks^(0+128),w
 17649  1BC2  00F4               	movwf	??_Sleep
 17650  1BC3  0879               	movf	Sleep@start+1,w
 17651  1BC4  3B69               	subwfb	(_ticks+1)^(0+128),w
 17652  1BC5  00F5               	movwf	??_Sleep+1
 17653  1BC6  087A               	movf	Sleep@start+2,w
 17654  1BC7  3B6A               	subwfb	(_ticks+2)^(0+128),w
 17655  1BC8  00F6               	movwf	??_Sleep+2
 17656  1BC9  087B               	movf	Sleep@start+3,w
 17657  1BCA  3B6B               	subwfb	(_ticks+3)^(0+128),w
 17658  1BCB  00F7               	movwf	??_Sleep+3
 17659  1BCC  0873               	movf	Sleep@ms+3,w
 17660  1BCD  0277               	subwf	??_Sleep+3,w
 17661  1BCE  1D03               	skipz
 17662  1BCF  2BDA               	goto	u3975
 17663  1BD0  0872               	movf	Sleep@ms+2,w
 17664  1BD1  0276               	subwf	??_Sleep+2,w
 17665  1BD2  1D03               	skipz
 17666  1BD3  2BDA               	goto	u3975
 17667  1BD4  0871               	movf	Sleep@ms+1,w
 17668  1BD5  0275               	subwf	??_Sleep+1,w
 17669  1BD6  1D03               	skipz
 17670  1BD7  2BDA               	goto	u3975
 17671  1BD8  0870               	movf	Sleep@ms,w
 17672  1BD9  0274               	subwf	??_Sleep,w
 17673  1BDA                     u3975:	
 17674  1BDA  1803               	btfsc	3,0
 17675  1BDB  0008               	return
 17676                           
 17677                           ;timing.c: 21:     {;timing.c: 22:         _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;
 17678  1BDC  30C8               	movlw	200
 17679  1BDD                     u5297:	
 17680  1BDD  3200               	nop2
 17681  1BDE  0B89               	decfsz	9,f
 17682  1BDF  2BDD               	goto	u5297
 17683  1BE0  2BBF               	goto	l669
 17684  1BE1                     __end_of_Sleep:	
 17685                           
 17686                           	psect	text67
 17687  1A07                     __ptext67:	
 17688 ;; *************** function _I2C_Init *****************
 17689 ;; Defined at:
 17690 ;;		line 16 in file "bme280_i2c.c"
 17691 ;; Parameters:    Size  Location     Type
 17692 ;;		None
 17693 ;; Auto vars:     Size  Location     Type
 17694 ;;		None
 17695 ;; Return value:  Size  Location     Type
 17696 ;;                  1    wreg      void 
 17697 ;; Registers used:
 17698 ;;		wreg, status,2
 17699 ;; Tracked objects:
 17700 ;;		On entry : 1F/2
 17701 ;;		On exit  : 1F/4
 17702 ;;		Unchanged: 0/0
 17703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17708 ;;Total ram usage:        0 bytes
 17709 ;; Hardware stack levels used:    1
 17710 ;; Hardware stack levels required when called:    3
 17711 ;; This function calls:
 17712 ;;		Nothing
 17713 ;; This function is called by:
 17714 ;;		_BME280_Init
 17715 ;; This function uses a non-reentrant model
 17716 ;;
 17717                           
 17718                           
 17719                           ;psect for function _I2C_Init
 17720  1A07                     _I2C_Init:	
 17721                           
 17722                           ;bme280_i2c.c: 18:     SSPCLKPPS = 0x0E;
 17723                           
 17724                           ;incstack = 0
 17725                           ; Regs used in _I2C_Init: [wreg+status,2]
 17726  1A07  300E               	movlw	14
 17727  1A08  003C               	movlb	28	; select bank28
 17728  1A09  00A0               	movwf	32	;volatile
 17729                           
 17730                           ;bme280_i2c.c: 19:     SSPDATPPS = 0x0C;
 17731  1A0A  300C               	movlw	12
 17732  1A0B  00A1               	movwf	33	;volatile
 17733                           
 17734                           ;bme280_i2c.c: 20:     RB6PPS = 0x10;
 17735  1A0C  3010               	movlw	16
 17736  1A0D  003D               	movlb	29	; select bank29
 17737  1A0E  009E               	movwf	30	;volatile
 17738                           
 17739                           ;bme280_i2c.c: 21:     RB4PPS = 0x11;
 17740  1A0F  3011               	movlw	17
 17741  1A10  009C               	movwf	28	;volatile
 17742                           
 17743                           ;bme280_i2c.c: 23:     SSP1STAT = 0x80;
 17744  1A11  3080               	movlw	128
 17745  1A12  0024               	movlb	4	; select bank4
 17746  1A13  0094               	movwf	20	;volatile
 17747                           
 17748                           ;bme280_i2c.c: 24:     SSP1CON1 = 0x28;
 17749  1A14  3028               	movlw	40
 17750  1A15  0095               	movwf	21	;volatile
 17751                           
 17752                           ;bme280_i2c.c: 25:     SSP1CON2 = 0x00;
 17753  1A16  0196               	clrf	22	;volatile
 17754                           
 17755                           ;bme280_i2c.c: 26:     SSP1ADD = 0x4f;
 17756  1A17  304F               	movlw	79
 17757  1A18  0092               	movwf	18	;volatile
 17758                           
 17759                           ;bme280_i2c.c: 28:     SSP1CON1bits.SSPEN = 1;
 17760  1A19  1695               	bsf	21,5	;volatile
 17761  1A1A  0008               	return
 17762  1A1B                     __end_of_I2C_Init:	
 17763                           
 17764                           	psect	intentry
 17765  0004                     __pintentry:	
 17766 ;; *************** function _INTERRUPT_InterruptManager *****************
 17767 ;; Defined at:
 17768 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 17769 ;; Parameters:    Size  Location     Type
 17770 ;;		None
 17771 ;; Auto vars:     Size  Location     Type
 17772 ;;		None
 17773 ;; Return value:  Size  Location     Type
 17774 ;;                  1    wreg      void 
 17775 ;; Registers used:
 17776 ;;		wreg, status,2, status,0, pclath, cstack
 17777 ;; Tracked objects:
 17778 ;;		On entry : 0/0
 17779 ;;		On exit  : 0/0
 17780 ;;		Unchanged: 0/0
 17781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17786 ;;Total ram usage:        0 bytes
 17787 ;; Hardware stack levels used:    1
 17788 ;; Hardware stack levels required when called:    2
 17789 ;; This function calls:
 17790 ;;		_TMR0_ISR
 17791 ;; This function is called by:
 17792 ;;		Interrupt level 1
 17793 ;; This function uses a non-reentrant model
 17794 ;;
 17795                           
 17796  0004                     _INTERRUPT_InterruptManager:	
 17797                           
 17798                           ;incstack = 0
 17799  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17800                           
 17801                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 17802  0005  3180               	pagesel	$
 17803                           
 17804                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 17805  0006  1A8B               	btfsc	11,5	;volatile
 17806  0007  1D0B               	btfss	11,2	;volatile
 17807  0008  280B               	goto	i1l366
 17808                           
 17809                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 17810  0009  3199  21F7         	fcall	_TMR0_ISR
 17811  000B                     i1l366:	
 17812                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 17813                           
 17814  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17815  000C  0009               	retfie
 17816  000D                     __end_of_INTERRUPT_InterruptManager:	
 17817                           
 17818                           	psect	text69
 17819  19F7                     __ptext69:	
 17820 ;; *************** function _TMR0_ISR *****************
 17821 ;; Defined at:
 17822 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 17823 ;; Parameters:    Size  Location     Type
 17824 ;;		None
 17825 ;; Auto vars:     Size  Location     Type
 17826 ;;		None
 17827 ;; Return value:  Size  Location     Type
 17828 ;;                  1    wreg      void 
 17829 ;; Registers used:
 17830 ;;		wreg, status,2, status,0, pclath, cstack
 17831 ;; Tracked objects:
 17832 ;;		On entry : 0/0
 17833 ;;		On exit  : 0/0
 17834 ;;		Unchanged: 0/0
 17835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17840 ;;Total ram usage:        0 bytes
 17841 ;; Hardware stack levels used:    1
 17842 ;; Hardware stack levels required when called:    1
 17843 ;; This function calls:
 17844 ;;		Absolute function
 17845 ;;		_TMR0_DefaultInterruptHandler
 17846 ;;		_TimerISR
 17847 ;; This function is called by:
 17848 ;;		_INTERRUPT_InterruptManager
 17849 ;; This function uses a non-reentrant model
 17850 ;;
 17851                           
 17852                           
 17853                           ;psect for function _TMR0_ISR
 17854  19F7                     _TMR0_ISR:	
 17855                           
 17856                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 17857                           
 17858                           ;incstack = 0
 17859                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 17860  19F7  110B               	bcf	11,2	;volatile
 17861                           
 17862                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 17863  19F8  0022               	movlb	2	; select bank2
 17864  19F9  0864               	movf	_timer0ReloadVal^(0+256),w	;volatile
 17865  19FA  0020               	movlb	0	; select bank0
 17866  19FB  0095               	movwf	21	;volatile
 17867                           
 17868                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
 17869  19FC  0022               	movlb	2	; select bank2
 17870  19FD  0862               	movf	_TMR0_InterruptHandler^(0+256),w
 17871  19FE  0463               	iorwf	(_TMR0_InterruptHandler+1)^(0+256),w
 17872  19FF  1903               	btfsc	3,2
 17873  1A00  0008               	return
 17874                           
 17875                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
 17876  1A01  0863               	movf	(_TMR0_InterruptHandler+1)^(0+256),w
 17877  1A02  008A               	movwf	10
 17878  1A03  0862               	movf	_TMR0_InterruptHandler^(0+256),w
 17879  1A04  000A               	callw
 17880  1A05  3199               	pagesel	$
 17881  1A06  0008               	return
 17882  1A07                     __end_of_TMR0_ISR:	
 17883                           
 17884                           	psect	text70
 17885  0003                     __ptext70:	
 17886 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17887 ;; Defined at:
 17888 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 17889 ;; Parameters:    Size  Location     Type
 17890 ;;		None
 17891 ;; Auto vars:     Size  Location     Type
 17892 ;;		None
 17893 ;; Return value:  Size  Location     Type
 17894 ;;                  1    wreg      void 
 17895 ;; Registers used:
 17896 ;;		None
 17897 ;; Tracked objects:
 17898 ;;		On entry : 1F/2
 17899 ;;		On exit  : 1F/2
 17900 ;;		Unchanged: 1F/0
 17901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17906 ;;Total ram usage:        0 bytes
 17907 ;; Hardware stack levels used:    1
 17908 ;; This function calls:
 17909 ;;		Nothing
 17910 ;; This function is called by:
 17911 ;;		_TMR0_Initialize
 17912 ;;		_TMR0_ISR
 17913 ;; This function uses a non-reentrant model
 17914 ;;
 17915                           
 17916                           
 17917                           ;psect for function _TMR0_DefaultInterruptHandler
 17918  0003                     _TMR0_DefaultInterruptHandler:	
 17919                           
 17920                           ;incstack = 0
 17921                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 17922  0003  0008               	return
 17923  0004                     __end_of_TMR0_DefaultInterruptHandler:	
 17924                           
 17925                           	psect	text71
 17926  19D7                     __ptext71:	
 17927 ;; *************** function _TimerISR *****************
 17928 ;; Defined at:
 17929 ;;		line 6 in file "timing.c"
 17930 ;; Parameters:    Size  Location     Type
 17931 ;;		None
 17932 ;; Auto vars:     Size  Location     Type
 17933 ;;		None
 17934 ;; Return value:  Size  Location     Type
 17935 ;;                  1    wreg      void 
 17936 ;; Registers used:
 17937 ;;		wreg
 17938 ;; Tracked objects:
 17939 ;;		On entry : 1F/2
 17940 ;;		On exit  : 1F/1
 17941 ;;		Unchanged: 0/0
 17942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17947 ;;Total ram usage:        0 bytes
 17948 ;; Hardware stack levels used:    1
 17949 ;; This function calls:
 17950 ;;		Nothing
 17951 ;; This function is called by:
 17952 ;;		_InitTiming
 17953 ;;		_TMR0_ISR
 17954 ;; This function uses a non-reentrant model
 17955 ;;
 17956                           
 17957                           
 17958                           ;psect for function _TimerISR
 17959  19D7                     _TimerISR:	
 17960                           
 17961                           ;timing.c: 8:     ticks++;
 17962                           
 17963                           ;incstack = 0
 17964                           ; Regs used in _TimerISR: [wreg]
 17965  19D7  3001               	movlw	1
 17966  19D8  0021               	movlb	1	; select bank1
 17967  19D9  07E8               	addwf	_ticks^(0+128),f
 17968  19DA  3000               	movlw	0
 17969  19DB  3DE9               	addwfc	(_ticks+1)^(0+128),f
 17970  19DC  3000               	movlw	0
 17971  19DD  3DEA               	addwfc	(_ticks+2)^(0+128),f
 17972  19DE  3000               	movlw	0
 17973  19DF  3DEB               	addwfc	(_ticks+3)^(0+128),f
 17974  19E0  0008               	return
 17975  19E1                     __end_of_TimerISR:	
 17976  007E                     btemp	set	126	;btemp
 17977  007E                     int$flags	set	126
 17978  007E                     wtemp0	set	126


Data Sizes:
    Strings     10
    Constant    0
    Data        4
    BSS         272
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     72      80
    BANK2            80     34      69
    BANK3            80      0      67
    BANK4            80      0      26
    BANK5            80      0      70
    BANK6            80      0      73
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    put_device_to_sleep@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 0
		 -> Sleep(), 

    put_device_to_sleep@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> WriteEnvSensor(), 

    put_device_to_sleep@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> ReadEnvSensor(), 

    get_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 0
		 -> Sleep(), 

    get_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> WriteEnvSensor(), 

    get_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> ReadEnvSensor(), 

    S54$4$2	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    S54$3$2	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(BANK1[4]), write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), 
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(BANK1[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(BANK1[1]), bme280_init@chip_id(BANK0[1]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 73
		 -> STR_2(CODE[3]), checksum(BANK2[6]), STR_1(CODE[7]), main@convertedNumber(BANK2[16]), 
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 73
		 -> STR_2(CODE[3]), checksum(BANK2[6]), STR_1(CODE[7]), main@convertedNumber(BANK2[16]), 
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    TransmitString@message	PTR unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    crc16@data	PTR PTR unsigned char  size(1) Largest target is 4
		 -> messages(BANK2[4]), 

    crc16_update@pData	PTR unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    WriteEnvSensor@reg_data	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    ReadEnvSensor@reg_data	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(BANK1[4]), write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), 
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(BANK1[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(BANK1[1]), bme280_init@chip_id(BANK0[1]), 

    messages	PTR unsigned char [2] size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    UIntToString@dest	PTR unsigned char  size(1) Largest target is 16
		 -> main@convertedNumber(BANK2[16]), 

    IntToString@dest	PTR unsigned char  size(1) Largest target is 16
		 -> main@convertedNumber(BANK2[16]), 

    UIntToHexString@dest	PTR unsigned char  size(1) Largest target is 6
		 -> checksum(BANK2[6]), 

    ReverseString@opposite	PTR unsigned char  size(1) Largest target is 16
		 -> checksum(BANK2[6]), main@convertedNumber(BANK2[16]), 

    ReverseString@str	PTR unsigned char  size(1) Largest target is 16
		 -> checksum(BANK2[6]), main@convertedNumber(BANK2[16]), 

    InsertString@dest	PTR unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    InsertString@src	PTR unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[3]), checksum(BANK2[6]), STR_1(CODE[7]), main@convertedNumber(BANK2[16]), 

    Insert@dest	PTR unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    ClearString@str	PTR unsigned char  size(2) Largest target is 73
		 -> main@convertedNumber(BANK2[16]), message_end(BANK6[73]), message_start(BANK5[70]), 

    EnvSensor.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    EnvSensor.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    EnvSensor.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    null_ptr_check@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    null_ptr_check@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    null_ptr_check@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    null_ptr_check@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    parse_humidity_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_humidity_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_humidity_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_humidity_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_humidity_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    parse_humidity_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor.calib_data(BANK3[37]), EnvSensor(BANK3[51]), 

    parse_temp_press_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_temp_press_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_temp_press_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_temp_press_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_temp_press_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    parse_temp_press_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor.calib_data(BANK3[37]), EnvSensor(BANK3[51]), 

    interleave_reg_addr@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(BANK0[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    interleave_reg_addr@reg_addr	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(BANK0[1]), set_filter_standby_settings@reg_addr(BANK0[1]), set_osr_press_temp_settings@reg_addr(BANK0[1]), set_osr_humidity_settings@reg_addr(BANK0[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    interleave_reg_addr@temp_buff	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    get_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    compensate_humidity@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    compensate_humidity@calib_data	PTR const struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    compensate_pressure@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    compensate_pressure@calib_data	PTR const struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    compensate_temperature@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    compensate_temperature@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    reload_device_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    reload_device_settings@settings	PTR const struct bme280_settings size(1) Largest target is 5
		 -> put_device_to_sleep@settings(BANK1[5]), 

    put_device_to_sleep@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    write_power_mode@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    parse_device_settings@reg_data	PTR const unsigned char  size(1) Largest target is 4
		 -> put_device_to_sleep@reg_data(BANK1[4]), bme280_get_sensor_settings@reg_data(COMMON[4]), 

    parse_device_settings@settings	PTR struct bme280_settings size(1) Largest target is 5
		 -> put_device_to_sleep@settings(BANK1[5]), 

    fill_osr_temp_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    fill_osr_temp_settings@reg_data	PTR unsigned char  size(1) Largest target is 1
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), 

    fill_osr_press_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    fill_osr_press_settings@reg_data	PTR unsigned char  size(1) Largest target is 1
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), 

    fill_standby_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    fill_standby_settings@reg_data	PTR unsigned char  size(1) Largest target is 1
		 -> set_filter_standby_settings@reg_data(BANK0[1]), 

    fill_filter_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    fill_filter_settings@reg_data	PTR unsigned char  size(1) Largest target is 1
		 -> set_filter_standby_settings@reg_data(BANK0[1]), 

    set_filter_standby_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    set_filter_standby_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    set_osr_press_temp_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    set_osr_press_temp_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    set_osr_humidity_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    set_osr_humidity_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    set_osr_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    set_osr_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    bme280_compensate_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_compensate_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_compensate_data@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    bme280_parse_sensor_data@uncomp_data	PTR struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    bme280_parse_sensor_data@reg_data	PTR const unsigned char  size(1) Largest target is 8
		 -> bme280_get_sensor_data@reg_data(BANK1[8]), 

    bme280_get_sensor_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_sensor_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_get_sensor_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_soft_reset@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_soft_reset@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_soft_reset@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_soft_reset@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_get_sensor_mode@sensor_mode	PTR unsigned char  size(1) Largest target is 1
		 -> bme280_set_sensor_mode@last_set_mode(BANK1[1]), bme280_set_sensor_settings@sensor_mode(BANK1[1]), 

    bme280_get_sensor_mode@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_set_sensor_mode@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_get_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_sensor_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_set_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(BANK0[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    bme280_set_regs@reg_addr	PTR unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(BANK0[1]), set_filter_standby_settings@reg_addr(BANK0[1]), set_osr_press_temp_settings@reg_addr(BANK0[1]), set_osr_humidity_settings@reg_addr(BANK0[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    bme280_set_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_get_regs@reg_data	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(BANK1[4]), write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), 
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(BANK1[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(BANK1[1]), bme280_init@chip_id(BANK0[1]), 

    bme280_get_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    S54bme280_dev$delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_init@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    S54bme280_dev$write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_init@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    S54bme280_dev$read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 


Critical Paths under _main in COMMON

    _main->_IntToString
    _crc16->_crc16_update
    _crc16_update->_strlen
    _compensate_temperature->___aldiv
    _compensate_pressure->___lldiv
    _compensate_humidity->___aldiv
    ___aldiv->___lmul
    _UIntToString->___lldiv
    _TransmitString->_TransmitByte
    _TransmitByte->_TransmitBit
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _IntToString->_ReverseString
    _ReverseString->___awdiv
    _InsertString->_Insert
    _InitTiming->_TMR0_SetInterruptHandler
    _ClearString->_strlen
    _get_calib_data->_parse_humidity_calib_data
    _ReadEnvSensor->_I2C_WriteByte
    _I2C_ReadByte->_DebugAlert
    _WriteEnvSensor->_I2C_WriteByte
    _I2C_WriteByte->_DebugAlert
    _I2C_Stop->_DebugAlert
    _DebugAlert->_Sleep

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _crc16->_crc16_update
    _bme280_get_sensor_data->_bme280_compensate_data
    _bme280_compensate_data->_compensate_humidity
    _compensate_temperature->___aldiv
    _compensate_pressure->___aldiv
    _compensate_humidity->___aldiv
    _UIntToString->_ReverseString
    _UIntToHexString->_crc16
    _IntToString->_ReverseString
    _write_power_mode->_bme280_set_regs
    _put_device_to_sleep->_reload_device_settings
    _reload_device_settings->_set_osr_settings
    _set_osr_settings->_set_osr_humidity_settings
    _set_osr_settings->_set_osr_press_temp_settings
    _set_osr_press_temp_settings->_bme280_set_regs
    _set_osr_humidity_settings->_bme280_set_regs
    _set_filter_standby_settings->_bme280_set_regs
    _bme280_get_sensor_mode->_bme280_get_regs
    _bme280_init->_get_calib_data
    _get_calib_data->_bme280_get_regs
    _bme280_get_regs->_ReadEnvSensor
    _ReadEnvSensor->_I2C_WriteByte
    _I2C_ReadByte->_DebugAlert
    _bme280_soft_reset->_bme280_set_regs
    _bme280_set_regs->_WriteEnvSensor
    _WriteEnvSensor->_I2C_WriteByte
    _I2C_UserAlert->_I2C_Stop
    _I2C_Stop->_DebugAlert

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_bme280_get_sensor_data
    _bme280_compensate_data->_compensate_pressure
    _BME280_Init->_bme280_set_sensor_mode
    _BME280_Init->_bme280_set_sensor_settings
    _bme280_set_sensor_settings->_put_device_to_sleep
    _bme280_set_sensor_mode->_put_device_to_sleep

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0  599732
                                             67 BANK1      5     5      0
                                              0 BANK2     34    34      0
                        _BME280_Init
                        _ClearString
                         _InitTiming
                             _Insert
                       _InsertString
                        _IntToString
                  _SYSTEM_Initialize
                     _TransmitString
                    _UIntToHexString
                       _UIntToString
             _bme280_get_sensor_data
                              _crc16
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _crc16                                                9     7      2    1418
                                              1 BANK0      9     7      2
                       _crc16_update
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _crc16_update                                        10     4      6     486
                                              5 COMMON     9     3      6
                                              0 BANK0      1     1      0
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _bme280_get_sensor_data                              27    25      2   50802
                                             65 BANK0      5     3      2
                                             45 BANK1     22    22      0
             _bme280_compensate_data
                    _bme280_get_regs
           _bme280_parse_sensor_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _bme280_parse_sensor_data                            22    21      1     535
                                              0 COMMON     9     8      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _bme280_compensate_data                               6     3      3   30461
                                             59 BANK0      6     3      3
                _compensate_humidity
                _compensate_pressure
             _compensate_temperature
 ---------------------------------------------------------------------------------
 (3) _compensate_temperature                              39    35      4    9255
                                             14 BANK0     39    35      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _compensate_pressure                                 67    63      4   10752
                                             14 BANK0     22    18      4
                                              0 BANK1     45    45      0
                            ___aldiv
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _compensate_humidity                                 45    41      4    9589
                                             14 BANK0     45    41      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    3588
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8    4860
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _UIntToString                                         9     4      5    3156
                                              9 BANK0      9     4      5
                      _ReverseString
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     311
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     618
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _UIntToHexString                                     19    14      5    2166
                                             10 BANK0     19    14      5
                      _ReverseString
                              _crc16 (ARG)
 ---------------------------------------------------------------------------------
 (1) _TransmitString                                       7     5      2     902
                                              6 COMMON     7     5      2
                       _TransmitByte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _TransmitByte                                         4     4      0     112
                                              2 COMMON     4     4      0
                        _TransmitBit
 ---------------------------------------------------------------------------------
 (3) _TransmitBit                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IntToString                                          8     5      3    3792
                                             11 COMMON     3     0      3
                                              9 BANK0      5     5      0
                      _ReverseString
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ReverseString                                       11    11      0    1766
                                              9 COMMON     2     2      0
                                              0 BANK0      9     9      0
                            ___awdiv
                             _strlen
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     730
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _InsertString                                        13     5      8    5908
                                             11 COMMON     1     1      0
                                              0 BANK0     12     4      8
                             _Insert
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _Insert                                              11     4      7    2839
                                              0 COMMON    11     4      7
 ---------------------------------------------------------------------------------
 (1) _InitTiming                                           0     0      0     174
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ClearString                                          7     5      2     990
                                              5 COMMON     7     5      2
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               5     3      2     546
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _BME280_Init                                          4     4      0  525810
                                             20 BANK1      4     4      0
                         _DebugAlert
                           _I2C_Init
                        _bme280_init
             _bme280_set_sensor_mode
         _bme280_set_sensor_settings
 ---------------------------------------------------------------------------------
 (2) _bme280_set_sensor_settings                           6     5      1  267982
                                             14 BANK1      6     5      1
               _are_settings_changed
             _bme280_get_sensor_mode
                     _null_ptr_check
                _put_device_to_sleep
        _set_filter_standby_settings
                   _set_osr_settings
 ---------------------------------------------------------------------------------
 (3) _are_settings_changed                                 3     2      1     282
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _bme280_set_sensor_mode                               6     5      1  196836
                                             14 BANK1      6     5      1
             _bme280_get_sensor_mode
                     _null_ptr_check
                _put_device_to_sleep
                   _write_power_mode
 ---------------------------------------------------------------------------------
 (3) _write_power_mode                                     8     7      1   34159
                                             58 BANK0      8     7      1
                    _bme280_get_regs
                    _bme280_set_regs
 ---------------------------------------------------------------------------------
 (3) _put_device_to_sleep                                 14    14      0  141656
                                              0 BANK1     14    14      0
                    _bme280_get_regs
                  _bme280_soft_reset
              _parse_device_settings
             _reload_device_settings
 ---------------------------------------------------------------------------------
 (4) _reload_device_settings                               5     4      1  105121
                                             75 BANK0      5     4      1
        _set_filter_standby_settings
                   _set_osr_settings
 ---------------------------------------------------------------------------------
 (3) _set_osr_settings                                     7     4      3   69797
                                             68 BANK0      7     4      3
          _set_osr_humidity_settings
        _set_osr_press_temp_settings
 ---------------------------------------------------------------------------------
 (4) _set_osr_press_temp_settings                         10     7      3   34826
                                             58 BANK0     10     7      3
                    _bme280_get_regs
                    _bme280_set_regs
            _fill_osr_press_settings
             _fill_osr_temp_settings
 ---------------------------------------------------------------------------------
 (5) _fill_osr_temp_settings                               6     4      2     219
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _fill_osr_press_settings                              6     4      2     219
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _set_osr_humidity_settings                           10     7      3   34354
                                             58 BANK0     10     7      3
                    _bme280_get_regs
                    _bme280_set_regs
 ---------------------------------------------------------------------------------
 (3) _set_filter_standby_settings                         10     7      3   35006
                                             58 BANK0     10     7      3
                    _bme280_get_regs
                    _bme280_set_regs
               _fill_filter_settings
              _fill_standby_settings
 ---------------------------------------------------------------------------------
 (4) _fill_standby_settings                                6     4      2     219
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _fill_filter_settings                                 6     4      2     219
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _parse_device_settings                                4     3      1     542
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _bme280_get_sensor_mode                               6     5      1   19638
                                             36 BANK0      6     5      1
                    _bme280_get_regs
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _bme280_init                                          7     7      0   58207
                                             68 BANK0      7     7      0
                              _Sleep *
                    _bme280_get_regs
                  _bme280_soft_reset
                     _get_calib_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (3) _get_calib_data                                      32    32      0   20896
                                             36 BANK0     32    32      0
                    _bme280_get_regs
          _parse_humidity_calib_data
        _parse_temp_press_calib_data
 ---------------------------------------------------------------------------------
 (4) _parse_temp_press_calib_data                          4     3      1    1338
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _parse_humidity_calib_data                           14    13      1     699
                                              0 COMMON    14    13      1
 ---------------------------------------------------------------------------------
 (2) _bme280_get_regs                                      9     5      4   18244
                                             27 BANK0      9     5      4
                      _ReadEnvSensor *
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (3) _ReadEnvSensor                                       12     7      5   14062
                                             15 BANK0     12     7      5
                         _DebugAlert
                       _I2C_ReadByte
                           _I2C_Stop
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (4) _I2C_ReadByte                                         6     6      0    2730
                                              7 BANK0      6     6      0
                         _DebugAlert
 ---------------------------------------------------------------------------------
 (4) _bme280_soft_reset                                    7     7      0   17186
                                             58 BANK0      7     7      0
                              _Sleep *
                    _bme280_set_regs
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (5) _bme280_set_regs                                     31    28      3   15470
                                             27 BANK0     31    28      3
                     _WriteEnvSensor *
                _interleave_reg_addr
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _null_ptr_check                                       4     4      0     919
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _interleave_reg_addr                                  8     5      3     622
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (6) _WriteEnvSensor                                      12     7      5   11177
                                             15 BANK0     12     7      5
                         _DebugAlert
                           _I2C_Stop
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (4) _I2C_WriteByte                                        5     5      0    5361
                                             13 COMMON     1     1      0
                                             11 BANK0      4     4      0
                         _DebugAlert
                      _I2C_UserAlert
 ---------------------------------------------------------------------------------
 (5) _I2C_UserAlert                                        1     1      0    2665
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (6) _I2C_Stop                                             4     4      0    2665
                                              7 BANK0      4     4      0
                         _DebugAlert
 ---------------------------------------------------------------------------------
 (7) _DebugAlert                                           8     3      5    2665
                                             12 COMMON     1     1      0
                                              0 BANK0      7     2      5
                              _Sleep
 ---------------------------------------------------------------------------------
 (8) _Sleep                                               12     8      4     375
                                              0 COMMON    12     8      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _INTERRUPT_InterruptManager                          0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (15) _TMR0_ISR                                            0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                           _TimerISR *
 ---------------------------------------------------------------------------------
 (16) _TimerISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BME280_Init
     _DebugAlert
       _Sleep
     _I2C_Init
     _bme280_init
       _Sleep *
       _bme280_get_regs *
         _ReadEnvSensor *
           _DebugAlert
             _Sleep
           _I2C_ReadByte
             _DebugAlert
               _Sleep
           _I2C_Stop
             _DebugAlert
               _Sleep
           _I2C_WriteByte
             _DebugAlert
               _Sleep
             _I2C_UserAlert
               _I2C_Stop
                 _DebugAlert
                   _Sleep
         _null_ptr_check *
       _bme280_soft_reset *
         _Sleep *
         _bme280_set_regs *
           _WriteEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _interleave_reg_addr *
           _null_ptr_check *
         _null_ptr_check *
       _get_calib_data *
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _parse_humidity_calib_data
         _parse_temp_press_calib_data
       _null_ptr_check *
     _bme280_set_sensor_mode
       _bme280_get_sensor_mode
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _null_ptr_check
       _null_ptr_check
       _put_device_to_sleep
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _bme280_soft_reset
           _Sleep *
           _bme280_set_regs *
             _WriteEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _interleave_reg_addr *
             _null_ptr_check *
           _null_ptr_check *
         _parse_device_settings
         _reload_device_settings
           _set_filter_standby_settings
             _bme280_get_regs
               _ReadEnvSensor *
                 _DebugAlert
                   _Sleep
                 _I2C_ReadByte
                   _DebugAlert
                     _Sleep
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
                 _I2C_WriteByte
                   _DebugAlert
                     _Sleep
                   _I2C_UserAlert
                     _I2C_Stop
                       _DebugAlert
                         _Sleep
               _null_ptr_check *
             _bme280_set_regs
               _WriteEnvSensor *
                 _DebugAlert
                   _Sleep
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
                 _I2C_WriteByte
                   _DebugAlert
                     _Sleep
                   _I2C_UserAlert
                     _I2C_Stop
                       _DebugAlert
                         _Sleep
               _interleave_reg_addr *
               _null_ptr_check *
             _fill_filter_settings
             _fill_standby_settings
           _set_osr_settings
             _set_osr_humidity_settings
               _bme280_get_regs
                 _ReadEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_ReadByte
                     _DebugAlert
                       _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _null_ptr_check *
               _bme280_set_regs
                 _WriteEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _interleave_reg_addr *
                 _null_ptr_check *
             _set_osr_press_temp_settings
               _bme280_get_regs
                 _ReadEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_ReadByte
                     _DebugAlert
                       _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _null_ptr_check *
               _bme280_set_regs
                 _WriteEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _interleave_reg_addr *
                 _null_ptr_check *
               _fill_osr_press_settings
               _fill_osr_temp_settings
       _write_power_mode
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _bme280_set_regs
           _WriteEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _interleave_reg_addr *
           _null_ptr_check *
     _bme280_set_sensor_settings
       _are_settings_changed
       _bme280_get_sensor_mode
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _null_ptr_check
       _null_ptr_check
       _put_device_to_sleep
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _bme280_soft_reset
           _Sleep *
           _bme280_set_regs *
             _WriteEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _interleave_reg_addr *
             _null_ptr_check *
           _null_ptr_check *
         _parse_device_settings
         _reload_device_settings
           _set_filter_standby_settings
             _bme280_get_regs
               _ReadEnvSensor *
                 _DebugAlert
                   _Sleep
                 _I2C_ReadByte
                   _DebugAlert
                     _Sleep
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
                 _I2C_WriteByte
                   _DebugAlert
                     _Sleep
                   _I2C_UserAlert
                     _I2C_Stop
                       _DebugAlert
                         _Sleep
               _null_ptr_check *
             _bme280_set_regs
               _WriteEnvSensor *
                 _DebugAlert
                   _Sleep
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
                 _I2C_WriteByte
                   _DebugAlert
                     _Sleep
                   _I2C_UserAlert
                     _I2C_Stop
                       _DebugAlert
                         _Sleep
               _interleave_reg_addr *
               _null_ptr_check *
             _fill_filter_settings
             _fill_standby_settings
           _set_osr_settings
             _set_osr_humidity_settings
               _bme280_get_regs
                 _ReadEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_ReadByte
                     _DebugAlert
                       _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _null_ptr_check *
               _bme280_set_regs
                 _WriteEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _interleave_reg_addr *
                 _null_ptr_check *
             _set_osr_press_temp_settings
               _bme280_get_regs
                 _ReadEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_ReadByte
                     _DebugAlert
                       _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _null_ptr_check *
               _bme280_set_regs
                 _WriteEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _interleave_reg_addr *
                 _null_ptr_check *
               _fill_osr_press_settings
               _fill_osr_temp_settings
       _set_filter_standby_settings
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _bme280_set_regs
           _WriteEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _interleave_reg_addr *
           _null_ptr_check *
         _fill_filter_settings
         _fill_standby_settings
       _set_osr_settings
         _set_osr_humidity_settings
           _bme280_get_regs
             _ReadEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_ReadByte
                 _DebugAlert
                   _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _null_ptr_check *
           _bme280_set_regs
             _WriteEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _interleave_reg_addr *
             _null_ptr_check *
         _set_osr_press_temp_settings
           _bme280_get_regs
             _ReadEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_ReadByte
                 _DebugAlert
                   _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _null_ptr_check *
           _bme280_set_regs
             _WriteEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _interleave_reg_addr *
             _null_ptr_check *
           _fill_osr_press_settings
           _fill_osr_temp_settings
   _ClearString
     _strlen
   _InitTiming
     _TMR0_SetInterruptHandler
   _Insert
   _InsertString
     _Insert
     _strlen
   _IntToString
     _ReverseString
       ___awdiv
       _strlen
     ___awdiv
     ___awmod
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TransmitString
     _TransmitByte
       _TransmitBit
     _strlen
   _UIntToHexString
     _ReverseString
       ___awdiv
       _strlen
     _crc16 (ARG)
       _crc16_update
         _strlen (ARG)
       _strlen
   _UIntToString
     _ReverseString
       ___awdiv
       _strlen
     ___lldiv
     ___llmod
   _bme280_get_sensor_data
     _bme280_compensate_data
       _compensate_humidity
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _compensate_pressure
         ___aldiv
           ___lmul (ARG)
         ___lldiv
         ___lmul
       _compensate_temperature
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _bme280_get_regs
       _ReadEnvSensor *
         _DebugAlert
           _Sleep
         _I2C_ReadByte
           _DebugAlert
             _Sleep
         _I2C_Stop
           _DebugAlert
             _Sleep
         _I2C_WriteByte
           _DebugAlert
             _Sleep
           _I2C_UserAlert
             _I2C_Stop
               _DebugAlert
                 _Sleep
       _null_ptr_check *
     _bme280_parse_sensor_data
     _null_ptr_check
   _crc16
     _crc16_update
       _strlen (ARG)
     _strlen
   _strlen

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _TimerISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     22      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      43      11       83.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1A      13       32.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      46      15       87.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      49      17       91.3%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1DF      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1DF      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Sep 05 20:58:05 2019

                        __end_of_ClearString 1B3C                                  __CFG_CP$OFF 0000  
           bme280_parse_sensor_data@data_lsb 0024             bme280_parse_sensor_data@data_msb 0028  
                                         l55 1359                                           l72 08A7  
                                         l65 1EA2                                 ___awdiv@sign 0076  
                                         _id 0156                              _timer0ReloadVal 0164  
                 ?_set_osr_humidity_settings 005A             __end_of_bme280_parse_sensor_data 0ABE  
                                __CFG_LVP$ON 0000                                          l126 15E0  
                                        l152 1ED4                                          l208 0FF7  
                                        l146 1E50                                          l238 1B11  
                                        l192 03F2                                          l601 16E8  
                                        l185 0735                                          l612 1DED  
                                        l604 171A                                          l196 058B  
                                        l605 1732                                          l615 1E1E  
                                        l608 1763                                          l632 077D  
                                        l464 15EC                                          l633 0793  
                                        l705 1A4F                                          l636 07C5  
                                        l645 1438                                          l629 074B  
                                        l648 146A                                          l593 1F35  
                                        l596 1F67                                          l669 1BBF  
                                        l685 1DC2                                          l865 166B  
          bme280_parse_sensor_data@data_xlsb 0020              __size_of_fill_osr_temp_settings 001C  
                               ___awmod@sign 0076                                 __CFG_BORV$LO 0000  
                                        wreg 0009                                 __CFG_IESO$ON 0000  
           bme280_parse_sensor_data@reg_data 002C                               bme280_init@dev 006A  
            __size_of_compensate_temperature 01A3                            ___g_timeout_start 00EC  
                             ReverseString@i 0026                                 __CFG_ZCD$OFF 0000  
                                 _DebugAlert 1BE1                                         l4004 0816  
                                       l3212 10FA                                         l4102 1B62  
                                       l3230 1120                                         l3222 1102  
                                       l3206 10EF                                         l4032 0873  
                                       l4024 083A                                         l4040 08A2  
                                       l4120 1EE4                                         l3224 110E  
                                       l4042 08A9                                         l4026 0854  
                                       l3234 1129                                         l4132 1D67  
                                       l4116 1ECA                                         l4214 1FB6  
                                       l3190 1A41                                         l3238 1131  
                      __size_of_crc16_update 003C                                         l4080 1E46  
                                       l4144 1AF0                                         l4240 1DA4  
                                       l4226 1C35                                         l4066 1092  
                                       l4250 19E9                                         l3514 100B  
                                       l4330 03D6                                         l4084 1E60  
                                       l4252 19EA                                         l3188 1A35  
                                       l3452 12AE                                         l3540 1041  
                                       l3532 1030                                         l3196 1A51  
                                       l4340 0570                                         l4500 15B2  
                                       l4422 133A                                         l3454 12E9  
                                       l3526 1018                                         l3518 1012  
                                       l3550 1EEE                                         l4342 0578  
                                       l4408 1306                                         l3528 1024  
                                       l3536 1039                                         l3632 1637  
                                       l3624 160D                                         l3552 1EFC  
                                       l3560 1F1F                                         l2904 1C99  
                                       l4344 0583                                         l4504 15C8  
                                       l4426 134F                                         l4098 1B50  
                                       l4266 1CF5                                         l4602 10D3  
                                       l2922 1146                                         l4290 071F  
                                       l3900 1B14                                         l4428 1352  
                                       l4452 14DD                                         l4524 152C  
                                       l4604 10A3                                         l3660 141F  
                                       l3636 164A                                         l2932 1174  
                                       l2924 1154                                         l3556 1F14  
                                       l2908 1CA3                                         l4292 072D  
                                       l4508 15E2                                         l3902 1B15  
                                       l4446 14BA                                         l4606 10DF  
                                       l3638 1657                                         l2950 167C  
                                       l4390 0FC9                                         l3912 1C3A  
                                       l4536 1530                                         l3648 13D6  
                                       l2936 117F                                         l2960 169A  
                                       l4384 0FB5                                         l4560 1DA6  
                                       l4474 1D1D                                         l4458 14FF  
                                       l4538 1569                                         l3498 1C6B  
                                       l3666 118A                                         l4394 0FEF  
                                       l4562 1DDD                                         l3924 076E  
                                       l4652 13B1                                         l2972 16C5  
                                       l4556 1DC8                                         l3846 1BE3  
                                       l3854 1E10                                         l3862 1F58  
                                       l3950 07F9                                         l3934 07B6  
                                       l4478 1D2D                                         l4590 1B24  
                                       l2958 168C                                         l4662 1FBF  
                                       l3944 07E7                                         l2976 16D3  
                                       l2968 16BA                                         l4664 1FFA  
                                       l3874 170B                                         l3948 07CF  
                                       l4676 1B71                                         l4756 0D26  
                                       l3966 145B                                         l3886 1755  
                                       l4686 0AD7                                         l3976 1478  
                                       l3992 1E7B                                         l3978 1490  
                                       STR_1 1800                                         STR_2 1807  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         u3105 1119  
                                       u3115 1121                                         u3075 1105  
                                       u3315 09AA                                         u2605 1155  
                                       u3325 09C1                                         u4215 147E  
                                       u3095 110F                                         u2615 1169  
                                       u3335 09D6                                         u3520 1C76  
                                       u5120 123D                                         u2625 1175  
                                       u2705 16AF                                         u2545 1CA4  
                                       u3345 0A17                                         u3530 1C77  
                                       u3514 1C70                                         u5130 124A  
                                       u3515 1C6F                                         u2715 16BB  
                                       u2555 1CAB                                         u3355 0A2F  
                                       u3605 102A                                         u3365 0A44  
                                       u4175 07E3                                         u4415 1A84  
                                       u3615 1031                                         u3375 0A86  
                                       u5240 0AFF                                         u4185 07D5  
                                       u4505 1201                                         u4425 1AA0  
                                       u4345 1A68                                         u3545 1C87  
                                       u2585 1149                                         u5225 1FC9  
                                       u4515 1213                                         u4355 1ABC  
                                       u3475 12B8                                         u5235 1B7B  
                                       u2675 168F                                         u4525 1226  
                                       u5085 153A                                         u3805 162A  
                                       u4550 1F78                                         u3830 13CA  
                                       u5175 1B2E                                         u3655 1EF1  
                                       u2695 169B                                         u5255 0D3E  
                                       u3840 13CB                                         u4545 17D9  
                                       u5185 10DD                                         u3585 101B  
                                       u5195 10AE                                         u3675 1F0A  
                                       u4635 05B3                                         u5267 0D2A  
                                       u5277 1A54                                         u3685 1F15  
                                       u4725 0402                                         u4645 05C6  
                                       u4495 11EF                                         u5287 1A5B  
                                       u4735 0421                                         u4655 0630  
                                       u5297 1BDD                                         u3865 140A  
                                       u4745 043C                                         u4755 04AD  
                                       u4685 0155                                         u3975 1BDA  
                                       u4695 0183                                         u3985 1BEC  
                                       u4785 0D68                                         u4795 0D86  
                __end_of_compensate_humidity 1000                                         _TMR0 0015  
                                       _WPUA 020C                                         _WPUB 020D  
                                       _WPUC 020E                       ??_fill_filter_settings 0072  
                  __size_of_write_power_mode 0037                       WriteEnvSensor@reg_addr 0030  
        bme280_parse_sensor_data@uncomp_data 0070                       WriteEnvSensor@reg_data 0031  
          bme280_get_sensor_data@uncomp_data 00D7                                 __CFG_WRT$OFF 0000  
                              __CFG_FCMEN$ON 0000              __size_of_bme280_set_sensor_mode 0038  
                  __size_of_set_osr_settings 0028                        __size_of_I2C_ReadByte 008B  
                        _put_device_to_sleep 1D6A                                         _main 0ABE  
              compensate_humidity@calib_data 002E                             __end_of_I2C_Init 1A1B  
                               TransmitBit@b 0071                                         fsr0h 0005  
                                       fsr1h 0007                                         indf0 0000  
                                       fsr0l 0004                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                     interleave_reg_addr@len 0072                             __end_of_I2C_Stop 1E21  
       are_settings_changed@desired_settings 0070                  put_device_to_sleep@reg_data 00A3  
                              __CFG_BOREN$ON 0000                                         start 000D  
                       bme280_soft_reset@dev 0060                  __end_of_compensate_pressure 059B  
                              __CFG_MCLRE$ON 0000               reload_device_settings@settings 006E  
                    ??_fill_standby_settings 0072                                ??_IntToString 0029  
                put_device_to_sleep@settings 00A9                                _ReadEnvSensor 073E  
                            bme280_init@rslt 0069                      __end_of_TMR0_Initialize 1A31  
             ??_TMR0_DefaultInterruptHandler 0070               __size_of_OSCILLATOR_Initialize 0007  
              __end_of_OSCILLATOR_Initialize 19CF                         ?_put_device_to_sleep 0069  
                            __end_of___aldiv 16DC                        ReverseString@opposite 0023  
                                      ?_main 0070                              __end_of___awdiv 1136  
                              __CFG_WDTE$OFF 0000                              __end_of___awmod 1046  
                            __end_of___lldiv 1188                       _bme280_compensate_data 156E  
                            ___awdiv@divisor 0070                              __end_of___llmod 1F28  
                                      i1l366 000B                              ___awdiv@counter 0075  
                               _crc16_update 1DA6                                   Insert@dest 0070  
                          _bme280_soft_reset 1D2F                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
                                      _RXPPS 0E24                                   Insert@temp 0079  
          __size_of_TMR0_SetInterruptHandler 0006                     __size_of_bme280_get_regs 0042  
                        ___lmul@multiplicand 0074                    ?_TMR0_SetInterruptHandler 0070  
                                      _Sleep 1BB6                             __end_of_TMR0_ISR 1A07  
             compensate_pressure@uncomp_data 00B4                   bme280_compensate_data@rslt 005F  
                         ?_bme280_soft_reset 0053                                 _I2C_ReadByte 16DC  
                   UIntToHexString@remainder 0035                                        _crc16 1FB8  
                           crc16_update@wCrc 0079                             ?_UIntToHexString 002A  
                                      _ticks 00E8                                        main@i 0132  
                                      pclath 000A                                TransmitByte@i 0074  
              __size_of_are_settings_changed 000B                          ??_bme280_soft_reset 005A  
                                      status 0003                                        wtemp0 007E  
                                _ClearString 1B17                     __size_of_bme280_set_regs 009E  
                           ??_get_calib_data 0044                       put_device_to_sleep@dev 00A8  
                      bme280_soft_reset@rslt 005E                       _fill_osr_temp_settings 1AB3  
 bme280_set_sensor_settings@desired_settings 00B1                         __end_of_UIntToString 11DB  
              bme280_set_sensor_settings@dev 00AE                              __initialization 000F  
                      DebugAlert@num_flashes 0024                       _compensate_temperature 059B  
                                 _InitTiming 19CF            parse_humidity_calib_data@reg_data 007D  
                             ?_ReadEnvSensor 002F                                 __end_of_main 0D41  
                             __CFG_LPBOR$OFF 0000                  ?_INTERRUPT_InterruptManager 0070  
                     _bme280_set_sensor_mode 1CF7                        ??_put_device_to_sleep 00A0  
                    ?_bme280_get_sensor_data 0061                    __end_of_bme280_soft_reset 1D6A  
                    ?_bme280_get_sensor_mode 0044                                       ??_main 00E3  
                      __end_of_ReverseString 12F3                          __end_of_IntToString 142B  
                     __size_of_I2C_UserAlert 0003                      __size_of_WriteEnvSensor 0069  
                           ??_null_ptr_check 0070              bme280_compensate_data@comp_data 005C  
          bme280_set_sensor_mode@sensor_mode 00B1                             ReverseString@str 0028  
                             __CFG_PLLEN$OFF 0000                             __end_of_TimerISR 19E1  
            compensate_pressure@pressure_max 00B5                    bme280_get_sensor_data@dev 0062  
                      ReadEnvSensor@reg_addr 0030                                ?_InsertString 0020  
                      ReadEnvSensor@reg_data 0031          write_power_mode@sensor_mode_reg_val 0061  
                                     ?_Sleep 0070                     _bme280_parse_sensor_data 09A0  
                                     ?_crc16 0021                                   Sleep@start 0078  
                     __size_of_I2C_WriteByte 0048                             ___llmod@dividend 0074  
                           ___awdiv@dividend 0072                                  ?_DebugAlert 0020  
                                     _ANSELA 018C                                       _ANSELB 018D  
                                     _ANSELC 018E                                       _BORCON 0116  
                   _compensate_humidity$2266 003A                                       _RC1STA 019D  
                   ??_reload_device_settings 006C                                       _RB4PPS 0E9C  
                                     _RB6PPS 0E9E                                       _RB7PPS 0E9F  
                                     _ODCONA 028C                                       _ODCONB 028D  
                                     _ODCONC 028E                                       _OSCCON 0099  
                                     _SPBRGH 019C                                       _SPBRGL 019B  
                                     _TX1STA 019E                          I2C_ReadByte@rcvdata 002C  
                                Insert@index 0073                 __size_of_interleave_reg_addr 002D  
                  bme280_get_sensor_mode@dev 0044                    bme280_set_sensor_mode@dev 00AE  
                             __CFG_PWRTE$OFF 0000                   ?_parse_humidity_calib_data 0070  
                                     _Insert 1501                 fill_filter_settings@reg_data 0075  
                                     ___lmul 1C91                            crc16_update@pData 0075  
                                  ??___aldiv 007C                                    ??___awdiv 0074  
                                     crc16@i 0028                               __CFG_STVREN$ON 0000  
                                  ??___awmod 0074                                    ??___lldiv 0078  
               parse_humidity_calib_data@dev 0070                                    ??___llmod 0078  
             __end_of_bme280_get_sensor_data 1290                          DebugAlert@delay_low 0022  
             __end_of_bme280_get_sensor_mode 1C37                             ?_TMR0_Initialize 0070  
             fill_osr_temp_settings@reg_data 0075                  compensate_pressure@pressure 00C5  
                           ___awdiv@quotient 0077                              ___awmod@divisor 0070  
               fill_filter_settings@settings 0070                              ___awmod@counter 0075  
                                     _strlen 1A31                     interleave_reg_addr@index 0077  
                          get_calib_data@dev 0063                                 IntToString@i 002C  
                               IntToString@n 007B                              InsertString@src 0022  
                                  ?_I2C_Init 0070                      compensate_pressure@var1 00C9  
                    compensate_pressure@var2 00C1                      compensate_pressure@var3 00A0  
                    compensate_pressure@var4 00A4                      compensate_pressure@var5 00A8  
                             ??_InsertString 007B                                    ?_I2C_Stop 0070  
             fill_osr_temp_settings@settings 0070                             ??_TransmitString 0078  
                        write_power_mode@dev 005A     TMR0_SetInterruptHandler@InterruptHandler 0070  
                    put_device_to_sleep@rslt 00A7                            ??_bme280_get_regs 003F  
                           _write_power_mode 1CC0             bme280_compensate_data@calib_data 005D  
               interleave_reg_addr@temp_buff 0070                            _SYSTEM_Initialize 0801  
                    __end_of__initialization 004F                             _set_osr_settings 1B3C  
                              _I2C_UserAlert 07FD                           ?_SYSTEM_Initialize 0070  
                        main@convertedNumber 0120                         _UIntToHexString$1373 0031  
           compensate_temperature@calib_data 002E              set_filter_standby_settings@rslt 0061  
                            ??_ReadEnvSensor 0034                          ReverseString@counti 0024  
             bme280_set_sensor_settings@rslt 00B3                                ??_bme280_init 0064  
                   get_calib_data@calib_data 0047                               __pcstackCOMMON 0070  
                                ?_InitTiming 0070                                __end_of_Sleep 1BE1  
                              _I2C_WriteByte 1F28             __size_of_fill_osr_press_settings 001B  
                               __pidataBANK2 19B8                            ??_bme280_set_regs 003E  
                              __end_of_crc16 2000                          ??_SYSTEM_Initialize 0073  
                                _IntToString 13C3                                    ?_TMR0_ISR 0070  
           set_osr_settings@desired_settings 006A                                ??_TransmitBit 0070  
                        __size_of_DebugAlert 002B                   __size_of_bme280_soft_reset 003B  
                ??_set_osr_humidity_settings 005D                        _parse_device_settings 11DB  
                                 ??_I2C_Init 0070                               _OPTION_REGbits 0095  
                                 ??_I2C_Stop 0027             are_settings_changed@sub_settings 0071  
                                    ??_Sleep 0074                          set_osr_settings@dev 0066  
                                    ??_crc16 0023                    __end_of_SYSTEM_Initialize 080D  
                                 __pbssBANK1 00E8                                   __pbssBANK2 0142  
                                 __pbssBANK3 01A0                                   __pbssBANK4 0220  
                                 __pbssBANK5 02A0                                   __pbssBANK6 0320  
                              ??_BME280_Init 00B4              __size_of_reload_device_settings 0023  
                interleave_reg_addr@reg_addr 0076                        __size_of_UIntToString 0053  
                             ?_I2C_UserAlert 0070                            ReverseString@temp 0022  
                interleave_reg_addr@reg_data 0071                        InsertString@destLimit 0026  
                                    ?_Insert 0070                                   __pmaintext 0ABE  
                                  ?_TimerISR 0070                               ?_I2C_WriteByte 0070  
             set_osr_press_temp_settings@dev 005C             __end_of_TMR0_SetInterruptHandler 19C2  
                                    ?___lmul 0070                                   ??_TMR0_ISR 0070  
             __size_of_fill_standby_settings 001C                              __CFG_PPS1WAY$ON 0000  
              __end_of_fill_standby_settings 1AB3                                   __pintentry 0004  
                    ?_bme280_compensate_data 005B  set_filter_standby_settings@desired_settings 0060  
                             ___lmul@product 0078                             ReadEnvSensor@len 0032  
                        __end_of_bme280_init 135B                               _WriteEnvSensor 142B  
                                    ?_strlen 0070                 ??_bme280_set_sensor_settings 00AF  
                            __CFG_WDTCCS$SWC 0000                          __end_of_TransmitBit 1A60  
                               _UIntToString 1188                                      _OSCTUNE 0098  
               ?_parse_temp_press_calib_data 0070                                      _SSP1ADD 0212  
                                    _SLRCONA 030C                                      _SLRCONB 030D  
                                    _SLRCONC 030E                                      _SSP1BUF 0211  
              set_osr_humidity_settings@rslt 0062                          __size_of_InitTiming 0008  
                    ?_fill_osr_temp_settings 0070                 ?_set_osr_press_temp_settings 005A  
                  _set_osr_humidity_settings 1046                                 ?_ClearString 0075  
              __size_of_fill_filter_settings 001C                 set_osr_humidity_settings@dev 005C  
                    ?_compensate_temperature 002E                bme280_soft_reset@soft_rst_cmd 005D  
                                    Sleep@ms 0070                 __size_of_compensate_humidity 02BF  
                       __end_of_InsertString 10E5                          __end_of_BME280_Init 13C3  
                            __size_of_Insert 006D                                   ??_TimerISR 0070  
                    ?_bme280_set_sensor_mode 00AE               __end_of_bme280_compensate_data 15E4  
                                    ___aldiv 165B                                      ___awdiv 10E5  
                            __size_of___lmul 002F                                      ___awmod 1001  
                                    ___lldiv 1136                                      ___llmod 1EE6  
               __end_of_are_settings_changed 19EC                       __end_of_WriteEnvSensor 1494  
               __size_of_compensate_pressure 0548                       _reload_device_settings 1ACF  
                 ??_bme280_parse_sensor_data 0071                       ?_parse_device_settings 0070  
                         crc16_update@length 0077                                      __ptext1 1FB8  
                                    __ptext2 1DA6                                      __ptext3 1233  
                                    __ptext4 09A0                                      __ptext5 156E  
                                    __ptext6 059B                                      __ptext7 0053  
                                    __ptext8 0D41                                      __ptext9 1C91  
        parse_humidity_calib_data@dig_H4_lsb 0074          parse_humidity_calib_data@dig_H4_msb 0076  
        parse_humidity_calib_data@dig_H5_lsb 0078          parse_humidity_calib_data@dig_H5_msb 007A  
                       DebugAlert@delay_high 0020          parse_humidity_calib_data@calib_data 007C  
                            __size_of_strlen 0017                          _interleave_reg_addr 1C37  
                      _OSCILLATOR_Initialize 19C8                             ___awmod@dividend 0072  
                              _message_start 02A0                             ___aldiv@dividend 0024  
                   ??_PIN_MANAGER_Initialize 0070                           get_calib_data@F376 0220  
                  reload_device_settings@dev 006B               __end_of_fill_osr_temp_settings 1ACF  
                                    main@end 0130                   __size_of_SYSTEM_Initialize 000C  
                                    clrloop0 19C3                                 ??_DebugAlert 007C  
              ??_parse_temp_press_calib_data 0071                              ??_I2C_UserAlert 007D  
                       end_of_initialization 004F              bme280_get_sensor_data@comp_data 0061  
                         get_calib_data@rslt 0062                             InsertString@dest 0020  
      bme280_set_sensor_settings@sensor_mode 00B2               __end_of_compensate_temperature 073E  
              ??_set_osr_press_temp_settings 005D                         ?_interleave_reg_addr 0070  
                   __size_of_UIntToHexString 0077                            _EUSART_Initialize 19EC  
                            ??_I2C_WriteByte 002B                              ___lldiv@divisor 0070  
             __end_of_bme280_set_sensor_mode 1D2F                              ___lldiv@counter 007D  
                ??_parse_humidity_calib_data 0071                      _fill_osr_press_settings 1A60  
                         ?_EUSART_Initialize 0070                  __end_of_put_device_to_sleep 1DA6  
                       write_power_mode@rslt 005F                                  _bme280_init 12F3  
                   write_power_mode@reg_addr 0060                             ___aldiv@quotient 002A  
                 reload_device_settings@rslt 006F            compensate_temperature@temperature 0051  
                                 main@F10039 01A0                               ClearString@str 0075  
                            ?_WriteEnvSensor 002F                                  _TransmitBit 1A48  
                                    strlen@a 0073                     __end_of_write_power_mode 1CF7  
                                    strlen@s 0070                          ??_EUSART_Initialize 0070  
                         __end_of_DebugAlert 1C0C                     _TMR0_SetInterruptHandler 19BC  
                   __end_of_set_osr_settings 1B64                                    _SSPDATPPS 0E21  
                            _bme280_get_regs 1E62                                    _SSPCLKPPS 0E20  
                         bme280_get_regs@dev 003E                              WriteEnvSensor@i 0039  
                         bme280_get_regs@len 003C                              TransmitString@i 007B  
                              ?_TransmitByte 0070                             __CFG_FOSC$INTOSC 0000  
                              crc16@segments 0021              fill_osr_press_settings@reg_data 0075  
                          __size_of_I2C_Init 0014                            __size_of_I2C_Stop 003F  
               ?_set_filter_standby_settings 005A              fill_osr_press_settings@settings 0070  
             compensate_humidity@uncomp_data 003E                              _bme280_set_regs 080D  
                                _BME280_Init 135B                    __end_of_EUSART_Initialize 19F7  
                       bme280_init@try_count 0067                        ??_interleave_reg_addr 0073  
                  bme280_soft_reset@reg_addr 005F            compensate_temperature@uncomp_data 004C  
                       ReverseString@halfway 0020                       __size_of_ReverseString 0063  
                      TransmitString@message 0076                                 ??_InitTiming 0072  
       __size_of_parse_temp_press_calib_data 00F5                               __end_of_Insert 156E  
                               ?_IntToString 007B                               __end_of___lmul 1CC0  
                    __size_of_get_calib_data 0048                                    Insert@src 0072  
       __size_of_set_osr_press_temp_settings 0041                            __size_of_TMR0_ISR 0010  
         __end_of_bme280_set_sensor_settings 1501                   _bme280_set_sensor_settings 1494  
                     ?_OSCILLATOR_Initialize 0070               parse_temp_press_calib_data@dev 0070  
                                  _EnvSensor 01B0                     bme280_set_regs@temp_buff 0041  
                             ??_TransmitByte 0072                    _parse_humidity_calib_data 1767  
                             __end_of_strlen 1A48                          start_initialization 000F  
                        UIntToHexString@dest 002E                     __size_of_TMR0_Initialize 0016  
            __size_of_PIN_MANAGER_Initialize 002A        parse_temp_press_calib_data@calib_data 0072  
                           UIntToHexString@i 0039                             UIntToHexString@n 002A  
                         __end_of_InitTiming 19D7                         _are_settings_changed 19E1  
                         I2C_ReadByte@ackbit 002B                      __size_of_null_ptr_check 0025  
                      __size_of_InsertString 0051                ??_set_filter_standby_settings 005D  
                            ___llmod@divisor 0070                    ??_fill_osr_press_settings 0072  
                            ___llmod@counter 0079                         __size_of_ClearString 0025  
                                   ??_Insert 0077                           bme280_init@chip_id 0068  
                      __end_of_ReadEnvSensor 07FD                         set_osr_settings@rslt 0069  
                                   ??___lmul 0078           __size_of_set_osr_humidity_settings 004E  
                    __end_of_bme280_get_regs 1EA4                              BME280_Init@rslt 00B7  
                          ??_UIntToHexString 002F                            __size_of_TimerISR 000A  
                                __pdataBANK2 015E                           null_ptr_check@rslt 0072  
                               ClearString@i 007A                                     ??_strlen 0072  
                              ?_crc16_update 0075                   compensate_temperature@var1 0048  
                 compensate_temperature@var2 004D        compensate_temperature@temperature_max 0044  
                              _ReverseString 1290                                    ___latbits 0002  
                        _compensate_humidity 0D41                                __pcstackBANK0 0020  
                              __pcstackBANK1 00A0                                __pcstackBANK2 0120  
                              ?_I2C_ReadByte 0070                      __end_of_bme280_set_regs 08AB  
                               _InsertString 1094                                crc16_update@i 0020  
                   _compensate_pressure$2263 00B9                     _compensate_pressure$2264 00AC  
                   _compensate_pressure$2265 00B0                        ?_are_settings_changed 0070  
                        _compensate_pressure 0053                   __size_of_EUSART_Initialize 000B  
        bme280_set_sensor_mode@last_set_mode 00B2            set_osr_humidity_settings@ctrl_hum 0060  
                                  crc16@data 0025                      __size_of_TransmitString 0028  
                      _TMR0_InterruptHandler 0162                                    __pnvBANK2 0162  
          set_osr_humidity_settings@reg_addr 0063                     set_osr_settings@settings 0064  
                   ??_bme280_get_sensor_data 0063                         ?_compensate_humidity 002E  
                   ??_bme280_get_sensor_mode 0045                       _PIN_MANAGER_Initialize 1B8C  
                    ?_reload_device_settings 006B                      ??_parse_device_settings 0071  
                                   ?___aldiv 0020                                     ?___awdiv 0070  
                                   ?___awmod 0070                                     ?___lldiv 0070  
        set_filter_standby_settings@reg_addr 0062                                     ?___llmod 0070  
        set_filter_standby_settings@reg_data 0063            set_osr_humidity_settings@settings 005A  
            set_osr_press_temp_settings@rslt 0061                         ?_compensate_pressure 002E  
       __size_of_set_filter_standby_settings 0042            __end_of_set_osr_humidity_settings 1094  
               ??_INTERRUPT_InterruptManager 0070                        _fill_standby_settings 1A97  
               __end_of_fill_filter_settings 1A97                               ??_crc16_update 007B  
            __end_of_fill_osr_press_settings 1A7B                               ?_ReverseString 0070  
                                   _BAUD1CON 019F          set_filter_standby_settings@settings 005A  
                                   _I2C_Init 1A07                                     _I2C_Stop 1DE2  
                             ??_I2C_ReadByte 0027                            ReadEnvSensor@rslt 0038  
                             __size_of_Sleep 002B                               __size_of_crc16 0048  
set_osr_press_temp_settings@desired_settings 0060                              ___aldiv@divisor 0020  
                          ??_TMR0_Initialize 0072                              ___aldiv@counter 0028  
                                   _LATAbits 010C                                     _LATCbits 010E  
                    BME280_Init@settings_sel 00B6                                    clear_ram0 19C2  
                       __end_of_TransmitByte 1C91                        ??_compensate_humidity 0032  
             __end_of_reload_device_settings 1AF2          __size_of_INTERRUPT_InterruptManager 0009  
        parse_temp_press_calib_data@reg_data 0073                             ??_WriteEnvSensor 0034  
                 ??_TMR0_SetInterruptHandler 0072                                     _PIR1bits 0010  
                               ?_bme280_init 005E                                  DebugAlert@i 0025  
                              UIntToString@i 0030                                UIntToString@n 0029  
             bme280_get_sensor_data@reg_data 00CD                         __CFG_WDTCPS$WDTCPS1F 0000  
                                   _SSP1CON1 0215                                     _SSP1CON2 0216  
                                   _TMR0_ISR 19F7                        ??_compensate_pressure 0032  
                                   _SSP1STAT 0214                             ?_bme280_get_regs 003B  
                             _get_calib_data 1F70                                 ?_TransmitBit 0070  
                       __size_of_IntToString 0068                            ?_write_power_mode 005A  
                compensate_humidity@humidity 0043                                Insert@current 007A  
                          ?_set_osr_settings 0064                         WriteEnvSensor@dev_id 002F  
                         ??_write_power_mode 005B                                    main@index 0140  
                    compensate_humidity@var1 0047                      compensate_humidity@var2 004B  
                    compensate_humidity@var3 0057                      compensate_humidity@var4 004F  
                    compensate_humidity@var5 0053                           ??_set_osr_settings 0067  
                       TransmitString@counti 0079                      bme280_get_regs@reg_addr 0042  
                    bme280_set_regs@reg_addr 0059                      bme280_get_regs@reg_data 003B  
                    bme280_set_regs@reg_data 003B                             ?_bme280_set_regs 003B  
          bme280_get_sensor_mode@sensor_mode 0049                       ??_are_settings_changed 0071  
                          ___lmul@multiplier 0070                      bme280_set_regs@temp_len 0055  
          __size_of_bme280_parse_sensor_data 011E                    ?_bme280_parse_sensor_data 0070  
                             _null_ptr_check 1AF2           __size_of_parse_humidity_calib_data 0099  
                               ?_BME280_Init 0070                        __end_of_I2C_UserAlert 0800  
                        ReadEnvSensor@dev_id 002F                  bme280_set_regs@reg_addr_cnt 0057  
                         InsertString@counti 0028                              IntToString@dest 007D  
                            IntToString@sign 002B              __size_of_bme280_get_sensor_data 005D  
                        bme280_set_regs@rslt 0058              __size_of_bme280_get_sensor_mode 002B  
                      __end_of_I2C_WriteByte 1F70                                     _TimerISR 19D7  
                     __end_of_get_calib_data 1FB8                            null_ptr_check@dev 0073  
                              InsertString@i 002A                      ??_OSCILLATOR_Initialize 0070  
                           __size_of___aldiv 0081                             __size_of___awdiv 0051  
                     ?_fill_standby_settings 0070                             __size_of___awmod 0045  
                           __size_of___lldiv 0052                             __size_of___llmod 0042  
                            ??_ReverseString 0079                 __size_of_put_device_to_sleep 003C  
                ?_bme280_set_sensor_settings 00AE                            ClearString@counti 0078  
                                   crc16@crc 0026                                     _checksum 0158  
        __end_of_parse_temp_press_calib_data 09A0                  _parse_temp_press_calib_data 08AB  
                        I2C_UserAlert@status 0070               set_filter_standby_settings@dev 005C  
                             ReadEnvSensor@i 0039                                     __ptext10 165B  
                                   __ptext11 1188                                     __ptext20 1B8C  
                                   __ptext12 1EE6                                     __ptext21 19C8  
                                   __ptext13 1136                                     __ptext30 19BC  
                                   __ptext22 19EC                                     __ptext14 15E4  
                                   __ptext31 1B17                                     __ptext23 13C3  
                                   __ptext15 1B64                                     __ptext40 1B3C  
                                   __ptext32 1A31                                     __ptext24 1001  
                                   __ptext16 1C64                                     __ptext41 1E21  
                                   __ptext33 135B                                     __ptext25 1290  
                                   __ptext17 1A48                                     __ptext50 12F3  
                                   __ptext42 1AB3                                     __ptext34 1494  
                                   __ptext26 10E5                                     __ptext18 0801  
                                   __ptext51 1F70                                     __ptext43 1A60  
                                   __ptext35 19E1                                     __ptext27 1094  
                                   __ptext19 1A1B                                     __ptext60 1C37  
                                   __ptext52 08AB                                     __ptext44 1046  
                                   __ptext36 1CF7                                     __ptext28 1501  
                                   __ptext61 142B                                     __ptext53 1767  
                                   __ptext45 1EA4                                     __ptext37 1CC0  
                                   __ptext29 19CF                                     __ptext70 0003  
                                   __ptext62 1F28                                     __ptext54 1E62  
                                   __ptext46 1A97                                     __ptext38 1D6A  
                                   __ptext71 19D7                                     __ptext63 07FD  
                                   __ptext55 073E                                     __ptext47 1A7B  
                                   __ptext39 1ACF                                     __ptext64 1DE2  
                                   __ptext56 16DC                                     __ptext48 11DB  
                                   __ptext65 1BE1                                     __ptext57 1D2F  
                                   __ptext49 1C0C                                     __ptext66 1BB6  
                                   __ptext58 080D                                     __ptext67 1A07  
                                   __ptext59 1AF2                                     __ptext69 19F7  
                __end_of_interleave_reg_addr 1C64                                 _SSP1CON1bits 0215  
                     __end_of_null_ptr_check 1B17                                 _SSP1CON2bits 0216  
        __end_of_set_osr_press_temp_settings 1E62                  _set_osr_press_temp_settings 1E21  
              compensate_pressure@calib_data 002E                              _UIntToHexString 15E4  
                             _TransmitString 1B64                                __size_of_main 0283  
          bme280_compensate_data@sensor_comp 0060                     ??_bme280_compensate_data 005E  
                       _fill_filter_settings 1A7B            __end_of_parse_humidity_calib_data 1800  
                                _message_end 0320                         __end_of_crc16_update 1DE2  
                                   _messages 015E         __end_of_TMR0_DefaultInterruptHandler 0004  
      __size_of_TMR0_DefaultInterruptHandler 0001                 _TMR0_DefaultInterruptHandler 0003  
                       __CFG_WDTCWS$WDTCWSSW 0000                         __end_of_I2C_ReadByte 1767  
                            ?_get_calib_data 003E                  _compensate_temperature$2262 003C  
                                   int$flags 007E           __end_of_INTERRUPT_InterruptManager 000D  
                 _INTERRUPT_InterruptManager 0004                             UIntToString@dest 002D  
                            main@sensor_data 0134                     ??_fill_osr_temp_settings 0072  
                                 _INTCONbits 000B                       _bme280_get_sensor_data 1233  
                          InsertString@index 0024                       _bme280_get_sensor_mode 1C0C  
         set_osr_humidity_settings@ctrl_meas 0061                                ?_UIntToString 0029  
                         bme280_set_regs@dev 003D                           bme280_set_regs@len 003C  
              parse_device_settings@reg_data 0073                     ??_compensate_temperature 0032  
          bme280_compensate_data@uncomp_data 005B                              ?_null_ptr_check 0070  
                 bme280_get_sensor_data@F271 014E                   bme280_get_sensor_data@F273 0142  
                     __end_of_TransmitString 1B8C                        __size_of_TransmitByte 002D  
                                   intlevel1 0000                     ??_bme280_set_sensor_mode 00AF  
                           TransmitByte@byte 0073                parse_device_settings@settings 0070  
              fill_standby_settings@reg_data 0075                                ??_ClearString 0077  
                           ___lldiv@dividend 0074                        ?_fill_filter_settings 0070  
                    ?_PIN_MANAGER_Initialize 0070                   bme280_get_sensor_data@rslt 00D6  
                          __CFG_CLKOUTEN$OFF 0000                ?_TMR0_DefaultInterruptHandler 0070  
              fill_standby_settings@settings 0070                           WriteEnvSensor@rslt 0038  
                       __size_of_bme280_init 0068               __size_of_parse_device_settings 0058  
              __end_of_parse_device_settings 1233                                __pstringtext1 1800  
                              __pstringtext2 1807                                __pstringtext3 0000  
                       __size_of_TransmitBit 0018                                   _OPTION_REG 0095  
                           ___lldiv@quotient 0079                               ??_UIntToString 002E  
                               _TransmitByte 1C64                              _TMR0_Initialize 1A1B  
       are_settings_changed@settings_changed 0072                                 ___aldiv@sign 0029  
                    __end_of_UIntToHexString 165B                            WriteEnvSensor@len 0032  
        __end_of_set_filter_standby_settings 1EE6                  _set_filter_standby_settings 1EA4  
                 bme280_get_sensor_mode@rslt 0048                       __size_of_ReadEnvSensor 00BF  
                   ?_fill_osr_press_settings 0070                   bme280_set_sensor_mode@rslt 00B3  
                            ?_TransmitString 0076               __end_of_PIN_MANAGER_Initialize 1BB6  
                            Insert@destLimit 0075          set_osr_press_temp_settings@reg_addr 0062  
        set_osr_press_temp_settings@reg_data 0063                          bme280_get_regs@rslt 0043  
                          I2C_WriteByte@data 007D              __size_of_bme280_compensate_data 0076  
                       __size_of_BME280_Init 0068          __size_of_bme280_set_sensor_settings 006D  
          bme280_get_sensor_data@sensor_comp 00D5                  write_power_mode@sensor_mode 005E  
        set_osr_press_temp_settings@settings 005A  
