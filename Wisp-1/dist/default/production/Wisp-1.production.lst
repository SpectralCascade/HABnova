

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Sep 05 20:46:27 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    16                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	intentry,global,class=CODE,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	dabs	1,0x7E,2
    95  0000                     
    96                           ; Version 2.05
    97                           ; Generated 20/12/2018 GMT
    98                           ; 
    99                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC16F1619 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0090                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0095                     	;# 
   173  0096                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009A                     	;# 
   177  009B                     	;# 
   178  009B                     	;# 
   179  009C                     	;# 
   180  009D                     	;# 
   181  009E                     	;# 
   182  009F                     	;# 
   183  010C                     	;# 
   184  010D                     	;# 
   185  010E                     	;# 
   186  0111                     	;# 
   187  0112                     	;# 
   188  0113                     	;# 
   189  0114                     	;# 
   190  0115                     	;# 
   191  0116                     	;# 
   192  0117                     	;# 
   193  0118                     	;# 
   194  0119                     	;# 
   195  011C                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0197                     	;# 
   208  0199                     	;# 
   209  0199                     	;# 
   210  0199                     	;# 
   211  019A                     	;# 
   212  019A                     	;# 
   213  019A                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019D                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019E                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  019F                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  019F                     	;# 
   233  020C                     	;# 
   234  020D                     	;# 
   235  020E                     	;# 
   236  0211                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0212                     	;# 
   240  0213                     	;# 
   241  0213                     	;# 
   242  0214                     	;# 
   243  0214                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  028C                     	;# 
   253  028D                     	;# 
   254  028E                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0294                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  029B                     	;# 
   265  029E                     	;# 
   266  030C                     	;# 
   267  030D                     	;# 
   268  030E                     	;# 
   269  038C                     	;# 
   270  038D                     	;# 
   271  038E                     	;# 
   272  0391                     	;# 
   273  0392                     	;# 
   274  0393                     	;# 
   275  0394                     	;# 
   276  0395                     	;# 
   277  0396                     	;# 
   278  0397                     	;# 
   279  0398                     	;# 
   280  0399                     	;# 
   281  040E                     	;# 
   282  0413                     	;# 
   283  0413                     	;# 
   284  0414                     	;# 
   285  0414                     	;# 
   286  0415                     	;# 
   287  0416                     	;# 
   288  0417                     	;# 
   289  0418                     	;# 
   290  041A                     	;# 
   291  041A                     	;# 
   292  041B                     	;# 
   293  041B                     	;# 
   294  041C                     	;# 
   295  041D                     	;# 
   296  041E                     	;# 
   297  041F                     	;# 
   298  0493                     	;# 
   299  0494                     	;# 
   300  0495                     	;# 
   301  0496                     	;# 
   302  049A                     	;# 
   303  049B                     	;# 
   304  049C                     	;# 
   305  049D                     	;# 
   306  058C                     	;# 
   307  058C                     	;# 
   308  058D                     	;# 
   309  058E                     	;# 
   310  058E                     	;# 
   311  058F                     	;# 
   312  0590                     	;# 
   313  0590                     	;# 
   314  0591                     	;# 
   315  0592                     	;# 
   316  0592                     	;# 
   317  0593                     	;# 
   318  0594                     	;# 
   319  0594                     	;# 
   320  0595                     	;# 
   321  0596                     	;# 
   322  0596                     	;# 
   323  0597                     	;# 
   324  0598                     	;# 
   325  0599                     	;# 
   326  059A                     	;# 
   327  059B                     	;# 
   328  059B                     	;# 
   329  059C                     	;# 
   330  059D                     	;# 
   331  060C                     	;# 
   332  060C                     	;# 
   333  060D                     	;# 
   334  060E                     	;# 
   335  060F                     	;# 
   336  060F                     	;# 
   337  0610                     	;# 
   338  0611                     	;# 
   339  0612                     	;# 
   340  0613                     	;# 
   341  0614                     	;# 
   342  0617                     	;# 
   343  0617                     	;# 
   344  0618                     	;# 
   345  0619                     	;# 
   346  061A                     	;# 
   347  061A                     	;# 
   348  061B                     	;# 
   349  061C                     	;# 
   350  0691                     	;# 
   351  0692                     	;# 
   352  0693                     	;# 
   353  0694                     	;# 
   354  0695                     	;# 
   355  0696                     	;# 
   356  0697                     	;# 
   357  0699                     	;# 
   358  069A                     	;# 
   359  0711                     	;# 
   360  0712                     	;# 
   361  0713                     	;# 
   362  0714                     	;# 
   363  0715                     	;# 
   364  0718                     	;# 
   365  0718                     	;# 
   366  0719                     	;# 
   367  071A                     	;# 
   368  071A                     	;# 
   369  071B                     	;# 
   370  071C                     	;# 
   371  071D                     	;# 
   372  0791                     	;# 
   373  0791                     	;# 
   374  0792                     	;# 
   375  0793                     	;# 
   376  0793                     	;# 
   377  0794                     	;# 
   378  0795                     	;# 
   379  0795                     	;# 
   380  0796                     	;# 
   381  0797                     	;# 
   382  0797                     	;# 
   383  0798                     	;# 
   384  0799                     	;# 
   385  079A                     	;# 
   386  080C                     	;# 
   387  080C                     	;# 
   388  080D                     	;# 
   389  080E                     	;# 
   390  080E                     	;# 
   391  080F                     	;# 
   392  0810                     	;# 
   393  0810                     	;# 
   394  0811                     	;# 
   395  0812                     	;# 
   396  0812                     	;# 
   397  0813                     	;# 
   398  0814                     	;# 
   399  0815                     	;# 
   400  0816                     	;# 
   401  0817                     	;# 
   402  0818                     	;# 
   403  0819                     	;# 
   404  081A                     	;# 
   405  081A                     	;# 
   406  081B                     	;# 
   407  081C                     	;# 
   408  081C                     	;# 
   409  081D                     	;# 
   410  088C                     	;# 
   411  088D                     	;# 
   412  088E                     	;# 
   413  088F                     	;# 
   414  088F                     	;# 
   415  0890                     	;# 
   416  0891                     	;# 
   417  0892                     	;# 
   418  0893                     	;# 
   419  0893                     	;# 
   420  0894                     	;# 
   421  0895                     	;# 
   422  0896                     	;# 
   423  0897                     	;# 
   424  0897                     	;# 
   425  0898                     	;# 
   426  0899                     	;# 
   427  0D8C                     	;# 
   428  0D8C                     	;# 
   429  0D8D                     	;# 
   430  0D8E                     	;# 
   431  0D8F                     	;# 
   432  0D8F                     	;# 
   433  0D90                     	;# 
   434  0D91                     	;# 
   435  0D92                     	;# 
   436  0D92                     	;# 
   437  0D93                     	;# 
   438  0D94                     	;# 
   439  0D95                     	;# 
   440  0D95                     	;# 
   441  0D96                     	;# 
   442  0D97                     	;# 
   443  0D98                     	;# 
   444  0D99                     	;# 
   445  0D9A                     	;# 
   446  0D9B                     	;# 
   447  0D9C                     	;# 
   448  0D9D                     	;# 
   449  0D9E                     	;# 
   450  0D9E                     	;# 
   451  0D9F                     	;# 
   452  0DA0                     	;# 
   453  0DA1                     	;# 
   454  0DA1                     	;# 
   455  0DA2                     	;# 
   456  0DA3                     	;# 
   457  0DA4                     	;# 
   458  0DA4                     	;# 
   459  0DA5                     	;# 
   460  0DA6                     	;# 
   461  0DA7                     	;# 
   462  0DA7                     	;# 
   463  0DA8                     	;# 
   464  0DA9                     	;# 
   465  0DAA                     	;# 
   466  0DAB                     	;# 
   467  0DAC                     	;# 
   468  0DAD                     	;# 
   469  0DAE                     	;# 
   470  0DAF                     	;# 
   471  0E0F                     	;# 
   472  0E10                     	;# 
   473  0E11                     	;# 
   474  0E12                     	;# 
   475  0E13                     	;# 
   476  0E14                     	;# 
   477  0E15                     	;# 
   478  0E16                     	;# 
   479  0E17                     	;# 
   480  0E18                     	;# 
   481  0E19                     	;# 
   482  0E1A                     	;# 
   483  0E1B                     	;# 
   484  0E1C                     	;# 
   485  0E1D                     	;# 
   486  0E1E                     	;# 
   487  0E1F                     	;# 
   488  0E20                     	;# 
   489  0E21                     	;# 
   490  0E22                     	;# 
   491  0E23                     	;# 
   492  0E24                     	;# 
   493  0E25                     	;# 
   494  0E26                     	;# 
   495  0E27                     	;# 
   496  0E28                     	;# 
   497  0E29                     	;# 
   498  0E2A                     	;# 
   499  0E2B                     	;# 
   500  0E2C                     	;# 
   501  0E2D                     	;# 
   502  0E2E                     	;# 
   503  0E90                     	;# 
   504  0E91                     	;# 
   505  0E92                     	;# 
   506  0E94                     	;# 
   507  0E95                     	;# 
   508  0E9C                     	;# 
   509  0E9D                     	;# 
   510  0E9E                     	;# 
   511  0E9F                     	;# 
   512  0EA0                     	;# 
   513  0EA1                     	;# 
   514  0EA2                     	;# 
   515  0EA3                     	;# 
   516  0EA4                     	;# 
   517  0EA5                     	;# 
   518  0EA6                     	;# 
   519  0EA7                     	;# 
   520  0F0F                     	;# 
   521  0F10                     	;# 
   522  0F11                     	;# 
   523  0F12                     	;# 
   524  0F13                     	;# 
   525  0F14                     	;# 
   526  0F15                     	;# 
   527  0F16                     	;# 
   528  0F17                     	;# 
   529  0F18                     	;# 
   530  0F19                     	;# 
   531  0F1A                     	;# 
   532  0F1B                     	;# 
   533  0F1C                     	;# 
   534  0F1D                     	;# 
   535  0F1E                     	;# 
   536  0F1F                     	;# 
   537  0F20                     	;# 
   538  0F21                     	;# 
   539  0F22                     	;# 
   540  0F23                     	;# 
   541  0F24                     	;# 
   542  0F25                     	;# 
   543  0F26                     	;# 
   544  0F27                     	;# 
   545  0F28                     	;# 
   546  0F29                     	;# 
   547  0F2A                     	;# 
   548  0F2B                     	;# 
   549  0F2C                     	;# 
   550  0F2D                     	;# 
   551  0F2E                     	;# 
   552  0F2F                     	;# 
   553  0F30                     	;# 
   554  0F31                     	;# 
   555  0F32                     	;# 
   556  0F33                     	;# 
   557  0F34                     	;# 
   558  0F35                     	;# 
   559  0F36                     	;# 
   560  0F37                     	;# 
   561  0FE4                     	;# 
   562  0FE5                     	;# 
   563  0FE6                     	;# 
   564  0FE7                     	;# 
   565  0FE8                     	;# 
   566  0FE9                     	;# 
   567  0FEA                     	;# 
   568  0FEB                     	;# 
   569  0FED                     	;# 
   570  0FEE                     	;# 
   571  0FEF                     	;# 
   572  0000                     	;# 
   573  0001                     	;# 
   574  0002                     	;# 
   575  0003                     	;# 
   576  0004                     	;# 
   577  0005                     	;# 
   578  0006                     	;# 
   579  0007                     	;# 
   580  0008                     	;# 
   581  0009                     	;# 
   582  000A                     	;# 
   583  000B                     	;# 
   584  000C                     	;# 
   585  000D                     	;# 
   586  000E                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001A                     	;# 
   600  001B                     	;# 
   601  001B                     	;# 
   602  001C                     	;# 
   603  001D                     	;# 
   604  001E                     	;# 
   605  001F                     	;# 
   606  008C                     	;# 
   607  008D                     	;# 
   608  008E                     	;# 
   609  0090                     	;# 
   610  0091                     	;# 
   611  0092                     	;# 
   612  0093                     	;# 
   613  0094                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009A                     	;# 
   619  009B                     	;# 
   620  009B                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009E                     	;# 
   624  009F                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  0111                     	;# 
   629  0112                     	;# 
   630  0113                     	;# 
   631  0114                     	;# 
   632  0115                     	;# 
   633  0116                     	;# 
   634  0117                     	;# 
   635  0118                     	;# 
   636  0119                     	;# 
   637  011C                     	;# 
   638  018C                     	;# 
   639  018D                     	;# 
   640  018E                     	;# 
   641  0191                     	;# 
   642  0191                     	;# 
   643  0192                     	;# 
   644  0193                     	;# 
   645  0193                     	;# 
   646  0194                     	;# 
   647  0195                     	;# 
   648  0196                     	;# 
   649  0197                     	;# 
   650  0199                     	;# 
   651  0199                     	;# 
   652  0199                     	;# 
   653  019A                     	;# 
   654  019A                     	;# 
   655  019A                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019B                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019C                     	;# 
   662  019C                     	;# 
   663  019C                     	;# 
   664  019D                     	;# 
   665  019D                     	;# 
   666  019D                     	;# 
   667  019E                     	;# 
   668  019E                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  019F                     	;# 
   672  019F                     	;# 
   673  019F                     	;# 
   674  019F                     	;# 
   675  020C                     	;# 
   676  020D                     	;# 
   677  020E                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0216                     	;# 
   691  0216                     	;# 
   692  0217                     	;# 
   693  0217                     	;# 
   694  028C                     	;# 
   695  028D                     	;# 
   696  028E                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0294                     	;# 
   702  0298                     	;# 
   703  0298                     	;# 
   704  0299                     	;# 
   705  029A                     	;# 
   706  029B                     	;# 
   707  029E                     	;# 
   708  030C                     	;# 
   709  030D                     	;# 
   710  030E                     	;# 
   711  038C                     	;# 
   712  038D                     	;# 
   713  038E                     	;# 
   714  0391                     	;# 
   715  0392                     	;# 
   716  0393                     	;# 
   717  0394                     	;# 
   718  0395                     	;# 
   719  0396                     	;# 
   720  0397                     	;# 
   721  0398                     	;# 
   722  0399                     	;# 
   723  040E                     	;# 
   724  0413                     	;# 
   725  0413                     	;# 
   726  0414                     	;# 
   727  0414                     	;# 
   728  0415                     	;# 
   729  0416                     	;# 
   730  0417                     	;# 
   731  0418                     	;# 
   732  041A                     	;# 
   733  041A                     	;# 
   734  041B                     	;# 
   735  041B                     	;# 
   736  041C                     	;# 
   737  041D                     	;# 
   738  041E                     	;# 
   739  041F                     	;# 
   740  0493                     	;# 
   741  0494                     	;# 
   742  0495                     	;# 
   743  0496                     	;# 
   744  049A                     	;# 
   745  049B                     	;# 
   746  049C                     	;# 
   747  049D                     	;# 
   748  058C                     	;# 
   749  058C                     	;# 
   750  058D                     	;# 
   751  058E                     	;# 
   752  058E                     	;# 
   753  058F                     	;# 
   754  0590                     	;# 
   755  0590                     	;# 
   756  0591                     	;# 
   757  0592                     	;# 
   758  0592                     	;# 
   759  0593                     	;# 
   760  0594                     	;# 
   761  0594                     	;# 
   762  0595                     	;# 
   763  0596                     	;# 
   764  0596                     	;# 
   765  0597                     	;# 
   766  0598                     	;# 
   767  0599                     	;# 
   768  059A                     	;# 
   769  059B                     	;# 
   770  059B                     	;# 
   771  059C                     	;# 
   772  059D                     	;# 
   773  060C                     	;# 
   774  060C                     	;# 
   775  060D                     	;# 
   776  060E                     	;# 
   777  060F                     	;# 
   778  060F                     	;# 
   779  0610                     	;# 
   780  0611                     	;# 
   781  0612                     	;# 
   782  0613                     	;# 
   783  0614                     	;# 
   784  0617                     	;# 
   785  0617                     	;# 
   786  0618                     	;# 
   787  0619                     	;# 
   788  061A                     	;# 
   789  061A                     	;# 
   790  061B                     	;# 
   791  061C                     	;# 
   792  0691                     	;# 
   793  0692                     	;# 
   794  0693                     	;# 
   795  0694                     	;# 
   796  0695                     	;# 
   797  0696                     	;# 
   798  0697                     	;# 
   799  0699                     	;# 
   800  069A                     	;# 
   801  0711                     	;# 
   802  0712                     	;# 
   803  0713                     	;# 
   804  0714                     	;# 
   805  0715                     	;# 
   806  0718                     	;# 
   807  0718                     	;# 
   808  0719                     	;# 
   809  071A                     	;# 
   810  071A                     	;# 
   811  071B                     	;# 
   812  071C                     	;# 
   813  071D                     	;# 
   814  0791                     	;# 
   815  0791                     	;# 
   816  0792                     	;# 
   817  0793                     	;# 
   818  0793                     	;# 
   819  0794                     	;# 
   820  0795                     	;# 
   821  0795                     	;# 
   822  0796                     	;# 
   823  0797                     	;# 
   824  0797                     	;# 
   825  0798                     	;# 
   826  0799                     	;# 
   827  079A                     	;# 
   828  080C                     	;# 
   829  080C                     	;# 
   830  080D                     	;# 
   831  080E                     	;# 
   832  080E                     	;# 
   833  080F                     	;# 
   834  0810                     	;# 
   835  0810                     	;# 
   836  0811                     	;# 
   837  0812                     	;# 
   838  0812                     	;# 
   839  0813                     	;# 
   840  0814                     	;# 
   841  0815                     	;# 
   842  0816                     	;# 
   843  0817                     	;# 
   844  0818                     	;# 
   845  0819                     	;# 
   846  081A                     	;# 
   847  081A                     	;# 
   848  081B                     	;# 
   849  081C                     	;# 
   850  081C                     	;# 
   851  081D                     	;# 
   852  088C                     	;# 
   853  088D                     	;# 
   854  088E                     	;# 
   855  088F                     	;# 
   856  088F                     	;# 
   857  0890                     	;# 
   858  0891                     	;# 
   859  0892                     	;# 
   860  0893                     	;# 
   861  0893                     	;# 
   862  0894                     	;# 
   863  0895                     	;# 
   864  0896                     	;# 
   865  0897                     	;# 
   866  0897                     	;# 
   867  0898                     	;# 
   868  0899                     	;# 
   869  0D8C                     	;# 
   870  0D8C                     	;# 
   871  0D8D                     	;# 
   872  0D8E                     	;# 
   873  0D8F                     	;# 
   874  0D8F                     	;# 
   875  0D90                     	;# 
   876  0D91                     	;# 
   877  0D92                     	;# 
   878  0D92                     	;# 
   879  0D93                     	;# 
   880  0D94                     	;# 
   881  0D95                     	;# 
   882  0D95                     	;# 
   883  0D96                     	;# 
   884  0D97                     	;# 
   885  0D98                     	;# 
   886  0D99                     	;# 
   887  0D9A                     	;# 
   888  0D9B                     	;# 
   889  0D9C                     	;# 
   890  0D9D                     	;# 
   891  0D9E                     	;# 
   892  0D9E                     	;# 
   893  0D9F                     	;# 
   894  0DA0                     	;# 
   895  0DA1                     	;# 
   896  0DA1                     	;# 
   897  0DA2                     	;# 
   898  0DA3                     	;# 
   899  0DA4                     	;# 
   900  0DA4                     	;# 
   901  0DA5                     	;# 
   902  0DA6                     	;# 
   903  0DA7                     	;# 
   904  0DA7                     	;# 
   905  0DA8                     	;# 
   906  0DA9                     	;# 
   907  0DAA                     	;# 
   908  0DAB                     	;# 
   909  0DAC                     	;# 
   910  0DAD                     	;# 
   911  0DAE                     	;# 
   912  0DAF                     	;# 
   913  0E0F                     	;# 
   914  0E10                     	;# 
   915  0E11                     	;# 
   916  0E12                     	;# 
   917  0E13                     	;# 
   918  0E14                     	;# 
   919  0E15                     	;# 
   920  0E16                     	;# 
   921  0E17                     	;# 
   922  0E18                     	;# 
   923  0E19                     	;# 
   924  0E1A                     	;# 
   925  0E1B                     	;# 
   926  0E1C                     	;# 
   927  0E1D                     	;# 
   928  0E1E                     	;# 
   929  0E1F                     	;# 
   930  0E20                     	;# 
   931  0E21                     	;# 
   932  0E22                     	;# 
   933  0E23                     	;# 
   934  0E24                     	;# 
   935  0E25                     	;# 
   936  0E26                     	;# 
   937  0E27                     	;# 
   938  0E28                     	;# 
   939  0E29                     	;# 
   940  0E2A                     	;# 
   941  0E2B                     	;# 
   942  0E2C                     	;# 
   943  0E2D                     	;# 
   944  0E2E                     	;# 
   945  0E90                     	;# 
   946  0E91                     	;# 
   947  0E92                     	;# 
   948  0E94                     	;# 
   949  0E95                     	;# 
   950  0E9C                     	;# 
   951  0E9D                     	;# 
   952  0E9E                     	;# 
   953  0E9F                     	;# 
   954  0EA0                     	;# 
   955  0EA1                     	;# 
   956  0EA2                     	;# 
   957  0EA3                     	;# 
   958  0EA4                     	;# 
   959  0EA5                     	;# 
   960  0EA6                     	;# 
   961  0EA7                     	;# 
   962  0F0F                     	;# 
   963  0F10                     	;# 
   964  0F11                     	;# 
   965  0F12                     	;# 
   966  0F13                     	;# 
   967  0F14                     	;# 
   968  0F15                     	;# 
   969  0F16                     	;# 
   970  0F17                     	;# 
   971  0F18                     	;# 
   972  0F19                     	;# 
   973  0F1A                     	;# 
   974  0F1B                     	;# 
   975  0F1C                     	;# 
   976  0F1D                     	;# 
   977  0F1E                     	;# 
   978  0F1F                     	;# 
   979  0F20                     	;# 
   980  0F21                     	;# 
   981  0F22                     	;# 
   982  0F23                     	;# 
   983  0F24                     	;# 
   984  0F25                     	;# 
   985  0F26                     	;# 
   986  0F27                     	;# 
   987  0F28                     	;# 
   988  0F29                     	;# 
   989  0F2A                     	;# 
   990  0F2B                     	;# 
   991  0F2C                     	;# 
   992  0F2D                     	;# 
   993  0F2E                     	;# 
   994  0F2F                     	;# 
   995  0F30                     	;# 
   996  0F31                     	;# 
   997  0F32                     	;# 
   998  0F33                     	;# 
   999  0F34                     	;# 
  1000  0F35                     	;# 
  1001  0F36                     	;# 
  1002  0F37                     	;# 
  1003  0FE4                     	;# 
  1004  0FE5                     	;# 
  1005  0FE6                     	;# 
  1006  0FE7                     	;# 
  1007  0FE8                     	;# 
  1008  0FE9                     	;# 
  1009  0FEA                     	;# 
  1010  0FEB                     	;# 
  1011  0FED                     	;# 
  1012  0FEE                     	;# 
  1013  0FEF                     	;# 
  1014  0000                     	;# 
  1015  0001                     	;# 
  1016  0002                     	;# 
  1017  0003                     	;# 
  1018  0004                     	;# 
  1019  0005                     	;# 
  1020  0006                     	;# 
  1021  0007                     	;# 
  1022  0008                     	;# 
  1023  0009                     	;# 
  1024  000A                     	;# 
  1025  000B                     	;# 
  1026  000C                     	;# 
  1027  000D                     	;# 
  1028  000E                     	;# 
  1029  0010                     	;# 
  1030  0011                     	;# 
  1031  0012                     	;# 
  1032  0013                     	;# 
  1033  0014                     	;# 
  1034  0015                     	;# 
  1035  0016                     	;# 
  1036  0016                     	;# 
  1037  0017                     	;# 
  1038  0018                     	;# 
  1039  0019                     	;# 
  1040  001A                     	;# 
  1041  001A                     	;# 
  1042  001B                     	;# 
  1043  001B                     	;# 
  1044  001C                     	;# 
  1045  001D                     	;# 
  1046  001E                     	;# 
  1047  001F                     	;# 
  1048  008C                     	;# 
  1049  008D                     	;# 
  1050  008E                     	;# 
  1051  0090                     	;# 
  1052  0091                     	;# 
  1053  0092                     	;# 
  1054  0093                     	;# 
  1055  0094                     	;# 
  1056  0095                     	;# 
  1057  0096                     	;# 
  1058  0098                     	;# 
  1059  0099                     	;# 
  1060  009A                     	;# 
  1061  009B                     	;# 
  1062  009B                     	;# 
  1063  009C                     	;# 
  1064  009D                     	;# 
  1065  009E                     	;# 
  1066  009F                     	;# 
  1067  010C                     	;# 
  1068  010D                     	;# 
  1069  010E                     	;# 
  1070  0111                     	;# 
  1071  0112                     	;# 
  1072  0113                     	;# 
  1073  0114                     	;# 
  1074  0115                     	;# 
  1075  0116                     	;# 
  1076  0117                     	;# 
  1077  0118                     	;# 
  1078  0119                     	;# 
  1079  011C                     	;# 
  1080  018C                     	;# 
  1081  018D                     	;# 
  1082  018E                     	;# 
  1083  0191                     	;# 
  1084  0191                     	;# 
  1085  0192                     	;# 
  1086  0193                     	;# 
  1087  0193                     	;# 
  1088  0194                     	;# 
  1089  0195                     	;# 
  1090  0196                     	;# 
  1091  0197                     	;# 
  1092  0199                     	;# 
  1093  0199                     	;# 
  1094  0199                     	;# 
  1095  019A                     	;# 
  1096  019A                     	;# 
  1097  019A                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019C                     	;# 
  1104  019C                     	;# 
  1105  019C                     	;# 
  1106  019D                     	;# 
  1107  019D                     	;# 
  1108  019D                     	;# 
  1109  019E                     	;# 
  1110  019E                     	;# 
  1111  019E                     	;# 
  1112  019F                     	;# 
  1113  019F                     	;# 
  1114  019F                     	;# 
  1115  019F                     	;# 
  1116  019F                     	;# 
  1117  020C                     	;# 
  1118  020D                     	;# 
  1119  020E                     	;# 
  1120  0211                     	;# 
  1121  0211                     	;# 
  1122  0212                     	;# 
  1123  0212                     	;# 
  1124  0213                     	;# 
  1125  0213                     	;# 
  1126  0214                     	;# 
  1127  0214                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  028C                     	;# 
  1137  028D                     	;# 
  1138  028E                     	;# 
  1139  0291                     	;# 
  1140  0291                     	;# 
  1141  0292                     	;# 
  1142  0293                     	;# 
  1143  0294                     	;# 
  1144  0298                     	;# 
  1145  0298                     	;# 
  1146  0299                     	;# 
  1147  029A                     	;# 
  1148  029B                     	;# 
  1149  029E                     	;# 
  1150  030C                     	;# 
  1151  030D                     	;# 
  1152  030E                     	;# 
  1153  038C                     	;# 
  1154  038D                     	;# 
  1155  038E                     	;# 
  1156  0391                     	;# 
  1157  0392                     	;# 
  1158  0393                     	;# 
  1159  0394                     	;# 
  1160  0395                     	;# 
  1161  0396                     	;# 
  1162  0397                     	;# 
  1163  0398                     	;# 
  1164  0399                     	;# 
  1165  040E                     	;# 
  1166  0413                     	;# 
  1167  0413                     	;# 
  1168  0414                     	;# 
  1169  0414                     	;# 
  1170  0415                     	;# 
  1171  0416                     	;# 
  1172  0417                     	;# 
  1173  0418                     	;# 
  1174  041A                     	;# 
  1175  041A                     	;# 
  1176  041B                     	;# 
  1177  041B                     	;# 
  1178  041C                     	;# 
  1179  041D                     	;# 
  1180  041E                     	;# 
  1181  041F                     	;# 
  1182  0493                     	;# 
  1183  0494                     	;# 
  1184  0495                     	;# 
  1185  0496                     	;# 
  1186  049A                     	;# 
  1187  049B                     	;# 
  1188  049C                     	;# 
  1189  049D                     	;# 
  1190  058C                     	;# 
  1191  058C                     	;# 
  1192  058D                     	;# 
  1193  058E                     	;# 
  1194  058E                     	;# 
  1195  058F                     	;# 
  1196  0590                     	;# 
  1197  0590                     	;# 
  1198  0591                     	;# 
  1199  0592                     	;# 
  1200  0592                     	;# 
  1201  0593                     	;# 
  1202  0594                     	;# 
  1203  0594                     	;# 
  1204  0595                     	;# 
  1205  0596                     	;# 
  1206  0596                     	;# 
  1207  0597                     	;# 
  1208  0598                     	;# 
  1209  0599                     	;# 
  1210  059A                     	;# 
  1211  059B                     	;# 
  1212  059B                     	;# 
  1213  059C                     	;# 
  1214  059D                     	;# 
  1215  060C                     	;# 
  1216  060C                     	;# 
  1217  060D                     	;# 
  1218  060E                     	;# 
  1219  060F                     	;# 
  1220  060F                     	;# 
  1221  0610                     	;# 
  1222  0611                     	;# 
  1223  0612                     	;# 
  1224  0613                     	;# 
  1225  0614                     	;# 
  1226  0617                     	;# 
  1227  0617                     	;# 
  1228  0618                     	;# 
  1229  0619                     	;# 
  1230  061A                     	;# 
  1231  061A                     	;# 
  1232  061B                     	;# 
  1233  061C                     	;# 
  1234  0691                     	;# 
  1235  0692                     	;# 
  1236  0693                     	;# 
  1237  0694                     	;# 
  1238  0695                     	;# 
  1239  0696                     	;# 
  1240  0697                     	;# 
  1241  0699                     	;# 
  1242  069A                     	;# 
  1243  0711                     	;# 
  1244  0712                     	;# 
  1245  0713                     	;# 
  1246  0714                     	;# 
  1247  0715                     	;# 
  1248  0718                     	;# 
  1249  0718                     	;# 
  1250  0719                     	;# 
  1251  071A                     	;# 
  1252  071A                     	;# 
  1253  071B                     	;# 
  1254  071C                     	;# 
  1255  071D                     	;# 
  1256  0791                     	;# 
  1257  0791                     	;# 
  1258  0792                     	;# 
  1259  0793                     	;# 
  1260  0793                     	;# 
  1261  0794                     	;# 
  1262  0795                     	;# 
  1263  0795                     	;# 
  1264  0796                     	;# 
  1265  0797                     	;# 
  1266  0797                     	;# 
  1267  0798                     	;# 
  1268  0799                     	;# 
  1269  079A                     	;# 
  1270  080C                     	;# 
  1271  080C                     	;# 
  1272  080D                     	;# 
  1273  080E                     	;# 
  1274  080E                     	;# 
  1275  080F                     	;# 
  1276  0810                     	;# 
  1277  0810                     	;# 
  1278  0811                     	;# 
  1279  0812                     	;# 
  1280  0812                     	;# 
  1281  0813                     	;# 
  1282  0814                     	;# 
  1283  0815                     	;# 
  1284  0816                     	;# 
  1285  0817                     	;# 
  1286  0818                     	;# 
  1287  0819                     	;# 
  1288  081A                     	;# 
  1289  081A                     	;# 
  1290  081B                     	;# 
  1291  081C                     	;# 
  1292  081C                     	;# 
  1293  081D                     	;# 
  1294  088C                     	;# 
  1295  088D                     	;# 
  1296  088E                     	;# 
  1297  088F                     	;# 
  1298  088F                     	;# 
  1299  0890                     	;# 
  1300  0891                     	;# 
  1301  0892                     	;# 
  1302  0893                     	;# 
  1303  0893                     	;# 
  1304  0894                     	;# 
  1305  0895                     	;# 
  1306  0896                     	;# 
  1307  0897                     	;# 
  1308  0897                     	;# 
  1309  0898                     	;# 
  1310  0899                     	;# 
  1311  0D8C                     	;# 
  1312  0D8C                     	;# 
  1313  0D8D                     	;# 
  1314  0D8E                     	;# 
  1315  0D8F                     	;# 
  1316  0D8F                     	;# 
  1317  0D90                     	;# 
  1318  0D91                     	;# 
  1319  0D92                     	;# 
  1320  0D92                     	;# 
  1321  0D93                     	;# 
  1322  0D94                     	;# 
  1323  0D95                     	;# 
  1324  0D95                     	;# 
  1325  0D96                     	;# 
  1326  0D97                     	;# 
  1327  0D98                     	;# 
  1328  0D99                     	;# 
  1329  0D9A                     	;# 
  1330  0D9B                     	;# 
  1331  0D9C                     	;# 
  1332  0D9D                     	;# 
  1333  0D9E                     	;# 
  1334  0D9E                     	;# 
  1335  0D9F                     	;# 
  1336  0DA0                     	;# 
  1337  0DA1                     	;# 
  1338  0DA1                     	;# 
  1339  0DA2                     	;# 
  1340  0DA3                     	;# 
  1341  0DA4                     	;# 
  1342  0DA4                     	;# 
  1343  0DA5                     	;# 
  1344  0DA6                     	;# 
  1345  0DA7                     	;# 
  1346  0DA7                     	;# 
  1347  0DA8                     	;# 
  1348  0DA9                     	;# 
  1349  0DAA                     	;# 
  1350  0DAB                     	;# 
  1351  0DAC                     	;# 
  1352  0DAD                     	;# 
  1353  0DAE                     	;# 
  1354  0DAF                     	;# 
  1355  0E0F                     	;# 
  1356  0E10                     	;# 
  1357  0E11                     	;# 
  1358  0E12                     	;# 
  1359  0E13                     	;# 
  1360  0E14                     	;# 
  1361  0E15                     	;# 
  1362  0E16                     	;# 
  1363  0E17                     	;# 
  1364  0E18                     	;# 
  1365  0E19                     	;# 
  1366  0E1A                     	;# 
  1367  0E1B                     	;# 
  1368  0E1C                     	;# 
  1369  0E1D                     	;# 
  1370  0E1E                     	;# 
  1371  0E1F                     	;# 
  1372  0E20                     	;# 
  1373  0E21                     	;# 
  1374  0E22                     	;# 
  1375  0E23                     	;# 
  1376  0E24                     	;# 
  1377  0E25                     	;# 
  1378  0E26                     	;# 
  1379  0E27                     	;# 
  1380  0E28                     	;# 
  1381  0E29                     	;# 
  1382  0E2A                     	;# 
  1383  0E2B                     	;# 
  1384  0E2C                     	;# 
  1385  0E2D                     	;# 
  1386  0E2E                     	;# 
  1387  0E90                     	;# 
  1388  0E91                     	;# 
  1389  0E92                     	;# 
  1390  0E94                     	;# 
  1391  0E95                     	;# 
  1392  0E9C                     	;# 
  1393  0E9D                     	;# 
  1394  0E9E                     	;# 
  1395  0E9F                     	;# 
  1396  0EA0                     	;# 
  1397  0EA1                     	;# 
  1398  0EA2                     	;# 
  1399  0EA3                     	;# 
  1400  0EA4                     	;# 
  1401  0EA5                     	;# 
  1402  0EA6                     	;# 
  1403  0EA7                     	;# 
  1404  0F0F                     	;# 
  1405  0F10                     	;# 
  1406  0F11                     	;# 
  1407  0F12                     	;# 
  1408  0F13                     	;# 
  1409  0F14                     	;# 
  1410  0F15                     	;# 
  1411  0F16                     	;# 
  1412  0F17                     	;# 
  1413  0F18                     	;# 
  1414  0F19                     	;# 
  1415  0F1A                     	;# 
  1416  0F1B                     	;# 
  1417  0F1C                     	;# 
  1418  0F1D                     	;# 
  1419  0F1E                     	;# 
  1420  0F1F                     	;# 
  1421  0F20                     	;# 
  1422  0F21                     	;# 
  1423  0F22                     	;# 
  1424  0F23                     	;# 
  1425  0F24                     	;# 
  1426  0F25                     	;# 
  1427  0F26                     	;# 
  1428  0F27                     	;# 
  1429  0F28                     	;# 
  1430  0F29                     	;# 
  1431  0F2A                     	;# 
  1432  0F2B                     	;# 
  1433  0F2C                     	;# 
  1434  0F2D                     	;# 
  1435  0F2E                     	;# 
  1436  0F2F                     	;# 
  1437  0F30                     	;# 
  1438  0F31                     	;# 
  1439  0F32                     	;# 
  1440  0F33                     	;# 
  1441  0F34                     	;# 
  1442  0F35                     	;# 
  1443  0F36                     	;# 
  1444  0F37                     	;# 
  1445  0FE4                     	;# 
  1446  0FE5                     	;# 
  1447  0FE6                     	;# 
  1448  0FE7                     	;# 
  1449  0FE8                     	;# 
  1450  0FE9                     	;# 
  1451  0FEA                     	;# 
  1452  0FEB                     	;# 
  1453  0FED                     	;# 
  1454  0FEE                     	;# 
  1455  0FEF                     	;# 
  1456  0000                     	;# 
  1457  0001                     	;# 
  1458  0002                     	;# 
  1459  0003                     	;# 
  1460  0004                     	;# 
  1461  0005                     	;# 
  1462  0006                     	;# 
  1463  0007                     	;# 
  1464  0008                     	;# 
  1465  0009                     	;# 
  1466  000A                     	;# 
  1467  000B                     	;# 
  1468  000C                     	;# 
  1469  000D                     	;# 
  1470  000E                     	;# 
  1471  0010                     	;# 
  1472  0011                     	;# 
  1473  0012                     	;# 
  1474  0013                     	;# 
  1475  0014                     	;# 
  1476  0015                     	;# 
  1477  0016                     	;# 
  1478  0016                     	;# 
  1479  0017                     	;# 
  1480  0018                     	;# 
  1481  0019                     	;# 
  1482  001A                     	;# 
  1483  001A                     	;# 
  1484  001B                     	;# 
  1485  001B                     	;# 
  1486  001C                     	;# 
  1487  001D                     	;# 
  1488  001E                     	;# 
  1489  001F                     	;# 
  1490  008C                     	;# 
  1491  008D                     	;# 
  1492  008E                     	;# 
  1493  0090                     	;# 
  1494  0091                     	;# 
  1495  0092                     	;# 
  1496  0093                     	;# 
  1497  0094                     	;# 
  1498  0095                     	;# 
  1499  0096                     	;# 
  1500  0098                     	;# 
  1501  0099                     	;# 
  1502  009A                     	;# 
  1503  009B                     	;# 
  1504  009B                     	;# 
  1505  009C                     	;# 
  1506  009D                     	;# 
  1507  009E                     	;# 
  1508  009F                     	;# 
  1509  010C                     	;# 
  1510  010D                     	;# 
  1511  010E                     	;# 
  1512  0111                     	;# 
  1513  0112                     	;# 
  1514  0113                     	;# 
  1515  0114                     	;# 
  1516  0115                     	;# 
  1517  0116                     	;# 
  1518  0117                     	;# 
  1519  0118                     	;# 
  1520  0119                     	;# 
  1521  011C                     	;# 
  1522  018C                     	;# 
  1523  018D                     	;# 
  1524  018E                     	;# 
  1525  0191                     	;# 
  1526  0191                     	;# 
  1527  0192                     	;# 
  1528  0193                     	;# 
  1529  0193                     	;# 
  1530  0194                     	;# 
  1531  0195                     	;# 
  1532  0196                     	;# 
  1533  0197                     	;# 
  1534  0199                     	;# 
  1535  0199                     	;# 
  1536  0199                     	;# 
  1537  019A                     	;# 
  1538  019A                     	;# 
  1539  019A                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019C                     	;# 
  1546  019C                     	;# 
  1547  019C                     	;# 
  1548  019D                     	;# 
  1549  019D                     	;# 
  1550  019D                     	;# 
  1551  019E                     	;# 
  1552  019E                     	;# 
  1553  019E                     	;# 
  1554  019F                     	;# 
  1555  019F                     	;# 
  1556  019F                     	;# 
  1557  019F                     	;# 
  1558  019F                     	;# 
  1559  020C                     	;# 
  1560  020D                     	;# 
  1561  020E                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  028C                     	;# 
  1579  028D                     	;# 
  1580  028E                     	;# 
  1581  0291                     	;# 
  1582  0291                     	;# 
  1583  0292                     	;# 
  1584  0293                     	;# 
  1585  0294                     	;# 
  1586  0298                     	;# 
  1587  0298                     	;# 
  1588  0299                     	;# 
  1589  029A                     	;# 
  1590  029B                     	;# 
  1591  029E                     	;# 
  1592  030C                     	;# 
  1593  030D                     	;# 
  1594  030E                     	;# 
  1595  038C                     	;# 
  1596  038D                     	;# 
  1597  038E                     	;# 
  1598  0391                     	;# 
  1599  0392                     	;# 
  1600  0393                     	;# 
  1601  0394                     	;# 
  1602  0395                     	;# 
  1603  0396                     	;# 
  1604  0397                     	;# 
  1605  0398                     	;# 
  1606  0399                     	;# 
  1607  040E                     	;# 
  1608  0413                     	;# 
  1609  0413                     	;# 
  1610  0414                     	;# 
  1611  0414                     	;# 
  1612  0415                     	;# 
  1613  0416                     	;# 
  1614  0417                     	;# 
  1615  0418                     	;# 
  1616  041A                     	;# 
  1617  041A                     	;# 
  1618  041B                     	;# 
  1619  041B                     	;# 
  1620  041C                     	;# 
  1621  041D                     	;# 
  1622  041E                     	;# 
  1623  041F                     	;# 
  1624  0493                     	;# 
  1625  0494                     	;# 
  1626  0495                     	;# 
  1627  0496                     	;# 
  1628  049A                     	;# 
  1629  049B                     	;# 
  1630  049C                     	;# 
  1631  049D                     	;# 
  1632  058C                     	;# 
  1633  058C                     	;# 
  1634  058D                     	;# 
  1635  058E                     	;# 
  1636  058E                     	;# 
  1637  058F                     	;# 
  1638  0590                     	;# 
  1639  0590                     	;# 
  1640  0591                     	;# 
  1641  0592                     	;# 
  1642  0592                     	;# 
  1643  0593                     	;# 
  1644  0594                     	;# 
  1645  0594                     	;# 
  1646  0595                     	;# 
  1647  0596                     	;# 
  1648  0596                     	;# 
  1649  0597                     	;# 
  1650  0598                     	;# 
  1651  0599                     	;# 
  1652  059A                     	;# 
  1653  059B                     	;# 
  1654  059B                     	;# 
  1655  059C                     	;# 
  1656  059D                     	;# 
  1657  060C                     	;# 
  1658  060C                     	;# 
  1659  060D                     	;# 
  1660  060E                     	;# 
  1661  060F                     	;# 
  1662  060F                     	;# 
  1663  0610                     	;# 
  1664  0611                     	;# 
  1665  0612                     	;# 
  1666  0613                     	;# 
  1667  0614                     	;# 
  1668  0617                     	;# 
  1669  0617                     	;# 
  1670  0618                     	;# 
  1671  0619                     	;# 
  1672  061A                     	;# 
  1673  061A                     	;# 
  1674  061B                     	;# 
  1675  061C                     	;# 
  1676  0691                     	;# 
  1677  0692                     	;# 
  1678  0693                     	;# 
  1679  0694                     	;# 
  1680  0695                     	;# 
  1681  0696                     	;# 
  1682  0697                     	;# 
  1683  0699                     	;# 
  1684  069A                     	;# 
  1685  0711                     	;# 
  1686  0712                     	;# 
  1687  0713                     	;# 
  1688  0714                     	;# 
  1689  0715                     	;# 
  1690  0718                     	;# 
  1691  0718                     	;# 
  1692  0719                     	;# 
  1693  071A                     	;# 
  1694  071A                     	;# 
  1695  071B                     	;# 
  1696  071C                     	;# 
  1697  071D                     	;# 
  1698  0791                     	;# 
  1699  0791                     	;# 
  1700  0792                     	;# 
  1701  0793                     	;# 
  1702  0793                     	;# 
  1703  0794                     	;# 
  1704  0795                     	;# 
  1705  0795                     	;# 
  1706  0796                     	;# 
  1707  0797                     	;# 
  1708  0797                     	;# 
  1709  0798                     	;# 
  1710  0799                     	;# 
  1711  079A                     	;# 
  1712  080C                     	;# 
  1713  080C                     	;# 
  1714  080D                     	;# 
  1715  080E                     	;# 
  1716  080E                     	;# 
  1717  080F                     	;# 
  1718  0810                     	;# 
  1719  0810                     	;# 
  1720  0811                     	;# 
  1721  0812                     	;# 
  1722  0812                     	;# 
  1723  0813                     	;# 
  1724  0814                     	;# 
  1725  0815                     	;# 
  1726  0816                     	;# 
  1727  0817                     	;# 
  1728  0818                     	;# 
  1729  0819                     	;# 
  1730  081A                     	;# 
  1731  081A                     	;# 
  1732  081B                     	;# 
  1733  081C                     	;# 
  1734  081C                     	;# 
  1735  081D                     	;# 
  1736  088C                     	;# 
  1737  088D                     	;# 
  1738  088E                     	;# 
  1739  088F                     	;# 
  1740  088F                     	;# 
  1741  0890                     	;# 
  1742  0891                     	;# 
  1743  0892                     	;# 
  1744  0893                     	;# 
  1745  0893                     	;# 
  1746  0894                     	;# 
  1747  0895                     	;# 
  1748  0896                     	;# 
  1749  0897                     	;# 
  1750  0897                     	;# 
  1751  0898                     	;# 
  1752  0899                     	;# 
  1753  0D8C                     	;# 
  1754  0D8C                     	;# 
  1755  0D8D                     	;# 
  1756  0D8E                     	;# 
  1757  0D8F                     	;# 
  1758  0D8F                     	;# 
  1759  0D90                     	;# 
  1760  0D91                     	;# 
  1761  0D92                     	;# 
  1762  0D92                     	;# 
  1763  0D93                     	;# 
  1764  0D94                     	;# 
  1765  0D95                     	;# 
  1766  0D95                     	;# 
  1767  0D96                     	;# 
  1768  0D97                     	;# 
  1769  0D98                     	;# 
  1770  0D99                     	;# 
  1771  0D9A                     	;# 
  1772  0D9B                     	;# 
  1773  0D9C                     	;# 
  1774  0D9D                     	;# 
  1775  0D9E                     	;# 
  1776  0D9E                     	;# 
  1777  0D9F                     	;# 
  1778  0DA0                     	;# 
  1779  0DA1                     	;# 
  1780  0DA1                     	;# 
  1781  0DA2                     	;# 
  1782  0DA3                     	;# 
  1783  0DA4                     	;# 
  1784  0DA4                     	;# 
  1785  0DA5                     	;# 
  1786  0DA6                     	;# 
  1787  0DA7                     	;# 
  1788  0DA7                     	;# 
  1789  0DA8                     	;# 
  1790  0DA9                     	;# 
  1791  0DAA                     	;# 
  1792  0DAB                     	;# 
  1793  0DAC                     	;# 
  1794  0DAD                     	;# 
  1795  0DAE                     	;# 
  1796  0DAF                     	;# 
  1797  0E0F                     	;# 
  1798  0E10                     	;# 
  1799  0E11                     	;# 
  1800  0E12                     	;# 
  1801  0E13                     	;# 
  1802  0E14                     	;# 
  1803  0E15                     	;# 
  1804  0E16                     	;# 
  1805  0E17                     	;# 
  1806  0E18                     	;# 
  1807  0E19                     	;# 
  1808  0E1A                     	;# 
  1809  0E1B                     	;# 
  1810  0E1C                     	;# 
  1811  0E1D                     	;# 
  1812  0E1E                     	;# 
  1813  0E1F                     	;# 
  1814  0E20                     	;# 
  1815  0E21                     	;# 
  1816  0E22                     	;# 
  1817  0E23                     	;# 
  1818  0E24                     	;# 
  1819  0E25                     	;# 
  1820  0E26                     	;# 
  1821  0E27                     	;# 
  1822  0E28                     	;# 
  1823  0E29                     	;# 
  1824  0E2A                     	;# 
  1825  0E2B                     	;# 
  1826  0E2C                     	;# 
  1827  0E2D                     	;# 
  1828  0E2E                     	;# 
  1829  0E90                     	;# 
  1830  0E91                     	;# 
  1831  0E92                     	;# 
  1832  0E94                     	;# 
  1833  0E95                     	;# 
  1834  0E9C                     	;# 
  1835  0E9D                     	;# 
  1836  0E9E                     	;# 
  1837  0E9F                     	;# 
  1838  0EA0                     	;# 
  1839  0EA1                     	;# 
  1840  0EA2                     	;# 
  1841  0EA3                     	;# 
  1842  0EA4                     	;# 
  1843  0EA5                     	;# 
  1844  0EA6                     	;# 
  1845  0EA7                     	;# 
  1846  0F0F                     	;# 
  1847  0F10                     	;# 
  1848  0F11                     	;# 
  1849  0F12                     	;# 
  1850  0F13                     	;# 
  1851  0F14                     	;# 
  1852  0F15                     	;# 
  1853  0F16                     	;# 
  1854  0F17                     	;# 
  1855  0F18                     	;# 
  1856  0F19                     	;# 
  1857  0F1A                     	;# 
  1858  0F1B                     	;# 
  1859  0F1C                     	;# 
  1860  0F1D                     	;# 
  1861  0F1E                     	;# 
  1862  0F1F                     	;# 
  1863  0F20                     	;# 
  1864  0F21                     	;# 
  1865  0F22                     	;# 
  1866  0F23                     	;# 
  1867  0F24                     	;# 
  1868  0F25                     	;# 
  1869  0F26                     	;# 
  1870  0F27                     	;# 
  1871  0F28                     	;# 
  1872  0F29                     	;# 
  1873  0F2A                     	;# 
  1874  0F2B                     	;# 
  1875  0F2C                     	;# 
  1876  0F2D                     	;# 
  1877  0F2E                     	;# 
  1878  0F2F                     	;# 
  1879  0F30                     	;# 
  1880  0F31                     	;# 
  1881  0F32                     	;# 
  1882  0F33                     	;# 
  1883  0F34                     	;# 
  1884  0F35                     	;# 
  1885  0F36                     	;# 
  1886  0F37                     	;# 
  1887  0FE4                     	;# 
  1888  0FE5                     	;# 
  1889  0FE6                     	;# 
  1890  0FE7                     	;# 
  1891  0FE8                     	;# 
  1892  0FE9                     	;# 
  1893  0FEA                     	;# 
  1894  0FEB                     	;# 
  1895  0FED                     	;# 
  1896  0FEE                     	;# 
  1897  0FEF                     	;# 
  1898  0000                     	;# 
  1899  0001                     	;# 
  1900  0002                     	;# 
  1901  0003                     	;# 
  1902  0004                     	;# 
  1903  0005                     	;# 
  1904  0006                     	;# 
  1905  0007                     	;# 
  1906  0008                     	;# 
  1907  0009                     	;# 
  1908  000A                     	;# 
  1909  000B                     	;# 
  1910  000C                     	;# 
  1911  000D                     	;# 
  1912  000E                     	;# 
  1913  0010                     	;# 
  1914  0011                     	;# 
  1915  0012                     	;# 
  1916  0013                     	;# 
  1917  0014                     	;# 
  1918  0015                     	;# 
  1919  0016                     	;# 
  1920  0016                     	;# 
  1921  0017                     	;# 
  1922  0018                     	;# 
  1923  0019                     	;# 
  1924  001A                     	;# 
  1925  001A                     	;# 
  1926  001B                     	;# 
  1927  001B                     	;# 
  1928  001C                     	;# 
  1929  001D                     	;# 
  1930  001E                     	;# 
  1931  001F                     	;# 
  1932  008C                     	;# 
  1933  008D                     	;# 
  1934  008E                     	;# 
  1935  0090                     	;# 
  1936  0091                     	;# 
  1937  0092                     	;# 
  1938  0093                     	;# 
  1939  0094                     	;# 
  1940  0095                     	;# 
  1941  0096                     	;# 
  1942  0098                     	;# 
  1943  0099                     	;# 
  1944  009A                     	;# 
  1945  009B                     	;# 
  1946  009B                     	;# 
  1947  009C                     	;# 
  1948  009D                     	;# 
  1949  009E                     	;# 
  1950  009F                     	;# 
  1951  010C                     	;# 
  1952  010D                     	;# 
  1953  010E                     	;# 
  1954  0111                     	;# 
  1955  0112                     	;# 
  1956  0113                     	;# 
  1957  0114                     	;# 
  1958  0115                     	;# 
  1959  0116                     	;# 
  1960  0117                     	;# 
  1961  0118                     	;# 
  1962  0119                     	;# 
  1963  011C                     	;# 
  1964  018C                     	;# 
  1965  018D                     	;# 
  1966  018E                     	;# 
  1967  0191                     	;# 
  1968  0191                     	;# 
  1969  0192                     	;# 
  1970  0193                     	;# 
  1971  0193                     	;# 
  1972  0194                     	;# 
  1973  0195                     	;# 
  1974  0196                     	;# 
  1975  0197                     	;# 
  1976  0199                     	;# 
  1977  0199                     	;# 
  1978  0199                     	;# 
  1979  019A                     	;# 
  1980  019A                     	;# 
  1981  019A                     	;# 
  1982  019B                     	;# 
  1983  019B                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019B                     	;# 
  1987  019C                     	;# 
  1988  019C                     	;# 
  1989  019C                     	;# 
  1990  019D                     	;# 
  1991  019D                     	;# 
  1992  019D                     	;# 
  1993  019E                     	;# 
  1994  019E                     	;# 
  1995  019E                     	;# 
  1996  019F                     	;# 
  1997  019F                     	;# 
  1998  019F                     	;# 
  1999  019F                     	;# 
  2000  019F                     	;# 
  2001  020C                     	;# 
  2002  020D                     	;# 
  2003  020E                     	;# 
  2004  0211                     	;# 
  2005  0211                     	;# 
  2006  0212                     	;# 
  2007  0212                     	;# 
  2008  0213                     	;# 
  2009  0213                     	;# 
  2010  0214                     	;# 
  2011  0214                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  028C                     	;# 
  2021  028D                     	;# 
  2022  028E                     	;# 
  2023  0291                     	;# 
  2024  0291                     	;# 
  2025  0292                     	;# 
  2026  0293                     	;# 
  2027  0294                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  029B                     	;# 
  2033  029E                     	;# 
  2034  030C                     	;# 
  2035  030D                     	;# 
  2036  030E                     	;# 
  2037  038C                     	;# 
  2038  038D                     	;# 
  2039  038E                     	;# 
  2040  0391                     	;# 
  2041  0392                     	;# 
  2042  0393                     	;# 
  2043  0394                     	;# 
  2044  0395                     	;# 
  2045  0396                     	;# 
  2046  0397                     	;# 
  2047  0398                     	;# 
  2048  0399                     	;# 
  2049  040E                     	;# 
  2050  0413                     	;# 
  2051  0413                     	;# 
  2052  0414                     	;# 
  2053  0414                     	;# 
  2054  0415                     	;# 
  2055  0416                     	;# 
  2056  0417                     	;# 
  2057  0418                     	;# 
  2058  041A                     	;# 
  2059  041A                     	;# 
  2060  041B                     	;# 
  2061  041B                     	;# 
  2062  041C                     	;# 
  2063  041D                     	;# 
  2064  041E                     	;# 
  2065  041F                     	;# 
  2066  0493                     	;# 
  2067  0494                     	;# 
  2068  0495                     	;# 
  2069  0496                     	;# 
  2070  049A                     	;# 
  2071  049B                     	;# 
  2072  049C                     	;# 
  2073  049D                     	;# 
  2074  058C                     	;# 
  2075  058C                     	;# 
  2076  058D                     	;# 
  2077  058E                     	;# 
  2078  058E                     	;# 
  2079  058F                     	;# 
  2080  0590                     	;# 
  2081  0590                     	;# 
  2082  0591                     	;# 
  2083  0592                     	;# 
  2084  0592                     	;# 
  2085  0593                     	;# 
  2086  0594                     	;# 
  2087  0594                     	;# 
  2088  0595                     	;# 
  2089  0596                     	;# 
  2090  0596                     	;# 
  2091  0597                     	;# 
  2092  0598                     	;# 
  2093  0599                     	;# 
  2094  059A                     	;# 
  2095  059B                     	;# 
  2096  059B                     	;# 
  2097  059C                     	;# 
  2098  059D                     	;# 
  2099  060C                     	;# 
  2100  060C                     	;# 
  2101  060D                     	;# 
  2102  060E                     	;# 
  2103  060F                     	;# 
  2104  060F                     	;# 
  2105  0610                     	;# 
  2106  0611                     	;# 
  2107  0612                     	;# 
  2108  0613                     	;# 
  2109  0614                     	;# 
  2110  0617                     	;# 
  2111  0617                     	;# 
  2112  0618                     	;# 
  2113  0619                     	;# 
  2114  061A                     	;# 
  2115  061A                     	;# 
  2116  061B                     	;# 
  2117  061C                     	;# 
  2118  0691                     	;# 
  2119  0692                     	;# 
  2120  0693                     	;# 
  2121  0694                     	;# 
  2122  0695                     	;# 
  2123  0696                     	;# 
  2124  0697                     	;# 
  2125  0699                     	;# 
  2126  069A                     	;# 
  2127  0711                     	;# 
  2128  0712                     	;# 
  2129  0713                     	;# 
  2130  0714                     	;# 
  2131  0715                     	;# 
  2132  0718                     	;# 
  2133  0718                     	;# 
  2134  0719                     	;# 
  2135  071A                     	;# 
  2136  071A                     	;# 
  2137  071B                     	;# 
  2138  071C                     	;# 
  2139  071D                     	;# 
  2140  0791                     	;# 
  2141  0791                     	;# 
  2142  0792                     	;# 
  2143  0793                     	;# 
  2144  0793                     	;# 
  2145  0794                     	;# 
  2146  0795                     	;# 
  2147  0795                     	;# 
  2148  0796                     	;# 
  2149  0797                     	;# 
  2150  0797                     	;# 
  2151  0798                     	;# 
  2152  0799                     	;# 
  2153  079A                     	;# 
  2154  080C                     	;# 
  2155  080C                     	;# 
  2156  080D                     	;# 
  2157  080E                     	;# 
  2158  080E                     	;# 
  2159  080F                     	;# 
  2160  0810                     	;# 
  2161  0810                     	;# 
  2162  0811                     	;# 
  2163  0812                     	;# 
  2164  0812                     	;# 
  2165  0813                     	;# 
  2166  0814                     	;# 
  2167  0815                     	;# 
  2168  0816                     	;# 
  2169  0817                     	;# 
  2170  0818                     	;# 
  2171  0819                     	;# 
  2172  081A                     	;# 
  2173  081A                     	;# 
  2174  081B                     	;# 
  2175  081C                     	;# 
  2176  081C                     	;# 
  2177  081D                     	;# 
  2178  088C                     	;# 
  2179  088D                     	;# 
  2180  088E                     	;# 
  2181  088F                     	;# 
  2182  088F                     	;# 
  2183  0890                     	;# 
  2184  0891                     	;# 
  2185  0892                     	;# 
  2186  0893                     	;# 
  2187  0893                     	;# 
  2188  0894                     	;# 
  2189  0895                     	;# 
  2190  0896                     	;# 
  2191  0897                     	;# 
  2192  0897                     	;# 
  2193  0898                     	;# 
  2194  0899                     	;# 
  2195  0D8C                     	;# 
  2196  0D8C                     	;# 
  2197  0D8D                     	;# 
  2198  0D8E                     	;# 
  2199  0D8F                     	;# 
  2200  0D8F                     	;# 
  2201  0D90                     	;# 
  2202  0D91                     	;# 
  2203  0D92                     	;# 
  2204  0D92                     	;# 
  2205  0D93                     	;# 
  2206  0D94                     	;# 
  2207  0D95                     	;# 
  2208  0D95                     	;# 
  2209  0D96                     	;# 
  2210  0D97                     	;# 
  2211  0D98                     	;# 
  2212  0D99                     	;# 
  2213  0D9A                     	;# 
  2214  0D9B                     	;# 
  2215  0D9C                     	;# 
  2216  0D9D                     	;# 
  2217  0D9E                     	;# 
  2218  0D9E                     	;# 
  2219  0D9F                     	;# 
  2220  0DA0                     	;# 
  2221  0DA1                     	;# 
  2222  0DA1                     	;# 
  2223  0DA2                     	;# 
  2224  0DA3                     	;# 
  2225  0DA4                     	;# 
  2226  0DA4                     	;# 
  2227  0DA5                     	;# 
  2228  0DA6                     	;# 
  2229  0DA7                     	;# 
  2230  0DA7                     	;# 
  2231  0DA8                     	;# 
  2232  0DA9                     	;# 
  2233  0DAA                     	;# 
  2234  0DAB                     	;# 
  2235  0DAC                     	;# 
  2236  0DAD                     	;# 
  2237  0DAE                     	;# 
  2238  0DAF                     	;# 
  2239  0E0F                     	;# 
  2240  0E10                     	;# 
  2241  0E11                     	;# 
  2242  0E12                     	;# 
  2243  0E13                     	;# 
  2244  0E14                     	;# 
  2245  0E15                     	;# 
  2246  0E16                     	;# 
  2247  0E17                     	;# 
  2248  0E18                     	;# 
  2249  0E19                     	;# 
  2250  0E1A                     	;# 
  2251  0E1B                     	;# 
  2252  0E1C                     	;# 
  2253  0E1D                     	;# 
  2254  0E1E                     	;# 
  2255  0E1F                     	;# 
  2256  0E20                     	;# 
  2257  0E21                     	;# 
  2258  0E22                     	;# 
  2259  0E23                     	;# 
  2260  0E24                     	;# 
  2261  0E25                     	;# 
  2262  0E26                     	;# 
  2263  0E27                     	;# 
  2264  0E28                     	;# 
  2265  0E29                     	;# 
  2266  0E2A                     	;# 
  2267  0E2B                     	;# 
  2268  0E2C                     	;# 
  2269  0E2D                     	;# 
  2270  0E2E                     	;# 
  2271  0E90                     	;# 
  2272  0E91                     	;# 
  2273  0E92                     	;# 
  2274  0E94                     	;# 
  2275  0E95                     	;# 
  2276  0E9C                     	;# 
  2277  0E9D                     	;# 
  2278  0E9E                     	;# 
  2279  0E9F                     	;# 
  2280  0EA0                     	;# 
  2281  0EA1                     	;# 
  2282  0EA2                     	;# 
  2283  0EA3                     	;# 
  2284  0EA4                     	;# 
  2285  0EA5                     	;# 
  2286  0EA6                     	;# 
  2287  0EA7                     	;# 
  2288  0F0F                     	;# 
  2289  0F10                     	;# 
  2290  0F11                     	;# 
  2291  0F12                     	;# 
  2292  0F13                     	;# 
  2293  0F14                     	;# 
  2294  0F15                     	;# 
  2295  0F16                     	;# 
  2296  0F17                     	;# 
  2297  0F18                     	;# 
  2298  0F19                     	;# 
  2299  0F1A                     	;# 
  2300  0F1B                     	;# 
  2301  0F1C                     	;# 
  2302  0F1D                     	;# 
  2303  0F1E                     	;# 
  2304  0F1F                     	;# 
  2305  0F20                     	;# 
  2306  0F21                     	;# 
  2307  0F22                     	;# 
  2308  0F23                     	;# 
  2309  0F24                     	;# 
  2310  0F25                     	;# 
  2311  0F26                     	;# 
  2312  0F27                     	;# 
  2313  0F28                     	;# 
  2314  0F29                     	;# 
  2315  0F2A                     	;# 
  2316  0F2B                     	;# 
  2317  0F2C                     	;# 
  2318  0F2D                     	;# 
  2319  0F2E                     	;# 
  2320  0F2F                     	;# 
  2321  0F30                     	;# 
  2322  0F31                     	;# 
  2323  0F32                     	;# 
  2324  0F33                     	;# 
  2325  0F34                     	;# 
  2326  0F35                     	;# 
  2327  0F36                     	;# 
  2328  0F37                     	;# 
  2329  0FE4                     	;# 
  2330  0FE5                     	;# 
  2331  0FE6                     	;# 
  2332  0FE7                     	;# 
  2333  0FE8                     	;# 
  2334  0FE9                     	;# 
  2335  0FEA                     	;# 
  2336  0FEB                     	;# 
  2337  0FED                     	;# 
  2338  0FEE                     	;# 
  2339  0FEF                     	;# 
  2340  0000                     	;# 
  2341  0001                     	;# 
  2342  0002                     	;# 
  2343  0003                     	;# 
  2344  0004                     	;# 
  2345  0005                     	;# 
  2346  0006                     	;# 
  2347  0007                     	;# 
  2348  0008                     	;# 
  2349  0009                     	;# 
  2350  000A                     	;# 
  2351  000B                     	;# 
  2352  000C                     	;# 
  2353  000D                     	;# 
  2354  000E                     	;# 
  2355  0010                     	;# 
  2356  0011                     	;# 
  2357  0012                     	;# 
  2358  0013                     	;# 
  2359  0014                     	;# 
  2360  0015                     	;# 
  2361  0016                     	;# 
  2362  0016                     	;# 
  2363  0017                     	;# 
  2364  0018                     	;# 
  2365  0019                     	;# 
  2366  001A                     	;# 
  2367  001A                     	;# 
  2368  001B                     	;# 
  2369  001B                     	;# 
  2370  001C                     	;# 
  2371  001D                     	;# 
  2372  001E                     	;# 
  2373  001F                     	;# 
  2374  008C                     	;# 
  2375  008D                     	;# 
  2376  008E                     	;# 
  2377  0090                     	;# 
  2378  0091                     	;# 
  2379  0092                     	;# 
  2380  0093                     	;# 
  2381  0094                     	;# 
  2382  0095                     	;# 
  2383  0096                     	;# 
  2384  0098                     	;# 
  2385  0099                     	;# 
  2386  009A                     	;# 
  2387  009B                     	;# 
  2388  009B                     	;# 
  2389  009C                     	;# 
  2390  009D                     	;# 
  2391  009E                     	;# 
  2392  009F                     	;# 
  2393  010C                     	;# 
  2394  010D                     	;# 
  2395  010E                     	;# 
  2396  0111                     	;# 
  2397  0112                     	;# 
  2398  0113                     	;# 
  2399  0114                     	;# 
  2400  0115                     	;# 
  2401  0116                     	;# 
  2402  0117                     	;# 
  2403  0118                     	;# 
  2404  0119                     	;# 
  2405  011C                     	;# 
  2406  018C                     	;# 
  2407  018D                     	;# 
  2408  018E                     	;# 
  2409  0191                     	;# 
  2410  0191                     	;# 
  2411  0192                     	;# 
  2412  0193                     	;# 
  2413  0193                     	;# 
  2414  0194                     	;# 
  2415  0195                     	;# 
  2416  0196                     	;# 
  2417  0197                     	;# 
  2418  0199                     	;# 
  2419  0199                     	;# 
  2420  0199                     	;# 
  2421  019A                     	;# 
  2422  019A                     	;# 
  2423  019A                     	;# 
  2424  019B                     	;# 
  2425  019B                     	;# 
  2426  019B                     	;# 
  2427  019B                     	;# 
  2428  019B                     	;# 
  2429  019C                     	;# 
  2430  019C                     	;# 
  2431  019C                     	;# 
  2432  019D                     	;# 
  2433  019D                     	;# 
  2434  019D                     	;# 
  2435  019E                     	;# 
  2436  019E                     	;# 
  2437  019E                     	;# 
  2438  019F                     	;# 
  2439  019F                     	;# 
  2440  019F                     	;# 
  2441  019F                     	;# 
  2442  019F                     	;# 
  2443  020C                     	;# 
  2444  020D                     	;# 
  2445  020E                     	;# 
  2446  0211                     	;# 
  2447  0211                     	;# 
  2448  0212                     	;# 
  2449  0212                     	;# 
  2450  0213                     	;# 
  2451  0213                     	;# 
  2452  0214                     	;# 
  2453  0214                     	;# 
  2454  0215                     	;# 
  2455  0215                     	;# 
  2456  0215                     	;# 
  2457  0215                     	;# 
  2458  0216                     	;# 
  2459  0216                     	;# 
  2460  0217                     	;# 
  2461  0217                     	;# 
  2462  028C                     	;# 
  2463  028D                     	;# 
  2464  028E                     	;# 
  2465  0291                     	;# 
  2466  0291                     	;# 
  2467  0292                     	;# 
  2468  0293                     	;# 
  2469  0294                     	;# 
  2470  0298                     	;# 
  2471  0298                     	;# 
  2472  0299                     	;# 
  2473  029A                     	;# 
  2474  029B                     	;# 
  2475  029E                     	;# 
  2476  030C                     	;# 
  2477  030D                     	;# 
  2478  030E                     	;# 
  2479  038C                     	;# 
  2480  038D                     	;# 
  2481  038E                     	;# 
  2482  0391                     	;# 
  2483  0392                     	;# 
  2484  0393                     	;# 
  2485  0394                     	;# 
  2486  0395                     	;# 
  2487  0396                     	;# 
  2488  0397                     	;# 
  2489  0398                     	;# 
  2490  0399                     	;# 
  2491  040E                     	;# 
  2492  0413                     	;# 
  2493  0413                     	;# 
  2494  0414                     	;# 
  2495  0414                     	;# 
  2496  0415                     	;# 
  2497  0416                     	;# 
  2498  0417                     	;# 
  2499  0418                     	;# 
  2500  041A                     	;# 
  2501  041A                     	;# 
  2502  041B                     	;# 
  2503  041B                     	;# 
  2504  041C                     	;# 
  2505  041D                     	;# 
  2506  041E                     	;# 
  2507  041F                     	;# 
  2508  0493                     	;# 
  2509  0494                     	;# 
  2510  0495                     	;# 
  2511  0496                     	;# 
  2512  049A                     	;# 
  2513  049B                     	;# 
  2514  049C                     	;# 
  2515  049D                     	;# 
  2516  058C                     	;# 
  2517  058C                     	;# 
  2518  058D                     	;# 
  2519  058E                     	;# 
  2520  058E                     	;# 
  2521  058F                     	;# 
  2522  0590                     	;# 
  2523  0590                     	;# 
  2524  0591                     	;# 
  2525  0592                     	;# 
  2526  0592                     	;# 
  2527  0593                     	;# 
  2528  0594                     	;# 
  2529  0594                     	;# 
  2530  0595                     	;# 
  2531  0596                     	;# 
  2532  0596                     	;# 
  2533  0597                     	;# 
  2534  0598                     	;# 
  2535  0599                     	;# 
  2536  059A                     	;# 
  2537  059B                     	;# 
  2538  059B                     	;# 
  2539  059C                     	;# 
  2540  059D                     	;# 
  2541  060C                     	;# 
  2542  060C                     	;# 
  2543  060D                     	;# 
  2544  060E                     	;# 
  2545  060F                     	;# 
  2546  060F                     	;# 
  2547  0610                     	;# 
  2548  0611                     	;# 
  2549  0612                     	;# 
  2550  0613                     	;# 
  2551  0614                     	;# 
  2552  0617                     	;# 
  2553  0617                     	;# 
  2554  0618                     	;# 
  2555  0619                     	;# 
  2556  061A                     	;# 
  2557  061A                     	;# 
  2558  061B                     	;# 
  2559  061C                     	;# 
  2560  0691                     	;# 
  2561  0692                     	;# 
  2562  0693                     	;# 
  2563  0694                     	;# 
  2564  0695                     	;# 
  2565  0696                     	;# 
  2566  0697                     	;# 
  2567  0699                     	;# 
  2568  069A                     	;# 
  2569  0711                     	;# 
  2570  0712                     	;# 
  2571  0713                     	;# 
  2572  0714                     	;# 
  2573  0715                     	;# 
  2574  0718                     	;# 
  2575  0718                     	;# 
  2576  0719                     	;# 
  2577  071A                     	;# 
  2578  071A                     	;# 
  2579  071B                     	;# 
  2580  071C                     	;# 
  2581  071D                     	;# 
  2582  0791                     	;# 
  2583  0791                     	;# 
  2584  0792                     	;# 
  2585  0793                     	;# 
  2586  0793                     	;# 
  2587  0794                     	;# 
  2588  0795                     	;# 
  2589  0795                     	;# 
  2590  0796                     	;# 
  2591  0797                     	;# 
  2592  0797                     	;# 
  2593  0798                     	;# 
  2594  0799                     	;# 
  2595  079A                     	;# 
  2596  080C                     	;# 
  2597  080C                     	;# 
  2598  080D                     	;# 
  2599  080E                     	;# 
  2600  080E                     	;# 
  2601  080F                     	;# 
  2602  0810                     	;# 
  2603  0810                     	;# 
  2604  0811                     	;# 
  2605  0812                     	;# 
  2606  0812                     	;# 
  2607  0813                     	;# 
  2608  0814                     	;# 
  2609  0815                     	;# 
  2610  0816                     	;# 
  2611  0817                     	;# 
  2612  0818                     	;# 
  2613  0819                     	;# 
  2614  081A                     	;# 
  2615  081A                     	;# 
  2616  081B                     	;# 
  2617  081C                     	;# 
  2618  081C                     	;# 
  2619  081D                     	;# 
  2620  088C                     	;# 
  2621  088D                     	;# 
  2622  088E                     	;# 
  2623  088F                     	;# 
  2624  088F                     	;# 
  2625  0890                     	;# 
  2626  0891                     	;# 
  2627  0892                     	;# 
  2628  0893                     	;# 
  2629  0893                     	;# 
  2630  0894                     	;# 
  2631  0895                     	;# 
  2632  0896                     	;# 
  2633  0897                     	;# 
  2634  0897                     	;# 
  2635  0898                     	;# 
  2636  0899                     	;# 
  2637  0D8C                     	;# 
  2638  0D8C                     	;# 
  2639  0D8D                     	;# 
  2640  0D8E                     	;# 
  2641  0D8F                     	;# 
  2642  0D8F                     	;# 
  2643  0D90                     	;# 
  2644  0D91                     	;# 
  2645  0D92                     	;# 
  2646  0D92                     	;# 
  2647  0D93                     	;# 
  2648  0D94                     	;# 
  2649  0D95                     	;# 
  2650  0D95                     	;# 
  2651  0D96                     	;# 
  2652  0D97                     	;# 
  2653  0D98                     	;# 
  2654  0D99                     	;# 
  2655  0D9A                     	;# 
  2656  0D9B                     	;# 
  2657  0D9C                     	;# 
  2658  0D9D                     	;# 
  2659  0D9E                     	;# 
  2660  0D9E                     	;# 
  2661  0D9F                     	;# 
  2662  0DA0                     	;# 
  2663  0DA1                     	;# 
  2664  0DA1                     	;# 
  2665  0DA2                     	;# 
  2666  0DA3                     	;# 
  2667  0DA4                     	;# 
  2668  0DA4                     	;# 
  2669  0DA5                     	;# 
  2670  0DA6                     	;# 
  2671  0DA7                     	;# 
  2672  0DA7                     	;# 
  2673  0DA8                     	;# 
  2674  0DA9                     	;# 
  2675  0DAA                     	;# 
  2676  0DAB                     	;# 
  2677  0DAC                     	;# 
  2678  0DAD                     	;# 
  2679  0DAE                     	;# 
  2680  0DAF                     	;# 
  2681  0E0F                     	;# 
  2682  0E10                     	;# 
  2683  0E11                     	;# 
  2684  0E12                     	;# 
  2685  0E13                     	;# 
  2686  0E14                     	;# 
  2687  0E15                     	;# 
  2688  0E16                     	;# 
  2689  0E17                     	;# 
  2690  0E18                     	;# 
  2691  0E19                     	;# 
  2692  0E1A                     	;# 
  2693  0E1B                     	;# 
  2694  0E1C                     	;# 
  2695  0E1D                     	;# 
  2696  0E1E                     	;# 
  2697  0E1F                     	;# 
  2698  0E20                     	;# 
  2699  0E21                     	;# 
  2700  0E22                     	;# 
  2701  0E23                     	;# 
  2702  0E24                     	;# 
  2703  0E25                     	;# 
  2704  0E26                     	;# 
  2705  0E27                     	;# 
  2706  0E28                     	;# 
  2707  0E29                     	;# 
  2708  0E2A                     	;# 
  2709  0E2B                     	;# 
  2710  0E2C                     	;# 
  2711  0E2D                     	;# 
  2712  0E2E                     	;# 
  2713  0E90                     	;# 
  2714  0E91                     	;# 
  2715  0E92                     	;# 
  2716  0E94                     	;# 
  2717  0E95                     	;# 
  2718  0E9C                     	;# 
  2719  0E9D                     	;# 
  2720  0E9E                     	;# 
  2721  0E9F                     	;# 
  2722  0EA0                     	;# 
  2723  0EA1                     	;# 
  2724  0EA2                     	;# 
  2725  0EA3                     	;# 
  2726  0EA4                     	;# 
  2727  0EA5                     	;# 
  2728  0EA6                     	;# 
  2729  0EA7                     	;# 
  2730  0F0F                     	;# 
  2731  0F10                     	;# 
  2732  0F11                     	;# 
  2733  0F12                     	;# 
  2734  0F13                     	;# 
  2735  0F14                     	;# 
  2736  0F15                     	;# 
  2737  0F16                     	;# 
  2738  0F17                     	;# 
  2739  0F18                     	;# 
  2740  0F19                     	;# 
  2741  0F1A                     	;# 
  2742  0F1B                     	;# 
  2743  0F1C                     	;# 
  2744  0F1D                     	;# 
  2745  0F1E                     	;# 
  2746  0F1F                     	;# 
  2747  0F20                     	;# 
  2748  0F21                     	;# 
  2749  0F22                     	;# 
  2750  0F23                     	;# 
  2751  0F24                     	;# 
  2752  0F25                     	;# 
  2753  0F26                     	;# 
  2754  0F27                     	;# 
  2755  0F28                     	;# 
  2756  0F29                     	;# 
  2757  0F2A                     	;# 
  2758  0F2B                     	;# 
  2759  0F2C                     	;# 
  2760  0F2D                     	;# 
  2761  0F2E                     	;# 
  2762  0F2F                     	;# 
  2763  0F30                     	;# 
  2764  0F31                     	;# 
  2765  0F32                     	;# 
  2766  0F33                     	;# 
  2767  0F34                     	;# 
  2768  0F35                     	;# 
  2769  0F36                     	;# 
  2770  0F37                     	;# 
  2771  0FE4                     	;# 
  2772  0FE5                     	;# 
  2773  0FE6                     	;# 
  2774  0FE7                     	;# 
  2775  0FE8                     	;# 
  2776  0FE9                     	;# 
  2777  0FEA                     	;# 
  2778  0FEB                     	;# 
  2779  0FED                     	;# 
  2780  0FEE                     	;# 
  2781  0FEF                     	;# 
  2782  0000                     	;# 
  2783  0001                     	;# 
  2784  0002                     	;# 
  2785  0003                     	;# 
  2786  0004                     	;# 
  2787  0005                     	;# 
  2788  0006                     	;# 
  2789  0007                     	;# 
  2790  0008                     	;# 
  2791  0009                     	;# 
  2792  000A                     	;# 
  2793  000B                     	;# 
  2794  000C                     	;# 
  2795  000D                     	;# 
  2796  000E                     	;# 
  2797  0010                     	;# 
  2798  0011                     	;# 
  2799  0012                     	;# 
  2800  0013                     	;# 
  2801  0014                     	;# 
  2802  0015                     	;# 
  2803  0016                     	;# 
  2804  0016                     	;# 
  2805  0017                     	;# 
  2806  0018                     	;# 
  2807  0019                     	;# 
  2808  001A                     	;# 
  2809  001A                     	;# 
  2810  001B                     	;# 
  2811  001B                     	;# 
  2812  001C                     	;# 
  2813  001D                     	;# 
  2814  001E                     	;# 
  2815  001F                     	;# 
  2816  008C                     	;# 
  2817  008D                     	;# 
  2818  008E                     	;# 
  2819  0090                     	;# 
  2820  0091                     	;# 
  2821  0092                     	;# 
  2822  0093                     	;# 
  2823  0094                     	;# 
  2824  0095                     	;# 
  2825  0096                     	;# 
  2826  0098                     	;# 
  2827  0099                     	;# 
  2828  009A                     	;# 
  2829  009B                     	;# 
  2830  009B                     	;# 
  2831  009C                     	;# 
  2832  009D                     	;# 
  2833  009E                     	;# 
  2834  009F                     	;# 
  2835  010C                     	;# 
  2836  010D                     	;# 
  2837  010E                     	;# 
  2838  0111                     	;# 
  2839  0112                     	;# 
  2840  0113                     	;# 
  2841  0114                     	;# 
  2842  0115                     	;# 
  2843  0116                     	;# 
  2844  0117                     	;# 
  2845  0118                     	;# 
  2846  0119                     	;# 
  2847  011C                     	;# 
  2848  018C                     	;# 
  2849  018D                     	;# 
  2850  018E                     	;# 
  2851  0191                     	;# 
  2852  0191                     	;# 
  2853  0192                     	;# 
  2854  0193                     	;# 
  2855  0193                     	;# 
  2856  0194                     	;# 
  2857  0195                     	;# 
  2858  0196                     	;# 
  2859  0197                     	;# 
  2860  0199                     	;# 
  2861  0199                     	;# 
  2862  0199                     	;# 
  2863  019A                     	;# 
  2864  019A                     	;# 
  2865  019A                     	;# 
  2866  019B                     	;# 
  2867  019B                     	;# 
  2868  019B                     	;# 
  2869  019B                     	;# 
  2870  019B                     	;# 
  2871  019C                     	;# 
  2872  019C                     	;# 
  2873  019C                     	;# 
  2874  019D                     	;# 
  2875  019D                     	;# 
  2876  019D                     	;# 
  2877  019E                     	;# 
  2878  019E                     	;# 
  2879  019E                     	;# 
  2880  019F                     	;# 
  2881  019F                     	;# 
  2882  019F                     	;# 
  2883  019F                     	;# 
  2884  019F                     	;# 
  2885  020C                     	;# 
  2886  020D                     	;# 
  2887  020E                     	;# 
  2888  0211                     	;# 
  2889  0211                     	;# 
  2890  0212                     	;# 
  2891  0212                     	;# 
  2892  0213                     	;# 
  2893  0213                     	;# 
  2894  0214                     	;# 
  2895  0214                     	;# 
  2896  0215                     	;# 
  2897  0215                     	;# 
  2898  0215                     	;# 
  2899  0215                     	;# 
  2900  0216                     	;# 
  2901  0216                     	;# 
  2902  0217                     	;# 
  2903  0217                     	;# 
  2904  028C                     	;# 
  2905  028D                     	;# 
  2906  028E                     	;# 
  2907  0291                     	;# 
  2908  0291                     	;# 
  2909  0292                     	;# 
  2910  0293                     	;# 
  2911  0294                     	;# 
  2912  0298                     	;# 
  2913  0298                     	;# 
  2914  0299                     	;# 
  2915  029A                     	;# 
  2916  029B                     	;# 
  2917  029E                     	;# 
  2918  030C                     	;# 
  2919  030D                     	;# 
  2920  030E                     	;# 
  2921  038C                     	;# 
  2922  038D                     	;# 
  2923  038E                     	;# 
  2924  0391                     	;# 
  2925  0392                     	;# 
  2926  0393                     	;# 
  2927  0394                     	;# 
  2928  0395                     	;# 
  2929  0396                     	;# 
  2930  0397                     	;# 
  2931  0398                     	;# 
  2932  0399                     	;# 
  2933  040E                     	;# 
  2934  0413                     	;# 
  2935  0413                     	;# 
  2936  0414                     	;# 
  2937  0414                     	;# 
  2938  0415                     	;# 
  2939  0416                     	;# 
  2940  0417                     	;# 
  2941  0418                     	;# 
  2942  041A                     	;# 
  2943  041A                     	;# 
  2944  041B                     	;# 
  2945  041B                     	;# 
  2946  041C                     	;# 
  2947  041D                     	;# 
  2948  041E                     	;# 
  2949  041F                     	;# 
  2950  0493                     	;# 
  2951  0494                     	;# 
  2952  0495                     	;# 
  2953  0496                     	;# 
  2954  049A                     	;# 
  2955  049B                     	;# 
  2956  049C                     	;# 
  2957  049D                     	;# 
  2958  058C                     	;# 
  2959  058C                     	;# 
  2960  058D                     	;# 
  2961  058E                     	;# 
  2962  058E                     	;# 
  2963  058F                     	;# 
  2964  0590                     	;# 
  2965  0590                     	;# 
  2966  0591                     	;# 
  2967  0592                     	;# 
  2968  0592                     	;# 
  2969  0593                     	;# 
  2970  0594                     	;# 
  2971  0594                     	;# 
  2972  0595                     	;# 
  2973  0596                     	;# 
  2974  0596                     	;# 
  2975  0597                     	;# 
  2976  0598                     	;# 
  2977  0599                     	;# 
  2978  059A                     	;# 
  2979  059B                     	;# 
  2980  059B                     	;# 
  2981  059C                     	;# 
  2982  059D                     	;# 
  2983  060C                     	;# 
  2984  060C                     	;# 
  2985  060D                     	;# 
  2986  060E                     	;# 
  2987  060F                     	;# 
  2988  060F                     	;# 
  2989  0610                     	;# 
  2990  0611                     	;# 
  2991  0612                     	;# 
  2992  0613                     	;# 
  2993  0614                     	;# 
  2994  0617                     	;# 
  2995  0617                     	;# 
  2996  0618                     	;# 
  2997  0619                     	;# 
  2998  061A                     	;# 
  2999  061A                     	;# 
  3000  061B                     	;# 
  3001  061C                     	;# 
  3002  0691                     	;# 
  3003  0692                     	;# 
  3004  0693                     	;# 
  3005  0694                     	;# 
  3006  0695                     	;# 
  3007  0696                     	;# 
  3008  0697                     	;# 
  3009  0699                     	;# 
  3010  069A                     	;# 
  3011  0711                     	;# 
  3012  0712                     	;# 
  3013  0713                     	;# 
  3014  0714                     	;# 
  3015  0715                     	;# 
  3016  0718                     	;# 
  3017  0718                     	;# 
  3018  0719                     	;# 
  3019  071A                     	;# 
  3020  071A                     	;# 
  3021  071B                     	;# 
  3022  071C                     	;# 
  3023  071D                     	;# 
  3024  0791                     	;# 
  3025  0791                     	;# 
  3026  0792                     	;# 
  3027  0793                     	;# 
  3028  0793                     	;# 
  3029  0794                     	;# 
  3030  0795                     	;# 
  3031  0795                     	;# 
  3032  0796                     	;# 
  3033  0797                     	;# 
  3034  0797                     	;# 
  3035  0798                     	;# 
  3036  0799                     	;# 
  3037  079A                     	;# 
  3038  080C                     	;# 
  3039  080C                     	;# 
  3040  080D                     	;# 
  3041  080E                     	;# 
  3042  080E                     	;# 
  3043  080F                     	;# 
  3044  0810                     	;# 
  3045  0810                     	;# 
  3046  0811                     	;# 
  3047  0812                     	;# 
  3048  0812                     	;# 
  3049  0813                     	;# 
  3050  0814                     	;# 
  3051  0815                     	;# 
  3052  0816                     	;# 
  3053  0817                     	;# 
  3054  0818                     	;# 
  3055  0819                     	;# 
  3056  081A                     	;# 
  3057  081A                     	;# 
  3058  081B                     	;# 
  3059  081C                     	;# 
  3060  081C                     	;# 
  3061  081D                     	;# 
  3062  088C                     	;# 
  3063  088D                     	;# 
  3064  088E                     	;# 
  3065  088F                     	;# 
  3066  088F                     	;# 
  3067  0890                     	;# 
  3068  0891                     	;# 
  3069  0892                     	;# 
  3070  0893                     	;# 
  3071  0893                     	;# 
  3072  0894                     	;# 
  3073  0895                     	;# 
  3074  0896                     	;# 
  3075  0897                     	;# 
  3076  0897                     	;# 
  3077  0898                     	;# 
  3078  0899                     	;# 
  3079  0D8C                     	;# 
  3080  0D8C                     	;# 
  3081  0D8D                     	;# 
  3082  0D8E                     	;# 
  3083  0D8F                     	;# 
  3084  0D8F                     	;# 
  3085  0D90                     	;# 
  3086  0D91                     	;# 
  3087  0D92                     	;# 
  3088  0D92                     	;# 
  3089  0D93                     	;# 
  3090  0D94                     	;# 
  3091  0D95                     	;# 
  3092  0D95                     	;# 
  3093  0D96                     	;# 
  3094  0D97                     	;# 
  3095  0D98                     	;# 
  3096  0D99                     	;# 
  3097  0D9A                     	;# 
  3098  0D9B                     	;# 
  3099  0D9C                     	;# 
  3100  0D9D                     	;# 
  3101  0D9E                     	;# 
  3102  0D9E                     	;# 
  3103  0D9F                     	;# 
  3104  0DA0                     	;# 
  3105  0DA1                     	;# 
  3106  0DA1                     	;# 
  3107  0DA2                     	;# 
  3108  0DA3                     	;# 
  3109  0DA4                     	;# 
  3110  0DA4                     	;# 
  3111  0DA5                     	;# 
  3112  0DA6                     	;# 
  3113  0DA7                     	;# 
  3114  0DA7                     	;# 
  3115  0DA8                     	;# 
  3116  0DA9                     	;# 
  3117  0DAA                     	;# 
  3118  0DAB                     	;# 
  3119  0DAC                     	;# 
  3120  0DAD                     	;# 
  3121  0DAE                     	;# 
  3122  0DAF                     	;# 
  3123  0E0F                     	;# 
  3124  0E10                     	;# 
  3125  0E11                     	;# 
  3126  0E12                     	;# 
  3127  0E13                     	;# 
  3128  0E14                     	;# 
  3129  0E15                     	;# 
  3130  0E16                     	;# 
  3131  0E17                     	;# 
  3132  0E18                     	;# 
  3133  0E19                     	;# 
  3134  0E1A                     	;# 
  3135  0E1B                     	;# 
  3136  0E1C                     	;# 
  3137  0E1D                     	;# 
  3138  0E1E                     	;# 
  3139  0E1F                     	;# 
  3140  0E20                     	;# 
  3141  0E21                     	;# 
  3142  0E22                     	;# 
  3143  0E23                     	;# 
  3144  0E24                     	;# 
  3145  0E25                     	;# 
  3146  0E26                     	;# 
  3147  0E27                     	;# 
  3148  0E28                     	;# 
  3149  0E29                     	;# 
  3150  0E2A                     	;# 
  3151  0E2B                     	;# 
  3152  0E2C                     	;# 
  3153  0E2D                     	;# 
  3154  0E2E                     	;# 
  3155  0E90                     	;# 
  3156  0E91                     	;# 
  3157  0E92                     	;# 
  3158  0E94                     	;# 
  3159  0E95                     	;# 
  3160  0E9C                     	;# 
  3161  0E9D                     	;# 
  3162  0E9E                     	;# 
  3163  0E9F                     	;# 
  3164  0EA0                     	;# 
  3165  0EA1                     	;# 
  3166  0EA2                     	;# 
  3167  0EA3                     	;# 
  3168  0EA4                     	;# 
  3169  0EA5                     	;# 
  3170  0EA6                     	;# 
  3171  0EA7                     	;# 
  3172  0F0F                     	;# 
  3173  0F10                     	;# 
  3174  0F11                     	;# 
  3175  0F12                     	;# 
  3176  0F13                     	;# 
  3177  0F14                     	;# 
  3178  0F15                     	;# 
  3179  0F16                     	;# 
  3180  0F17                     	;# 
  3181  0F18                     	;# 
  3182  0F19                     	;# 
  3183  0F1A                     	;# 
  3184  0F1B                     	;# 
  3185  0F1C                     	;# 
  3186  0F1D                     	;# 
  3187  0F1E                     	;# 
  3188  0F1F                     	;# 
  3189  0F20                     	;# 
  3190  0F21                     	;# 
  3191  0F22                     	;# 
  3192  0F23                     	;# 
  3193  0F24                     	;# 
  3194  0F25                     	;# 
  3195  0F26                     	;# 
  3196  0F27                     	;# 
  3197  0F28                     	;# 
  3198  0F29                     	;# 
  3199  0F2A                     	;# 
  3200  0F2B                     	;# 
  3201  0F2C                     	;# 
  3202  0F2D                     	;# 
  3203  0F2E                     	;# 
  3204  0F2F                     	;# 
  3205  0F30                     	;# 
  3206  0F31                     	;# 
  3207  0F32                     	;# 
  3208  0F33                     	;# 
  3209  0F34                     	;# 
  3210  0F35                     	;# 
  3211  0F36                     	;# 
  3212  0F37                     	;# 
  3213  0FE4                     	;# 
  3214  0FE5                     	;# 
  3215  0FE6                     	;# 
  3216  0FE7                     	;# 
  3217  0FE8                     	;# 
  3218  0FE9                     	;# 
  3219  0FEA                     	;# 
  3220  0FEB                     	;# 
  3221  0FED                     	;# 
  3222  0FEE                     	;# 
  3223  0FEF                     	;# 
  3224  0000                     	;# 
  3225  0001                     	;# 
  3226  0002                     	;# 
  3227  0003                     	;# 
  3228  0004                     	;# 
  3229  0005                     	;# 
  3230  0006                     	;# 
  3231  0007                     	;# 
  3232  0008                     	;# 
  3233  0009                     	;# 
  3234  000A                     	;# 
  3235  000B                     	;# 
  3236  000C                     	;# 
  3237  000D                     	;# 
  3238  000E                     	;# 
  3239  0010                     	;# 
  3240  0011                     	;# 
  3241  0012                     	;# 
  3242  0013                     	;# 
  3243  0014                     	;# 
  3244  0015                     	;# 
  3245  0016                     	;# 
  3246  0016                     	;# 
  3247  0017                     	;# 
  3248  0018                     	;# 
  3249  0019                     	;# 
  3250  001A                     	;# 
  3251  001A                     	;# 
  3252  001B                     	;# 
  3253  001B                     	;# 
  3254  001C                     	;# 
  3255  001D                     	;# 
  3256  001E                     	;# 
  3257  001F                     	;# 
  3258  008C                     	;# 
  3259  008D                     	;# 
  3260  008E                     	;# 
  3261  0090                     	;# 
  3262  0091                     	;# 
  3263  0092                     	;# 
  3264  0093                     	;# 
  3265  0094                     	;# 
  3266  0095                     	;# 
  3267  0096                     	;# 
  3268  0098                     	;# 
  3269  0099                     	;# 
  3270  009A                     	;# 
  3271  009B                     	;# 
  3272  009B                     	;# 
  3273  009C                     	;# 
  3274  009D                     	;# 
  3275  009E                     	;# 
  3276  009F                     	;# 
  3277  010C                     	;# 
  3278  010D                     	;# 
  3279  010E                     	;# 
  3280  0111                     	;# 
  3281  0112                     	;# 
  3282  0113                     	;# 
  3283  0114                     	;# 
  3284  0115                     	;# 
  3285  0116                     	;# 
  3286  0117                     	;# 
  3287  0118                     	;# 
  3288  0119                     	;# 
  3289  011C                     	;# 
  3290  018C                     	;# 
  3291  018D                     	;# 
  3292  018E                     	;# 
  3293  0191                     	;# 
  3294  0191                     	;# 
  3295  0192                     	;# 
  3296  0193                     	;# 
  3297  0193                     	;# 
  3298  0194                     	;# 
  3299  0195                     	;# 
  3300  0196                     	;# 
  3301  0197                     	;# 
  3302  0199                     	;# 
  3303  0199                     	;# 
  3304  0199                     	;# 
  3305  019A                     	;# 
  3306  019A                     	;# 
  3307  019A                     	;# 
  3308  019B                     	;# 
  3309  019B                     	;# 
  3310  019B                     	;# 
  3311  019B                     	;# 
  3312  019B                     	;# 
  3313  019C                     	;# 
  3314  019C                     	;# 
  3315  019C                     	;# 
  3316  019D                     	;# 
  3317  019D                     	;# 
  3318  019D                     	;# 
  3319  019E                     	;# 
  3320  019E                     	;# 
  3321  019E                     	;# 
  3322  019F                     	;# 
  3323  019F                     	;# 
  3324  019F                     	;# 
  3325  019F                     	;# 
  3326  019F                     	;# 
  3327  020C                     	;# 
  3328  020D                     	;# 
  3329  020E                     	;# 
  3330  0211                     	;# 
  3331  0211                     	;# 
  3332  0212                     	;# 
  3333  0212                     	;# 
  3334  0213                     	;# 
  3335  0213                     	;# 
  3336  0214                     	;# 
  3337  0214                     	;# 
  3338  0215                     	;# 
  3339  0215                     	;# 
  3340  0215                     	;# 
  3341  0215                     	;# 
  3342  0216                     	;# 
  3343  0216                     	;# 
  3344  0217                     	;# 
  3345  0217                     	;# 
  3346  028C                     	;# 
  3347  028D                     	;# 
  3348  028E                     	;# 
  3349  0291                     	;# 
  3350  0291                     	;# 
  3351  0292                     	;# 
  3352  0293                     	;# 
  3353  0294                     	;# 
  3354  0298                     	;# 
  3355  0298                     	;# 
  3356  0299                     	;# 
  3357  029A                     	;# 
  3358  029B                     	;# 
  3359  029E                     	;# 
  3360  030C                     	;# 
  3361  030D                     	;# 
  3362  030E                     	;# 
  3363  038C                     	;# 
  3364  038D                     	;# 
  3365  038E                     	;# 
  3366  0391                     	;# 
  3367  0392                     	;# 
  3368  0393                     	;# 
  3369  0394                     	;# 
  3370  0395                     	;# 
  3371  0396                     	;# 
  3372  0397                     	;# 
  3373  0398                     	;# 
  3374  0399                     	;# 
  3375  040E                     	;# 
  3376  0413                     	;# 
  3377  0413                     	;# 
  3378  0414                     	;# 
  3379  0414                     	;# 
  3380  0415                     	;# 
  3381  0416                     	;# 
  3382  0417                     	;# 
  3383  0418                     	;# 
  3384  041A                     	;# 
  3385  041A                     	;# 
  3386  041B                     	;# 
  3387  041B                     	;# 
  3388  041C                     	;# 
  3389  041D                     	;# 
  3390  041E                     	;# 
  3391  041F                     	;# 
  3392  0493                     	;# 
  3393  0494                     	;# 
  3394  0495                     	;# 
  3395  0496                     	;# 
  3396  049A                     	;# 
  3397  049B                     	;# 
  3398  049C                     	;# 
  3399  049D                     	;# 
  3400  058C                     	;# 
  3401  058C                     	;# 
  3402  058D                     	;# 
  3403  058E                     	;# 
  3404  058E                     	;# 
  3405  058F                     	;# 
  3406  0590                     	;# 
  3407  0590                     	;# 
  3408  0591                     	;# 
  3409  0592                     	;# 
  3410  0592                     	;# 
  3411  0593                     	;# 
  3412  0594                     	;# 
  3413  0594                     	;# 
  3414  0595                     	;# 
  3415  0596                     	;# 
  3416  0596                     	;# 
  3417  0597                     	;# 
  3418  0598                     	;# 
  3419  0599                     	;# 
  3420  059A                     	;# 
  3421  059B                     	;# 
  3422  059B                     	;# 
  3423  059C                     	;# 
  3424  059D                     	;# 
  3425  060C                     	;# 
  3426  060C                     	;# 
  3427  060D                     	;# 
  3428  060E                     	;# 
  3429  060F                     	;# 
  3430  060F                     	;# 
  3431  0610                     	;# 
  3432  0611                     	;# 
  3433  0612                     	;# 
  3434  0613                     	;# 
  3435  0614                     	;# 
  3436  0617                     	;# 
  3437  0617                     	;# 
  3438  0618                     	;# 
  3439  0619                     	;# 
  3440  061A                     	;# 
  3441  061A                     	;# 
  3442  061B                     	;# 
  3443  061C                     	;# 
  3444  0691                     	;# 
  3445  0692                     	;# 
  3446  0693                     	;# 
  3447  0694                     	;# 
  3448  0695                     	;# 
  3449  0696                     	;# 
  3450  0697                     	;# 
  3451  0699                     	;# 
  3452  069A                     	;# 
  3453  0711                     	;# 
  3454  0712                     	;# 
  3455  0713                     	;# 
  3456  0714                     	;# 
  3457  0715                     	;# 
  3458  0718                     	;# 
  3459  0718                     	;# 
  3460  0719                     	;# 
  3461  071A                     	;# 
  3462  071A                     	;# 
  3463  071B                     	;# 
  3464  071C                     	;# 
  3465  071D                     	;# 
  3466  0791                     	;# 
  3467  0791                     	;# 
  3468  0792                     	;# 
  3469  0793                     	;# 
  3470  0793                     	;# 
  3471  0794                     	;# 
  3472  0795                     	;# 
  3473  0795                     	;# 
  3474  0796                     	;# 
  3475  0797                     	;# 
  3476  0797                     	;# 
  3477  0798                     	;# 
  3478  0799                     	;# 
  3479  079A                     	;# 
  3480  080C                     	;# 
  3481  080C                     	;# 
  3482  080D                     	;# 
  3483  080E                     	;# 
  3484  080E                     	;# 
  3485  080F                     	;# 
  3486  0810                     	;# 
  3487  0810                     	;# 
  3488  0811                     	;# 
  3489  0812                     	;# 
  3490  0812                     	;# 
  3491  0813                     	;# 
  3492  0814                     	;# 
  3493  0815                     	;# 
  3494  0816                     	;# 
  3495  0817                     	;# 
  3496  0818                     	;# 
  3497  0819                     	;# 
  3498  081A                     	;# 
  3499  081A                     	;# 
  3500  081B                     	;# 
  3501  081C                     	;# 
  3502  081C                     	;# 
  3503  081D                     	;# 
  3504  088C                     	;# 
  3505  088D                     	;# 
  3506  088E                     	;# 
  3507  088F                     	;# 
  3508  088F                     	;# 
  3509  0890                     	;# 
  3510  0891                     	;# 
  3511  0892                     	;# 
  3512  0893                     	;# 
  3513  0893                     	;# 
  3514  0894                     	;# 
  3515  0895                     	;# 
  3516  0896                     	;# 
  3517  0897                     	;# 
  3518  0897                     	;# 
  3519  0898                     	;# 
  3520  0899                     	;# 
  3521  0D8C                     	;# 
  3522  0D8C                     	;# 
  3523  0D8D                     	;# 
  3524  0D8E                     	;# 
  3525  0D8F                     	;# 
  3526  0D8F                     	;# 
  3527  0D90                     	;# 
  3528  0D91                     	;# 
  3529  0D92                     	;# 
  3530  0D92                     	;# 
  3531  0D93                     	;# 
  3532  0D94                     	;# 
  3533  0D95                     	;# 
  3534  0D95                     	;# 
  3535  0D96                     	;# 
  3536  0D97                     	;# 
  3537  0D98                     	;# 
  3538  0D99                     	;# 
  3539  0D9A                     	;# 
  3540  0D9B                     	;# 
  3541  0D9C                     	;# 
  3542  0D9D                     	;# 
  3543  0D9E                     	;# 
  3544  0D9E                     	;# 
  3545  0D9F                     	;# 
  3546  0DA0                     	;# 
  3547  0DA1                     	;# 
  3548  0DA1                     	;# 
  3549  0DA2                     	;# 
  3550  0DA3                     	;# 
  3551  0DA4                     	;# 
  3552  0DA4                     	;# 
  3553  0DA5                     	;# 
  3554  0DA6                     	;# 
  3555  0DA7                     	;# 
  3556  0DA7                     	;# 
  3557  0DA8                     	;# 
  3558  0DA9                     	;# 
  3559  0DAA                     	;# 
  3560  0DAB                     	;# 
  3561  0DAC                     	;# 
  3562  0DAD                     	;# 
  3563  0DAE                     	;# 
  3564  0DAF                     	;# 
  3565  0E0F                     	;# 
  3566  0E10                     	;# 
  3567  0E11                     	;# 
  3568  0E12                     	;# 
  3569  0E13                     	;# 
  3570  0E14                     	;# 
  3571  0E15                     	;# 
  3572  0E16                     	;# 
  3573  0E17                     	;# 
  3574  0E18                     	;# 
  3575  0E19                     	;# 
  3576  0E1A                     	;# 
  3577  0E1B                     	;# 
  3578  0E1C                     	;# 
  3579  0E1D                     	;# 
  3580  0E1E                     	;# 
  3581  0E1F                     	;# 
  3582  0E20                     	;# 
  3583  0E21                     	;# 
  3584  0E22                     	;# 
  3585  0E23                     	;# 
  3586  0E24                     	;# 
  3587  0E25                     	;# 
  3588  0E26                     	;# 
  3589  0E27                     	;# 
  3590  0E28                     	;# 
  3591  0E29                     	;# 
  3592  0E2A                     	;# 
  3593  0E2B                     	;# 
  3594  0E2C                     	;# 
  3595  0E2D                     	;# 
  3596  0E2E                     	;# 
  3597  0E90                     	;# 
  3598  0E91                     	;# 
  3599  0E92                     	;# 
  3600  0E94                     	;# 
  3601  0E95                     	;# 
  3602  0E9C                     	;# 
  3603  0E9D                     	;# 
  3604  0E9E                     	;# 
  3605  0E9F                     	;# 
  3606  0EA0                     	;# 
  3607  0EA1                     	;# 
  3608  0EA2                     	;# 
  3609  0EA3                     	;# 
  3610  0EA4                     	;# 
  3611  0EA5                     	;# 
  3612  0EA6                     	;# 
  3613  0EA7                     	;# 
  3614  0F0F                     	;# 
  3615  0F10                     	;# 
  3616  0F11                     	;# 
  3617  0F12                     	;# 
  3618  0F13                     	;# 
  3619  0F14                     	;# 
  3620  0F15                     	;# 
  3621  0F16                     	;# 
  3622  0F17                     	;# 
  3623  0F18                     	;# 
  3624  0F19                     	;# 
  3625  0F1A                     	;# 
  3626  0F1B                     	;# 
  3627  0F1C                     	;# 
  3628  0F1D                     	;# 
  3629  0F1E                     	;# 
  3630  0F1F                     	;# 
  3631  0F20                     	;# 
  3632  0F21                     	;# 
  3633  0F22                     	;# 
  3634  0F23                     	;# 
  3635  0F24                     	;# 
  3636  0F25                     	;# 
  3637  0F26                     	;# 
  3638  0F27                     	;# 
  3639  0F28                     	;# 
  3640  0F29                     	;# 
  3641  0F2A                     	;# 
  3642  0F2B                     	;# 
  3643  0F2C                     	;# 
  3644  0F2D                     	;# 
  3645  0F2E                     	;# 
  3646  0F2F                     	;# 
  3647  0F30                     	;# 
  3648  0F31                     	;# 
  3649  0F32                     	;# 
  3650  0F33                     	;# 
  3651  0F34                     	;# 
  3652  0F35                     	;# 
  3653  0F36                     	;# 
  3654  0F37                     	;# 
  3655  0FE4                     	;# 
  3656  0FE5                     	;# 
  3657  0FE6                     	;# 
  3658  0FE7                     	;# 
  3659  0FE8                     	;# 
  3660  0FE9                     	;# 
  3661  0FEA                     	;# 
  3662  0FEB                     	;# 
  3663  0FED                     	;# 
  3664  0FEE                     	;# 
  3665  0FEF                     	;# 
  3666  0000                     	;# 
  3667  0001                     	;# 
  3668  0002                     	;# 
  3669  0003                     	;# 
  3670  0004                     	;# 
  3671  0005                     	;# 
  3672  0006                     	;# 
  3673  0007                     	;# 
  3674  0008                     	;# 
  3675  0009                     	;# 
  3676  000A                     	;# 
  3677  000B                     	;# 
  3678  000C                     	;# 
  3679  000D                     	;# 
  3680  000E                     	;# 
  3681  0010                     	;# 
  3682  0011                     	;# 
  3683  0012                     	;# 
  3684  0013                     	;# 
  3685  0014                     	;# 
  3686  0015                     	;# 
  3687  0016                     	;# 
  3688  0016                     	;# 
  3689  0017                     	;# 
  3690  0018                     	;# 
  3691  0019                     	;# 
  3692  001A                     	;# 
  3693  001A                     	;# 
  3694  001B                     	;# 
  3695  001B                     	;# 
  3696  001C                     	;# 
  3697  001D                     	;# 
  3698  001E                     	;# 
  3699  001F                     	;# 
  3700  008C                     	;# 
  3701  008D                     	;# 
  3702  008E                     	;# 
  3703  0090                     	;# 
  3704  0091                     	;# 
  3705  0092                     	;# 
  3706  0093                     	;# 
  3707  0094                     	;# 
  3708  0095                     	;# 
  3709  0096                     	;# 
  3710  0098                     	;# 
  3711  0099                     	;# 
  3712  009A                     	;# 
  3713  009B                     	;# 
  3714  009B                     	;# 
  3715  009C                     	;# 
  3716  009D                     	;# 
  3717  009E                     	;# 
  3718  009F                     	;# 
  3719  010C                     	;# 
  3720  010D                     	;# 
  3721  010E                     	;# 
  3722  0111                     	;# 
  3723  0112                     	;# 
  3724  0113                     	;# 
  3725  0114                     	;# 
  3726  0115                     	;# 
  3727  0116                     	;# 
  3728  0117                     	;# 
  3729  0118                     	;# 
  3730  0119                     	;# 
  3731  011C                     	;# 
  3732  018C                     	;# 
  3733  018D                     	;# 
  3734  018E                     	;# 
  3735  0191                     	;# 
  3736  0191                     	;# 
  3737  0192                     	;# 
  3738  0193                     	;# 
  3739  0193                     	;# 
  3740  0194                     	;# 
  3741  0195                     	;# 
  3742  0196                     	;# 
  3743  0197                     	;# 
  3744  0199                     	;# 
  3745  0199                     	;# 
  3746  0199                     	;# 
  3747  019A                     	;# 
  3748  019A                     	;# 
  3749  019A                     	;# 
  3750  019B                     	;# 
  3751  019B                     	;# 
  3752  019B                     	;# 
  3753  019B                     	;# 
  3754  019B                     	;# 
  3755  019C                     	;# 
  3756  019C                     	;# 
  3757  019C                     	;# 
  3758  019D                     	;# 
  3759  019D                     	;# 
  3760  019D                     	;# 
  3761  019E                     	;# 
  3762  019E                     	;# 
  3763  019E                     	;# 
  3764  019F                     	;# 
  3765  019F                     	;# 
  3766  019F                     	;# 
  3767  019F                     	;# 
  3768  019F                     	;# 
  3769  020C                     	;# 
  3770  020D                     	;# 
  3771  020E                     	;# 
  3772  0211                     	;# 
  3773  0211                     	;# 
  3774  0212                     	;# 
  3775  0212                     	;# 
  3776  0213                     	;# 
  3777  0213                     	;# 
  3778  0214                     	;# 
  3779  0214                     	;# 
  3780  0215                     	;# 
  3781  0215                     	;# 
  3782  0215                     	;# 
  3783  0215                     	;# 
  3784  0216                     	;# 
  3785  0216                     	;# 
  3786  0217                     	;# 
  3787  0217                     	;# 
  3788  028C                     	;# 
  3789  028D                     	;# 
  3790  028E                     	;# 
  3791  0291                     	;# 
  3792  0291                     	;# 
  3793  0292                     	;# 
  3794  0293                     	;# 
  3795  0294                     	;# 
  3796  0298                     	;# 
  3797  0298                     	;# 
  3798  0299                     	;# 
  3799  029A                     	;# 
  3800  029B                     	;# 
  3801  029E                     	;# 
  3802  030C                     	;# 
  3803  030D                     	;# 
  3804  030E                     	;# 
  3805  038C                     	;# 
  3806  038D                     	;# 
  3807  038E                     	;# 
  3808  0391                     	;# 
  3809  0392                     	;# 
  3810  0393                     	;# 
  3811  0394                     	;# 
  3812  0395                     	;# 
  3813  0396                     	;# 
  3814  0397                     	;# 
  3815  0398                     	;# 
  3816  0399                     	;# 
  3817  040E                     	;# 
  3818  0413                     	;# 
  3819  0413                     	;# 
  3820  0414                     	;# 
  3821  0414                     	;# 
  3822  0415                     	;# 
  3823  0416                     	;# 
  3824  0417                     	;# 
  3825  0418                     	;# 
  3826  041A                     	;# 
  3827  041A                     	;# 
  3828  041B                     	;# 
  3829  041B                     	;# 
  3830  041C                     	;# 
  3831  041D                     	;# 
  3832  041E                     	;# 
  3833  041F                     	;# 
  3834  0493                     	;# 
  3835  0494                     	;# 
  3836  0495                     	;# 
  3837  0496                     	;# 
  3838  049A                     	;# 
  3839  049B                     	;# 
  3840  049C                     	;# 
  3841  049D                     	;# 
  3842  058C                     	;# 
  3843  058C                     	;# 
  3844  058D                     	;# 
  3845  058E                     	;# 
  3846  058E                     	;# 
  3847  058F                     	;# 
  3848  0590                     	;# 
  3849  0590                     	;# 
  3850  0591                     	;# 
  3851  0592                     	;# 
  3852  0592                     	;# 
  3853  0593                     	;# 
  3854  0594                     	;# 
  3855  0594                     	;# 
  3856  0595                     	;# 
  3857  0596                     	;# 
  3858  0596                     	;# 
  3859  0597                     	;# 
  3860  0598                     	;# 
  3861  0599                     	;# 
  3862  059A                     	;# 
  3863  059B                     	;# 
  3864  059B                     	;# 
  3865  059C                     	;# 
  3866  059D                     	;# 
  3867  060C                     	;# 
  3868  060C                     	;# 
  3869  060D                     	;# 
  3870  060E                     	;# 
  3871  060F                     	;# 
  3872  060F                     	;# 
  3873  0610                     	;# 
  3874  0611                     	;# 
  3875  0612                     	;# 
  3876  0613                     	;# 
  3877  0614                     	;# 
  3878  0617                     	;# 
  3879  0617                     	;# 
  3880  0618                     	;# 
  3881  0619                     	;# 
  3882  061A                     	;# 
  3883  061A                     	;# 
  3884  061B                     	;# 
  3885  061C                     	;# 
  3886  0691                     	;# 
  3887  0692                     	;# 
  3888  0693                     	;# 
  3889  0694                     	;# 
  3890  0695                     	;# 
  3891  0696                     	;# 
  3892  0697                     	;# 
  3893  0699                     	;# 
  3894  069A                     	;# 
  3895  0711                     	;# 
  3896  0712                     	;# 
  3897  0713                     	;# 
  3898  0714                     	;# 
  3899  0715                     	;# 
  3900  0718                     	;# 
  3901  0718                     	;# 
  3902  0719                     	;# 
  3903  071A                     	;# 
  3904  071A                     	;# 
  3905  071B                     	;# 
  3906  071C                     	;# 
  3907  071D                     	;# 
  3908  0791                     	;# 
  3909  0791                     	;# 
  3910  0792                     	;# 
  3911  0793                     	;# 
  3912  0793                     	;# 
  3913  0794                     	;# 
  3914  0795                     	;# 
  3915  0795                     	;# 
  3916  0796                     	;# 
  3917  0797                     	;# 
  3918  0797                     	;# 
  3919  0798                     	;# 
  3920  0799                     	;# 
  3921  079A                     	;# 
  3922  080C                     	;# 
  3923  080C                     	;# 
  3924  080D                     	;# 
  3925  080E                     	;# 
  3926  080E                     	;# 
  3927  080F                     	;# 
  3928  0810                     	;# 
  3929  0810                     	;# 
  3930  0811                     	;# 
  3931  0812                     	;# 
  3932  0812                     	;# 
  3933  0813                     	;# 
  3934  0814                     	;# 
  3935  0815                     	;# 
  3936  0816                     	;# 
  3937  0817                     	;# 
  3938  0818                     	;# 
  3939  0819                     	;# 
  3940  081A                     	;# 
  3941  081A                     	;# 
  3942  081B                     	;# 
  3943  081C                     	;# 
  3944  081C                     	;# 
  3945  081D                     	;# 
  3946  088C                     	;# 
  3947  088D                     	;# 
  3948  088E                     	;# 
  3949  088F                     	;# 
  3950  088F                     	;# 
  3951  0890                     	;# 
  3952  0891                     	;# 
  3953  0892                     	;# 
  3954  0893                     	;# 
  3955  0893                     	;# 
  3956  0894                     	;# 
  3957  0895                     	;# 
  3958  0896                     	;# 
  3959  0897                     	;# 
  3960  0897                     	;# 
  3961  0898                     	;# 
  3962  0899                     	;# 
  3963  0D8C                     	;# 
  3964  0D8C                     	;# 
  3965  0D8D                     	;# 
  3966  0D8E                     	;# 
  3967  0D8F                     	;# 
  3968  0D8F                     	;# 
  3969  0D90                     	;# 
  3970  0D91                     	;# 
  3971  0D92                     	;# 
  3972  0D92                     	;# 
  3973  0D93                     	;# 
  3974  0D94                     	;# 
  3975  0D95                     	;# 
  3976  0D95                     	;# 
  3977  0D96                     	;# 
  3978  0D97                     	;# 
  3979  0D98                     	;# 
  3980  0D99                     	;# 
  3981  0D9A                     	;# 
  3982  0D9B                     	;# 
  3983  0D9C                     	;# 
  3984  0D9D                     	;# 
  3985  0D9E                     	;# 
  3986  0D9E                     	;# 
  3987  0D9F                     	;# 
  3988  0DA0                     	;# 
  3989  0DA1                     	;# 
  3990  0DA1                     	;# 
  3991  0DA2                     	;# 
  3992  0DA3                     	;# 
  3993  0DA4                     	;# 
  3994  0DA4                     	;# 
  3995  0DA5                     	;# 
  3996  0DA6                     	;# 
  3997  0DA7                     	;# 
  3998  0DA7                     	;# 
  3999  0DA8                     	;# 
  4000  0DA9                     	;# 
  4001  0DAA                     	;# 
  4002  0DAB                     	;# 
  4003  0DAC                     	;# 
  4004  0DAD                     	;# 
  4005  0DAE                     	;# 
  4006  0DAF                     	;# 
  4007  0E0F                     	;# 
  4008  0E10                     	;# 
  4009  0E11                     	;# 
  4010  0E12                     	;# 
  4011  0E13                     	;# 
  4012  0E14                     	;# 
  4013  0E15                     	;# 
  4014  0E16                     	;# 
  4015  0E17                     	;# 
  4016  0E18                     	;# 
  4017  0E19                     	;# 
  4018  0E1A                     	;# 
  4019  0E1B                     	;# 
  4020  0E1C                     	;# 
  4021  0E1D                     	;# 
  4022  0E1E                     	;# 
  4023  0E1F                     	;# 
  4024  0E20                     	;# 
  4025  0E21                     	;# 
  4026  0E22                     	;# 
  4027  0E23                     	;# 
  4028  0E24                     	;# 
  4029  0E25                     	;# 
  4030  0E26                     	;# 
  4031  0E27                     	;# 
  4032  0E28                     	;# 
  4033  0E29                     	;# 
  4034  0E2A                     	;# 
  4035  0E2B                     	;# 
  4036  0E2C                     	;# 
  4037  0E2D                     	;# 
  4038  0E2E                     	;# 
  4039  0E90                     	;# 
  4040  0E91                     	;# 
  4041  0E92                     	;# 
  4042  0E94                     	;# 
  4043  0E95                     	;# 
  4044  0E9C                     	;# 
  4045  0E9D                     	;# 
  4046  0E9E                     	;# 
  4047  0E9F                     	;# 
  4048  0EA0                     	;# 
  4049  0EA1                     	;# 
  4050  0EA2                     	;# 
  4051  0EA3                     	;# 
  4052  0EA4                     	;# 
  4053  0EA5                     	;# 
  4054  0EA6                     	;# 
  4055  0EA7                     	;# 
  4056  0F0F                     	;# 
  4057  0F10                     	;# 
  4058  0F11                     	;# 
  4059  0F12                     	;# 
  4060  0F13                     	;# 
  4061  0F14                     	;# 
  4062  0F15                     	;# 
  4063  0F16                     	;# 
  4064  0F17                     	;# 
  4065  0F18                     	;# 
  4066  0F19                     	;# 
  4067  0F1A                     	;# 
  4068  0F1B                     	;# 
  4069  0F1C                     	;# 
  4070  0F1D                     	;# 
  4071  0F1E                     	;# 
  4072  0F1F                     	;# 
  4073  0F20                     	;# 
  4074  0F21                     	;# 
  4075  0F22                     	;# 
  4076  0F23                     	;# 
  4077  0F24                     	;# 
  4078  0F25                     	;# 
  4079  0F26                     	;# 
  4080  0F27                     	;# 
  4081  0F28                     	;# 
  4082  0F29                     	;# 
  4083  0F2A                     	;# 
  4084  0F2B                     	;# 
  4085  0F2C                     	;# 
  4086  0F2D                     	;# 
  4087  0F2E                     	;# 
  4088  0F2F                     	;# 
  4089  0F30                     	;# 
  4090  0F31                     	;# 
  4091  0F32                     	;# 
  4092  0F33                     	;# 
  4093  0F34                     	;# 
  4094  0F35                     	;# 
  4095  0F36                     	;# 
  4096  0F37                     	;# 
  4097  0FE4                     	;# 
  4098  0FE5                     	;# 
  4099  0FE6                     	;# 
  4100  0FE7                     	;# 
  4101  0FE8                     	;# 
  4102  0FE9                     	;# 
  4103  0FEA                     	;# 
  4104  0FEB                     	;# 
  4105  0FED                     	;# 
  4106  0FEE                     	;# 
  4107  0FEF                     	;# 
  4108  0000                     	;# 
  4109  0001                     	;# 
  4110  0002                     	;# 
  4111  0003                     	;# 
  4112  0004                     	;# 
  4113  0005                     	;# 
  4114  0006                     	;# 
  4115  0007                     	;# 
  4116  0008                     	;# 
  4117  0009                     	;# 
  4118  000A                     	;# 
  4119  000B                     	;# 
  4120  000C                     	;# 
  4121  000D                     	;# 
  4122  000E                     	;# 
  4123  0010                     	;# 
  4124  0011                     	;# 
  4125  0012                     	;# 
  4126  0013                     	;# 
  4127  0014                     	;# 
  4128  0015                     	;# 
  4129  0016                     	;# 
  4130  0016                     	;# 
  4131  0017                     	;# 
  4132  0018                     	;# 
  4133  0019                     	;# 
  4134  001A                     	;# 
  4135  001A                     	;# 
  4136  001B                     	;# 
  4137  001B                     	;# 
  4138  001C                     	;# 
  4139  001D                     	;# 
  4140  001E                     	;# 
  4141  001F                     	;# 
  4142  008C                     	;# 
  4143  008D                     	;# 
  4144  008E                     	;# 
  4145  0090                     	;# 
  4146  0091                     	;# 
  4147  0092                     	;# 
  4148  0093                     	;# 
  4149  0094                     	;# 
  4150  0095                     	;# 
  4151  0096                     	;# 
  4152  0098                     	;# 
  4153  0099                     	;# 
  4154  009A                     	;# 
  4155  009B                     	;# 
  4156  009B                     	;# 
  4157  009C                     	;# 
  4158  009D                     	;# 
  4159  009E                     	;# 
  4160  009F                     	;# 
  4161  010C                     	;# 
  4162  010D                     	;# 
  4163  010E                     	;# 
  4164  0111                     	;# 
  4165  0112                     	;# 
  4166  0113                     	;# 
  4167  0114                     	;# 
  4168  0115                     	;# 
  4169  0116                     	;# 
  4170  0117                     	;# 
  4171  0118                     	;# 
  4172  0119                     	;# 
  4173  011C                     	;# 
  4174  018C                     	;# 
  4175  018D                     	;# 
  4176  018E                     	;# 
  4177  0191                     	;# 
  4178  0191                     	;# 
  4179  0192                     	;# 
  4180  0193                     	;# 
  4181  0193                     	;# 
  4182  0194                     	;# 
  4183  0195                     	;# 
  4184  0196                     	;# 
  4185  0197                     	;# 
  4186  0199                     	;# 
  4187  0199                     	;# 
  4188  0199                     	;# 
  4189  019A                     	;# 
  4190  019A                     	;# 
  4191  019A                     	;# 
  4192  019B                     	;# 
  4193  019B                     	;# 
  4194  019B                     	;# 
  4195  019B                     	;# 
  4196  019B                     	;# 
  4197  019C                     	;# 
  4198  019C                     	;# 
  4199  019C                     	;# 
  4200  019D                     	;# 
  4201  019D                     	;# 
  4202  019D                     	;# 
  4203  019E                     	;# 
  4204  019E                     	;# 
  4205  019E                     	;# 
  4206  019F                     	;# 
  4207  019F                     	;# 
  4208  019F                     	;# 
  4209  019F                     	;# 
  4210  019F                     	;# 
  4211  020C                     	;# 
  4212  020D                     	;# 
  4213  020E                     	;# 
  4214  0211                     	;# 
  4215  0211                     	;# 
  4216  0212                     	;# 
  4217  0212                     	;# 
  4218  0213                     	;# 
  4219  0213                     	;# 
  4220  0214                     	;# 
  4221  0214                     	;# 
  4222  0215                     	;# 
  4223  0215                     	;# 
  4224  0215                     	;# 
  4225  0215                     	;# 
  4226  0216                     	;# 
  4227  0216                     	;# 
  4228  0217                     	;# 
  4229  0217                     	;# 
  4230  028C                     	;# 
  4231  028D                     	;# 
  4232  028E                     	;# 
  4233  0291                     	;# 
  4234  0291                     	;# 
  4235  0292                     	;# 
  4236  0293                     	;# 
  4237  0294                     	;# 
  4238  0298                     	;# 
  4239  0298                     	;# 
  4240  0299                     	;# 
  4241  029A                     	;# 
  4242  029B                     	;# 
  4243  029E                     	;# 
  4244  030C                     	;# 
  4245  030D                     	;# 
  4246  030E                     	;# 
  4247  038C                     	;# 
  4248  038D                     	;# 
  4249  038E                     	;# 
  4250  0391                     	;# 
  4251  0392                     	;# 
  4252  0393                     	;# 
  4253  0394                     	;# 
  4254  0395                     	;# 
  4255  0396                     	;# 
  4256  0397                     	;# 
  4257  0398                     	;# 
  4258  0399                     	;# 
  4259  040E                     	;# 
  4260  0413                     	;# 
  4261  0413                     	;# 
  4262  0414                     	;# 
  4263  0414                     	;# 
  4264  0415                     	;# 
  4265  0416                     	;# 
  4266  0417                     	;# 
  4267  0418                     	;# 
  4268  041A                     	;# 
  4269  041A                     	;# 
  4270  041B                     	;# 
  4271  041B                     	;# 
  4272  041C                     	;# 
  4273  041D                     	;# 
  4274  041E                     	;# 
  4275  041F                     	;# 
  4276  0493                     	;# 
  4277  0494                     	;# 
  4278  0495                     	;# 
  4279  0496                     	;# 
  4280  049A                     	;# 
  4281  049B                     	;# 
  4282  049C                     	;# 
  4283  049D                     	;# 
  4284  058C                     	;# 
  4285  058C                     	;# 
  4286  058D                     	;# 
  4287  058E                     	;# 
  4288  058E                     	;# 
  4289  058F                     	;# 
  4290  0590                     	;# 
  4291  0590                     	;# 
  4292  0591                     	;# 
  4293  0592                     	;# 
  4294  0592                     	;# 
  4295  0593                     	;# 
  4296  0594                     	;# 
  4297  0594                     	;# 
  4298  0595                     	;# 
  4299  0596                     	;# 
  4300  0596                     	;# 
  4301  0597                     	;# 
  4302  0598                     	;# 
  4303  0599                     	;# 
  4304  059A                     	;# 
  4305  059B                     	;# 
  4306  059B                     	;# 
  4307  059C                     	;# 
  4308  059D                     	;# 
  4309  060C                     	;# 
  4310  060C                     	;# 
  4311  060D                     	;# 
  4312  060E                     	;# 
  4313  060F                     	;# 
  4314  060F                     	;# 
  4315  0610                     	;# 
  4316  0611                     	;# 
  4317  0612                     	;# 
  4318  0613                     	;# 
  4319  0614                     	;# 
  4320  0617                     	;# 
  4321  0617                     	;# 
  4322  0618                     	;# 
  4323  0619                     	;# 
  4324  061A                     	;# 
  4325  061A                     	;# 
  4326  061B                     	;# 
  4327  061C                     	;# 
  4328  0691                     	;# 
  4329  0692                     	;# 
  4330  0693                     	;# 
  4331  0694                     	;# 
  4332  0695                     	;# 
  4333  0696                     	;# 
  4334  0697                     	;# 
  4335  0699                     	;# 
  4336  069A                     	;# 
  4337  0711                     	;# 
  4338  0712                     	;# 
  4339  0713                     	;# 
  4340  0714                     	;# 
  4341  0715                     	;# 
  4342  0718                     	;# 
  4343  0718                     	;# 
  4344  0719                     	;# 
  4345  071A                     	;# 
  4346  071A                     	;# 
  4347  071B                     	;# 
  4348  071C                     	;# 
  4349  071D                     	;# 
  4350  0791                     	;# 
  4351  0791                     	;# 
  4352  0792                     	;# 
  4353  0793                     	;# 
  4354  0793                     	;# 
  4355  0794                     	;# 
  4356  0795                     	;# 
  4357  0795                     	;# 
  4358  0796                     	;# 
  4359  0797                     	;# 
  4360  0797                     	;# 
  4361  0798                     	;# 
  4362  0799                     	;# 
  4363  079A                     	;# 
  4364  080C                     	;# 
  4365  080C                     	;# 
  4366  080D                     	;# 
  4367  080E                     	;# 
  4368  080E                     	;# 
  4369  080F                     	;# 
  4370  0810                     	;# 
  4371  0810                     	;# 
  4372  0811                     	;# 
  4373  0812                     	;# 
  4374  0812                     	;# 
  4375  0813                     	;# 
  4376  0814                     	;# 
  4377  0815                     	;# 
  4378  0816                     	;# 
  4379  0817                     	;# 
  4380  0818                     	;# 
  4381  0819                     	;# 
  4382  081A                     	;# 
  4383  081A                     	;# 
  4384  081B                     	;# 
  4385  081C                     	;# 
  4386  081C                     	;# 
  4387  081D                     	;# 
  4388  088C                     	;# 
  4389  088D                     	;# 
  4390  088E                     	;# 
  4391  088F                     	;# 
  4392  088F                     	;# 
  4393  0890                     	;# 
  4394  0891                     	;# 
  4395  0892                     	;# 
  4396  0893                     	;# 
  4397  0893                     	;# 
  4398  0894                     	;# 
  4399  0895                     	;# 
  4400  0896                     	;# 
  4401  0897                     	;# 
  4402  0897                     	;# 
  4403  0898                     	;# 
  4404  0899                     	;# 
  4405  0D8C                     	;# 
  4406  0D8C                     	;# 
  4407  0D8D                     	;# 
  4408  0D8E                     	;# 
  4409  0D8F                     	;# 
  4410  0D8F                     	;# 
  4411  0D90                     	;# 
  4412  0D91                     	;# 
  4413  0D92                     	;# 
  4414  0D92                     	;# 
  4415  0D93                     	;# 
  4416  0D94                     	;# 
  4417  0D95                     	;# 
  4418  0D95                     	;# 
  4419  0D96                     	;# 
  4420  0D97                     	;# 
  4421  0D98                     	;# 
  4422  0D99                     	;# 
  4423  0D9A                     	;# 
  4424  0D9B                     	;# 
  4425  0D9C                     	;# 
  4426  0D9D                     	;# 
  4427  0D9E                     	;# 
  4428  0D9E                     	;# 
  4429  0D9F                     	;# 
  4430  0DA0                     	;# 
  4431  0DA1                     	;# 
  4432  0DA1                     	;# 
  4433  0DA2                     	;# 
  4434  0DA3                     	;# 
  4435  0DA4                     	;# 
  4436  0DA4                     	;# 
  4437  0DA5                     	;# 
  4438  0DA6                     	;# 
  4439  0DA7                     	;# 
  4440  0DA7                     	;# 
  4441  0DA8                     	;# 
  4442  0DA9                     	;# 
  4443  0DAA                     	;# 
  4444  0DAB                     	;# 
  4445  0DAC                     	;# 
  4446  0DAD                     	;# 
  4447  0DAE                     	;# 
  4448  0DAF                     	;# 
  4449  0E0F                     	;# 
  4450  0E10                     	;# 
  4451  0E11                     	;# 
  4452  0E12                     	;# 
  4453  0E13                     	;# 
  4454  0E14                     	;# 
  4455  0E15                     	;# 
  4456  0E16                     	;# 
  4457  0E17                     	;# 
  4458  0E18                     	;# 
  4459  0E19                     	;# 
  4460  0E1A                     	;# 
  4461  0E1B                     	;# 
  4462  0E1C                     	;# 
  4463  0E1D                     	;# 
  4464  0E1E                     	;# 
  4465  0E1F                     	;# 
  4466  0E20                     	;# 
  4467  0E21                     	;# 
  4468  0E22                     	;# 
  4469  0E23                     	;# 
  4470  0E24                     	;# 
  4471  0E25                     	;# 
  4472  0E26                     	;# 
  4473  0E27                     	;# 
  4474  0E28                     	;# 
  4475  0E29                     	;# 
  4476  0E2A                     	;# 
  4477  0E2B                     	;# 
  4478  0E2C                     	;# 
  4479  0E2D                     	;# 
  4480  0E2E                     	;# 
  4481  0E90                     	;# 
  4482  0E91                     	;# 
  4483  0E92                     	;# 
  4484  0E94                     	;# 
  4485  0E95                     	;# 
  4486  0E9C                     	;# 
  4487  0E9D                     	;# 
  4488  0E9E                     	;# 
  4489  0E9F                     	;# 
  4490  0EA0                     	;# 
  4491  0EA1                     	;# 
  4492  0EA2                     	;# 
  4493  0EA3                     	;# 
  4494  0EA4                     	;# 
  4495  0EA5                     	;# 
  4496  0EA6                     	;# 
  4497  0EA7                     	;# 
  4498  0F0F                     	;# 
  4499  0F10                     	;# 
  4500  0F11                     	;# 
  4501  0F12                     	;# 
  4502  0F13                     	;# 
  4503  0F14                     	;# 
  4504  0F15                     	;# 
  4505  0F16                     	;# 
  4506  0F17                     	;# 
  4507  0F18                     	;# 
  4508  0F19                     	;# 
  4509  0F1A                     	;# 
  4510  0F1B                     	;# 
  4511  0F1C                     	;# 
  4512  0F1D                     	;# 
  4513  0F1E                     	;# 
  4514  0F1F                     	;# 
  4515  0F20                     	;# 
  4516  0F21                     	;# 
  4517  0F22                     	;# 
  4518  0F23                     	;# 
  4519  0F24                     	;# 
  4520  0F25                     	;# 
  4521  0F26                     	;# 
  4522  0F27                     	;# 
  4523  0F28                     	;# 
  4524  0F29                     	;# 
  4525  0F2A                     	;# 
  4526  0F2B                     	;# 
  4527  0F2C                     	;# 
  4528  0F2D                     	;# 
  4529  0F2E                     	;# 
  4530  0F2F                     	;# 
  4531  0F30                     	;# 
  4532  0F31                     	;# 
  4533  0F32                     	;# 
  4534  0F33                     	;# 
  4535  0F34                     	;# 
  4536  0F35                     	;# 
  4537  0F36                     	;# 
  4538  0F37                     	;# 
  4539  0FE4                     	;# 
  4540  0FE5                     	;# 
  4541  0FE6                     	;# 
  4542  0FE7                     	;# 
  4543  0FE8                     	;# 
  4544  0FE9                     	;# 
  4545  0FEA                     	;# 
  4546  0FEB                     	;# 
  4547  0FED                     	;# 
  4548  0FEE                     	;# 
  4549  0FEF                     	;# 
  4550                           
  4551                           	psect	idataBANK2
  4552  19D1                     __pidataBANK2:	
  4553                           
  4554                           ;initializer for _messages
  4555  19D1  34A0               	retlw	low (_message_start| (0+512))
  4556  19D2  3402               	retlw	high (_message_start| (0+512))
  4557  19D3  3420               	retlw	low (_message_end| (0+768))
  4558  19D4  3403               	retlw	high (_message_end| (0+768))
  4559                           
  4560                           	psect	nvBANK2
  4561  0162                     __pnvBANK2:	
  4562  0162                     _TMR0_InterruptHandler:	
  4563  0162                     	ds	2
  4564  0164                     _timer0ReloadVal:	
  4565  0164                     	ds	1
  4566  0015                     _TMR0	set	21
  4567  000B                     _INTCONbits	set	11
  4568  0010                     _PIR1bits	set	16
  4569  0095                     _OPTION_REG	set	149
  4570  0095                     _OPTION_REGbits	set	149
  4571  008E                     _TRISC	set	142
  4572  008D                     _TRISB	set	141
  4573  008C                     _TRISA	set	140
  4574  0098                     _OSCTUNE	set	152
  4575  0099                     _OSCCON	set	153
  4576  010E                     _LATCbits	set	270
  4577  010C                     _LATAbits	set	268
  4578  010E                     _LATC	set	270
  4579  010D                     _LATB	set	269
  4580  010C                     _LATA	set	268
  4581  0116                     _BORCON	set	278
  4582  019C                     _SPBRGH	set	412
  4583  019B                     _SPBRGL	set	411
  4584  019E                     _TX1STA	set	414
  4585  019D                     _RC1STA	set	413
  4586  019F                     _BAUD1CON	set	415
  4587  018C                     _ANSELA	set	396
  4588  018D                     _ANSELB	set	397
  4589  018E                     _ANSELC	set	398
  4590  0216                     _SSP1CON2bits	set	534
  4591  0211                     _SSP1BUF	set	529
  4592  0215                     _SSP1CON1bits	set	533
  4593  0212                     _SSP1ADD	set	530
  4594  0216                     _SSP1CON2	set	534
  4595  0215                     _SSP1CON1	set	533
  4596  0214                     _SSP1STAT	set	532
  4597  020E                     _WPUC	set	526
  4598  020C                     _WPUA	set	524
  4599  020D                     _WPUB	set	525
  4600  028E                     _ODCONC	set	654
  4601  028D                     _ODCONB	set	653
  4602  028C                     _ODCONA	set	652
  4603  030E                     _SLRCONC	set	782
  4604  030D                     _SLRCONB	set	781
  4605  030C                     _SLRCONA	set	780
  4606  0E21                     _SSPDATPPS	set	3617
  4607  0E20                     _SSPCLKPPS	set	3616
  4608  0E24                     _RXPPS	set	3620
  4609  0E9C                     _RB4PPS	set	3740
  4610  0E9E                     _RB6PPS	set	3742
  4611  0E9F                     _RB7PPS	set	3743
  4612                           
  4613                           	psect	stringtext1
  4614  1800                     __pstringtext1:	
  4615  1800                     STR_1:	
  4616  1800  3454               	retlw	84	;'T'
  4617  1801  3445               	retlw	69	;'E'
  4618  1802  3453               	retlw	83	;'S'
  4619  1803  3454               	retlw	84	;'T'
  4620  1804  342C               	retlw	44	;','
  4621  1805  3400               	retlw	0
  4622                           
  4623                           	psect	stringtext2
  4624  1806                     __pstringtext2:	
  4625  1806                     STR_2:	
  4626  1806  3424               	retlw	36	;'$'
  4627  1807  3424               	retlw	36	;'$'
  4628  1808  3400               	retlw	0
  4629                           
  4630                           	psect	stringtext3
  4631  0000                     __pstringtext3:	
  4632                           
  4633                           ; #config settings
  4634  0000                     
  4635                           	psect	cinit
  4636  000F                     start_initialization:	
  4637  000F                     __initialization:	
  4638                           
  4639                           ; Initialize objects allocated to BANK2
  4640  000F  0022               	movlb	2	; select bank2
  4641  0010  3199  21D1  3180   	fcall	__pidataBANK2	;fetch initializer
  4642  0013  00DE               	movwf	__pdataBANK2& (0+127)
  4643  0014  3199  21D2  3180   	fcall	__pidataBANK2+1	;fetch initializer
  4644  0017  00DF               	movwf	(__pdataBANK2+1)& (0+127)
  4645  0018  3199  21D3  3180   	fcall	__pidataBANK2+2	;fetch initializer
  4646  001B  00E0               	movwf	(__pdataBANK2+2)& (0+127)
  4647  001C  3199  21D4  3180   	fcall	__pidataBANK2+3	;fetch initializer
  4648  001F  00E1               	movwf	(__pdataBANK2+3)& (0+127)
  4649                           
  4650                           ; Clear objects allocated to BANK1
  4651  0020  30E8               	movlw	low __pbssBANK1
  4652  0021  0084               	movwf	4
  4653  0022  3000               	movlw	high __pbssBANK1
  4654  0023  0085               	movwf	5
  4655  0024  3008               	movlw	8
  4656  0025  3199  21DB  3180   	fcall	clear_ram0
  4657                           
  4658                           ; Clear objects allocated to BANK2
  4659  0028  3042               	movlw	low __pbssBANK2
  4660  0029  0084               	movwf	4
  4661  002A  3001               	movlw	high __pbssBANK2
  4662  002B  0085               	movwf	5
  4663  002C  301C               	movlw	28
  4664  002D  3199  21DB  3180   	fcall	clear_ram0
  4665                           
  4666                           ; Clear objects allocated to BANK3
  4667  0030  30A0               	movlw	low __pbssBANK3
  4668  0031  0084               	movwf	4
  4669  0032  3001               	movlw	high __pbssBANK3
  4670  0033  0085               	movwf	5
  4671  0034  3043               	movlw	67
  4672  0035  3199  21DB  3180   	fcall	clear_ram0
  4673                           
  4674                           ; Clear objects allocated to BANK4
  4675  0038  3020               	movlw	low __pbssBANK4
  4676  0039  0084               	movwf	4
  4677  003A  3002               	movlw	high __pbssBANK4
  4678  003B  0085               	movwf	5
  4679  003C  301A               	movlw	26
  4680  003D  3199  21DB  3180   	fcall	clear_ram0
  4681                           
  4682                           ; Clear objects allocated to BANK5
  4683  0040  30A0               	movlw	low __pbssBANK5
  4684  0041  0084               	movwf	4
  4685  0042  3002               	movlw	high __pbssBANK5
  4686  0043  0085               	movwf	5
  4687  0044  3046               	movlw	70
  4688  0045  3199  21DB  3180   	fcall	clear_ram0
  4689                           
  4690                           ; Clear objects allocated to BANK6
  4691  0048  3020               	movlw	low __pbssBANK6
  4692  0049  0084               	movwf	4
  4693  004A  3003               	movlw	high __pbssBANK6
  4694  004B  0085               	movwf	5
  4695  004C  3049               	movlw	73
  4696  004D  3199  21DB         	fcall	clear_ram0
  4697  004F                     end_of_initialization:	
  4698                           ;End of C runtime variable initialization code
  4699                           
  4700  004F                     __end_of__initialization:	
  4701  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4702  0050  0020               	movlb	0
  4703  0051  318A  2AD8         	ljmp	_main	;jump to C main() function
  4704                           
  4705                           	psect	bssBANK1
  4706  00E8                     __pbssBANK1:	
  4707  00E8                     _ticks:	
  4708  00E8                     	ds	4
  4709  00EC                     ___g_timeout_start:	
  4710  00EC                     	ds	4
  4711                           
  4712                           	psect	bssBANK2
  4713  0142                     __pbssBANK2:	
  4714  0142                     bme280_get_sensor_data@F273:	
  4715  0142                     	ds	12
  4716  014E                     bme280_get_sensor_data@F271:	
  4717  014E                     	ds	8
  4718  0156                     _id:	
  4719  0156                     	ds	2
  4720  0158                     _checksum:	
  4721  0158                     	ds	6
  4722                           
  4723                           	psect	dataBANK2
  4724  015E                     __pdataBANK2:	
  4725  015E                     _messages:	
  4726  015E                     	ds	4
  4727                           
  4728                           	psect	bssBANK3
  4729  01A0                     __pbssBANK3:	
  4730  01A0                     main@F10039:	
  4731  01A0                     	ds	16
  4732  01B0                     _EnvSensor:	
  4733  01B0                     	ds	51
  4734                           
  4735                           	psect	bssBANK4
  4736  0220                     __pbssBANK4:	
  4737  0220                     get_calib_data@F376:	
  4738  0220                     	ds	26
  4739                           
  4740                           	psect	bssBANK5
  4741  02A0                     __pbssBANK5:	
  4742  02A0                     _message_start:	
  4743  02A0                     	ds	70
  4744                           
  4745                           	psect	bssBANK6
  4746  0320                     __pbssBANK6:	
  4747  0320                     _message_end:	
  4748  0320                     	ds	73
  4749                           
  4750                           	psect	clrtext
  4751  19DB                     clear_ram0:	
  4752                           ;	Called with FSR0 containing the base address, and
  4753                           ;	WREG with the size to clear
  4754                           
  4755  19DB  0064               	clrwdt	;clear the watchdog before getting into this loop
  4756  19DC                     clrloop0:	
  4757  19DC  0180               	clrf	0	;clear RAM location pointed to by FSR
  4758  19DD  3101               	addfsr 0,1
  4759  19DE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4760  19DF  29DC               	goto	clrloop0	;have we reached the end yet?
  4761  19E0  3400               	retlw	0	;all done for this memory range, return
  4762                           
  4763                           	psect	cstackBANK2
  4764  0120                     __pcstackBANK2:	
  4765  0120                     main@convertedNumber:	
  4766                           
  4767                           ; 16 bytes @ 0x0
  4768  0120                     	ds	16
  4769  0130                     main@end:	
  4770                           
  4771                           ; 2 bytes @ 0x10
  4772  0130                     	ds	2
  4773  0132                     main@i:	
  4774                           
  4775                           ; 2 bytes @ 0x12
  4776  0132                     	ds	2
  4777  0134                     main@sensor_data:	
  4778                           
  4779                           ; 12 bytes @ 0x14
  4780  0134                     	ds	12
  4781  0140                     main@index:	
  4782                           
  4783                           ; 2 bytes @ 0x20
  4784  0140                     	ds	2
  4785                           
  4786                           	psect	cstackBANK1
  4787  00A0                     __pcstackBANK1:	
  4788  00A0                     ??_put_device_to_sleep:	
  4789  00A0                     compensate_pressure@var3:	
  4790                           ; 1 bytes @ 0x0
  4791                           
  4792                           
  4793                           ; 4 bytes @ 0x0
  4794  00A0                     	ds	3
  4795  00A3                     put_device_to_sleep@reg_data:	
  4796                           
  4797                           ; 4 bytes @ 0x3
  4798  00A3                     	ds	1
  4799  00A4                     compensate_pressure@var4:	
  4800                           
  4801                           ; 4 bytes @ 0x4
  4802  00A4                     	ds	3
  4803  00A7                     put_device_to_sleep@rslt:	
  4804                           
  4805                           ; 1 bytes @ 0x7
  4806  00A7                     	ds	1
  4807  00A8                     put_device_to_sleep@dev:	
  4808  00A8                     compensate_pressure@var5:	
  4809                           ; 1 bytes @ 0x8
  4810                           
  4811                           
  4812                           ; 4 bytes @ 0x8
  4813  00A8                     	ds	1
  4814  00A9                     put_device_to_sleep@settings:	
  4815                           
  4816                           ; 5 bytes @ 0x9
  4817  00A9                     	ds	3
  4818  00AC                     _compensate_pressure$2264:	
  4819                           
  4820                           ; 4 bytes @ 0xC
  4821  00AC                     	ds	2
  4822  00AE                     ?_bme280_set_sensor_settings:	
  4823  00AE                     ?_bme280_set_sensor_mode:	
  4824                           ; 1 bytes @ 0xE
  4825                           
  4826  00AE                     bme280_set_sensor_settings@dev:	
  4827                           ; 1 bytes @ 0xE
  4828                           
  4829  00AE                     bme280_set_sensor_mode@dev:	
  4830                           ; 1 bytes @ 0xE
  4831                           
  4832                           
  4833                           ; 1 bytes @ 0xE
  4834  00AE                     	ds	1
  4835  00AF                     ??_bme280_set_sensor_settings:	
  4836  00AF                     ??_bme280_set_sensor_mode:	
  4837                           ; 1 bytes @ 0xF
  4838                           
  4839                           
  4840                           ; 1 bytes @ 0xF
  4841  00AF                     	ds	1
  4842  00B0                     _compensate_pressure$2265:	
  4843                           
  4844                           ; 4 bytes @ 0x10
  4845  00B0                     	ds	1
  4846  00B1                     bme280_set_sensor_settings@desired_settings:	
  4847  00B1                     bme280_set_sensor_mode@sensor_mode:	
  4848                           ; 1 bytes @ 0x11
  4849                           
  4850                           
  4851                           ; 1 bytes @ 0x11
  4852  00B1                     	ds	1
  4853  00B2                     bme280_set_sensor_settings@sensor_mode:	
  4854  00B2                     bme280_set_sensor_mode@last_set_mode:	
  4855                           ; 1 bytes @ 0x12
  4856                           
  4857                           
  4858                           ; 1 bytes @ 0x12
  4859  00B2                     	ds	1
  4860  00B3                     bme280_set_sensor_settings@rslt:	
  4861  00B3                     bme280_set_sensor_mode@rslt:	
  4862                           ; 1 bytes @ 0x13
  4863                           
  4864                           
  4865                           ; 1 bytes @ 0x13
  4866  00B3                     	ds	1
  4867  00B4                     ??_BME280_Init:	
  4868  00B4                     compensate_pressure@uncomp_data:	
  4869                           ; 1 bytes @ 0x14
  4870                           
  4871                           
  4872                           ; 1 bytes @ 0x14
  4873  00B4                     	ds	1
  4874  00B5                     compensate_pressure@pressure_max:	
  4875                           
  4876                           ; 4 bytes @ 0x15
  4877  00B5                     	ds	1
  4878  00B6                     BME280_Init@settings_sel:	
  4879                           
  4880                           ; 1 bytes @ 0x16
  4881  00B6                     	ds	1
  4882  00B7                     BME280_Init@rslt:	
  4883                           
  4884                           ; 1 bytes @ 0x17
  4885  00B7                     	ds	2
  4886  00B9                     _compensate_pressure$2263:	
  4887                           
  4888                           ; 4 bytes @ 0x19
  4889  00B9                     	ds	8
  4890  00C1                     compensate_pressure@var2:	
  4891                           
  4892                           ; 4 bytes @ 0x21
  4893  00C1                     	ds	4
  4894  00C5                     compensate_pressure@pressure:	
  4895                           
  4896                           ; 4 bytes @ 0x25
  4897  00C5                     	ds	4
  4898  00C9                     compensate_pressure@var1:	
  4899                           
  4900                           ; 4 bytes @ 0x29
  4901  00C9                     	ds	4
  4902  00CD                     bme280_get_sensor_data@reg_data:	
  4903                           
  4904                           ; 8 bytes @ 0x2D
  4905  00CD                     	ds	8
  4906  00D5                     bme280_get_sensor_data@sensor_comp:	
  4907                           
  4908                           ; 1 bytes @ 0x35
  4909  00D5                     	ds	1
  4910  00D6                     bme280_get_sensor_data@rslt:	
  4911                           
  4912                           ; 1 bytes @ 0x36
  4913  00D6                     	ds	1
  4914  00D7                     bme280_get_sensor_data@uncomp_data:	
  4915                           
  4916                           ; 12 bytes @ 0x37
  4917  00D7                     	ds	12
  4918  00E3                     ??_main:	
  4919                           
  4920                           ; 1 bytes @ 0x43
  4921  00E3                     	ds	5
  4922                           
  4923                           	psect	cstackCOMMON
  4924  0070                     __pcstackCOMMON:	
  4925  0070                     ?_null_ptr_check:	
  4926  0070                     ??_null_ptr_check:	
  4927                           ; 1 bytes @ 0x0
  4928                           
  4929  0070                     ?_interleave_reg_addr:	
  4930                           ; 1 bytes @ 0x0
  4931                           
  4932  0070                     ?_are_settings_changed:	
  4933                           ; 1 bytes @ 0x0
  4934                           
  4935  0070                     ?_parse_device_settings:	
  4936                           ; 1 bytes @ 0x0
  4937                           
  4938  0070                     ?_bme280_parse_sensor_data:	
  4939                           ; 1 bytes @ 0x0
  4940                           
  4941  0070                     ?_fill_osr_press_settings:	
  4942                           ; 1 bytes @ 0x0
  4943                           
  4944  0070                     ?_fill_osr_temp_settings:	
  4945                           ; 1 bytes @ 0x0
  4946                           
  4947  0070                     ?_fill_filter_settings:	
  4948                           ; 1 bytes @ 0x0
  4949                           
  4950  0070                     ?_fill_standby_settings:	
  4951                           ; 1 bytes @ 0x0
  4952                           
  4953  0070                     ?_parse_temp_press_calib_data:	
  4954                           ; 1 bytes @ 0x0
  4955                           
  4956  0070                     ?_parse_humidity_calib_data:	
  4957                           ; 1 bytes @ 0x0
  4958                           
  4959  0070                     ?_PIN_MANAGER_Initialize:	
  4960                           ; 1 bytes @ 0x0
  4961                           
  4962  0070                     ??_PIN_MANAGER_Initialize:	
  4963                           ; 1 bytes @ 0x0
  4964                           
  4965  0070                     ?_OSCILLATOR_Initialize:	
  4966                           ; 1 bytes @ 0x0
  4967                           
  4968  0070                     ??_OSCILLATOR_Initialize:	
  4969                           ; 1 bytes @ 0x0
  4970                           
  4971  0070                     ?_TMR0_Initialize:	
  4972                           ; 1 bytes @ 0x0
  4973                           
  4974  0070                     ?_EUSART_Initialize:	
  4975                           ; 1 bytes @ 0x0
  4976                           
  4977  0070                     ??_EUSART_Initialize:	
  4978                           ; 1 bytes @ 0x0
  4979                           
  4980  0070                     ?_TMR0_ISR:	
  4981                           ; 1 bytes @ 0x0
  4982                           
  4983  0070                     ??_TMR0_ISR:	
  4984                           ; 1 bytes @ 0x0
  4985                           
  4986  0070                     ?_TMR0_SetInterruptHandler:	
  4987                           ; 1 bytes @ 0x0
  4988                           
  4989  0070                     ?_TMR0_DefaultInterruptHandler:	
  4990                           ; 1 bytes @ 0x0
  4991                           
  4992  0070                     ??_TMR0_DefaultInterruptHandler:	
  4993                           ; 1 bytes @ 0x0
  4994                           
  4995  0070                     ?_InitTiming:	
  4996                           ; 1 bytes @ 0x0
  4997                           
  4998  0070                     ?_BME280_Init:	
  4999                           ; 1 bytes @ 0x0
  5000                           
  5001  0070                     ?_I2C_UserAlert:	
  5002                           ; 1 bytes @ 0x0
  5003                           
  5004  0070                     ?_Sleep:	
  5005                           ; 1 bytes @ 0x0
  5006                           
  5007  0070                     ?_SYSTEM_Initialize:	
  5008                           ; 1 bytes @ 0x0
  5009                           
  5010  0070                     ?_INTERRUPT_InterruptManager:	
  5011                           ; 1 bytes @ 0x0
  5012                           
  5013  0070                     ??_INTERRUPT_InterruptManager:	
  5014                           ; 1 bytes @ 0x0
  5015                           
  5016  0070                     ?_ReverseString:	
  5017                           ; 1 bytes @ 0x0
  5018                           
  5019  0070                     ?_main:	
  5020                           ; 1 bytes @ 0x0
  5021                           
  5022  0070                     ?_I2C_Init:	
  5023                           ; 1 bytes @ 0x0
  5024                           
  5025  0070                     ??_I2C_Init:	
  5026                           ; 1 bytes @ 0x0
  5027                           
  5028  0070                     ?_I2C_WriteByte:	
  5029                           ; 1 bytes @ 0x0
  5030                           
  5031  0070                     ?_I2C_ReadByte:	
  5032                           ; 1 bytes @ 0x0
  5033                           
  5034  0070                     ?_I2C_Stop:	
  5035                           ; 1 bytes @ 0x0
  5036                           
  5037  0070                     ?_TimerISR:	
  5038                           ; 1 bytes @ 0x0
  5039                           
  5040  0070                     ??_TimerISR:	
  5041                           ; 1 bytes @ 0x0
  5042                           
  5043  0070                     ?_TransmitBit:	
  5044                           ; 1 bytes @ 0x0
  5045                           
  5046  0070                     ??_TransmitBit:	
  5047                           ; 1 bytes @ 0x0
  5048                           
  5049  0070                     ?_TransmitByte:	
  5050                           ; 1 bytes @ 0x0
  5051                           
  5052  0070                     ?_strlen:	
  5053                           ; 1 bytes @ 0x0
  5054                           
  5055  0070                     ?_Insert:	
  5056                           ; 2 bytes @ 0x0
  5057                           
  5058  0070                     ?___awdiv:	
  5059                           ; 2 bytes @ 0x0
  5060                           
  5061  0070                     ?___awmod:	
  5062                           ; 2 bytes @ 0x0
  5063                           
  5064  0070                     ?___lmul:	
  5065                           ; 2 bytes @ 0x0
  5066                           
  5067  0070                     ?___lldiv:	
  5068                           ; 4 bytes @ 0x0
  5069                           
  5070  0070                     ?___llmod:	
  5071                           ; 4 bytes @ 0x0
  5072                           
  5073  0070                     bme280_parse_sensor_data@uncomp_data:	
  5074                           ; 4 bytes @ 0x0
  5075                           
  5076  0070                     parse_device_settings@settings:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     interleave_reg_addr@temp_buff:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     parse_temp_press_calib_data@dev:	
  5083                           ; 1 bytes @ 0x0
  5084                           
  5085  0070                     parse_humidity_calib_data@dev:	
  5086                           ; 1 bytes @ 0x0
  5087                           
  5088  0070                     are_settings_changed@desired_settings:	
  5089                           ; 1 bytes @ 0x0
  5090                           
  5091  0070                     I2C_UserAlert@status:	
  5092                           ; 1 bytes @ 0x0
  5093                           
  5094  0070                     fill_filter_settings@settings:	
  5095                           ; 1 bytes @ 0x0
  5096                           
  5097  0070                     fill_standby_settings@settings:	
  5098                           ; 2 bytes @ 0x0
  5099                           
  5100  0070                     fill_osr_press_settings@settings:	
  5101                           ; 2 bytes @ 0x0
  5102                           
  5103  0070                     fill_osr_temp_settings@settings:	
  5104                           ; 2 bytes @ 0x0
  5105                           
  5106  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  5107                           ; 2 bytes @ 0x0
  5108                           
  5109  0070                     Insert@dest:	
  5110                           ; 2 bytes @ 0x0
  5111                           
  5112  0070                     ___awdiv@divisor:	
  5113                           ; 2 bytes @ 0x0
  5114                           
  5115  0070                     ___awmod@divisor:	
  5116                           ; 2 bytes @ 0x0
  5117                           
  5118  0070                     strlen@s:	
  5119                           ; 2 bytes @ 0x0
  5120                           
  5121  0070                     Sleep@ms:	
  5122                           ; 2 bytes @ 0x0
  5123                           
  5124  0070                     ___lmul@multiplier:	
  5125                           ; 4 bytes @ 0x0
  5126                           
  5127  0070                     ___lldiv@divisor:	
  5128                           ; 4 bytes @ 0x0
  5129                           
  5130  0070                     ___llmod@divisor:	
  5131                           ; 4 bytes @ 0x0
  5132                           
  5133                           
  5134                           ; 4 bytes @ 0x0
  5135  0070                     	ds	1
  5136  0071                     ??_are_settings_changed:	
  5137  0071                     ??_parse_device_settings:	
  5138                           ; 1 bytes @ 0x1
  5139                           
  5140  0071                     ??_bme280_parse_sensor_data:	
  5141                           ; 1 bytes @ 0x1
  5142                           
  5143  0071                     ??_parse_temp_press_calib_data:	
  5144                           ; 1 bytes @ 0x1
  5145                           
  5146  0071                     ??_parse_humidity_calib_data:	
  5147                           ; 1 bytes @ 0x1
  5148                           
  5149  0071                     interleave_reg_addr@reg_data:	
  5150                           ; 1 bytes @ 0x1
  5151                           
  5152  0071                     are_settings_changed@sub_settings:	
  5153                           ; 1 bytes @ 0x1
  5154                           
  5155  0071                     TransmitBit@b:	
  5156                           ; 1 bytes @ 0x1
  5157                           
  5158                           
  5159                           ; 1 bytes @ 0x1
  5160  0071                     	ds	1
  5161  0072                     ??_fill_osr_press_settings:	
  5162  0072                     ??_fill_osr_temp_settings:	
  5163                           ; 1 bytes @ 0x2
  5164                           
  5165  0072                     ??_fill_filter_settings:	
  5166                           ; 1 bytes @ 0x2
  5167                           
  5168  0072                     ??_fill_standby_settings:	
  5169                           ; 1 bytes @ 0x2
  5170                           
  5171  0072                     ??_TMR0_Initialize:	
  5172                           ; 1 bytes @ 0x2
  5173                           
  5174  0072                     ??_TMR0_SetInterruptHandler:	
  5175                           ; 1 bytes @ 0x2
  5176                           
  5177  0072                     ??_strlen:	
  5178                           ; 1 bytes @ 0x2
  5179                           
  5180  0072                     ??_InitTiming:	
  5181                           ; 1 bytes @ 0x2
  5182                           
  5183  0072                     ??_TransmitByte:	
  5184                           ; 1 bytes @ 0x2
  5185                           
  5186  0072                     interleave_reg_addr@len:	
  5187                           ; 1 bytes @ 0x2
  5188                           
  5189  0072                     parse_temp_press_calib_data@calib_data:	
  5190                           ; 1 bytes @ 0x2
  5191                           
  5192  0072                     are_settings_changed@settings_changed:	
  5193                           ; 1 bytes @ 0x2
  5194                           
  5195  0072                     null_ptr_check@rslt:	
  5196                           ; 1 bytes @ 0x2
  5197                           
  5198  0072                     Insert@src:	
  5199                           ; 1 bytes @ 0x2
  5200                           
  5201  0072                     ___awdiv@dividend:	
  5202                           ; 1 bytes @ 0x2
  5203                           
  5204  0072                     ___awmod@dividend:	
  5205                           ; 2 bytes @ 0x2
  5206                           
  5207                           
  5208                           ; 2 bytes @ 0x2
  5209  0072                     	ds	1
  5210  0073                     ??_interleave_reg_addr:	
  5211  0073                     ??_SYSTEM_Initialize:	
  5212                           ; 1 bytes @ 0x3
  5213                           
  5214  0073                     parse_device_settings@reg_data:	
  5215                           ; 1 bytes @ 0x3
  5216                           
  5217  0073                     parse_temp_press_calib_data@reg_data:	
  5218                           ; 1 bytes @ 0x3
  5219                           
  5220  0073                     null_ptr_check@dev:	
  5221                           ; 1 bytes @ 0x3
  5222                           
  5223  0073                     TransmitByte@byte:	
  5224                           ; 1 bytes @ 0x3
  5225                           
  5226  0073                     Insert@index:	
  5227                           ; 1 bytes @ 0x3
  5228                           
  5229  0073                     strlen@a:	
  5230                           ; 2 bytes @ 0x3
  5231                           
  5232                           
  5233                           ; 2 bytes @ 0x3
  5234  0073                     	ds	1
  5235  0074                     ??_Sleep:	
  5236  0074                     ??___awdiv:	
  5237                           ; 1 bytes @ 0x4
  5238                           
  5239  0074                     ??___awmod:	
  5240                           ; 1 bytes @ 0x4
  5241                           
  5242  0074                     parse_humidity_calib_data@dig_H4_lsb:	
  5243                           ; 1 bytes @ 0x4
  5244                           
  5245  0074                     TransmitByte@i:	
  5246                           ; 2 bytes @ 0x4
  5247                           
  5248  0074                     ___lmul@multiplicand:	
  5249                           ; 2 bytes @ 0x4
  5250                           
  5251  0074                     ___lldiv@dividend:	
  5252                           ; 4 bytes @ 0x4
  5253                           
  5254  0074                     ___llmod@dividend:	
  5255                           ; 4 bytes @ 0x4
  5256                           
  5257                           
  5258                           ; 4 bytes @ 0x4
  5259  0074                     	ds	1
  5260  0075                     ?_ClearString:	
  5261  0075                     ?_crc16_update:	
  5262                           ; 1 bytes @ 0x5
  5263                           
  5264  0075                     fill_filter_settings@reg_data:	
  5265                           ; 2 bytes @ 0x5
  5266                           
  5267  0075                     fill_standby_settings@reg_data:	
  5268                           ; 1 bytes @ 0x5
  5269                           
  5270  0075                     fill_osr_press_settings@reg_data:	
  5271                           ; 1 bytes @ 0x5
  5272                           
  5273  0075                     fill_osr_temp_settings@reg_data:	
  5274                           ; 1 bytes @ 0x5
  5275                           
  5276  0075                     ___awdiv@counter:	
  5277                           ; 1 bytes @ 0x5
  5278                           
  5279  0075                     ___awmod@counter:	
  5280                           ; 1 bytes @ 0x5
  5281                           
  5282  0075                     ClearString@str:	
  5283                           ; 1 bytes @ 0x5
  5284                           
  5285  0075                     Insert@destLimit:	
  5286                           ; 2 bytes @ 0x5
  5287                           
  5288  0075                     crc16_update@pData:	
  5289                           ; 2 bytes @ 0x5
  5290                           
  5291                           
  5292                           ; 2 bytes @ 0x5
  5293  0075                     	ds	1
  5294  0076                     ?_TransmitString:	
  5295  0076                     interleave_reg_addr@reg_addr:	
  5296                           ; 1 bytes @ 0x6
  5297                           
  5298  0076                     ___awdiv@sign:	
  5299                           ; 1 bytes @ 0x6
  5300                           
  5301  0076                     ___awmod@sign:	
  5302                           ; 1 bytes @ 0x6
  5303                           
  5304  0076                     parse_humidity_calib_data@dig_H4_msb:	
  5305                           ; 1 bytes @ 0x6
  5306                           
  5307  0076                     TransmitString@message:	
  5308                           ; 2 bytes @ 0x6
  5309                           
  5310                           
  5311                           ; 2 bytes @ 0x6
  5312  0076                     	ds	1
  5313  0077                     ??_ClearString:	
  5314  0077                     ??_Insert:	
  5315                           ; 1 bytes @ 0x7
  5316                           
  5317  0077                     interleave_reg_addr@index:	
  5318                           ; 1 bytes @ 0x7
  5319                           
  5320  0077                     crc16_update@length:	
  5321                           ; 1 bytes @ 0x7
  5322                           
  5323  0077                     ___awdiv@quotient:	
  5324                           ; 2 bytes @ 0x7
  5325                           
  5326                           
  5327                           ; 2 bytes @ 0x7
  5328  0077                     	ds	1
  5329  0078                     ??_TransmitString:	
  5330  0078                     ??___lmul:	
  5331                           ; 1 bytes @ 0x8
  5332                           
  5333  0078                     ??___lldiv:	
  5334                           ; 1 bytes @ 0x8
  5335                           
  5336  0078                     ??___llmod:	
  5337                           ; 1 bytes @ 0x8
  5338                           
  5339  0078                     parse_humidity_calib_data@dig_H5_lsb:	
  5340                           ; 1 bytes @ 0x8
  5341                           
  5342  0078                     ClearString@counti:	
  5343                           ; 2 bytes @ 0x8
  5344                           
  5345  0078                     Sleep@start:	
  5346                           ; 2 bytes @ 0x8
  5347                           
  5348  0078                     ___lmul@product:	
  5349                           ; 4 bytes @ 0x8
  5350                           
  5351                           
  5352                           ; 4 bytes @ 0x8
  5353  0078                     	ds	1
  5354  0079                     ??_ReverseString:	
  5355  0079                     Insert@temp:	
  5356                           ; 1 bytes @ 0x9
  5357                           
  5358  0079                     ___llmod@counter:	
  5359                           ; 1 bytes @ 0x9
  5360                           
  5361  0079                     crc16_update@wCrc:	
  5362                           ; 1 bytes @ 0x9
  5363                           
  5364  0079                     TransmitString@counti:	
  5365                           ; 2 bytes @ 0x9
  5366                           
  5367  0079                     ___lldiv@quotient:	
  5368                           ; 2 bytes @ 0x9
  5369                           
  5370                           
  5371                           ; 4 bytes @ 0x9
  5372  0079                     	ds	1
  5373  007A                     Insert@current:	
  5374  007A                     parse_humidity_calib_data@dig_H5_msb:	
  5375                           ; 1 bytes @ 0xA
  5376                           
  5377  007A                     ClearString@i:	
  5378                           ; 2 bytes @ 0xA
  5379                           
  5380                           
  5381                           ; 2 bytes @ 0xA
  5382  007A                     	ds	1
  5383  007B                     ??_InsertString:	
  5384  007B                     ?_IntToString:	
  5385                           ; 1 bytes @ 0xB
  5386                           
  5387  007B                     ??_crc16_update:	
  5388                           ; 1 bytes @ 0xB
  5389                           
  5390  007B                     IntToString@n:	
  5391                           ; 1 bytes @ 0xB
  5392                           
  5393  007B                     TransmitString@i:	
  5394                           ; 2 bytes @ 0xB
  5395                           
  5396                           
  5397                           ; 2 bytes @ 0xB
  5398  007B                     	ds	1
  5399  007C                     ??_DebugAlert:	
  5400  007C                     ??___aldiv:	
  5401                           ; 1 bytes @ 0xC
  5402                           
  5403  007C                     parse_humidity_calib_data@calib_data:	
  5404                           ; 1 bytes @ 0xC
  5405                           
  5406                           
  5407                           ; 1 bytes @ 0xC
  5408  007C                     	ds	1
  5409  007D                     ??_I2C_UserAlert:	
  5410  007D                     parse_humidity_calib_data@reg_data:	
  5411                           ; 1 bytes @ 0xD
  5412                           
  5413  007D                     IntToString@dest:	
  5414                           ; 1 bytes @ 0xD
  5415                           
  5416  007D                     I2C_WriteByte@data:	
  5417                           ; 1 bytes @ 0xD
  5418                           
  5419  007D                     ___lldiv@counter:	
  5420                           ; 1 bytes @ 0xD
  5421                           
  5422                           
  5423                           ; 1 bytes @ 0xD
  5424  007D                     	ds	1
  5425                           
  5426                           	psect	cstackBANK0
  5427  0020                     __pcstackBANK0:	
  5428  0020                     ?_DebugAlert:	
  5429  0020                     ?_InsertString:	
  5430                           ; 1 bytes @ 0x0
  5431                           
  5432  0020                     ?___aldiv:	
  5433                           ; 2 bytes @ 0x0
  5434                           
  5435  0020                     crc16_update@i:	
  5436                           ; 4 bytes @ 0x0
  5437                           
  5438  0020                     InsertString@dest:	
  5439                           ; 1 bytes @ 0x0
  5440                           
  5441  0020                     ReverseString@halfway:	
  5442                           ; 2 bytes @ 0x0
  5443                           
  5444  0020                     DebugAlert@delay_high:	
  5445                           ; 2 bytes @ 0x0
  5446                           
  5447  0020                     bme280_parse_sensor_data@data_xlsb:	
  5448                           ; 2 bytes @ 0x0
  5449                           
  5450  0020                     ___aldiv@divisor:	
  5451                           ; 4 bytes @ 0x0
  5452                           
  5453                           
  5454                           ; 4 bytes @ 0x0
  5455  0020                     	ds	1
  5456  0021                     ?_crc16:	
  5457  0021                     crc16@segments:	
  5458                           ; 2 bytes @ 0x1
  5459                           
  5460                           
  5461                           ; 2 bytes @ 0x1
  5462  0021                     	ds	1
  5463  0022                     ReverseString@temp:	
  5464  0022                     InsertString@src:	
  5465                           ; 1 bytes @ 0x2
  5466                           
  5467  0022                     DebugAlert@delay_low:	
  5468                           ; 2 bytes @ 0x2
  5469                           
  5470                           
  5471                           ; 2 bytes @ 0x2
  5472  0022                     	ds	1
  5473  0023                     ??_crc16:	
  5474  0023                     ReverseString@opposite:	
  5475                           ; 1 bytes @ 0x3
  5476                           
  5477                           
  5478                           ; 1 bytes @ 0x3
  5479  0023                     	ds	1
  5480  0024                     DebugAlert@num_flashes:	
  5481  0024                     InsertString@index:	
  5482                           ; 1 bytes @ 0x4
  5483                           
  5484  0024                     ReverseString@counti:	
  5485                           ; 2 bytes @ 0x4
  5486                           
  5487  0024                     bme280_parse_sensor_data@data_lsb:	
  5488                           ; 2 bytes @ 0x4
  5489                           
  5490  0024                     ___aldiv@dividend:	
  5491                           ; 4 bytes @ 0x4
  5492                           
  5493                           
  5494                           ; 4 bytes @ 0x4
  5495  0024                     	ds	1
  5496  0025                     crc16@data:	
  5497  0025                     DebugAlert@i:	
  5498                           ; 1 bytes @ 0x5
  5499                           
  5500                           
  5501                           ; 2 bytes @ 0x5
  5502  0025                     	ds	1
  5503  0026                     InsertString@destLimit:	
  5504  0026                     ReverseString@i:	
  5505                           ; 2 bytes @ 0x6
  5506                           
  5507  0026                     crc16@crc:	
  5508                           ; 2 bytes @ 0x6
  5509                           
  5510                           
  5511                           ; 2 bytes @ 0x6
  5512  0026                     	ds	1
  5513  0027                     ??_I2C_ReadByte:	
  5514  0027                     ??_I2C_Stop:	
  5515                           ; 1 bytes @ 0x7
  5516                           
  5517                           
  5518                           ; 1 bytes @ 0x7
  5519  0027                     	ds	1
  5520  0028                     ReverseString@str:	
  5521  0028                     ___aldiv@counter:	
  5522                           ; 1 bytes @ 0x8
  5523                           
  5524  0028                     InsertString@counti:	
  5525                           ; 1 bytes @ 0x8
  5526                           
  5527  0028                     crc16@i:	
  5528                           ; 2 bytes @ 0x8
  5529                           
  5530  0028                     bme280_parse_sensor_data@data_msb:	
  5531                           ; 2 bytes @ 0x8
  5532                           
  5533                           
  5534                           ; 4 bytes @ 0x8
  5535  0028                     	ds	1
  5536  0029                     ??_IntToString:	
  5537  0029                     ?_UIntToString:	
  5538                           ; 1 bytes @ 0x9
  5539                           
  5540  0029                     ___aldiv@sign:	
  5541                           ; 1 bytes @ 0x9
  5542                           
  5543  0029                     UIntToString@n:	
  5544                           ; 1 bytes @ 0x9
  5545                           
  5546                           
  5547                           ; 4 bytes @ 0x9
  5548  0029                     	ds	1
  5549  002A                     ?_UIntToHexString:	
  5550  002A                     InsertString@i:	
  5551                           ; 1 bytes @ 0xA
  5552                           
  5553  002A                     UIntToHexString@n:	
  5554                           ; 2 bytes @ 0xA
  5555                           
  5556  002A                     ___aldiv@quotient:	
  5557                           ; 4 bytes @ 0xA
  5558                           
  5559                           
  5560                           ; 4 bytes @ 0xA
  5561  002A                     	ds	1
  5562  002B                     ??_I2C_WriteByte:	
  5563  002B                     IntToString@sign:	
  5564                           ; 1 bytes @ 0xB
  5565                           
  5566  002B                     I2C_ReadByte@ackbit:	
  5567                           ; 1 bytes @ 0xB
  5568                           
  5569                           
  5570                           ; 1 bytes @ 0xB
  5571  002B                     	ds	1
  5572  002C                     bme280_parse_sensor_data@reg_data:	
  5573  002C                     I2C_ReadByte@rcvdata:	
  5574                           ; 1 bytes @ 0xC
  5575                           
  5576  002C                     IntToString@i:	
  5577                           ; 1 bytes @ 0xC
  5578                           
  5579                           
  5580                           ; 2 bytes @ 0xC
  5581  002C                     	ds	1
  5582  002D                     UIntToString@dest:	
  5583                           
  5584                           ; 1 bytes @ 0xD
  5585  002D                     	ds	1
  5586  002E                     ??_UIntToString:	
  5587  002E                     ?_compensate_temperature:	
  5588                           ; 1 bytes @ 0xE
  5589                           
  5590  002E                     ?_compensate_pressure:	
  5591                           ; 4 bytes @ 0xE
  5592                           
  5593  002E                     ?_compensate_humidity:	
  5594                           ; 4 bytes @ 0xE
  5595                           
  5596  002E                     compensate_temperature@calib_data:	
  5597                           ; 4 bytes @ 0xE
  5598                           
  5599  002E                     compensate_pressure@calib_data:	
  5600                           ; 1 bytes @ 0xE
  5601                           
  5602  002E                     compensate_humidity@calib_data:	
  5603                           ; 1 bytes @ 0xE
  5604                           
  5605  002E                     UIntToHexString@dest:	
  5606                           ; 1 bytes @ 0xE
  5607                           
  5608                           
  5609                           ; 1 bytes @ 0xE
  5610  002E                     	ds	1
  5611  002F                     ?_ReadEnvSensor:	
  5612  002F                     ?_WriteEnvSensor:	
  5613                           ; 1 bytes @ 0xF
  5614                           
  5615  002F                     ??_UIntToHexString:	
  5616                           ; 1 bytes @ 0xF
  5617                           
  5618  002F                     ReadEnvSensor@dev_id:	
  5619                           ; 1 bytes @ 0xF
  5620                           
  5621  002F                     WriteEnvSensor@dev_id:	
  5622                           ; 1 bytes @ 0xF
  5623                           
  5624                           
  5625                           ; 1 bytes @ 0xF
  5626  002F                     	ds	1
  5627  0030                     ReadEnvSensor@reg_addr:	
  5628  0030                     WriteEnvSensor@reg_addr:	
  5629                           ; 1 bytes @ 0x10
  5630                           
  5631  0030                     UIntToString@i:	
  5632                           ; 1 bytes @ 0x10
  5633                           
  5634                           
  5635                           ; 2 bytes @ 0x10
  5636  0030                     	ds	1
  5637  0031                     ReadEnvSensor@reg_data:	
  5638  0031                     WriteEnvSensor@reg_data:	
  5639                           ; 1 bytes @ 0x11
  5640                           
  5641  0031                     _UIntToHexString$1373:	
  5642                           ; 1 bytes @ 0x11
  5643                           
  5644                           
  5645                           ; 4 bytes @ 0x11
  5646  0031                     	ds	1
  5647  0032                     ??_compensate_temperature:	
  5648  0032                     ??_compensate_pressure:	
  5649                           ; 1 bytes @ 0x12
  5650                           
  5651  0032                     ??_compensate_humidity:	
  5652                           ; 1 bytes @ 0x12
  5653                           
  5654  0032                     ReadEnvSensor@len:	
  5655                           ; 1 bytes @ 0x12
  5656                           
  5657  0032                     WriteEnvSensor@len:	
  5658                           ; 2 bytes @ 0x12
  5659                           
  5660                           
  5661                           ; 2 bytes @ 0x12
  5662  0032                     	ds	2
  5663  0034                     ??_ReadEnvSensor:	
  5664  0034                     ??_WriteEnvSensor:	
  5665                           ; 1 bytes @ 0x14
  5666                           
  5667                           
  5668                           ; 1 bytes @ 0x14
  5669  0034                     	ds	1
  5670  0035                     UIntToHexString@remainder:	
  5671                           
  5672                           ; 4 bytes @ 0x15
  5673  0035                     	ds	3
  5674  0038                     ReadEnvSensor@rslt:	
  5675  0038                     WriteEnvSensor@rslt:	
  5676                           ; 1 bytes @ 0x18
  5677                           
  5678                           
  5679                           ; 1 bytes @ 0x18
  5680  0038                     	ds	1
  5681  0039                     ReadEnvSensor@i:	
  5682  0039                     WriteEnvSensor@i:	
  5683                           ; 2 bytes @ 0x19
  5684                           
  5685  0039                     UIntToHexString@i:	
  5686                           ; 2 bytes @ 0x19
  5687                           
  5688                           
  5689                           ; 4 bytes @ 0x19
  5690  0039                     	ds	1
  5691  003A                     _compensate_humidity$2266:	
  5692                           
  5693                           ; 4 bytes @ 0x1A
  5694  003A                     	ds	1
  5695  003B                     ?_bme280_get_regs:	
  5696  003B                     ?_bme280_set_regs:	
  5697                           ; 1 bytes @ 0x1B
  5698                           
  5699  003B                     bme280_get_regs@reg_data:	
  5700                           ; 1 bytes @ 0x1B
  5701                           
  5702  003B                     bme280_set_regs@reg_data:	
  5703                           ; 1 bytes @ 0x1B
  5704                           
  5705                           
  5706                           ; 1 bytes @ 0x1B
  5707  003B                     	ds	1
  5708  003C                     bme280_set_regs@len:	
  5709  003C                     bme280_get_regs@len:	
  5710                           ; 1 bytes @ 0x1C
  5711                           
  5712  003C                     _compensate_temperature$2262:	
  5713                           ; 2 bytes @ 0x1C
  5714                           
  5715                           
  5716                           ; 4 bytes @ 0x1C
  5717  003C                     	ds	1
  5718  003D                     bme280_set_regs@dev:	
  5719                           
  5720                           ; 1 bytes @ 0x1D
  5721  003D                     	ds	1
  5722  003E                     ?_get_calib_data:	
  5723  003E                     ??_bme280_set_regs:	
  5724                           ; 1 bytes @ 0x1E
  5725                           
  5726  003E                     bme280_get_regs@dev:	
  5727                           ; 1 bytes @ 0x1E
  5728                           
  5729  003E                     compensate_humidity@uncomp_data:	
  5730                           ; 1 bytes @ 0x1E
  5731                           
  5732                           
  5733                           ; 1 bytes @ 0x1E
  5734  003E                     	ds	1
  5735  003F                     ??_bme280_get_regs:	
  5736                           
  5737                           ; 1 bytes @ 0x1F
  5738  003F                     	ds	2
  5739  0041                     bme280_set_regs@temp_buff:	
  5740                           
  5741                           ; 20 bytes @ 0x21
  5742  0041                     	ds	1
  5743  0042                     bme280_get_regs@reg_addr:	
  5744                           
  5745                           ; 1 bytes @ 0x22
  5746  0042                     	ds	1
  5747  0043                     bme280_get_regs@rslt:	
  5748  0043                     compensate_humidity@humidity:	
  5749                           ; 1 bytes @ 0x23
  5750                           
  5751                           
  5752                           ; 4 bytes @ 0x23
  5753  0043                     	ds	1
  5754  0044                     ??_get_calib_data:	
  5755  0044                     ?_bme280_get_sensor_mode:	
  5756                           ; 1 bytes @ 0x24
  5757                           
  5758  0044                     bme280_get_sensor_mode@dev:	
  5759                           ; 1 bytes @ 0x24
  5760                           
  5761  0044                     compensate_temperature@temperature_max:	
  5762                           ; 1 bytes @ 0x24
  5763                           
  5764                           
  5765                           ; 4 bytes @ 0x24
  5766  0044                     	ds	1
  5767  0045                     ??_bme280_get_sensor_mode:	
  5768                           
  5769                           ; 1 bytes @ 0x25
  5770  0045                     	ds	2
  5771  0047                     compensate_humidity@var1:	
  5772  0047                     get_calib_data@calib_data:	
  5773                           ; 4 bytes @ 0x27
  5774                           
  5775                           
  5776                           ; 26 bytes @ 0x27
  5777  0047                     	ds	1
  5778  0048                     bme280_get_sensor_mode@rslt:	
  5779  0048                     compensate_temperature@var1:	
  5780                           ; 1 bytes @ 0x28
  5781                           
  5782                           
  5783                           ; 4 bytes @ 0x28
  5784  0048                     	ds	1
  5785  0049                     bme280_get_sensor_mode@sensor_mode:	
  5786                           
  5787                           ; 1 bytes @ 0x29
  5788  0049                     	ds	2
  5789  004B                     compensate_humidity@var2:	
  5790                           
  5791                           ; 4 bytes @ 0x2B
  5792  004B                     	ds	1
  5793  004C                     compensate_temperature@uncomp_data:	
  5794                           
  5795                           ; 1 bytes @ 0x2C
  5796  004C                     	ds	1
  5797  004D                     compensate_temperature@var2:	
  5798                           
  5799                           ; 4 bytes @ 0x2D
  5800  004D                     	ds	2
  5801  004F                     compensate_humidity@var4:	
  5802                           
  5803                           ; 4 bytes @ 0x2F
  5804  004F                     	ds	2
  5805  0051                     compensate_temperature@temperature:	
  5806                           
  5807                           ; 4 bytes @ 0x31
  5808  0051                     	ds	2
  5809  0053                     ?_bme280_soft_reset:	
  5810  0053                     compensate_humidity@var5:	
  5811                           ; 1 bytes @ 0x33
  5812                           
  5813                           
  5814                           ; 4 bytes @ 0x33
  5815  0053                     	ds	2
  5816  0055                     bme280_set_regs@temp_len:	
  5817                           
  5818                           ; 2 bytes @ 0x35
  5819  0055                     	ds	2
  5820  0057                     bme280_set_regs@reg_addr_cnt:	
  5821  0057                     compensate_humidity@var3:	
  5822                           ; 1 bytes @ 0x37
  5823                           
  5824                           
  5825                           ; 4 bytes @ 0x37
  5826  0057                     	ds	1
  5827  0058                     bme280_set_regs@rslt:	
  5828                           
  5829                           ; 1 bytes @ 0x38
  5830  0058                     	ds	1
  5831  0059                     bme280_set_regs@reg_addr:	
  5832                           
  5833                           ; 1 bytes @ 0x39
  5834  0059                     	ds	1
  5835  005A                     ??_bme280_soft_reset:	
  5836  005A                     ?_set_filter_standby_settings:	
  5837                           ; 1 bytes @ 0x3A
  5838                           
  5839  005A                     ?_write_power_mode:	
  5840                           ; 1 bytes @ 0x3A
  5841                           
  5842  005A                     ?_set_osr_humidity_settings:	
  5843                           ; 1 bytes @ 0x3A
  5844                           
  5845  005A                     ?_set_osr_press_temp_settings:	
  5846                           ; 1 bytes @ 0x3A
  5847                           
  5848  005A                     write_power_mode@dev:	
  5849                           ; 1 bytes @ 0x3A
  5850                           
  5851  005A                     set_osr_humidity_settings@settings:	
  5852                           ; 1 bytes @ 0x3A
  5853                           
  5854  005A                     set_osr_press_temp_settings@settings:	
  5855                           ; 2 bytes @ 0x3A
  5856                           
  5857  005A                     set_filter_standby_settings@settings:	
  5858                           ; 2 bytes @ 0x3A
  5859                           
  5860                           
  5861                           ; 2 bytes @ 0x3A
  5862  005A                     	ds	1
  5863  005B                     ??_write_power_mode:	
  5864  005B                     ?_bme280_compensate_data:	
  5865                           ; 1 bytes @ 0x3B
  5866                           
  5867  005B                     bme280_compensate_data@uncomp_data:	
  5868                           ; 1 bytes @ 0x3B
  5869                           
  5870                           
  5871                           ; 1 bytes @ 0x3B
  5872  005B                     	ds	1
  5873  005C                     bme280_compensate_data@comp_data:	
  5874  005C                     set_osr_humidity_settings@dev:	
  5875                           ; 1 bytes @ 0x3C
  5876                           
  5877  005C                     set_osr_press_temp_settings@dev:	
  5878                           ; 1 bytes @ 0x3C
  5879                           
  5880  005C                     set_filter_standby_settings@dev:	
  5881                           ; 1 bytes @ 0x3C
  5882                           
  5883                           
  5884                           ; 1 bytes @ 0x3C
  5885  005C                     	ds	1
  5886  005D                     ??_set_filter_standby_settings:	
  5887  005D                     ??_set_osr_humidity_settings:	
  5888                           ; 1 bytes @ 0x3D
  5889                           
  5890  005D                     ??_set_osr_press_temp_settings:	
  5891                           ; 1 bytes @ 0x3D
  5892                           
  5893  005D                     bme280_soft_reset@soft_rst_cmd:	
  5894                           ; 1 bytes @ 0x3D
  5895                           
  5896  005D                     bme280_compensate_data@calib_data:	
  5897                           ; 1 bytes @ 0x3D
  5898                           
  5899                           
  5900                           ; 1 bytes @ 0x3D
  5901  005D                     	ds	1
  5902  005E                     ??_bme280_compensate_data:	
  5903  005E                     ?_bme280_init:	
  5904                           ; 1 bytes @ 0x3E
  5905                           
  5906  005E                     bme280_soft_reset@rslt:	
  5907                           ; 1 bytes @ 0x3E
  5908                           
  5909  005E                     write_power_mode@sensor_mode:	
  5910                           ; 1 bytes @ 0x3E
  5911                           
  5912                           
  5913                           ; 1 bytes @ 0x3E
  5914  005E                     	ds	1
  5915  005F                     bme280_soft_reset@reg_addr:	
  5916  005F                     bme280_compensate_data@rslt:	
  5917                           ; 1 bytes @ 0x3F
  5918                           
  5919  005F                     write_power_mode@rslt:	
  5920                           ; 1 bytes @ 0x3F
  5921                           
  5922                           
  5923                           ; 1 bytes @ 0x3F
  5924  005F                     	ds	1
  5925  0060                     bme280_soft_reset@dev:	
  5926  0060                     bme280_compensate_data@sensor_comp:	
  5927                           ; 1 bytes @ 0x40
  5928                           
  5929  0060                     set_osr_humidity_settings@ctrl_hum:	
  5930                           ; 1 bytes @ 0x40
  5931                           
  5932  0060                     set_osr_press_temp_settings@desired_settings:	
  5933                           ; 1 bytes @ 0x40
  5934                           
  5935  0060                     set_filter_standby_settings@desired_settings:	
  5936                           ; 1 bytes @ 0x40
  5937                           
  5938  0060                     write_power_mode@reg_addr:	
  5939                           ; 1 bytes @ 0x40
  5940                           
  5941                           
  5942                           ; 1 bytes @ 0x40
  5943  0060                     	ds	1
  5944  0061                     ?_bme280_get_sensor_data:	
  5945  0061                     bme280_get_sensor_data@comp_data:	
  5946                           ; 1 bytes @ 0x41
  5947                           
  5948  0061                     set_osr_humidity_settings@ctrl_meas:	
  5949                           ; 1 bytes @ 0x41
  5950                           
  5951  0061                     set_osr_press_temp_settings@rslt:	
  5952                           ; 1 bytes @ 0x41
  5953                           
  5954  0061                     set_filter_standby_settings@rslt:	
  5955                           ; 1 bytes @ 0x41
  5956                           
  5957  0061                     write_power_mode@sensor_mode_reg_val:	
  5958                           ; 1 bytes @ 0x41
  5959                           
  5960                           
  5961                           ; 1 bytes @ 0x41
  5962  0061                     	ds	1
  5963  0062                     bme280_get_sensor_data@dev:	
  5964  0062                     set_osr_humidity_settings@rslt:	
  5965                           ; 1 bytes @ 0x42
  5966                           
  5967  0062                     set_osr_press_temp_settings@reg_addr:	
  5968                           ; 1 bytes @ 0x42
  5969                           
  5970  0062                     set_filter_standby_settings@reg_addr:	
  5971                           ; 1 bytes @ 0x42
  5972                           
  5973  0062                     get_calib_data@rslt:	
  5974                           ; 1 bytes @ 0x42
  5975                           
  5976                           
  5977                           ; 1 bytes @ 0x42
  5978  0062                     	ds	1
  5979  0063                     ??_bme280_get_sensor_data:	
  5980  0063                     set_osr_humidity_settings@reg_addr:	
  5981                           ; 1 bytes @ 0x43
  5982                           
  5983  0063                     set_osr_press_temp_settings@reg_data:	
  5984                           ; 1 bytes @ 0x43
  5985                           
  5986  0063                     set_filter_standby_settings@reg_data:	
  5987                           ; 1 bytes @ 0x43
  5988                           
  5989  0063                     get_calib_data@dev:	
  5990                           ; 1 bytes @ 0x43
  5991                           
  5992                           
  5993                           ; 1 bytes @ 0x43
  5994  0063                     	ds	1
  5995  0064                     ?_set_osr_settings:	
  5996  0064                     ??_bme280_init:	
  5997                           ; 1 bytes @ 0x44
  5998                           
  5999  0064                     set_osr_settings@settings:	
  6000                           ; 1 bytes @ 0x44
  6001                           
  6002                           
  6003                           ; 2 bytes @ 0x44
  6004  0064                     	ds	2
  6005  0066                     set_osr_settings@dev:	
  6006                           
  6007                           ; 1 bytes @ 0x46
  6008  0066                     	ds	1
  6009  0067                     ??_set_osr_settings:	
  6010  0067                     bme280_init@try_count:	
  6011                           ; 1 bytes @ 0x47
  6012                           
  6013                           
  6014                           ; 1 bytes @ 0x47
  6015  0067                     	ds	1
  6016  0068                     bme280_init@chip_id:	
  6017                           
  6018                           ; 1 bytes @ 0x48
  6019  0068                     	ds	1
  6020  0069                     ?_put_device_to_sleep:	
  6021  0069                     bme280_init@rslt:	
  6022                           ; 1 bytes @ 0x49
  6023                           
  6024  0069                     set_osr_settings@rslt:	
  6025                           ; 1 bytes @ 0x49
  6026                           
  6027                           
  6028                           ; 1 bytes @ 0x49
  6029  0069                     	ds	1
  6030  006A                     bme280_init@dev:	
  6031  006A                     set_osr_settings@desired_settings:	
  6032                           ; 1 bytes @ 0x4A
  6033                           
  6034                           
  6035                           ; 1 bytes @ 0x4A
  6036  006A                     	ds	1
  6037  006B                     ?_reload_device_settings:	
  6038  006B                     reload_device_settings@dev:	
  6039                           ; 1 bytes @ 0x4B
  6040                           
  6041                           
  6042                           ; 1 bytes @ 0x4B
  6043  006B                     	ds	1
  6044  006C                     ??_reload_device_settings:	
  6045                           
  6046                           ; 1 bytes @ 0x4C
  6047  006C                     	ds	2
  6048  006E                     reload_device_settings@settings:	
  6049                           
  6050                           ; 1 bytes @ 0x4E
  6051  006E                     	ds	1
  6052  006F                     reload_device_settings@rslt:	
  6053                           
  6054                           ; 1 bytes @ 0x4F
  6055  006F                     	ds	1
  6056                           
  6057                           	psect	maintext
  6058  0AD8                     __pmaintext:	
  6059 ;;
  6060 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  6061 ;;
  6062 ;; *************** function _main *****************
  6063 ;; Defined at:
  6064 ;;		line 663 in file "main.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;		None
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  i               2   18[BANK2 ] int 
  6069 ;;  convertedNum   16    0[BANK2 ] unsigned char [16]
  6070 ;;  sensor_data    12   20[BANK2 ] struct bme280_data
  6071 ;;  index           2   32[BANK2 ] int 
  6072 ;;  end             2   16[BANK2 ] int 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      void 
  6075 ;; Registers used:
  6076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : B1F/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Locals:         0       0       0      34       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Totals:         0       0       5      34       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;Total ram usage:       39 bytes
  6087 ;; Hardware stack levels required when called:   16
  6088 ;; This function calls:
  6089 ;;		_BME280_Init
  6090 ;;		_ClearString
  6091 ;;		_InitTiming
  6092 ;;		_Insert
  6093 ;;		_InsertString
  6094 ;;		_IntToString
  6095 ;;		_SYSTEM_Initialize
  6096 ;;		_TransmitString
  6097 ;;		_UIntToHexString
  6098 ;;		_UIntToString
  6099 ;;		_bme280_get_sensor_data
  6100 ;;		_crc16
  6101 ;;		_strlen
  6102 ;; This function is called by:
  6103 ;;		Startup code after reset
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           
  6108                           ;psect for function _main
  6109  0AD8                     _main:	
  6110                           
  6111                           ;main.c: 666:     SYSTEM_Initialize();
  6112                           
  6113                           ;incstack = 0
  6114                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6115  0AD8  319A  2210  318A   	fcall	_SYSTEM_Initialize
  6116                           
  6117                           ;main.c: 667:     InitTiming();
  6118  0ADB  3199  21E8  318A   	fcall	_InitTiming
  6119                           
  6120                           ;main.c: 670:     BME280_Init();
  6121  0ADE  3193  235B  318A   	fcall	_BME280_Init
  6122                           
  6123                           ;main.c: 672:     ClearString(messages[0]);
  6124  0AE1  0022               	movlb	2	; select bank2
  6125  0AE2  085F               	movf	(_messages+1)^(0+256),w
  6126  0AE3  00F6               	movwf	ClearString@str+1
  6127  0AE4  085E               	movf	_messages^(0+256),w
  6128  0AE5  00F5               	movwf	ClearString@str
  6129  0AE6  3188  2002  318A   	fcall	_ClearString
  6130                           
  6131                           ;main.c: 673:     ClearString(messages[1]);
  6132  0AE9  0022               	movlb	2	; select bank2
  6133  0AEA  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6134  0AEB  00F6               	movwf	ClearString@str+1
  6135  0AEC  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6136  0AED  00F5               	movwf	ClearString@str
  6137  0AEE  3188  2002  318A   	fcall	_ClearString
  6138  0AF1                     l4682:	
  6139                           
  6140                           ;main.c: 690:         {;main.c: 692:             struct bme280_data sensor_data;;main.c:
      +                           693:             bme280_get_sensor_data(0x07, &sensor_data, &EnvSensor);
  6141  0AF1  3034               	movlw	(low (main@sensor_data| (0+256)))& (0+255)
  6142  0AF2  0021               	movlb	1	; select bank1
  6143  0AF3  00E3               	movwf	??_main^(0+128)
  6144  0AF4  0863               	movf	??_main^(0+128),w
  6145  0AF5  0020               	movlb	0	; select bank0
  6146  0AF6  00E1               	movwf	bme280_get_sensor_data@comp_data
  6147  0AF7  30B0               	movlw	(low (_EnvSensor| (0+256)))& (0+255)
  6148  0AF8  0021               	movlb	1	; select bank1
  6149  0AF9  00E4               	movwf	(??_main+1)^(0+128)
  6150  0AFA  0864               	movf	(??_main+1)^(0+128),w
  6151  0AFB  0020               	movlb	0	; select bank0
  6152  0AFC  00E2               	movwf	bme280_get_sensor_data@dev
  6153  0AFD  3007               	movlw	7
  6154  0AFE  3192  2233  318A   	fcall	_bme280_get_sensor_data
  6155                           
  6156                           ;main.c: 695:             ClearString(messages[0]);
  6157  0B01  0022               	movlb	2	; select bank2
  6158  0B02  085F               	movf	(_messages+1)^(0+256),w
  6159  0B03  00F6               	movwf	ClearString@str+1
  6160  0B04  085E               	movf	_messages^(0+256),w
  6161  0B05  00F5               	movwf	ClearString@str
  6162  0B06  3188  2002  318A   	fcall	_ClearString
  6163                           
  6164                           ;main.c: 696:             ClearString(messages[1]);
  6165  0B09  0022               	movlb	2	; select bank2
  6166  0B0A  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6167  0B0B  00F6               	movwf	ClearString@str+1
  6168  0B0C  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6169  0B0D  00F5               	movwf	ClearString@str
  6170  0B0E  3188  2002  318A   	fcall	_ClearString
  6171                           
  6172                           ;main.c: 698:             char convertedNumber[16] = {'\0'};
  6173  0B11  3020               	movlw	low main@convertedNumber
  6174  0B12  0086               	movwf	6
  6175  0B13  3001               	movlw	high main@convertedNumber
  6176  0B14  0087               	movwf	7
  6177  0B15  3010               	movlw	16
  6178  0B16  0021               	movlb	1	; select bank1
  6179  0B17  00E3               	movwf	??_main^(0+128)
  6180  0B18  3000               	movlw	0
  6181  0B19                     u5240:	
  6182  0B19  001E               	movwi fsr1++
  6183  0B1A  0BE3               	decfsz	??_main^(0+128),f
  6184  0B1B  2B19               	goto	u5240
  6185                           
  6186                           ;main.c: 700:             IntToString(sensor_data.temperature, convertedNumber);
  6187  0B1C  0022               	movlb	2	; select bank2
  6188  0B1D  0839               	movf	((main@sensor_data+1)^(0+256)+4),w
  6189  0B1E  00FC               	movwf	IntToString@n+1
  6190  0B1F  0838               	movf	(main@sensor_data^(0+256)+4),w
  6191  0B20  00FB               	movwf	IntToString@n
  6192  0B21  3020               	movlw	(low (main@convertedNumber| (0+256)))& (0+255)
  6193  0B22  0021               	movlb	1	; select bank1
  6194  0B23  00E3               	movwf	??_main^(0+128)
  6195  0B24  0863               	movf	??_main^(0+128),w
  6196  0B25  00FD               	movwf	IntToString@dest
  6197  0B26  3193  23C3  318A   	fcall	_IntToString
  6198                           
  6199                           ;main.c: 701:             int index = strlen(messages[1]);
  6200  0B29  0022               	movlb	2	; select bank2
  6201  0B2A  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6202  0B2B  00F1               	movwf	strlen@s+1
  6203  0B2C  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6204  0B2D  00F0               	movwf	strlen@s
  6205  0B2E  319A  2256  318A   	fcall	_strlen
  6206  0B31  0871               	movf	?_strlen+1,w
  6207  0B32  0022               	movlb	2	; select bank2
  6208  0B33  00C1               	movwf	(main@index+1)^(0+256)
  6209  0B34  0870               	movf	?_strlen,w
  6210  0B35  00C0               	movwf	main@index^(0+256)
  6211                           
  6212                           ;main.c: 702:             index = InsertString(messages[1], convertedNumber, index, 70);
  6213  0B36  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6214  0B37  0020               	movlb	0	; select bank0
  6215  0B38  00A1               	movwf	InsertString@dest+1
  6216  0B39  0022               	movlb	2	; select bank2
  6217  0B3A  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6218  0B3B  0020               	movlb	0	; select bank0
  6219  0B3C  00A0               	movwf	InsertString@dest
  6220  0B3D  3020               	movlw	low main@convertedNumber
  6221  0B3E  00A2               	movwf	InsertString@src
  6222  0B3F  3001               	movlw	high main@convertedNumber
  6223  0B40  00A3               	movwf	InsertString@src+1
  6224  0B41  0022               	movlb	2	; select bank2
  6225  0B42  0841               	movf	(main@index+1)^(0+256),w
  6226  0B43  0020               	movlb	0	; select bank0
  6227  0B44  00A5               	movwf	InsertString@index+1
  6228  0B45  0022               	movlb	2	; select bank2
  6229  0B46  0840               	movf	main@index^(0+256),w
  6230  0B47  0020               	movlb	0	; select bank0
  6231  0B48  00A4               	movwf	InsertString@index
  6232  0B49  3046               	movlw	70
  6233  0B4A  00A6               	movwf	InsertString@destLimit
  6234  0B4B  3000               	movlw	0
  6235  0B4C  00A7               	movwf	InsertString@destLimit+1
  6236  0B4D  3190  2094  318A   	fcall	_InsertString
  6237  0B50  0821               	movf	?_InsertString+1,w
  6238  0B51  0022               	movlb	2	; select bank2
  6239  0B52  00C1               	movwf	(main@index+1)^(0+256)
  6240  0B53  0020               	movlb	0	; select bank0
  6241  0B54  0820               	movf	?_InsertString,w
  6242  0B55  0022               	movlb	2	; select bank2
  6243  0B56  00C0               	movwf	main@index^(0+256)
  6244                           
  6245                           ;main.c: 703:             index = Insert(messages[1], ',', index, 70);
  6246  0B57  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6247  0B58  00F1               	movwf	Insert@dest+1
  6248  0B59  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6249  0B5A  00F0               	movwf	Insert@dest
  6250  0B5B  302C               	movlw	44
  6251  0B5C  0021               	movlb	1	; select bank1
  6252  0B5D  00E3               	movwf	??_main^(0+128)
  6253  0B5E  0863               	movf	??_main^(0+128),w
  6254  0B5F  00F2               	movwf	Insert@src
  6255  0B60  0022               	movlb	2	; select bank2
  6256  0B61  0841               	movf	(main@index+1)^(0+256),w
  6257  0B62  00F4               	movwf	Insert@index+1
  6258  0B63  0840               	movf	main@index^(0+256),w
  6259  0B64  00F3               	movwf	Insert@index
  6260  0B65  3046               	movlw	70
  6261  0B66  00F5               	movwf	Insert@destLimit
  6262  0B67  3000               	movlw	0
  6263  0B68  00F6               	movwf	Insert@destLimit+1
  6264  0B69  3195  2501  318A   	fcall	_Insert
  6265  0B6C  0871               	movf	?_Insert+1,w
  6266  0B6D  0022               	movlb	2	; select bank2
  6267  0B6E  00C1               	movwf	(main@index+1)^(0+256)
  6268  0B6F  0870               	movf	?_Insert,w
  6269  0B70  00C0               	movwf	main@index^(0+256)
  6270                           
  6271                           ;main.c: 704:             ClearString(convertedNumber);
  6272  0B71  3020               	movlw	low main@convertedNumber
  6273  0B72  00F5               	movwf	ClearString@str
  6274  0B73  3001               	movlw	high main@convertedNumber
  6275  0B74  00F6               	movwf	ClearString@str+1
  6276  0B75  3188  2002  318A   	fcall	_ClearString
  6277                           
  6278                           ;main.c: 706:             UIntToString(sensor_data.pressure, convertedNumber);
  6279  0B78  0022               	movlb	2	; select bank2
  6280  0B79  0837               	movf	(main@sensor_data+3)^(0+256),w
  6281  0B7A  0020               	movlb	0	; select bank0
  6282  0B7B  00AC               	movwf	UIntToString@n+3
  6283  0B7C  0022               	movlb	2	; select bank2
  6284  0B7D  0836               	movf	(main@sensor_data+2)^(0+256),w
  6285  0B7E  0020               	movlb	0	; select bank0
  6286  0B7F  00AB               	movwf	UIntToString@n+2
  6287  0B80  0022               	movlb	2	; select bank2
  6288  0B81  0835               	movf	(main@sensor_data+1)^(0+256),w
  6289  0B82  0020               	movlb	0	; select bank0
  6290  0B83  00AA               	movwf	UIntToString@n+1
  6291  0B84  0022               	movlb	2	; select bank2
  6292  0B85  0834               	movf	main@sensor_data^(0+256),w
  6293  0B86  0020               	movlb	0	; select bank0
  6294  0B87  00A9               	movwf	UIntToString@n
  6295  0B88  3020               	movlw	(low (main@convertedNumber| (0+256)))& (0+255)
  6296  0B89  0021               	movlb	1	; select bank1
  6297  0B8A  00E3               	movwf	??_main^(0+128)
  6298  0B8B  0863               	movf	??_main^(0+128),w
  6299  0B8C  0020               	movlb	0	; select bank0
  6300  0B8D  00AD               	movwf	UIntToString@dest
  6301  0B8E  3191  2188  318A   	fcall	_UIntToString
  6302                           
  6303                           ;main.c: 707:             index = InsertString(messages[1], convertedNumber, index, 70);
  6304  0B91  0022               	movlb	2	; select bank2
  6305  0B92  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6306  0B93  0020               	movlb	0	; select bank0
  6307  0B94  00A1               	movwf	InsertString@dest+1
  6308  0B95  0022               	movlb	2	; select bank2
  6309  0B96  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6310  0B97  0020               	movlb	0	; select bank0
  6311  0B98  00A0               	movwf	InsertString@dest
  6312  0B99  3020               	movlw	low main@convertedNumber
  6313  0B9A  00A2               	movwf	InsertString@src
  6314  0B9B  3001               	movlw	high main@convertedNumber
  6315  0B9C  00A3               	movwf	InsertString@src+1
  6316  0B9D  0022               	movlb	2	; select bank2
  6317  0B9E  0841               	movf	(main@index+1)^(0+256),w
  6318  0B9F  0020               	movlb	0	; select bank0
  6319  0BA0  00A5               	movwf	InsertString@index+1
  6320  0BA1  0022               	movlb	2	; select bank2
  6321  0BA2  0840               	movf	main@index^(0+256),w
  6322  0BA3  0020               	movlb	0	; select bank0
  6323  0BA4  00A4               	movwf	InsertString@index
  6324  0BA5  3046               	movlw	70
  6325  0BA6  00A6               	movwf	InsertString@destLimit
  6326  0BA7  3000               	movlw	0
  6327  0BA8  00A7               	movwf	InsertString@destLimit+1
  6328  0BA9  3190  2094  318A   	fcall	_InsertString
  6329  0BAC  0821               	movf	?_InsertString+1,w
  6330  0BAD  0022               	movlb	2	; select bank2
  6331  0BAE  00C1               	movwf	(main@index+1)^(0+256)
  6332  0BAF  0020               	movlb	0	; select bank0
  6333  0BB0  0820               	movf	?_InsertString,w
  6334  0BB1  0022               	movlb	2	; select bank2
  6335  0BB2  00C0               	movwf	main@index^(0+256)
  6336                           
  6337                           ;main.c: 708:             index = Insert(messages[1], ',', index, 70);
  6338  0BB3  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6339  0BB4  00F1               	movwf	Insert@dest+1
  6340  0BB5  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6341  0BB6  00F0               	movwf	Insert@dest
  6342  0BB7  302C               	movlw	44
  6343  0BB8  0021               	movlb	1	; select bank1
  6344  0BB9  00E3               	movwf	??_main^(0+128)
  6345  0BBA  0863               	movf	??_main^(0+128),w
  6346  0BBB  00F2               	movwf	Insert@src
  6347  0BBC  0022               	movlb	2	; select bank2
  6348  0BBD  0841               	movf	(main@index+1)^(0+256),w
  6349  0BBE  00F4               	movwf	Insert@index+1
  6350  0BBF  0840               	movf	main@index^(0+256),w
  6351  0BC0  00F3               	movwf	Insert@index
  6352  0BC1  3046               	movlw	70
  6353  0BC2  00F5               	movwf	Insert@destLimit
  6354  0BC3  3000               	movlw	0
  6355  0BC4  00F6               	movwf	Insert@destLimit+1
  6356  0BC5  3195  2501  318A   	fcall	_Insert
  6357  0BC8  0871               	movf	?_Insert+1,w
  6358  0BC9  0022               	movlb	2	; select bank2
  6359  0BCA  00C1               	movwf	(main@index+1)^(0+256)
  6360  0BCB  0870               	movf	?_Insert,w
  6361  0BCC  00C0               	movwf	main@index^(0+256)
  6362                           
  6363                           ;main.c: 709:             ClearString(convertedNumber);
  6364  0BCD  3020               	movlw	low main@convertedNumber
  6365  0BCE  00F5               	movwf	ClearString@str
  6366  0BCF  3001               	movlw	high main@convertedNumber
  6367  0BD0  00F6               	movwf	ClearString@str+1
  6368  0BD1  3188  2002  318A   	fcall	_ClearString
  6369                           
  6370                           ;main.c: 711:             UIntToString(sensor_data.humidity, convertedNumber);
  6371  0BD4  3008               	movlw	8
  6372  0BD5  3E34               	addlw	(low (main@sensor_data| (0+256)))& (0+255)
  6373  0BD6  0086               	movwf	6
  6374  0BD7  3001               	movlw	1	; select bank2/3
  6375  0BD8  0087               	movwf	7
  6376  0BD9  3F40               	moviw [0]fsr1
  6377  0BDA  0020               	movlb	0	; select bank0
  6378  0BDB  00A9               	movwf	UIntToString@n
  6379  0BDC  3F41               	moviw [1]fsr1
  6380  0BDD  00AA               	movwf	UIntToString@n+1
  6381  0BDE  3F42               	moviw [2]fsr1
  6382  0BDF  00AB               	movwf	UIntToString@n+2
  6383  0BE0  3F43               	moviw [3]fsr1
  6384  0BE1  00AC               	movwf	UIntToString@n+3
  6385  0BE2  3020               	movlw	(low (main@convertedNumber| (0+256)))& (0+255)
  6386  0BE3  0021               	movlb	1	; select bank1
  6387  0BE4  00E3               	movwf	??_main^(0+128)
  6388  0BE5  0863               	movf	??_main^(0+128),w
  6389  0BE6  0020               	movlb	0	; select bank0
  6390  0BE7  00AD               	movwf	UIntToString@dest
  6391  0BE8  3191  2188  318A   	fcall	_UIntToString
  6392                           
  6393                           ;main.c: 712:             index = InsertString(messages[1], convertedNumber, index, 70);
  6394  0BEB  0022               	movlb	2	; select bank2
  6395  0BEC  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6396  0BED  0020               	movlb	0	; select bank0
  6397  0BEE  00A1               	movwf	InsertString@dest+1
  6398  0BEF  0022               	movlb	2	; select bank2
  6399  0BF0  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6400  0BF1  0020               	movlb	0	; select bank0
  6401  0BF2  00A0               	movwf	InsertString@dest
  6402  0BF3  3020               	movlw	low main@convertedNumber
  6403  0BF4  00A2               	movwf	InsertString@src
  6404  0BF5  3001               	movlw	high main@convertedNumber
  6405  0BF6  00A3               	movwf	InsertString@src+1
  6406  0BF7  0022               	movlb	2	; select bank2
  6407  0BF8  0841               	movf	(main@index+1)^(0+256),w
  6408  0BF9  0020               	movlb	0	; select bank0
  6409  0BFA  00A5               	movwf	InsertString@index+1
  6410  0BFB  0022               	movlb	2	; select bank2
  6411  0BFC  0840               	movf	main@index^(0+256),w
  6412  0BFD  0020               	movlb	0	; select bank0
  6413  0BFE  00A4               	movwf	InsertString@index
  6414  0BFF  3046               	movlw	70
  6415  0C00  00A6               	movwf	InsertString@destLimit
  6416  0C01  3000               	movlw	0
  6417  0C02  00A7               	movwf	InsertString@destLimit+1
  6418  0C03  3190  2094  318A   	fcall	_InsertString
  6419  0C06  0821               	movf	?_InsertString+1,w
  6420  0C07  0022               	movlb	2	; select bank2
  6421  0C08  00C1               	movwf	(main@index+1)^(0+256)
  6422  0C09  0020               	movlb	0	; select bank0
  6423  0C0A  0820               	movf	?_InsertString,w
  6424  0C0B  0022               	movlb	2	; select bank2
  6425  0C0C  00C0               	movwf	main@index^(0+256)
  6426                           
  6427                           ;main.c: 714:             int end = index;
  6428  0C0D  0841               	movf	(main@index+1)^(0+256),w
  6429  0C0E  00B1               	movwf	(main@end+1)^(0+256)
  6430  0C0F  0840               	movf	main@index^(0+256),w
  6431  0C10  00B0               	movwf	main@end^(0+256)
  6432                           
  6433                           ;main.c: 717:             index = InsertString(messages[0], "TEST,", 0, 70);
  6434  0C11  085F               	movf	(_messages+1)^(0+256),w
  6435  0C12  0020               	movlb	0	; select bank0
  6436  0C13  00A1               	movwf	InsertString@dest+1
  6437  0C14  0022               	movlb	2	; select bank2
  6438  0C15  085E               	movf	_messages^(0+256),w
  6439  0C16  0020               	movlb	0	; select bank0
  6440  0C17  00A0               	movwf	InsertString@dest
  6441  0C18  3000               	movlw	low (STR_1| (0+32768))
  6442  0C19  00A2               	movwf	InsertString@src
  6443  0C1A  3098               	movlw	high (STR_1| (0+32768))
  6444  0C1B  00A3               	movwf	InsertString@src+1
  6445  0C1C  3000               	movlw	0
  6446  0C1D  00A4               	movwf	InsertString@index
  6447  0C1E  00A5               	movwf	InsertString@index+1
  6448  0C1F  3046               	movlw	70
  6449  0C20  00A6               	movwf	InsertString@destLimit
  6450  0C21  3000               	movlw	0
  6451  0C22  00A7               	movwf	InsertString@destLimit+1
  6452  0C23  3190  2094  318A   	fcall	_InsertString
  6453  0C26  0821               	movf	?_InsertString+1,w
  6454  0C27  0022               	movlb	2	; select bank2
  6455  0C28  00C1               	movwf	(main@index+1)^(0+256)
  6456  0C29  0020               	movlb	0	; select bank0
  6457  0C2A  0820               	movf	?_InsertString,w
  6458  0C2B  0022               	movlb	2	; select bank2
  6459  0C2C  00C0               	movwf	main@index^(0+256)
  6460                           
  6461                           ;main.c: 718:             ClearString(convertedNumber);
  6462  0C2D  3020               	movlw	low main@convertedNumber
  6463  0C2E  00F5               	movwf	ClearString@str
  6464  0C2F  3001               	movlw	high main@convertedNumber
  6465  0C30  00F6               	movwf	ClearString@str+1
  6466  0C31  3188  2002  318A   	fcall	_ClearString
  6467                           
  6468                           ;main.c: 719:             IntToString(id, convertedNumber);
  6469  0C34  0022               	movlb	2	; select bank2
  6470  0C35  0857               	movf	(_id+1)^(0+256),w
  6471  0C36  00FC               	movwf	IntToString@n+1
  6472  0C37  0856               	movf	_id^(0+256),w
  6473  0C38  00FB               	movwf	IntToString@n
  6474  0C39  3020               	movlw	(low (main@convertedNumber| (0+256)))& (0+255)
  6475  0C3A  0021               	movlb	1	; select bank1
  6476  0C3B  00E3               	movwf	??_main^(0+128)
  6477  0C3C  0863               	movf	??_main^(0+128),w
  6478  0C3D  00FD               	movwf	IntToString@dest
  6479  0C3E  3193  23C3  318A   	fcall	_IntToString
  6480                           
  6481                           ;main.c: 720:             index = InsertString(messages[0], convertedNumber, index, 70);
  6482  0C41  0022               	movlb	2	; select bank2
  6483  0C42  085F               	movf	(_messages+1)^(0+256),w
  6484  0C43  0020               	movlb	0	; select bank0
  6485  0C44  00A1               	movwf	InsertString@dest+1
  6486  0C45  0022               	movlb	2	; select bank2
  6487  0C46  085E               	movf	_messages^(0+256),w
  6488  0C47  0020               	movlb	0	; select bank0
  6489  0C48  00A0               	movwf	InsertString@dest
  6490  0C49  3020               	movlw	low main@convertedNumber
  6491  0C4A  00A2               	movwf	InsertString@src
  6492  0C4B  3001               	movlw	high main@convertedNumber
  6493  0C4C  00A3               	movwf	InsertString@src+1
  6494  0C4D  0022               	movlb	2	; select bank2
  6495  0C4E  0841               	movf	(main@index+1)^(0+256),w
  6496  0C4F  0020               	movlb	0	; select bank0
  6497  0C50  00A5               	movwf	InsertString@index+1
  6498  0C51  0022               	movlb	2	; select bank2
  6499  0C52  0840               	movf	main@index^(0+256),w
  6500  0C53  0020               	movlb	0	; select bank0
  6501  0C54  00A4               	movwf	InsertString@index
  6502  0C55  3046               	movlw	70
  6503  0C56  00A6               	movwf	InsertString@destLimit
  6504  0C57  3000               	movlw	0
  6505  0C58  00A7               	movwf	InsertString@destLimit+1
  6506  0C59  3190  2094  318A   	fcall	_InsertString
  6507  0C5C  0821               	movf	?_InsertString+1,w
  6508  0C5D  0022               	movlb	2	; select bank2
  6509  0C5E  00C1               	movwf	(main@index+1)^(0+256)
  6510  0C5F  0020               	movlb	0	; select bank0
  6511  0C60  0820               	movf	?_InsertString,w
  6512  0C61  0022               	movlb	2	; select bank2
  6513  0C62  00C0               	movwf	main@index^(0+256)
  6514                           
  6515                           ;main.c: 721:             Insert(messages[0], ',', index, 70);
  6516  0C63  085F               	movf	(_messages+1)^(0+256),w
  6517  0C64  00F1               	movwf	Insert@dest+1
  6518  0C65  085E               	movf	_messages^(0+256),w
  6519  0C66  00F0               	movwf	Insert@dest
  6520  0C67  302C               	movlw	44
  6521  0C68  0021               	movlb	1	; select bank1
  6522  0C69  00E3               	movwf	??_main^(0+128)
  6523  0C6A  0863               	movf	??_main^(0+128),w
  6524  0C6B  00F2               	movwf	Insert@src
  6525  0C6C  0022               	movlb	2	; select bank2
  6526  0C6D  0841               	movf	(main@index+1)^(0+256),w
  6527  0C6E  00F4               	movwf	Insert@index+1
  6528  0C6F  0840               	movf	main@index^(0+256),w
  6529  0C70  00F3               	movwf	Insert@index
  6530  0C71  3046               	movlw	70
  6531  0C72  00F5               	movwf	Insert@destLimit
  6532  0C73  3000               	movlw	0
  6533  0C74  00F6               	movwf	Insert@destLimit+1
  6534  0C75  3195  2501  318A   	fcall	_Insert
  6535                           
  6536                           ;main.c: 723:             UIntToHexString(crc16(messages, 2), checksum);
  6537  0C78  3002               	movlw	2
  6538  0C79  0020               	movlb	0	; select bank0
  6539  0C7A  00A1               	movwf	crc16@segments
  6540  0C7B  3000               	movlw	0
  6541  0C7C  00A2               	movwf	crc16@segments+1
  6542  0C7D  305E               	movlw	(low (_messages| (0+256)))& (0+255)
  6543  0C7E  319F  27B8  318A   	fcall	_crc16
  6544  0C81  0821               	movf	?_crc16,w
  6545  0C82  0021               	movlb	1	; select bank1
  6546  0C83  00E3               	movwf	??_main^(0+128)
  6547  0C84  0020               	movlb	0	; select bank0
  6548  0C85  0822               	movf	?_crc16+1,w
  6549  0C86  0021               	movlb	1	; select bank1
  6550  0C87  00E4               	movwf	(??_main^(0+128)+1)
  6551  0C88  01E5               	clrf	(??_main^(0+128)+2)
  6552  0C89  01E6               	clrf	(??_main^(0+128)+3)
  6553  0C8A  0866               	movf	(??_main+3)^(0+128),w
  6554  0C8B  0020               	movlb	0	; select bank0
  6555  0C8C  00AD               	movwf	UIntToHexString@n+3
  6556  0C8D  0021               	movlb	1	; select bank1
  6557  0C8E  0865               	movf	(??_main+2)^(0+128),w
  6558  0C8F  0020               	movlb	0	; select bank0
  6559  0C90  00AC               	movwf	UIntToHexString@n+2
  6560  0C91  0021               	movlb	1	; select bank1
  6561  0C92  0864               	movf	(??_main+1)^(0+128),w
  6562  0C93  0020               	movlb	0	; select bank0
  6563  0C94  00AB               	movwf	UIntToHexString@n+1
  6564  0C95  0021               	movlb	1	; select bank1
  6565  0C96  0863               	movf	??_main^(0+128),w
  6566  0C97  0020               	movlb	0	; select bank0
  6567  0C98  00AA               	movwf	UIntToHexString@n
  6568  0C99  3058               	movlw	(low (_checksum| (0+256)))& (0+255)
  6569  0C9A  0021               	movlb	1	; select bank1
  6570  0C9B  00E7               	movwf	(??_main+4)^(0+128)
  6571  0C9C  0867               	movf	(??_main+4)^(0+128),w
  6572  0C9D  0020               	movlb	0	; select bank0
  6573  0C9E  00AE               	movwf	UIntToHexString@dest
  6574  0C9F  3195  25E4  318A   	fcall	_UIntToHexString
  6575                           
  6576                           ;main.c: 726:             InsertString(messages[0], "$$", 0, 70);
  6577  0CA2  0022               	movlb	2	; select bank2
  6578  0CA3  085F               	movf	(_messages+1)^(0+256),w
  6579  0CA4  0020               	movlb	0	; select bank0
  6580  0CA5  00A1               	movwf	InsertString@dest+1
  6581  0CA6  0022               	movlb	2	; select bank2
  6582  0CA7  085E               	movf	_messages^(0+256),w
  6583  0CA8  0020               	movlb	0	; select bank0
  6584  0CA9  00A0               	movwf	InsertString@dest
  6585  0CAA  3006               	movlw	low (STR_2| (0+32768))
  6586  0CAB  00A2               	movwf	InsertString@src
  6587  0CAC  3098               	movlw	high (STR_2| (0+32768))
  6588  0CAD  00A3               	movwf	InsertString@src+1
  6589  0CAE  3000               	movlw	0
  6590  0CAF  00A4               	movwf	InsertString@index
  6591  0CB0  00A5               	movwf	InsertString@index+1
  6592  0CB1  3046               	movlw	70
  6593  0CB2  00A6               	movwf	InsertString@destLimit
  6594  0CB3  3000               	movlw	0
  6595  0CB4  00A7               	movwf	InsertString@destLimit+1
  6596  0CB5  3190  2094  318A   	fcall	_InsertString
  6597                           
  6598                           ;main.c: 728:             index = Insert(messages[1], '*', end, 70);
  6599  0CB8  0022               	movlb	2	; select bank2
  6600  0CB9  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6601  0CBA  00F1               	movwf	Insert@dest+1
  6602  0CBB  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6603  0CBC  00F0               	movwf	Insert@dest
  6604  0CBD  302A               	movlw	42
  6605  0CBE  0021               	movlb	1	; select bank1
  6606  0CBF  00E3               	movwf	??_main^(0+128)
  6607  0CC0  0863               	movf	??_main^(0+128),w
  6608  0CC1  00F2               	movwf	Insert@src
  6609  0CC2  0022               	movlb	2	; select bank2
  6610  0CC3  0831               	movf	(main@end+1)^(0+256),w
  6611  0CC4  00F4               	movwf	Insert@index+1
  6612  0CC5  0830               	movf	main@end^(0+256),w
  6613  0CC6  00F3               	movwf	Insert@index
  6614  0CC7  3046               	movlw	70
  6615  0CC8  00F5               	movwf	Insert@destLimit
  6616  0CC9  3000               	movlw	0
  6617  0CCA  00F6               	movwf	Insert@destLimit+1
  6618  0CCB  3195  2501  318A   	fcall	_Insert
  6619  0CCE  0871               	movf	?_Insert+1,w
  6620  0CCF  0022               	movlb	2	; select bank2
  6621  0CD0  00C1               	movwf	(main@index+1)^(0+256)
  6622  0CD1  0870               	movf	?_Insert,w
  6623  0CD2  00C0               	movwf	main@index^(0+256)
  6624                           
  6625                           ;main.c: 729:             index = InsertString(messages[1], checksum, index, 70);
  6626  0CD3  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6627  0CD4  0020               	movlb	0	; select bank0
  6628  0CD5  00A1               	movwf	InsertString@dest+1
  6629  0CD6  0022               	movlb	2	; select bank2
  6630  0CD7  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6631  0CD8  0020               	movlb	0	; select bank0
  6632  0CD9  00A0               	movwf	InsertString@dest
  6633  0CDA  3058               	movlw	low _checksum
  6634  0CDB  00A2               	movwf	InsertString@src
  6635  0CDC  3001               	movlw	high _checksum
  6636  0CDD  00A3               	movwf	InsertString@src+1
  6637  0CDE  0022               	movlb	2	; select bank2
  6638  0CDF  0841               	movf	(main@index+1)^(0+256),w
  6639  0CE0  0020               	movlb	0	; select bank0
  6640  0CE1  00A5               	movwf	InsertString@index+1
  6641  0CE2  0022               	movlb	2	; select bank2
  6642  0CE3  0840               	movf	main@index^(0+256),w
  6643  0CE4  0020               	movlb	0	; select bank0
  6644  0CE5  00A4               	movwf	InsertString@index
  6645  0CE6  3046               	movlw	70
  6646  0CE7  00A6               	movwf	InsertString@destLimit
  6647  0CE8  3000               	movlw	0
  6648  0CE9  00A7               	movwf	InsertString@destLimit+1
  6649  0CEA  3190  2094  318A   	fcall	_InsertString
  6650  0CED  0821               	movf	?_InsertString+1,w
  6651  0CEE  0022               	movlb	2	; select bank2
  6652  0CEF  00C1               	movwf	(main@index+1)^(0+256)
  6653  0CF0  0020               	movlb	0	; select bank0
  6654  0CF1  0820               	movf	?_InsertString,w
  6655  0CF2  0022               	movlb	2	; select bank2
  6656  0CF3  00C0               	movwf	main@index^(0+256)
  6657                           
  6658                           ;main.c: 730:             index = Insert(messages[1], '\n', index, 70);
  6659  0CF4  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6660  0CF5  00F1               	movwf	Insert@dest+1
  6661  0CF6  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6662  0CF7  00F0               	movwf	Insert@dest
  6663  0CF8  300A               	movlw	10
  6664  0CF9  0021               	movlb	1	; select bank1
  6665  0CFA  00E3               	movwf	??_main^(0+128)
  6666  0CFB  0863               	movf	??_main^(0+128),w
  6667  0CFC  00F2               	movwf	Insert@src
  6668  0CFD  0022               	movlb	2	; select bank2
  6669  0CFE  0841               	movf	(main@index+1)^(0+256),w
  6670  0CFF  00F4               	movwf	Insert@index+1
  6671  0D00  0840               	movf	main@index^(0+256),w
  6672  0D01  00F3               	movwf	Insert@index
  6673  0D02  3046               	movlw	70
  6674  0D03  00F5               	movwf	Insert@destLimit
  6675  0D04  3000               	movlw	0
  6676  0D05  00F6               	movwf	Insert@destLimit+1
  6677  0D06  3195  2501  318A   	fcall	_Insert
  6678  0D09  0871               	movf	?_Insert+1,w
  6679  0D0A  0022               	movlb	2	; select bank2
  6680  0D0B  00C1               	movwf	(main@index+1)^(0+256)
  6681  0D0C  0870               	movf	?_Insert,w
  6682  0D0D  00C0               	movwf	main@index^(0+256)
  6683                           
  6684                           ;main.c: 732:             id++;
  6685  0D0E  3001               	movlw	1
  6686  0D0F  07D6               	addwf	_id^(0+256),f
  6687  0D10  3000               	movlw	0
  6688  0D11  3DD7               	addwfc	(_id+1)^(0+256),f
  6689  0D12  150C               	bsf	12,2	;volatile
  6690                           
  6691                           ;main.c: 735:             TransmitString(messages[0]);
  6692  0D13  085F               	movf	(_messages+1)^(0+256),w
  6693  0D14  00F7               	movwf	TransmitString@message+1
  6694  0D15  085E               	movf	_messages^(0+256),w
  6695  0D16  00F6               	movwf	TransmitString@message
  6696  0D17  319B  2364  318A   	fcall	_TransmitString
  6697                           
  6698                           ;main.c: 736:             TransmitString(messages[1]);
  6699  0D1A  0022               	movlb	2	; select bank2
  6700  0D1B  0861               	movf	((low ((_messages| (0+256)+2))+1))^0,w
  6701  0D1C  00F7               	movwf	TransmitString@message+1
  6702  0D1D  0860               	movf	(low ((_messages| (0+256)+2)))^0,w
  6703  0D1E  00F6               	movwf	TransmitString@message
  6704  0D1F  319B  2364  318A   	fcall	_TransmitString
  6705  0D22  0022               	movlb	2	; select bank2
  6706  0D23  110C               	bcf	12,2	;volatile
  6707                           
  6708                           ;main.c: 746:         for (int i = 0; i < 1000; i++)
  6709  0D24  01B2               	clrf	main@i^(0+256)
  6710  0D25  01B3               	clrf	(main@i+1)^(0+256)
  6711  0D26                     l4750:	
  6712                           
  6713                           ;main.c: 747:         {;main.c: 748:             _delay((unsigned long)((5)*(4000000/400
      +                          0.0)));
  6714  0D26  3007               	movlw	7
  6715  0D27  0021               	movlb	1	; select bank1
  6716  0D28  00E3               	movwf	??_main^(0+128)
  6717  0D29  307D               	movlw	125
  6718  0D2A                     u5267:	
  6719  0D2A  0B89               	decfsz	9,f
  6720  0D2B  2D2A               	goto	u5267
  6721  0D2C  0BE3               	decfsz	??_main^(0+128),f
  6722  0D2D  2D2A               	goto	u5267
  6723                           
  6724                           ;main.c: 749:         }
  6725  0D2E  3001               	movlw	1
  6726  0D2F  0022               	movlb	2	; select bank2
  6727  0D30  07B2               	addwf	main@i^(0+256),f
  6728  0D31  3000               	movlw	0
  6729  0D32  3DB3               	addwfc	(main@i+1)^(0+256),f
  6730  0D33  0833               	movf	(main@i+1)^(0+256),w
  6731  0D34  3A80               	xorlw	128
  6732  0D35  0021               	movlb	1	; select bank1
  6733  0D36  00E3               	movwf	??_main^(0+128)
  6734  0D37  3083               	movlw	131
  6735  0D38  0263               	subwf	??_main^(0+128),w
  6736  0D39  1D03               	skipz
  6737  0D3A  2D3E               	goto	u5255
  6738  0D3B  30E8               	movlw	232
  6739  0D3C  0022               	movlb	2	; select bank2
  6740  0D3D  0232               	subwf	main@i^(0+256),w
  6741  0D3E                     u5255:	
  6742  0D3E  1803               	btfsc	3,0
  6743  0D3F  2AF1               	goto	l4682
  6744  0D40  2D26               	goto	l4750
  6745  0D41                     __end_of_main:	
  6746                           
  6747                           	psect	text1
  6748  1FB8                     __ptext1:	
  6749 ;; *************** function _crc16 *****************
  6750 ;; Defined at:
  6751 ;;		line 21 in file "rtty.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  data            1    wreg     PTR PTR unsigned char 
  6754 ;;		 -> messages(4), 
  6755 ;;  segments        2    1[BANK0 ] int 
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;  data            1    5[BANK0 ] PTR PTR unsigned char 
  6758 ;;		 -> messages(4), 
  6759 ;;  i               2    8[BANK0 ] int 
  6760 ;;  crc             2    6[BANK0 ] unsigned short 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  2    1[BANK0 ] unsigned short 
  6763 ;; Registers used:
  6764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 1F/0
  6767 ;;		On exit  : 1F/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6770 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6773 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6774 ;;Total ram usage:        9 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    4
  6777 ;; This function calls:
  6778 ;;		_crc16_update
  6779 ;;		_strlen
  6780 ;; This function is called by:
  6781 ;;		_main
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           
  6786                           ;psect for function _crc16
  6787  1FB8                     _crc16:	
  6788                           
  6789                           ;incstack = 0
  6790                           ; Regs used in _crc16: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6791                           ;crc16@data stored from wreg
  6792  1FB8  00A5               	movwf	crc16@data
  6793                           
  6794                           ;rtty.c: 21: uint16_t crc16(char** data, int segments);rtty.c: 22: {;rtty.c: 23:     uin
      +                          t16_t crc = 0xFFFF;
  6795  1FB9  30FF               	movlw	255
  6796  1FBA  00A6               	movwf	crc16@crc
  6797  1FBB  30FF               	movlw	255
  6798  1FBC  00A7               	movwf	crc16@crc+1
  6799                           
  6800                           ;rtty.c: 24:     for (int i = 0; i < segments; i++)
  6801  1FBD  01A8               	clrf	crc16@i
  6802  1FBE  01A9               	clrf	crc16@i+1
  6803  1FBF                     l4658:	
  6804  1FBF  0829               	movf	crc16@i+1,w
  6805  1FC0  3A80               	xorlw	128
  6806  1FC1  00A3               	movwf	??_crc16
  6807  1FC2  0822               	movf	crc16@segments+1,w
  6808  1FC3  3A80               	xorlw	128
  6809  1FC4  0223               	subwf	??_crc16,w
  6810  1FC5  1D03               	skipz
  6811  1FC6  2FC9               	goto	u5225
  6812  1FC7  0821               	movf	crc16@segments,w
  6813  1FC8  0228               	subwf	crc16@i,w
  6814  1FC9                     u5225:	
  6815  1FC9  1803               	btfsc	3,0
  6816  1FCA  2FFA               	goto	l4660
  6817                           
  6818                           ;rtty.c: 25:     {;rtty.c: 26:         crc = crc16_update(data[i], strlen(data[i]), crc)
      +                          ;
  6819  1FCB  0020               	movlb	0	; select bank0
  6820  1FCC  3528               	lslf	crc16@i,w
  6821  1FCD  0725               	addwf	crc16@data,w
  6822  1FCE  00A3               	movwf	??_crc16
  6823  1FCF  0823               	movf	??_crc16,w
  6824  1FD0  0086               	movwf	6
  6825  1FD1  3001               	movlw	1	; select bank2/3
  6826  1FD2  0087               	movwf	7
  6827  1FD3  3F40               	moviw [0]fsr1
  6828  1FD4  00F5               	movwf	crc16_update@pData
  6829  1FD5  3F41               	moviw [1]fsr1
  6830  1FD6  00F6               	movwf	crc16_update@pData+1
  6831  1FD7  3528               	lslf	crc16@i,w
  6832  1FD8  0725               	addwf	crc16@data,w
  6833  1FD9  00A4               	movwf	??_crc16+1
  6834  1FDA  0824               	movf	??_crc16+1,w
  6835  1FDB  0086               	movwf	6
  6836  1FDC  3001               	movlw	1	; select bank2/3
  6837  1FDD  0087               	movwf	7
  6838  1FDE  3F40               	moviw [0]fsr1
  6839  1FDF  00F0               	movwf	strlen@s
  6840  1FE0  3F41               	moviw [1]fsr1
  6841  1FE1  00F1               	movwf	strlen@s+1
  6842  1FE2  319A  2256  319F   	fcall	_strlen
  6843  1FE5  0871               	movf	?_strlen+1,w
  6844  1FE6  00F8               	movwf	crc16_update@length+1
  6845  1FE7  0870               	movf	?_strlen,w
  6846  1FE8  00F7               	movwf	crc16_update@length
  6847  1FE9  0020               	movlb	0	; select bank0
  6848  1FEA  0827               	movf	crc16@crc+1,w
  6849  1FEB  00FA               	movwf	crc16_update@wCrc+1
  6850  1FEC  0826               	movf	crc16@crc,w
  6851  1FED  00F9               	movwf	crc16_update@wCrc
  6852  1FEE  319D  25A6  319F   	fcall	_crc16_update
  6853  1FF1  0876               	movf	?_crc16_update+1,w
  6854  1FF2  00A7               	movwf	crc16@crc+1
  6855  1FF3  0875               	movf	?_crc16_update,w
  6856  1FF4  00A6               	movwf	crc16@crc
  6857                           
  6858                           ;rtty.c: 27:     }
  6859  1FF5  3001               	movlw	1
  6860  1FF6  07A8               	addwf	crc16@i,f
  6861  1FF7  3000               	movlw	0
  6862  1FF8  3DA9               	addwfc	crc16@i+1,f
  6863  1FF9  2FBF               	goto	l4658
  6864  1FFA                     l4660:	
  6865                           
  6866                           ;rtty.c: 28:     return crc & 0xFFFF;
  6867  1FFA  0020               	movlb	0	; select bank0
  6868  1FFB  0827               	movf	crc16@crc+1,w
  6869  1FFC  00A2               	movwf	?_crc16+1
  6870  1FFD  0826               	movf	crc16@crc,w
  6871  1FFE  00A1               	movwf	?_crc16
  6872  1FFF  0008               	return
  6873  2000                     __end_of_crc16:	
  6874                           
  6875                           	psect	text2
  6876  1DA6                     __ptext2:	
  6877 ;; *************** function _crc16_update *****************
  6878 ;; Defined at:
  6879 ;;		line 10 in file "rtty.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;  pData           2    5[COMMON] PTR unsigned char 
  6882 ;;		 -> message_end(73), message_start(70), 
  6883 ;;  length          2    7[COMMON] int 
  6884 ;;  wCrc            2    9[COMMON] unsigned short 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  i               1    0[BANK0 ] unsigned char 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  2    5[COMMON] unsigned short 
  6889 ;; Registers used:
  6890 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6891 ;; Tracked objects:
  6892 ;;		On entry : 1F/0
  6893 ;;		On exit  : 1F/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6896 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;      Totals:         9       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;Total ram usage:       10 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    3
  6903 ;; This function calls:
  6904 ;;		Nothing
  6905 ;; This function is called by:
  6906 ;;		_crc16
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           
  6911                           ;psect for function _crc16_update
  6912  1DA6                     _crc16_update:	
  6913  1DA6                     l4556:	
  6914                           ;rtty.c: 10: uint16_t crc16_update(char* pData, int length, uint16_t wCrc);rtty.c: 11: {
      +                          ;rtty.c: 12:     uint8_t i;;rtty.c: 13:     while (length--) {
  6915                           
  6916                           ;incstack = 0
  6917                           ; Regs used in _crc16_update: [wreg+fsr1l+fsr1h+status,2+status,0]
  6918                           
  6919                           
  6920                           ;rtty.c: 13:     while (length--) {
  6921  1DA6  30FF               	movlw	255
  6922  1DA7  07F7               	addwf	crc16_update@length,f
  6923  1DA8  30FF               	movlw	255
  6924  1DA9  3DF8               	addwfc	crc16_update@length+1,f
  6925  1DAA  0A77               	incf	crc16_update@length,w
  6926  1DAB  1903               	btfsc	3,2
  6927  1DAC  0A78               	incf	crc16_update@length+1,w
  6928  1DAD  1903               	btfsc	3,2
  6929  1DAE  2DDD               	goto	l4558
  6930                           
  6931                           ;rtty.c: 14:         wCrc ^= *(unsigned char *)pData++ << 8;
  6932  1DAF  0875               	movf	crc16_update@pData,w
  6933  1DB0  0086               	movwf	6
  6934  1DB1  0876               	movf	crc16_update@pData+1,w
  6935  1DB2  0087               	movwf	7
  6936  1DB3  0801               	movf	1,w
  6937  1DB4  00FB               	movwf	??_crc16_update
  6938  1DB5  01FC               	clrf	??_crc16_update+1
  6939  1DB6  087B               	movf	??_crc16_update,w
  6940  1DB7  00FC               	movwf	??_crc16_update+1
  6941  1DB8  01FB               	clrf	??_crc16_update
  6942  1DB9  087B               	movf	??_crc16_update,w
  6943  1DBA  06F9               	xorwf	crc16_update@wCrc,f
  6944  1DBB  087C               	movf	??_crc16_update+1,w
  6945  1DBC  06FA               	xorwf	crc16_update@wCrc+1,f
  6946  1DBD  3001               	movlw	1
  6947  1DBE  07F5               	addwf	crc16_update@pData,f
  6948  1DBF  3000               	movlw	0
  6949  1DC0  3DF6               	addwfc	crc16_update@pData+1,f
  6950                           
  6951                           ;rtty.c: 15:         for (i=0; i < 8; i++)
  6952  1DC1  01A0               	clrf	crc16_update@i
  6953  1DC2                     l685:	
  6954                           
  6955                           ;rtty.c: 16:             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
  6956  1DC2  1BFA               	btfsc	crc16_update@wCrc+1,7
  6957  1DC3  2DC8               	goto	l4552
  6958  1DC4  3579               	lslf	crc16_update@wCrc,w
  6959  1DC5  00F9               	movwf	crc16_update@wCrc
  6960  1DC6  0D7A               	rlf	crc16_update@wCrc+1,w
  6961  1DC7  2DD3               	goto	L1
  6962  1DC8                     l4552:	
  6963  1DC8  087A               	movf	crc16_update@wCrc+1,w
  6964  1DC9  00FC               	movwf	??_crc16_update+1
  6965  1DCA  0879               	movf	crc16_update@wCrc,w
  6966  1DCB  00FB               	movwf	??_crc16_update
  6967  1DCC  35FB               	lslf	??_crc16_update,f
  6968  1DCD  0DFC               	rlf	??_crc16_update+1,f
  6969  1DCE  3021               	movlw	33
  6970  1DCF  067B               	xorwf	??_crc16_update,w
  6971  1DD0  00F9               	movwf	crc16_update@wCrc
  6972  1DD1  3010               	movlw	16
  6973  1DD2  067C               	xorwf	??_crc16_update+1,w
  6974  1DD3                     L1:	
  6975  1DD3  00FA               	movwf	crc16_update@wCrc+1
  6976  1DD4  3001               	movlw	1
  6977  1DD5  00FB               	movwf	??_crc16_update
  6978  1DD6  087B               	movf	??_crc16_update,w
  6979  1DD7  07A0               	addwf	crc16_update@i,f
  6980  1DD8  3008               	movlw	8
  6981  1DD9  0220               	subwf	crc16_update@i,w
  6982  1DDA  1803               	btfsc	3,0
  6983  1DDB  2DA6               	goto	l4556
  6984  1DDC  2DC2               	goto	l685
  6985  1DDD                     l4558:	
  6986                           
  6987                           ;rtty.c: 18:     return wCrc;
  6988  1DDD  087A               	movf	crc16_update@wCrc+1,w
  6989  1DDE  00F6               	movwf	?_crc16_update+1
  6990  1DDF  0879               	movf	crc16_update@wCrc,w
  6991  1DE0  00F5               	movwf	?_crc16_update
  6992  1DE1  0008               	return
  6993  1DE2                     __end_of_crc16_update:	
  6994                           
  6995                           	psect	text3
  6996  1233                     __ptext3:	
  6997 ;; *************** function _bme280_get_sensor_data *****************
  6998 ;; Defined at:
  6999 ;;		line 660 in file "BME280_driver/bme280.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  sensor_comp     1    wreg     unsigned char 
  7002 ;;  comp_data       1   65[BANK0 ] PTR struct bme280_data
  7003 ;;		 -> main@sensor_data(12), 
  7004 ;;  dev             1   66[BANK0 ] PTR struct bme280_dev
  7005 ;;		 -> EnvSensor(51), 
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  sensor_comp     1   53[BANK1 ] unsigned char 
  7008 ;;  uncomp_data    12   55[BANK1 ] struct bme280_uncomp_dat
  7009 ;;  reg_data        8   45[BANK1 ] unsigned char [8]
  7010 ;;  rslt            1   54[BANK1 ] char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      char 
  7013 ;; Registers used:
  7014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 1F/0
  7017 ;;		On exit  : 1E/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7020 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7021 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  7022 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Totals:         0       5      22       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;Total ram usage:       27 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:   10
  7027 ;; This function calls:
  7028 ;;		_bme280_compensate_data
  7029 ;;		_bme280_get_regs
  7030 ;;		_bme280_parse_sensor_data
  7031 ;;		_null_ptr_check
  7032 ;; This function is called by:
  7033 ;;		_main
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           
  7038                           ;psect for function _bme280_get_sensor_data
  7039  1233                     _bme280_get_sensor_data:	
  7040                           
  7041                           ;incstack = 0
  7042                           ; Regs used in _bme280_get_sensor_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7043                           ;bme280_get_sensor_data@sensor_comp stored from wreg
  7044  1233  0021               	movlb	1	; select bank1
  7045  1234  00D5               	movwf	bme280_get_sensor_data@sensor_comp^(0+128)
  7046                           
  7047                           ;BME280_driver/bme280.c: 660: int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct 
      +                          bme280_data *comp_data, struct bme280_dev *dev);BME280_driver/bme280.c: 661: {;BME280_dr
      +                          iver/bme280.c: 662:     int8_t rslt;;BME280_driver/bme280.c: 667:     uint8_t reg_data[8
      +                          ] = { 0 };
  7048  1235  30CD               	movlw	low bme280_get_sensor_data@reg_data
  7049  1236  0086               	movwf	6
  7050  1237  3000               	movlw	high bme280_get_sensor_data@reg_data
  7051  1238  0087               	movwf	7
  7052  1239  3008               	movlw	8
  7053  123A  0020               	movlb	0	; select bank0
  7054  123B  00E3               	movwf	??_bme280_get_sensor_data
  7055  123C  3000               	movlw	0
  7056  123D                     u5120:	
  7057  123D  001E               	movwi fsr1++
  7058  123E  0BE3               	decfsz	??_bme280_get_sensor_data,f
  7059  123F  2A3D               	goto	u5120
  7060                           
  7061                           ;BME280_driver/bme280.c: 668:     struct bme280_uncomp_data uncomp_data = { 0 };
  7062  1240  3042               	movlw	low bme280_get_sensor_data@F273
  7063  1241  0086               	movwf	6
  7064  1242  3001               	movlw	high bme280_get_sensor_data@F273
  7065  1243  0087               	movwf	7
  7066  1244  30D7               	movlw	low bme280_get_sensor_data@uncomp_data
  7067  1245  0084               	movwf	4
  7068  1246  3000               	movlw	high bme280_get_sensor_data@uncomp_data
  7069  1247  0085               	movwf	5
  7070  1248  300C               	movlw	12
  7071  1249  00E3               	movwf	??_bme280_get_sensor_data
  7072  124A                     u5130:	
  7073  124A  0016               	moviw fsr1++
  7074  124B  001A               	movwi fsr0++
  7075  124C  0BE3               	decfsz	??_bme280_get_sensor_data,f
  7076  124D  2A4A               	goto	u5130
  7077                           
  7078                           ;BME280_driver/bme280.c: 671:     rslt = null_ptr_check(dev);
  7079  124E  0862               	movf	bme280_get_sensor_data@dev,w
  7080  124F  319B  2317  3192   	fcall	_null_ptr_check
  7081  1252  0020               	movlb	0	; select bank0
  7082  1253  00E3               	movwf	??_bme280_get_sensor_data
  7083  1254  0863               	movf	??_bme280_get_sensor_data,w
  7084  1255  0021               	movlb	1	; select bank1
  7085  1256  00D6               	movwf	bme280_get_sensor_data@rslt^(0+128)
  7086                           
  7087                           ;BME280_driver/bme280.c: 672:     if ((rslt == 0) && (comp_data != ((void*)0)))
  7088  1257  0856               	movf	bme280_get_sensor_data@rslt^(0+128),w
  7089  1258  1D03               	btfss	3,2
  7090  1259  0008               	return
  7091  125A  0020               	movlb	0	; select bank0
  7092  125B  0861               	movf	bme280_get_sensor_data@comp_data,w
  7093  125C  1903               	btfsc	3,2
  7094  125D  0008               	return
  7095                           
  7096                           ;BME280_driver/bme280.c: 673:     {;BME280_driver/bme280.c: 675:         rslt = bme280_g
      +                          et_regs(0xF7, reg_data, 8, dev);
  7097  125E  30CD               	movlw	(low (bme280_get_sensor_data@reg_data| 0))& (0+255)
  7098  125F  00E3               	movwf	??_bme280_get_sensor_data
  7099  1260  0863               	movf	??_bme280_get_sensor_data,w
  7100  1261  00BB               	movwf	bme280_get_regs@reg_data
  7101  1262  3008               	movlw	8
  7102  1263  00BC               	movwf	bme280_get_regs@len
  7103  1264  3000               	movlw	0
  7104  1265  00BD               	movwf	bme280_get_regs@len+1
  7105  1266  0862               	movf	bme280_get_sensor_data@dev,w
  7106  1267  00E4               	movwf	??_bme280_get_sensor_data+1
  7107  1268  0864               	movf	??_bme280_get_sensor_data+1,w
  7108  1269  00BE               	movwf	bme280_get_regs@dev
  7109  126A  30F7               	movlw	247
  7110  126B  319E  2662  3192   	fcall	_bme280_get_regs
  7111  126E  00E5               	movwf	??_bme280_get_sensor_data+2
  7112  126F  0865               	movf	??_bme280_get_sensor_data+2,w
  7113  1270  0021               	movlb	1	; select bank1
  7114  1271  00D6               	movwf	bme280_get_sensor_data@rslt^(0+128)
  7115                           
  7116                           ;BME280_driver/bme280.c: 676:         if (rslt == 0)
  7117  1272  0856               	movf	bme280_get_sensor_data@rslt^(0+128),w
  7118  1273  1D03               	btfss	3,2
  7119  1274  0008               	return
  7120                           
  7121                           ;BME280_driver/bme280.c: 677:         {;BME280_driver/bme280.c: 679:             bme280_
      +                          parse_sensor_data(reg_data, &uncomp_data);
  7122  1275  30D7               	movlw	(low (bme280_get_sensor_data@uncomp_data| 0))& (0+255)
  7123  1276  0020               	movlb	0	; select bank0
  7124  1277  00E3               	movwf	??_bme280_get_sensor_data
  7125  1278  0863               	movf	??_bme280_get_sensor_data,w
  7126  1279  00F0               	movwf	bme280_parse_sensor_data@uncomp_data
  7127  127A  30CD               	movlw	(low (bme280_get_sensor_data@reg_data| 0))& (0+255)
  7128  127B  3189  21BA  3192   	fcall	_bme280_parse_sensor_data
  7129  127E  30D7               	movlw	(low (bme280_get_sensor_data@uncomp_data| 0))& (0+255)
  7130  127F  00E3               	movwf	??_bme280_get_sensor_data
  7131  1280  0863               	movf	??_bme280_get_sensor_data,w
  7132  1281  00DB               	movwf	bme280_compensate_data@uncomp_data
  7133  1282  0861               	movf	bme280_get_sensor_data@comp_data,w
  7134  1283  00E4               	movwf	??_bme280_get_sensor_data+1
  7135  1284  0864               	movf	??_bme280_get_sensor_data+1,w
  7136  1285  00DC               	movwf	bme280_compensate_data@comp_data
  7137  1286  0862               	movf	bme280_get_sensor_data@dev,w
  7138  1287  3E09               	addlw	9
  7139  1288  00E5               	movwf	??_bme280_get_sensor_data+2
  7140  1289  0865               	movf	??_bme280_get_sensor_data+2,w
  7141  128A  00DD               	movwf	bme280_compensate_data@calib_data
  7142  128B  0021               	movlb	1	; select bank1
  7143  128C  0855               	movf	bme280_get_sensor_data@sensor_comp^(0+128),w
  7144  128D  3195  256E         	fcall	_bme280_compensate_data
  7145  128F  0008               	return
  7146  1290                     __end_of_bme280_get_sensor_data:	
  7147                           ;BME280_driver/bme280.c: 687:     else
  7148                           
  7149                           
  7150                           	psect	text4
  7151  09BA                     __ptext4:	
  7152 ;; *************** function _bme280_parse_sensor_data *****************
  7153 ;; Defined at:
  7154 ;;		line 699 in file "BME280_driver/bme280.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  reg_data        1    wreg     PTR const unsigned char 
  7157 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7158 ;;  uncomp_data     1    0[COMMON] PTR struct bme280_uncomp
  7159 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;  reg_data        1   12[BANK0 ] PTR const unsigned char 
  7162 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7163 ;;  data_msb        4    8[BANK0 ] unsigned long 
  7164 ;;  data_lsb        4    4[BANK0 ] unsigned long 
  7165 ;;  data_xlsb       4    0[BANK0 ] unsigned long 
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  1    wreg      void 
  7168 ;; Registers used:
  7169 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7170 ;; Tracked objects:
  7171 ;;		On entry : 1F/0
  7172 ;;		On exit  : 1F/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7175 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Totals:         9      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;Total ram usage:       22 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:    3
  7182 ;; This function calls:
  7183 ;;		Nothing
  7184 ;; This function is called by:
  7185 ;;		_bme280_get_sensor_data
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           
  7190                           ;psect for function _bme280_parse_sensor_data
  7191  09BA                     _bme280_parse_sensor_data:	
  7192                           
  7193                           ;incstack = 0
  7194                           ; Regs used in _bme280_parse_sensor_data: [wreg+fsr1l+fsr1h+status,2+status,0]
  7195                           ;bme280_parse_sensor_data@reg_data stored from wreg
  7196  09BA  00AC               	movwf	bme280_parse_sensor_data@reg_data
  7197                           
  7198                           ;BME280_driver/bme280.c: 699: void bme280_parse_sensor_data(const uint8_t *reg_data, str
      +                          uct bme280_uncomp_data *uncomp_data);BME280_driver/bme280.c: 700: {;BME280_driver/bme280
      +                          .c: 702:     uint32_t data_xlsb;;BME280_driver/bme280.c: 703:     uint32_t data_lsb;;BME
      +                          280_driver/bme280.c: 704:     uint32_t data_msb;;BME280_driver/bme280.c: 707:     data_m
      +                          sb = (uint32_t)reg_data[0] << 12;
  7199  09BB  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7200  09BC  0086               	movwf	6
  7201  09BD  0187               	clrf	7
  7202  09BE  0801               	movf	1,w
  7203  09BF  00F1               	movwf	??_bme280_parse_sensor_data
  7204  09C0  01F2               	clrf	??_bme280_parse_sensor_data+1
  7205  09C1  01F3               	clrf	??_bme280_parse_sensor_data+2
  7206  09C2  01F4               	clrf	??_bme280_parse_sensor_data+3
  7207  09C3  300C               	movlw	12
  7208  09C4                     u3315:	
  7209  09C4  35F1               	lslf	??_bme280_parse_sensor_data,f
  7210  09C5  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7211  09C6  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7212  09C7  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7213  09C8  0B89               	decfsz	9,f
  7214  09C9  29C4               	goto	u3315
  7215  09CA  0874               	movf	??_bme280_parse_sensor_data+3,w
  7216  09CB  00AB               	movwf	bme280_parse_sensor_data@data_msb+3
  7217  09CC  0873               	movf	??_bme280_parse_sensor_data+2,w
  7218  09CD  00AA               	movwf	bme280_parse_sensor_data@data_msb+2
  7219  09CE  0872               	movf	??_bme280_parse_sensor_data+1,w
  7220  09CF  00A9               	movwf	bme280_parse_sensor_data@data_msb+1
  7221  09D0  0871               	movf	??_bme280_parse_sensor_data,w
  7222  09D1  00A8               	movwf	bme280_parse_sensor_data@data_msb
  7223                           
  7224                           ;BME280_driver/bme280.c: 708:     data_lsb = (uint32_t)reg_data[1] << 4;
  7225  09D2  0A2C               	incf	bme280_parse_sensor_data@reg_data,w
  7226  09D3  0086               	movwf	6
  7227  09D4  0187               	clrf	7
  7228  09D5  0801               	movf	1,w
  7229  09D6  00F1               	movwf	??_bme280_parse_sensor_data
  7230  09D7  01F2               	clrf	??_bme280_parse_sensor_data+1
  7231  09D8  01F3               	clrf	??_bme280_parse_sensor_data+2
  7232  09D9  01F4               	clrf	??_bme280_parse_sensor_data+3
  7233  09DA  3004               	movlw	4
  7234  09DB                     u3325:	
  7235  09DB  35F1               	lslf	??_bme280_parse_sensor_data,f
  7236  09DC  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7237  09DD  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7238  09DE  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7239  09DF  0B89               	decfsz	9,f
  7240  09E0  29DB               	goto	u3325
  7241  09E1  0874               	movf	??_bme280_parse_sensor_data+3,w
  7242  09E2  00A7               	movwf	bme280_parse_sensor_data@data_lsb+3
  7243  09E3  0873               	movf	??_bme280_parse_sensor_data+2,w
  7244  09E4  00A6               	movwf	bme280_parse_sensor_data@data_lsb+2
  7245  09E5  0872               	movf	??_bme280_parse_sensor_data+1,w
  7246  09E6  00A5               	movwf	bme280_parse_sensor_data@data_lsb+1
  7247  09E7  0871               	movf	??_bme280_parse_sensor_data,w
  7248  09E8  00A4               	movwf	bme280_parse_sensor_data@data_lsb
  7249                           
  7250                           ;BME280_driver/bme280.c: 709:     data_xlsb = (uint32_t)reg_data[2] >> 4;
  7251  09E9  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7252  09EA  3E02               	addlw	2
  7253  09EB  0086               	movwf	6
  7254  09EC  0187               	clrf	7
  7255  09ED  0801               	movf	1,w
  7256  09EE  00F1               	movwf	??_bme280_parse_sensor_data
  7257  09EF  3004               	movlw	4
  7258  09F0                     u3335:	
  7259  09F0  36F1               	lsrf	??_bme280_parse_sensor_data,f
  7260  09F1  0B89               	decfsz	9,f
  7261  09F2  29F0               	goto	u3335
  7262  09F3  0871               	movf	??_bme280_parse_sensor_data,w
  7263  09F4  00F2               	movwf	??_bme280_parse_sensor_data+1
  7264  09F5  01F3               	clrf	??_bme280_parse_sensor_data+2
  7265  09F6  01F4               	clrf	??_bme280_parse_sensor_data+3
  7266  09F7  01F5               	clrf	??_bme280_parse_sensor_data+4
  7267  09F8  0875               	movf	??_bme280_parse_sensor_data+4,w
  7268  09F9  00A3               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7269  09FA  0874               	movf	??_bme280_parse_sensor_data+3,w
  7270  09FB  00A2               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7271  09FC  0873               	movf	??_bme280_parse_sensor_data+2,w
  7272  09FD  00A1               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7273  09FE  0872               	movf	??_bme280_parse_sensor_data+1,w
  7274  09FF  00A0               	movwf	bme280_parse_sensor_data@data_xlsb
  7275                           
  7276                           ;BME280_driver/bme280.c: 710:     uncomp_data->pressure = data_msb | data_lsb | data_xls
      +                          b;
  7277  0A00  0820               	movf	bme280_parse_sensor_data@data_xlsb,w
  7278  0A01  00F1               	movwf	??_bme280_parse_sensor_data
  7279  0A02  0821               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7280  0A03  00F2               	movwf	??_bme280_parse_sensor_data+1
  7281  0A04  0822               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7282  0A05  00F3               	movwf	??_bme280_parse_sensor_data+2
  7283  0A06  0823               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7284  0A07  00F4               	movwf	??_bme280_parse_sensor_data+3
  7285  0A08  0828               	movf	bme280_parse_sensor_data@data_msb,w
  7286  0A09  0424               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7287  0A0A  00F5               	movwf	??_bme280_parse_sensor_data+4
  7288  0A0B  0829               	movf	bme280_parse_sensor_data@data_msb+1,w
  7289  0A0C  0425               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7290  0A0D  00F6               	movwf	??_bme280_parse_sensor_data+5
  7291  0A0E  082A               	movf	bme280_parse_sensor_data@data_msb+2,w
  7292  0A0F  0426               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7293  0A10  00F7               	movwf	??_bme280_parse_sensor_data+6
  7294  0A11  082B               	movf	bme280_parse_sensor_data@data_msb+3,w
  7295  0A12  0427               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7296  0A13  00F8               	movwf	??_bme280_parse_sensor_data+7
  7297  0A14  0875               	movf	??_bme280_parse_sensor_data+4,w
  7298  0A15  04F1               	iorwf	??_bme280_parse_sensor_data,f
  7299  0A16  0876               	movf	??_bme280_parse_sensor_data+5,w
  7300  0A17  04F2               	iorwf	??_bme280_parse_sensor_data+1,f
  7301  0A18  0877               	movf	??_bme280_parse_sensor_data+6,w
  7302  0A19  04F3               	iorwf	??_bme280_parse_sensor_data+2,f
  7303  0A1A  0878               	movf	??_bme280_parse_sensor_data+7,w
  7304  0A1B  04F4               	iorwf	??_bme280_parse_sensor_data+3,f
  7305  0A1C  0870               	movf	bme280_parse_sensor_data@uncomp_data,w
  7306  0A1D  0086               	movwf	6
  7307  0A1E  0187               	clrf	7
  7308  0A1F  0871               	movf	??_bme280_parse_sensor_data,w
  7309  0A20  3FC0               	movwi [0]fsr1
  7310  0A21  0872               	movf	??_bme280_parse_sensor_data+1,w
  7311  0A22  3FC1               	movwi [1]fsr1
  7312  0A23  0873               	movf	??_bme280_parse_sensor_data+2,w
  7313  0A24  3FC2               	movwi [2]fsr1
  7314  0A25  0874               	movf	??_bme280_parse_sensor_data+3,w
  7315  0A26  3FC3               	movwi [3]fsr1
  7316                           
  7317                           ;BME280_driver/bme280.c: 713:     data_msb = (uint32_t)reg_data[3] << 12;
  7318  0A27  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7319  0A28  3E03               	addlw	3
  7320  0A29  0086               	movwf	6
  7321  0A2A  0187               	clrf	7
  7322  0A2B  0801               	movf	1,w
  7323  0A2C  00F1               	movwf	??_bme280_parse_sensor_data
  7324  0A2D  01F2               	clrf	??_bme280_parse_sensor_data+1
  7325  0A2E  01F3               	clrf	??_bme280_parse_sensor_data+2
  7326  0A2F  01F4               	clrf	??_bme280_parse_sensor_data+3
  7327  0A30  300C               	movlw	12
  7328  0A31                     u3345:	
  7329  0A31  35F1               	lslf	??_bme280_parse_sensor_data,f
  7330  0A32  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7331  0A33  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7332  0A34  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7333  0A35  0B89               	decfsz	9,f
  7334  0A36  2A31               	goto	u3345
  7335  0A37  0874               	movf	??_bme280_parse_sensor_data+3,w
  7336  0A38  00AB               	movwf	bme280_parse_sensor_data@data_msb+3
  7337  0A39  0873               	movf	??_bme280_parse_sensor_data+2,w
  7338  0A3A  00AA               	movwf	bme280_parse_sensor_data@data_msb+2
  7339  0A3B  0872               	movf	??_bme280_parse_sensor_data+1,w
  7340  0A3C  00A9               	movwf	bme280_parse_sensor_data@data_msb+1
  7341  0A3D  0871               	movf	??_bme280_parse_sensor_data,w
  7342  0A3E  00A8               	movwf	bme280_parse_sensor_data@data_msb
  7343                           
  7344                           ;BME280_driver/bme280.c: 714:     data_lsb = (uint32_t)reg_data[4] << 4;
  7345  0A3F  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7346  0A40  3E04               	addlw	4
  7347  0A41  0086               	movwf	6
  7348  0A42  0187               	clrf	7
  7349  0A43  0801               	movf	1,w
  7350  0A44  00F1               	movwf	??_bme280_parse_sensor_data
  7351  0A45  01F2               	clrf	??_bme280_parse_sensor_data+1
  7352  0A46  01F3               	clrf	??_bme280_parse_sensor_data+2
  7353  0A47  01F4               	clrf	??_bme280_parse_sensor_data+3
  7354  0A48  3004               	movlw	4
  7355  0A49                     u3355:	
  7356  0A49  35F1               	lslf	??_bme280_parse_sensor_data,f
  7357  0A4A  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7358  0A4B  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7359  0A4C  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7360  0A4D  0B89               	decfsz	9,f
  7361  0A4E  2A49               	goto	u3355
  7362  0A4F  0874               	movf	??_bme280_parse_sensor_data+3,w
  7363  0A50  00A7               	movwf	bme280_parse_sensor_data@data_lsb+3
  7364  0A51  0873               	movf	??_bme280_parse_sensor_data+2,w
  7365  0A52  00A6               	movwf	bme280_parse_sensor_data@data_lsb+2
  7366  0A53  0872               	movf	??_bme280_parse_sensor_data+1,w
  7367  0A54  00A5               	movwf	bme280_parse_sensor_data@data_lsb+1
  7368  0A55  0871               	movf	??_bme280_parse_sensor_data,w
  7369  0A56  00A4               	movwf	bme280_parse_sensor_data@data_lsb
  7370                           
  7371                           ;BME280_driver/bme280.c: 715:     data_xlsb = (uint32_t)reg_data[5] >> 4;
  7372  0A57  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7373  0A58  3E05               	addlw	5
  7374  0A59  0086               	movwf	6
  7375  0A5A  0187               	clrf	7
  7376  0A5B  0801               	movf	1,w
  7377  0A5C  00F1               	movwf	??_bme280_parse_sensor_data
  7378  0A5D  3004               	movlw	4
  7379  0A5E                     u3365:	
  7380  0A5E  36F1               	lsrf	??_bme280_parse_sensor_data,f
  7381  0A5F  0B89               	decfsz	9,f
  7382  0A60  2A5E               	goto	u3365
  7383  0A61  0871               	movf	??_bme280_parse_sensor_data,w
  7384  0A62  00F2               	movwf	??_bme280_parse_sensor_data+1
  7385  0A63  01F3               	clrf	??_bme280_parse_sensor_data+2
  7386  0A64  01F4               	clrf	??_bme280_parse_sensor_data+3
  7387  0A65  01F5               	clrf	??_bme280_parse_sensor_data+4
  7388  0A66  0875               	movf	??_bme280_parse_sensor_data+4,w
  7389  0A67  00A3               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7390  0A68  0874               	movf	??_bme280_parse_sensor_data+3,w
  7391  0A69  00A2               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7392  0A6A  0873               	movf	??_bme280_parse_sensor_data+2,w
  7393  0A6B  00A1               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7394  0A6C  0872               	movf	??_bme280_parse_sensor_data+1,w
  7395  0A6D  00A0               	movwf	bme280_parse_sensor_data@data_xlsb
  7396                           
  7397                           ;BME280_driver/bme280.c: 716:     uncomp_data->temperature = data_msb | data_lsb | data_
      +                          xlsb;
  7398  0A6E  0820               	movf	bme280_parse_sensor_data@data_xlsb,w
  7399  0A6F  00F1               	movwf	??_bme280_parse_sensor_data
  7400  0A70  0821               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7401  0A71  00F2               	movwf	??_bme280_parse_sensor_data+1
  7402  0A72  0822               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7403  0A73  00F3               	movwf	??_bme280_parse_sensor_data+2
  7404  0A74  0823               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7405  0A75  00F4               	movwf	??_bme280_parse_sensor_data+3
  7406  0A76  0828               	movf	bme280_parse_sensor_data@data_msb,w
  7407  0A77  0424               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7408  0A78  00F5               	movwf	??_bme280_parse_sensor_data+4
  7409  0A79  0829               	movf	bme280_parse_sensor_data@data_msb+1,w
  7410  0A7A  0425               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7411  0A7B  00F6               	movwf	??_bme280_parse_sensor_data+5
  7412  0A7C  082A               	movf	bme280_parse_sensor_data@data_msb+2,w
  7413  0A7D  0426               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7414  0A7E  00F7               	movwf	??_bme280_parse_sensor_data+6
  7415  0A7F  082B               	movf	bme280_parse_sensor_data@data_msb+3,w
  7416  0A80  0427               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7417  0A81  00F8               	movwf	??_bme280_parse_sensor_data+7
  7418  0A82  0875               	movf	??_bme280_parse_sensor_data+4,w
  7419  0A83  04F1               	iorwf	??_bme280_parse_sensor_data,f
  7420  0A84  0876               	movf	??_bme280_parse_sensor_data+5,w
  7421  0A85  04F2               	iorwf	??_bme280_parse_sensor_data+1,f
  7422  0A86  0877               	movf	??_bme280_parse_sensor_data+6,w
  7423  0A87  04F3               	iorwf	??_bme280_parse_sensor_data+2,f
  7424  0A88  0878               	movf	??_bme280_parse_sensor_data+7,w
  7425  0A89  04F4               	iorwf	??_bme280_parse_sensor_data+3,f
  7426  0A8A  0870               	movf	bme280_parse_sensor_data@uncomp_data,w
  7427  0A8B  3E04               	addlw	4
  7428  0A8C  0086               	movwf	6
  7429  0A8D  0187               	clrf	7
  7430  0A8E  0871               	movf	??_bme280_parse_sensor_data,w
  7431  0A8F  3FC0               	movwi [0]fsr1
  7432  0A90  0872               	movf	??_bme280_parse_sensor_data+1,w
  7433  0A91  3FC1               	movwi [1]fsr1
  7434  0A92  0873               	movf	??_bme280_parse_sensor_data+2,w
  7435  0A93  3FC2               	movwi [2]fsr1
  7436  0A94  0874               	movf	??_bme280_parse_sensor_data+3,w
  7437  0A95  3FC3               	movwi [3]fsr1
  7438                           
  7439                           ;BME280_driver/bme280.c: 719:     data_lsb = (uint32_t)reg_data[6] << 8;
  7440  0A96  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7441  0A97  3E06               	addlw	6
  7442  0A98  0086               	movwf	6
  7443  0A99  0187               	clrf	7
  7444  0A9A  0801               	movf	1,w
  7445  0A9B  00F1               	movwf	??_bme280_parse_sensor_data
  7446  0A9C  01F2               	clrf	??_bme280_parse_sensor_data+1
  7447  0A9D  01F3               	clrf	??_bme280_parse_sensor_data+2
  7448  0A9E  01F4               	clrf	??_bme280_parse_sensor_data+3
  7449  0A9F  3008               	movlw	8
  7450  0AA0                     u3375:	
  7451  0AA0  35F1               	lslf	??_bme280_parse_sensor_data,f
  7452  0AA1  0DF2               	rlf	??_bme280_parse_sensor_data+1,f
  7453  0AA2  0DF3               	rlf	??_bme280_parse_sensor_data+2,f
  7454  0AA3  0DF4               	rlf	??_bme280_parse_sensor_data+3,f
  7455  0AA4  0B89               	decfsz	9,f
  7456  0AA5  2AA0               	goto	u3375
  7457  0AA6  0874               	movf	??_bme280_parse_sensor_data+3,w
  7458  0AA7  00A7               	movwf	bme280_parse_sensor_data@data_lsb+3
  7459  0AA8  0873               	movf	??_bme280_parse_sensor_data+2,w
  7460  0AA9  00A6               	movwf	bme280_parse_sensor_data@data_lsb+2
  7461  0AAA  0872               	movf	??_bme280_parse_sensor_data+1,w
  7462  0AAB  00A5               	movwf	bme280_parse_sensor_data@data_lsb+1
  7463  0AAC  0871               	movf	??_bme280_parse_sensor_data,w
  7464  0AAD  00A4               	movwf	bme280_parse_sensor_data@data_lsb
  7465                           
  7466                           ;BME280_driver/bme280.c: 720:     data_msb = (uint32_t)reg_data[7];
  7467  0AAE  082C               	movf	bme280_parse_sensor_data@reg_data,w
  7468  0AAF  3E07               	addlw	7
  7469  0AB0  0086               	movwf	6
  7470  0AB1  0187               	clrf	7
  7471  0AB2  0801               	movf	1,w
  7472  0AB3  00F1               	movwf	??_bme280_parse_sensor_data
  7473  0AB4  01F2               	clrf	??_bme280_parse_sensor_data+1
  7474  0AB5  01F3               	clrf	??_bme280_parse_sensor_data+2
  7475  0AB6  01F4               	clrf	??_bme280_parse_sensor_data+3
  7476  0AB7  0874               	movf	??_bme280_parse_sensor_data+3,w
  7477  0AB8  00AB               	movwf	bme280_parse_sensor_data@data_msb+3
  7478  0AB9  0873               	movf	??_bme280_parse_sensor_data+2,w
  7479  0ABA  00AA               	movwf	bme280_parse_sensor_data@data_msb+2
  7480  0ABB  0872               	movf	??_bme280_parse_sensor_data+1,w
  7481  0ABC  00A9               	movwf	bme280_parse_sensor_data@data_msb+1
  7482  0ABD  0871               	movf	??_bme280_parse_sensor_data,w
  7483  0ABE  00A8               	movwf	bme280_parse_sensor_data@data_msb
  7484                           
  7485                           ;BME280_driver/bme280.c: 721:     uncomp_data->humidity = data_msb | data_lsb;
  7486  0ABF  0828               	movf	bme280_parse_sensor_data@data_msb,w
  7487  0AC0  0424               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7488  0AC1  00F1               	movwf	??_bme280_parse_sensor_data
  7489  0AC2  0829               	movf	bme280_parse_sensor_data@data_msb+1,w
  7490  0AC3  0425               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7491  0AC4  00F2               	movwf	??_bme280_parse_sensor_data+1
  7492  0AC5  082A               	movf	bme280_parse_sensor_data@data_msb+2,w
  7493  0AC6  0426               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7494  0AC7  00F3               	movwf	??_bme280_parse_sensor_data+2
  7495  0AC8  082B               	movf	bme280_parse_sensor_data@data_msb+3,w
  7496  0AC9  0427               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7497  0ACA  00F4               	movwf	??_bme280_parse_sensor_data+3
  7498  0ACB  0870               	movf	bme280_parse_sensor_data@uncomp_data,w
  7499  0ACC  3E08               	addlw	8
  7500  0ACD  0086               	movwf	6
  7501  0ACE  0187               	clrf	7
  7502  0ACF  0871               	movf	??_bme280_parse_sensor_data,w
  7503  0AD0  3FC0               	movwi [0]fsr1
  7504  0AD1  0872               	movf	??_bme280_parse_sensor_data+1,w
  7505  0AD2  3FC1               	movwi [1]fsr1
  7506  0AD3  0873               	movf	??_bme280_parse_sensor_data+2,w
  7507  0AD4  3FC2               	movwi [2]fsr1
  7508  0AD5  0874               	movf	??_bme280_parse_sensor_data+3,w
  7509  0AD6  3FC3               	movwi [3]fsr1
  7510  0AD7  0008               	return
  7511  0AD8                     __end_of_bme280_parse_sensor_data:	
  7512                           
  7513                           	psect	text5
  7514  156E                     __ptext5:	
  7515 ;; *************** function _bme280_compensate_data *****************
  7516 ;; Defined at:
  7517 ;;		line 729 in file "BME280_driver/bme280.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  sensor_comp     1    wreg     unsigned char 
  7520 ;;  uncomp_data     1   59[BANK0 ] PTR const struct bme280_
  7521 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7522 ;;  comp_data       1   60[BANK0 ] PTR struct bme280_data
  7523 ;;		 -> main@sensor_data(12), 
  7524 ;;  calib_data      1   61[BANK0 ] PTR struct bme280_calib_
  7525 ;;		 -> EnvSensor(51), 
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;  sensor_comp     1   64[BANK0 ] unsigned char 
  7528 ;;  rslt            1   63[BANK0 ] char 
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  1    wreg      char 
  7531 ;; Registers used:
  7532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 1F/1
  7535 ;;		On exit  : 1F/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7538 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;Total ram usage:        6 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    5
  7545 ;; This function calls:
  7546 ;;		_compensate_humidity
  7547 ;;		_compensate_pressure
  7548 ;;		_compensate_temperature
  7549 ;; This function is called by:
  7550 ;;		_bme280_get_sensor_data
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           
  7555                           ;psect for function _bme280_compensate_data
  7556  156E                     _bme280_compensate_data:	
  7557                           
  7558                           ;incstack = 0
  7559                           ; Regs used in _bme280_compensate_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7560                           ;bme280_compensate_data@sensor_comp stored from wreg
  7561  156E  0020               	movlb	0	; select bank0
  7562  156F  00E0               	movwf	bme280_compensate_data@sensor_comp
  7563                           
  7564                           ;BME280_driver/bme280.c: 729: int8_t bme280_compensate_data(uint8_t sensor_comp,;BME280_
      +                          driver/bme280.c: 730:                               const struct bme280_uncomp_data *unc
      +                          omp_data,;BME280_driver/bme280.c: 731:                               struct bme280_data 
      +                          *comp_data,;BME280_driver/bme280.c: 732:                               struct bme280_cal
      +                          ib_data *calib_data);BME280_driver/bme280.c: 733: {;BME280_driver/bme280.c: 734:     int
      +                          8_t rslt = 0;
  7565  1570  01DF               	clrf	bme280_compensate_data@rslt
  7566                           
  7567                           ;BME280_driver/bme280.c: 736:     if ((uncomp_data != ((void*)0)) && (comp_data != ((voi
      +                          d*)0)) && (calib_data != ((void*)0)))
  7568  1571  085B               	movf	bme280_compensate_data@uncomp_data,w
  7569  1572  1903               	btfsc	3,2
  7570  1573  2DE0               	goto	l126
  7571  1574  085C               	movf	bme280_compensate_data@comp_data,w
  7572  1575  1903               	btfsc	3,2
  7573  1576  2DE0               	goto	l126
  7574  1577  085D               	movf	bme280_compensate_data@calib_data,w
  7575  1578  1903               	btfsc	3,2
  7576  1579  2DE0               	goto	l126
  7577                           
  7578                           ;BME280_driver/bme280.c: 737:     {;BME280_driver/bme280.c: 739:         comp_data->temp
      +                          erature = 0;
  7579  157A  085C               	movf	bme280_compensate_data@comp_data,w
  7580  157B  3E04               	addlw	4
  7581  157C  0086               	movwf	6
  7582  157D  3001               	movlw	1	; select bank2/3
  7583  157E  0087               	movwf	7
  7584  157F  3000               	movlw	0
  7585  1580  3FC0               	movwi [0]fsr1
  7586  1581  3000               	movlw	0
  7587  1582  3FC1               	movwi [1]fsr1
  7588  1583  3FC2               	movwi [2]fsr1
  7589  1584  3FC3               	movwi [3]fsr1
  7590                           
  7591                           ;BME280_driver/bme280.c: 740:         comp_data->pressure = 0;
  7592  1585  085C               	movf	bme280_compensate_data@comp_data,w
  7593  1586  0086               	movwf	6
  7594  1587  3001               	movlw	1	; select bank2/3
  7595  1588  0087               	movwf	7
  7596  1589  3000               	movlw	0
  7597  158A  3FC0               	movwi [0]fsr1
  7598  158B  3FC1               	movwi [1]fsr1
  7599  158C  3FC2               	movwi [2]fsr1
  7600  158D  3FC3               	movwi [3]fsr1
  7601                           
  7602                           ;BME280_driver/bme280.c: 741:         comp_data->humidity = 0;
  7603  158E  085C               	movf	bme280_compensate_data@comp_data,w
  7604  158F  3E08               	addlw	8
  7605  1590  0086               	movwf	6
  7606  1591  3001               	movlw	1	; select bank2/3
  7607  1592  0087               	movwf	7
  7608  1593  3000               	movlw	0
  7609  1594  3FC0               	movwi [0]fsr1
  7610  1595  3000               	movlw	0
  7611  1596  3FC1               	movwi [1]fsr1
  7612  1597  3FC2               	movwi [2]fsr1
  7613  1598  3FC3               	movwi [3]fsr1
  7614                           
  7615                           ;BME280_driver/bme280.c: 744:         if (sensor_comp & (1 | 1 << 1 | 1 << 2))
  7616  1599  0860               	movf	bme280_compensate_data@sensor_comp,w
  7617  159A  3907               	andlw	7
  7618  159B  1903               	btfsc	3,2
  7619  159C  2DB2               	goto	l4496
  7620                           
  7621                           ;BME280_driver/bme280.c: 745:         {;BME280_driver/bme280.c: 747:             comp_da
      +                          ta->temperature = compensate_temperature(uncomp_data, calib_data);
  7622  159D  085D               	movf	bme280_compensate_data@calib_data,w
  7623  159E  00DE               	movwf	??_bme280_compensate_data
  7624  159F  085E               	movf	??_bme280_compensate_data,w
  7625  15A0  00AE               	movwf	compensate_temperature@calib_data
  7626  15A1  085B               	movf	bme280_compensate_data@uncomp_data,w
  7627  15A2  3185  259B  3195   	fcall	_compensate_temperature
  7628  15A5  085C               	movf	bme280_compensate_data@comp_data,w
  7629  15A6  3E04               	addlw	4
  7630  15A7  0086               	movwf	6
  7631  15A8  3001               	movlw	1	; select bank2/3
  7632  15A9  0087               	movwf	7
  7633  15AA  082E               	movf	?_compensate_temperature,w
  7634  15AB  3FC0               	movwi [0]fsr1
  7635  15AC  082F               	movf	?_compensate_temperature+1,w
  7636  15AD  3FC1               	movwi [1]fsr1
  7637  15AE  0830               	movf	?_compensate_temperature+2,w
  7638  15AF  3FC2               	movwi [2]fsr1
  7639  15B0  0831               	movf	?_compensate_temperature+3,w
  7640  15B1  3FC3               	movwi [3]fsr1
  7641  15B2                     l4496:	
  7642                           
  7643                           ;BME280_driver/bme280.c: 749:         if (sensor_comp & 1)
  7644  15B2  1C60               	btfss	bme280_compensate_data@sensor_comp,0
  7645  15B3  2DC8               	goto	l4500
  7646                           
  7647                           ;BME280_driver/bme280.c: 750:         {;BME280_driver/bme280.c: 752:             comp_da
      +                          ta->pressure = compensate_pressure(uncomp_data, calib_data);
  7648  15B4  085D               	movf	bme280_compensate_data@calib_data,w
  7649  15B5  00DE               	movwf	??_bme280_compensate_data
  7650  15B6  085E               	movf	??_bme280_compensate_data,w
  7651  15B7  00AE               	movwf	compensate_pressure@calib_data
  7652  15B8  085B               	movf	bme280_compensate_data@uncomp_data,w
  7653  15B9  3180  2053  3195   	fcall	_compensate_pressure
  7654  15BC  085C               	movf	bme280_compensate_data@comp_data,w
  7655  15BD  0086               	movwf	6
  7656  15BE  3001               	movlw	1	; select bank2/3
  7657  15BF  0087               	movwf	7
  7658  15C0  082E               	movf	?_compensate_pressure,w
  7659  15C1  3FC0               	movwi [0]fsr1
  7660  15C2  082F               	movf	?_compensate_pressure+1,w
  7661  15C3  3FC1               	movwi [1]fsr1
  7662  15C4  0830               	movf	?_compensate_pressure+2,w
  7663  15C5  3FC2               	movwi [2]fsr1
  7664  15C6  0831               	movf	?_compensate_pressure+3,w
  7665  15C7  3FC3               	movwi [3]fsr1
  7666  15C8                     l4500:	
  7667                           
  7668                           ;BME280_driver/bme280.c: 754:         if (sensor_comp & 1 << 2)
  7669  15C8  1D60               	btfss	bme280_compensate_data@sensor_comp,2
  7670  15C9  2DE2               	goto	l4504
  7671                           
  7672                           ;BME280_driver/bme280.c: 755:         {;BME280_driver/bme280.c: 758:             comp_da
      +                          ta->humidity = compensate_humidity(uncomp_data, calib_data);
  7673  15CA  085D               	movf	bme280_compensate_data@calib_data,w
  7674  15CB  00DE               	movwf	??_bme280_compensate_data
  7675  15CC  085E               	movf	??_bme280_compensate_data,w
  7676  15CD  00AE               	movwf	compensate_humidity@calib_data
  7677  15CE  085B               	movf	bme280_compensate_data@uncomp_data,w
  7678  15CF  318D  2541  3195   	fcall	_compensate_humidity
  7679  15D2  085C               	movf	bme280_compensate_data@comp_data,w
  7680  15D3  3E08               	addlw	8
  7681  15D4  0086               	movwf	6
  7682  15D5  3001               	movlw	1	; select bank2/3
  7683  15D6  0087               	movwf	7
  7684  15D7  082E               	movf	?_compensate_humidity,w
  7685  15D8  3FC0               	movwi [0]fsr1
  7686  15D9  082F               	movf	?_compensate_humidity+1,w
  7687  15DA  3FC1               	movwi [1]fsr1
  7688  15DB  0830               	movf	?_compensate_humidity+2,w
  7689  15DC  3FC2               	movwi [2]fsr1
  7690  15DD  0831               	movf	?_compensate_humidity+3,w
  7691  15DE  3FC3               	movwi [3]fsr1
  7692  15DF  2DE2               	goto	l4504
  7693  15E0                     l126:	
  7694                           ;BME280_driver/bme280.c: 765:     else
  7695                           
  7696                           
  7697                           ;BME280_driver/bme280.c: 766:     {;BME280_driver/bme280.c: 767:         rslt = -1;
  7698  15E0  01DF               	clrf	bme280_compensate_data@rslt
  7699  15E1  03DF               	decf	bme280_compensate_data@rslt,f
  7700  15E2                     l4504:	
  7701                           
  7702                           ;BME280_driver/bme280.c: 770:     return rslt;
  7703  15E2  085F               	movf	bme280_compensate_data@rslt,w
  7704  15E3  0008               	return
  7705  15E4                     __end_of_bme280_compensate_data:	
  7706                           
  7707                           	psect	text6
  7708  059B                     __ptext6:	
  7709 ;; *************** function _compensate_temperature *****************
  7710 ;; Defined at:
  7711 ;;		line 1126 in file "BME280_driver/bme280.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  7714 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7715 ;;  calib_data      1   14[BANK0 ] PTR struct bme280_calib_
  7716 ;;		 -> EnvSensor(51), 
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  uncomp_data     1   44[BANK0 ] PTR const struct bme280_
  7719 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7720 ;;  temperature     4   49[BANK0 ] long 
  7721 ;;  var2            4   45[BANK0 ] long 
  7722 ;;  var1            4   40[BANK0 ] long 
  7723 ;;  temperature_    4   36[BANK0 ] long 
  7724 ;;  temperature_    4    0        long 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  4   14[BANK0 ] long 
  7727 ;; Registers used:
  7728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : 1F/0
  7731 ;;		On exit  : 1F/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;Total ram usage:       39 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    4
  7741 ;; This function calls:
  7742 ;;		___aldiv
  7743 ;;		___lmul
  7744 ;; This function is called by:
  7745 ;;		_bme280_compensate_data
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           
  7750                           ;psect for function _compensate_temperature
  7751  059B                     _compensate_temperature:	
  7752                           
  7753                           ;incstack = 0
  7754                           ; Regs used in _compensate_temperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7755                           ;compensate_temperature@uncomp_data stored from wreg
  7756  059B  00CC               	movwf	compensate_temperature@uncomp_data
  7757                           
  7758                           ;BME280_driver/bme280.c: 1133:     int32_t temperature_max = 8500;
  7759  059C  3000               	movlw	0
  7760  059D  00C7               	movwf	compensate_temperature@temperature_max+3
  7761  059E  3000               	movlw	0
  7762  059F  00C6               	movwf	compensate_temperature@temperature_max+2
  7763  05A0  3021               	movlw	33
  7764  05A1  00C5               	movwf	compensate_temperature@temperature_max+1
  7765  05A2  3034               	movlw	52
  7766  05A3  00C4               	movwf	compensate_temperature@temperature_max
  7767                           
  7768                           ;BME280_driver/bme280.c: 1135:     var1 = (int32_t)((uncomp_data->temperature / 8) - ((i
      +                          nt32_t)calib_data->dig_T1 * 2));
  7769  05A4  082E               	movf	compensate_temperature@calib_data,w
  7770  05A5  0086               	movwf	6
  7771  05A6  3001               	movlw	1	; select bank2/3
  7772  05A7  0087               	movwf	7
  7773  05A8  3F40               	moviw [0]fsr1
  7774  05A9  00B2               	movwf	??_compensate_temperature
  7775  05AA  3F41               	moviw [1]fsr1
  7776  05AB  00B3               	movwf	??_compensate_temperature+1
  7777  05AC  0832               	movf	??_compensate_temperature,w
  7778  05AD  00B4               	movwf	??_compensate_temperature+2
  7779  05AE  0833               	movf	??_compensate_temperature+1,w
  7780  05AF  00B5               	movwf	??_compensate_temperature+3
  7781  05B0  01B6               	clrf	??_compensate_temperature+4
  7782  05B1  01B7               	clrf	??_compensate_temperature+5
  7783  05B2  3001               	movlw	1
  7784  05B3                     u4635:	
  7785  05B3  35B4               	lslf	??_compensate_temperature+2,f
  7786  05B4  0DB5               	rlf	??_compensate_temperature+3,f
  7787  05B5  0DB6               	rlf	??_compensate_temperature+4,f
  7788  05B6  0DB7               	rlf	??_compensate_temperature+5,f
  7789  05B7  0B89               	decfsz	9,f
  7790  05B8  2DB3               	goto	u4635
  7791  05B9  084C               	movf	compensate_temperature@uncomp_data,w
  7792  05BA  3E04               	addlw	4
  7793  05BB  0086               	movwf	6
  7794  05BC  0187               	clrf	7
  7795  05BD  3F40               	moviw [0]fsr1
  7796  05BE  00B8               	movwf	??_compensate_temperature+6
  7797  05BF  3F41               	moviw [1]fsr1
  7798  05C0  00B9               	movwf	??_compensate_temperature+7
  7799  05C1  3F42               	moviw [2]fsr1
  7800  05C2  00BA               	movwf	??_compensate_temperature+8
  7801  05C3  3F43               	moviw [3]fsr1
  7802  05C4  00BB               	movwf	??_compensate_temperature+9
  7803  05C5  3003               	movlw	3
  7804  05C6                     u4645:	
  7805  05C6  36BB               	lsrf	??_compensate_temperature+9,f
  7806  05C7  0CBA               	rrf	??_compensate_temperature+8,f
  7807  05C8  0CB9               	rrf	??_compensate_temperature+7,f
  7808  05C9  0CB8               	rrf	??_compensate_temperature+6,f
  7809  05CA  0B89               	decfsz	9,f
  7810  05CB  2DC6               	goto	u4645
  7811  05CC  0834               	movf	??_compensate_temperature+2,w
  7812  05CD  02B8               	subwf	??_compensate_temperature+6,f
  7813  05CE  0835               	movf	??_compensate_temperature+3,w
  7814  05CF  3BB9               	subwfb	??_compensate_temperature+7,f
  7815  05D0  0836               	movf	??_compensate_temperature+4,w
  7816  05D1  3BBA               	subwfb	??_compensate_temperature+8,f
  7817  05D2  0837               	movf	??_compensate_temperature+5,w
  7818  05D3  3BBB               	subwfb	??_compensate_temperature+9,f
  7819  05D4  083B               	movf	??_compensate_temperature+9,w
  7820  05D5  00CB               	movwf	compensate_temperature@var1+3
  7821  05D6  083A               	movf	??_compensate_temperature+8,w
  7822  05D7  00CA               	movwf	compensate_temperature@var1+2
  7823  05D8  0839               	movf	??_compensate_temperature+7,w
  7824  05D9  00C9               	movwf	compensate_temperature@var1+1
  7825  05DA  0838               	movf	??_compensate_temperature+6,w
  7826  05DB  00C8               	movwf	compensate_temperature@var1
  7827                           
  7828                           ;BME280_driver/bme280.c: 1136:     var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
  7829  05DC  3000               	movlw	0
  7830  05DD  00A3               	movwf	___aldiv@divisor+3
  7831  05DE  3000               	movlw	0
  7832  05DF  00A2               	movwf	___aldiv@divisor+2
  7833  05E0  3008               	movlw	8
  7834  05E1  00A1               	movwf	___aldiv@divisor+1
  7835  05E2  3000               	movlw	0
  7836  05E3  00A0               	movwf	___aldiv@divisor
  7837  05E4  082E               	movf	compensate_temperature@calib_data,w
  7838  05E5  3E02               	addlw	2
  7839  05E6  0086               	movwf	6
  7840  05E7  3001               	movlw	1	; select bank2/3
  7841  05E8  0087               	movwf	7
  7842  05E9  3F40               	moviw [0]fsr1
  7843  05EA  00B2               	movwf	??_compensate_temperature
  7844  05EB  3F41               	moviw [1]fsr1
  7845  05EC  00B3               	movwf	??_compensate_temperature+1
  7846  05ED  0832               	movf	??_compensate_temperature,w
  7847  05EE  00F0               	movwf	___lmul@multiplier
  7848  05EF  0833               	movf	??_compensate_temperature+1,w
  7849  05F0  00F1               	movwf	___lmul@multiplier+1
  7850  05F1  0D89               	rlf	9,f
  7851  05F2  3B89               	subwfb	9,f
  7852  05F3  0989               	comf	9,f
  7853  05F4  00F2               	movwf	___lmul@multiplier+2
  7854  05F5  00F3               	movwf	___lmul@multiplier+3
  7855  05F6  084B               	movf	compensate_temperature@var1+3,w
  7856  05F7  00F7               	movwf	___lmul@multiplicand+3
  7857  05F8  084A               	movf	compensate_temperature@var1+2,w
  7858  05F9  00F6               	movwf	___lmul@multiplicand+2
  7859  05FA  0849               	movf	compensate_temperature@var1+1,w
  7860  05FB  00F5               	movwf	___lmul@multiplicand+1
  7861  05FC  0848               	movf	compensate_temperature@var1,w
  7862  05FD  00F4               	movwf	___lmul@multiplicand
  7863  05FE  319C  2491  3185   	fcall	___lmul
  7864  0601  0873               	movf	?___lmul+3,w
  7865  0602  0020               	movlb	0	; select bank0
  7866  0603  00A7               	movwf	___aldiv@dividend+3
  7867  0604  0872               	movf	?___lmul+2,w
  7868  0605  00A6               	movwf	___aldiv@dividend+2
  7869  0606  0871               	movf	?___lmul+1,w
  7870  0607  00A5               	movwf	___aldiv@dividend+1
  7871  0608  0870               	movf	?___lmul,w
  7872  0609  00A4               	movwf	___aldiv@dividend
  7873  060A  3196  265B  3185   	fcall	___aldiv
  7874  060D  0823               	movf	?___aldiv+3,w
  7875  060E  00CB               	movwf	compensate_temperature@var1+3
  7876  060F  0822               	movf	?___aldiv+2,w
  7877  0610  00CA               	movwf	compensate_temperature@var1+2
  7878  0611  0821               	movf	?___aldiv+1,w
  7879  0612  00C9               	movwf	compensate_temperature@var1+1
  7880  0613  0820               	movf	?___aldiv,w
  7881  0614  00C8               	movwf	compensate_temperature@var1
  7882                           
  7883                           ;BME280_driver/bme280.c: 1137:     var2 = (int32_t)((uncomp_data->temperature / 16) - ((
      +                          int32_t)calib_data->dig_T1));
  7884  0615  082E               	movf	compensate_temperature@calib_data,w
  7885  0616  0086               	movwf	6
  7886  0617  3001               	movlw	1	; select bank2/3
  7887  0618  0087               	movwf	7
  7888  0619  3F40               	moviw [0]fsr1
  7889  061A  00B2               	movwf	??_compensate_temperature
  7890  061B  3F41               	moviw [1]fsr1
  7891  061C  00B3               	movwf	??_compensate_temperature+1
  7892  061D  0832               	movf	??_compensate_temperature,w
  7893  061E  00B4               	movwf	??_compensate_temperature+2
  7894  061F  0833               	movf	??_compensate_temperature+1,w
  7895  0620  00B5               	movwf	??_compensate_temperature+3
  7896  0621  01B6               	clrf	??_compensate_temperature+4
  7897  0622  01B7               	clrf	??_compensate_temperature+5
  7898  0623  084C               	movf	compensate_temperature@uncomp_data,w
  7899  0624  3E04               	addlw	4
  7900  0625  0086               	movwf	6
  7901  0626  0187               	clrf	7
  7902  0627  3F40               	moviw [0]fsr1
  7903  0628  00B8               	movwf	??_compensate_temperature+6
  7904  0629  3F41               	moviw [1]fsr1
  7905  062A  00B9               	movwf	??_compensate_temperature+7
  7906  062B  3F42               	moviw [2]fsr1
  7907  062C  00BA               	movwf	??_compensate_temperature+8
  7908  062D  3F43               	moviw [3]fsr1
  7909  062E  00BB               	movwf	??_compensate_temperature+9
  7910  062F  3004               	movlw	4
  7911  0630                     u4655:	
  7912  0630  36BB               	lsrf	??_compensate_temperature+9,f
  7913  0631  0CBA               	rrf	??_compensate_temperature+8,f
  7914  0632  0CB9               	rrf	??_compensate_temperature+7,f
  7915  0633  0CB8               	rrf	??_compensate_temperature+6,f
  7916  0634  0B89               	decfsz	9,f
  7917  0635  2E30               	goto	u4655
  7918  0636  0834               	movf	??_compensate_temperature+2,w
  7919  0637  02B8               	subwf	??_compensate_temperature+6,f
  7920  0638  0835               	movf	??_compensate_temperature+3,w
  7921  0639  3BB9               	subwfb	??_compensate_temperature+7,f
  7922  063A  0836               	movf	??_compensate_temperature+4,w
  7923  063B  3BBA               	subwfb	??_compensate_temperature+8,f
  7924  063C  0837               	movf	??_compensate_temperature+5,w
  7925  063D  3BBB               	subwfb	??_compensate_temperature+9,f
  7926  063E  083B               	movf	??_compensate_temperature+9,w
  7927  063F  00D0               	movwf	compensate_temperature@var2+3
  7928  0640  083A               	movf	??_compensate_temperature+8,w
  7929  0641  00CF               	movwf	compensate_temperature@var2+2
  7930  0642  0839               	movf	??_compensate_temperature+7,w
  7931  0643  00CE               	movwf	compensate_temperature@var2+1
  7932  0644  0838               	movf	??_compensate_temperature+6,w
  7933  0645  00CD               	movwf	compensate_temperature@var2
  7934                           
  7935                           ;BME280_driver/bme280.c: 1138:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  7936  0646  3000               	movlw	0
  7937  0647  00A3               	movwf	___aldiv@divisor+3
  7938  0648  3000               	movlw	0
  7939  0649  00A2               	movwf	___aldiv@divisor+2
  7940  064A  3010               	movlw	16
  7941  064B  00A1               	movwf	___aldiv@divisor+1
  7942  064C  3000               	movlw	0
  7943  064D  00A0               	movwf	___aldiv@divisor
  7944  064E  0850               	movf	compensate_temperature@var2+3,w
  7945  064F  00F3               	movwf	___lmul@multiplier+3
  7946  0650  084F               	movf	compensate_temperature@var2+2,w
  7947  0651  00F2               	movwf	___lmul@multiplier+2
  7948  0652  084E               	movf	compensate_temperature@var2+1,w
  7949  0653  00F1               	movwf	___lmul@multiplier+1
  7950  0654  084D               	movf	compensate_temperature@var2,w
  7951  0655  00F0               	movwf	___lmul@multiplier
  7952  0656  0850               	movf	compensate_temperature@var2+3,w
  7953  0657  00F7               	movwf	___lmul@multiplicand+3
  7954  0658  084F               	movf	compensate_temperature@var2+2,w
  7955  0659  00F6               	movwf	___lmul@multiplicand+2
  7956  065A  084E               	movf	compensate_temperature@var2+1,w
  7957  065B  00F5               	movwf	___lmul@multiplicand+1
  7958  065C  084D               	movf	compensate_temperature@var2,w
  7959  065D  00F4               	movwf	___lmul@multiplicand
  7960  065E  319C  2491  3185   	fcall	___lmul
  7961  0661  0873               	movf	?___lmul+3,w
  7962  0662  0020               	movlb	0	; select bank0
  7963  0663  00A7               	movwf	___aldiv@dividend+3
  7964  0664  0872               	movf	?___lmul+2,w
  7965  0665  00A6               	movwf	___aldiv@dividend+2
  7966  0666  0871               	movf	?___lmul+1,w
  7967  0667  00A5               	movwf	___aldiv@dividend+1
  7968  0668  0870               	movf	?___lmul,w
  7969  0669  00A4               	movwf	___aldiv@dividend
  7970  066A  3196  265B  3185   	fcall	___aldiv
  7971  066D  0823               	movf	?___aldiv+3,w
  7972  066E  00BF               	movwf	_compensate_temperature$2262+3
  7973  066F  0822               	movf	?___aldiv+2,w
  7974  0670  00BE               	movwf	_compensate_temperature$2262+2
  7975  0671  0821               	movf	?___aldiv+1,w
  7976  0672  00BD               	movwf	_compensate_temperature$2262+1
  7977  0673  0820               	movf	?___aldiv,w
  7978  0674  00BC               	movwf	_compensate_temperature$2262
  7979                           
  7980                           ;BME280_driver/bme280.c: 1138:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  7981  0675  3000               	movlw	0
  7982  0676  00A3               	movwf	___aldiv@divisor+3
  7983  0677  3000               	movlw	0
  7984  0678  00A2               	movwf	___aldiv@divisor+2
  7985  0679  3040               	movlw	64
  7986  067A  00A1               	movwf	___aldiv@divisor+1
  7987  067B  3000               	movlw	0
  7988  067C  00A0               	movwf	___aldiv@divisor
  7989  067D  083F               	movf	_compensate_temperature$2262+3,w
  7990  067E  00F3               	movwf	___lmul@multiplier+3
  7991  067F  083E               	movf	_compensate_temperature$2262+2,w
  7992  0680  00F2               	movwf	___lmul@multiplier+2
  7993  0681  083D               	movf	_compensate_temperature$2262+1,w
  7994  0682  00F1               	movwf	___lmul@multiplier+1
  7995  0683  083C               	movf	_compensate_temperature$2262,w
  7996  0684  00F0               	movwf	___lmul@multiplier
  7997  0685  082E               	movf	compensate_temperature@calib_data,w
  7998  0686  3E04               	addlw	4
  7999  0687  0086               	movwf	6
  8000  0688  3001               	movlw	1	; select bank2/3
  8001  0689  0087               	movwf	7
  8002  068A  3F40               	moviw [0]fsr1
  8003  068B  00B2               	movwf	??_compensate_temperature
  8004  068C  3F41               	moviw [1]fsr1
  8005  068D  00B3               	movwf	??_compensate_temperature+1
  8006  068E  0832               	movf	??_compensate_temperature,w
  8007  068F  00F4               	movwf	___lmul@multiplicand
  8008  0690  0833               	movf	??_compensate_temperature+1,w
  8009  0691  00F5               	movwf	___lmul@multiplicand+1
  8010  0692  0D89               	rlf	9,f
  8011  0693  3B89               	subwfb	9,f
  8012  0694  0989               	comf	9,f
  8013  0695  00F6               	movwf	___lmul@multiplicand+2
  8014  0696  00F7               	movwf	___lmul@multiplicand+3
  8015  0697  319C  2491  3185   	fcall	___lmul
  8016  069A  0873               	movf	?___lmul+3,w
  8017  069B  0020               	movlb	0	; select bank0
  8018  069C  00A7               	movwf	___aldiv@dividend+3
  8019  069D  0872               	movf	?___lmul+2,w
  8020  069E  00A6               	movwf	___aldiv@dividend+2
  8021  069F  0871               	movf	?___lmul+1,w
  8022  06A0  00A5               	movwf	___aldiv@dividend+1
  8023  06A1  0870               	movf	?___lmul,w
  8024  06A2  00A4               	movwf	___aldiv@dividend
  8025  06A3  3196  265B  3185   	fcall	___aldiv
  8026  06A6  0823               	movf	?___aldiv+3,w
  8027  06A7  00D0               	movwf	compensate_temperature@var2+3
  8028  06A8  0822               	movf	?___aldiv+2,w
  8029  06A9  00CF               	movwf	compensate_temperature@var2+2
  8030  06AA  0821               	movf	?___aldiv+1,w
  8031  06AB  00CE               	movwf	compensate_temperature@var2+1
  8032  06AC  0820               	movf	?___aldiv,w
  8033  06AD  00CD               	movwf	compensate_temperature@var2
  8034                           
  8035                           ;BME280_driver/bme280.c: 1139:     calib_data->t_fine = var1 + var2;
  8036  06AE  0848               	movf	compensate_temperature@var1,w
  8037  06AF  074D               	addwf	compensate_temperature@var2,w
  8038  06B0  00B2               	movwf	??_compensate_temperature
  8039  06B1  0849               	movf	compensate_temperature@var1+1,w
  8040  06B2  3D4E               	addwfc	compensate_temperature@var2+1,w
  8041  06B3  00B3               	movwf	??_compensate_temperature+1
  8042  06B4  084A               	movf	compensate_temperature@var1+2,w
  8043  06B5  3D4F               	addwfc	compensate_temperature@var2+2,w
  8044  06B6  00B4               	movwf	??_compensate_temperature+2
  8045  06B7  084B               	movf	compensate_temperature@var1+3,w
  8046  06B8  3D50               	addwfc	compensate_temperature@var2+3,w
  8047  06B9  00B5               	movwf	??_compensate_temperature+3
  8048  06BA  082E               	movf	compensate_temperature@calib_data,w
  8049  06BB  3E21               	addlw	33
  8050  06BC  0086               	movwf	6
  8051  06BD  3001               	movlw	1	; select bank2/3
  8052  06BE  0087               	movwf	7
  8053  06BF  0832               	movf	??_compensate_temperature,w
  8054  06C0  3FC0               	movwi [0]fsr1
  8055  06C1  0833               	movf	??_compensate_temperature+1,w
  8056  06C2  3FC1               	movwi [1]fsr1
  8057  06C3  0834               	movf	??_compensate_temperature+2,w
  8058  06C4  3FC2               	movwi [2]fsr1
  8059  06C5  0835               	movf	??_compensate_temperature+3,w
  8060  06C6  3FC3               	movwi [3]fsr1
  8061                           
  8062                           ;BME280_driver/bme280.c: 1140:     temperature = (calib_data->t_fine * 5 + 128) / 256;
  8063  06C7  3000               	movlw	0
  8064  06C8  00A3               	movwf	___aldiv@divisor+3
  8065  06C9  3000               	movlw	0
  8066  06CA  00A2               	movwf	___aldiv@divisor+2
  8067  06CB  3001               	movlw	1
  8068  06CC  00A1               	movwf	___aldiv@divisor+1
  8069  06CD  3000               	movlw	0
  8070  06CE  00A0               	movwf	___aldiv@divisor
  8071  06CF  3080               	movlw	128
  8072  06D0  00B2               	movwf	??_compensate_temperature
  8073  06D1  3000               	movlw	0
  8074  06D2  00B3               	movwf	??_compensate_temperature+1
  8075  06D3  3000               	movlw	0
  8076  06D4  00B4               	movwf	??_compensate_temperature+2
  8077  06D5  3000               	movlw	0
  8078  06D6  00B5               	movwf	??_compensate_temperature+3
  8079  06D7  082E               	movf	compensate_temperature@calib_data,w
  8080  06D8  3E21               	addlw	33
  8081  06D9  0086               	movwf	6
  8082  06DA  3001               	movlw	1	; select bank2/3
  8083  06DB  0087               	movwf	7
  8084  06DC  3F40               	moviw [0]fsr1
  8085  06DD  00F0               	movwf	___lmul@multiplier
  8086  06DE  3F41               	moviw [1]fsr1
  8087  06DF  00F1               	movwf	___lmul@multiplier+1
  8088  06E0  3F42               	moviw [2]fsr1
  8089  06E1  00F2               	movwf	___lmul@multiplier+2
  8090  06E2  3F43               	moviw [3]fsr1
  8091  06E3  00F3               	movwf	___lmul@multiplier+3
  8092  06E4  3000               	movlw	0
  8093  06E5  00F7               	movwf	___lmul@multiplicand+3
  8094  06E6  3000               	movlw	0
  8095  06E7  00F6               	movwf	___lmul@multiplicand+2
  8096  06E8  3000               	movlw	0
  8097  06E9  00F5               	movwf	___lmul@multiplicand+1
  8098  06EA  3005               	movlw	5
  8099  06EB  00F4               	movwf	___lmul@multiplicand
  8100  06EC  319C  2491  3185   	fcall	___lmul
  8101  06EF  0870               	movf	?___lmul,w
  8102  06F0  0020               	movlb	0	; select bank0
  8103  06F1  07B2               	addwf	??_compensate_temperature,f
  8104  06F2  0871               	movf	?___lmul+1,w
  8105  06F3  3DB3               	addwfc	??_compensate_temperature+1,f
  8106  06F4  0872               	movf	?___lmul+2,w
  8107  06F5  3DB4               	addwfc	??_compensate_temperature+2,f
  8108  06F6  0873               	movf	?___lmul+3,w
  8109  06F7  3DB5               	addwfc	??_compensate_temperature+3,f
  8110  06F8  0835               	movf	??_compensate_temperature+3,w
  8111  06F9  00A7               	movwf	___aldiv@dividend+3
  8112  06FA  0834               	movf	??_compensate_temperature+2,w
  8113  06FB  00A6               	movwf	___aldiv@dividend+2
  8114  06FC  0833               	movf	??_compensate_temperature+1,w
  8115  06FD  00A5               	movwf	___aldiv@dividend+1
  8116  06FE  0832               	movf	??_compensate_temperature,w
  8117  06FF  00A4               	movwf	___aldiv@dividend
  8118  0700  3196  265B  3185   	fcall	___aldiv
  8119  0703  0823               	movf	?___aldiv+3,w
  8120  0704  00D4               	movwf	compensate_temperature@temperature+3
  8121  0705  0822               	movf	?___aldiv+2,w
  8122  0706  00D3               	movwf	compensate_temperature@temperature+2
  8123  0707  0821               	movf	?___aldiv+1,w
  8124  0708  00D2               	movwf	compensate_temperature@temperature+1
  8125  0709  0820               	movf	?___aldiv,w
  8126  070A  00D1               	movwf	compensate_temperature@temperature
  8127                           
  8128                           ;BME280_driver/bme280.c: 1141:     if (temperature < temperature_min)
  8129  070B  1FD4               	btfss	compensate_temperature@temperature+3,7
  8130  070C  2F1F               	goto	l4286
  8131  070D  3060               	movlw	96
  8132  070E  0251               	subwf	compensate_temperature@temperature,w
  8133  070F  30F0               	movlw	240
  8134  0710  3B52               	subwfb	compensate_temperature@temperature+1,w
  8135  0711  30FF               	movlw	255
  8136  0712  3B53               	subwfb	compensate_temperature@temperature+2,w
  8137  0713  30FF               	movlw	255
  8138  0714  3B54               	subwfb	compensate_temperature@temperature+3,w
  8139  0715  1803               	btfsc	3,0
  8140  0716  2F1F               	goto	l4286
  8141                           
  8142                           ;BME280_driver/bme280.c: 1142:     {;BME280_driver/bme280.c: 1143:         temperature =
      +                           temperature_min;
  8143  0717  30FF               	movlw	255
  8144  0718  00D4               	movwf	compensate_temperature@temperature+3
  8145  0719  30FF               	movlw	255
  8146  071A  00D3               	movwf	compensate_temperature@temperature+2
  8147  071B  30F0               	movlw	240
  8148  071C  00D2               	movwf	compensate_temperature@temperature+1
  8149  071D  3060               	movlw	96
  8150  071E  2F34               	goto	L2
  8151  071F                     l4286:	
  8152                           ;BME280_driver/bme280.c: 1144:     }
  8153                           
  8154  071F  1BD4               	btfsc	compensate_temperature@temperature+3,7
  8155  0720  2F35               	goto	l185
  8156  0721  0854               	movf	compensate_temperature@temperature+3,w
  8157  0722  1D03               	btfss	3,2
  8158  0723  2F2D               	goto	l4288
  8159  0724  0853               	movf	compensate_temperature@temperature+2,w
  8160  0725  1D03               	btfss	3,2
  8161  0726  2F2D               	goto	l4288
  8162  0727  3035               	movlw	53
  8163  0728  0251               	subwf	compensate_temperature@temperature,w
  8164  0729  3021               	movlw	33
  8165  072A  3B52               	subwfb	compensate_temperature@temperature+1,w
  8166  072B  1C03               	btfss	3,0
  8167  072C  2F35               	goto	l185
  8168  072D                     l4288:	
  8169                           
  8170                           ;BME280_driver/bme280.c: 1146:     {;BME280_driver/bme280.c: 1147:         temperature =
      +                           temperature_max;
  8171  072D  3000               	movlw	0
  8172  072E  00D4               	movwf	compensate_temperature@temperature+3
  8173  072F  3000               	movlw	0
  8174  0730  00D3               	movwf	compensate_temperature@temperature+2
  8175  0731  3021               	movlw	33
  8176  0732  00D2               	movwf	compensate_temperature@temperature+1
  8177  0733  3034               	movlw	52
  8178  0734                     L2:	
  8179  0734  00D1               	movwf	compensate_temperature@temperature
  8180  0735                     l185:	
  8181                           
  8182                           ;BME280_driver/bme280.c: 1150:     return temperature;
  8183  0735  0854               	movf	compensate_temperature@temperature+3,w
  8184  0736  00B1               	movwf	?_compensate_temperature+3
  8185  0737  0853               	movf	compensate_temperature@temperature+2,w
  8186  0738  00B0               	movwf	?_compensate_temperature+2
  8187  0739  0852               	movf	compensate_temperature@temperature+1,w
  8188  073A  00AF               	movwf	?_compensate_temperature+1
  8189  073B  0851               	movf	compensate_temperature@temperature,w
  8190  073C  00AE               	movwf	?_compensate_temperature
  8191  073D  0008               	return
  8192  073E                     __end_of_compensate_temperature:	
  8193                           
  8194                           	psect	text7
  8195  0053                     __ptext7:	
  8196 ;; *************** function _compensate_pressure *****************
  8197 ;; Defined at:
  8198 ;;		line 1209 in file "BME280_driver/bme280.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  8201 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8202 ;;  calib_data      1   14[BANK0 ] PTR const struct bme280_
  8203 ;;		 -> EnvSensor(51), 
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;  uncomp_data     1   20[BANK1 ] PTR const struct bme280_
  8206 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8207 ;;  var1            4   41[BANK1 ] long 
  8208 ;;  pressure        4   37[BANK1 ] unsigned long 
  8209 ;;  var2            4   33[BANK1 ] long 
  8210 ;;  pressure_min    4    0        unsigned long 
  8211 ;;  pressure_max    4   21[BANK1 ] unsigned long 
  8212 ;;  var5            4    8[BANK1 ] unsigned long 
  8213 ;;  var4            4    4[BANK1 ] long 
  8214 ;;  var3            4    0[BANK1 ] long 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  4   14[BANK0 ] unsigned long 
  8217 ;; Registers used:
  8218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8219 ;; Tracked objects:
  8220 ;;		On entry : 1F/0
  8221 ;;		On exit  : 1F/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8224 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Locals:         0       0      45       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Totals:         0      22      45       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;Total ram usage:       67 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    4
  8231 ;; This function calls:
  8232 ;;		___aldiv
  8233 ;;		___lldiv
  8234 ;;		___lmul
  8235 ;; This function is called by:
  8236 ;;		_bme280_compensate_data
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           
  8241                           ;psect for function _compensate_pressure
  8242  0053                     _compensate_pressure:	
  8243                           
  8244                           ;incstack = 0
  8245                           ; Regs used in _compensate_pressure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8246                           ;compensate_pressure@uncomp_data stored from wreg
  8247  0053  0021               	movlb	1	; select bank1
  8248  0054  00B4               	movwf	compensate_pressure@uncomp_data^(0+128)
  8249                           
  8250                           ;BME280_driver/bme280.c: 1219:     uint32_t pressure_max = 110000;
  8251  0055  3000               	movlw	0
  8252  0056  00B8               	movwf	(compensate_pressure@pressure_max+3)^(0+128)
  8253  0057  3001               	movlw	1
  8254  0058  00B7               	movwf	(compensate_pressure@pressure_max+2)^(0+128)
  8255  0059  30AD               	movlw	173
  8256  005A  00B6               	movwf	(compensate_pressure@pressure_max+1)^(0+128)
  8257  005B  30B0               	movlw	176
  8258  005C  00B5               	movwf	compensate_pressure@pressure_max^(0+128)
  8259                           
  8260                           ;BME280_driver/bme280.c: 1221:     var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t
      +                          )64000;
  8261  005D  3000               	movlw	0
  8262  005E  0020               	movlb	0	; select bank0
  8263  005F  00A3               	movwf	___aldiv@divisor+3
  8264  0060  3000               	movlw	0
  8265  0061  00A2               	movwf	___aldiv@divisor+2
  8266  0062  3000               	movlw	0
  8267  0063  00A1               	movwf	___aldiv@divisor+1
  8268  0064  3002               	movlw	2
  8269  0065  00A0               	movwf	___aldiv@divisor
  8270  0066  082E               	movf	compensate_pressure@calib_data,w
  8271  0067  3E21               	addlw	33
  8272  0068  0086               	movwf	6
  8273  0069  3001               	movlw	1	; select bank2/3
  8274  006A  0087               	movwf	7
  8275  006B  3F40               	moviw [0]fsr1
  8276  006C  00A4               	movwf	___aldiv@dividend
  8277  006D  3F41               	moviw [1]fsr1
  8278  006E  00A5               	movwf	___aldiv@dividend+1
  8279  006F  3F42               	moviw [2]fsr1
  8280  0070  00A6               	movwf	___aldiv@dividend+2
  8281  0071  3F43               	moviw [3]fsr1
  8282  0072  00A7               	movwf	___aldiv@dividend+3
  8283  0073  3196  265B  3180   	fcall	___aldiv
  8284  0076  3000               	movlw	0
  8285  0077  0720               	addwf	?___aldiv,w
  8286  0078  0021               	movlb	1	; select bank1
  8287  0079  00C9               	movwf	compensate_pressure@var1^(0+128)
  8288  007A  3006               	movlw	6
  8289  007B  0020               	movlb	0	; select bank0
  8290  007C  3D21               	addwfc	?___aldiv+1,w
  8291  007D  0021               	movlb	1	; select bank1
  8292  007E  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
  8293  007F  30FF               	movlw	255
  8294  0080  0020               	movlb	0	; select bank0
  8295  0081  3D22               	addwfc	?___aldiv+2,w
  8296  0082  0021               	movlb	1	; select bank1
  8297  0083  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
  8298  0084  30FF               	movlw	255
  8299  0085  0020               	movlb	0	; select bank0
  8300  0086  3D23               	addwfc	?___aldiv+3,w
  8301  0087  0021               	movlb	1	; select bank1
  8302  0088  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
  8303                           
  8304                           ;BME280_driver/bme280.c: 1222:     var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t
      +                          )calib_data->dig_P6);
  8305  0089  3000               	movlw	0
  8306  008A  0020               	movlb	0	; select bank0
  8307  008B  00A3               	movwf	___aldiv@divisor+3
  8308  008C  3000               	movlw	0
  8309  008D  00A2               	movwf	___aldiv@divisor+2
  8310  008E  3000               	movlw	0
  8311  008F  00A1               	movwf	___aldiv@divisor+1
  8312  0090  3004               	movlw	4
  8313  0091  00A0               	movwf	___aldiv@divisor
  8314  0092  0021               	movlb	1	; select bank1
  8315  0093  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8316  0094  0020               	movlb	0	; select bank0
  8317  0095  00A7               	movwf	___aldiv@dividend+3
  8318  0096  0021               	movlb	1	; select bank1
  8319  0097  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8320  0098  0020               	movlb	0	; select bank0
  8321  0099  00A6               	movwf	___aldiv@dividend+2
  8322  009A  0021               	movlb	1	; select bank1
  8323  009B  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8324  009C  0020               	movlb	0	; select bank0
  8325  009D  00A5               	movwf	___aldiv@dividend+1
  8326  009E  0021               	movlb	1	; select bank1
  8327  009F  0849               	movf	compensate_pressure@var1^(0+128),w
  8328  00A0  0020               	movlb	0	; select bank0
  8329  00A1  00A4               	movwf	___aldiv@dividend
  8330  00A2  3196  265B  3180   	fcall	___aldiv
  8331  00A5  0823               	movf	?___aldiv+3,w
  8332  00A6  00F3               	movwf	___lmul@multiplier+3
  8333  00A7  0822               	movf	?___aldiv+2,w
  8334  00A8  00F2               	movwf	___lmul@multiplier+2
  8335  00A9  0821               	movf	?___aldiv+1,w
  8336  00AA  00F1               	movwf	___lmul@multiplier+1
  8337  00AB  0820               	movf	?___aldiv,w
  8338  00AC  00F0               	movwf	___lmul@multiplier
  8339  00AD  3000               	movlw	0
  8340  00AE  00A3               	movwf	___aldiv@divisor+3
  8341  00AF  3000               	movlw	0
  8342  00B0  00A2               	movwf	___aldiv@divisor+2
  8343  00B1  3000               	movlw	0
  8344  00B2  00A1               	movwf	___aldiv@divisor+1
  8345  00B3  3004               	movlw	4
  8346  00B4  00A0               	movwf	___aldiv@divisor
  8347  00B5  0021               	movlb	1	; select bank1
  8348  00B6  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8349  00B7  0020               	movlb	0	; select bank0
  8350  00B8  00A7               	movwf	___aldiv@dividend+3
  8351  00B9  0021               	movlb	1	; select bank1
  8352  00BA  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8353  00BB  0020               	movlb	0	; select bank0
  8354  00BC  00A6               	movwf	___aldiv@dividend+2
  8355  00BD  0021               	movlb	1	; select bank1
  8356  00BE  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8357  00BF  0020               	movlb	0	; select bank0
  8358  00C0  00A5               	movwf	___aldiv@dividend+1
  8359  00C1  0021               	movlb	1	; select bank1
  8360  00C2  0849               	movf	compensate_pressure@var1^(0+128),w
  8361  00C3  0020               	movlb	0	; select bank0
  8362  00C4  00A4               	movwf	___aldiv@dividend
  8363  00C5  3196  265B  3180   	fcall	___aldiv
  8364  00C8  0823               	movf	?___aldiv+3,w
  8365  00C9  00F7               	movwf	___lmul@multiplicand+3
  8366  00CA  0822               	movf	?___aldiv+2,w
  8367  00CB  00F6               	movwf	___lmul@multiplicand+2
  8368  00CC  0821               	movf	?___aldiv+1,w
  8369  00CD  00F5               	movwf	___lmul@multiplicand+1
  8370  00CE  0820               	movf	?___aldiv,w
  8371  00CF  00F4               	movwf	___lmul@multiplicand
  8372  00D0  319C  2491  3180   	fcall	___lmul
  8373  00D3  0873               	movf	?___lmul+3,w
  8374  00D4  0021               	movlb	1	; select bank1
  8375  00D5  00BC               	movwf	(_compensate_pressure$2263+3)^(0+128)
  8376  00D6  0872               	movf	?___lmul+2,w
  8377  00D7  00BB               	movwf	(_compensate_pressure$2263+2)^(0+128)
  8378  00D8  0871               	movf	?___lmul+1,w
  8379  00D9  00BA               	movwf	(_compensate_pressure$2263+1)^(0+128)
  8380  00DA  0870               	movf	?___lmul,w
  8381  00DB  00B9               	movwf	_compensate_pressure$2263^(0+128)
  8382                           
  8383                           ;BME280_driver/bme280.c: 1222:     var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t
      +                          )calib_data->dig_P6);
  8384  00DC  3000               	movlw	0
  8385  00DD  0020               	movlb	0	; select bank0
  8386  00DE  00A3               	movwf	___aldiv@divisor+3
  8387  00DF  3000               	movlw	0
  8388  00E0  00A2               	movwf	___aldiv@divisor+2
  8389  00E1  3008               	movlw	8
  8390  00E2  00A1               	movwf	___aldiv@divisor+1
  8391  00E3  3000               	movlw	0
  8392  00E4  00A0               	movwf	___aldiv@divisor
  8393  00E5  0021               	movlb	1	; select bank1
  8394  00E6  083C               	movf	(_compensate_pressure$2263+3)^(0+128),w
  8395  00E7  0020               	movlb	0	; select bank0
  8396  00E8  00A7               	movwf	___aldiv@dividend+3
  8397  00E9  0021               	movlb	1	; select bank1
  8398  00EA  083B               	movf	(_compensate_pressure$2263+2)^(0+128),w
  8399  00EB  0020               	movlb	0	; select bank0
  8400  00EC  00A6               	movwf	___aldiv@dividend+2
  8401  00ED  0021               	movlb	1	; select bank1
  8402  00EE  083A               	movf	(_compensate_pressure$2263+1)^(0+128),w
  8403  00EF  0020               	movlb	0	; select bank0
  8404  00F0  00A5               	movwf	___aldiv@dividend+1
  8405  00F1  0021               	movlb	1	; select bank1
  8406  00F2  0839               	movf	_compensate_pressure$2263^(0+128),w
  8407  00F3  0020               	movlb	0	; select bank0
  8408  00F4  00A4               	movwf	___aldiv@dividend
  8409  00F5  3196  265B  3180   	fcall	___aldiv
  8410  00F8  0823               	movf	?___aldiv+3,w
  8411  00F9  00F3               	movwf	___lmul@multiplier+3
  8412  00FA  0822               	movf	?___aldiv+2,w
  8413  00FB  00F2               	movwf	___lmul@multiplier+2
  8414  00FC  0821               	movf	?___aldiv+1,w
  8415  00FD  00F1               	movwf	___lmul@multiplier+1
  8416  00FE  0820               	movf	?___aldiv,w
  8417  00FF  00F0               	movwf	___lmul@multiplier
  8418  0100  082E               	movf	compensate_pressure@calib_data,w
  8419  0101  3E10               	addlw	16
  8420  0102  0086               	movwf	6
  8421  0103  3001               	movlw	1	; select bank2/3
  8422  0104  0087               	movwf	7
  8423  0105  3F40               	moviw [0]fsr1
  8424  0106  00B2               	movwf	??_compensate_pressure
  8425  0107  3F41               	moviw [1]fsr1
  8426  0108  00B3               	movwf	??_compensate_pressure+1
  8427  0109  0832               	movf	??_compensate_pressure,w
  8428  010A  00F4               	movwf	___lmul@multiplicand
  8429  010B  0833               	movf	??_compensate_pressure+1,w
  8430  010C  00F5               	movwf	___lmul@multiplicand+1
  8431  010D  0D89               	rlf	9,f
  8432  010E  3B89               	subwfb	9,f
  8433  010F  0989               	comf	9,f
  8434  0110  00F6               	movwf	___lmul@multiplicand+2
  8435  0111  00F7               	movwf	___lmul@multiplicand+3
  8436  0112  319C  2491  3180   	fcall	___lmul
  8437  0115  0873               	movf	?___lmul+3,w
  8438  0116  0021               	movlb	1	; select bank1
  8439  0117  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
  8440  0118  0872               	movf	?___lmul+2,w
  8441  0119  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
  8442  011A  0871               	movf	?___lmul+1,w
  8443  011B  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
  8444  011C  0870               	movf	?___lmul,w
  8445  011D  00C1               	movwf	compensate_pressure@var2^(0+128)
  8446                           
  8447                           ;BME280_driver/bme280.c: 1223:     var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5))
      +                           * 2);
  8448  011E  0841               	movf	compensate_pressure@var2^(0+128),w
  8449  011F  0020               	movlb	0	; select bank0
  8450  0120  00B2               	movwf	??_compensate_pressure
  8451  0121  0021               	movlb	1	; select bank1
  8452  0122  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
  8453  0123  0020               	movlb	0	; select bank0
  8454  0124  00B3               	movwf	??_compensate_pressure+1
  8455  0125  0021               	movlb	1	; select bank1
  8456  0126  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
  8457  0127  0020               	movlb	0	; select bank0
  8458  0128  00B4               	movwf	??_compensate_pressure+2
  8459  0129  0021               	movlb	1	; select bank1
  8460  012A  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
  8461  012B  0020               	movlb	0	; select bank0
  8462  012C  00B5               	movwf	??_compensate_pressure+3
  8463  012D  082E               	movf	compensate_pressure@calib_data,w
  8464  012E  3E0E               	addlw	14
  8465  012F  0086               	movwf	6
  8466  0130  3001               	movlw	1	; select bank2/3
  8467  0131  0087               	movwf	7
  8468  0132  3F40               	moviw [0]fsr1
  8469  0133  00B6               	movwf	??_compensate_pressure+4
  8470  0134  3F41               	moviw [1]fsr1
  8471  0135  00B7               	movwf	??_compensate_pressure+5
  8472  0136  0836               	movf	??_compensate_pressure+4,w
  8473  0137  00F0               	movwf	___lmul@multiplier
  8474  0138  0837               	movf	??_compensate_pressure+5,w
  8475  0139  00F1               	movwf	___lmul@multiplier+1
  8476  013A  0D89               	rlf	9,f
  8477  013B  3B89               	subwfb	9,f
  8478  013C  0989               	comf	9,f
  8479  013D  00F2               	movwf	___lmul@multiplier+2
  8480  013E  00F3               	movwf	___lmul@multiplier+3
  8481  013F  0021               	movlb	1	; select bank1
  8482  0140  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8483  0141  00F7               	movwf	___lmul@multiplicand+3
  8484  0142  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8485  0143  00F6               	movwf	___lmul@multiplicand+2
  8486  0144  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8487  0145  00F5               	movwf	___lmul@multiplicand+1
  8488  0146  0849               	movf	compensate_pressure@var1^(0+128),w
  8489  0147  00F4               	movwf	___lmul@multiplicand
  8490  0148  319C  2491  3180   	fcall	___lmul
  8491  014B  0870               	movf	?___lmul,w
  8492  014C  0020               	movlb	0	; select bank0
  8493  014D  00B8               	movwf	??_compensate_pressure+6
  8494  014E  0871               	movf	?___lmul+1,w
  8495  014F  00B9               	movwf	??_compensate_pressure+7
  8496  0150  0872               	movf	?___lmul+2,w
  8497  0151  00BA               	movwf	??_compensate_pressure+8
  8498  0152  0873               	movf	?___lmul+3,w
  8499  0153  00BB               	movwf	??_compensate_pressure+9
  8500  0154  3001               	movlw	1
  8501  0155                     u4685:	
  8502  0155  35B8               	lslf	??_compensate_pressure+6,f
  8503  0156  0DB9               	rlf	??_compensate_pressure+7,f
  8504  0157  0DBA               	rlf	??_compensate_pressure+8,f
  8505  0158  0DBB               	rlf	??_compensate_pressure+9,f
  8506  0159  0B89               	decfsz	9,f
  8507  015A  2955               	goto	u4685
  8508  015B  0838               	movf	??_compensate_pressure+6,w
  8509  015C  07B2               	addwf	??_compensate_pressure,f
  8510  015D  0839               	movf	??_compensate_pressure+7,w
  8511  015E  3DB3               	addwfc	??_compensate_pressure+1,f
  8512  015F  083A               	movf	??_compensate_pressure+8,w
  8513  0160  3DB4               	addwfc	??_compensate_pressure+2,f
  8514  0161  083B               	movf	??_compensate_pressure+9,w
  8515  0162  3DB5               	addwfc	??_compensate_pressure+3,f
  8516  0163  0835               	movf	??_compensate_pressure+3,w
  8517  0164  0021               	movlb	1	; select bank1
  8518  0165  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
  8519  0166  0020               	movlb	0	; select bank0
  8520  0167  0834               	movf	??_compensate_pressure+2,w
  8521  0168  0021               	movlb	1	; select bank1
  8522  0169  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
  8523  016A  0020               	movlb	0	; select bank0
  8524  016B  0833               	movf	??_compensate_pressure+1,w
  8525  016C  0021               	movlb	1	; select bank1
  8526  016D  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
  8527  016E  0020               	movlb	0	; select bank0
  8528  016F  0832               	movf	??_compensate_pressure,w
  8529  0170  0021               	movlb	1	; select bank1
  8530  0171  00C1               	movwf	compensate_pressure@var2^(0+128)
  8531                           
  8532                           ;BME280_driver/bme280.c: 1224:     var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 
      +                          65536);
  8533  0172  0020               	movlb	0	; select bank0
  8534  0173  082E               	movf	compensate_pressure@calib_data,w
  8535  0174  3E0C               	addlw	12
  8536  0175  0086               	movwf	6
  8537  0176  3001               	movlw	1	; select bank2/3
  8538  0177  0087               	movwf	7
  8539  0178  3F40               	moviw [0]fsr1
  8540  0179  00B2               	movwf	??_compensate_pressure
  8541  017A  3F41               	moviw [1]fsr1
  8542  017B  00B3               	movwf	??_compensate_pressure+1
  8543  017C  0832               	movf	??_compensate_pressure,w
  8544  017D  00B4               	movwf	??_compensate_pressure+2
  8545  017E  0833               	movf	??_compensate_pressure+1,w
  8546  017F  00B5               	movwf	??_compensate_pressure+3
  8547  0180  01B6               	clrf	??_compensate_pressure+4
  8548  0181  01B7               	clrf	??_compensate_pressure+5
  8549  0182  3010               	movlw	16
  8550  0183                     u4695:	
  8551  0183  35B4               	lslf	??_compensate_pressure+2,f
  8552  0184  0DB5               	rlf	??_compensate_pressure+3,f
  8553  0185  0DB6               	rlf	??_compensate_pressure+4,f
  8554  0186  0DB7               	rlf	??_compensate_pressure+5,f
  8555  0187  0B89               	decfsz	9,f
  8556  0188  2983               	goto	u4695
  8557  0189  3000               	movlw	0
  8558  018A  00A3               	movwf	___aldiv@divisor+3
  8559  018B  3000               	movlw	0
  8560  018C  00A2               	movwf	___aldiv@divisor+2
  8561  018D  3000               	movlw	0
  8562  018E  00A1               	movwf	___aldiv@divisor+1
  8563  018F  3004               	movlw	4
  8564  0190  00A0               	movwf	___aldiv@divisor
  8565  0191  0021               	movlb	1	; select bank1
  8566  0192  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
  8567  0193  0020               	movlb	0	; select bank0
  8568  0194  00A7               	movwf	___aldiv@dividend+3
  8569  0195  0021               	movlb	1	; select bank1
  8570  0196  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
  8571  0197  0020               	movlb	0	; select bank0
  8572  0198  00A6               	movwf	___aldiv@dividend+2
  8573  0199  0021               	movlb	1	; select bank1
  8574  019A  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
  8575  019B  0020               	movlb	0	; select bank0
  8576  019C  00A5               	movwf	___aldiv@dividend+1
  8577  019D  0021               	movlb	1	; select bank1
  8578  019E  0841               	movf	compensate_pressure@var2^(0+128),w
  8579  019F  0020               	movlb	0	; select bank0
  8580  01A0  00A4               	movwf	___aldiv@dividend
  8581  01A1  3196  265B  3180   	fcall	___aldiv
  8582  01A4  0820               	movf	?___aldiv,w
  8583  01A5  07B4               	addwf	??_compensate_pressure+2,f
  8584  01A6  0821               	movf	?___aldiv+1,w
  8585  01A7  3DB5               	addwfc	??_compensate_pressure+3,f
  8586  01A8  0822               	movf	?___aldiv+2,w
  8587  01A9  3DB6               	addwfc	??_compensate_pressure+4,f
  8588  01AA  0823               	movf	?___aldiv+3,w
  8589  01AB  3DB7               	addwfc	??_compensate_pressure+5,f
  8590  01AC  0837               	movf	??_compensate_pressure+5,w
  8591  01AD  0021               	movlb	1	; select bank1
  8592  01AE  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
  8593  01AF  0020               	movlb	0	; select bank0
  8594  01B0  0836               	movf	??_compensate_pressure+4,w
  8595  01B1  0021               	movlb	1	; select bank1
  8596  01B2  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
  8597  01B3  0020               	movlb	0	; select bank0
  8598  01B4  0835               	movf	??_compensate_pressure+3,w
  8599  01B5  0021               	movlb	1	; select bank1
  8600  01B6  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
  8601  01B7  0020               	movlb	0	; select bank0
  8602  01B8  0834               	movf	??_compensate_pressure+2,w
  8603  01B9  0021               	movlb	1	; select bank1
  8604  01BA  00C1               	movwf	compensate_pressure@var2^(0+128)
  8605                           
  8606                           ;BME280_driver/bme280.c: 1225:     var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4
      +                          )) / 8192)) / 8;
  8607  01BB  3000               	movlw	0
  8608  01BC  0020               	movlb	0	; select bank0
  8609  01BD  00A3               	movwf	___aldiv@divisor+3
  8610  01BE  3000               	movlw	0
  8611  01BF  00A2               	movwf	___aldiv@divisor+2
  8612  01C0  3000               	movlw	0
  8613  01C1  00A1               	movwf	___aldiv@divisor+1
  8614  01C2  3004               	movlw	4
  8615  01C3  00A0               	movwf	___aldiv@divisor
  8616  01C4  0021               	movlb	1	; select bank1
  8617  01C5  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8618  01C6  0020               	movlb	0	; select bank0
  8619  01C7  00A7               	movwf	___aldiv@dividend+3
  8620  01C8  0021               	movlb	1	; select bank1
  8621  01C9  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8622  01CA  0020               	movlb	0	; select bank0
  8623  01CB  00A6               	movwf	___aldiv@dividend+2
  8624  01CC  0021               	movlb	1	; select bank1
  8625  01CD  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8626  01CE  0020               	movlb	0	; select bank0
  8627  01CF  00A5               	movwf	___aldiv@dividend+1
  8628  01D0  0021               	movlb	1	; select bank1
  8629  01D1  0849               	movf	compensate_pressure@var1^(0+128),w
  8630  01D2  0020               	movlb	0	; select bank0
  8631  01D3  00A4               	movwf	___aldiv@dividend
  8632  01D4  3196  265B  3180   	fcall	___aldiv
  8633  01D7  0823               	movf	?___aldiv+3,w
  8634  01D8  00F3               	movwf	___lmul@multiplier+3
  8635  01D9  0822               	movf	?___aldiv+2,w
  8636  01DA  00F2               	movwf	___lmul@multiplier+2
  8637  01DB  0821               	movf	?___aldiv+1,w
  8638  01DC  00F1               	movwf	___lmul@multiplier+1
  8639  01DD  0820               	movf	?___aldiv,w
  8640  01DE  00F0               	movwf	___lmul@multiplier
  8641  01DF  3000               	movlw	0
  8642  01E0  00A3               	movwf	___aldiv@divisor+3
  8643  01E1  3000               	movlw	0
  8644  01E2  00A2               	movwf	___aldiv@divisor+2
  8645  01E3  3000               	movlw	0
  8646  01E4  00A1               	movwf	___aldiv@divisor+1
  8647  01E5  3004               	movlw	4
  8648  01E6  00A0               	movwf	___aldiv@divisor
  8649  01E7  0021               	movlb	1	; select bank1
  8650  01E8  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8651  01E9  0020               	movlb	0	; select bank0
  8652  01EA  00A7               	movwf	___aldiv@dividend+3
  8653  01EB  0021               	movlb	1	; select bank1
  8654  01EC  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8655  01ED  0020               	movlb	0	; select bank0
  8656  01EE  00A6               	movwf	___aldiv@dividend+2
  8657  01EF  0021               	movlb	1	; select bank1
  8658  01F0  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8659  01F1  0020               	movlb	0	; select bank0
  8660  01F2  00A5               	movwf	___aldiv@dividend+1
  8661  01F3  0021               	movlb	1	; select bank1
  8662  01F4  0849               	movf	compensate_pressure@var1^(0+128),w
  8663  01F5  0020               	movlb	0	; select bank0
  8664  01F6  00A4               	movwf	___aldiv@dividend
  8665  01F7  3196  265B  3180   	fcall	___aldiv
  8666  01FA  0823               	movf	?___aldiv+3,w
  8667  01FB  00F7               	movwf	___lmul@multiplicand+3
  8668  01FC  0822               	movf	?___aldiv+2,w
  8669  01FD  00F6               	movwf	___lmul@multiplicand+2
  8670  01FE  0821               	movf	?___aldiv+1,w
  8671  01FF  00F5               	movwf	___lmul@multiplicand+1
  8672  0200  0820               	movf	?___aldiv,w
  8673  0201  00F4               	movwf	___lmul@multiplicand
  8674  0202  319C  2491  3180   	fcall	___lmul
  8675  0205  0873               	movf	?___lmul+3,w
  8676  0206  0021               	movlb	1	; select bank1
  8677  0207  00BC               	movwf	(_compensate_pressure$2263+3)^(0+128)
  8678  0208  0872               	movf	?___lmul+2,w
  8679  0209  00BB               	movwf	(_compensate_pressure$2263+2)^(0+128)
  8680  020A  0871               	movf	?___lmul+1,w
  8681  020B  00BA               	movwf	(_compensate_pressure$2263+1)^(0+128)
  8682  020C  0870               	movf	?___lmul,w
  8683  020D  00B9               	movwf	_compensate_pressure$2263^(0+128)
  8684                           
  8685                           ;BME280_driver/bme280.c: 1225:     var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4
      +                          )) / 8192)) / 8;
  8686  020E  0020               	movlb	0	; select bank0
  8687  020F  082E               	movf	compensate_pressure@calib_data,w
  8688  0210  3E0A               	addlw	10
  8689  0211  0086               	movwf	6
  8690  0212  3001               	movlw	1	; select bank2/3
  8691  0213  0087               	movwf	7
  8692  0214  3F40               	moviw [0]fsr1
  8693  0215  00B2               	movwf	??_compensate_pressure
  8694  0216  3F41               	moviw [1]fsr1
  8695  0217  00B3               	movwf	??_compensate_pressure+1
  8696  0218  0832               	movf	??_compensate_pressure,w
  8697  0219  00F0               	movwf	___lmul@multiplier
  8698  021A  0833               	movf	??_compensate_pressure+1,w
  8699  021B  00F1               	movwf	___lmul@multiplier+1
  8700  021C  0D89               	rlf	9,f
  8701  021D  3B89               	subwfb	9,f
  8702  021E  0989               	comf	9,f
  8703  021F  00F2               	movwf	___lmul@multiplier+2
  8704  0220  00F3               	movwf	___lmul@multiplier+3
  8705  0221  3000               	movlw	0
  8706  0222  00A3               	movwf	___aldiv@divisor+3
  8707  0223  3000               	movlw	0
  8708  0224  00A2               	movwf	___aldiv@divisor+2
  8709  0225  3020               	movlw	32
  8710  0226  00A1               	movwf	___aldiv@divisor+1
  8711  0227  3000               	movlw	0
  8712  0228  00A0               	movwf	___aldiv@divisor
  8713  0229  0021               	movlb	1	; select bank1
  8714  022A  083C               	movf	(_compensate_pressure$2263+3)^(0+128),w
  8715  022B  0020               	movlb	0	; select bank0
  8716  022C  00A7               	movwf	___aldiv@dividend+3
  8717  022D  0021               	movlb	1	; select bank1
  8718  022E  083B               	movf	(_compensate_pressure$2263+2)^(0+128),w
  8719  022F  0020               	movlb	0	; select bank0
  8720  0230  00A6               	movwf	___aldiv@dividend+2
  8721  0231  0021               	movlb	1	; select bank1
  8722  0232  083A               	movf	(_compensate_pressure$2263+1)^(0+128),w
  8723  0233  0020               	movlb	0	; select bank0
  8724  0234  00A5               	movwf	___aldiv@dividend+1
  8725  0235  0021               	movlb	1	; select bank1
  8726  0236  0839               	movf	_compensate_pressure$2263^(0+128),w
  8727  0237  0020               	movlb	0	; select bank0
  8728  0238  00A4               	movwf	___aldiv@dividend
  8729  0239  3196  265B  3180   	fcall	___aldiv
  8730  023C  0823               	movf	?___aldiv+3,w
  8731  023D  00F7               	movwf	___lmul@multiplicand+3
  8732  023E  0822               	movf	?___aldiv+2,w
  8733  023F  00F6               	movwf	___lmul@multiplicand+2
  8734  0240  0821               	movf	?___aldiv+1,w
  8735  0241  00F5               	movwf	___lmul@multiplicand+1
  8736  0242  0820               	movf	?___aldiv,w
  8737  0243  00F4               	movwf	___lmul@multiplicand
  8738  0244  319C  2491  3180   	fcall	___lmul
  8739  0247  0873               	movf	?___lmul+3,w
  8740  0248  0021               	movlb	1	; select bank1
  8741  0249  00AF               	movwf	(_compensate_pressure$2264+3)^(0+128)
  8742  024A  0872               	movf	?___lmul+2,w
  8743  024B  00AE               	movwf	(_compensate_pressure$2264+2)^(0+128)
  8744  024C  0871               	movf	?___lmul+1,w
  8745  024D  00AD               	movwf	(_compensate_pressure$2264+1)^(0+128)
  8746  024E  0870               	movf	?___lmul,w
  8747  024F  00AC               	movwf	_compensate_pressure$2264^(0+128)
  8748                           
  8749                           ;BME280_driver/bme280.c: 1225:     var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4
      +                          )) / 8192)) / 8;
  8750  0250  3000               	movlw	0
  8751  0251  0020               	movlb	0	; select bank0
  8752  0252  00A3               	movwf	___aldiv@divisor+3
  8753  0253  3000               	movlw	0
  8754  0254  00A2               	movwf	___aldiv@divisor+2
  8755  0255  3000               	movlw	0
  8756  0256  00A1               	movwf	___aldiv@divisor+1
  8757  0257  3008               	movlw	8
  8758  0258  00A0               	movwf	___aldiv@divisor
  8759  0259  0021               	movlb	1	; select bank1
  8760  025A  082F               	movf	(_compensate_pressure$2264+3)^(0+128),w
  8761  025B  0020               	movlb	0	; select bank0
  8762  025C  00A7               	movwf	___aldiv@dividend+3
  8763  025D  0021               	movlb	1	; select bank1
  8764  025E  082E               	movf	(_compensate_pressure$2264+2)^(0+128),w
  8765  025F  0020               	movlb	0	; select bank0
  8766  0260  00A6               	movwf	___aldiv@dividend+2
  8767  0261  0021               	movlb	1	; select bank1
  8768  0262  082D               	movf	(_compensate_pressure$2264+1)^(0+128),w
  8769  0263  0020               	movlb	0	; select bank0
  8770  0264  00A5               	movwf	___aldiv@dividend+1
  8771  0265  0021               	movlb	1	; select bank1
  8772  0266  082C               	movf	_compensate_pressure$2264^(0+128),w
  8773  0267  0020               	movlb	0	; select bank0
  8774  0268  00A4               	movwf	___aldiv@dividend
  8775  0269  3196  265B  3180   	fcall	___aldiv
  8776  026C  0823               	movf	?___aldiv+3,w
  8777  026D  0021               	movlb	1	; select bank1
  8778  026E  00A3               	movwf	(compensate_pressure@var3+3)^(0+128)
  8779  026F  0020               	movlb	0	; select bank0
  8780  0270  0822               	movf	?___aldiv+2,w
  8781  0271  0021               	movlb	1	; select bank1
  8782  0272  00A2               	movwf	(compensate_pressure@var3+2)^(0+128)
  8783  0273  0020               	movlb	0	; select bank0
  8784  0274  0821               	movf	?___aldiv+1,w
  8785  0275  0021               	movlb	1	; select bank1
  8786  0276  00A1               	movwf	(compensate_pressure@var3+1)^(0+128)
  8787  0277  0020               	movlb	0	; select bank0
  8788  0278  0820               	movf	?___aldiv,w
  8789  0279  0021               	movlb	1	; select bank1
  8790  027A  00A0               	movwf	compensate_pressure@var3^(0+128)
  8791                           
  8792                           ;BME280_driver/bme280.c: 1226:     var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
  8793  027B  3000               	movlw	0
  8794  027C  0020               	movlb	0	; select bank0
  8795  027D  00A3               	movwf	___aldiv@divisor+3
  8796  027E  3000               	movlw	0
  8797  027F  00A2               	movwf	___aldiv@divisor+2
  8798  0280  3000               	movlw	0
  8799  0281  00A1               	movwf	___aldiv@divisor+1
  8800  0282  3002               	movlw	2
  8801  0283  00A0               	movwf	___aldiv@divisor
  8802  0284  082E               	movf	compensate_pressure@calib_data,w
  8803  0285  3E08               	addlw	8
  8804  0286  0086               	movwf	6
  8805  0287  3001               	movlw	1	; select bank2/3
  8806  0288  0087               	movwf	7
  8807  0289  3F40               	moviw [0]fsr1
  8808  028A  00B2               	movwf	??_compensate_pressure
  8809  028B  3F41               	moviw [1]fsr1
  8810  028C  00B3               	movwf	??_compensate_pressure+1
  8811  028D  0832               	movf	??_compensate_pressure,w
  8812  028E  00F0               	movwf	___lmul@multiplier
  8813  028F  0833               	movf	??_compensate_pressure+1,w
  8814  0290  00F1               	movwf	___lmul@multiplier+1
  8815  0291  0D89               	rlf	9,f
  8816  0292  3B89               	subwfb	9,f
  8817  0293  0989               	comf	9,f
  8818  0294  00F2               	movwf	___lmul@multiplier+2
  8819  0295  00F3               	movwf	___lmul@multiplier+3
  8820  0296  0021               	movlb	1	; select bank1
  8821  0297  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8822  0298  00F7               	movwf	___lmul@multiplicand+3
  8823  0299  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  8824  029A  00F6               	movwf	___lmul@multiplicand+2
  8825  029B  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  8826  029C  00F5               	movwf	___lmul@multiplicand+1
  8827  029D  0849               	movf	compensate_pressure@var1^(0+128),w
  8828  029E  00F4               	movwf	___lmul@multiplicand
  8829  029F  319C  2491  3180   	fcall	___lmul
  8830  02A2  0873               	movf	?___lmul+3,w
  8831  02A3  0020               	movlb	0	; select bank0
  8832  02A4  00A7               	movwf	___aldiv@dividend+3
  8833  02A5  0872               	movf	?___lmul+2,w
  8834  02A6  00A6               	movwf	___aldiv@dividend+2
  8835  02A7  0871               	movf	?___lmul+1,w
  8836  02A8  00A5               	movwf	___aldiv@dividend+1
  8837  02A9  0870               	movf	?___lmul,w
  8838  02AA  00A4               	movwf	___aldiv@dividend
  8839  02AB  3196  265B  3180   	fcall	___aldiv
  8840  02AE  0823               	movf	?___aldiv+3,w
  8841  02AF  0021               	movlb	1	; select bank1
  8842  02B0  00A7               	movwf	(compensate_pressure@var4+3)^(0+128)
  8843  02B1  0020               	movlb	0	; select bank0
  8844  02B2  0822               	movf	?___aldiv+2,w
  8845  02B3  0021               	movlb	1	; select bank1
  8846  02B4  00A6               	movwf	(compensate_pressure@var4+2)^(0+128)
  8847  02B5  0020               	movlb	0	; select bank0
  8848  02B6  0821               	movf	?___aldiv+1,w
  8849  02B7  0021               	movlb	1	; select bank1
  8850  02B8  00A5               	movwf	(compensate_pressure@var4+1)^(0+128)
  8851  02B9  0020               	movlb	0	; select bank0
  8852  02BA  0820               	movf	?___aldiv,w
  8853  02BB  0021               	movlb	1	; select bank1
  8854  02BC  00A4               	movwf	compensate_pressure@var4^(0+128)
  8855                           
  8856                           ;BME280_driver/bme280.c: 1227:     var1 = (var3 + var4) / 262144;
  8857  02BD  3000               	movlw	0
  8858  02BE  0020               	movlb	0	; select bank0
  8859  02BF  00A3               	movwf	___aldiv@divisor+3
  8860  02C0  3004               	movlw	4
  8861  02C1  00A2               	movwf	___aldiv@divisor+2
  8862  02C2  3000               	movlw	0
  8863  02C3  00A1               	movwf	___aldiv@divisor+1
  8864  02C4  3000               	movlw	0
  8865  02C5  00A0               	movwf	___aldiv@divisor
  8866  02C6  0021               	movlb	1	; select bank1
  8867  02C7  0820               	movf	compensate_pressure@var3^(0+128),w
  8868  02C8  0724               	addwf	compensate_pressure@var4^(0+128),w
  8869  02C9  0020               	movlb	0	; select bank0
  8870  02CA  00B2               	movwf	??_compensate_pressure
  8871  02CB  0021               	movlb	1	; select bank1
  8872  02CC  0821               	movf	(compensate_pressure@var3+1)^(0+128),w
  8873  02CD  3D25               	addwfc	(compensate_pressure@var4+1)^(0+128),w
  8874  02CE  0020               	movlb	0	; select bank0
  8875  02CF  00B3               	movwf	??_compensate_pressure+1
  8876  02D0  0021               	movlb	1	; select bank1
  8877  02D1  0822               	movf	(compensate_pressure@var3+2)^(0+128),w
  8878  02D2  3D26               	addwfc	(compensate_pressure@var4+2)^(0+128),w
  8879  02D3  0020               	movlb	0	; select bank0
  8880  02D4  00B4               	movwf	??_compensate_pressure+2
  8881  02D5  0021               	movlb	1	; select bank1
  8882  02D6  0823               	movf	(compensate_pressure@var3+3)^(0+128),w
  8883  02D7  3D27               	addwfc	(compensate_pressure@var4+3)^(0+128),w
  8884  02D8  0020               	movlb	0	; select bank0
  8885  02D9  00B5               	movwf	??_compensate_pressure+3
  8886  02DA  0835               	movf	??_compensate_pressure+3,w
  8887  02DB  00A7               	movwf	___aldiv@dividend+3
  8888  02DC  0834               	movf	??_compensate_pressure+2,w
  8889  02DD  00A6               	movwf	___aldiv@dividend+2
  8890  02DE  0833               	movf	??_compensate_pressure+1,w
  8891  02DF  00A5               	movwf	___aldiv@dividend+1
  8892  02E0  0832               	movf	??_compensate_pressure,w
  8893  02E1  00A4               	movwf	___aldiv@dividend
  8894  02E2  3196  265B  3180   	fcall	___aldiv
  8895  02E5  0823               	movf	?___aldiv+3,w
  8896  02E6  0021               	movlb	1	; select bank1
  8897  02E7  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
  8898  02E8  0020               	movlb	0	; select bank0
  8899  02E9  0822               	movf	?___aldiv+2,w
  8900  02EA  0021               	movlb	1	; select bank1
  8901  02EB  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
  8902  02EC  0020               	movlb	0	; select bank0
  8903  02ED  0821               	movf	?___aldiv+1,w
  8904  02EE  0021               	movlb	1	; select bank1
  8905  02EF  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
  8906  02F0  0020               	movlb	0	; select bank0
  8907  02F1  0820               	movf	?___aldiv,w
  8908  02F2  0021               	movlb	1	; select bank1
  8909  02F3  00C9               	movwf	compensate_pressure@var1^(0+128)
  8910                           
  8911                           ;BME280_driver/bme280.c: 1228:     var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_
      +                          P1)) / 32768;
  8912  02F4  3000               	movlw	0
  8913  02F5  0020               	movlb	0	; select bank0
  8914  02F6  00A3               	movwf	___aldiv@divisor+3
  8915  02F7  3000               	movlw	0
  8916  02F8  00A2               	movwf	___aldiv@divisor+2
  8917  02F9  3080               	movlw	128
  8918  02FA  00A1               	movwf	___aldiv@divisor+1
  8919  02FB  3000               	movlw	0
  8920  02FC  00A0               	movwf	___aldiv@divisor
  8921  02FD  3000               	movlw	0
  8922  02FE  0021               	movlb	1	; select bank1
  8923  02FF  0749               	addwf	compensate_pressure@var1^(0+128),w
  8924  0300  00F0               	movwf	___lmul@multiplier
  8925  0301  3080               	movlw	128
  8926  0302  3D4A               	addwfc	(compensate_pressure@var1+1)^(0+128),w
  8927  0303  00F1               	movwf	___lmul@multiplier+1
  8928  0304  3000               	movlw	0
  8929  0305  3D4B               	addwfc	(compensate_pressure@var1+2)^(0+128),w
  8930  0306  00F2               	movwf	___lmul@multiplier+2
  8931  0307  3000               	movlw	0
  8932  0308  3D4C               	addwfc	(compensate_pressure@var1+3)^(0+128),w
  8933  0309  00F3               	movwf	___lmul@multiplier+3
  8934  030A  0020               	movlb	0	; select bank0
  8935  030B  082E               	movf	compensate_pressure@calib_data,w
  8936  030C  3E06               	addlw	6
  8937  030D  0086               	movwf	6
  8938  030E  3001               	movlw	1	; select bank2/3
  8939  030F  0087               	movwf	7
  8940  0310  3F40               	moviw [0]fsr1
  8941  0311  00B2               	movwf	??_compensate_pressure
  8942  0312  3F41               	moviw [1]fsr1
  8943  0313  00B3               	movwf	??_compensate_pressure+1
  8944  0314  0832               	movf	??_compensate_pressure,w
  8945  0315  00F4               	movwf	___lmul@multiplicand
  8946  0316  0833               	movf	??_compensate_pressure+1,w
  8947  0317  00F5               	movwf	___lmul@multiplicand+1
  8948  0318  01F6               	clrf	___lmul@multiplicand+2
  8949  0319  01F7               	clrf	___lmul@multiplicand+3
  8950  031A  319C  2491  3180   	fcall	___lmul
  8951  031D  0873               	movf	?___lmul+3,w
  8952  031E  0020               	movlb	0	; select bank0
  8953  031F  00A7               	movwf	___aldiv@dividend+3
  8954  0320  0872               	movf	?___lmul+2,w
  8955  0321  00A6               	movwf	___aldiv@dividend+2
  8956  0322  0871               	movf	?___lmul+1,w
  8957  0323  00A5               	movwf	___aldiv@dividend+1
  8958  0324  0870               	movf	?___lmul,w
  8959  0325  00A4               	movwf	___aldiv@dividend
  8960  0326  3196  265B  3180   	fcall	___aldiv
  8961  0329  0823               	movf	?___aldiv+3,w
  8962  032A  0021               	movlb	1	; select bank1
  8963  032B  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
  8964  032C  0020               	movlb	0	; select bank0
  8965  032D  0822               	movf	?___aldiv+2,w
  8966  032E  0021               	movlb	1	; select bank1
  8967  032F  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
  8968  0330  0020               	movlb	0	; select bank0
  8969  0331  0821               	movf	?___aldiv+1,w
  8970  0332  0021               	movlb	1	; select bank1
  8971  0333  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
  8972  0334  0020               	movlb	0	; select bank0
  8973  0335  0820               	movf	?___aldiv,w
  8974  0336  0021               	movlb	1	; select bank1
  8975  0337  00C9               	movwf	compensate_pressure@var1^(0+128)
  8976                           
  8977                           ;BME280_driver/bme280.c: 1231:     if (var1)
  8978  0338  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  8979  0339  044B               	iorwf	(compensate_pressure@var1+2)^(0+128),w
  8980  033A  044A               	iorwf	(compensate_pressure@var1+1)^(0+128),w
  8981  033B  0449               	iorwf	compensate_pressure@var1^(0+128),w
  8982  033C  1903               	skipnz
  8983  033D  2D70               	goto	l4336
  8984                           
  8985                           ;BME280_driver/bme280.c: 1232:     {;BME280_driver/bme280.c: 1233:         var5 = (uint3
      +                          2_t)((uint32_t)1048576) - uncomp_data->pressure;
  8986  033E  0834               	movf	compensate_pressure@uncomp_data^(0+128),w
  8987  033F  0086               	movwf	6
  8988  0340  0187               	clrf	7
  8989  0341  3F40               	moviw [0]fsr1
  8990  0342  0020               	movlb	0	; select bank0
  8991  0343  00B2               	movwf	??_compensate_pressure
  8992  0344  3F41               	moviw [1]fsr1
  8993  0345  00B3               	movwf	??_compensate_pressure+1
  8994  0346  3F42               	moviw [2]fsr1
  8995  0347  00B4               	movwf	??_compensate_pressure+2
  8996  0348  3F43               	moviw [3]fsr1
  8997  0349  00B5               	movwf	??_compensate_pressure+3
  8998  034A  3000               	movlw	0
  8999  034B  00B6               	movwf	??_compensate_pressure+4
  9000  034C  3000               	movlw	0
  9001  034D  00B7               	movwf	??_compensate_pressure+5
  9002  034E  3010               	movlw	16
  9003  034F  00B8               	movwf	??_compensate_pressure+6
  9004  0350  3000               	movlw	0
  9005  0351  00B9               	movwf	??_compensate_pressure+7
  9006  0352  0832               	movf	??_compensate_pressure,w
  9007  0353  02B6               	subwf	??_compensate_pressure+4,f
  9008  0354  0833               	movf	??_compensate_pressure+1,w
  9009  0355  3BB7               	subwfb	??_compensate_pressure+5,f
  9010  0356  0834               	movf	??_compensate_pressure+2,w
  9011  0357  3BB8               	subwfb	??_compensate_pressure+6,f
  9012  0358  0835               	movf	??_compensate_pressure+3,w
  9013  0359  3BB9               	subwfb	??_compensate_pressure+7,f
  9014  035A  0839               	movf	??_compensate_pressure+7,w
  9015  035B  0021               	movlb	1	; select bank1
  9016  035C  00AB               	movwf	(compensate_pressure@var5+3)^(0+128)
  9017  035D  0020               	movlb	0	; select bank0
  9018  035E  0838               	movf	??_compensate_pressure+6,w
  9019  035F  0021               	movlb	1	; select bank1
  9020  0360  00AA               	movwf	(compensate_pressure@var5+2)^(0+128)
  9021  0361  0020               	movlb	0	; select bank0
  9022  0362  0837               	movf	??_compensate_pressure+5,w
  9023  0363  0021               	movlb	1	; select bank1
  9024  0364  00A9               	movwf	(compensate_pressure@var5+1)^(0+128)
  9025  0365  0020               	movlb	0	; select bank0
  9026  0366  0836               	movf	??_compensate_pressure+4,w
  9027  0367  0021               	movlb	1	; select bank1
  9028  0368  00A8               	movwf	compensate_pressure@var5^(0+128)
  9029                           
  9030                           ;BME280_driver/bme280.c: 1234:         pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4
      +                          096))) * 3125;
  9031  0369  3000               	movlw	0
  9032  036A  0020               	movlb	0	; select bank0
  9033  036B  00A3               	movwf	___aldiv@divisor+3
  9034  036C  3000               	movlw	0
  9035  036D  00A2               	movwf	___aldiv@divisor+2
  9036  036E  3010               	movlw	16
  9037  036F  00A1               	movwf	___aldiv@divisor+1
  9038  0370  3000               	movlw	0
  9039  0371  00A0               	movwf	___aldiv@divisor
  9040  0372  0021               	movlb	1	; select bank1
  9041  0373  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
  9042  0374  0020               	movlb	0	; select bank0
  9043  0375  00A7               	movwf	___aldiv@dividend+3
  9044  0376  0021               	movlb	1	; select bank1
  9045  0377  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
  9046  0378  0020               	movlb	0	; select bank0
  9047  0379  00A6               	movwf	___aldiv@dividend+2
  9048  037A  0021               	movlb	1	; select bank1
  9049  037B  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
  9050  037C  0020               	movlb	0	; select bank0
  9051  037D  00A5               	movwf	___aldiv@dividend+1
  9052  037E  0021               	movlb	1	; select bank1
  9053  037F  0841               	movf	compensate_pressure@var2^(0+128),w
  9054  0380  0020               	movlb	0	; select bank0
  9055  0381  00A4               	movwf	___aldiv@dividend
  9056  0382  3196  265B  3180   	fcall	___aldiv
  9057  0385  0820               	movf	?___aldiv,w
  9058  0386  0021               	movlb	1	; select bank1
  9059  0387  0228               	subwf	compensate_pressure@var5^(0+128),w
  9060  0388  0020               	movlb	0	; select bank0
  9061  0389  00B2               	movwf	??_compensate_pressure
  9062  038A  0821               	movf	?___aldiv+1,w
  9063  038B  0021               	movlb	1	; select bank1
  9064  038C  3B29               	subwfb	(compensate_pressure@var5+1)^(0+128),w
  9065  038D  0020               	movlb	0	; select bank0
  9066  038E  00B3               	movwf	??_compensate_pressure+1
  9067  038F  0822               	movf	?___aldiv+2,w
  9068  0390  0021               	movlb	1	; select bank1
  9069  0391  3B2A               	subwfb	(compensate_pressure@var5+2)^(0+128),w
  9070  0392  0020               	movlb	0	; select bank0
  9071  0393  00B4               	movwf	??_compensate_pressure+2
  9072  0394  0823               	movf	?___aldiv+3,w
  9073  0395  0021               	movlb	1	; select bank1
  9074  0396  3B2B               	subwfb	(compensate_pressure@var5+3)^(0+128),w
  9075  0397  0020               	movlb	0	; select bank0
  9076  0398  00B5               	movwf	??_compensate_pressure+3
  9077  0399  0835               	movf	??_compensate_pressure+3,w
  9078  039A  00F3               	movwf	___lmul@multiplier+3
  9079  039B  0834               	movf	??_compensate_pressure+2,w
  9080  039C  00F2               	movwf	___lmul@multiplier+2
  9081  039D  0833               	movf	??_compensate_pressure+1,w
  9082  039E  00F1               	movwf	___lmul@multiplier+1
  9083  039F  0832               	movf	??_compensate_pressure,w
  9084  03A0  00F0               	movwf	___lmul@multiplier
  9085  03A1  3000               	movlw	0
  9086  03A2  00F7               	movwf	___lmul@multiplicand+3
  9087  03A3  3000               	movlw	0
  9088  03A4  00F6               	movwf	___lmul@multiplicand+2
  9089  03A5  300C               	movlw	12
  9090  03A6  00F5               	movwf	___lmul@multiplicand+1
  9091  03A7  3035               	movlw	53
  9092  03A8  00F4               	movwf	___lmul@multiplicand
  9093  03A9  319C  2491  3180   	fcall	___lmul
  9094  03AC  0873               	movf	?___lmul+3,w
  9095  03AD  0021               	movlb	1	; select bank1
  9096  03AE  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9097  03AF  0872               	movf	?___lmul+2,w
  9098  03B0  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9099  03B1  0871               	movf	?___lmul+1,w
  9100  03B2  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9101  03B3  0870               	movf	?___lmul,w
  9102  03B4  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9103                           
  9104                           ;BME280_driver/bme280.c: 1235:         if (pressure < 0x80000000)
  9105  03B5  3080               	movlw	128
  9106  03B6  0248               	subwf	(compensate_pressure@pressure+3)^(0+128),w
  9107  03B7  1803               	btfsc	3,0
  9108  03B8  2BD6               	goto	l4326
  9109                           
  9110                           ;BME280_driver/bme280.c: 1236:         {;BME280_driver/bme280.c: 1237:             press
      +                          ure = (pressure << 1) / ((uint32_t)var1);
  9111  03B9  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  9112  03BA  00F3               	movwf	___lldiv@divisor+3
  9113  03BB  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  9114  03BC  00F2               	movwf	___lldiv@divisor+2
  9115  03BD  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  9116  03BE  00F1               	movwf	___lldiv@divisor+1
  9117  03BF  0849               	movf	compensate_pressure@var1^(0+128),w
  9118  03C0  00F0               	movwf	___lldiv@divisor
  9119  03C1  3545               	lslf	compensate_pressure@pressure^(0+128),w
  9120  03C2  00F4               	movwf	___lldiv@dividend
  9121  03C3  0D46               	rlf	(compensate_pressure@pressure+1)^(0+128),w
  9122  03C4  00F5               	movwf	___lldiv@dividend+1
  9123  03C5  0D47               	rlf	(compensate_pressure@pressure+2)^(0+128),w
  9124  03C6  00F6               	movwf	___lldiv@dividend+2
  9125  03C7  0D48               	rlf	(compensate_pressure@pressure+3)^(0+128),w
  9126  03C8  00F7               	movwf	___lldiv@dividend+3
  9127  03C9  3191  2136  3180   	fcall	___lldiv
  9128  03CC  0873               	movf	?___lldiv+3,w
  9129  03CD  0021               	movlb	1	; select bank1
  9130  03CE  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9131  03CF  0872               	movf	?___lldiv+2,w
  9132  03D0  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9133  03D1  0871               	movf	?___lldiv+1,w
  9134  03D2  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9135  03D3  0870               	movf	?___lldiv,w
  9136  03D4  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9137                           
  9138                           ;BME280_driver/bme280.c: 1238:         }
  9139  03D5  2BF2               	goto	l192
  9140  03D6                     l4326:	
  9141                           
  9142                           ;BME280_driver/bme280.c: 1240:         {;BME280_driver/bme280.c: 1241:             press
      +                          ure = (pressure / (uint32_t)var1) * 2;
  9143  03D6  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  9144  03D7  00F3               	movwf	___lldiv@divisor+3
  9145  03D8  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  9146  03D9  00F2               	movwf	___lldiv@divisor+2
  9147  03DA  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  9148  03DB  00F1               	movwf	___lldiv@divisor+1
  9149  03DC  0849               	movf	compensate_pressure@var1^(0+128),w
  9150  03DD  00F0               	movwf	___lldiv@divisor
  9151  03DE  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9152  03DF  00F7               	movwf	___lldiv@dividend+3
  9153  03E0  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9154  03E1  00F6               	movwf	___lldiv@dividend+2
  9155  03E2  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9156  03E3  00F5               	movwf	___lldiv@dividend+1
  9157  03E4  0845               	movf	compensate_pressure@pressure^(0+128),w
  9158  03E5  00F4               	movwf	___lldiv@dividend
  9159  03E6  3191  2136  3180   	fcall	___lldiv
  9160  03E9  3570               	lslf	?___lldiv,w
  9161  03EA  0021               	movlb	1	; select bank1
  9162  03EB  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9163  03EC  0D71               	rlf	?___lldiv+1,w
  9164  03ED  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9165  03EE  0D72               	rlf	?___lldiv+2,w
  9166  03EF  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9167  03F0  0D73               	rlf	?___lldiv+3,w
  9168  03F1  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9169  03F2                     l192:	
  9170                           ;BME280_driver/bme280.c: 1242:         }
  9171                           
  9172                           
  9173                           ;BME280_driver/bme280.c: 1243:         var1 = (((int32_t)calib_data->dig_P9) * ((int32_t
      +                          )(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
  9174  03F2  0845               	movf	compensate_pressure@pressure^(0+128),w
  9175  03F3  0020               	movlb	0	; select bank0
  9176  03F4  00B2               	movwf	??_compensate_pressure
  9177  03F5  0021               	movlb	1	; select bank1
  9178  03F6  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9179  03F7  0020               	movlb	0	; select bank0
  9180  03F8  00B3               	movwf	??_compensate_pressure+1
  9181  03F9  0021               	movlb	1	; select bank1
  9182  03FA  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9183  03FB  0020               	movlb	0	; select bank0
  9184  03FC  00B4               	movwf	??_compensate_pressure+2
  9185  03FD  0021               	movlb	1	; select bank1
  9186  03FE  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9187  03FF  0020               	movlb	0	; select bank0
  9188  0400  00B5               	movwf	??_compensate_pressure+3
  9189  0401  3003               	movlw	3
  9190  0402                     u4725:	
  9191  0402  36B5               	lsrf	??_compensate_pressure+3,f
  9192  0403  0CB4               	rrf	??_compensate_pressure+2,f
  9193  0404  0CB3               	rrf	??_compensate_pressure+1,f
  9194  0405  0CB2               	rrf	??_compensate_pressure,f
  9195  0406  0B89               	decfsz	9,f
  9196  0407  2C02               	goto	u4725
  9197  0408  0835               	movf	??_compensate_pressure+3,w
  9198  0409  00F7               	movwf	___lmul@multiplicand+3
  9199  040A  0834               	movf	??_compensate_pressure+2,w
  9200  040B  00F6               	movwf	___lmul@multiplicand+2
  9201  040C  0833               	movf	??_compensate_pressure+1,w
  9202  040D  00F5               	movwf	___lmul@multiplicand+1
  9203  040E  0832               	movf	??_compensate_pressure,w
  9204  040F  00F4               	movwf	___lmul@multiplicand
  9205  0410  0021               	movlb	1	; select bank1
  9206  0411  0845               	movf	compensate_pressure@pressure^(0+128),w
  9207  0412  0020               	movlb	0	; select bank0
  9208  0413  00B6               	movwf	??_compensate_pressure+4
  9209  0414  0021               	movlb	1	; select bank1
  9210  0415  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9211  0416  0020               	movlb	0	; select bank0
  9212  0417  00B7               	movwf	??_compensate_pressure+5
  9213  0418  0021               	movlb	1	; select bank1
  9214  0419  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9215  041A  0020               	movlb	0	; select bank0
  9216  041B  00B8               	movwf	??_compensate_pressure+6
  9217  041C  0021               	movlb	1	; select bank1
  9218  041D  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9219  041E  0020               	movlb	0	; select bank0
  9220  041F  00B9               	movwf	??_compensate_pressure+7
  9221  0420  3003               	movlw	3
  9222  0421                     u4735:	
  9223  0421  36B9               	lsrf	??_compensate_pressure+7,f
  9224  0422  0CB8               	rrf	??_compensate_pressure+6,f
  9225  0423  0CB7               	rrf	??_compensate_pressure+5,f
  9226  0424  0CB6               	rrf	??_compensate_pressure+4,f
  9227  0425  0B89               	decfsz	9,f
  9228  0426  2C21               	goto	u4735
  9229  0427  0839               	movf	??_compensate_pressure+7,w
  9230  0428  00F3               	movwf	___lmul@multiplier+3
  9231  0429  0838               	movf	??_compensate_pressure+6,w
  9232  042A  00F2               	movwf	___lmul@multiplier+2
  9233  042B  0837               	movf	??_compensate_pressure+5,w
  9234  042C  00F1               	movwf	___lmul@multiplier+1
  9235  042D  0836               	movf	??_compensate_pressure+4,w
  9236  042E  00F0               	movwf	___lmul@multiplier
  9237  042F  319C  2491  3180   	fcall	___lmul
  9238  0432  0870               	movf	?___lmul,w
  9239  0433  0020               	movlb	0	; select bank0
  9240  0434  00BA               	movwf	??_compensate_pressure+8
  9241  0435  0871               	movf	?___lmul+1,w
  9242  0436  00BB               	movwf	??_compensate_pressure+9
  9243  0437  0872               	movf	?___lmul+2,w
  9244  0438  00BC               	movwf	??_compensate_pressure+10
  9245  0439  0873               	movf	?___lmul+3,w
  9246  043A  00BD               	movwf	??_compensate_pressure+11
  9247  043B  300D               	movlw	13
  9248  043C                     u4745:	
  9249  043C  36BD               	lsrf	??_compensate_pressure+11,f
  9250  043D  0CBC               	rrf	??_compensate_pressure+10,f
  9251  043E  0CBB               	rrf	??_compensate_pressure+9,f
  9252  043F  0CBA               	rrf	??_compensate_pressure+8,f
  9253  0440  0B89               	decfsz	9,f
  9254  0441  2C3C               	goto	u4745
  9255  0442  083D               	movf	??_compensate_pressure+11,w
  9256  0443  0021               	movlb	1	; select bank1
  9257  0444  00B3               	movwf	(_compensate_pressure$2265+3)^(0+128)
  9258  0445  0020               	movlb	0	; select bank0
  9259  0446  083C               	movf	??_compensate_pressure+10,w
  9260  0447  0021               	movlb	1	; select bank1
  9261  0448  00B2               	movwf	(_compensate_pressure$2265+2)^(0+128)
  9262  0449  0020               	movlb	0	; select bank0
  9263  044A  083B               	movf	??_compensate_pressure+9,w
  9264  044B  0021               	movlb	1	; select bank1
  9265  044C  00B1               	movwf	(_compensate_pressure$2265+1)^(0+128)
  9266  044D  0020               	movlb	0	; select bank0
  9267  044E  083A               	movf	??_compensate_pressure+8,w
  9268  044F  0021               	movlb	1	; select bank1
  9269  0450  00B0               	movwf	_compensate_pressure$2265^(0+128)
  9270                           
  9271                           ;BME280_driver/bme280.c: 1243:         var1 = (((int32_t)calib_data->dig_P9) * ((int32_t
      +                          )(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
  9272  0451  3000               	movlw	0
  9273  0452  0020               	movlb	0	; select bank0
  9274  0453  00A3               	movwf	___aldiv@divisor+3
  9275  0454  3000               	movlw	0
  9276  0455  00A2               	movwf	___aldiv@divisor+2
  9277  0456  3010               	movlw	16
  9278  0457  00A1               	movwf	___aldiv@divisor+1
  9279  0458  3000               	movlw	0
  9280  0459  00A0               	movwf	___aldiv@divisor
  9281  045A  082E               	movf	compensate_pressure@calib_data,w
  9282  045B  3E16               	addlw	22
  9283  045C  0086               	movwf	6
  9284  045D  3001               	movlw	1	; select bank2/3
  9285  045E  0087               	movwf	7
  9286  045F  3F40               	moviw [0]fsr1
  9287  0460  00B2               	movwf	??_compensate_pressure
  9288  0461  3F41               	moviw [1]fsr1
  9289  0462  00B3               	movwf	??_compensate_pressure+1
  9290  0463  0832               	movf	??_compensate_pressure,w
  9291  0464  00F0               	movwf	___lmul@multiplier
  9292  0465  0833               	movf	??_compensate_pressure+1,w
  9293  0466  00F1               	movwf	___lmul@multiplier+1
  9294  0467  0D89               	rlf	9,f
  9295  0468  3B89               	subwfb	9,f
  9296  0469  0989               	comf	9,f
  9297  046A  00F2               	movwf	___lmul@multiplier+2
  9298  046B  00F3               	movwf	___lmul@multiplier+3
  9299  046C  0021               	movlb	1	; select bank1
  9300  046D  0833               	movf	(_compensate_pressure$2265+3)^(0+128),w
  9301  046E  00F7               	movwf	___lmul@multiplicand+3
  9302  046F  0832               	movf	(_compensate_pressure$2265+2)^(0+128),w
  9303  0470  00F6               	movwf	___lmul@multiplicand+2
  9304  0471  0831               	movf	(_compensate_pressure$2265+1)^(0+128),w
  9305  0472  00F5               	movwf	___lmul@multiplicand+1
  9306  0473  0830               	movf	_compensate_pressure$2265^(0+128),w
  9307  0474  00F4               	movwf	___lmul@multiplicand
  9308  0475  319C  2491  3180   	fcall	___lmul
  9309  0478  0873               	movf	?___lmul+3,w
  9310  0479  0020               	movlb	0	; select bank0
  9311  047A  00A7               	movwf	___aldiv@dividend+3
  9312  047B  0872               	movf	?___lmul+2,w
  9313  047C  00A6               	movwf	___aldiv@dividend+2
  9314  047D  0871               	movf	?___lmul+1,w
  9315  047E  00A5               	movwf	___aldiv@dividend+1
  9316  047F  0870               	movf	?___lmul,w
  9317  0480  00A4               	movwf	___aldiv@dividend
  9318  0481  3196  265B  3180   	fcall	___aldiv
  9319  0484  0823               	movf	?___aldiv+3,w
  9320  0485  0021               	movlb	1	; select bank1
  9321  0486  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
  9322  0487  0020               	movlb	0	; select bank0
  9323  0488  0822               	movf	?___aldiv+2,w
  9324  0489  0021               	movlb	1	; select bank1
  9325  048A  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
  9326  048B  0020               	movlb	0	; select bank0
  9327  048C  0821               	movf	?___aldiv+1,w
  9328  048D  0021               	movlb	1	; select bank1
  9329  048E  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
  9330  048F  0020               	movlb	0	; select bank0
  9331  0490  0820               	movf	?___aldiv,w
  9332  0491  0021               	movlb	1	; select bank1
  9333  0492  00C9               	movwf	compensate_pressure@var1^(0+128)
  9334                           
  9335                           ;BME280_driver/bme280.c: 1244:         var2 = (((int32_t)(pressure / 4)) * ((int32_t)cal
      +                          ib_data->dig_P8)) / 8192;
  9336  0493  3000               	movlw	0
  9337  0494  0020               	movlb	0	; select bank0
  9338  0495  00A3               	movwf	___aldiv@divisor+3
  9339  0496  3000               	movlw	0
  9340  0497  00A2               	movwf	___aldiv@divisor+2
  9341  0498  3020               	movlw	32
  9342  0499  00A1               	movwf	___aldiv@divisor+1
  9343  049A  3000               	movlw	0
  9344  049B  00A0               	movwf	___aldiv@divisor
  9345  049C  0021               	movlb	1	; select bank1
  9346  049D  0845               	movf	compensate_pressure@pressure^(0+128),w
  9347  049E  0020               	movlb	0	; select bank0
  9348  049F  00B2               	movwf	??_compensate_pressure
  9349  04A0  0021               	movlb	1	; select bank1
  9350  04A1  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9351  04A2  0020               	movlb	0	; select bank0
  9352  04A3  00B3               	movwf	??_compensate_pressure+1
  9353  04A4  0021               	movlb	1	; select bank1
  9354  04A5  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9355  04A6  0020               	movlb	0	; select bank0
  9356  04A7  00B4               	movwf	??_compensate_pressure+2
  9357  04A8  0021               	movlb	1	; select bank1
  9358  04A9  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9359  04AA  0020               	movlb	0	; select bank0
  9360  04AB  00B5               	movwf	??_compensate_pressure+3
  9361  04AC  3002               	movlw	2
  9362  04AD                     u4755:	
  9363  04AD  36B5               	lsrf	??_compensate_pressure+3,f
  9364  04AE  0CB4               	rrf	??_compensate_pressure+2,f
  9365  04AF  0CB3               	rrf	??_compensate_pressure+1,f
  9366  04B0  0CB2               	rrf	??_compensate_pressure,f
  9367  04B1  0B89               	decfsz	9,f
  9368  04B2  2CAD               	goto	u4755
  9369  04B3  0835               	movf	??_compensate_pressure+3,w
  9370  04B4  00F3               	movwf	___lmul@multiplier+3
  9371  04B5  0834               	movf	??_compensate_pressure+2,w
  9372  04B6  00F2               	movwf	___lmul@multiplier+2
  9373  04B7  0833               	movf	??_compensate_pressure+1,w
  9374  04B8  00F1               	movwf	___lmul@multiplier+1
  9375  04B9  0832               	movf	??_compensate_pressure,w
  9376  04BA  00F0               	movwf	___lmul@multiplier
  9377  04BB  082E               	movf	compensate_pressure@calib_data,w
  9378  04BC  3E14               	addlw	20
  9379  04BD  0086               	movwf	6
  9380  04BE  3001               	movlw	1	; select bank2/3
  9381  04BF  0087               	movwf	7
  9382  04C0  3F40               	moviw [0]fsr1
  9383  04C1  00B6               	movwf	??_compensate_pressure+4
  9384  04C2  3F41               	moviw [1]fsr1
  9385  04C3  00B7               	movwf	??_compensate_pressure+5
  9386  04C4  0836               	movf	??_compensate_pressure+4,w
  9387  04C5  00F4               	movwf	___lmul@multiplicand
  9388  04C6  0837               	movf	??_compensate_pressure+5,w
  9389  04C7  00F5               	movwf	___lmul@multiplicand+1
  9390  04C8  0D89               	rlf	9,f
  9391  04C9  3B89               	subwfb	9,f
  9392  04CA  0989               	comf	9,f
  9393  04CB  00F6               	movwf	___lmul@multiplicand+2
  9394  04CC  00F7               	movwf	___lmul@multiplicand+3
  9395  04CD  319C  2491  3180   	fcall	___lmul
  9396  04D0  0873               	movf	?___lmul+3,w
  9397  04D1  0020               	movlb	0	; select bank0
  9398  04D2  00A7               	movwf	___aldiv@dividend+3
  9399  04D3  0872               	movf	?___lmul+2,w
  9400  04D4  00A6               	movwf	___aldiv@dividend+2
  9401  04D5  0871               	movf	?___lmul+1,w
  9402  04D6  00A5               	movwf	___aldiv@dividend+1
  9403  04D7  0870               	movf	?___lmul,w
  9404  04D8  00A4               	movwf	___aldiv@dividend
  9405  04D9  3196  265B  3180   	fcall	___aldiv
  9406  04DC  0823               	movf	?___aldiv+3,w
  9407  04DD  0021               	movlb	1	; select bank1
  9408  04DE  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
  9409  04DF  0020               	movlb	0	; select bank0
  9410  04E0  0822               	movf	?___aldiv+2,w
  9411  04E1  0021               	movlb	1	; select bank1
  9412  04E2  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
  9413  04E3  0020               	movlb	0	; select bank0
  9414  04E4  0821               	movf	?___aldiv+1,w
  9415  04E5  0021               	movlb	1	; select bank1
  9416  04E6  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
  9417  04E7  0020               	movlb	0	; select bank0
  9418  04E8  0820               	movf	?___aldiv,w
  9419  04E9  0021               	movlb	1	; select bank1
  9420  04EA  00C1               	movwf	compensate_pressure@var2^(0+128)
  9421                           
  9422                           ;BME280_driver/bme280.c: 1245:         pressure = (uint32_t)((int32_t)pressure + ((var1 
      +                          + var2 + calib_data->dig_P7) / 16));
  9423  04EB  3000               	movlw	0
  9424  04EC  0020               	movlb	0	; select bank0
  9425  04ED  00A3               	movwf	___aldiv@divisor+3
  9426  04EE  3000               	movlw	0
  9427  04EF  00A2               	movwf	___aldiv@divisor+2
  9428  04F0  3000               	movlw	0
  9429  04F1  00A1               	movwf	___aldiv@divisor+1
  9430  04F2  3010               	movlw	16
  9431  04F3  00A0               	movwf	___aldiv@divisor
  9432  04F4  0021               	movlb	1	; select bank1
  9433  04F5  0841               	movf	compensate_pressure@var2^(0+128),w
  9434  04F6  0020               	movlb	0	; select bank0
  9435  04F7  00B2               	movwf	??_compensate_pressure
  9436  04F8  0021               	movlb	1	; select bank1
  9437  04F9  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
  9438  04FA  0020               	movlb	0	; select bank0
  9439  04FB  00B3               	movwf	??_compensate_pressure+1
  9440  04FC  0021               	movlb	1	; select bank1
  9441  04FD  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
  9442  04FE  0020               	movlb	0	; select bank0
  9443  04FF  00B4               	movwf	??_compensate_pressure+2
  9444  0500  0021               	movlb	1	; select bank1
  9445  0501  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
  9446  0502  0020               	movlb	0	; select bank0
  9447  0503  00B5               	movwf	??_compensate_pressure+3
  9448  0504  0021               	movlb	1	; select bank1
  9449  0505  0849               	movf	compensate_pressure@var1^(0+128),w
  9450  0506  0020               	movlb	0	; select bank0
  9451  0507  00B6               	movwf	??_compensate_pressure+4
  9452  0508  0021               	movlb	1	; select bank1
  9453  0509  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  9454  050A  0020               	movlb	0	; select bank0
  9455  050B  00B7               	movwf	??_compensate_pressure+5
  9456  050C  0021               	movlb	1	; select bank1
  9457  050D  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  9458  050E  0020               	movlb	0	; select bank0
  9459  050F  00B8               	movwf	??_compensate_pressure+6
  9460  0510  0021               	movlb	1	; select bank1
  9461  0511  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  9462  0512  0020               	movlb	0	; select bank0
  9463  0513  00B9               	movwf	??_compensate_pressure+7
  9464  0514  082E               	movf	compensate_pressure@calib_data,w
  9465  0515  3E12               	addlw	18
  9466  0516  0086               	movwf	6
  9467  0517  3001               	movlw	1	; select bank2/3
  9468  0518  0087               	movwf	7
  9469  0519  3F40               	moviw [0]fsr1
  9470  051A  00BA               	movwf	??_compensate_pressure+8
  9471  051B  3F41               	moviw [1]fsr1
  9472  051C  00BB               	movwf	??_compensate_pressure+9
  9473  051D  083A               	movf	??_compensate_pressure+8,w
  9474  051E  00BC               	movwf	??_compensate_pressure+10
  9475  051F  083B               	movf	??_compensate_pressure+9,w
  9476  0520  00BD               	movwf	??_compensate_pressure+11
  9477  0521  3000               	movlw	0
  9478  0522  1BBD               	btfsc	??_compensate_pressure+11,7
  9479  0523  30FF               	movlw	255
  9480  0524  00BE               	movwf	??_compensate_pressure+12
  9481  0525  00BF               	movwf	??_compensate_pressure+13
  9482  0526  083C               	movf	??_compensate_pressure+10,w
  9483  0527  07B6               	addwf	??_compensate_pressure+4,f
  9484  0528  083D               	movf	??_compensate_pressure+11,w
  9485  0529  3DB7               	addwfc	??_compensate_pressure+5,f
  9486  052A  083E               	movf	??_compensate_pressure+12,w
  9487  052B  3DB8               	addwfc	??_compensate_pressure+6,f
  9488  052C  083F               	movf	??_compensate_pressure+13,w
  9489  052D  3DB9               	addwfc	??_compensate_pressure+7,f
  9490  052E  0836               	movf	??_compensate_pressure+4,w
  9491  052F  07B2               	addwf	??_compensate_pressure,f
  9492  0530  0837               	movf	??_compensate_pressure+5,w
  9493  0531  3DB3               	addwfc	??_compensate_pressure+1,f
  9494  0532  0838               	movf	??_compensate_pressure+6,w
  9495  0533  3DB4               	addwfc	??_compensate_pressure+2,f
  9496  0534  0839               	movf	??_compensate_pressure+7,w
  9497  0535  3DB5               	addwfc	??_compensate_pressure+3,f
  9498  0536  0835               	movf	??_compensate_pressure+3,w
  9499  0537  00A7               	movwf	___aldiv@dividend+3
  9500  0538  0834               	movf	??_compensate_pressure+2,w
  9501  0539  00A6               	movwf	___aldiv@dividend+2
  9502  053A  0833               	movf	??_compensate_pressure+1,w
  9503  053B  00A5               	movwf	___aldiv@dividend+1
  9504  053C  0832               	movf	??_compensate_pressure,w
  9505  053D  00A4               	movwf	___aldiv@dividend
  9506  053E  3196  265B  3180   	fcall	___aldiv
  9507  0541  0820               	movf	?___aldiv,w
  9508  0542  0021               	movlb	1	; select bank1
  9509  0543  0745               	addwf	compensate_pressure@pressure^(0+128),w
  9510  0544  0020               	movlb	0	; select bank0
  9511  0545  00C0               	movwf	??_compensate_pressure+14
  9512  0546  0821               	movf	?___aldiv+1,w
  9513  0547  0021               	movlb	1	; select bank1
  9514  0548  3D46               	addwfc	(compensate_pressure@pressure+1)^(0+128),w
  9515  0549  0020               	movlb	0	; select bank0
  9516  054A  00C1               	movwf	??_compensate_pressure+15
  9517  054B  0822               	movf	?___aldiv+2,w
  9518  054C  0021               	movlb	1	; select bank1
  9519  054D  3D47               	addwfc	(compensate_pressure@pressure+2)^(0+128),w
  9520  054E  0020               	movlb	0	; select bank0
  9521  054F  00C2               	movwf	??_compensate_pressure+16
  9522  0550  0823               	movf	?___aldiv+3,w
  9523  0551  0021               	movlb	1	; select bank1
  9524  0552  3D48               	addwfc	(compensate_pressure@pressure+3)^(0+128),w
  9525  0553  0020               	movlb	0	; select bank0
  9526  0554  00C3               	movwf	??_compensate_pressure+17
  9527  0555  0843               	movf	??_compensate_pressure+17,w
  9528  0556  0021               	movlb	1	; select bank1
  9529  0557  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9530  0558  0020               	movlb	0	; select bank0
  9531  0559  0842               	movf	??_compensate_pressure+16,w
  9532  055A  0021               	movlb	1	; select bank1
  9533  055B  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9534  055C  0020               	movlb	0	; select bank0
  9535  055D  0841               	movf	??_compensate_pressure+15,w
  9536  055E  0021               	movlb	1	; select bank1
  9537  055F  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9538  0560  0020               	movlb	0	; select bank0
  9539  0561  0840               	movf	??_compensate_pressure+14,w
  9540  0562  0021               	movlb	1	; select bank1
  9541  0563  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9542                           
  9543                           ;BME280_driver/bme280.c: 1246:         if (pressure < pressure_min)
  9544  0564  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9545  0565  1D03               	btfss	3,2
  9546  0566  2D78               	goto	l4338
  9547  0567  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9548  0568  1D03               	btfss	3,2
  9549  0569  2D78               	goto	l4338
  9550  056A  3030               	movlw	48
  9551  056B  0245               	subwf	compensate_pressure@pressure^(0+128),w
  9552  056C  3075               	movlw	117
  9553  056D  3B46               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
  9554  056E  1803               	btfsc	3,0
  9555  056F  2D78               	goto	l4338
  9556  0570                     l4336:	
  9557                           
  9558                           ;BME280_driver/bme280.c: 1247:         {;BME280_driver/bme280.c: 1248:             press
      +                          ure = pressure_min;
  9559  0570  3000               	movlw	0
  9560  0571  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9561  0572  3000               	movlw	0
  9562  0573  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9563  0574  3075               	movlw	117
  9564  0575  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9565  0576  3030               	movlw	48
  9566  0577  2D8A               	goto	L3
  9567  0578                     l4338:	
  9568                           ;BME280_driver/bme280.c: 1249:         }
  9569                           
  9570  0578  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9571  0579  1D03               	btfss	3,2
  9572  057A  2D83               	goto	l4340
  9573  057B  30B1               	movlw	177
  9574  057C  0245               	subwf	compensate_pressure@pressure^(0+128),w
  9575  057D  30AD               	movlw	173
  9576  057E  3B46               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
  9577  057F  3001               	movlw	1
  9578  0580  3B47               	subwfb	(compensate_pressure@pressure+2)^(0+128),w
  9579  0581  1C03               	btfss	3,0
  9580  0582  2D8B               	goto	l196
  9581  0583                     l4340:	
  9582                           
  9583                           ;BME280_driver/bme280.c: 1251:         {;BME280_driver/bme280.c: 1252:             press
      +                          ure = pressure_max;
  9584  0583  3000               	movlw	0
  9585  0584  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
  9586  0585  3001               	movlw	1
  9587  0586  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
  9588  0587  30AD               	movlw	173
  9589  0588  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
  9590  0589  30B0               	movlw	176
  9591  058A                     L3:	
  9592  058A  00C5               	movwf	compensate_pressure@pressure^(0+128)
  9593  058B                     l196:	
  9594                           ;BME280_driver/bme280.c: 1258:     }
  9595                           
  9596                           
  9597                           ;BME280_driver/bme280.c: 1260:     return pressure;
  9598  058B  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
  9599  058C  0020               	movlb	0	; select bank0
  9600  058D  00B1               	movwf	?_compensate_pressure+3
  9601  058E  0021               	movlb	1	; select bank1
  9602  058F  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
  9603  0590  0020               	movlb	0	; select bank0
  9604  0591  00B0               	movwf	?_compensate_pressure+2
  9605  0592  0021               	movlb	1	; select bank1
  9606  0593  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
  9607  0594  0020               	movlb	0	; select bank0
  9608  0595  00AF               	movwf	?_compensate_pressure+1
  9609  0596  0021               	movlb	1	; select bank1
  9610  0597  0845               	movf	compensate_pressure@pressure^(0+128),w
  9611  0598  0020               	movlb	0	; select bank0
  9612  0599  00AE               	movwf	?_compensate_pressure
  9613  059A  0008               	return
  9614  059B                     __end_of_compensate_pressure:	
  9615                           
  9616                           	psect	text8
  9617  0D41                     __ptext8:	
  9618 ;; *************** function _compensate_humidity *****************
  9619 ;; Defined at:
  9620 ;;		line 1268 in file "BME280_driver/bme280.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  9623 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9624 ;;  calib_data      1   14[BANK0 ] PTR const struct bme280_
  9625 ;;		 -> EnvSensor(51), 
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;  uncomp_data     1   30[BANK0 ] PTR const struct bme280_
  9628 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9629 ;;  var3            4   55[BANK0 ] long 
  9630 ;;  var5            4   51[BANK0 ] long 
  9631 ;;  var4            4   47[BANK0 ] long 
  9632 ;;  var2            4   43[BANK0 ] long 
  9633 ;;  var1            4   39[BANK0 ] long 
  9634 ;;  humidity        4   35[BANK0 ] unsigned long 
  9635 ;;  humidity_max    4    0        unsigned long 
  9636 ;; Return value:  Size  Location     Type
  9637 ;;                  4   14[BANK0 ] unsigned long 
  9638 ;; Registers used:
  9639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9640 ;; Tracked objects:
  9641 ;;		On entry : 1F/0
  9642 ;;		On exit  : 1F/0
  9643 ;;		Unchanged: 0/0
  9644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9645 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Totals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;Total ram usage:       45 bytes
  9650 ;; Hardware stack levels used:    1
  9651 ;; Hardware stack levels required when called:    4
  9652 ;; This function calls:
  9653 ;;		___aldiv
  9654 ;;		___lmul
  9655 ;; This function is called by:
  9656 ;;		_bme280_compensate_data
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           
  9661                           ;psect for function _compensate_humidity
  9662  0D41                     _compensate_humidity:	
  9663                           
  9664                           ;incstack = 0
  9665                           ; Regs used in _compensate_humidity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9666                           ;compensate_humidity@uncomp_data stored from wreg
  9667  0D41  00BE               	movwf	compensate_humidity@uncomp_data
  9668                           
  9669                           ;BME280_driver/bme280.c: 1279:     var1 = calib_data->t_fine - ((int32_t)76800);
  9670  0D42  082E               	movf	compensate_humidity@calib_data,w
  9671  0D43  3E21               	addlw	33
  9672  0D44  0086               	movwf	6
  9673  0D45  3001               	movlw	1	; select bank2/3
  9674  0D46  0087               	movwf	7
  9675  0D47  3F40               	moviw [0]fsr1
  9676  0D48  00B2               	movwf	??_compensate_humidity
  9677  0D49  3F41               	moviw [1]fsr1
  9678  0D4A  00B3               	movwf	??_compensate_humidity+1
  9679  0D4B  3F42               	moviw [2]fsr1
  9680  0D4C  00B4               	movwf	??_compensate_humidity+2
  9681  0D4D  3F43               	moviw [3]fsr1
  9682  0D4E  00B5               	movwf	??_compensate_humidity+3
  9683  0D4F  3000               	movlw	0
  9684  0D50  0732               	addwf	??_compensate_humidity,w
  9685  0D51  00C7               	movwf	compensate_humidity@var1
  9686  0D52  30D4               	movlw	212
  9687  0D53  3D33               	addwfc	??_compensate_humidity+1,w
  9688  0D54  00C8               	movwf	compensate_humidity@var1+1
  9689  0D55  30FE               	movlw	254
  9690  0D56  3D34               	addwfc	??_compensate_humidity+2,w
  9691  0D57  00C9               	movwf	compensate_humidity@var1+2
  9692  0D58  30FF               	movlw	255
  9693  0D59  3D35               	addwfc	??_compensate_humidity+3,w
  9694  0D5A  00CA               	movwf	compensate_humidity@var1+3
  9695                           
  9696                           ;BME280_driver/bme280.c: 1280:     var2 = (int32_t)(uncomp_data->humidity * 16384);
  9697  0D5B  083E               	movf	compensate_humidity@uncomp_data,w
  9698  0D5C  3E08               	addlw	8
  9699  0D5D  0086               	movwf	6
  9700  0D5E  0187               	clrf	7
  9701  0D5F  3F40               	moviw [0]fsr1
  9702  0D60  00B2               	movwf	??_compensate_humidity
  9703  0D61  3F41               	moviw [1]fsr1
  9704  0D62  00B3               	movwf	??_compensate_humidity+1
  9705  0D63  3F42               	moviw [2]fsr1
  9706  0D64  00B4               	movwf	??_compensate_humidity+2
  9707  0D65  3F43               	moviw [3]fsr1
  9708  0D66  00B5               	movwf	??_compensate_humidity+3
  9709  0D67  300E               	movlw	14
  9710  0D68                     u4785:	
  9711  0D68  35B2               	lslf	??_compensate_humidity,f
  9712  0D69  0DB3               	rlf	??_compensate_humidity+1,f
  9713  0D6A  0DB4               	rlf	??_compensate_humidity+2,f
  9714  0D6B  0DB5               	rlf	??_compensate_humidity+3,f
  9715  0D6C  0B89               	decfsz	9,f
  9716  0D6D  2D68               	goto	u4785
  9717  0D6E  0835               	movf	??_compensate_humidity+3,w
  9718  0D6F  00CE               	movwf	compensate_humidity@var2+3
  9719  0D70  0834               	movf	??_compensate_humidity+2,w
  9720  0D71  00CD               	movwf	compensate_humidity@var2+2
  9721  0D72  0833               	movf	??_compensate_humidity+1,w
  9722  0D73  00CC               	movwf	compensate_humidity@var2+1
  9723  0D74  0832               	movf	??_compensate_humidity,w
  9724  0D75  00CB               	movwf	compensate_humidity@var2
  9725                           
  9726                           ;BME280_driver/bme280.c: 1281:     var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048
      +                          576);
  9727  0D76  082E               	movf	compensate_humidity@calib_data,w
  9728  0D77  3E1C               	addlw	28
  9729  0D78  0086               	movwf	6
  9730  0D79  3001               	movlw	1	; select bank2/3
  9731  0D7A  0087               	movwf	7
  9732  0D7B  3F40               	moviw [0]fsr1
  9733  0D7C  00B2               	movwf	??_compensate_humidity
  9734  0D7D  3F41               	moviw [1]fsr1
  9735  0D7E  00B3               	movwf	??_compensate_humidity+1
  9736  0D7F  0832               	movf	??_compensate_humidity,w
  9737  0D80  00B4               	movwf	??_compensate_humidity+2
  9738  0D81  0833               	movf	??_compensate_humidity+1,w
  9739  0D82  00B5               	movwf	??_compensate_humidity+3
  9740  0D83  01B6               	clrf	??_compensate_humidity+4
  9741  0D84  01B7               	clrf	??_compensate_humidity+5
  9742  0D85  3014               	movlw	20
  9743  0D86                     u4795:	
  9744  0D86  35B4               	lslf	??_compensate_humidity+2,f
  9745  0D87  0DB5               	rlf	??_compensate_humidity+3,f
  9746  0D88  0DB6               	rlf	??_compensate_humidity+4,f
  9747  0D89  0DB7               	rlf	??_compensate_humidity+5,f
  9748  0D8A  0B89               	decfsz	9,f
  9749  0D8B  2D86               	goto	u4795
  9750  0D8C  0837               	movf	??_compensate_humidity+5,w
  9751  0D8D  00DA               	movwf	compensate_humidity@var3+3
  9752  0D8E  0836               	movf	??_compensate_humidity+4,w
  9753  0D8F  00D9               	movwf	compensate_humidity@var3+2
  9754  0D90  0835               	movf	??_compensate_humidity+3,w
  9755  0D91  00D8               	movwf	compensate_humidity@var3+1
  9756  0D92  0834               	movf	??_compensate_humidity+2,w
  9757  0D93  00D7               	movwf	compensate_humidity@var3
  9758                           
  9759                           ;BME280_driver/bme280.c: 1282:     var4 = ((int32_t)calib_data->dig_H5) * var1;
  9760  0D94  082E               	movf	compensate_humidity@calib_data,w
  9761  0D95  3E1E               	addlw	30
  9762  0D96  0086               	movwf	6
  9763  0D97  3001               	movlw	1	; select bank2/3
  9764  0D98  0087               	movwf	7
  9765  0D99  3F40               	moviw [0]fsr1
  9766  0D9A  00B2               	movwf	??_compensate_humidity
  9767  0D9B  3F41               	moviw [1]fsr1
  9768  0D9C  00B3               	movwf	??_compensate_humidity+1
  9769  0D9D  0832               	movf	??_compensate_humidity,w
  9770  0D9E  00F0               	movwf	___lmul@multiplier
  9771  0D9F  0833               	movf	??_compensate_humidity+1,w
  9772  0DA0  00F1               	movwf	___lmul@multiplier+1
  9773  0DA1  0D89               	rlf	9,f
  9774  0DA2  3B89               	subwfb	9,f
  9775  0DA3  0989               	comf	9,f
  9776  0DA4  00F2               	movwf	___lmul@multiplier+2
  9777  0DA5  00F3               	movwf	___lmul@multiplier+3
  9778  0DA6  084A               	movf	compensate_humidity@var1+3,w
  9779  0DA7  00F7               	movwf	___lmul@multiplicand+3
  9780  0DA8  0849               	movf	compensate_humidity@var1+2,w
  9781  0DA9  00F6               	movwf	___lmul@multiplicand+2
  9782  0DAA  0848               	movf	compensate_humidity@var1+1,w
  9783  0DAB  00F5               	movwf	___lmul@multiplicand+1
  9784  0DAC  0847               	movf	compensate_humidity@var1,w
  9785  0DAD  00F4               	movwf	___lmul@multiplicand
  9786  0DAE  319C  2491  318D   	fcall	___lmul
  9787  0DB1  0873               	movf	?___lmul+3,w
  9788  0DB2  0020               	movlb	0	; select bank0
  9789  0DB3  00D2               	movwf	compensate_humidity@var4+3
  9790  0DB4  0872               	movf	?___lmul+2,w
  9791  0DB5  00D1               	movwf	compensate_humidity@var4+2
  9792  0DB6  0871               	movf	?___lmul+1,w
  9793  0DB7  00D0               	movwf	compensate_humidity@var4+1
  9794  0DB8  0870               	movf	?___lmul,w
  9795  0DB9  00CF               	movwf	compensate_humidity@var4
  9796                           
  9797                           ;BME280_driver/bme280.c: 1283:     var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32
      +                          768;
  9798  0DBA  3000               	movlw	0
  9799  0DBB  00A3               	movwf	___aldiv@divisor+3
  9800  0DBC  3000               	movlw	0
  9801  0DBD  00A2               	movwf	___aldiv@divisor+2
  9802  0DBE  3080               	movlw	128
  9803  0DBF  00A1               	movwf	___aldiv@divisor+1
  9804  0DC0  3000               	movlw	0
  9805  0DC1  00A0               	movwf	___aldiv@divisor
  9806  0DC2  084B               	movf	compensate_humidity@var2,w
  9807  0DC3  00B2               	movwf	??_compensate_humidity
  9808  0DC4  084C               	movf	compensate_humidity@var2+1,w
  9809  0DC5  00B3               	movwf	??_compensate_humidity+1
  9810  0DC6  084D               	movf	compensate_humidity@var2+2,w
  9811  0DC7  00B4               	movwf	??_compensate_humidity+2
  9812  0DC8  084E               	movf	compensate_humidity@var2+3,w
  9813  0DC9  00B5               	movwf	??_compensate_humidity+3
  9814  0DCA  0957               	comf	compensate_humidity@var3,w
  9815  0DCB  00B6               	movwf	??_compensate_humidity+4
  9816  0DCC  0958               	comf	compensate_humidity@var3+1,w
  9817  0DCD  00B7               	movwf	??_compensate_humidity+5
  9818  0DCE  0959               	comf	compensate_humidity@var3+2,w
  9819  0DCF  00B8               	movwf	??_compensate_humidity+6
  9820  0DD0  095A               	comf	compensate_humidity@var3+3,w
  9821  0DD1  00B9               	movwf	??_compensate_humidity+7
  9822  0DD2  0AB6               	incf	??_compensate_humidity+4,f
  9823  0DD3  1903               	skipnz
  9824  0DD4  0AB7               	incf	??_compensate_humidity+5,f
  9825  0DD5  1903               	skipnz
  9826  0DD6  0AB8               	incf	??_compensate_humidity+6,f
  9827  0DD7  1903               	skipnz
  9828  0DD8  0AB9               	incf	??_compensate_humidity+7,f
  9829  0DD9  084F               	movf	compensate_humidity@var4,w
  9830  0DDA  02B6               	subwf	??_compensate_humidity+4,f
  9831  0DDB  0850               	movf	compensate_humidity@var4+1,w
  9832  0DDC  3BB7               	subwfb	??_compensate_humidity+5,f
  9833  0DDD  0851               	movf	compensate_humidity@var4+2,w
  9834  0DDE  3BB8               	subwfb	??_compensate_humidity+6,f
  9835  0DDF  0852               	movf	compensate_humidity@var4+3,w
  9836  0DE0  3BB9               	subwfb	??_compensate_humidity+7,f
  9837  0DE1  0836               	movf	??_compensate_humidity+4,w
  9838  0DE2  07B2               	addwf	??_compensate_humidity,f
  9839  0DE3  0837               	movf	??_compensate_humidity+5,w
  9840  0DE4  3DB3               	addwfc	??_compensate_humidity+1,f
  9841  0DE5  0838               	movf	??_compensate_humidity+6,w
  9842  0DE6  3DB4               	addwfc	??_compensate_humidity+2,f
  9843  0DE7  0839               	movf	??_compensate_humidity+7,w
  9844  0DE8  3DB5               	addwfc	??_compensate_humidity+3,f
  9845  0DE9  3000               	movlw	0
  9846  0DEA  0732               	addwf	??_compensate_humidity,w
  9847  0DEB  00A4               	movwf	___aldiv@dividend
  9848  0DEC  3040               	movlw	64
  9849  0DED  3D33               	addwfc	??_compensate_humidity+1,w
  9850  0DEE  00A5               	movwf	___aldiv@dividend+1
  9851  0DEF  3000               	movlw	0
  9852  0DF0  3D34               	addwfc	??_compensate_humidity+2,w
  9853  0DF1  00A6               	movwf	___aldiv@dividend+2
  9854  0DF2  3000               	movlw	0
  9855  0DF3  3D35               	addwfc	??_compensate_humidity+3,w
  9856  0DF4  00A7               	movwf	___aldiv@dividend+3
  9857  0DF5  3196  265B  318D   	fcall	___aldiv
  9858  0DF8  0823               	movf	?___aldiv+3,w
  9859  0DF9  00D6               	movwf	compensate_humidity@var5+3
  9860  0DFA  0822               	movf	?___aldiv+2,w
  9861  0DFB  00D5               	movwf	compensate_humidity@var5+2
  9862  0DFC  0821               	movf	?___aldiv+1,w
  9863  0DFD  00D4               	movwf	compensate_humidity@var5+1
  9864  0DFE  0820               	movf	?___aldiv,w
  9865  0DFF  00D3               	movwf	compensate_humidity@var5
  9866                           
  9867                           ;BME280_driver/bme280.c: 1284:     var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
  9868  0E00  3000               	movlw	0
  9869  0E01  00A3               	movwf	___aldiv@divisor+3
  9870  0E02  3000               	movlw	0
  9871  0E03  00A2               	movwf	___aldiv@divisor+2
  9872  0E04  3004               	movlw	4
  9873  0E05  00A1               	movwf	___aldiv@divisor+1
  9874  0E06  3000               	movlw	0
  9875  0E07  00A0               	movwf	___aldiv@divisor
  9876  0E08  082E               	movf	compensate_humidity@calib_data,w
  9877  0E09  3E20               	addlw	32
  9878  0E0A  0086               	movwf	6
  9879  0E0B  3001               	movlw	1	; select bank2/3
  9880  0E0C  0087               	movwf	7
  9881  0E0D  0801               	movf	1,w
  9882  0E0E  00F0               	movwf	___lmul@multiplier
  9883  0E0F  3980               	andlw	128
  9884  0E10  1D03               	skipz
  9885  0E11  30FF               	movlw	255
  9886  0E12  00F1               	movwf	___lmul@multiplier+1
  9887  0E13  00F2               	movwf	___lmul@multiplier+2
  9888  0E14  00F3               	movwf	___lmul@multiplier+3
  9889  0E15  084A               	movf	compensate_humidity@var1+3,w
  9890  0E16  00F7               	movwf	___lmul@multiplicand+3
  9891  0E17  0849               	movf	compensate_humidity@var1+2,w
  9892  0E18  00F6               	movwf	___lmul@multiplicand+2
  9893  0E19  0848               	movf	compensate_humidity@var1+1,w
  9894  0E1A  00F5               	movwf	___lmul@multiplicand+1
  9895  0E1B  0847               	movf	compensate_humidity@var1,w
  9896  0E1C  00F4               	movwf	___lmul@multiplicand
  9897  0E1D  319C  2491  318D   	fcall	___lmul
  9898  0E20  0873               	movf	?___lmul+3,w
  9899  0E21  0020               	movlb	0	; select bank0
  9900  0E22  00A7               	movwf	___aldiv@dividend+3
  9901  0E23  0872               	movf	?___lmul+2,w
  9902  0E24  00A6               	movwf	___aldiv@dividend+2
  9903  0E25  0871               	movf	?___lmul+1,w
  9904  0E26  00A5               	movwf	___aldiv@dividend+1
  9905  0E27  0870               	movf	?___lmul,w
  9906  0E28  00A4               	movwf	___aldiv@dividend
  9907  0E29  3196  265B  318D   	fcall	___aldiv
  9908  0E2C  0823               	movf	?___aldiv+3,w
  9909  0E2D  00CE               	movwf	compensate_humidity@var2+3
  9910  0E2E  0822               	movf	?___aldiv+2,w
  9911  0E2F  00CD               	movwf	compensate_humidity@var2+2
  9912  0E30  0821               	movf	?___aldiv+1,w
  9913  0E31  00CC               	movwf	compensate_humidity@var2+1
  9914  0E32  0820               	movf	?___aldiv,w
  9915  0E33  00CB               	movwf	compensate_humidity@var2
  9916                           
  9917                           ;BME280_driver/bme280.c: 1285:     var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
  9918  0E34  3000               	movlw	0
  9919  0E35  00A3               	movwf	___aldiv@divisor+3
  9920  0E36  3000               	movlw	0
  9921  0E37  00A2               	movwf	___aldiv@divisor+2
  9922  0E38  3008               	movlw	8
  9923  0E39  00A1               	movwf	___aldiv@divisor+1
  9924  0E3A  3000               	movlw	0
  9925  0E3B  00A0               	movwf	___aldiv@divisor
  9926  0E3C  082E               	movf	compensate_humidity@calib_data,w
  9927  0E3D  3E1B               	addlw	27
  9928  0E3E  0086               	movwf	6
  9929  0E3F  3001               	movlw	1	; select bank2/3
  9930  0E40  0087               	movwf	7
  9931  0E41  0801               	movf	1,w
  9932  0E42  00B2               	movwf	??_compensate_humidity
  9933  0E43  01B3               	clrf	??_compensate_humidity+1
  9934  0E44  01B4               	clrf	??_compensate_humidity+2
  9935  0E45  01B5               	clrf	??_compensate_humidity+3
  9936  0E46  0835               	movf	??_compensate_humidity+3,w
  9937  0E47  00F3               	movwf	___lmul@multiplier+3
  9938  0E48  0834               	movf	??_compensate_humidity+2,w
  9939  0E49  00F2               	movwf	___lmul@multiplier+2
  9940  0E4A  0833               	movf	??_compensate_humidity+1,w
  9941  0E4B  00F1               	movwf	___lmul@multiplier+1
  9942  0E4C  0832               	movf	??_compensate_humidity,w
  9943  0E4D  00F0               	movwf	___lmul@multiplier
  9944  0E4E  084A               	movf	compensate_humidity@var1+3,w
  9945  0E4F  00F7               	movwf	___lmul@multiplicand+3
  9946  0E50  0849               	movf	compensate_humidity@var1+2,w
  9947  0E51  00F6               	movwf	___lmul@multiplicand+2
  9948  0E52  0848               	movf	compensate_humidity@var1+1,w
  9949  0E53  00F5               	movwf	___lmul@multiplicand+1
  9950  0E54  0847               	movf	compensate_humidity@var1,w
  9951  0E55  00F4               	movwf	___lmul@multiplicand
  9952  0E56  319C  2491  318D   	fcall	___lmul
  9953  0E59  0873               	movf	?___lmul+3,w
  9954  0E5A  0020               	movlb	0	; select bank0
  9955  0E5B  00A7               	movwf	___aldiv@dividend+3
  9956  0E5C  0872               	movf	?___lmul+2,w
  9957  0E5D  00A6               	movwf	___aldiv@dividend+2
  9958  0E5E  0871               	movf	?___lmul+1,w
  9959  0E5F  00A5               	movwf	___aldiv@dividend+1
  9960  0E60  0870               	movf	?___lmul,w
  9961  0E61  00A4               	movwf	___aldiv@dividend
  9962  0E62  3196  265B  318D   	fcall	___aldiv
  9963  0E65  0823               	movf	?___aldiv+3,w
  9964  0E66  00DA               	movwf	compensate_humidity@var3+3
  9965  0E67  0822               	movf	?___aldiv+2,w
  9966  0E68  00D9               	movwf	compensate_humidity@var3+2
  9967  0E69  0821               	movf	?___aldiv+1,w
  9968  0E6A  00D8               	movwf	compensate_humidity@var3+1
  9969  0E6B  0820               	movf	?___aldiv,w
  9970  0E6C  00D7               	movwf	compensate_humidity@var3
  9971                           
  9972                           ;BME280_driver/bme280.c: 1286:     var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (i
      +                          nt32_t)2097152;
  9973  0E6D  3000               	movlw	0
  9974  0E6E  00A3               	movwf	___aldiv@divisor+3
  9975  0E6F  3000               	movlw	0
  9976  0E70  00A2               	movwf	___aldiv@divisor+2
  9977  0E71  3004               	movlw	4
  9978  0E72  00A1               	movwf	___aldiv@divisor+1
  9979  0E73  3000               	movlw	0
  9980  0E74  00A0               	movwf	___aldiv@divisor
  9981  0E75  3000               	movlw	0
  9982  0E76  0757               	addwf	compensate_humidity@var3,w
  9983  0E77  00F0               	movwf	___lmul@multiplier
  9984  0E78  3080               	movlw	128
  9985  0E79  3D58               	addwfc	compensate_humidity@var3+1,w
  9986  0E7A  00F1               	movwf	___lmul@multiplier+1
  9987  0E7B  3000               	movlw	0
  9988  0E7C  3D59               	addwfc	compensate_humidity@var3+2,w
  9989  0E7D  00F2               	movwf	___lmul@multiplier+2
  9990  0E7E  3000               	movlw	0
  9991  0E7F  3D5A               	addwfc	compensate_humidity@var3+3,w
  9992  0E80  00F3               	movwf	___lmul@multiplier+3
  9993  0E81  084E               	movf	compensate_humidity@var2+3,w
  9994  0E82  00F7               	movwf	___lmul@multiplicand+3
  9995  0E83  084D               	movf	compensate_humidity@var2+2,w
  9996  0E84  00F6               	movwf	___lmul@multiplicand+2
  9997  0E85  084C               	movf	compensate_humidity@var2+1,w
  9998  0E86  00F5               	movwf	___lmul@multiplicand+1
  9999  0E87  084B               	movf	compensate_humidity@var2,w
 10000  0E88  00F4               	movwf	___lmul@multiplicand
 10001  0E89  319C  2491  318D   	fcall	___lmul
 10002  0E8C  0873               	movf	?___lmul+3,w
 10003  0E8D  0020               	movlb	0	; select bank0
 10004  0E8E  00A7               	movwf	___aldiv@dividend+3
 10005  0E8F  0872               	movf	?___lmul+2,w
 10006  0E90  00A6               	movwf	___aldiv@dividend+2
 10007  0E91  0871               	movf	?___lmul+1,w
 10008  0E92  00A5               	movwf	___aldiv@dividend+1
 10009  0E93  0870               	movf	?___lmul,w
 10010  0E94  00A4               	movwf	___aldiv@dividend
 10011  0E95  3196  265B  318D   	fcall	___aldiv
 10012  0E98  3000               	movlw	0
 10013  0E99  0720               	addwf	?___aldiv,w
 10014  0E9A  00CF               	movwf	compensate_humidity@var4
 10015  0E9B  3000               	movlw	0
 10016  0E9C  3D21               	addwfc	?___aldiv+1,w
 10017  0E9D  00D0               	movwf	compensate_humidity@var4+1
 10018  0E9E  3020               	movlw	32
 10019  0E9F  3D22               	addwfc	?___aldiv+2,w
 10020  0EA0  00D1               	movwf	compensate_humidity@var4+2
 10021  0EA1  3000               	movlw	0
 10022  0EA2  3D23               	addwfc	?___aldiv+3,w
 10023  0EA3  00D2               	movwf	compensate_humidity@var4+3
 10024                           
 10025                           ;BME280_driver/bme280.c: 1287:     var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192
      +                          ) / 16384;
 10026  0EA4  3000               	movlw	0
 10027  0EA5  00A3               	movwf	___aldiv@divisor+3
 10028  0EA6  3000               	movlw	0
 10029  0EA7  00A2               	movwf	___aldiv@divisor+2
 10030  0EA8  3040               	movlw	64
 10031  0EA9  00A1               	movwf	___aldiv@divisor+1
 10032  0EAA  3000               	movlw	0
 10033  0EAB  00A0               	movwf	___aldiv@divisor
 10034  0EAC  3000               	movlw	0
 10035  0EAD  00B2               	movwf	??_compensate_humidity
 10036  0EAE  3020               	movlw	32
 10037  0EAF  00B3               	movwf	??_compensate_humidity+1
 10038  0EB0  3000               	movlw	0
 10039  0EB1  00B4               	movwf	??_compensate_humidity+2
 10040  0EB2  3000               	movlw	0
 10041  0EB3  00B5               	movwf	??_compensate_humidity+3
 10042  0EB4  082E               	movf	compensate_humidity@calib_data,w
 10043  0EB5  3E19               	addlw	25
 10044  0EB6  0086               	movwf	6
 10045  0EB7  3001               	movlw	1	; select bank2/3
 10046  0EB8  0087               	movwf	7
 10047  0EB9  3F40               	moviw [0]fsr1
 10048  0EBA  00B6               	movwf	??_compensate_humidity+4
 10049  0EBB  3F41               	moviw [1]fsr1
 10050  0EBC  00B7               	movwf	??_compensate_humidity+5
 10051  0EBD  0836               	movf	??_compensate_humidity+4,w
 10052  0EBE  00F0               	movwf	___lmul@multiplier
 10053  0EBF  0837               	movf	??_compensate_humidity+5,w
 10054  0EC0  00F1               	movwf	___lmul@multiplier+1
 10055  0EC1  0D89               	rlf	9,f
 10056  0EC2  3B89               	subwfb	9,f
 10057  0EC3  0989               	comf	9,f
 10058  0EC4  00F2               	movwf	___lmul@multiplier+2
 10059  0EC5  00F3               	movwf	___lmul@multiplier+3
 10060  0EC6  0852               	movf	compensate_humidity@var4+3,w
 10061  0EC7  00F7               	movwf	___lmul@multiplicand+3
 10062  0EC8  0851               	movf	compensate_humidity@var4+2,w
 10063  0EC9  00F6               	movwf	___lmul@multiplicand+2
 10064  0ECA  0850               	movf	compensate_humidity@var4+1,w
 10065  0ECB  00F5               	movwf	___lmul@multiplicand+1
 10066  0ECC  084F               	movf	compensate_humidity@var4,w
 10067  0ECD  00F4               	movwf	___lmul@multiplicand
 10068  0ECE  319C  2491  318D   	fcall	___lmul
 10069  0ED1  0870               	movf	?___lmul,w
 10070  0ED2  0020               	movlb	0	; select bank0
 10071  0ED3  07B2               	addwf	??_compensate_humidity,f
 10072  0ED4  0871               	movf	?___lmul+1,w
 10073  0ED5  3DB3               	addwfc	??_compensate_humidity+1,f
 10074  0ED6  0872               	movf	?___lmul+2,w
 10075  0ED7  3DB4               	addwfc	??_compensate_humidity+2,f
 10076  0ED8  0873               	movf	?___lmul+3,w
 10077  0ED9  3DB5               	addwfc	??_compensate_humidity+3,f
 10078  0EDA  0835               	movf	??_compensate_humidity+3,w
 10079  0EDB  00A7               	movwf	___aldiv@dividend+3
 10080  0EDC  0834               	movf	??_compensate_humidity+2,w
 10081  0EDD  00A6               	movwf	___aldiv@dividend+2
 10082  0EDE  0833               	movf	??_compensate_humidity+1,w
 10083  0EDF  00A5               	movwf	___aldiv@dividend+1
 10084  0EE0  0832               	movf	??_compensate_humidity,w
 10085  0EE1  00A4               	movwf	___aldiv@dividend
 10086  0EE2  3196  265B  318D   	fcall	___aldiv
 10087  0EE5  0823               	movf	?___aldiv+3,w
 10088  0EE6  00CE               	movwf	compensate_humidity@var2+3
 10089  0EE7  0822               	movf	?___aldiv+2,w
 10090  0EE8  00CD               	movwf	compensate_humidity@var2+2
 10091  0EE9  0821               	movf	?___aldiv+1,w
 10092  0EEA  00CC               	movwf	compensate_humidity@var2+1
 10093  0EEB  0820               	movf	?___aldiv,w
 10094  0EEC  00CB               	movwf	compensate_humidity@var2
 10095                           
 10096                           ;BME280_driver/bme280.c: 1288:     var3 = var5 * var2;
 10097  0EED  0856               	movf	compensate_humidity@var5+3,w
 10098  0EEE  00F3               	movwf	___lmul@multiplier+3
 10099  0EEF  0855               	movf	compensate_humidity@var5+2,w
 10100  0EF0  00F2               	movwf	___lmul@multiplier+2
 10101  0EF1  0854               	movf	compensate_humidity@var5+1,w
 10102  0EF2  00F1               	movwf	___lmul@multiplier+1
 10103  0EF3  0853               	movf	compensate_humidity@var5,w
 10104  0EF4  00F0               	movwf	___lmul@multiplier
 10105  0EF5  084E               	movf	compensate_humidity@var2+3,w
 10106  0EF6  00F7               	movwf	___lmul@multiplicand+3
 10107  0EF7  084D               	movf	compensate_humidity@var2+2,w
 10108  0EF8  00F6               	movwf	___lmul@multiplicand+2
 10109  0EF9  084C               	movf	compensate_humidity@var2+1,w
 10110  0EFA  00F5               	movwf	___lmul@multiplicand+1
 10111  0EFB  084B               	movf	compensate_humidity@var2,w
 10112  0EFC  00F4               	movwf	___lmul@multiplicand
 10113  0EFD  319C  2491  318D   	fcall	___lmul
 10114  0F00  0873               	movf	?___lmul+3,w
 10115  0F01  0020               	movlb	0	; select bank0
 10116  0F02  00DA               	movwf	compensate_humidity@var3+3
 10117  0F03  0872               	movf	?___lmul+2,w
 10118  0F04  00D9               	movwf	compensate_humidity@var3+2
 10119  0F05  0871               	movf	?___lmul+1,w
 10120  0F06  00D8               	movwf	compensate_humidity@var3+1
 10121  0F07  0870               	movf	?___lmul,w
 10122  0F08  00D7               	movwf	compensate_humidity@var3
 10123                           
 10124                           ;BME280_driver/bme280.c: 1289:     var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 10125  0F09  3000               	movlw	0
 10126  0F0A  00A3               	movwf	___aldiv@divisor+3
 10127  0F0B  3000               	movlw	0
 10128  0F0C  00A2               	movwf	___aldiv@divisor+2
 10129  0F0D  3080               	movlw	128
 10130  0F0E  00A1               	movwf	___aldiv@divisor+1
 10131  0F0F  3000               	movlw	0
 10132  0F10  00A0               	movwf	___aldiv@divisor
 10133  0F11  085A               	movf	compensate_humidity@var3+3,w
 10134  0F12  00A7               	movwf	___aldiv@dividend+3
 10135  0F13  0859               	movf	compensate_humidity@var3+2,w
 10136  0F14  00A6               	movwf	___aldiv@dividend+2
 10137  0F15  0858               	movf	compensate_humidity@var3+1,w
 10138  0F16  00A5               	movwf	___aldiv@dividend+1
 10139  0F17  0857               	movf	compensate_humidity@var3,w
 10140  0F18  00A4               	movwf	___aldiv@dividend
 10141  0F19  3196  265B  318D   	fcall	___aldiv
 10142  0F1C  0823               	movf	?___aldiv+3,w
 10143  0F1D  00F3               	movwf	___lmul@multiplier+3
 10144  0F1E  0822               	movf	?___aldiv+2,w
 10145  0F1F  00F2               	movwf	___lmul@multiplier+2
 10146  0F20  0821               	movf	?___aldiv+1,w
 10147  0F21  00F1               	movwf	___lmul@multiplier+1
 10148  0F22  0820               	movf	?___aldiv,w
 10149  0F23  00F0               	movwf	___lmul@multiplier
 10150  0F24  3000               	movlw	0
 10151  0F25  00A3               	movwf	___aldiv@divisor+3
 10152  0F26  3000               	movlw	0
 10153  0F27  00A2               	movwf	___aldiv@divisor+2
 10154  0F28  3080               	movlw	128
 10155  0F29  00A1               	movwf	___aldiv@divisor+1
 10156  0F2A  3000               	movlw	0
 10157  0F2B  00A0               	movwf	___aldiv@divisor
 10158  0F2C  085A               	movf	compensate_humidity@var3+3,w
 10159  0F2D  00A7               	movwf	___aldiv@dividend+3
 10160  0F2E  0859               	movf	compensate_humidity@var3+2,w
 10161  0F2F  00A6               	movwf	___aldiv@dividend+2
 10162  0F30  0858               	movf	compensate_humidity@var3+1,w
 10163  0F31  00A5               	movwf	___aldiv@dividend+1
 10164  0F32  0857               	movf	compensate_humidity@var3,w
 10165  0F33  00A4               	movwf	___aldiv@dividend
 10166  0F34  3196  265B  318D   	fcall	___aldiv
 10167  0F37  0823               	movf	?___aldiv+3,w
 10168  0F38  00F7               	movwf	___lmul@multiplicand+3
 10169  0F39  0822               	movf	?___aldiv+2,w
 10170  0F3A  00F6               	movwf	___lmul@multiplicand+2
 10171  0F3B  0821               	movf	?___aldiv+1,w
 10172  0F3C  00F5               	movwf	___lmul@multiplicand+1
 10173  0F3D  0820               	movf	?___aldiv,w
 10174  0F3E  00F4               	movwf	___lmul@multiplicand
 10175  0F3F  319C  2491  318D   	fcall	___lmul
 10176  0F42  0873               	movf	?___lmul+3,w
 10177  0F43  0020               	movlb	0	; select bank0
 10178  0F44  00BD               	movwf	_compensate_humidity$2266+3
 10179  0F45  0872               	movf	?___lmul+2,w
 10180  0F46  00BC               	movwf	_compensate_humidity$2266+2
 10181  0F47  0871               	movf	?___lmul+1,w
 10182  0F48  00BB               	movwf	_compensate_humidity$2266+1
 10183  0F49  0870               	movf	?___lmul,w
 10184  0F4A  00BA               	movwf	_compensate_humidity$2266
 10185                           
 10186                           ;BME280_driver/bme280.c: 1289:     var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 10187  0F4B  3000               	movlw	0
 10188  0F4C  00A3               	movwf	___aldiv@divisor+3
 10189  0F4D  3000               	movlw	0
 10190  0F4E  00A2               	movwf	___aldiv@divisor+2
 10191  0F4F  3000               	movlw	0
 10192  0F50  00A1               	movwf	___aldiv@divisor+1
 10193  0F51  3080               	movlw	128
 10194  0F52  00A0               	movwf	___aldiv@divisor
 10195  0F53  083D               	movf	_compensate_humidity$2266+3,w
 10196  0F54  00A7               	movwf	___aldiv@dividend+3
 10197  0F55  083C               	movf	_compensate_humidity$2266+2,w
 10198  0F56  00A6               	movwf	___aldiv@dividend+2
 10199  0F57  083B               	movf	_compensate_humidity$2266+1,w
 10200  0F58  00A5               	movwf	___aldiv@dividend+1
 10201  0F59  083A               	movf	_compensate_humidity$2266,w
 10202  0F5A  00A4               	movwf	___aldiv@dividend
 10203  0F5B  3196  265B  318D   	fcall	___aldiv
 10204  0F5E  0823               	movf	?___aldiv+3,w
 10205  0F5F  00D2               	movwf	compensate_humidity@var4+3
 10206  0F60  0822               	movf	?___aldiv+2,w
 10207  0F61  00D1               	movwf	compensate_humidity@var4+2
 10208  0F62  0821               	movf	?___aldiv+1,w
 10209  0F63  00D0               	movwf	compensate_humidity@var4+1
 10210  0F64  0820               	movf	?___aldiv,w
 10211  0F65  00CF               	movwf	compensate_humidity@var4
 10212                           
 10213                           ;BME280_driver/bme280.c: 1290:     var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1))
      +                           / 16);
 10214  0F66  3000               	movlw	0
 10215  0F67  00A3               	movwf	___aldiv@divisor+3
 10216  0F68  3000               	movlw	0
 10217  0F69  00A2               	movwf	___aldiv@divisor+2
 10218  0F6A  3000               	movlw	0
 10219  0F6B  00A1               	movwf	___aldiv@divisor+1
 10220  0F6C  3010               	movlw	16
 10221  0F6D  00A0               	movwf	___aldiv@divisor
 10222  0F6E  082E               	movf	compensate_humidity@calib_data,w
 10223  0F6F  3E18               	addlw	24
 10224  0F70  0086               	movwf	6
 10225  0F71  3001               	movlw	1	; select bank2/3
 10226  0F72  0087               	movwf	7
 10227  0F73  0801               	movf	1,w
 10228  0F74  00B2               	movwf	??_compensate_humidity
 10229  0F75  01B3               	clrf	??_compensate_humidity+1
 10230  0F76  01B4               	clrf	??_compensate_humidity+2
 10231  0F77  01B5               	clrf	??_compensate_humidity+3
 10232  0F78  0835               	movf	??_compensate_humidity+3,w
 10233  0F79  00F3               	movwf	___lmul@multiplier+3
 10234  0F7A  0834               	movf	??_compensate_humidity+2,w
 10235  0F7B  00F2               	movwf	___lmul@multiplier+2
 10236  0F7C  0833               	movf	??_compensate_humidity+1,w
 10237  0F7D  00F1               	movwf	___lmul@multiplier+1
 10238  0F7E  0832               	movf	??_compensate_humidity,w
 10239  0F7F  00F0               	movwf	___lmul@multiplier
 10240  0F80  0852               	movf	compensate_humidity@var4+3,w
 10241  0F81  00F7               	movwf	___lmul@multiplicand+3
 10242  0F82  0851               	movf	compensate_humidity@var4+2,w
 10243  0F83  00F6               	movwf	___lmul@multiplicand+2
 10244  0F84  0850               	movf	compensate_humidity@var4+1,w
 10245  0F85  00F5               	movwf	___lmul@multiplicand+1
 10246  0F86  084F               	movf	compensate_humidity@var4,w
 10247  0F87  00F4               	movwf	___lmul@multiplicand
 10248  0F88  319C  2491  318D   	fcall	___lmul
 10249  0F8B  0873               	movf	?___lmul+3,w
 10250  0F8C  0020               	movlb	0	; select bank0
 10251  0F8D  00A7               	movwf	___aldiv@dividend+3
 10252  0F8E  0872               	movf	?___lmul+2,w
 10253  0F8F  00A6               	movwf	___aldiv@dividend+2
 10254  0F90  0871               	movf	?___lmul+1,w
 10255  0F91  00A5               	movwf	___aldiv@dividend+1
 10256  0F92  0870               	movf	?___lmul,w
 10257  0F93  00A4               	movwf	___aldiv@dividend
 10258  0F94  3196  265B  318D   	fcall	___aldiv
 10259  0F97  0820               	movf	?___aldiv,w
 10260  0F98  0257               	subwf	compensate_humidity@var3,w
 10261  0F99  00B6               	movwf	??_compensate_humidity+4
 10262  0F9A  0821               	movf	?___aldiv+1,w
 10263  0F9B  3B58               	subwfb	compensate_humidity@var3+1,w
 10264  0F9C  00B7               	movwf	??_compensate_humidity+5
 10265  0F9D  0822               	movf	?___aldiv+2,w
 10266  0F9E  3B59               	subwfb	compensate_humidity@var3+2,w
 10267  0F9F  00B8               	movwf	??_compensate_humidity+6
 10268  0FA0  0823               	movf	?___aldiv+3,w
 10269  0FA1  3B5A               	subwfb	compensate_humidity@var3+3,w
 10270  0FA2  00B9               	movwf	??_compensate_humidity+7
 10271  0FA3  0839               	movf	??_compensate_humidity+7,w
 10272  0FA4  00D6               	movwf	compensate_humidity@var5+3
 10273  0FA5  0838               	movf	??_compensate_humidity+6,w
 10274  0FA6  00D5               	movwf	compensate_humidity@var5+2
 10275  0FA7  0837               	movf	??_compensate_humidity+5,w
 10276  0FA8  00D4               	movwf	compensate_humidity@var5+1
 10277  0FA9  0836               	movf	??_compensate_humidity+4,w
 10278  0FAA  00D3               	movwf	compensate_humidity@var5
 10279                           
 10280                           ;BME280_driver/bme280.c: 1291:     var5 = (var5 < 0 ? 0 : var5);
 10281  0FAB  1FD6               	btfss	compensate_humidity@var5+3,7
 10282  0FAC  2FB5               	goto	l4380
 10283  0FAD  3000               	movlw	0
 10284  0FAE  00D6               	movwf	compensate_humidity@var5+3
 10285  0FAF  3000               	movlw	0
 10286  0FB0  00D5               	movwf	compensate_humidity@var5+2
 10287  0FB1  3000               	movlw	0
 10288  0FB2  00D4               	movwf	compensate_humidity@var5+1
 10289  0FB3  3000               	movlw	0
 10290  0FB4  00D3               	movwf	compensate_humidity@var5
 10291  0FB5                     l4380:	
 10292                           
 10293                           ;BME280_driver/bme280.c: 1292:     var5 = (var5 > 419430400 ? 419430400 : var5);
 10294  0FB5  1BD6               	btfsc	compensate_humidity@var5+3,7
 10295  0FB6  2FC9               	goto	l4386
 10296  0FB7  3001               	movlw	1
 10297  0FB8  0253               	subwf	compensate_humidity@var5,w
 10298  0FB9  3000               	movlw	0
 10299  0FBA  3B54               	subwfb	compensate_humidity@var5+1,w
 10300  0FBB  3000               	movlw	0
 10301  0FBC  3B55               	subwfb	compensate_humidity@var5+2,w
 10302  0FBD  3019               	movlw	25
 10303  0FBE  3B56               	subwfb	compensate_humidity@var5+3,w
 10304  0FBF  1C03               	btfss	3,0
 10305  0FC0  2FC9               	goto	l4386
 10306  0FC1  3019               	movlw	25
 10307  0FC2  00D6               	movwf	compensate_humidity@var5+3
 10308  0FC3  3000               	movlw	0
 10309  0FC4  00D5               	movwf	compensate_humidity@var5+2
 10310  0FC5  3000               	movlw	0
 10311  0FC6  00D4               	movwf	compensate_humidity@var5+1
 10312  0FC7  3000               	movlw	0
 10313  0FC8  00D3               	movwf	compensate_humidity@var5
 10314  0FC9                     l4386:	
 10315                           
 10316                           ;BME280_driver/bme280.c: 1293:     humidity = (uint32_t)(var5 / 4096);
 10317  0FC9  3000               	movlw	0
 10318  0FCA  00A3               	movwf	___aldiv@divisor+3
 10319  0FCB  3000               	movlw	0
 10320  0FCC  00A2               	movwf	___aldiv@divisor+2
 10321  0FCD  3010               	movlw	16
 10322  0FCE  00A1               	movwf	___aldiv@divisor+1
 10323  0FCF  3000               	movlw	0
 10324  0FD0  00A0               	movwf	___aldiv@divisor
 10325  0FD1  0856               	movf	compensate_humidity@var5+3,w
 10326  0FD2  00A7               	movwf	___aldiv@dividend+3
 10327  0FD3  0855               	movf	compensate_humidity@var5+2,w
 10328  0FD4  00A6               	movwf	___aldiv@dividend+2
 10329  0FD5  0854               	movf	compensate_humidity@var5+1,w
 10330  0FD6  00A5               	movwf	___aldiv@dividend+1
 10331  0FD7  0853               	movf	compensate_humidity@var5,w
 10332  0FD8  00A4               	movwf	___aldiv@dividend
 10333  0FD9  3196  265B  318D   	fcall	___aldiv
 10334  0FDC  0823               	movf	?___aldiv+3,w
 10335  0FDD  00C6               	movwf	compensate_humidity@humidity+3
 10336  0FDE  0822               	movf	?___aldiv+2,w
 10337  0FDF  00C5               	movwf	compensate_humidity@humidity+2
 10338  0FE0  0821               	movf	?___aldiv+1,w
 10339  0FE1  00C4               	movwf	compensate_humidity@humidity+1
 10340  0FE2  0820               	movf	?___aldiv,w
 10341  0FE3  00C3               	movwf	compensate_humidity@humidity
 10342                           
 10343                           ;BME280_driver/bme280.c: 1294:     if (humidity > humidity_max)
 10344  0FE4  0846               	movf	compensate_humidity@humidity+3,w
 10345  0FE5  1D03               	btfss	3,2
 10346  0FE6  2FEF               	goto	l4390
 10347  0FE7  3001               	movlw	1
 10348  0FE8  0243               	subwf	compensate_humidity@humidity,w
 10349  0FE9  3090               	movlw	144
 10350  0FEA  3B44               	subwfb	compensate_humidity@humidity+1,w
 10351  0FEB  3001               	movlw	1
 10352  0FEC  3B45               	subwfb	compensate_humidity@humidity+2,w
 10353  0FED  1C03               	btfss	3,0
 10354  0FEE  2FF7               	goto	l208
 10355  0FEF                     l4390:	
 10356                           
 10357                           ;BME280_driver/bme280.c: 1295:     {;BME280_driver/bme280.c: 1296:         humidity = hu
      +                          midity_max;
 10358  0FEF  3000               	movlw	0
 10359  0FF0  00C6               	movwf	compensate_humidity@humidity+3
 10360  0FF1  3001               	movlw	1
 10361  0FF2  00C5               	movwf	compensate_humidity@humidity+2
 10362  0FF3  3090               	movlw	144
 10363  0FF4  00C4               	movwf	compensate_humidity@humidity+1
 10364  0FF5  3000               	movlw	0
 10365  0FF6  00C3               	movwf	compensate_humidity@humidity
 10366  0FF7                     l208:	
 10367                           ;BME280_driver/bme280.c: 1297:     }
 10368                           
 10369                           
 10370                           ;BME280_driver/bme280.c: 1299:     return humidity;
 10371  0FF7  0846               	movf	compensate_humidity@humidity+3,w
 10372  0FF8  00B1               	movwf	?_compensate_humidity+3
 10373  0FF9  0845               	movf	compensate_humidity@humidity+2,w
 10374  0FFA  00B0               	movwf	?_compensate_humidity+2
 10375  0FFB  0844               	movf	compensate_humidity@humidity+1,w
 10376  0FFC  00AF               	movwf	?_compensate_humidity+1
 10377  0FFD  0843               	movf	compensate_humidity@humidity,w
 10378  0FFE  00AE               	movwf	?_compensate_humidity
 10379  0FFF  0008               	return
 10380  1000                     __end_of_compensate_humidity:	
 10381                           
 10382                           	psect	text9
 10383  1C91                     __ptext9:	
 10384 ;; *************** function ___lmul *****************
 10385 ;; Defined at:
 10386 ;;		line 15 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\Umul32.c"
 10387 ;; Parameters:    Size  Location     Type
 10388 ;;  multiplier      4    0[COMMON] unsigned long 
 10389 ;;  multiplicand    4    4[COMMON] unsigned long 
 10390 ;; Auto vars:     Size  Location     Type
 10391 ;;  product         4    8[COMMON] unsigned long 
 10392 ;; Return value:  Size  Location     Type
 10393 ;;                  4    0[COMMON] unsigned long 
 10394 ;; Registers used:
 10395 ;;		wreg, status,2, status,0
 10396 ;; Tracked objects:
 10397 ;;		On entry : 1E/0
 10398 ;;		On exit  : 1E/0
 10399 ;;		Unchanged: 1E/0
 10400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10401 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;Total ram usage:       12 bytes
 10406 ;; Hardware stack levels used:    1
 10407 ;; Hardware stack levels required when called:    3
 10408 ;; This function calls:
 10409 ;;		Nothing
 10410 ;; This function is called by:
 10411 ;;		_compensate_temperature
 10412 ;;		_compensate_pressure
 10413 ;;		_compensate_humidity
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           
 10418                           ;psect for function ___lmul
 10419  1C91                     ___lmul:	
 10420                           
 10421                           ;incstack = 0
 10422                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10423  1C91  3000               	movlw	0
 10424  1C92  00FB               	movwf	___lmul@product+3
 10425  1C93  3000               	movlw	0
 10426  1C94  00FA               	movwf	___lmul@product+2
 10427  1C95  3000               	movlw	0
 10428  1C96  00F9               	movwf	___lmul@product+1
 10429  1C97  3000               	movlw	0
 10430  1C98  00F8               	movwf	___lmul@product
 10431  1C99                     l2902:	
 10432  1C99  1C70               	btfss	___lmul@multiplier,0
 10433  1C9A  2CA3               	goto	l2906
 10434  1C9B  0874               	movf	___lmul@multiplicand,w
 10435  1C9C  07F8               	addwf	___lmul@product,f
 10436  1C9D  0875               	movf	___lmul@multiplicand+1,w
 10437  1C9E  3DF9               	addwfc	___lmul@product+1,f
 10438  1C9F  0876               	movf	___lmul@multiplicand+2,w
 10439  1CA0  3DFA               	addwfc	___lmul@product+2,f
 10440  1CA1  0877               	movf	___lmul@multiplicand+3,w
 10441  1CA2  3DFB               	addwfc	___lmul@product+3,f
 10442  1CA3                     l2906:	
 10443  1CA3  3001               	movlw	1
 10444  1CA4                     u2545:	
 10445  1CA4  35F4               	lslf	___lmul@multiplicand,f
 10446  1CA5  0DF5               	rlf	___lmul@multiplicand+1,f
 10447  1CA6  0DF6               	rlf	___lmul@multiplicand+2,f
 10448  1CA7  0DF7               	rlf	___lmul@multiplicand+3,f
 10449  1CA8  0B89               	decfsz	9,f
 10450  1CA9  2CA4               	goto	u2545
 10451  1CAA  3001               	movlw	1
 10452  1CAB                     u2555:	
 10453  1CAB  36F3               	lsrf	___lmul@multiplier+3,f
 10454  1CAC  0CF2               	rrf	___lmul@multiplier+2,f
 10455  1CAD  0CF1               	rrf	___lmul@multiplier+1,f
 10456  1CAE  0CF0               	rrf	___lmul@multiplier,f
 10457  1CAF  0B89               	decfsz	9,f
 10458  1CB0  2CAB               	goto	u2555
 10459  1CB1  0873               	movf	___lmul@multiplier+3,w
 10460  1CB2  0472               	iorwf	___lmul@multiplier+2,w
 10461  1CB3  0471               	iorwf	___lmul@multiplier+1,w
 10462  1CB4  0470               	iorwf	___lmul@multiplier,w
 10463  1CB5  1D03               	skipz
 10464  1CB6  2C99               	goto	l2902
 10465  1CB7  087B               	movf	___lmul@product+3,w
 10466  1CB8  00F3               	movwf	?___lmul+3
 10467  1CB9  087A               	movf	___lmul@product+2,w
 10468  1CBA  00F2               	movwf	?___lmul+2
 10469  1CBB  0879               	movf	___lmul@product+1,w
 10470  1CBC  00F1               	movwf	?___lmul+1
 10471  1CBD  0878               	movf	___lmul@product,w
 10472  1CBE  00F0               	movwf	?___lmul
 10473  1CBF  0008               	return
 10474  1CC0                     __end_of___lmul:	
 10475                           
 10476                           	psect	text10
 10477  165B                     __ptext10:	
 10478 ;; *************** function ___aldiv *****************
 10479 ;; Defined at:
 10480 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aldiv.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;  divisor         4    0[BANK0 ] long 
 10483 ;;  dividend        4    4[BANK0 ] long 
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;  quotient        4   10[BANK0 ] long 
 10486 ;;  sign            1    9[BANK0 ] unsigned char 
 10487 ;;  counter         1    8[BANK0 ] unsigned char 
 10488 ;; Return value:  Size  Location     Type
 10489 ;;                  4    0[BANK0 ] long 
 10490 ;; Registers used:
 10491 ;;		wreg, status,2, status,0
 10492 ;; Tracked objects:
 10493 ;;		On entry : 1F/0
 10494 ;;		On exit  : 1F/0
 10495 ;;		Unchanged: 0/0
 10496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10497 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;Total ram usage:       15 bytes
 10502 ;; Hardware stack levels used:    1
 10503 ;; Hardware stack levels required when called:    3
 10504 ;; This function calls:
 10505 ;;		Nothing
 10506 ;; This function is called by:
 10507 ;;		_compensate_temperature
 10508 ;;		_compensate_pressure
 10509 ;;		_compensate_humidity
 10510 ;; This function uses a non-reentrant model
 10511 ;;
 10512                           
 10513                           
 10514                           ;psect for function ___aldiv
 10515  165B                     ___aldiv:	
 10516                           
 10517                           ;incstack = 0
 10518                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10519  165B  01A9               	clrf	___aldiv@sign
 10520  165C  1FA3               	btfss	___aldiv@divisor+3,7
 10521  165D  2E6B               	goto	l865
 10522  165E  09A0               	comf	___aldiv@divisor,f
 10523  165F  09A1               	comf	___aldiv@divisor+1,f
 10524  1660  09A2               	comf	___aldiv@divisor+2,f
 10525  1661  09A3               	comf	___aldiv@divisor+3,f
 10526  1662  0AA0               	incf	___aldiv@divisor,f
 10527  1663  1903               	skipnz
 10528  1664  0AA1               	incf	___aldiv@divisor+1,f
 10529  1665  1903               	skipnz
 10530  1666  0AA2               	incf	___aldiv@divisor+2,f
 10531  1667  1903               	skipnz
 10532  1668  0AA3               	incf	___aldiv@divisor+3,f
 10533  1669  01A9               	clrf	___aldiv@sign
 10534  166A  0AA9               	incf	___aldiv@sign,f
 10535  166B                     l865:	
 10536  166B  1FA7               	btfss	___aldiv@dividend+3,7
 10537  166C  2E7C               	goto	l2948
 10538  166D  09A4               	comf	___aldiv@dividend,f
 10539  166E  09A5               	comf	___aldiv@dividend+1,f
 10540  166F  09A6               	comf	___aldiv@dividend+2,f
 10541  1670  09A7               	comf	___aldiv@dividend+3,f
 10542  1671  0AA4               	incf	___aldiv@dividend,f
 10543  1672  1903               	skipnz
 10544  1673  0AA5               	incf	___aldiv@dividend+1,f
 10545  1674  1903               	skipnz
 10546  1675  0AA6               	incf	___aldiv@dividend+2,f
 10547  1676  1903               	skipnz
 10548  1677  0AA7               	incf	___aldiv@dividend+3,f
 10549  1678  3001               	movlw	1
 10550  1679  00FC               	movwf	??___aldiv
 10551  167A  087C               	movf	??___aldiv,w
 10552  167B  06A9               	xorwf	___aldiv@sign,f
 10553  167C                     l2948:	
 10554  167C  3000               	movlw	0
 10555  167D  00AD               	movwf	___aldiv@quotient+3
 10556  167E  3000               	movlw	0
 10557  167F  00AC               	movwf	___aldiv@quotient+2
 10558  1680  3000               	movlw	0
 10559  1681  00AB               	movwf	___aldiv@quotient+1
 10560  1682  3000               	movlw	0
 10561  1683  00AA               	movwf	___aldiv@quotient
 10562  1684  0823               	movf	___aldiv@divisor+3,w
 10563  1685  0422               	iorwf	___aldiv@divisor+2,w
 10564  1686  0421               	iorwf	___aldiv@divisor+1,w
 10565  1687  0420               	iorwf	___aldiv@divisor,w
 10566  1688  1903               	skipnz
 10567  1689  2EC5               	goto	l2970
 10568  168A  01A8               	clrf	___aldiv@counter
 10569  168B  0AA8               	incf	___aldiv@counter,f
 10570  168C                     l2956:	
 10571  168C  1BA3               	btfsc	___aldiv@divisor+3,7
 10572  168D  2E9A               	goto	l2958
 10573  168E  3001               	movlw	1
 10574  168F                     u2675:	
 10575  168F  35A0               	lslf	___aldiv@divisor,f
 10576  1690  0DA1               	rlf	___aldiv@divisor+1,f
 10577  1691  0DA2               	rlf	___aldiv@divisor+2,f
 10578  1692  0DA3               	rlf	___aldiv@divisor+3,f
 10579  1693  0B89               	decfsz	9,f
 10580  1694  2E8F               	goto	u2675
 10581  1695  3001               	movlw	1
 10582  1696  00FC               	movwf	??___aldiv
 10583  1697  087C               	movf	??___aldiv,w
 10584  1698  07A8               	addwf	___aldiv@counter,f
 10585  1699  2E8C               	goto	l2956
 10586  169A                     l2958:	
 10587  169A  3001               	movlw	1
 10588  169B                     u2695:	
 10589  169B  35AA               	lslf	___aldiv@quotient,f
 10590  169C  0DAB               	rlf	___aldiv@quotient+1,f
 10591  169D  0DAC               	rlf	___aldiv@quotient+2,f
 10592  169E  0DAD               	rlf	___aldiv@quotient+3,f
 10593  169F  0B89               	decfsz	9,f
 10594  16A0  2E9B               	goto	u2695
 10595  16A1  0823               	movf	___aldiv@divisor+3,w
 10596  16A2  0227               	subwf	___aldiv@dividend+3,w
 10597  16A3  1D03               	skipz
 10598  16A4  2EAF               	goto	u2705
 10599  16A5  0822               	movf	___aldiv@divisor+2,w
 10600  16A6  0226               	subwf	___aldiv@dividend+2,w
 10601  16A7  1D03               	skipz
 10602  16A8  2EAF               	goto	u2705
 10603  16A9  0821               	movf	___aldiv@divisor+1,w
 10604  16AA  0225               	subwf	___aldiv@dividend+1,w
 10605  16AB  1D03               	skipz
 10606  16AC  2EAF               	goto	u2705
 10607  16AD  0820               	movf	___aldiv@divisor,w
 10608  16AE  0224               	subwf	___aldiv@dividend,w
 10609  16AF                     u2705:	
 10610  16AF  1C03               	skipc
 10611  16B0  2EBA               	goto	l2966
 10612  16B1  0820               	movf	___aldiv@divisor,w
 10613  16B2  02A4               	subwf	___aldiv@dividend,f
 10614  16B3  0821               	movf	___aldiv@divisor+1,w
 10615  16B4  3BA5               	subwfb	___aldiv@dividend+1,f
 10616  16B5  0822               	movf	___aldiv@divisor+2,w
 10617  16B6  3BA6               	subwfb	___aldiv@dividend+2,f
 10618  16B7  0823               	movf	___aldiv@divisor+3,w
 10619  16B8  3BA7               	subwfb	___aldiv@dividend+3,f
 10620  16B9  142A               	bsf	___aldiv@quotient,0
 10621  16BA                     l2966:	
 10622  16BA  3001               	movlw	1
 10623  16BB                     u2715:	
 10624  16BB  36A3               	lsrf	___aldiv@divisor+3,f
 10625  16BC  0CA2               	rrf	___aldiv@divisor+2,f
 10626  16BD  0CA1               	rrf	___aldiv@divisor+1,f
 10627  16BE  0CA0               	rrf	___aldiv@divisor,f
 10628  16BF  0B89               	decfsz	9,f
 10629  16C0  2EBB               	goto	u2715
 10630  16C1  3001               	movlw	1
 10631  16C2  02A8               	subwf	___aldiv@counter,f
 10632  16C3  1D03               	btfss	3,2
 10633  16C4  2E9A               	goto	l2958
 10634  16C5                     l2970:	
 10635  16C5  0829               	movf	___aldiv@sign,w
 10636  16C6  1903               	btfsc	3,2
 10637  16C7  2ED3               	goto	l2974
 10638  16C8  09AA               	comf	___aldiv@quotient,f
 10639  16C9  09AB               	comf	___aldiv@quotient+1,f
 10640  16CA  09AC               	comf	___aldiv@quotient+2,f
 10641  16CB  09AD               	comf	___aldiv@quotient+3,f
 10642  16CC  0AAA               	incf	___aldiv@quotient,f
 10643  16CD  1903               	skipnz
 10644  16CE  0AAB               	incf	___aldiv@quotient+1,f
 10645  16CF  1903               	skipnz
 10646  16D0  0AAC               	incf	___aldiv@quotient+2,f
 10647  16D1  1903               	skipnz
 10648  16D2  0AAD               	incf	___aldiv@quotient+3,f
 10649  16D3                     l2974:	
 10650  16D3  082D               	movf	___aldiv@quotient+3,w
 10651  16D4  00A3               	movwf	?___aldiv+3
 10652  16D5  082C               	movf	___aldiv@quotient+2,w
 10653  16D6  00A2               	movwf	?___aldiv+2
 10654  16D7  082B               	movf	___aldiv@quotient+1,w
 10655  16D8  00A1               	movwf	?___aldiv+1
 10656  16D9  082A               	movf	___aldiv@quotient,w
 10657  16DA  00A0               	movwf	?___aldiv
 10658  16DB  0008               	return
 10659  16DC                     __end_of___aldiv:	
 10660                           
 10661                           	psect	text11
 10662  1188                     __ptext11:	
 10663 ;; *************** function _UIntToString *****************
 10664 ;; Defined at:
 10665 ;;		line 175 in file "main.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;  n               4    9[BANK0 ] unsigned long 
 10668 ;;  dest            1   13[BANK0 ] PTR unsigned char 
 10669 ;;		 -> main@convertedNumber(16), 
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;  i               2   16[BANK0 ] int 
 10672 ;; Return value:  Size  Location     Type
 10673 ;;                  1    wreg      void 
 10674 ;; Registers used:
 10675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10676 ;; Tracked objects:
 10677 ;;		On entry : 1F/0
 10678 ;;		On exit  : 1F/0
 10679 ;;		Unchanged: 0/0
 10680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10681 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;Total ram usage:        9 bytes
 10686 ;; Hardware stack levels used:    1
 10687 ;; Hardware stack levels required when called:    5
 10688 ;; This function calls:
 10689 ;;		_ReverseString
 10690 ;;		___lldiv
 10691 ;;		___llmod
 10692 ;; This function is called by:
 10693 ;;		_main
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697                           
 10698                           ;psect for function _UIntToString
 10699  1188                     _UIntToString:	
 10700                           
 10701                           ;main.c: 175: void UIntToString(uint32_t n, char* dest);main.c: 176: {;main.c: 177:     
      +                          int i = 0;
 10702                           
 10703                           ;incstack = 0
 10704                           ; Regs used in _UIntToString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10705  1188  01B0               	clrf	UIntToString@i
 10706  1189  01B1               	clrf	UIntToString@i+1
 10707  118A                     l3664:	
 10708                           
 10709                           ;main.c: 182:         dest[i++] = n % 10 + '0';
 10710  118A  3000               	movlw	0
 10711  118B  00F3               	movwf	___llmod@divisor+3
 10712  118C  3000               	movlw	0
 10713  118D  00F2               	movwf	___llmod@divisor+2
 10714  118E  3000               	movlw	0
 10715  118F  00F1               	movwf	___llmod@divisor+1
 10716  1190  300A               	movlw	10
 10717  1191  00F0               	movwf	___llmod@divisor
 10718  1192  082C               	movf	UIntToString@n+3,w
 10719  1193  00F7               	movwf	___llmod@dividend+3
 10720  1194  082B               	movf	UIntToString@n+2,w
 10721  1195  00F6               	movwf	___llmod@dividend+2
 10722  1196  082A               	movf	UIntToString@n+1,w
 10723  1197  00F5               	movwf	___llmod@dividend+1
 10724  1198  0829               	movf	UIntToString@n,w
 10725  1199  00F4               	movwf	___llmod@dividend
 10726  119A  319E  26E6  3191   	fcall	___llmod
 10727  119D  0870               	movf	?___llmod,w
 10728  119E  3E30               	addlw	48
 10729  119F  00AE               	movwf	??_UIntToString
 10730  11A0  0830               	movf	UIntToString@i,w
 10731  11A1  072D               	addwf	UIntToString@dest,w
 10732  11A2  00AF               	movwf	??_UIntToString+1
 10733  11A3  082F               	movf	??_UIntToString+1,w
 10734  11A4  0086               	movwf	6
 10735  11A5  3001               	movlw	1	; select bank2/3
 10736  11A6  0087               	movwf	7
 10737  11A7  082E               	movf	??_UIntToString,w
 10738  11A8  0081               	movwf	1
 10739  11A9  3001               	movlw	1
 10740  11AA  07B0               	addwf	UIntToString@i,f
 10741  11AB  3000               	movlw	0
 10742  11AC  3DB1               	addwfc	UIntToString@i+1,f
 10743                           
 10744                           ;main.c: 184:     } while ((n /= 10) > 0);
 10745  11AD  3000               	movlw	0
 10746  11AE  00F3               	movwf	___lldiv@divisor+3
 10747  11AF  3000               	movlw	0
 10748  11B0  00F2               	movwf	___lldiv@divisor+2
 10749  11B1  3000               	movlw	0
 10750  11B2  00F1               	movwf	___lldiv@divisor+1
 10751  11B3  300A               	movlw	10
 10752  11B4  00F0               	movwf	___lldiv@divisor
 10753  11B5  082C               	movf	UIntToString@n+3,w
 10754  11B6  00F7               	movwf	___lldiv@dividend+3
 10755  11B7  082B               	movf	UIntToString@n+2,w
 10756  11B8  00F6               	movwf	___lldiv@dividend+2
 10757  11B9  082A               	movf	UIntToString@n+1,w
 10758  11BA  00F5               	movwf	___lldiv@dividend+1
 10759  11BB  0829               	movf	UIntToString@n,w
 10760  11BC  00F4               	movwf	___lldiv@dividend
 10761  11BD  3191  2136  3191   	fcall	___lldiv
 10762  11C0  0873               	movf	?___lldiv+3,w
 10763  11C1  0020               	movlb	0	; select bank0
 10764  11C2  00AC               	movwf	UIntToString@n+3
 10765  11C3  0872               	movf	?___lldiv+2,w
 10766  11C4  00AB               	movwf	UIntToString@n+2
 10767  11C5  0871               	movf	?___lldiv+1,w
 10768  11C6  00AA               	movwf	UIntToString@n+1
 10769  11C7  0870               	movf	?___lldiv,w
 10770  11C8  00A9               	movwf	UIntToString@n
 10771  11C9  082C               	movf	UIntToString@n+3,w
 10772  11CA  042B               	iorwf	UIntToString@n+2,w
 10773  11CB  042A               	iorwf	UIntToString@n+1,w
 10774  11CC  0429               	iorwf	UIntToString@n,w
 10775  11CD  1D03               	skipz
 10776  11CE  298A               	goto	l3664
 10777                           
 10778                           ;main.c: 185:     dest[i] = '\0';
 10779  11CF  0830               	movf	UIntToString@i,w
 10780  11D0  072D               	addwf	UIntToString@dest,w
 10781  11D1  00AE               	movwf	??_UIntToString
 10782  11D2  082E               	movf	??_UIntToString,w
 10783  11D3  0086               	movwf	6
 10784  11D4  3001               	movlw	1	; select bank2/3
 10785  11D5  0087               	movwf	7
 10786  11D6  0181               	clrf	1
 10787                           
 10788                           ;main.c: 187:     ReverseString(dest);
 10789  11D7  082D               	movf	UIntToString@dest,w
 10790  11D8  3192  2290         	fcall	_ReverseString
 10791  11DA  0008               	return
 10792  11DB                     __end_of_UIntToString:	
 10793                           
 10794                           	psect	text12
 10795  1EE6                     __ptext12:	
 10796 ;; *************** function ___llmod *****************
 10797 ;; Defined at:
 10798 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\llmod.c"
 10799 ;; Parameters:    Size  Location     Type
 10800 ;;  divisor         4    0[COMMON] unsigned long 
 10801 ;;  dividend        4    4[COMMON] unsigned long 
 10802 ;; Auto vars:     Size  Location     Type
 10803 ;;  counter         1    9[COMMON] unsigned char 
 10804 ;; Return value:  Size  Location     Type
 10805 ;;                  4    0[COMMON] unsigned long 
 10806 ;; Registers used:
 10807 ;;		wreg, status,2, status,0
 10808 ;; Tracked objects:
 10809 ;;		On entry : 1F/0
 10810 ;;		On exit  : 1F/0
 10811 ;;		Unchanged: 1F/0
 10812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10813 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;Total ram usage:       10 bytes
 10818 ;; Hardware stack levels used:    1
 10819 ;; Hardware stack levels required when called:    3
 10820 ;; This function calls:
 10821 ;;		Nothing
 10822 ;; This function is called by:
 10823 ;;		_UIntToString
 10824 ;; This function uses a non-reentrant model
 10825 ;;
 10826                           
 10827                           
 10828                           ;psect for function ___llmod
 10829  1EE6                     ___llmod:	
 10830                           
 10831                           ;incstack = 0
 10832                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 10833  1EE6  0873               	movf	___llmod@divisor+3,w
 10834  1EE7  0472               	iorwf	___llmod@divisor+2,w
 10835  1EE8  0471               	iorwf	___llmod@divisor+1,w
 10836  1EE9  0470               	iorwf	___llmod@divisor,w
 10837  1EEA  1903               	skipnz
 10838  1EEB  2F1F               	goto	l3558
 10839  1EEC  01F9               	clrf	___llmod@counter
 10840  1EED  0AF9               	incf	___llmod@counter,f
 10841  1EEE                     l3548:	
 10842  1EEE  1BF3               	btfsc	___llmod@divisor+3,7
 10843  1EEF  2EFC               	goto	l3550
 10844  1EF0  3001               	movlw	1
 10845  1EF1                     u3655:	
 10846  1EF1  35F0               	lslf	___llmod@divisor,f
 10847  1EF2  0DF1               	rlf	___llmod@divisor+1,f
 10848  1EF3  0DF2               	rlf	___llmod@divisor+2,f
 10849  1EF4  0DF3               	rlf	___llmod@divisor+3,f
 10850  1EF5  0B89               	decfsz	9,f
 10851  1EF6  2EF1               	goto	u3655
 10852  1EF7  3001               	movlw	1
 10853  1EF8  00F8               	movwf	??___llmod
 10854  1EF9  0878               	movf	??___llmod,w
 10855  1EFA  07F9               	addwf	___llmod@counter,f
 10856  1EFB  2EEE               	goto	l3548
 10857  1EFC                     l3550:	
 10858  1EFC  0873               	movf	___llmod@divisor+3,w
 10859  1EFD  0277               	subwf	___llmod@dividend+3,w
 10860  1EFE  1D03               	skipz
 10861  1EFF  2F0A               	goto	u3675
 10862  1F00  0872               	movf	___llmod@divisor+2,w
 10863  1F01  0276               	subwf	___llmod@dividend+2,w
 10864  1F02  1D03               	skipz
 10865  1F03  2F0A               	goto	u3675
 10866  1F04  0871               	movf	___llmod@divisor+1,w
 10867  1F05  0275               	subwf	___llmod@dividend+1,w
 10868  1F06  1D03               	skipz
 10869  1F07  2F0A               	goto	u3675
 10870  1F08  0870               	movf	___llmod@divisor,w
 10871  1F09  0274               	subwf	___llmod@dividend,w
 10872  1F0A                     u3675:	
 10873  1F0A  1C03               	skipc
 10874  1F0B  2F14               	goto	l3554
 10875  1F0C  0870               	movf	___llmod@divisor,w
 10876  1F0D  02F4               	subwf	___llmod@dividend,f
 10877  1F0E  0871               	movf	___llmod@divisor+1,w
 10878  1F0F  3BF5               	subwfb	___llmod@dividend+1,f
 10879  1F10  0872               	movf	___llmod@divisor+2,w
 10880  1F11  3BF6               	subwfb	___llmod@dividend+2,f
 10881  1F12  0873               	movf	___llmod@divisor+3,w
 10882  1F13  3BF7               	subwfb	___llmod@dividend+3,f
 10883  1F14                     l3554:	
 10884  1F14  3001               	movlw	1
 10885  1F15                     u3685:	
 10886  1F15  36F3               	lsrf	___llmod@divisor+3,f
 10887  1F16  0CF2               	rrf	___llmod@divisor+2,f
 10888  1F17  0CF1               	rrf	___llmod@divisor+1,f
 10889  1F18  0CF0               	rrf	___llmod@divisor,f
 10890  1F19  0B89               	decfsz	9,f
 10891  1F1A  2F15               	goto	u3685
 10892  1F1B  3001               	movlw	1
 10893  1F1C  02F9               	subwf	___llmod@counter,f
 10894  1F1D  1D03               	btfss	3,2
 10895  1F1E  2EFC               	goto	l3550
 10896  1F1F                     l3558:	
 10897  1F1F  0877               	movf	___llmod@dividend+3,w
 10898  1F20  00F3               	movwf	?___llmod+3
 10899  1F21  0876               	movf	___llmod@dividend+2,w
 10900  1F22  00F2               	movwf	?___llmod+2
 10901  1F23  0875               	movf	___llmod@dividend+1,w
 10902  1F24  00F1               	movwf	?___llmod+1
 10903  1F25  0874               	movf	___llmod@dividend,w
 10904  1F26  00F0               	movwf	?___llmod
 10905  1F27  0008               	return
 10906  1F28                     __end_of___llmod:	
 10907                           
 10908                           	psect	text13
 10909  1136                     __ptext13:	
 10910 ;; *************** function ___lldiv *****************
 10911 ;; Defined at:
 10912 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\__lldiv.c"
 10913 ;; Parameters:    Size  Location     Type
 10914 ;;  divisor         4    0[COMMON] unsigned long 
 10915 ;;  dividend        4    4[COMMON] unsigned long 
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;  quotient        4    9[COMMON] unsigned long 
 10918 ;;  counter         1   13[COMMON] unsigned char 
 10919 ;; Return value:  Size  Location     Type
 10920 ;;                  4    0[COMMON] unsigned long 
 10921 ;; Registers used:
 10922 ;;		wreg, status,2, status,0
 10923 ;; Tracked objects:
 10924 ;;		On entry : 1E/1
 10925 ;;		On exit  : 1E/0
 10926 ;;		Unchanged: 1E/0
 10927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10928 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10932 ;;Total ram usage:       14 bytes
 10933 ;; Hardware stack levels used:    1
 10934 ;; Hardware stack levels required when called:    3
 10935 ;; This function calls:
 10936 ;;		Nothing
 10937 ;; This function is called by:
 10938 ;;		_compensate_pressure
 10939 ;;		_UIntToString
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           
 10944                           ;psect for function ___lldiv
 10945  1136                     ___lldiv:	
 10946                           
 10947                           ;incstack = 0
 10948                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10949  1136  3000               	movlw	0
 10950  1137  00FC               	movwf	___lldiv@quotient+3
 10951  1138  3000               	movlw	0
 10952  1139  00FB               	movwf	___lldiv@quotient+2
 10953  113A  3000               	movlw	0
 10954  113B  00FA               	movwf	___lldiv@quotient+1
 10955  113C  3000               	movlw	0
 10956  113D  00F9               	movwf	___lldiv@quotient
 10957  113E  0873               	movf	___lldiv@divisor+3,w
 10958  113F  0472               	iorwf	___lldiv@divisor+2,w
 10959  1140  0471               	iorwf	___lldiv@divisor+1,w
 10960  1141  0470               	iorwf	___lldiv@divisor,w
 10961  1142  1903               	skipnz
 10962  1143  297F               	goto	l2934
 10963  1144  01FD               	clrf	___lldiv@counter
 10964  1145  0AFD               	incf	___lldiv@counter,f
 10965  1146                     l2920:	
 10966  1146  1BF3               	btfsc	___lldiv@divisor+3,7
 10967  1147  2954               	goto	l2922
 10968  1148  3001               	movlw	1
 10969  1149                     u2585:	
 10970  1149  35F0               	lslf	___lldiv@divisor,f
 10971  114A  0DF1               	rlf	___lldiv@divisor+1,f
 10972  114B  0DF2               	rlf	___lldiv@divisor+2,f
 10973  114C  0DF3               	rlf	___lldiv@divisor+3,f
 10974  114D  0B89               	decfsz	9,f
 10975  114E  2949               	goto	u2585
 10976  114F  3001               	movlw	1
 10977  1150  00F8               	movwf	??___lldiv
 10978  1151  0878               	movf	??___lldiv,w
 10979  1152  07FD               	addwf	___lldiv@counter,f
 10980  1153  2946               	goto	l2920
 10981  1154                     l2922:	
 10982  1154  3001               	movlw	1
 10983  1155                     u2605:	
 10984  1155  35F9               	lslf	___lldiv@quotient,f
 10985  1156  0DFA               	rlf	___lldiv@quotient+1,f
 10986  1157  0DFB               	rlf	___lldiv@quotient+2,f
 10987  1158  0DFC               	rlf	___lldiv@quotient+3,f
 10988  1159  0B89               	decfsz	9,f
 10989  115A  2955               	goto	u2605
 10990  115B  0873               	movf	___lldiv@divisor+3,w
 10991  115C  0277               	subwf	___lldiv@dividend+3,w
 10992  115D  1D03               	skipz
 10993  115E  2969               	goto	u2615
 10994  115F  0872               	movf	___lldiv@divisor+2,w
 10995  1160  0276               	subwf	___lldiv@dividend+2,w
 10996  1161  1D03               	skipz
 10997  1162  2969               	goto	u2615
 10998  1163  0871               	movf	___lldiv@divisor+1,w
 10999  1164  0275               	subwf	___lldiv@dividend+1,w
 11000  1165  1D03               	skipz
 11001  1166  2969               	goto	u2615
 11002  1167  0870               	movf	___lldiv@divisor,w
 11003  1168  0274               	subwf	___lldiv@dividend,w
 11004  1169                     u2615:	
 11005  1169  1C03               	skipc
 11006  116A  2974               	goto	l2930
 11007  116B  0870               	movf	___lldiv@divisor,w
 11008  116C  02F4               	subwf	___lldiv@dividend,f
 11009  116D  0871               	movf	___lldiv@divisor+1,w
 11010  116E  3BF5               	subwfb	___lldiv@dividend+1,f
 11011  116F  0872               	movf	___lldiv@divisor+2,w
 11012  1170  3BF6               	subwfb	___lldiv@dividend+2,f
 11013  1171  0873               	movf	___lldiv@divisor+3,w
 11014  1172  3BF7               	subwfb	___lldiv@dividend+3,f
 11015  1173  1479               	bsf	___lldiv@quotient,0
 11016  1174                     l2930:	
 11017  1174  3001               	movlw	1
 11018  1175                     u2625:	
 11019  1175  36F3               	lsrf	___lldiv@divisor+3,f
 11020  1176  0CF2               	rrf	___lldiv@divisor+2,f
 11021  1177  0CF1               	rrf	___lldiv@divisor+1,f
 11022  1178  0CF0               	rrf	___lldiv@divisor,f
 11023  1179  0B89               	decfsz	9,f
 11024  117A  2975               	goto	u2625
 11025  117B  3001               	movlw	1
 11026  117C  02FD               	subwf	___lldiv@counter,f
 11027  117D  1D03               	btfss	3,2
 11028  117E  2954               	goto	l2922
 11029  117F                     l2934:	
 11030  117F  087C               	movf	___lldiv@quotient+3,w
 11031  1180  00F3               	movwf	?___lldiv+3
 11032  1181  087B               	movf	___lldiv@quotient+2,w
 11033  1182  00F2               	movwf	?___lldiv+2
 11034  1183  087A               	movf	___lldiv@quotient+1,w
 11035  1184  00F1               	movwf	?___lldiv+1
 11036  1185  0879               	movf	___lldiv@quotient,w
 11037  1186  00F0               	movwf	?___lldiv
 11038  1187  0008               	return
 11039  1188                     __end_of___lldiv:	
 11040                           
 11041                           	psect	text14
 11042  15E4                     __ptext14:	
 11043 ;; *************** function _UIntToHexString *****************
 11044 ;; Defined at:
 11045 ;;		line 106 in file "main.c"
 11046 ;; Parameters:    Size  Location     Type
 11047 ;;  n               4   10[BANK0 ] unsigned long 
 11048 ;;  dest            1   14[BANK0 ] PTR unsigned char 
 11049 ;;		 -> checksum(6), 
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;  remainder       4   21[BANK0 ] unsigned long 
 11052 ;;  i               4   25[BANK0 ] unsigned long 
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  1    wreg      void 
 11055 ;; Registers used:
 11056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11057 ;; Tracked objects:
 11058 ;;		On entry : 1F/0
 11059 ;;		On exit  : 1F/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11062 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;Total ram usage:       19 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; Hardware stack levels required when called:    5
 11069 ;; This function calls:
 11070 ;;		_ReverseString
 11071 ;; This function is called by:
 11072 ;;		_main
 11073 ;; This function uses a non-reentrant model
 11074 ;;
 11075                           
 11076                           
 11077                           ;psect for function _UIntToHexString
 11078  15E4                     _UIntToHexString:	
 11079                           
 11080                           ;main.c: 106: void UIntToHexString(uint32_t n, char* dest);main.c: 107: {;main.c: 108:  
      +                             uint32_t i = 0;
 11081                           
 11082                           ;incstack = 0
 11083                           ; Regs used in _UIntToHexString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11084  15E4  3000               	movlw	0
 11085  15E5  00BC               	movwf	UIntToHexString@i+3
 11086  15E6  3000               	movlw	0
 11087  15E7  00BB               	movwf	UIntToHexString@i+2
 11088  15E8  3000               	movlw	0
 11089  15E9  00BA               	movwf	UIntToHexString@i+1
 11090  15EA  3000               	movlw	0
 11091  15EB  00B9               	movwf	UIntToHexString@i
 11092  15EC                     l464:	
 11093                           ;main.c: 109:     do {
 11094                           
 11095                           
 11096                           ;main.c: 112:         uint32_t remainder = n % 16;
 11097  15EC  300F               	movlw	15
 11098  15ED  052A               	andwf	UIntToHexString@n,w
 11099  15EE  00B5               	movwf	UIntToHexString@remainder
 11100  15EF  3000               	movlw	0
 11101  15F0  052B               	andwf	UIntToHexString@n+1,w
 11102  15F1  00B6               	movwf	UIntToHexString@remainder+1
 11103  15F2  3000               	movlw	0
 11104  15F3  052C               	andwf	UIntToHexString@n+2,w
 11105  15F4  00B7               	movwf	UIntToHexString@remainder+2
 11106  15F5  3000               	movlw	0
 11107  15F6  052D               	andwf	UIntToHexString@n+3,w
 11108  15F7  00B8               	movwf	UIntToHexString@remainder+3
 11109                           
 11110                           ;main.c: 114:         dest[i++] = remainder + (remainder >= 10 ? 55 : '0');
 11111  15F8  0838               	movf	UIntToHexString@remainder+3,w
 11112  15F9  1D03               	btfss	3,2
 11113  15FA  2E0D               	goto	l3622
 11114  15FB  0837               	movf	UIntToHexString@remainder+2,w
 11115  15FC  1D03               	btfss	3,2
 11116  15FD  2E0D               	goto	l3622
 11117  15FE  0836               	movf	UIntToHexString@remainder+1,w
 11118  15FF  1D03               	btfss	3,2
 11119  1600  2E0D               	goto	l3622
 11120  1601  300A               	movlw	10
 11121  1602  0235               	subwf	UIntToHexString@remainder,w
 11122  1603  1803               	btfsc	3,0
 11123  1604  2E0D               	goto	l3622
 11124  1605  3000               	movlw	0
 11125  1606  00B4               	movwf	_UIntToHexString$1373+3
 11126  1607  3000               	movlw	0
 11127  1608  00B3               	movwf	_UIntToHexString$1373+2
 11128  1609  3000               	movlw	0
 11129  160A  00B2               	movwf	_UIntToHexString$1373+1
 11130  160B  3030               	movlw	48
 11131  160C  2E14               	goto	L4
 11132  160D                     l3622:	
 11133  160D  3000               	movlw	0
 11134  160E  00B4               	movwf	_UIntToHexString$1373+3
 11135  160F  3000               	movlw	0
 11136  1610  00B3               	movwf	_UIntToHexString$1373+2
 11137  1611  3000               	movlw	0
 11138  1612  00B2               	movwf	_UIntToHexString$1373+1
 11139  1613  3037               	movlw	55
 11140  1614                     L4:	
 11141  1614  00B1               	movwf	_UIntToHexString$1373
 11142  1615  0831               	movf	_UIntToHexString$1373,w
 11143  1616  0735               	addwf	UIntToHexString@remainder,w
 11144  1617  00AF               	movwf	??_UIntToHexString
 11145  1618  0839               	movf	UIntToHexString@i,w
 11146  1619  072E               	addwf	UIntToHexString@dest,w
 11147  161A  00B0               	movwf	??_UIntToHexString+1
 11148  161B  0830               	movf	??_UIntToHexString+1,w
 11149  161C  0086               	movwf	6
 11150  161D  3001               	movlw	1	; select bank2/3
 11151  161E  0087               	movwf	7
 11152  161F  082F               	movf	??_UIntToHexString,w
 11153  1620  0081               	movwf	1
 11154  1621  3001               	movlw	1
 11155  1622  07B9               	addwf	UIntToHexString@i,f
 11156  1623  3000               	movlw	0
 11157  1624  3DBA               	addwfc	UIntToHexString@i+1,f
 11158  1625  3000               	movlw	0
 11159  1626  3DBB               	addwfc	UIntToHexString@i+2,f
 11160  1627  3000               	movlw	0
 11161  1628  3DBC               	addwfc	UIntToHexString@i+3,f
 11162                           
 11163                           ;main.c: 116:     } while ((n /= 16) > 0);
 11164  1629  3004               	movlw	4
 11165  162A                     u3805:	
 11166  162A  36AD               	lsrf	UIntToHexString@n+3,f
 11167  162B  0CAC               	rrf	UIntToHexString@n+2,f
 11168  162C  0CAB               	rrf	UIntToHexString@n+1,f
 11169  162D  0CAA               	rrf	UIntToHexString@n,f
 11170  162E  0B89               	decfsz	9,f
 11171  162F  2E2A               	goto	u3805
 11172  1630  082D               	movf	UIntToHexString@n+3,w
 11173  1631  042C               	iorwf	UIntToHexString@n+2,w
 11174  1632  042B               	iorwf	UIntToHexString@n+1,w
 11175  1633  042A               	iorwf	UIntToHexString@n,w
 11176  1634  1903               	btfsc	3,2
 11177  1635  2E4A               	goto	l3634
 11178  1636  2DEC               	goto	l464
 11179  1637                     l3630:	
 11180                           
 11181                           ;main.c: 118:     {;main.c: 119:         dest[i] = '0';
 11182  1637  3030               	movlw	48
 11183  1638  00AF               	movwf	??_UIntToHexString
 11184  1639  0839               	movf	UIntToHexString@i,w
 11185  163A  072E               	addwf	UIntToHexString@dest,w
 11186  163B  00B0               	movwf	??_UIntToHexString+1
 11187  163C  0830               	movf	??_UIntToHexString+1,w
 11188  163D  0086               	movwf	6
 11189  163E  3001               	movlw	1	; select bank2/3
 11190  163F  0087               	movwf	7
 11191  1640  082F               	movf	??_UIntToHexString,w
 11192  1641  0081               	movwf	1
 11193                           
 11194                           ;main.c: 120:         i++;
 11195  1642  3001               	movlw	1
 11196  1643  07B9               	addwf	UIntToHexString@i,f
 11197  1644  3000               	movlw	0
 11198  1645  3DBA               	addwfc	UIntToHexString@i+1,f
 11199  1646  3000               	movlw	0
 11200  1647  3DBB               	addwfc	UIntToHexString@i+2,f
 11201  1648  3000               	movlw	0
 11202  1649  3DBC               	addwfc	UIntToHexString@i+3,f
 11203  164A                     l3634:	
 11204                           
 11205                           ;main.c: 117:     while (i < 4)
 11206  164A  083C               	movf	UIntToHexString@i+3,w
 11207  164B  1D03               	btfss	3,2
 11208  164C  2E57               	goto	l3636
 11209  164D  083B               	movf	UIntToHexString@i+2,w
 11210  164E  1D03               	btfss	3,2
 11211  164F  2E57               	goto	l3636
 11212  1650  083A               	movf	UIntToHexString@i+1,w
 11213  1651  1D03               	btfss	3,2
 11214  1652  2E57               	goto	l3636
 11215  1653  3004               	movlw	4
 11216  1654  0239               	subwf	UIntToHexString@i,w
 11217  1655  1C03               	btfss	3,0
 11218  1656  2E37               	goto	l3630
 11219  1657                     l3636:	
 11220                           
 11221                           ;main.c: 122:     ReverseString(dest);
 11222  1657  082E               	movf	UIntToHexString@dest,w
 11223  1658  3192  2290         	fcall	_ReverseString
 11224  165A  0008               	return
 11225  165B                     __end_of_UIntToHexString:	
 11226                           
 11227                           	psect	text15
 11228  1B64                     __ptext15:	
 11229 ;; *************** function _TransmitString *****************
 11230 ;; Defined at:
 11231 ;;		line 73 in file "rtty.c"
 11232 ;; Parameters:    Size  Location     Type
 11233 ;;  message         2    6[COMMON] PTR unsigned char 
 11234 ;;		 -> message_end(73), message_start(70), 
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;  i               2   11[COMMON] int 
 11237 ;;  counti          2    9[COMMON] int 
 11238 ;; Return value:  Size  Location     Type
 11239 ;;                  1    wreg      void 
 11240 ;; Registers used:
 11241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11242 ;; Tracked objects:
 11243 ;;		On entry : 1F/2
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11247 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;Total ram usage:        7 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:    5
 11254 ;; This function calls:
 11255 ;;		_TransmitByte
 11256 ;;		_strlen
 11257 ;; This function is called by:
 11258 ;;		_main
 11259 ;; This function uses a non-reentrant model
 11260 ;;
 11261                           
 11262                           
 11263                           ;psect for function _TransmitString
 11264  1B64                     _TransmitString:	
 11265                           
 11266                           ;rtty.c: 73: void TransmitString(char* message);rtty.c: 74: {;rtty.c: 78:  for (int i = 
      +                          0, counti = strlen(message); i < counti; i++)
 11267                           
 11268                           ;incstack = 0
 11269                           ; Regs used in _TransmitString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11270  1B64  01FB               	clrf	TransmitString@i
 11271  1B65  01FC               	clrf	TransmitString@i+1
 11272  1B66  0877               	movf	TransmitString@message+1,w
 11273  1B67  00F1               	movwf	strlen@s+1
 11274  1B68  0876               	movf	TransmitString@message,w
 11275  1B69  00F0               	movwf	strlen@s
 11276  1B6A  319A  2256  319B   	fcall	_strlen
 11277  1B6D  0871               	movf	?_strlen+1,w
 11278  1B6E  00FA               	movwf	TransmitString@counti+1
 11279  1B6F  0870               	movf	?_strlen,w
 11280  1B70  00F9               	movwf	TransmitString@counti
 11281  1B71                     l4672:	
 11282  1B71  087C               	movf	TransmitString@i+1,w
 11283  1B72  3A80               	xorlw	128
 11284  1B73  00F8               	movwf	??_TransmitString
 11285  1B74  087A               	movf	TransmitString@counti+1,w
 11286  1B75  3A80               	xorlw	128
 11287  1B76  0278               	subwf	??_TransmitString,w
 11288  1B77  1D03               	skipz
 11289  1B78  2B7B               	goto	u5235
 11290  1B79  0879               	movf	TransmitString@counti,w
 11291  1B7A  027B               	subwf	TransmitString@i,w
 11292  1B7B                     u5235:	
 11293  1B7B  1803               	btfsc	3,0
 11294  1B7C  0008               	return
 11295                           
 11296                           ;rtty.c: 79:  {;rtty.c: 80:   TransmitByte(message[i]);
 11297  1B7D  087B               	movf	TransmitString@i,w
 11298  1B7E  0776               	addwf	TransmitString@message,w
 11299  1B7F  0086               	movwf	6
 11300  1B80  087C               	movf	TransmitString@i+1,w
 11301  1B81  3D77               	addwfc	TransmitString@message+1,w
 11302  1B82  0087               	movwf	7
 11303  1B83  0801               	movf	1,w
 11304  1B84  319C  2464  319B   	fcall	_TransmitByte
 11305                           
 11306                           ;rtty.c: 81:  }
 11307  1B87  3001               	movlw	1
 11308  1B88  07FB               	addwf	TransmitString@i,f
 11309  1B89  3000               	movlw	0
 11310  1B8A  3DFC               	addwfc	TransmitString@i+1,f
 11311  1B8B  2B71               	goto	l4672
 11312  1B8C                     __end_of_TransmitString:	
 11313                           
 11314                           	psect	text16
 11315  1C64                     __ptext16:	
 11316 ;; *************** function _TransmitByte *****************
 11317 ;; Defined at:
 11318 ;;		line 51 in file "rtty.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;  byte            1    wreg     unsigned char 
 11321 ;; Auto vars:     Size  Location     Type
 11322 ;;  byte            1    3[COMMON] unsigned char 
 11323 ;;  i               2    4[COMMON] int 
 11324 ;; Return value:  Size  Location     Type
 11325 ;;                  1    wreg      void 
 11326 ;; Registers used:
 11327 ;;		wreg, status,2, status,0, pclath, cstack
 11328 ;; Tracked objects:
 11329 ;;		On entry : 0/2
 11330 ;;		On exit  : 0/0
 11331 ;;		Unchanged: 0/0
 11332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;Total ram usage:        4 bytes
 11338 ;; Hardware stack levels used:    1
 11339 ;; Hardware stack levels required when called:    4
 11340 ;; This function calls:
 11341 ;;		_TransmitBit
 11342 ;; This function is called by:
 11343 ;;		_TransmitString
 11344 ;; This function uses a non-reentrant model
 11345 ;;
 11346                           
 11347                           
 11348                           ;psect for function _TransmitByte
 11349  1C64                     _TransmitByte:	
 11350                           
 11351                           ;incstack = 0
 11352                           ; Regs used in _TransmitByte: [wreg+status,2+status,0+pclath+cstack]
 11353                           ;TransmitByte@byte stored from wreg
 11354  1C64  00F3               	movwf	TransmitByte@byte
 11355                           
 11356                           ;rtty.c: 51: void TransmitByte(char byte);rtty.c: 52: {;rtty.c: 62:     TransmitBit(0);
 11357  1C65  3000               	movlw	0
 11358  1C66  319A  226D  319C   	fcall	_TransmitBit
 11359                           
 11360                           ;rtty.c: 64:  for (int i = 0; i < 7; i++)
 11361  1C69  01F4               	clrf	TransmitByte@i
 11362  1C6A  01F5               	clrf	TransmitByte@i+1
 11363  1C6B                     l3496:	
 11364                           
 11365                           ;rtty.c: 65:  {;rtty.c: 66:   TransmitBit((byte >> i) & 1);
 11366  1C6B  0873               	movf	TransmitByte@byte,w
 11367  1C6C  00F2               	movwf	??_TransmitByte
 11368  1C6D  0A74               	incf	TransmitByte@i,w
 11369  1C6E  2C70               	goto	u3514
 11370  1C6F                     u3515:	
 11371  1C6F  36F2               	lsrf	??_TransmitByte,f
 11372  1C70                     u3514:	
 11373  1C70  0B89               	decfsz	9,f
 11374  1C71  2C6F               	goto	u3515
 11375  1C72  1C72               	btfss	??_TransmitByte,0
 11376  1C73  2C76               	goto	u3520
 11377  1C74  3001               	movlw	1
 11378  1C75  2C77               	goto	u3530
 11379  1C76                     u3520:	
 11380  1C76  3000               	movlw	0
 11381  1C77                     u3530:	
 11382  1C77  319A  226D  319C   	fcall	_TransmitBit
 11383                           
 11384                           ;rtty.c: 67:  }
 11385  1C7A  3001               	movlw	1
 11386  1C7B  07F4               	addwf	TransmitByte@i,f
 11387  1C7C  3000               	movlw	0
 11388  1C7D  3DF5               	addwfc	TransmitByte@i+1,f
 11389  1C7E  0875               	movf	TransmitByte@i+1,w
 11390  1C7F  3A80               	xorlw	128
 11391  1C80  00F2               	movwf	??_TransmitByte
 11392  1C81  3080               	movlw	128
 11393  1C82  0272               	subwf	??_TransmitByte,w
 11394  1C83  1D03               	skipz
 11395  1C84  2C87               	goto	u3545
 11396  1C85  3007               	movlw	7
 11397  1C86  0274               	subwf	TransmitByte@i,w
 11398  1C87                     u3545:	
 11399  1C87  1C03               	skipc
 11400  1C88  2C6B               	goto	l3496
 11401                           
 11402                           ;rtty.c: 69:  TransmitBit(1);
 11403  1C89  3001               	movlw	1
 11404  1C8A  319A  226D  319C   	fcall	_TransmitBit
 11405                           
 11406                           ;rtty.c: 70:  TransmitBit(1);
 11407  1C8D  3001               	movlw	1
 11408  1C8E  319A  226D         	fcall	_TransmitBit
 11409  1C90  0008               	return
 11410  1C91                     __end_of_TransmitByte:	
 11411                           
 11412                           	psect	text17
 11413  1A6D                     __ptext17:	
 11414 ;; *************** function _TransmitBit *****************
 11415 ;; Defined at:
 11416 ;;		line 31 in file "rtty.c"
 11417 ;; Parameters:    Size  Location     Type
 11418 ;;  b               1    wreg     _Bool 
 11419 ;; Auto vars:     Size  Location     Type
 11420 ;;  b               1    1[COMMON] _Bool 
 11421 ;; Return value:  Size  Location     Type
 11422 ;;                  1    wreg      void 
 11423 ;; Registers used:
 11424 ;;		wreg, status,2, status,0
 11425 ;; Tracked objects:
 11426 ;;		On entry : 0/2
 11427 ;;		On exit  : 0/0
 11428 ;;		Unchanged: 0/0
 11429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11434 ;;Total ram usage:        2 bytes
 11435 ;; Hardware stack levels used:    1
 11436 ;; Hardware stack levels required when called:    3
 11437 ;; This function calls:
 11438 ;;		Nothing
 11439 ;; This function is called by:
 11440 ;;		_TransmitByte
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           
 11445                           ;psect for function _TransmitBit
 11446  1A6D                     _TransmitBit:	
 11447                           
 11448                           ;incstack = 0
 11449                           ; Regs used in _TransmitBit: [wreg+status,2+status,0]
 11450                           ;TransmitBit@b stored from wreg
 11451  1A6D  00F1               	movwf	TransmitBit@b
 11452                           
 11453                           ;rtty.c: 31: void TransmitBit(_Bool b);rtty.c: 32: {;rtty.c: 33:  if (b)
 11454  1A6E  0871               	movf	TransmitBit@b,w
 11455  1A6F  1903               	btfsc	3,2
 11456  1A70  2A74               	goto	l705
 11457                           
 11458                           ;rtty.c: 34:  {;rtty.c: 35:   do { LATAbits.LATA4 = 1; } while(0);
 11459  1A71  0022               	movlb	2	; select bank2
 11460  1A72  160C               	bsf	12,4	;volatile
 11461  1A73  2A76               	goto	l3194
 11462  1A74                     l705:	
 11463                           ;rtty.c: 38:  {;rtty.c: 39:   do { LATAbits.LATA4 = 0; } while(0);
 11464                           
 11465  1A74  0022               	movlb	2	; select bank2
 11466  1A75  120C               	bcf	12,4	;volatile
 11467  1A76                     l3194:	
 11468                           
 11469                           ;rtty.c: 46:  _delay((unsigned long)((((1000 / 50) / 2) * 1000)*(4000000/4000000.0)));
 11470  1A76  300D               	movlw	13
 11471  1A77  00F0               	movwf	??_TransmitBit
 11472  1A78  30FC               	movlw	252
 11473  1A79                     u5277:	
 11474  1A79  0B89               	decfsz	9,f
 11475  1A7A  2A79               	goto	u5277
 11476  1A7B  0BF0               	decfsz	??_TransmitBit,f
 11477  1A7C  2A79               	goto	u5277
 11478                           
 11479                           ;rtty.c: 47:  _delay((unsigned long)((((1000 / 50) / 2) * 1000)*(4000000/4000000.0)));
 11480  1A7D  300D               	movlw	13
 11481  1A7E  00F0               	movwf	??_TransmitBit
 11482  1A7F  30FC               	movlw	252
 11483  1A80                     u5287:	
 11484  1A80  0B89               	decfsz	9,f
 11485  1A81  2A80               	goto	u5287
 11486  1A82  0BF0               	decfsz	??_TransmitBit,f
 11487  1A83  2A80               	goto	u5287
 11488  1A84  0008               	return
 11489  1A85                     __end_of_TransmitBit:	
 11490                           
 11491                           	psect	text18
 11492  1A10                     __ptext18:	
 11493 ;; *************** function _SYSTEM_Initialize *****************
 11494 ;; Defined at:
 11495 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;		None
 11498 ;; Auto vars:     Size  Location     Type
 11499 ;;		None
 11500 ;; Return value:  Size  Location     Type
 11501 ;;                  1    wreg      void 
 11502 ;; Registers used:
 11503 ;;		wreg, status,2, status,0, pclath, cstack
 11504 ;; Tracked objects:
 11505 ;;		On entry : B1F/0
 11506 ;;		On exit  : 1F/3
 11507 ;;		Unchanged: 0/0
 11508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11513 ;;Total ram usage:        0 bytes
 11514 ;; Hardware stack levels used:    1
 11515 ;; Hardware stack levels required when called:    5
 11516 ;; This function calls:
 11517 ;;		_EUSART_Initialize
 11518 ;;		_OSCILLATOR_Initialize
 11519 ;;		_PIN_MANAGER_Initialize
 11520 ;;		_TMR0_Initialize
 11521 ;; This function is called by:
 11522 ;;		_main
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           
 11527                           ;psect for function _SYSTEM_Initialize
 11528  1A10                     _SYSTEM_Initialize:	
 11529                           
 11530                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
 11531                           
 11532                           ;incstack = 0
 11533                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11534  1A10  319B  238C  319A   	fcall	_PIN_MANAGER_Initialize
 11535                           
 11536                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
 11537  1A13  3199  21E1  319A   	fcall	_OSCILLATOR_Initialize
 11538                           
 11539                           ;mcc_generated_files/mcc.c: 54:     TMR0_Initialize();
 11540  1A16  319A  2240  319A   	fcall	_TMR0_Initialize
 11541                           
 11542                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
 11543  1A19  319A  2205         	fcall	_EUSART_Initialize
 11544  1A1B  0008               	return
 11545  1A1C                     __end_of_SYSTEM_Initialize:	
 11546                           
 11547                           	psect	text19
 11548  1A40                     __ptext19:	
 11549 ;; *************** function _TMR0_Initialize *****************
 11550 ;; Defined at:
 11551 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;		None
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;		None
 11556 ;; Return value:  Size  Location     Type
 11557 ;;                  1    wreg      void 
 11558 ;; Registers used:
 11559 ;;		wreg, status,2, status,0, pclath, cstack
 11560 ;; Tracked objects:
 11561 ;;		On entry : B1F/2
 11562 ;;		On exit  : 1F/2
 11563 ;;		Unchanged: 0/0
 11564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;Total ram usage:        1 bytes
 11570 ;; Hardware stack levels used:    1
 11571 ;; Hardware stack levels required when called:    4
 11572 ;; This function calls:
 11573 ;;		_TMR0_SetInterruptHandler
 11574 ;; This function is called by:
 11575 ;;		_SYSTEM_Initialize
 11576 ;; This function uses a non-reentrant model
 11577 ;;
 11578                           
 11579                           
 11580                           ;psect for function _TMR0_Initialize
 11581  1A40                     _TMR0_Initialize:	
 11582                           
 11583                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
 11584                           
 11585                           ;incstack = 0
 11586                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11587  1A40  0021               	movlb	1	; select bank1
 11588  1A41  0815               	movf	21,w	;volatile
 11589  1A42  39C0               	andlw	192
 11590  1A43  3812               	iorlw	18
 11591  1A44  0095               	movwf	21	;volatile
 11592                           
 11593                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
 11594  1A45  3083               	movlw	131
 11595  1A46  0020               	movlb	0	; select bank0
 11596  1A47  0095               	movwf	21	;volatile
 11597                           
 11598                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
 11599  1A48  3083               	movlw	131
 11600  1A49  00F2               	movwf	??_TMR0_Initialize
 11601  1A4A  0872               	movf	??_TMR0_Initialize,w
 11602  1A4B  0022               	movlb	2	; select bank2
 11603  1A4C  00E4               	movwf	_timer0ReloadVal^(0+256)	;volatile
 11604                           
 11605                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
 11606  1A4D  110B               	bcf	11,2	;volatile
 11607                           
 11608                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
 11609  1A4E  168B               	bsf	11,5	;volatile
 11610                           
 11611                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11612  1A4F  3003               	movlw	low _TMR0_DefaultInterruptHandler
 11613  1A50  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 11614  1A51  3000               	movlw	high _TMR0_DefaultInterruptHandler
 11615  1A52  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 11616  1A53  3199  21D5         	fcall	_TMR0_SetInterruptHandler
 11617  1A55  0008               	return
 11618  1A56                     __end_of_TMR0_Initialize:	
 11619                           
 11620                           	psect	text20
 11621  1B8C                     __ptext20:	
 11622 ;; *************** function _PIN_MANAGER_Initialize *****************
 11623 ;; Defined at:
 11624 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 11625 ;; Parameters:    Size  Location     Type
 11626 ;;		None
 11627 ;; Auto vars:     Size  Location     Type
 11628 ;;		None
 11629 ;; Return value:  Size  Location     Type
 11630 ;;                  1    wreg      void 
 11631 ;; Registers used:
 11632 ;;		wreg, status,2
 11633 ;; Tracked objects:
 11634 ;;		On entry : B1F/0
 11635 ;;		On exit  : B1F/1D
 11636 ;;		Unchanged: B00/0
 11637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;Total ram usage:        0 bytes
 11643 ;; Hardware stack levels used:    1
 11644 ;; Hardware stack levels required when called:    3
 11645 ;; This function calls:
 11646 ;;		Nothing
 11647 ;; This function is called by:
 11648 ;;		_SYSTEM_Initialize
 11649 ;; This function uses a non-reentrant model
 11650 ;;
 11651                           
 11652                           
 11653                           ;psect for function _PIN_MANAGER_Initialize
 11654  1B8C                     _PIN_MANAGER_Initialize:	
 11655                           
 11656                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 11657                           
 11658                           ;incstack = 0
 11659                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11660  1B8C  0022               	movlb	2	; select bank2
 11661  1B8D  018C               	clrf	12	;volatile
 11662                           
 11663                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 11664  1B8E  018D               	clrf	13	;volatile
 11665                           
 11666                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 11667  1B8F  018E               	clrf	14	;volatile
 11668                           
 11669                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x03;
 11670  1B90  3003               	movlw	3
 11671  1B91  0021               	movlb	1	; select bank1
 11672  1B92  008C               	movwf	12	;volatile
 11673                           
 11674                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x70;
 11675  1B93  3070               	movlw	112
 11676  1B94  008D               	movwf	13	;volatile
 11677                           
 11678                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xDF;
 11679  1B95  30DF               	movlw	223
 11680  1B96  008E               	movwf	14	;volatile
 11681                           
 11682                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x4F;
 11683  1B97  304F               	movlw	79
 11684  1B98  0023               	movlb	3	; select bank3
 11685  1B99  008E               	movwf	14	;volatile
 11686                           
 11687                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x80;
 11688  1B9A  3080               	movlw	128
 11689  1B9B  008D               	movwf	13	;volatile
 11690                           
 11691                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x03;
 11692  1B9C  3003               	movlw	3
 11693  1B9D  008C               	movwf	12	;volatile
 11694                           
 11695                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 11696  1B9E  0024               	movlb	4	; select bank4
 11697  1B9F  018D               	clrf	13	;volatile
 11698                           
 11699                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 11700  1BA0  018C               	clrf	12	;volatile
 11701                           
 11702                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
 11703  1BA1  018E               	clrf	14	;volatile
 11704                           
 11705                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 1;
 11706  1BA2  0021               	movlb	1	; select bank1
 11707  1BA3  1795               	bsf	21,7	;volatile
 11708                           
 11709                           ;mcc_generated_files/pin_manager.c: 91:     ODCONA = 0x00;
 11710  1BA4  0025               	movlb	5	; select bank5
 11711  1BA5  018C               	clrf	12	;volatile
 11712                           
 11713                           ;mcc_generated_files/pin_manager.c: 92:     ODCONB = 0x00;
 11714  1BA6  018D               	clrf	13	;volatile
 11715                           
 11716                           ;mcc_generated_files/pin_manager.c: 93:     ODCONC = 0x00;
 11717  1BA7  018E               	clrf	14	;volatile
 11718                           
 11719                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONA = 0x37;
 11720  1BA8  3037               	movlw	55
 11721  1BA9  0026               	movlb	6	; select bank6
 11722  1BAA  008C               	movwf	12	;volatile
 11723                           
 11724                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONB = 0xF0;
 11725  1BAB  30F0               	movlw	240
 11726  1BAC  008D               	movwf	13	;volatile
 11727                           
 11728                           ;mcc_generated_files/pin_manager.c: 100:     SLRCONC = 0xFF;
 11729  1BAD  30FF               	movlw	255
 11730  1BAE  008E               	movwf	14	;volatile
 11731                           
 11732                           ;mcc_generated_files/pin_manager.c: 109:     RXPPS = 0x0D;
 11733  1BAF  300D               	movlw	13
 11734  1BB0  003C               	movlb	28	; select bank28
 11735  1BB1  00A4               	movwf	36	;volatile
 11736                           
 11737                           ;mcc_generated_files/pin_manager.c: 110:     RB7PPS = 0x12;
 11738  1BB2  3012               	movlw	18
 11739  1BB3  003D               	movlb	29	; select bank29
 11740  1BB4  009F               	movwf	31	;volatile
 11741  1BB5  0008               	return
 11742  1BB6                     __end_of_PIN_MANAGER_Initialize:	
 11743                           
 11744                           	psect	text21
 11745  19E1                     __ptext21:	
 11746 ;; *************** function _OSCILLATOR_Initialize *****************
 11747 ;; Defined at:
 11748 ;;		line 58 in file "mcc_generated_files/mcc.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;		None
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;		None
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  1    wreg      void 
 11755 ;; Registers used:
 11756 ;;		wreg, status,2
 11757 ;; Tracked objects:
 11758 ;;		On entry : B1F/1D
 11759 ;;		On exit  : B1F/2
 11760 ;;		Unchanged: B00/0
 11761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;Total ram usage:        0 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:    3
 11769 ;; This function calls:
 11770 ;;		Nothing
 11771 ;; This function is called by:
 11772 ;;		_SYSTEM_Initialize
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function _OSCILLATOR_Initialize
 11778  19E1                     _OSCILLATOR_Initialize:	
 11779                           
 11780                           ;mcc_generated_files/mcc.c: 61:     OSCCON = 0x68;
 11781                           
 11782                           ;incstack = 0
 11783                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11784  19E1  3068               	movlw	104
 11785  19E2  0021               	movlb	1	; select bank1
 11786  19E3  0099               	movwf	25	;volatile
 11787                           
 11788                           ;mcc_generated_files/mcc.c: 63:     OSCTUNE = 0x00;
 11789  19E4  0198               	clrf	24	;volatile
 11790                           
 11791                           ;mcc_generated_files/mcc.c: 65:     BORCON = 0x00;
 11792  19E5  0022               	movlb	2	; select bank2
 11793  19E6  0196               	clrf	22	;volatile
 11794  19E7  0008               	return
 11795  19E8                     __end_of_OSCILLATOR_Initialize:	
 11796                           
 11797                           	psect	text22
 11798  1A05                     __ptext22:	
 11799 ;; *************** function _EUSART_Initialize *****************
 11800 ;; Defined at:
 11801 ;;		line 56 in file "mcc_generated_files/eusart.c"
 11802 ;; Parameters:    Size  Location     Type
 11803 ;;		None
 11804 ;; Auto vars:     Size  Location     Type
 11805 ;;		None
 11806 ;; Return value:  Size  Location     Type
 11807 ;;                  1    wreg      void 
 11808 ;; Registers used:
 11809 ;;		wreg, status,2
 11810 ;; Tracked objects:
 11811 ;;		On entry : 1F/2
 11812 ;;		On exit  : 1F/3
 11813 ;;		Unchanged: 0/0
 11814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;Total ram usage:        0 bytes
 11820 ;; Hardware stack levels used:    1
 11821 ;; Hardware stack levels required when called:    3
 11822 ;; This function calls:
 11823 ;;		Nothing
 11824 ;; This function is called by:
 11825 ;;		_SYSTEM_Initialize
 11826 ;; This function uses a non-reentrant model
 11827 ;;
 11828                           
 11829                           
 11830                           ;psect for function _EUSART_Initialize
 11831  1A05                     _EUSART_Initialize:	
 11832                           
 11833                           ;mcc_generated_files/eusart.c: 61:     BAUD1CON = 0x08;
 11834                           
 11835                           ;incstack = 0
 11836                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 11837  1A05  3008               	movlw	8
 11838  1A06  0023               	movlb	3	; select bank3
 11839  1A07  009F               	movwf	31	;volatile
 11840                           
 11841                           ;mcc_generated_files/eusart.c: 64:     RC1STA = 0x90;
 11842  1A08  3090               	movlw	144
 11843  1A09  009D               	movwf	29	;volatile
 11844                           
 11845                           ;mcc_generated_files/eusart.c: 67:     TX1STA = 0x24;
 11846  1A0A  3024               	movlw	36
 11847  1A0B  009E               	movwf	30	;volatile
 11848                           
 11849                           ;mcc_generated_files/eusart.c: 70:     SPBRGL = 0x67;
 11850  1A0C  3067               	movlw	103
 11851  1A0D  009B               	movwf	27	;volatile
 11852                           
 11853                           ;mcc_generated_files/eusart.c: 73:     SPBRGH = 0x00;
 11854  1A0E  019C               	clrf	28	;volatile
 11855  1A0F  0008               	return
 11856  1A10                     __end_of_EUSART_Initialize:	
 11857                           
 11858                           	psect	text23
 11859  13C3                     __ptext23:	
 11860 ;; *************** function _IntToString *****************
 11861 ;; Defined at:
 11862 ;;		line 148 in file "main.c"
 11863 ;; Parameters:    Size  Location     Type
 11864 ;;  n               2   11[COMMON] int 
 11865 ;;  dest            1   13[COMMON] PTR unsigned char 
 11866 ;;		 -> main@convertedNumber(16), 
 11867 ;; Auto vars:     Size  Location     Type
 11868 ;;  i               2   12[BANK0 ] int 
 11869 ;;  sign            1   11[BANK0 ] _Bool 
 11870 ;; Return value:  Size  Location     Type
 11871 ;;                  1    wreg      void 
 11872 ;; Registers used:
 11873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11874 ;; Tracked objects:
 11875 ;;		On entry : 1F/1
 11876 ;;		On exit  : 1F/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11879 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;Total ram usage:        8 bytes
 11884 ;; Hardware stack levels used:    1
 11885 ;; Hardware stack levels required when called:    5
 11886 ;; This function calls:
 11887 ;;		_ReverseString
 11888 ;;		___awdiv
 11889 ;;		___awmod
 11890 ;; This function is called by:
 11891 ;;		_main
 11892 ;; This function uses a non-reentrant model
 11893 ;;
 11894                           
 11895                           
 11896                           ;psect for function _IntToString
 11897  13C3                     _IntToString:	
 11898                           
 11899                           ;main.c: 148: void IntToString(int n, char* dest);main.c: 149: {;main.c: 150:     int i 
      +                          = 0;
 11900                           
 11901                           ;incstack = 0
 11902                           ; Regs used in _IntToString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11903  13C3  0020               	movlb	0	; select bank0
 11904  13C4  01AC               	clrf	IntToString@i
 11905  13C5  01AD               	clrf	IntToString@i+1
 11906                           
 11907                           ;main.c: 151:     _Bool sign = n < 0;
 11908  13C6  1FFC               	btfss	IntToString@n+1,7
 11909  13C7  2BCA               	goto	u3830
 11910  13C8  3001               	movlw	1
 11911  13C9  2BCB               	goto	u3840
 11912  13CA                     u3830:	
 11913  13CA  3000               	movlw	0
 11914  13CB                     u3840:	
 11915  13CB  00A9               	movwf	??_IntToString
 11916  13CC  0829               	movf	??_IntToString,w
 11917  13CD  00AB               	movwf	IntToString@sign
 11918                           
 11919                           ;main.c: 152:     if (sign)
 11920  13CE  082B               	movf	IntToString@sign,w
 11921  13CF  1903               	btfsc	3,2
 11922  13D0  2BD6               	goto	l3646
 11923                           
 11924                           ;main.c: 153:     {;main.c: 155:         n = -n;
 11925  13D1  09FB               	comf	IntToString@n,f
 11926  13D2  09FC               	comf	IntToString@n+1,f
 11927  13D3  0AFB               	incf	IntToString@n,f
 11928  13D4  1903               	skipnz
 11929  13D5  0AFC               	incf	IntToString@n+1,f
 11930  13D6                     l3646:	
 11931                           
 11932                           ;main.c: 161:         dest[i++] = n % 10 + '0';
 11933  13D6  300A               	movlw	10
 11934  13D7  00F0               	movwf	___awmod@divisor
 11935  13D8  3000               	movlw	0
 11936  13D9  00F1               	movwf	___awmod@divisor+1
 11937  13DA  087C               	movf	IntToString@n+1,w
 11938  13DB  00F3               	movwf	___awmod@dividend+1
 11939  13DC  087B               	movf	IntToString@n,w
 11940  13DD  00F2               	movwf	___awmod@dividend
 11941  13DE  3190  2001  3193   	fcall	___awmod
 11942  13E1  0870               	movf	?___awmod,w
 11943  13E2  3E30               	addlw	48
 11944  13E3  0020               	movlb	0	; select bank0
 11945  13E4  00A9               	movwf	??_IntToString
 11946  13E5  082C               	movf	IntToString@i,w
 11947  13E6  077D               	addwf	IntToString@dest,w
 11948  13E7  00AA               	movwf	??_IntToString+1
 11949  13E8  082A               	movf	??_IntToString+1,w
 11950  13E9  0086               	movwf	6
 11951  13EA  3001               	movlw	1	; select bank2/3
 11952  13EB  0087               	movwf	7
 11953  13EC  0829               	movf	??_IntToString,w
 11954  13ED  0081               	movwf	1
 11955  13EE  3001               	movlw	1
 11956  13EF  07AC               	addwf	IntToString@i,f
 11957  13F0  3000               	movlw	0
 11958  13F1  3DAD               	addwfc	IntToString@i+1,f
 11959                           
 11960                           ;main.c: 163:     } while ((n /= 10) > 0);
 11961  13F2  300A               	movlw	10
 11962  13F3  00F0               	movwf	___awdiv@divisor
 11963  13F4  3000               	movlw	0
 11964  13F5  00F1               	movwf	___awdiv@divisor+1
 11965  13F6  087C               	movf	IntToString@n+1,w
 11966  13F7  00F3               	movwf	___awdiv@dividend+1
 11967  13F8  087B               	movf	IntToString@n,w
 11968  13F9  00F2               	movwf	___awdiv@dividend
 11969  13FA  3190  20E5  3193   	fcall	___awdiv
 11970  13FD  0871               	movf	?___awdiv+1,w
 11971  13FE  00FC               	movwf	IntToString@n+1
 11972  13FF  0870               	movf	?___awdiv,w
 11973  1400  00FB               	movwf	IntToString@n
 11974  1401  087C               	movf	IntToString@n+1,w
 11975  1402  3A80               	xorlw	128
 11976  1403  00A9               	movwf	??_IntToString
 11977  1404  3080               	movlw	128
 11978  1405  0229               	subwf	??_IntToString,w
 11979  1406  1D03               	skipz
 11980  1407  2C0A               	goto	u3865
 11981  1408  3001               	movlw	1
 11982  1409  027B               	subwf	IntToString@n,w
 11983  140A                     u3865:	
 11984  140A  1803               	skipnc
 11985  140B  2BD6               	goto	l3646
 11986                           
 11987                           ;main.c: 164:     if (sign)
 11988  140C  0020               	movlb	0	; select bank0
 11989  140D  082B               	movf	IntToString@sign,w
 11990  140E  1903               	btfsc	3,2
 11991  140F  2C1F               	goto	l3658
 11992                           
 11993                           ;main.c: 165:     {;main.c: 166:         dest[i++] = '-';
 11994  1410  302D               	movlw	45
 11995  1411  00A9               	movwf	??_IntToString
 11996  1412  082C               	movf	IntToString@i,w
 11997  1413  077D               	addwf	IntToString@dest,w
 11998  1414  00AA               	movwf	??_IntToString+1
 11999  1415  082A               	movf	??_IntToString+1,w
 12000  1416  0086               	movwf	6
 12001  1417  3001               	movlw	1	; select bank2/3
 12002  1418  0087               	movwf	7
 12003  1419  0829               	movf	??_IntToString,w
 12004  141A  0081               	movwf	1
 12005  141B  3001               	movlw	1
 12006  141C  07AC               	addwf	IntToString@i,f
 12007  141D  3000               	movlw	0
 12008  141E  3DAD               	addwfc	IntToString@i+1,f
 12009  141F                     l3658:	
 12010                           
 12011                           ;main.c: 168:     dest[i] = '\0';
 12012  141F  082C               	movf	IntToString@i,w
 12013  1420  077D               	addwf	IntToString@dest,w
 12014  1421  00A9               	movwf	??_IntToString
 12015  1422  0829               	movf	??_IntToString,w
 12016  1423  0086               	movwf	6
 12017  1424  3001               	movlw	1	; select bank2/3
 12018  1425  0087               	movwf	7
 12019  1426  0181               	clrf	1
 12020                           
 12021                           ;main.c: 170:     ReverseString(dest);
 12022  1427  087D               	movf	IntToString@dest,w
 12023  1428  3192  2290         	fcall	_ReverseString
 12024  142A  0008               	return
 12025  142B                     __end_of_IntToString:	
 12026                           
 12027                           	psect	text24
 12028  1001                     __ptext24:	
 12029 ;; *************** function ___awmod *****************
 12030 ;; Defined at:
 12031 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\awmod.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;  divisor         2    0[COMMON] int 
 12034 ;;  dividend        2    2[COMMON] int 
 12035 ;; Auto vars:     Size  Location     Type
 12036 ;;  sign            1    6[COMMON] unsigned char 
 12037 ;;  counter         1    5[COMMON] unsigned char 
 12038 ;; Return value:  Size  Location     Type
 12039 ;;                  2    0[COMMON] int 
 12040 ;; Registers used:
 12041 ;;		wreg, status,2, status,0
 12042 ;; Tracked objects:
 12043 ;;		On entry : 0/0
 12044 ;;		On exit  : 0/0
 12045 ;;		Unchanged: 0/0
 12046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;Total ram usage:        7 bytes
 12052 ;; Hardware stack levels used:    1
 12053 ;; Hardware stack levels required when called:    3
 12054 ;; This function calls:
 12055 ;;		Nothing
 12056 ;; This function is called by:
 12057 ;;		_IntToString
 12058 ;; This function uses a non-reentrant model
 12059 ;;
 12060                           
 12061                           
 12062                           ;psect for function ___awmod
 12063  1001                     ___awmod:	
 12064                           
 12065                           ;incstack = 0
 12066                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12067  1001  01F6               	clrf	___awmod@sign
 12068  1002  1FF3               	btfss	___awmod@dividend+1,7
 12069  1003  280B               	goto	l3512
 12070  1004  09F2               	comf	___awmod@dividend,f
 12071  1005  09F3               	comf	___awmod@dividend+1,f
 12072  1006  0AF2               	incf	___awmod@dividend,f
 12073  1007  1903               	skipnz
 12074  1008  0AF3               	incf	___awmod@dividend+1,f
 12075  1009  01F6               	clrf	___awmod@sign
 12076  100A  0AF6               	incf	___awmod@sign,f
 12077  100B                     l3512:	
 12078  100B  1FF1               	btfss	___awmod@divisor+1,7
 12079  100C  2812               	goto	l3516
 12080  100D  09F0               	comf	___awmod@divisor,f
 12081  100E  09F1               	comf	___awmod@divisor+1,f
 12082  100F  0AF0               	incf	___awmod@divisor,f
 12083  1010  1903               	skipnz
 12084  1011  0AF1               	incf	___awmod@divisor+1,f
 12085  1012                     l3516:	
 12086  1012  0870               	movf	___awmod@divisor,w
 12087  1013  0471               	iorwf	___awmod@divisor+1,w
 12088  1014  1903               	btfsc	3,2
 12089  1015  2839               	goto	l3534
 12090  1016  01F5               	clrf	___awmod@counter
 12091  1017  0AF5               	incf	___awmod@counter,f
 12092  1018                     l3524:	
 12093  1018  1BF1               	btfsc	___awmod@divisor+1,7
 12094  1019  2824               	goto	l3526
 12095  101A  3001               	movlw	1
 12096  101B                     u3585:	
 12097  101B  35F0               	lslf	___awmod@divisor,f
 12098  101C  0DF1               	rlf	___awmod@divisor+1,f
 12099  101D  0B89               	decfsz	9,f
 12100  101E  281B               	goto	u3585
 12101  101F  3001               	movlw	1
 12102  1020  00F4               	movwf	??___awmod
 12103  1021  0874               	movf	??___awmod,w
 12104  1022  07F5               	addwf	___awmod@counter,f
 12105  1023  2818               	goto	l3524
 12106  1024                     l3526:	
 12107  1024  0871               	movf	___awmod@divisor+1,w
 12108  1025  0273               	subwf	___awmod@dividend+1,w
 12109  1026  1D03               	skipz
 12110  1027  282A               	goto	u3605
 12111  1028  0870               	movf	___awmod@divisor,w
 12112  1029  0272               	subwf	___awmod@dividend,w
 12113  102A                     u3605:	
 12114  102A  1C03               	skipc
 12115  102B  2830               	goto	l3530
 12116  102C  0870               	movf	___awmod@divisor,w
 12117  102D  02F2               	subwf	___awmod@dividend,f
 12118  102E  0871               	movf	___awmod@divisor+1,w
 12119  102F  3BF3               	subwfb	___awmod@dividend+1,f
 12120  1030                     l3530:	
 12121  1030  3001               	movlw	1
 12122  1031                     u3615:	
 12123  1031  36F1               	lsrf	___awmod@divisor+1,f
 12124  1032  0CF0               	rrf	___awmod@divisor,f
 12125  1033  0B89               	decfsz	9,f
 12126  1034  2831               	goto	u3615
 12127  1035  3001               	movlw	1
 12128  1036  02F5               	subwf	___awmod@counter,f
 12129  1037  1D03               	btfss	3,2
 12130  1038  2824               	goto	l3526
 12131  1039                     l3534:	
 12132  1039  0876               	movf	___awmod@sign,w
 12133  103A  1903               	btfsc	3,2
 12134  103B  2841               	goto	l3538
 12135  103C  09F2               	comf	___awmod@dividend,f
 12136  103D  09F3               	comf	___awmod@dividend+1,f
 12137  103E  0AF2               	incf	___awmod@dividend,f
 12138  103F  1903               	skipnz
 12139  1040  0AF3               	incf	___awmod@dividend+1,f
 12140  1041                     l3538:	
 12141  1041  0873               	movf	___awmod@dividend+1,w
 12142  1042  00F1               	movwf	?___awmod+1
 12143  1043  0872               	movf	___awmod@dividend,w
 12144  1044  00F0               	movwf	?___awmod
 12145  1045  0008               	return
 12146  1046                     __end_of___awmod:	
 12147                           
 12148                           	psect	text25
 12149  1290                     __ptext25:	
 12150 ;; *************** function _ReverseString *****************
 12151 ;; Defined at:
 12152 ;;		line 93 in file "main.c"
 12153 ;; Parameters:    Size  Location     Type
 12154 ;;  str             1    wreg     PTR unsigned char 
 12155 ;;		 -> checksum(6), main@convertedNumber(16), 
 12156 ;; Auto vars:     Size  Location     Type
 12157 ;;  str             1    8[BANK0 ] PTR unsigned char 
 12158 ;;		 -> checksum(6), main@convertedNumber(16), 
 12159 ;;  opposite        1    3[BANK0 ] PTR unsigned char 
 12160 ;;		 -> checksum(6), main@convertedNumber(16), 
 12161 ;;  temp            1    2[BANK0 ] unsigned char 
 12162 ;;  i               2    6[BANK0 ] int 
 12163 ;;  halfway         2    0[BANK0 ] int 
 12164 ;;  counti          2    4[BANK0 ] int 
 12165 ;; Return value:  Size  Location     Type
 12166 ;;                  1    wreg      void 
 12167 ;; Registers used:
 12168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12169 ;; Tracked objects:
 12170 ;;		On entry : 1F/0
 12171 ;;		On exit  : 1F/0
 12172 ;;		Unchanged: 0/0
 12173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;Total ram usage:       11 bytes
 12179 ;; Hardware stack levels used:    1
 12180 ;; Hardware stack levels required when called:    4
 12181 ;; This function calls:
 12182 ;;		___awdiv
 12183 ;;		_strlen
 12184 ;; This function is called by:
 12185 ;;		_UIntToHexString
 12186 ;;		_IntToString
 12187 ;;		_UIntToString
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           
 12192                           ;psect for function _ReverseString
 12193  1290                     _ReverseString:	
 12194                           
 12195                           ;incstack = 0
 12196                           ; Regs used in _ReverseString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12197                           ;ReverseString@str stored from wreg
 12198  1290  00A8               	movwf	ReverseString@str
 12199                           
 12200                           ;main.c: 93: void ReverseString(char* str);main.c: 94: {;main.c: 95:     int counti = st
      +                          rlen(str);
 12201  1291  0828               	movf	ReverseString@str,w
 12202  1292  00F0               	movwf	strlen@s
 12203  1293  3001               	movlw	1
 12204  1294  00F1               	movwf	strlen@s+1
 12205  1295  319A  2256  3192   	fcall	_strlen
 12206  1298  0871               	movf	?_strlen+1,w
 12207  1299  0020               	movlb	0	; select bank0
 12208  129A  00A5               	movwf	ReverseString@counti+1
 12209  129B  0870               	movf	?_strlen,w
 12210  129C  00A4               	movwf	ReverseString@counti
 12211                           
 12212                           ;main.c: 96:     for (int i = 0, halfway = counti / 2; i < halfway; i++)
 12213  129D  01A6               	clrf	ReverseString@i
 12214  129E  01A7               	clrf	ReverseString@i+1
 12215  129F  3002               	movlw	2
 12216  12A0  00F0               	movwf	___awdiv@divisor
 12217  12A1  3000               	movlw	0
 12218  12A2  00F1               	movwf	___awdiv@divisor+1
 12219  12A3  0825               	movf	ReverseString@counti+1,w
 12220  12A4  00F3               	movwf	___awdiv@dividend+1
 12221  12A5  0824               	movf	ReverseString@counti,w
 12222  12A6  00F2               	movwf	___awdiv@dividend
 12223  12A7  3190  20E5  3192   	fcall	___awdiv
 12224  12AA  0871               	movf	?___awdiv+1,w
 12225  12AB  00A1               	movwf	ReverseString@halfway+1
 12226  12AC  0870               	movf	?___awdiv,w
 12227  12AD  00A0               	movwf	ReverseString@halfway
 12228  12AE                     l3450:	
 12229  12AE  0827               	movf	ReverseString@i+1,w
 12230  12AF  3A80               	xorlw	128
 12231  12B0  00F9               	movwf	??_ReverseString
 12232  12B1  0821               	movf	ReverseString@halfway+1,w
 12233  12B2  3A80               	xorlw	128
 12234  12B3  0279               	subwf	??_ReverseString,w
 12235  12B4  1D03               	skipz
 12236  12B5  2AB8               	goto	u3475
 12237  12B6  0820               	movf	ReverseString@halfway,w
 12238  12B7  0226               	subwf	ReverseString@i,w
 12239  12B8                     u3475:	
 12240  12B8  1803               	btfsc	3,0
 12241  12B9  2AE9               	goto	l3452
 12242                           
 12243                           ;main.c: 97:     {;main.c: 98:         char temp = str[i];
 12244  12BA  0020               	movlb	0	; select bank0
 12245  12BB  0826               	movf	ReverseString@i,w
 12246  12BC  0728               	addwf	ReverseString@str,w
 12247  12BD  00F9               	movwf	??_ReverseString
 12248  12BE  0879               	movf	??_ReverseString,w
 12249  12BF  0086               	movwf	6
 12250  12C0  3001               	movlw	1	; select bank2/3
 12251  12C1  0087               	movwf	7
 12252  12C2  0801               	movf	1,w
 12253  12C3  00FA               	movwf	??_ReverseString+1
 12254  12C4  087A               	movf	??_ReverseString+1,w
 12255  12C5  00A2               	movwf	ReverseString@temp
 12256                           
 12257                           ;main.c: 99:         char* opposite = str + (counti - 1 - i);
 12258  12C6  0826               	movf	ReverseString@i,w
 12259  12C7  0228               	subwf	ReverseString@str,w
 12260  12C8  0724               	addwf	ReverseString@counti,w
 12261  12C9  3EFF               	addlw	-1
 12262  12CA  00F9               	movwf	??_ReverseString
 12263  12CB  0879               	movf	??_ReverseString,w
 12264  12CC  00A3               	movwf	ReverseString@opposite
 12265                           
 12266                           ;main.c: 100:         str[i] = *opposite;
 12267  12CD  0823               	movf	ReverseString@opposite,w
 12268  12CE  0086               	movwf	6
 12269  12CF  3001               	movlw	1	; select bank2/3
 12270  12D0  0087               	movwf	7
 12271  12D1  0801               	movf	1,w
 12272  12D2  00F9               	movwf	??_ReverseString
 12273  12D3  0826               	movf	ReverseString@i,w
 12274  12D4  0728               	addwf	ReverseString@str,w
 12275  12D5  00FA               	movwf	??_ReverseString+1
 12276  12D6  087A               	movf	??_ReverseString+1,w
 12277  12D7  0086               	movwf	6
 12278  12D8  3001               	movlw	1	; select bank2/3
 12279  12D9  0087               	movwf	7
 12280  12DA  0879               	movf	??_ReverseString,w
 12281  12DB  0081               	movwf	1
 12282                           
 12283                           ;main.c: 101:         *opposite = temp;
 12284  12DC  0822               	movf	ReverseString@temp,w
 12285  12DD  00F9               	movwf	??_ReverseString
 12286  12DE  0823               	movf	ReverseString@opposite,w
 12287  12DF  0086               	movwf	6
 12288  12E0  3001               	movlw	1	; select bank2/3
 12289  12E1  0087               	movwf	7
 12290  12E2  0879               	movf	??_ReverseString,w
 12291  12E3  0081               	movwf	1
 12292                           
 12293                           ;main.c: 102:     }
 12294  12E4  3001               	movlw	1
 12295  12E5  07A6               	addwf	ReverseString@i,f
 12296  12E6  3000               	movlw	0
 12297  12E7  3DA7               	addwfc	ReverseString@i+1,f
 12298  12E8  2AAE               	goto	l3450
 12299  12E9                     l3452:	
 12300                           
 12301                           ;main.c: 103:     str[counti] = '\0';
 12302  12E9  0020               	movlb	0	; select bank0
 12303  12EA  0824               	movf	ReverseString@counti,w
 12304  12EB  0728               	addwf	ReverseString@str,w
 12305  12EC  00F9               	movwf	??_ReverseString
 12306  12ED  0879               	movf	??_ReverseString,w
 12307  12EE  0086               	movwf	6
 12308  12EF  3001               	movlw	1	; select bank2/3
 12309  12F0  0087               	movwf	7
 12310  12F1  0181               	clrf	1
 12311  12F2  0008               	return
 12312  12F3                     __end_of_ReverseString:	
 12313                           
 12314                           	psect	text26
 12315  10E5                     __ptext26:	
 12316 ;; *************** function ___awdiv *****************
 12317 ;; Defined at:
 12318 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\awdiv.c"
 12319 ;; Parameters:    Size  Location     Type
 12320 ;;  divisor         2    0[COMMON] int 
 12321 ;;  dividend        2    2[COMMON] int 
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;  quotient        2    7[COMMON] int 
 12324 ;;  sign            1    6[COMMON] unsigned char 
 12325 ;;  counter         1    5[COMMON] unsigned char 
 12326 ;; Return value:  Size  Location     Type
 12327 ;;                  2    0[COMMON] int 
 12328 ;; Registers used:
 12329 ;;		wreg, status,2, status,0
 12330 ;; Tracked objects:
 12331 ;;		On entry : 1F/0
 12332 ;;		On exit  : 1F/0
 12333 ;;		Unchanged: 1F/0
 12334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12339 ;;Total ram usage:        9 bytes
 12340 ;; Hardware stack levels used:    1
 12341 ;; Hardware stack levels required when called:    3
 12342 ;; This function calls:
 12343 ;;		Nothing
 12344 ;; This function is called by:
 12345 ;;		_ReverseString
 12346 ;;		_IntToString
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           
 12351                           ;psect for function ___awdiv
 12352  10E5                     ___awdiv:	
 12353                           
 12354                           ;incstack = 0
 12355                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12356  10E5  01F6               	clrf	___awdiv@sign
 12357  10E6  1FF1               	btfss	___awdiv@divisor+1,7
 12358  10E7  28EF               	goto	l3204
 12359  10E8  09F0               	comf	___awdiv@divisor,f
 12360  10E9  09F1               	comf	___awdiv@divisor+1,f
 12361  10EA  0AF0               	incf	___awdiv@divisor,f
 12362  10EB  1903               	skipnz
 12363  10EC  0AF1               	incf	___awdiv@divisor+1,f
 12364  10ED  01F6               	clrf	___awdiv@sign
 12365  10EE  0AF6               	incf	___awdiv@sign,f
 12366  10EF                     l3204:	
 12367  10EF  1FF3               	btfss	___awdiv@dividend+1,7
 12368  10F0  28FA               	goto	l3210
 12369  10F1  09F2               	comf	___awdiv@dividend,f
 12370  10F2  09F3               	comf	___awdiv@dividend+1,f
 12371  10F3  0AF2               	incf	___awdiv@dividend,f
 12372  10F4  1903               	skipnz
 12373  10F5  0AF3               	incf	___awdiv@dividend+1,f
 12374  10F6  3001               	movlw	1
 12375  10F7  00F4               	movwf	??___awdiv
 12376  10F8  0874               	movf	??___awdiv,w
 12377  10F9  06F6               	xorwf	___awdiv@sign,f
 12378  10FA                     l3210:	
 12379  10FA  01F7               	clrf	___awdiv@quotient
 12380  10FB  01F8               	clrf	___awdiv@quotient+1
 12381  10FC  0870               	movf	___awdiv@divisor,w
 12382  10FD  0471               	iorwf	___awdiv@divisor+1,w
 12383  10FE  1903               	btfsc	3,2
 12384  10FF  2929               	goto	l3232
 12385  1100  01F5               	clrf	___awdiv@counter
 12386  1101  0AF5               	incf	___awdiv@counter,f
 12387  1102                     l3220:	
 12388  1102  1BF1               	btfsc	___awdiv@divisor+1,7
 12389  1103  290E               	goto	l3222
 12390  1104  3001               	movlw	1
 12391  1105                     u3075:	
 12392  1105  35F0               	lslf	___awdiv@divisor,f
 12393  1106  0DF1               	rlf	___awdiv@divisor+1,f
 12394  1107  0B89               	decfsz	9,f
 12395  1108  2905               	goto	u3075
 12396  1109  3001               	movlw	1
 12397  110A  00F4               	movwf	??___awdiv
 12398  110B  0874               	movf	??___awdiv,w
 12399  110C  07F5               	addwf	___awdiv@counter,f
 12400  110D  2902               	goto	l3220
 12401  110E                     l3222:	
 12402  110E  3001               	movlw	1
 12403  110F                     u3095:	
 12404  110F  35F7               	lslf	___awdiv@quotient,f
 12405  1110  0DF8               	rlf	___awdiv@quotient+1,f
 12406  1111  0B89               	decfsz	9,f
 12407  1112  290F               	goto	u3095
 12408  1113  0871               	movf	___awdiv@divisor+1,w
 12409  1114  0273               	subwf	___awdiv@dividend+1,w
 12410  1115  1D03               	skipz
 12411  1116  2919               	goto	u3105
 12412  1117  0870               	movf	___awdiv@divisor,w
 12413  1118  0272               	subwf	___awdiv@dividend,w
 12414  1119                     u3105:	
 12415  1119  1C03               	skipc
 12416  111A  2920               	goto	l3228
 12417  111B  0870               	movf	___awdiv@divisor,w
 12418  111C  02F2               	subwf	___awdiv@dividend,f
 12419  111D  0871               	movf	___awdiv@divisor+1,w
 12420  111E  3BF3               	subwfb	___awdiv@dividend+1,f
 12421  111F  1477               	bsf	___awdiv@quotient,0
 12422  1120                     l3228:	
 12423  1120  3001               	movlw	1
 12424  1121                     u3115:	
 12425  1121  36F1               	lsrf	___awdiv@divisor+1,f
 12426  1122  0CF0               	rrf	___awdiv@divisor,f
 12427  1123  0B89               	decfsz	9,f
 12428  1124  2921               	goto	u3115
 12429  1125  3001               	movlw	1
 12430  1126  02F5               	subwf	___awdiv@counter,f
 12431  1127  1D03               	btfss	3,2
 12432  1128  290E               	goto	l3222
 12433  1129                     l3232:	
 12434  1129  0876               	movf	___awdiv@sign,w
 12435  112A  1903               	btfsc	3,2
 12436  112B  2931               	goto	l3236
 12437  112C  09F7               	comf	___awdiv@quotient,f
 12438  112D  09F8               	comf	___awdiv@quotient+1,f
 12439  112E  0AF7               	incf	___awdiv@quotient,f
 12440  112F  1903               	skipnz
 12441  1130  0AF8               	incf	___awdiv@quotient+1,f
 12442  1131                     l3236:	
 12443  1131  0878               	movf	___awdiv@quotient+1,w
 12444  1132  00F1               	movwf	?___awdiv+1
 12445  1133  0877               	movf	___awdiv@quotient,w
 12446  1134  00F0               	movwf	?___awdiv
 12447  1135  0008               	return
 12448  1136                     __end_of___awdiv:	
 12449                           
 12450                           	psect	text27
 12451  1094                     __ptext27:	
 12452 ;; *************** function _InsertString *****************
 12453 ;; Defined at:
 12454 ;;		line 80 in file "main.c"
 12455 ;; Parameters:    Size  Location     Type
 12456 ;;  dest            2    0[BANK0 ] PTR unsigned char 
 12457 ;;		 -> message_end(73), message_start(70), 
 12458 ;;  src             2    2[BANK0 ] PTR unsigned char 
 12459 ;;		 -> STR_2(3), checksum(6), STR_1(6), main@convertedNumber(16), 
 12460 ;;  index           2    4[BANK0 ] int 
 12461 ;;  destLimit       2    6[BANK0 ] int 
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;  i               2   10[BANK0 ] int 
 12464 ;;  counti          2    8[BANK0 ] int 
 12465 ;; Return value:  Size  Location     Type
 12466 ;;                  2    0[BANK0 ] int 
 12467 ;; Registers used:
 12468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12469 ;; Tracked objects:
 12470 ;;		On entry : 1F/0
 12471 ;;		On exit  : 1F/0
 12472 ;;		Unchanged: 0/0
 12473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12474 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Totals:         1      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;Total ram usage:       13 bytes
 12479 ;; Hardware stack levels used:    1
 12480 ;; Hardware stack levels required when called:    4
 12481 ;; This function calls:
 12482 ;;		_Insert
 12483 ;;		_strlen
 12484 ;; This function is called by:
 12485 ;;		_main
 12486 ;; This function uses a non-reentrant model
 12487 ;;
 12488                           
 12489                           
 12490                           ;psect for function _InsertString
 12491  1094                     _InsertString:	
 12492                           
 12493                           ;main.c: 80: int InsertString(char* dest, char* src, int index, int destLimit);main.c: 8
      +                          1: {;main.c: 82:     for (int i = 0, counti = strlen(src); i < counti && index < destLim
      +                          it; i++)
 12494                           
 12495                           ;incstack = 0
 12496                           ; Regs used in _InsertString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12497  1094  01AA               	clrf	InsertString@i
 12498  1095  01AB               	clrf	InsertString@i+1
 12499  1096  0823               	movf	InsertString@src+1,w
 12500  1097  00F1               	movwf	strlen@s+1
 12501  1098  0822               	movf	InsertString@src,w
 12502  1099  00F0               	movwf	strlen@s
 12503  109A  319A  2256  3190   	fcall	_strlen
 12504  109D  0871               	movf	?_strlen+1,w
 12505  109E  0020               	movlb	0	; select bank0
 12506  109F  00A9               	movwf	InsertString@counti+1
 12507  10A0  0870               	movf	?_strlen,w
 12508  10A1  00A8               	movwf	InsertString@counti
 12509  10A2  28D3               	goto	l4598
 12510  10A3                     l4600:	
 12511  10A3  0020               	movlb	0	; select bank0
 12512  10A4  0825               	movf	InsertString@index+1,w
 12513  10A5  3A80               	xorlw	128
 12514  10A6  00FB               	movwf	??_InsertString
 12515  10A7  0827               	movf	InsertString@destLimit+1,w
 12516  10A8  3A80               	xorlw	128
 12517  10A9  027B               	subwf	??_InsertString,w
 12518  10AA  1D03               	skipz
 12519  10AB  28AE               	goto	u5195
 12520  10AC  0826               	movf	InsertString@destLimit,w
 12521  10AD  0224               	subwf	InsertString@index,w
 12522  10AE                     u5195:	
 12523  10AE  1803               	btfsc	3,0
 12524  10AF  28DF               	goto	l4602
 12525                           
 12526                           ;main.c: 83:     {;main.c: 85:         Insert(dest, src[i], index++, destLimit);
 12527  10B0  0020               	movlb	0	; select bank0
 12528  10B1  0821               	movf	InsertString@dest+1,w
 12529  10B2  00F1               	movwf	Insert@dest+1
 12530  10B3  0820               	movf	InsertString@dest,w
 12531  10B4  00F0               	movwf	Insert@dest
 12532  10B5  0822               	movf	InsertString@src,w
 12533  10B6  072A               	addwf	InsertString@i,w
 12534  10B7  0084               	movwf	4
 12535  10B8  0823               	movf	InsertString@src+1,w
 12536  10B9  3D2B               	addwfc	InsertString@i+1,w
 12537  10BA  0085               	movwf	5
 12538  10BB  0800               	movf	0,w	;code access
 12539  10BC  00FB               	movwf	??_InsertString
 12540  10BD  087B               	movf	??_InsertString,w
 12541  10BE  00F2               	movwf	Insert@src
 12542  10BF  0825               	movf	InsertString@index+1,w
 12543  10C0  00F4               	movwf	Insert@index+1
 12544  10C1  0824               	movf	InsertString@index,w
 12545  10C2  00F3               	movwf	Insert@index
 12546  10C3  0827               	movf	InsertString@destLimit+1,w
 12547  10C4  00F6               	movwf	Insert@destLimit+1
 12548  10C5  0826               	movf	InsertString@destLimit,w
 12549  10C6  00F5               	movwf	Insert@destLimit
 12550  10C7  3195  2501  3190   	fcall	_Insert
 12551  10CA  3001               	movlw	1
 12552  10CB  0020               	movlb	0	; select bank0
 12553  10CC  07A4               	addwf	InsertString@index,f
 12554  10CD  3000               	movlw	0
 12555  10CE  3DA5               	addwfc	InsertString@index+1,f
 12556                           
 12557                           ;main.c: 86:     }
 12558  10CF  3001               	movlw	1
 12559  10D0  07AA               	addwf	InsertString@i,f
 12560  10D1  3000               	movlw	0
 12561  10D2  3DAB               	addwfc	InsertString@i+1,f
 12562  10D3                     l4598:	
 12563  10D3  082B               	movf	InsertString@i+1,w
 12564  10D4  3A80               	xorlw	128
 12565  10D5  00FB               	movwf	??_InsertString
 12566  10D6  0829               	movf	InsertString@counti+1,w
 12567  10D7  3A80               	xorlw	128
 12568  10D8  027B               	subwf	??_InsertString,w
 12569  10D9  1D03               	skipz
 12570  10DA  28DD               	goto	u5185
 12571  10DB  0828               	movf	InsertString@counti,w
 12572  10DC  022A               	subwf	InsertString@i,w
 12573  10DD                     u5185:	
 12574  10DD  1C03               	btfss	3,0
 12575  10DE  28A3               	goto	l4600
 12576  10DF                     l4602:	
 12577                           
 12578                           ;main.c: 87:     return index;
 12579  10DF  0020               	movlb	0	; select bank0
 12580  10E0  0825               	movf	InsertString@index+1,w
 12581  10E1  00A1               	movwf	?_InsertString+1
 12582  10E2  0824               	movf	InsertString@index,w
 12583  10E3  00A0               	movwf	?_InsertString
 12584  10E4  0008               	return
 12585  10E5                     __end_of_InsertString:	
 12586                           
 12587                           	psect	text28
 12588  1501                     __ptext28:	
 12589 ;; *************** function _Insert *****************
 12590 ;; Defined at:
 12591 ;;		line 55 in file "main.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;  dest            2    0[COMMON] PTR unsigned char 
 12594 ;;		 -> message_end(73), message_start(70), 
 12595 ;;  src             1    2[COMMON] unsigned char 
 12596 ;;  index           2    3[COMMON] int 
 12597 ;;  destLimit       2    5[COMMON] int 
 12598 ;; Auto vars:     Size  Location     Type
 12599 ;;  current         1   10[COMMON] unsigned char 
 12600 ;;  temp            1    9[COMMON] unsigned char 
 12601 ;; Return value:  Size  Location     Type
 12602 ;;                  2    0[COMMON] int 
 12603 ;; Registers used:
 12604 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12605 ;; Tracked objects:
 12606 ;;		On entry : 1D/2
 12607 ;;		On exit  : 0/0
 12608 ;;		Unchanged: 0/0
 12609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12610 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;Total ram usage:       11 bytes
 12615 ;; Hardware stack levels used:    1
 12616 ;; Hardware stack levels required when called:    3
 12617 ;; This function calls:
 12618 ;;		Nothing
 12619 ;; This function is called by:
 12620 ;;		_InsertString
 12621 ;;		_main
 12622 ;; This function uses a non-reentrant model
 12623 ;;
 12624                           
 12625                           
 12626                           ;psect for function _Insert
 12627  1501                     _Insert:	
 12628                           
 12629                           ;main.c: 58:     temp = dest[index];
 12630                           
 12631                           ;incstack = 0
 12632                           ; Regs used in _Insert: [wreg+fsr1l+fsr1h+status,2+status,0]
 12633  1501  0873               	movf	Insert@index,w
 12634  1502  0770               	addwf	Insert@dest,w
 12635  1503  0086               	movwf	6
 12636  1504  0874               	movf	Insert@index+1,w
 12637  1505  3D71               	addwfc	Insert@dest+1,w
 12638  1506  0087               	movwf	7
 12639  1507  0801               	movf	1,w
 12640  1508  00F7               	movwf	??_Insert
 12641  1509  0877               	movf	??_Insert,w
 12642  150A  00F9               	movwf	Insert@temp
 12643                           
 12644                           ;main.c: 59:     dest[index] = src;
 12645  150B  0873               	movf	Insert@index,w
 12646  150C  0770               	addwf	Insert@dest,w
 12647  150D  00F7               	movwf	??_Insert
 12648  150E  0874               	movf	Insert@index+1,w
 12649  150F  3D71               	addwfc	Insert@dest+1,w
 12650  1510  00F8               	movwf	??_Insert+1
 12651  1511  0877               	movf	??_Insert,w
 12652  1512  0086               	movwf	6
 12653  1513  0878               	movf	??_Insert+1,w
 12654  1514  0087               	movwf	7
 12655  1515  0872               	movf	Insert@src,w
 12656  1516  0081               	movwf	1
 12657                           
 12658                           ;main.c: 60:     if (dest[index + 1] == '\0')
 12659  1517  0873               	movf	Insert@index,w
 12660  1518  0770               	addwf	Insert@dest,w
 12661  1519  00F7               	movwf	??_Insert
 12662  151A  0874               	movf	Insert@index+1,w
 12663  151B  3D71               	addwfc	Insert@dest+1,w
 12664  151C  00F8               	movwf	??_Insert+1
 12665  151D  0877               	movf	??_Insert,w
 12666  151E  0086               	movwf	6
 12667  151F  0878               	movf	??_Insert+1,w
 12668  1520  0087               	movwf	7
 12669  1521  3141               	addfsr 1,1
 12670  1522  0801               	movf	1,w
 12671  1523  1D03               	btfss	3,2
 12672  1524  2D2C               	goto	l4520
 12673                           
 12674                           ;main.c: 61:     {;main.c: 62:         return index + 1;
 12675  1525  0873               	movf	Insert@index,w
 12676  1526  3E01               	addlw	1
 12677  1527  00F0               	movwf	?_Insert
 12678  1528  3000               	movlw	0
 12679  1529  3D74               	addwfc	Insert@index+1,w
 12680  152A  00F1               	movwf	?_Insert+1
 12681  152B  0008               	return
 12682  152C                     l4520:	
 12683                           
 12684                           ;main.c: 64:     index++;
 12685  152C  3001               	movlw	1
 12686  152D  07F3               	addwf	Insert@index,f
 12687  152E  3000               	movlw	0
 12688  152F  3DF4               	addwfc	Insert@index+1,f
 12689  1530                     l4532:	
 12690                           ;main.c: 65:     while (index < destLimit)
 12691                           
 12692                           
 12693                           ;main.c: 65:     while (index < destLimit)
 12694  1530  0874               	movf	Insert@index+1,w
 12695  1531  3A80               	xorlw	128
 12696  1532  00F7               	movwf	??_Insert
 12697  1533  0876               	movf	Insert@destLimit+1,w
 12698  1534  3A80               	xorlw	128
 12699  1535  0277               	subwf	??_Insert,w
 12700  1536  1D03               	skipz
 12701  1537  2D3A               	goto	u5085
 12702  1538  0875               	movf	Insert@destLimit,w
 12703  1539  0273               	subwf	Insert@index,w
 12704  153A                     u5085:	
 12705  153A  1803               	btfsc	3,0
 12706  153B  2D69               	goto	l4534
 12707                           
 12708                           ;main.c: 66:     {;main.c: 67:         char current = dest[index];
 12709  153C  0873               	movf	Insert@index,w
 12710  153D  0770               	addwf	Insert@dest,w
 12711  153E  0086               	movwf	6
 12712  153F  0874               	movf	Insert@index+1,w
 12713  1540  3D71               	addwfc	Insert@dest+1,w
 12714  1541  0087               	movwf	7
 12715  1542  0801               	movf	1,w
 12716  1543  00F7               	movwf	??_Insert
 12717  1544  0877               	movf	??_Insert,w
 12718  1545  00FA               	movwf	Insert@current
 12719                           
 12720                           ;main.c: 68:         dest[index] = temp;
 12721  1546  0873               	movf	Insert@index,w
 12722  1547  0770               	addwf	Insert@dest,w
 12723  1548  00F7               	movwf	??_Insert
 12724  1549  0874               	movf	Insert@index+1,w
 12725  154A  3D71               	addwfc	Insert@dest+1,w
 12726  154B  00F8               	movwf	??_Insert+1
 12727  154C  0877               	movf	??_Insert,w
 12728  154D  0086               	movwf	6
 12729  154E  0878               	movf	??_Insert+1,w
 12730  154F  0087               	movwf	7
 12731  1550  0879               	movf	Insert@temp,w
 12732  1551  0081               	movwf	1
 12733                           
 12734                           ;main.c: 69:         temp = current;
 12735  1552  087A               	movf	Insert@current,w
 12736  1553  00F7               	movwf	??_Insert
 12737  1554  0877               	movf	??_Insert,w
 12738  1555  00F9               	movwf	Insert@temp
 12739                           
 12740                           ;main.c: 70:         index++;
 12741  1556  3001               	movlw	1
 12742  1557  07F3               	addwf	Insert@index,f
 12743  1558  3000               	movlw	0
 12744  1559  3DF4               	addwfc	Insert@index+1,f
 12745                           
 12746                           ;main.c: 71:         if (current == '\0')
 12747  155A  087A               	movf	Insert@current,w
 12748  155B  1D03               	btfss	3,2
 12749  155C  2D30               	goto	l4532
 12750                           
 12751                           ;main.c: 72:         {;main.c: 73:             dest[index] = current;
 12752  155D  0873               	movf	Insert@index,w
 12753  155E  0770               	addwf	Insert@dest,w
 12754  155F  00F7               	movwf	??_Insert
 12755  1560  0874               	movf	Insert@index+1,w
 12756  1561  3D71               	addwfc	Insert@dest+1,w
 12757  1562  00F8               	movwf	??_Insert+1
 12758  1563  0877               	movf	??_Insert,w
 12759  1564  0086               	movwf	6
 12760  1565  0878               	movf	??_Insert+1,w
 12761  1566  0087               	movwf	7
 12762  1567  087A               	movf	Insert@current,w
 12763  1568  0081               	movwf	1
 12764  1569                     l4534:	
 12765                           ;main.c: 74:             break;
 12766                           
 12767                           
 12768                           ;main.c: 77:     return index;
 12769  1569  0874               	movf	Insert@index+1,w
 12770  156A  00F1               	movwf	?_Insert+1
 12771  156B  0873               	movf	Insert@index,w
 12772  156C  00F0               	movwf	?_Insert
 12773  156D  0008               	return
 12774  156E                     __end_of_Insert:	
 12775                           
 12776                           	psect	text29
 12777  19E8                     __ptext29:	
 12778 ;; *************** function _InitTiming *****************
 12779 ;; Defined at:
 12780 ;;		line 11 in file "timing.c"
 12781 ;; Parameters:    Size  Location     Type
 12782 ;;		None
 12783 ;; Auto vars:     Size  Location     Type
 12784 ;;		None
 12785 ;; Return value:  Size  Location     Type
 12786 ;;                  1    wreg      void 
 12787 ;; Registers used:
 12788 ;;		wreg, status,2, status,0, pclath, cstack
 12789 ;; Tracked objects:
 12790 ;;		On entry : 1F/3
 12791 ;;		On exit  : 1F/2
 12792 ;;		Unchanged: 0/0
 12793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12798 ;;Total ram usage:        0 bytes
 12799 ;; Hardware stack levels used:    1
 12800 ;; Hardware stack levels required when called:    4
 12801 ;; This function calls:
 12802 ;;		_TMR0_SetInterruptHandler
 12803 ;; This function is called by:
 12804 ;;		_main
 12805 ;; This function uses a non-reentrant model
 12806 ;;
 12807                           
 12808                           
 12809                           ;psect for function _InitTiming
 12810  19E8                     _InitTiming:	
 12811                           
 12812                           ;timing.c: 13:     (INTCONbits.GIE = 1);
 12813                           
 12814                           ;incstack = 0
 12815                           ; Regs used in _InitTiming: [wreg+status,2+status,0+pclath+cstack]
 12816  19E8  178B               	bsf	11,7	;volatile
 12817                           
 12818                           ;timing.c: 14:     TMR0_SetInterruptHandler(TimerISR);
 12819  19E9  30F0               	movlw	low _TimerISR
 12820  19EA  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 12821  19EB  3019               	movlw	high _TimerISR
 12822  19EC  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 12823  19ED  3199  21D5         	fcall	_TMR0_SetInterruptHandler
 12824  19EF  0008               	return
 12825  19F0                     __end_of_InitTiming:	
 12826                           
 12827                           	psect	text30
 12828  19D5                     __ptext30:	
 12829 ;; *************** function _TMR0_SetInterruptHandler *****************
 12830 ;; Defined at:
 12831 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
 12834 ;;		 -> TimerISR(1), TMR0_DefaultInterruptHandler(1), 
 12835 ;; Auto vars:     Size  Location     Type
 12836 ;;		None
 12837 ;; Return value:  Size  Location     Type
 12838 ;;                  1    wreg      void 
 12839 ;; Registers used:
 12840 ;;		wreg
 12841 ;; Tracked objects:
 12842 ;;		On entry : 1E/2
 12843 ;;		On exit  : 1F/2
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12846 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;Total ram usage:        2 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:    3
 12853 ;; This function calls:
 12854 ;;		Nothing
 12855 ;; This function is called by:
 12856 ;;		_TMR0_Initialize
 12857 ;;		_InitTiming
 12858 ;; This function uses a non-reentrant model
 12859 ;;
 12860                           
 12861                           
 12862                           ;psect for function _TMR0_SetInterruptHandler
 12863  19D5                     _TMR0_SetInterruptHandler:	
 12864                           
 12865                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
 12866                           
 12867                           ;incstack = 0
 12868                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 12869  19D5  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 12870  19D6  0022               	movlb	2	; select bank2
 12871  19D7  00E3               	movwf	(_TMR0_InterruptHandler+1)^(0+256)
 12872  19D8  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 12873  19D9  00E2               	movwf	_TMR0_InterruptHandler^(0+256)
 12874  19DA  0008               	return
 12875  19DB                     __end_of_TMR0_SetInterruptHandler:	
 12876                           
 12877                           	psect	text31
 12878  0802                     __ptext31:	
 12879 ;; *************** function _ClearString *****************
 12880 ;; Defined at:
 12881 ;;		line 25 in file "main.c"
 12882 ;; Parameters:    Size  Location     Type
 12883 ;;  str             2    5[COMMON] PTR unsigned char 
 12884 ;;		 -> main@convertedNumber(16), message_end(73), message_start(70), 
 12885 ;; Auto vars:     Size  Location     Type
 12886 ;;  i               2   10[COMMON] int 
 12887 ;;  counti          2    8[COMMON] int 
 12888 ;; Return value:  Size  Location     Type
 12889 ;;                  1    wreg      void 
 12890 ;; Registers used:
 12891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12892 ;; Tracked objects:
 12893 ;;		On entry : 1F/2
 12894 ;;		On exit  : 0/0
 12895 ;;		Unchanged: 0/0
 12896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12897 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12898 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12899 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12900 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12901 ;;Total ram usage:        7 bytes
 12902 ;; Hardware stack levels used:    1
 12903 ;; Hardware stack levels required when called:    4
 12904 ;; This function calls:
 12905 ;;		_strlen
 12906 ;; This function is called by:
 12907 ;;		_main
 12908 ;; This function uses a non-reentrant model
 12909 ;;
 12910                           
 12911                           
 12912                           ;psect for function _ClearString
 12913  0802                     _ClearString:	
 12914                           
 12915                           ;main.c: 25: void ClearString(char* str);main.c: 26: {;main.c: 27:     for (int i = 0, c
      +                          ounti = strlen(str); i < counti; i++)
 12916                           
 12917                           ;incstack = 0
 12918                           ; Regs used in _ClearString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12919  0802  01FA               	clrf	ClearString@i
 12920  0803  01FB               	clrf	ClearString@i+1
 12921  0804  0876               	movf	ClearString@str+1,w
 12922  0805  00F1               	movwf	strlen@s+1
 12923  0806  0875               	movf	ClearString@str,w
 12924  0807  00F0               	movwf	strlen@s
 12925  0808  319A  2256  3188   	fcall	_strlen
 12926  080B  0871               	movf	?_strlen+1,w
 12927  080C  00F9               	movwf	ClearString@counti+1
 12928  080D  0870               	movf	?_strlen,w
 12929  080E  00F8               	movwf	ClearString@counti
 12930  080F                     l4586:	
 12931  080F  087B               	movf	ClearString@i+1,w
 12932  0810  3A80               	xorlw	128
 12933  0811  00F7               	movwf	??_ClearString
 12934  0812  0879               	movf	ClearString@counti+1,w
 12935  0813  3A80               	xorlw	128
 12936  0814  0277               	subwf	??_ClearString,w
 12937  0815  1D03               	skipz
 12938  0816  2819               	goto	u5175
 12939  0817  0878               	movf	ClearString@counti,w
 12940  0818  027A               	subwf	ClearString@i,w
 12941  0819                     u5175:	
 12942  0819  1803               	btfsc	3,0
 12943  081A  0008               	return
 12944                           
 12945                           ;main.c: 28:     {;main.c: 29:         str[i] = '\0';
 12946  081B  087A               	movf	ClearString@i,w
 12947  081C  0775               	addwf	ClearString@str,w
 12948  081D  0086               	movwf	6
 12949  081E  087B               	movf	ClearString@i+1,w
 12950  081F  3D76               	addwfc	ClearString@str+1,w
 12951  0820  0087               	movwf	7
 12952  0821  0181               	clrf	1
 12953                           
 12954                           ;main.c: 30:     }
 12955  0822  3001               	movlw	1
 12956  0823  07FA               	addwf	ClearString@i,f
 12957  0824  3000               	movlw	0
 12958  0825  3DFB               	addwfc	ClearString@i+1,f
 12959  0826  280F               	goto	l4586
 12960  0827                     __end_of_ClearString:	
 12961                           
 12962                           	psect	text32
 12963  1A56                     __ptext32:	
 12964 ;; *************** function _strlen *****************
 12965 ;; Defined at:
 12966 ;;		line 12 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strlen.c"
 12967 ;; Parameters:    Size  Location     Type
 12968 ;;  s               2    0[COMMON] PTR const unsigned char 
 12969 ;;		 -> STR_2(3), checksum(6), STR_1(6), main@convertedNumber(16), 
 12970 ;;		 -> message_end(73), message_start(70), 
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;  a               2    3[COMMON] PTR const unsigned char 
 12973 ;;		 -> STR_2(3), checksum(6), STR_1(6), main@convertedNumber(16), 
 12974 ;;		 -> message_end(73), message_start(70), 
 12975 ;; Return value:  Size  Location     Type
 12976 ;;                  2    0[COMMON] unsigned int 
 12977 ;; Registers used:
 12978 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12979 ;; Tracked objects:
 12980 ;;		On entry : 1D/2
 12981 ;;		On exit  : 1D/0
 12982 ;;		Unchanged: 1D/0
 12983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12985 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12987 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12988 ;;Total ram usage:        5 bytes
 12989 ;; Hardware stack levels used:    1
 12990 ;; Hardware stack levels required when called:    3
 12991 ;; This function calls:
 12992 ;;		Nothing
 12993 ;; This function is called by:
 12994 ;;		_ClearString
 12995 ;;		_InsertString
 12996 ;;		_ReverseString
 12997 ;;		_main
 12998 ;;		_crc16
 12999 ;;		_TransmitString
 13000 ;; This function uses a non-reentrant model
 13001 ;;
 13002                           
 13003                           
 13004                           ;psect for function _strlen
 13005  1A56                     _strlen:	
 13006                           
 13007                           ;incstack = 0
 13008                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 13009  1A56  0871               	movf	strlen@s+1,w
 13010  1A57  00F4               	movwf	strlen@a+1
 13011  1A58  0870               	movf	strlen@s,w
 13012  1A59  00F3               	movwf	strlen@a
 13013  1A5A                     l3186:	
 13014  1A5A  0870               	movf	strlen@s,w
 13015  1A5B  0084               	movwf	4
 13016  1A5C  0871               	movf	strlen@s+1,w
 13017  1A5D  0085               	movwf	5
 13018  1A5E  0012               	moviw fsr0++
 13019  1A5F  1903               	btfsc	3,2
 13020  1A60  2A66               	goto	l3188
 13021  1A61  3001               	movlw	1
 13022  1A62  07F0               	addwf	strlen@s,f
 13023  1A63  3000               	movlw	0
 13024  1A64  3DF1               	addwfc	strlen@s+1,f
 13025  1A65  2A5A               	goto	l3186
 13026  1A66                     l3188:	
 13027  1A66  0873               	movf	strlen@a,w
 13028  1A67  0270               	subwf	strlen@s,w
 13029  1A68  00F0               	movwf	?_strlen
 13030  1A69  0874               	movf	strlen@a+1,w
 13031  1A6A  3B71               	subwfb	strlen@s+1,w
 13032  1A6B  00F1               	movwf	?_strlen+1
 13033  1A6C  0008               	return
 13034  1A6D                     __end_of_strlen:	
 13035                           
 13036                           	psect	text33
 13037  135B                     __ptext33:	
 13038 ;; *************** function _BME280_Init *****************
 13039 ;; Defined at:
 13040 ;;		line 76 in file "bme280_i2c.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;		None
 13043 ;; Auto vars:     Size  Location     Type
 13044 ;;  settings_sel    1   22[BANK1 ] unsigned char 
 13045 ;;  rslt            1   23[BANK1 ] char 
 13046 ;; Return value:  Size  Location     Type
 13047 ;;                  1    wreg      void 
 13048 ;; Registers used:
 13049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13050 ;; Tracked objects:
 13051 ;;		On entry : 1F/2
 13052 ;;		On exit  : 0/0
 13053 ;;		Unchanged: 0/0
 13054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;Total ram usage:        4 bytes
 13060 ;; Hardware stack levels used:    1
 13061 ;; Hardware stack levels required when called:   15
 13062 ;; This function calls:
 13063 ;;		_DebugAlert
 13064 ;;		_I2C_Init
 13065 ;;		_bme280_init
 13066 ;;		_bme280_set_sensor_mode
 13067 ;;		_bme280_set_sensor_settings
 13068 ;; This function is called by:
 13069 ;;		_main
 13070 ;; This function uses a non-reentrant model
 13071 ;;
 13072                           
 13073                           
 13074                           ;psect for function _BME280_Init
 13075  135B                     _BME280_Init:	
 13076                           
 13077                           ;bme280_i2c.c: 78:     I2C_Init();
 13078                           
 13079                           ;incstack = 0
 13080                           ; Regs used in _BME280_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13081  135B  319A  222C  3193   	fcall	_I2C_Init
 13082                           
 13083                           ;bme280_i2c.c: 82:     EnvSensor.dev_id = 0x76;
 13084  135E  3076               	movlw	118
 13085  135F  0021               	movlb	1	; select bank1
 13086  1360  00B4               	movwf	??_BME280_Init^(0+128)
 13087  1361  0834               	movf	??_BME280_Init^(0+128),w
 13088  1362  0023               	movlb	3	; select bank3
 13089  1363  00B1               	movwf	(_EnvSensor^(0+384)+1)
 13090                           
 13091                           ;bme280_i2c.c: 83:     EnvSensor.intf = BME280_I2C_INTF;
 13092  1364  01B2               	clrf	(_EnvSensor^(0+384)+2)
 13093  1365  0AB2               	incf	(_EnvSensor^(0+384)+2),f
 13094                           
 13095                           ;bme280_i2c.c: 84:     EnvSensor.read = ReadEnvSensor;
 13096  1366  303E               	movlw	low _ReadEnvSensor
 13097  1367  00B3               	movwf	(low ((_EnvSensor| (0+256)+3)))^(0+128)
 13098  1368  3007               	movlw	high _ReadEnvSensor
 13099  1369  00B4               	movwf	((low ((_EnvSensor| (0+256)+3)))^(0+128)+1)
 13100                           
 13101                           ;bme280_i2c.c: 85:     EnvSensor.write = WriteEnvSensor;
 13102  136A  302B               	movlw	low _WriteEnvSensor
 13103  136B  00B5               	movwf	(low ((_EnvSensor| (0+256)+5)))^(0+128)
 13104  136C  3014               	movlw	high _WriteEnvSensor
 13105  136D  00B6               	movwf	((low ((_EnvSensor| (0+256)+5)))^(0+128)+1)
 13106                           
 13107                           ;bme280_i2c.c: 86:     EnvSensor.delay_ms = Sleep;
 13108  136E  30B6               	movlw	low _Sleep
 13109  136F  00B7               	movwf	(low ((_EnvSensor| (0+256)+7)))^(0+128)
 13110  1370  301B               	movlw	high _Sleep
 13111  1371  00B8               	movwf	((low ((_EnvSensor| (0+256)+7)))^(0+128)+1)
 13112                           
 13113                           ;bme280_i2c.c: 88:     rslt = bme280_init(&EnvSensor);
 13114  1372  30B0               	movlw	(low (_EnvSensor| (0+256)))& (0+255)
 13115  1373  3192  22F3  3193   	fcall	_bme280_init
 13116  1376  0021               	movlb	1	; select bank1
 13117  1377  00B4               	movwf	??_BME280_Init^(0+128)
 13118  1378  0834               	movf	??_BME280_Init^(0+128),w
 13119  1379  00B7               	movwf	BME280_Init@rslt^(0+128)
 13120                           
 13121                           ;bme280_i2c.c: 90:     if (rslt == 0){
 13122  137A  0837               	movf	BME280_Init@rslt^(0+128),w
 13123  137B  1D03               	btfss	3,2
 13124  137C  2BB1               	goto	l4648
 13125                           
 13126                           ;bme280_i2c.c: 91:         uint8_t settings_sel;;bme280_i2c.c: 94:         EnvSensor.set
      +                          tings.osr_h = 0x01;
 13127  137D  0023               	movlb	3	; select bank3
 13128  137E  01E0               	clrf	(_EnvSensor^(0+384)+48)
 13129  137F  0AE0               	incf	(_EnvSensor^(0+384)+48),f
 13130                           
 13131                           ;bme280_i2c.c: 95:         EnvSensor.settings.osr_p = 0x05;
 13132  1380  3005               	movlw	5
 13133  1381  0021               	movlb	1	; select bank1
 13134  1382  00B4               	movwf	??_BME280_Init^(0+128)
 13135  1383  0834               	movf	??_BME280_Init^(0+128),w
 13136  1384  0023               	movlb	3	; select bank3
 13137  1385  00DE               	movwf	(_EnvSensor^(0+384)+46)
 13138                           
 13139                           ;bme280_i2c.c: 96:         EnvSensor.settings.osr_t = 0x02;
 13140  1386  3002               	movlw	2
 13141  1387  0021               	movlb	1	; select bank1
 13142  1388  00B4               	movwf	??_BME280_Init^(0+128)
 13143  1389  0834               	movf	??_BME280_Init^(0+128),w
 13144  138A  0023               	movlb	3	; select bank3
 13145  138B  00DF               	movwf	(_EnvSensor^(0+384)+47)
 13146                           
 13147                           ;bme280_i2c.c: 97:         EnvSensor.settings.filter = (0x04);
 13148  138C  3004               	movlw	4
 13149  138D  0021               	movlb	1	; select bank1
 13150  138E  00B4               	movwf	??_BME280_Init^(0+128)
 13151  138F  0834               	movf	??_BME280_Init^(0+128),w
 13152  1390  0023               	movlb	3	; select bank3
 13153  1391  00E1               	movwf	(_EnvSensor^(0+384)+49)
 13154                           
 13155                           ;bme280_i2c.c: 98:         EnvSensor.settings.standby_time = (0x01);
 13156  1392  01E2               	clrf	(_EnvSensor^(0+384)+50)
 13157  1393  0AE2               	incf	(_EnvSensor^(0+384)+50),f
 13158                           
 13159                           ;bme280_i2c.c: 100:         settings_sel = 1;
 13160  1394  0021               	movlb	1	; select bank1
 13161  1395  01B6               	clrf	BME280_Init@settings_sel^(0+128)
 13162  1396  0AB6               	incf	BME280_Init@settings_sel^(0+128),f
 13163                           
 13164                           ;bme280_i2c.c: 101:         settings_sel |= 1 << 1;
 13165  1397  14B6               	bsf	BME280_Init@settings_sel^(0+128),1
 13166                           
 13167                           ;bme280_i2c.c: 102:         settings_sel |= 1 << 2;
 13168  1398  1536               	bsf	BME280_Init@settings_sel^(0+128),2
 13169                           
 13170                           ;bme280_i2c.c: 103:         settings_sel |= 1 << 4;
 13171  1399  1636               	bsf	BME280_Init@settings_sel^(0+128),4
 13172                           
 13173                           ;bme280_i2c.c: 104:         settings_sel |= 1 << 3;
 13174  139A  15B6               	bsf	BME280_Init@settings_sel^(0+128),3
 13175  139B  30B0               	movlw	(low (_EnvSensor| (0+256)))& (0+255)
 13176  139C  00B4               	movwf	??_BME280_Init^(0+128)
 13177  139D  0834               	movf	??_BME280_Init^(0+128),w
 13178  139E  00AE               	movwf	bme280_set_sensor_settings@dev^(0+128)
 13179  139F  0836               	movf	BME280_Init@settings_sel^(0+128),w
 13180  13A0  3194  2494  3193   	fcall	_bme280_set_sensor_settings
 13181                           
 13182                           ;bme280_i2c.c: 106:         rslt = bme280_set_sensor_mode(0x03, &EnvSensor);
 13183  13A3  30B0               	movlw	(low (_EnvSensor| (0+256)))& (0+255)
 13184  13A4  00B4               	movwf	??_BME280_Init^(0+128)
 13185  13A5  0834               	movf	??_BME280_Init^(0+128),w
 13186  13A6  00AE               	movwf	bme280_set_sensor_mode@dev^(0+128)
 13187  13A7  3003               	movlw	3
 13188  13A8  319C  24F7  3193   	fcall	_bme280_set_sensor_mode
 13189  13AB  00B5               	movwf	(??_BME280_Init+1)^(0+128)
 13190  13AC  0835               	movf	(??_BME280_Init+1)^(0+128),w
 13191  13AD  00B7               	movwf	BME280_Init@rslt^(0+128)
 13192                           
 13193                           ;bme280_i2c.c: 108:         if (rslt == 0)
 13194  13AE  0837               	movf	BME280_Init@rslt^(0+128),w
 13195  13AF  1903               	btfsc	3,2
 13196  13B0  0008               	return
 13197  13B1                     l4648:	
 13198                           
 13199                           ;bme280_i2c.c: 114:     DebugAlert(200, 200, 3);;
 13200  13B1  30C8               	movlw	200
 13201  13B2  0020               	movlb	0	; select bank0
 13202  13B3  00A0               	movwf	DebugAlert@delay_high
 13203  13B4  3000               	movlw	0
 13204  13B5  00A1               	movwf	DebugAlert@delay_high+1
 13205  13B6  30C8               	movlw	200
 13206  13B7  00A2               	movwf	DebugAlert@delay_low
 13207  13B8  3000               	movlw	0
 13208  13B9  00A3               	movwf	DebugAlert@delay_low+1
 13209  13BA  3003               	movlw	3
 13210  13BB  0021               	movlb	1	; select bank1
 13211  13BC  00B4               	movwf	??_BME280_Init^(0+128)
 13212  13BD  0834               	movf	??_BME280_Init^(0+128),w
 13213  13BE  0020               	movlb	0	; select bank0
 13214  13BF  00A4               	movwf	DebugAlert@num_flashes
 13215  13C0  319B  23E1         	fcall	_DebugAlert
 13216  13C2  0008               	return
 13217  13C3                     __end_of_BME280_Init:	
 13218                           
 13219                           	psect	text34
 13220  1494                     __ptext34:	
 13221 ;; *************** function _bme280_set_sensor_settings *****************
 13222 ;; Defined at:
 13223 ;;		line 511 in file "BME280_driver/bme280.c"
 13224 ;; Parameters:    Size  Location     Type
 13225 ;;  desired_sett    1    wreg     unsigned char 
 13226 ;;  dev             1   14[BANK1 ] PTR const struct bme280_
 13227 ;;		 -> EnvSensor(51), 
 13228 ;; Auto vars:     Size  Location     Type
 13229 ;;  desired_sett    1   17[BANK1 ] unsigned char 
 13230 ;;  rslt            1   19[BANK1 ] char 
 13231 ;;  sensor_mode     1   18[BANK1 ] unsigned char 
 13232 ;; Return value:  Size  Location     Type
 13233 ;;                  1    wreg      char 
 13234 ;; Registers used:
 13235 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13236 ;; Tracked objects:
 13237 ;;		On entry : 1F/1
 13238 ;;		On exit  : 1F/1
 13239 ;;		Unchanged: 0/0
 13240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13241 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;Total ram usage:        6 bytes
 13246 ;; Hardware stack levels used:    1
 13247 ;; Hardware stack levels required when called:   14
 13248 ;; This function calls:
 13249 ;;		_are_settings_changed
 13250 ;;		_bme280_get_sensor_mode
 13251 ;;		_null_ptr_check
 13252 ;;		_put_device_to_sleep
 13253 ;;		_set_filter_standby_settings
 13254 ;;		_set_osr_settings
 13255 ;; This function is called by:
 13256 ;;		_BME280_Init
 13257 ;; This function uses a non-reentrant model
 13258 ;;
 13259                           
 13260                           
 13261                           ;psect for function _bme280_set_sensor_settings
 13262  1494                     _bme280_set_sensor_settings:	
 13263                           
 13264                           ;incstack = 0
 13265                           ; Regs used in _bme280_set_sensor_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13266                           ;bme280_set_sensor_settings@desired_settings stored from wreg
 13267  1494  00B1               	movwf	bme280_set_sensor_settings@desired_settings^(0+128)
 13268                           
 13269                           ;BME280_driver/bme280.c: 511: int8_t bme280_set_sensor_settings(uint8_t desired_settings
      +                          , const struct bme280_dev *dev);BME280_driver/bme280.c: 512: {;BME280_driver/bme280.c: 5
      +                          13:     int8_t rslt;;BME280_driver/bme280.c: 514:     uint8_t sensor_mode;;BME280_driver
      +                          /bme280.c: 517:     rslt = null_ptr_check(dev);
 13270  1495  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13271  1496  319B  2317  3194   	fcall	_null_ptr_check
 13272  1499  0021               	movlb	1	; select bank1
 13273  149A  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13274  149B  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13275  149C  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13276                           
 13277                           ;BME280_driver/bme280.c: 520:     if (rslt == 0)
 13278  149D  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13279  149E  1D03               	btfss	3,2
 13280  149F  2CFF               	goto	l4454
 13281                           
 13282                           ;BME280_driver/bme280.c: 521:     {;BME280_driver/bme280.c: 522:         rslt = bme280_g
      +                          et_sensor_mode(&sensor_mode, dev);
 13283  14A0  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13284  14A1  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13285  14A2  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13286  14A3  0020               	movlb	0	; select bank0
 13287  14A4  00C4               	movwf	bme280_get_sensor_mode@dev
 13288  14A5  30B2               	movlw	(low (bme280_set_sensor_settings@sensor_mode| 0))& (0+255)
 13289  14A6  319C  240C  3194   	fcall	_bme280_get_sensor_mode
 13290  14A9  0021               	movlb	1	; select bank1
 13291  14AA  00B0               	movwf	(??_bme280_set_sensor_settings+1)^(0+128)
 13292  14AB  0830               	movf	(??_bme280_set_sensor_settings+1)^(0+128),w
 13293  14AC  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13294                           
 13295                           ;BME280_driver/bme280.c: 523:         if ((rslt == 0) && (sensor_mode != 0x00))
 13296  14AD  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13297  14AE  1D03               	btfss	3,2
 13298  14AF  2CBA               	goto	l4442
 13299  14B0  0832               	movf	bme280_set_sensor_settings@sensor_mode^(0+128),w
 13300  14B1  1903               	btfsc	3,2
 13301  14B2  2CBA               	goto	l4442
 13302                           
 13303                           ;BME280_driver/bme280.c: 524:         {;BME280_driver/bme280.c: 525:             rslt = 
      +                          put_device_to_sleep(dev);
 13304  14B3  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13305  14B4  319D  256A  3194   	fcall	_put_device_to_sleep
 13306  14B7  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13307  14B8  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13308  14B9  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13309  14BA                     l4442:	
 13310                           
 13311                           ;BME280_driver/bme280.c: 527:         if (rslt == 0)
 13312  14BA  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13313  14BB  1D03               	btfss	3,2
 13314  14BC  2CFF               	goto	l4454
 13315                           
 13316                           ;BME280_driver/bme280.c: 528:         {;BME280_driver/bme280.c: 532:             if (are
      +                          _settings_changed(0x07, desired_settings))
 13317  14BD  0831               	movf	bme280_set_sensor_settings@desired_settings^(0+128),w
 13318  14BE  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13319  14BF  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13320  14C0  00F0               	movwf	are_settings_changed@desired_settings
 13321  14C1  3007               	movlw	7
 13322  14C2  3199  21FA  3194   	fcall	_are_settings_changed
 13323  14C5  3A00               	xorlw	0
 13324  14C6  1903               	skipnz
 13325  14C7  2CDD               	goto	l4448
 13326                           
 13327                           ;BME280_driver/bme280.c: 533:             {;BME280_driver/bme280.c: 534:                
      +                           rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 13328  14C8  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13329  14C9  3E2E               	addlw	46
 13330  14CA  0020               	movlb	0	; select bank0
 13331  14CB  00E4               	movwf	set_osr_settings@settings
 13332  14CC  3001               	movlw	1
 13333  14CD  00E5               	movwf	set_osr_settings@settings+1
 13334  14CE  0021               	movlb	1	; select bank1
 13335  14CF  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13336  14D0  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13337  14D1  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13338  14D2  0020               	movlb	0	; select bank0
 13339  14D3  00E6               	movwf	set_osr_settings@dev
 13340  14D4  0021               	movlb	1	; select bank1
 13341  14D5  0831               	movf	bme280_set_sensor_settings@desired_settings^(0+128),w
 13342  14D6  319B  233C  3194   	fcall	_set_osr_settings
 13343  14D9  0021               	movlb	1	; select bank1
 13344  14DA  00B0               	movwf	(??_bme280_set_sensor_settings+1)^(0+128)
 13345  14DB  0830               	movf	(??_bme280_set_sensor_settings+1)^(0+128),w
 13346  14DC  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13347  14DD                     l4448:	
 13348                           
 13349                           ;BME280_driver/bme280.c: 540:             if ((rslt == 0) && are_settings_changed(0x18, 
      +                          desired_settings))
 13350  14DD  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13351  14DE  1D03               	btfss	3,2
 13352  14DF  2CFF               	goto	l4454
 13353  14E0  0831               	movf	bme280_set_sensor_settings@desired_settings^(0+128),w
 13354  14E1  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13355  14E2  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13356  14E3  00F0               	movwf	are_settings_changed@desired_settings
 13357  14E4  3018               	movlw	24
 13358  14E5  3199  21FA  3194   	fcall	_are_settings_changed
 13359  14E8  3A00               	xorlw	0
 13360  14E9  1903               	skipnz
 13361  14EA  2CFF               	goto	l4454
 13362                           
 13363                           ;BME280_driver/bme280.c: 541:             {;BME280_driver/bme280.c: 542:                
      +                           rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 13364  14EB  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13365  14EC  3E2E               	addlw	46
 13366  14ED  0020               	movlb	0	; select bank0
 13367  14EE  00DA               	movwf	set_filter_standby_settings@settings
 13368  14EF  3001               	movlw	1
 13369  14F0  00DB               	movwf	set_filter_standby_settings@settings+1
 13370  14F1  0021               	movlb	1	; select bank1
 13371  14F2  082E               	movf	bme280_set_sensor_settings@dev^(0+128),w
 13372  14F3  00AF               	movwf	??_bme280_set_sensor_settings^(0+128)
 13373  14F4  082F               	movf	??_bme280_set_sensor_settings^(0+128),w
 13374  14F5  0020               	movlb	0	; select bank0
 13375  14F6  00DC               	movwf	set_filter_standby_settings@dev
 13376  14F7  0021               	movlb	1	; select bank1
 13377  14F8  0831               	movf	bme280_set_sensor_settings@desired_settings^(0+128),w
 13378  14F9  319E  26A4         	fcall	_set_filter_standby_settings
 13379  14FB  0021               	movlb	1	; select bank1
 13380  14FC  00B0               	movwf	(??_bme280_set_sensor_settings+1)^(0+128)
 13381  14FD  0830               	movf	(??_bme280_set_sensor_settings+1)^(0+128),w
 13382  14FE  00B3               	movwf	bme280_set_sensor_settings@rslt^(0+128)
 13383  14FF                     l4454:	
 13384                           
 13385                           ;BME280_driver/bme280.c: 547:     return rslt;
 13386  14FF  0833               	movf	bme280_set_sensor_settings@rslt^(0+128),w
 13387  1500  0008               	return
 13388  1501                     __end_of_bme280_set_sensor_settings:	
 13389                           
 13390                           	psect	text35
 13391  19FA                     __ptext35:	
 13392 ;; *************** function _are_settings_changed *****************
 13393 ;; Defined at:
 13394 ;;		line 1404 in file "BME280_driver/bme280.c"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;  sub_settings    1    wreg     unsigned char 
 13397 ;;  desired_sett    1    0[COMMON] unsigned char 
 13398 ;; Auto vars:     Size  Location     Type
 13399 ;;  sub_settings    1    1[COMMON] unsigned char 
 13400 ;;  settings_cha    1    2[COMMON] unsigned char 
 13401 ;; Return value:  Size  Location     Type
 13402 ;;                  1    wreg      unsigned char 
 13403 ;; Registers used:
 13404 ;;		wreg, status,2, status,0
 13405 ;; Tracked objects:
 13406 ;;		On entry : 1F/1
 13407 ;;		On exit  : 1F/1
 13408 ;;		Unchanged: 1F/0
 13409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13410 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;Total ram usage:        3 bytes
 13415 ;; Hardware stack levels used:    1
 13416 ;; Hardware stack levels required when called:    3
 13417 ;; This function calls:
 13418 ;;		Nothing
 13419 ;; This function is called by:
 13420 ;;		_bme280_set_sensor_settings
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           
 13425                           ;psect for function _are_settings_changed
 13426  19FA                     _are_settings_changed:	
 13427                           
 13428                           ;incstack = 0
 13429                           ; Regs used in _are_settings_changed: [wreg+status,2+status,0]
 13430                           ;are_settings_changed@sub_settings stored from wreg
 13431  19FA  00F1               	movwf	are_settings_changed@sub_settings
 13432                           
 13433                           ;BME280_driver/bme280.c: 1408:     if (sub_settings & desired_settings)
 13434  19FB  0871               	movf	are_settings_changed@sub_settings,w
 13435  19FC  0570               	andwf	are_settings_changed@desired_settings,w
 13436  19FD  1903               	btfsc	3,2
 13437  19FE  2A02               	goto	l4246
 13438                           
 13439                           ;BME280_driver/bme280.c: 1409:     {;BME280_driver/bme280.c: 1411:         settings_chan
      +                          ged = 1;
 13440  19FF  01F2               	clrf	are_settings_changed@settings_changed
 13441  1A00  0AF2               	incf	are_settings_changed@settings_changed,f
 13442                           
 13443                           ;BME280_driver/bme280.c: 1412:     }
 13444  1A01  2A03               	goto	l4248
 13445  1A02                     l4246:	
 13446                           
 13447                           ;BME280_driver/bme280.c: 1414:     {;BME280_driver/bme280.c: 1416:         settings_chan
      +                          ged = 0;
 13448  1A02  01F2               	clrf	are_settings_changed@settings_changed
 13449  1A03                     l4248:	
 13450                           
 13451                           ;BME280_driver/bme280.c: 1419:     return settings_changed;
 13452  1A03  0872               	movf	are_settings_changed@settings_changed,w
 13453  1A04  0008               	return
 13454  1A05                     __end_of_are_settings_changed:	
 13455                           
 13456                           	psect	text36
 13457  1CF7                     __ptext36:	
 13458 ;; *************** function _bme280_set_sensor_mode *****************
 13459 ;; Defined at:
 13460 ;;		line 578 in file "BME280_driver/bme280.c"
 13461 ;; Parameters:    Size  Location     Type
 13462 ;;  sensor_mode     1    wreg     unsigned char 
 13463 ;;  dev             1   14[BANK1 ] PTR const struct bme280_
 13464 ;;		 -> EnvSensor(51), 
 13465 ;; Auto vars:     Size  Location     Type
 13466 ;;  sensor_mode     1   17[BANK1 ] unsigned char 
 13467 ;;  rslt            1   19[BANK1 ] char 
 13468 ;;  last_set_mod    1   18[BANK1 ] unsigned char 
 13469 ;; Return value:  Size  Location     Type
 13470 ;;                  1    wreg      char 
 13471 ;; Registers used:
 13472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13473 ;; Tracked objects:
 13474 ;;		On entry : 1F/1
 13475 ;;		On exit  : 1F/1
 13476 ;;		Unchanged: 0/0
 13477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13478 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13479 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 13480 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;Total ram usage:        6 bytes
 13483 ;; Hardware stack levels used:    1
 13484 ;; Hardware stack levels required when called:   14
 13485 ;; This function calls:
 13486 ;;		_bme280_get_sensor_mode
 13487 ;;		_null_ptr_check
 13488 ;;		_put_device_to_sleep
 13489 ;;		_write_power_mode
 13490 ;; This function is called by:
 13491 ;;		_BME280_Init
 13492 ;; This function uses a non-reentrant model
 13493 ;;
 13494                           
 13495                           
 13496                           ;psect for function _bme280_set_sensor_mode
 13497  1CF7                     _bme280_set_sensor_mode:	
 13498                           
 13499                           ;incstack = 0
 13500                           ; Regs used in _bme280_set_sensor_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13501                           ;bme280_set_sensor_mode@sensor_mode stored from wreg
 13502  1CF7  00B1               	movwf	bme280_set_sensor_mode@sensor_mode^(0+128)
 13503                           
 13504                           ;BME280_driver/bme280.c: 578: int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const s
      +                          truct bme280_dev *dev);BME280_driver/bme280.c: 579: {;BME280_driver/bme280.c: 580:     i
      +                          nt8_t rslt;;BME280_driver/bme280.c: 581:     uint8_t last_set_mode;;BME280_driver/bme280
      +                          .c: 584:     rslt = null_ptr_check(dev);
 13505  1CF8  082E               	movf	bme280_set_sensor_mode@dev^(0+128),w
 13506  1CF9  319B  2317  319C   	fcall	_null_ptr_check
 13507  1CFC  0021               	movlb	1	; select bank1
 13508  1CFD  00AF               	movwf	??_bme280_set_sensor_mode^(0+128)
 13509  1CFE  082F               	movf	??_bme280_set_sensor_mode^(0+128),w
 13510  1CFF  00B3               	movwf	bme280_set_sensor_mode@rslt^(0+128)
 13511                           
 13512                           ;BME280_driver/bme280.c: 585:     if (rslt == 0)
 13513  1D00  0833               	movf	bme280_set_sensor_mode@rslt^(0+128),w
 13514  1D01  1D03               	btfss	3,2
 13515  1D02  2D2D               	goto	l4474
 13516                           
 13517                           ;BME280_driver/bme280.c: 586:     {;BME280_driver/bme280.c: 587:         rslt = bme280_g
      +                          et_sensor_mode(&last_set_mode, dev);
 13518  1D03  082E               	movf	bme280_set_sensor_mode@dev^(0+128),w
 13519  1D04  00AF               	movwf	??_bme280_set_sensor_mode^(0+128)
 13520  1D05  082F               	movf	??_bme280_set_sensor_mode^(0+128),w
 13521  1D06  0020               	movlb	0	; select bank0
 13522  1D07  00C4               	movwf	bme280_get_sensor_mode@dev
 13523  1D08  30B2               	movlw	(low (bme280_set_sensor_mode@last_set_mode| 0))& (0+255)
 13524  1D09  319C  240C  319C   	fcall	_bme280_get_sensor_mode
 13525  1D0C  0021               	movlb	1	; select bank1
 13526  1D0D  00B0               	movwf	(??_bme280_set_sensor_mode+1)^(0+128)
 13527  1D0E  0830               	movf	(??_bme280_set_sensor_mode+1)^(0+128),w
 13528  1D0F  00B3               	movwf	bme280_set_sensor_mode@rslt^(0+128)
 13529                           
 13530                           ;BME280_driver/bme280.c: 592:         if ((rslt == 0) && (last_set_mode != 0x00))
 13531  1D10  0833               	movf	bme280_set_sensor_mode@rslt^(0+128),w
 13532  1D11  1D03               	btfss	3,2
 13533  1D12  2D1D               	goto	l4470
 13534  1D13  0832               	movf	bme280_set_sensor_mode@last_set_mode^(0+128),w
 13535  1D14  1903               	btfsc	3,2
 13536  1D15  2D1D               	goto	l4470
 13537                           
 13538                           ;BME280_driver/bme280.c: 593:         {;BME280_driver/bme280.c: 594:             rslt = 
      +                          put_device_to_sleep(dev);
 13539  1D16  082E               	movf	bme280_set_sensor_mode@dev^(0+128),w
 13540  1D17  319D  256A  319C   	fcall	_put_device_to_sleep
 13541  1D1A  00AF               	movwf	??_bme280_set_sensor_mode^(0+128)
 13542  1D1B  082F               	movf	??_bme280_set_sensor_mode^(0+128),w
 13543  1D1C  00B3               	movwf	bme280_set_sensor_mode@rslt^(0+128)
 13544  1D1D                     l4470:	
 13545                           
 13546                           ;BME280_driver/bme280.c: 598:         if (rslt == 0)
 13547  1D1D  0833               	movf	bme280_set_sensor_mode@rslt^(0+128),w
 13548  1D1E  1D03               	btfss	3,2
 13549  1D1F  2D2D               	goto	l4474
 13550                           
 13551                           ;BME280_driver/bme280.c: 599:         {;BME280_driver/bme280.c: 600:             rslt = 
      +                          write_power_mode(sensor_mode, dev);
 13552  1D20  082E               	movf	bme280_set_sensor_mode@dev^(0+128),w
 13553  1D21  00AF               	movwf	??_bme280_set_sensor_mode^(0+128)
 13554  1D22  082F               	movf	??_bme280_set_sensor_mode^(0+128),w
 13555  1D23  0020               	movlb	0	; select bank0
 13556  1D24  00DA               	movwf	write_power_mode@dev
 13557  1D25  0021               	movlb	1	; select bank1
 13558  1D26  0831               	movf	bme280_set_sensor_mode@sensor_mode^(0+128),w
 13559  1D27  319C  24C0         	fcall	_write_power_mode
 13560  1D29  0021               	movlb	1	; select bank1
 13561  1D2A  00B0               	movwf	(??_bme280_set_sensor_mode+1)^(0+128)
 13562  1D2B  0830               	movf	(??_bme280_set_sensor_mode+1)^(0+128),w
 13563  1D2C  00B3               	movwf	bme280_set_sensor_mode@rslt^(0+128)
 13564  1D2D                     l4474:	
 13565                           
 13566                           ;BME280_driver/bme280.c: 604:     return rslt;
 13567  1D2D  0833               	movf	bme280_set_sensor_mode@rslt^(0+128),w
 13568  1D2E  0008               	return
 13569  1D2F                     __end_of_bme280_set_sensor_mode:	
 13570                           
 13571                           	psect	text37
 13572  1CC0                     __ptext37:	
 13573 ;; *************** function _write_power_mode *****************
 13574 ;; Defined at:
 13575 ;;		line 941 in file "BME280_driver/bme280.c"
 13576 ;; Parameters:    Size  Location     Type
 13577 ;;  sensor_mode     1    wreg     unsigned char 
 13578 ;;  dev             1   58[BANK0 ] PTR const struct bme280_
 13579 ;;		 -> EnvSensor(51), 
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;  sensor_mode     1   62[BANK0 ] unsigned char 
 13582 ;;  sensor_mode_    1   65[BANK0 ] unsigned char 
 13583 ;;  reg_addr        1   64[BANK0 ] unsigned char 
 13584 ;;  rslt            1   63[BANK0 ] char 
 13585 ;; Return value:  Size  Location     Type
 13586 ;;                  1    wreg      char 
 13587 ;; Registers used:
 13588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13589 ;; Tracked objects:
 13590 ;;		On entry : 1F/1
 13591 ;;		On exit  : 1F/0
 13592 ;;		Unchanged: 0/0
 13593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13594 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;Total ram usage:        8 bytes
 13599 ;; Hardware stack levels used:    1
 13600 ;; Hardware stack levels required when called:   10
 13601 ;; This function calls:
 13602 ;;		_bme280_get_regs
 13603 ;;		_bme280_set_regs
 13604 ;; This function is called by:
 13605 ;;		_bme280_set_sensor_mode
 13606 ;; This function uses a non-reentrant model
 13607 ;;
 13608                           
 13609                           
 13610                           ;psect for function _write_power_mode
 13611  1CC0                     _write_power_mode:	
 13612                           
 13613                           ;incstack = 0
 13614                           ; Regs used in _write_power_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13615                           ;write_power_mode@sensor_mode stored from wreg
 13616  1CC0  0020               	movlb	0	; select bank0
 13617  1CC1  00DE               	movwf	write_power_mode@sensor_mode
 13618                           
 13619                           ;BME280_driver/bme280.c: 941: static int8_t write_power_mode(uint8_t sensor_mode, const 
      +                          struct bme280_dev *dev);BME280_driver/bme280.c: 942: {;BME280_driver/bme280.c: 943:     
      +                          int8_t rslt;;BME280_driver/bme280.c: 944:     uint8_t reg_addr = 0xF4;
 13620  1CC2  30F4               	movlw	244
 13621  1CC3  00DB               	movwf	??_write_power_mode
 13622  1CC4  085B               	movf	??_write_power_mode,w
 13623  1CC5  00E0               	movwf	write_power_mode@reg_addr
 13624                           
 13625                           ;BME280_driver/bme280.c: 947:     uint8_t sensor_mode_reg_val;;BME280_driver/bme280.c: 9
      +                          50:     rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 13626  1CC6  3061               	movlw	(low (write_power_mode@sensor_mode_reg_val| 0))& (0+255)
 13627  1CC7  00DB               	movwf	??_write_power_mode
 13628  1CC8  085B               	movf	??_write_power_mode,w
 13629  1CC9  00BB               	movwf	bme280_get_regs@reg_data
 13630  1CCA  3001               	movlw	1
 13631  1CCB  00BC               	movwf	bme280_get_regs@len
 13632  1CCC  3000               	movlw	0
 13633  1CCD  00BD               	movwf	bme280_get_regs@len+1
 13634  1CCE  085A               	movf	write_power_mode@dev,w
 13635  1CCF  00DC               	movwf	??_write_power_mode+1
 13636  1CD0  085C               	movf	??_write_power_mode+1,w
 13637  1CD1  00BE               	movwf	bme280_get_regs@dev
 13638  1CD2  0860               	movf	write_power_mode@reg_addr,w
 13639  1CD3  319E  2662  319C   	fcall	_bme280_get_regs
 13640  1CD6  00DD               	movwf	??_write_power_mode+2
 13641  1CD7  085D               	movf	??_write_power_mode+2,w
 13642  1CD8  00DF               	movwf	write_power_mode@rslt
 13643                           
 13644                           ;BME280_driver/bme280.c: 953:     if (rslt == 0)
 13645  1CD9  085F               	movf	write_power_mode@rslt,w
 13646  1CDA  1D03               	btfss	3,2
 13647  1CDB  2CF5               	goto	l4262
 13648                           
 13649                           ;BME280_driver/bme280.c: 954:     {;BME280_driver/bme280.c: 955:         sensor_mode_reg
      +                          _val = ((sensor_mode_reg_val & ~( 0x03)) | (sensor_mode & 0x03));
 13650  1CDC  3003               	movlw	3
 13651  1CDD  055E               	andwf	write_power_mode@sensor_mode,w
 13652  1CDE  00DB               	movwf	??_write_power_mode
 13653  1CDF  0861               	movf	write_power_mode@sensor_mode_reg_val,w
 13654  1CE0  39FC               	andlw	252
 13655  1CE1  045B               	iorwf	??_write_power_mode,w
 13656  1CE2  00DC               	movwf	??_write_power_mode+1
 13657  1CE3  085C               	movf	??_write_power_mode+1,w
 13658  1CE4  00E1               	movwf	write_power_mode@sensor_mode_reg_val
 13659                           
 13660                           ;BME280_driver/bme280.c: 958:         rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg
      +                          _val, 1, dev);
 13661  1CE5  3061               	movlw	(low (write_power_mode@sensor_mode_reg_val| 0))& (0+255)
 13662  1CE6  00DB               	movwf	??_write_power_mode
 13663  1CE7  085B               	movf	??_write_power_mode,w
 13664  1CE8  00BB               	movwf	bme280_set_regs@reg_data
 13665  1CE9  01BC               	clrf	bme280_set_regs@len
 13666  1CEA  0ABC               	incf	bme280_set_regs@len,f
 13667  1CEB  085A               	movf	write_power_mode@dev,w
 13668  1CEC  00DC               	movwf	??_write_power_mode+1
 13669  1CED  085C               	movf	??_write_power_mode+1,w
 13670  1CEE  00BD               	movwf	bme280_set_regs@dev
 13671  1CEF  3060               	movlw	(low (write_power_mode@reg_addr| 0))& (0+255)
 13672  1CF0  3188  2027         	fcall	_bme280_set_regs
 13673  1CF2  00DD               	movwf	??_write_power_mode+2
 13674  1CF3  085D               	movf	??_write_power_mode+2,w
 13675  1CF4  00DF               	movwf	write_power_mode@rslt
 13676  1CF5                     l4262:	
 13677                           
 13678                           ;BME280_driver/bme280.c: 961:     return rslt;
 13679  1CF5  085F               	movf	write_power_mode@rslt,w
 13680  1CF6  0008               	return
 13681  1CF7                     __end_of_write_power_mode:	
 13682                           
 13683                           	psect	text38
 13684  1D6A                     __ptext38:	
 13685 ;; *************** function _put_device_to_sleep *****************
 13686 ;; Defined at:
 13687 ;;		line 967 in file "BME280_driver/bme280.c"
 13688 ;; Parameters:    Size  Location     Type
 13689 ;;  dev             1    wreg     PTR const struct bme280_
 13690 ;;		 -> EnvSensor(51), 
 13691 ;; Auto vars:     Size  Location     Type
 13692 ;;  dev             1    8[BANK1 ] PTR const struct bme280_
 13693 ;;		 -> EnvSensor(51), 
 13694 ;;  settings        5    9[BANK1 ] struct bme280_settings
 13695 ;;  reg_data        4    3[BANK1 ] unsigned char [4]
 13696 ;;  rslt            1    7[BANK1 ] char 
 13697 ;; Return value:  Size  Location     Type
 13698 ;;                  1    wreg      char 
 13699 ;; Registers used:
 13700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13701 ;; Tracked objects:
 13702 ;;		On entry : 1F/1
 13703 ;;		On exit  : 1F/1
 13704 ;;		Unchanged: 0/0
 13705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13707 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
 13708 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 13709 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
 13710 ;;Total ram usage:       14 bytes
 13711 ;; Hardware stack levels used:    1
 13712 ;; Hardware stack levels required when called:   13
 13713 ;; This function calls:
 13714 ;;		_bme280_get_regs
 13715 ;;		_bme280_soft_reset
 13716 ;;		_parse_device_settings
 13717 ;;		_reload_device_settings
 13718 ;; This function is called by:
 13719 ;;		_bme280_set_sensor_settings
 13720 ;;		_bme280_set_sensor_mode
 13721 ;; This function uses a non-reentrant model
 13722 ;;
 13723                           
 13724                           
 13725                           ;psect for function _put_device_to_sleep
 13726  1D6A                     _put_device_to_sleep:	
 13727                           
 13728                           ;incstack = 0
 13729                           ; Regs used in _put_device_to_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13730                           ;put_device_to_sleep@dev stored from wreg
 13731  1D6A  00A8               	movwf	put_device_to_sleep@dev^(0+128)
 13732                           
 13733                           ;BME280_driver/bme280.c: 967: static int8_t put_device_to_sleep(const struct bme280_dev 
      +                          *dev);BME280_driver/bme280.c: 968: {;BME280_driver/bme280.c: 969:     int8_t rslt;;BME28
      +                          0_driver/bme280.c: 970:     uint8_t reg_data[4];;BME280_driver/bme280.c: 971:     struct
      +                           bme280_settings settings;;BME280_driver/bme280.c: 973:     rslt = bme280_get_regs(0xF2,
      +                           reg_data, 4, dev);
 13734  1D6B  30A3               	movlw	(low (put_device_to_sleep@reg_data| 0))& (0+255)
 13735  1D6C  00A0               	movwf	??_put_device_to_sleep^(0+128)
 13736  1D6D  0820               	movf	??_put_device_to_sleep^(0+128),w
 13737  1D6E  0020               	movlb	0	; select bank0
 13738  1D6F  00BB               	movwf	bme280_get_regs@reg_data
 13739  1D70  3004               	movlw	4
 13740  1D71  00BC               	movwf	bme280_get_regs@len
 13741  1D72  3000               	movlw	0
 13742  1D73  00BD               	movwf	bme280_get_regs@len+1
 13743  1D74  0021               	movlb	1	; select bank1
 13744  1D75  0828               	movf	put_device_to_sleep@dev^(0+128),w
 13745  1D76  00A1               	movwf	(??_put_device_to_sleep+1)^(0+128)
 13746  1D77  0821               	movf	(??_put_device_to_sleep+1)^(0+128),w
 13747  1D78  0020               	movlb	0	; select bank0
 13748  1D79  00BE               	movwf	bme280_get_regs@dev
 13749  1D7A  30F2               	movlw	242
 13750  1D7B  319E  2662  319D   	fcall	_bme280_get_regs
 13751  1D7E  0021               	movlb	1	; select bank1
 13752  1D7F  00A2               	movwf	(??_put_device_to_sleep+2)^(0+128)
 13753  1D80  0822               	movf	(??_put_device_to_sleep+2)^(0+128),w
 13754  1D81  00A7               	movwf	put_device_to_sleep@rslt^(0+128)
 13755                           
 13756                           ;BME280_driver/bme280.c: 974:     if (rslt == 0)
 13757  1D82  0827               	movf	put_device_to_sleep@rslt^(0+128),w
 13758  1D83  1D03               	btfss	3,2
 13759  1D84  2DA4               	goto	l4236
 13760                           
 13761                           ;BME280_driver/bme280.c: 975:     {;BME280_driver/bme280.c: 976:         parse_device_se
      +                          ttings(reg_data, &settings);
 13762  1D85  30A9               	movlw	(low (put_device_to_sleep@settings| 0))& (0+255)
 13763  1D86  00A0               	movwf	??_put_device_to_sleep^(0+128)
 13764  1D87  0820               	movf	??_put_device_to_sleep^(0+128),w
 13765  1D88  00F0               	movwf	parse_device_settings@settings
 13766  1D89  30A3               	movlw	(low (put_device_to_sleep@reg_data| 0))& (0+255)
 13767  1D8A  3191  21DB  319D   	fcall	_parse_device_settings
 13768                           
 13769                           ;BME280_driver/bme280.c: 977:         rslt = bme280_soft_reset(dev);
 13770  1D8D  0828               	movf	put_device_to_sleep@dev^(0+128),w
 13771  1D8E  319D  252F  319D   	fcall	_bme280_soft_reset
 13772  1D91  0021               	movlb	1	; select bank1
 13773  1D92  00A0               	movwf	??_put_device_to_sleep^(0+128)
 13774  1D93  0820               	movf	??_put_device_to_sleep^(0+128),w
 13775  1D94  00A7               	movwf	put_device_to_sleep@rslt^(0+128)
 13776                           
 13777                           ;BME280_driver/bme280.c: 978:         if (rslt == 0)
 13778  1D95  0827               	movf	put_device_to_sleep@rslt^(0+128),w
 13779  1D96  1D03               	btfss	3,2
 13780  1D97  2DA4               	goto	l4236
 13781                           
 13782                           ;BME280_driver/bme280.c: 979:         {;BME280_driver/bme280.c: 980:             rslt = 
      +                          reload_device_settings(&settings, dev);
 13783  1D98  0828               	movf	put_device_to_sleep@dev^(0+128),w
 13784  1D99  00A0               	movwf	??_put_device_to_sleep^(0+128)
 13785  1D9A  0820               	movf	??_put_device_to_sleep^(0+128),w
 13786  1D9B  0020               	movlb	0	; select bank0
 13787  1D9C  00EB               	movwf	reload_device_settings@dev
 13788  1D9D  30A9               	movlw	(low (put_device_to_sleep@settings| 0))& (0+255)
 13789  1D9E  319A  22F4         	fcall	_reload_device_settings
 13790  1DA0  0021               	movlb	1	; select bank1
 13791  1DA1  00A1               	movwf	(??_put_device_to_sleep+1)^(0+128)
 13792  1DA2  0821               	movf	(??_put_device_to_sleep+1)^(0+128),w
 13793  1DA3  00A7               	movwf	put_device_to_sleep@rslt^(0+128)
 13794  1DA4                     l4236:	
 13795                           
 13796                           ;BME280_driver/bme280.c: 984:     return rslt;
 13797  1DA4  0827               	movf	put_device_to_sleep@rslt^(0+128),w
 13798  1DA5  0008               	return
 13799  1DA6                     __end_of_put_device_to_sleep:	
 13800                           
 13801                           	psect	text39
 13802  1AF4                     __ptext39:	
 13803 ;; *************** function _reload_device_settings *****************
 13804 ;; Defined at:
 13805 ;;		line 991 in file "BME280_driver/bme280.c"
 13806 ;; Parameters:    Size  Location     Type
 13807 ;;  settings        1    wreg     PTR const struct bme280_
 13808 ;;		 -> put_device_to_sleep@settings(5), 
 13809 ;;  dev             1   75[BANK0 ] PTR const struct bme280_
 13810 ;;		 -> EnvSensor(51), 
 13811 ;; Auto vars:     Size  Location     Type
 13812 ;;  settings        1   78[BANK0 ] PTR const struct bme280_
 13813 ;;		 -> put_device_to_sleep@settings(5), 
 13814 ;;  rslt            1   79[BANK0 ] char 
 13815 ;; Return value:  Size  Location     Type
 13816 ;;                  1    wreg      char 
 13817 ;; Registers used:
 13818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13819 ;; Tracked objects:
 13820 ;;		On entry : 1F/0
 13821 ;;		On exit  : 1F/0
 13822 ;;		Unchanged: 0/0
 13823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13824 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;Total ram usage:        5 bytes
 13829 ;; Hardware stack levels used:    1
 13830 ;; Hardware stack levels required when called:   12
 13831 ;; This function calls:
 13832 ;;		_set_filter_standby_settings
 13833 ;;		_set_osr_settings
 13834 ;; This function is called by:
 13835 ;;		_put_device_to_sleep
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           
 13840                           ;psect for function _reload_device_settings
 13841  1AF4                     _reload_device_settings:	
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in _reload_device_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13845                           ;reload_device_settings@settings stored from wreg
 13846  1AF4  00EE               	movwf	reload_device_settings@settings
 13847                           
 13848                           ;BME280_driver/bme280.c: 991: static int8_t reload_device_settings(const struct bme280_s
      +                          ettings *settings, const struct bme280_dev *dev);BME280_driver/bme280.c: 992: {;BME280_d
      +                          river/bme280.c: 993:     int8_t rslt;;BME280_driver/bme280.c: 995:     rslt = set_osr_se
      +                          ttings(0x1F, settings, dev);
 13849  1AF5  086E               	movf	reload_device_settings@settings,w
 13850  1AF6  00E4               	movwf	set_osr_settings@settings
 13851  1AF7  3000               	movlw	0
 13852  1AF8  00E5               	movwf	set_osr_settings@settings+1
 13853  1AF9  086B               	movf	reload_device_settings@dev,w
 13854  1AFA  00EC               	movwf	??_reload_device_settings
 13855  1AFB  086C               	movf	??_reload_device_settings,w
 13856  1AFC  00E6               	movwf	set_osr_settings@dev
 13857  1AFD  301F               	movlw	31
 13858  1AFE  319B  233C  319A   	fcall	_set_osr_settings
 13859  1B01  00ED               	movwf	??_reload_device_settings+1
 13860  1B02  086D               	movf	??_reload_device_settings+1,w
 13861  1B03  00EF               	movwf	reload_device_settings@rslt
 13862                           
 13863                           ;BME280_driver/bme280.c: 996:     if (rslt == 0)
 13864  1B04  086F               	movf	reload_device_settings@rslt,w
 13865  1B05  1D03               	btfss	3,2
 13866  1B06  2B15               	goto	l4140
 13867                           
 13868                           ;BME280_driver/bme280.c: 997:     {;BME280_driver/bme280.c: 998:         rslt = set_filt
      +                          er_standby_settings(0x1F, settings, dev);
 13869  1B07  086E               	movf	reload_device_settings@settings,w
 13870  1B08  00DA               	movwf	set_filter_standby_settings@settings
 13871  1B09  3000               	movlw	0
 13872  1B0A  00DB               	movwf	set_filter_standby_settings@settings+1
 13873  1B0B  086B               	movf	reload_device_settings@dev,w
 13874  1B0C  00EC               	movwf	??_reload_device_settings
 13875  1B0D  086C               	movf	??_reload_device_settings,w
 13876  1B0E  00DC               	movwf	set_filter_standby_settings@dev
 13877  1B0F  301F               	movlw	31
 13878  1B10  319E  26A4         	fcall	_set_filter_standby_settings
 13879  1B12  00ED               	movwf	??_reload_device_settings+1
 13880  1B13  086D               	movf	??_reload_device_settings+1,w
 13881  1B14  00EF               	movwf	reload_device_settings@rslt
 13882  1B15                     l4140:	
 13883                           
 13884                           ;BME280_driver/bme280.c: 1001:     return rslt;
 13885  1B15  086F               	movf	reload_device_settings@rslt,w
 13886  1B16  0008               	return
 13887  1B17                     __end_of_reload_device_settings:	
 13888                           
 13889                           	psect	text40
 13890  1B3C                     __ptext40:	
 13891 ;; *************** function _set_osr_settings *****************
 13892 ;; Defined at:
 13893 ;;		line 777 in file "BME280_driver/bme280.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;  desired_sett    1    wreg     unsigned char 
 13896 ;;  settings        2   68[BANK0 ] PTR const struct bme280_
 13897 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 13898 ;;  dev             1   70[BANK0 ] PTR const struct bme280_
 13899 ;;		 -> EnvSensor(51), 
 13900 ;; Auto vars:     Size  Location     Type
 13901 ;;  desired_sett    1   74[BANK0 ] unsigned char 
 13902 ;;  rslt            1   73[BANK0 ] char 
 13903 ;; Return value:  Size  Location     Type
 13904 ;;                  1    wreg      char 
 13905 ;; Registers used:
 13906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13907 ;; Tracked objects:
 13908 ;;		On entry : 1E/1
 13909 ;;		On exit  : 1F/0
 13910 ;;		Unchanged: 0/0
 13911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13912 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13914 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13915 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13916 ;;Total ram usage:        7 bytes
 13917 ;; Hardware stack levels used:    1
 13918 ;; Hardware stack levels required when called:   11
 13919 ;; This function calls:
 13920 ;;		_set_osr_humidity_settings
 13921 ;;		_set_osr_press_temp_settings
 13922 ;; This function is called by:
 13923 ;;		_bme280_set_sensor_settings
 13924 ;;		_reload_device_settings
 13925 ;; This function uses a non-reentrant model
 13926 ;;
 13927                           
 13928                           
 13929                           ;psect for function _set_osr_settings
 13930  1B3C                     _set_osr_settings:	
 13931                           
 13932                           ;incstack = 0
 13933                           ; Regs used in _set_osr_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13934                           ;set_osr_settings@desired_settings stored from wreg
 13935  1B3C  0020               	movlb	0	; select bank0
 13936  1B3D  00EA               	movwf	set_osr_settings@desired_settings
 13937                           
 13938                           ;BME280_driver/bme280.c: 777: static int8_t set_osr_settings(uint8_t desired_settings,;B
      +                          ME280_driver/bme280.c: 778:                                const struct bme280_settings 
      +                          *settings,;BME280_driver/bme280.c: 779:                                const struct bme2
      +                          80_dev *dev);BME280_driver/bme280.c: 780: {;BME280_driver/bme280.c: 781:     int8_t rslt
      +                           = 1;
 13939  1B3E  01E9               	clrf	set_osr_settings@rslt
 13940  1B3F  0AE9               	incf	set_osr_settings@rslt,f
 13941                           
 13942                           ;BME280_driver/bme280.c: 783:     if (desired_settings & 1 << 2)
 13943  1B40  1D6A               	btfss	set_osr_settings@desired_settings,2
 13944  1B41  2B50               	goto	l4094
 13945                           
 13946                           ;BME280_driver/bme280.c: 784:     {;BME280_driver/bme280.c: 785:         rslt = set_osr_
      +                          humidity_settings(settings, dev);
 13947  1B42  0865               	movf	set_osr_settings@settings+1,w
 13948  1B43  00DB               	movwf	set_osr_humidity_settings@settings+1
 13949  1B44  0864               	movf	set_osr_settings@settings,w
 13950  1B45  00DA               	movwf	set_osr_humidity_settings@settings
 13951  1B46  0866               	movf	set_osr_settings@dev,w
 13952  1B47  00E7               	movwf	??_set_osr_settings
 13953  1B48  0867               	movf	??_set_osr_settings,w
 13954  1B49  00DC               	movwf	set_osr_humidity_settings@dev
 13955  1B4A  3190  2046  319B   	fcall	_set_osr_humidity_settings
 13956  1B4D  00E8               	movwf	??_set_osr_settings+1
 13957  1B4E  0868               	movf	??_set_osr_settings+1,w
 13958  1B4F  00E9               	movwf	set_osr_settings@rslt
 13959  1B50                     l4094:	
 13960                           
 13961                           ;BME280_driver/bme280.c: 787:     if (desired_settings & (1 | 1 << 1))
 13962  1B50  086A               	movf	set_osr_settings@desired_settings,w
 13963  1B51  3903               	andlw	3
 13964  1B52  1903               	btfsc	3,2
 13965  1B53  2B62               	goto	l4098
 13966                           
 13967                           ;BME280_driver/bme280.c: 788:     {;BME280_driver/bme280.c: 789:         rslt = set_osr_
      +                          press_temp_settings(desired_settings, settings, dev);
 13968  1B54  0865               	movf	set_osr_settings@settings+1,w
 13969  1B55  00DB               	movwf	set_osr_press_temp_settings@settings+1
 13970  1B56  0864               	movf	set_osr_settings@settings,w
 13971  1B57  00DA               	movwf	set_osr_press_temp_settings@settings
 13972  1B58  0866               	movf	set_osr_settings@dev,w
 13973  1B59  00E7               	movwf	??_set_osr_settings
 13974  1B5A  0867               	movf	??_set_osr_settings,w
 13975  1B5B  00DC               	movwf	set_osr_press_temp_settings@dev
 13976  1B5C  086A               	movf	set_osr_settings@desired_settings,w
 13977  1B5D  319E  2621         	fcall	_set_osr_press_temp_settings
 13978  1B5F  00E8               	movwf	??_set_osr_settings+1
 13979  1B60  0868               	movf	??_set_osr_settings+1,w
 13980  1B61  00E9               	movwf	set_osr_settings@rslt
 13981  1B62                     l4098:	
 13982                           
 13983                           ;BME280_driver/bme280.c: 792:     return rslt;
 13984  1B62  0869               	movf	set_osr_settings@rslt,w
 13985  1B63  0008               	return
 13986  1B64                     __end_of_set_osr_settings:	
 13987                           
 13988                           	psect	text41
 13989  1E21                     __ptext41:	
 13990 ;; *************** function _set_osr_press_temp_settings *****************
 13991 ;; Defined at:
 13992 ;;		line 830 in file "BME280_driver/bme280.c"
 13993 ;; Parameters:    Size  Location     Type
 13994 ;;  desired_sett    1    wreg     unsigned char 
 13995 ;;  settings        2   58[BANK0 ] PTR const struct bme280_
 13996 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 13997 ;;  dev             1   60[BANK0 ] PTR const struct bme280_
 13998 ;;		 -> EnvSensor(51), 
 13999 ;; Auto vars:     Size  Location     Type
 14000 ;;  desired_sett    1   64[BANK0 ] unsigned char 
 14001 ;;  reg_data        1   67[BANK0 ] unsigned char 
 14002 ;;  reg_addr        1   66[BANK0 ] unsigned char 
 14003 ;;  rslt            1   65[BANK0 ] char 
 14004 ;; Return value:  Size  Location     Type
 14005 ;;                  1    wreg      char 
 14006 ;; Registers used:
 14007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14008 ;; Tracked objects:
 14009 ;;		On entry : 1F/0
 14010 ;;		On exit  : 1F/0
 14011 ;;		Unchanged: 0/0
 14012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14013 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14017 ;;Total ram usage:       10 bytes
 14018 ;; Hardware stack levels used:    1
 14019 ;; Hardware stack levels required when called:   10
 14020 ;; This function calls:
 14021 ;;		_bme280_get_regs
 14022 ;;		_bme280_set_regs
 14023 ;;		_fill_osr_press_settings
 14024 ;;		_fill_osr_temp_settings
 14025 ;; This function is called by:
 14026 ;;		_set_osr_settings
 14027 ;; This function uses a non-reentrant model
 14028 ;;
 14029                           
 14030                           
 14031                           ;psect for function _set_osr_press_temp_settings
 14032  1E21                     _set_osr_press_temp_settings:	
 14033                           
 14034                           ;incstack = 0
 14035                           ; Regs used in _set_osr_press_temp_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14036                           ;set_osr_press_temp_settings@desired_settings stored from wreg
 14037  1E21  00E0               	movwf	set_osr_press_temp_settings@desired_settings
 14038                           
 14039                           ;BME280_driver/bme280.c: 830: static int8_t set_osr_press_temp_settings(uint8_t desired_
      +                          settings,;BME280_driver/bme280.c: 831:                                           const s
      +                          truct bme280_settings *settings,;BME280_driver/bme280.c: 832:                           
      +                                          const struct bme280_dev *dev);BME280_driver/bme280.c: 833: {;BME280_driv
      +                          er/bme280.c: 834:     int8_t rslt;;BME280_driver/bme280.c: 835:     uint8_t reg_addr = 0
      +                          xF4;
 14040  1E22  30F4               	movlw	244
 14041  1E23  00DD               	movwf	??_set_osr_press_temp_settings
 14042  1E24  085D               	movf	??_set_osr_press_temp_settings,w
 14043  1E25  00E2               	movwf	set_osr_press_temp_settings@reg_addr
 14044                           
 14045                           ;BME280_driver/bme280.c: 836:     uint8_t reg_data;;BME280_driver/bme280.c: 838:     rsl
      +                          t = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 14046  1E26  3063               	movlw	(low (set_osr_press_temp_settings@reg_data| 0))& (0+255)
 14047  1E27  00DD               	movwf	??_set_osr_press_temp_settings
 14048  1E28  085D               	movf	??_set_osr_press_temp_settings,w
 14049  1E29  00BB               	movwf	bme280_get_regs@reg_data
 14050  1E2A  3001               	movlw	1
 14051  1E2B  00BC               	movwf	bme280_get_regs@len
 14052  1E2C  3000               	movlw	0
 14053  1E2D  00BD               	movwf	bme280_get_regs@len+1
 14054  1E2E  085C               	movf	set_osr_press_temp_settings@dev,w
 14055  1E2F  00DE               	movwf	??_set_osr_press_temp_settings+1
 14056  1E30  085E               	movf	??_set_osr_press_temp_settings+1,w
 14057  1E31  00BE               	movwf	bme280_get_regs@dev
 14058  1E32  0862               	movf	set_osr_press_temp_settings@reg_addr,w
 14059  1E33  319E  2662  319E   	fcall	_bme280_get_regs
 14060  1E36  00DF               	movwf	??_set_osr_press_temp_settings+2
 14061  1E37  085F               	movf	??_set_osr_press_temp_settings+2,w
 14062  1E38  00E1               	movwf	set_osr_press_temp_settings@rslt
 14063                           
 14064                           ;BME280_driver/bme280.c: 839:     if (rslt == 0)
 14065  1E39  0861               	movf	set_osr_press_temp_settings@rslt,w
 14066  1E3A  1D03               	btfss	3,2
 14067  1E3B  2E60               	goto	l4080
 14068                           
 14069                           ;BME280_driver/bme280.c: 840:     {;BME280_driver/bme280.c: 841:         if (desired_set
      +                          tings & 1)
 14070  1E3C  1C60               	btfss	set_osr_press_temp_settings@desired_settings,0
 14071  1E3D  2E46               	goto	l4076
 14072                           
 14073                           ;BME280_driver/bme280.c: 842:         {;BME280_driver/bme280.c: 843:             fill_os
      +                          r_press_settings(&reg_data, settings);
 14074  1E3E  085B               	movf	set_osr_press_temp_settings@settings+1,w
 14075  1E3F  00F1               	movwf	fill_osr_press_settings@settings+1
 14076  1E40  085A               	movf	set_osr_press_temp_settings@settings,w
 14077  1E41  00F0               	movwf	fill_osr_press_settings@settings
 14078  1E42  3063               	movlw	(low (set_osr_press_temp_settings@reg_data| 0))& (0+255)
 14079  1E43  319A  2285  319E   	fcall	_fill_osr_press_settings
 14080  1E46                     l4076:	
 14081                           
 14082                           ;BME280_driver/bme280.c: 845:         if (desired_settings & 1 << 1)
 14083  1E46  1CE0               	btfss	set_osr_press_temp_settings@desired_settings,1
 14084  1E47  2E50               	goto	l146
 14085                           
 14086                           ;BME280_driver/bme280.c: 846:         {;BME280_driver/bme280.c: 847:             fill_os
      +                          r_temp_settings(&reg_data, settings);
 14087  1E48  085B               	movf	set_osr_press_temp_settings@settings+1,w
 14088  1E49  00F1               	movwf	fill_osr_temp_settings@settings+1
 14089  1E4A  085A               	movf	set_osr_press_temp_settings@settings,w
 14090  1E4B  00F0               	movwf	fill_osr_temp_settings@settings
 14091  1E4C  3063               	movlw	(low (set_osr_press_temp_settings@reg_data| 0))& (0+255)
 14092  1E4D  319A  22D8  319E   	fcall	_fill_osr_temp_settings
 14093  1E50                     l146:	
 14094                           ;BME280_driver/bme280.c: 848:         }
 14095                           
 14096                           
 14097                           ;BME280_driver/bme280.c: 851:         rslt = bme280_set_regs(&reg_addr, &reg_data, 1, de
      +                          v);
 14098  1E50  3063               	movlw	(low (set_osr_press_temp_settings@reg_data| 0))& (0+255)
 14099  1E51  00DD               	movwf	??_set_osr_press_temp_settings
 14100  1E52  085D               	movf	??_set_osr_press_temp_settings,w
 14101  1E53  00BB               	movwf	bme280_set_regs@reg_data
 14102  1E54  01BC               	clrf	bme280_set_regs@len
 14103  1E55  0ABC               	incf	bme280_set_regs@len,f
 14104  1E56  085C               	movf	set_osr_press_temp_settings@dev,w
 14105  1E57  00DE               	movwf	??_set_osr_press_temp_settings+1
 14106  1E58  085E               	movf	??_set_osr_press_temp_settings+1,w
 14107  1E59  00BD               	movwf	bme280_set_regs@dev
 14108  1E5A  3062               	movlw	(low (set_osr_press_temp_settings@reg_addr| 0))& (0+255)
 14109  1E5B  3188  2027         	fcall	_bme280_set_regs
 14110  1E5D  00DF               	movwf	??_set_osr_press_temp_settings+2
 14111  1E5E  085F               	movf	??_set_osr_press_temp_settings+2,w
 14112  1E5F  00E1               	movwf	set_osr_press_temp_settings@rslt
 14113  1E60                     l4080:	
 14114                           
 14115                           ;BME280_driver/bme280.c: 854:     return rslt;
 14116  1E60  0861               	movf	set_osr_press_temp_settings@rslt,w
 14117  1E61  0008               	return
 14118  1E62                     __end_of_set_osr_press_temp_settings:	
 14119                           
 14120                           	psect	text42
 14121  1AD8                     __ptext42:	
 14122 ;; *************** function _fill_osr_temp_settings *****************
 14123 ;; Defined at:
 14124 ;;		line 919 in file "BME280_driver/bme280.c"
 14125 ;; Parameters:    Size  Location     Type
 14126 ;;  reg_data        1    wreg     PTR unsigned char 
 14127 ;;		 -> set_osr_press_temp_settings@reg_data(1), 
 14128 ;;  settings        2    0[COMMON] PTR const struct bme280_
 14129 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;  reg_data        1    5[COMMON] PTR unsigned char 
 14132 ;;		 -> set_osr_press_temp_settings@reg_data(1), 
 14133 ;; Return value:  Size  Location     Type
 14134 ;;                  1    wreg      void 
 14135 ;; Registers used:
 14136 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14137 ;; Tracked objects:
 14138 ;;		On entry : 1F/0
 14139 ;;		On exit  : 1F/0
 14140 ;;		Unchanged: 1F/0
 14141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14142 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14146 ;;Total ram usage:        6 bytes
 14147 ;; Hardware stack levels used:    1
 14148 ;; Hardware stack levels required when called:    3
 14149 ;; This function calls:
 14150 ;;		Nothing
 14151 ;; This function is called by:
 14152 ;;		_set_osr_press_temp_settings
 14153 ;; This function uses a non-reentrant model
 14154 ;;
 14155                           
 14156                           
 14157                           ;psect for function _fill_osr_temp_settings
 14158  1AD8                     _fill_osr_temp_settings:	
 14159                           
 14160                           ;incstack = 0
 14161                           ; Regs used in _fill_osr_temp_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14162                           ;fill_osr_temp_settings@reg_data stored from wreg
 14163  1AD8  00F5               	movwf	fill_osr_temp_settings@reg_data
 14164                           
 14165                           ;BME280_driver/bme280.c: 919: static void fill_osr_temp_settings(uint8_t *reg_data, cons
      +                          t struct bme280_settings *settings);BME280_driver/bme280.c: 920: {;BME280_driver/bme280.
      +                          c: 921:     *reg_data = ((*reg_data & ~( 0xE0)) | ((settings->osr_t << 0x05) & 0xE0));
 14166  1AD9  0870               	movf	fill_osr_temp_settings@settings,w
 14167  1ADA  0086               	movwf	6
 14168  1ADB  0871               	movf	fill_osr_temp_settings@settings+1,w
 14169  1ADC  0087               	movwf	7
 14170  1ADD  3141               	addfsr 1,1
 14171  1ADE  0801               	movf	1,w
 14172  1ADF  00F2               	movwf	??_fill_osr_temp_settings
 14173  1AE0  3005               	movlw	5
 14174  1AE1                     u4355:	
 14175  1AE1  35F2               	lslf	??_fill_osr_temp_settings,f
 14176  1AE2  0B89               	decfsz	9,f
 14177  1AE3  2AE1               	goto	u4355
 14178  1AE4  30E0               	movlw	224
 14179  1AE5  0572               	andwf	??_fill_osr_temp_settings,w
 14180  1AE6  00F3               	movwf	??_fill_osr_temp_settings+1
 14181  1AE7  0875               	movf	fill_osr_temp_settings@reg_data,w
 14182  1AE8  0086               	movwf	6
 14183  1AE9  0187               	clrf	7
 14184  1AEA  0801               	movf	1,w
 14185  1AEB  391F               	andlw	31
 14186  1AEC  0473               	iorwf	??_fill_osr_temp_settings+1,w
 14187  1AED  00F4               	movwf	??_fill_osr_temp_settings+2
 14188  1AEE  0875               	movf	fill_osr_temp_settings@reg_data,w
 14189  1AEF  0086               	movwf	6
 14190  1AF0  0187               	clrf	7
 14191  1AF1  0874               	movf	??_fill_osr_temp_settings+2,w
 14192  1AF2  0081               	movwf	1
 14193  1AF3  0008               	return
 14194  1AF4                     __end_of_fill_osr_temp_settings:	
 14195                           
 14196                           	psect	text43
 14197  1A85                     __ptext43:	
 14198 ;; *************** function _fill_osr_press_settings *****************
 14199 ;; Defined at:
 14200 ;;		line 910 in file "BME280_driver/bme280.c"
 14201 ;; Parameters:    Size  Location     Type
 14202 ;;  reg_data        1    wreg     PTR unsigned char 
 14203 ;;		 -> set_osr_press_temp_settings@reg_data(1), 
 14204 ;;  settings        2    0[COMMON] PTR const struct bme280_
 14205 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14206 ;; Auto vars:     Size  Location     Type
 14207 ;;  reg_data        1    5[COMMON] PTR unsigned char 
 14208 ;;		 -> set_osr_press_temp_settings@reg_data(1), 
 14209 ;; Return value:  Size  Location     Type
 14210 ;;                  1    wreg      void 
 14211 ;; Registers used:
 14212 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14213 ;; Tracked objects:
 14214 ;;		On entry : 1F/0
 14215 ;;		On exit  : 1F/0
 14216 ;;		Unchanged: 1F/0
 14217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14218 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;Total ram usage:        6 bytes
 14223 ;; Hardware stack levels used:    1
 14224 ;; Hardware stack levels required when called:    3
 14225 ;; This function calls:
 14226 ;;		Nothing
 14227 ;; This function is called by:
 14228 ;;		_set_osr_press_temp_settings
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           
 14233                           ;psect for function _fill_osr_press_settings
 14234  1A85                     _fill_osr_press_settings:	
 14235                           
 14236                           ;incstack = 0
 14237                           ; Regs used in _fill_osr_press_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14238                           ;fill_osr_press_settings@reg_data stored from wreg
 14239  1A85  00F5               	movwf	fill_osr_press_settings@reg_data
 14240                           
 14241                           ;BME280_driver/bme280.c: 910: static void fill_osr_press_settings(uint8_t *reg_data, con
      +                          st struct bme280_settings *settings);BME280_driver/bme280.c: 911: {;BME280_driver/bme280
      +                          .c: 912:     *reg_data = ((*reg_data & ~( 0x1C)) | ((settings->osr_p << 0x02) & 0x1C));
 14242  1A86  0870               	movf	fill_osr_press_settings@settings,w
 14243  1A87  0086               	movwf	6
 14244  1A88  0871               	movf	fill_osr_press_settings@settings+1,w
 14245  1A89  0087               	movwf	7
 14246  1A8A  0801               	movf	1,w
 14247  1A8B  00F2               	movwf	??_fill_osr_press_settings
 14248  1A8C  3002               	movlw	2
 14249  1A8D                     u4345:	
 14250  1A8D  35F2               	lslf	??_fill_osr_press_settings,f
 14251  1A8E  0B89               	decfsz	9,f
 14252  1A8F  2A8D               	goto	u4345
 14253  1A90  301C               	movlw	28
 14254  1A91  0572               	andwf	??_fill_osr_press_settings,w
 14255  1A92  00F3               	movwf	??_fill_osr_press_settings+1
 14256  1A93  0875               	movf	fill_osr_press_settings@reg_data,w
 14257  1A94  0086               	movwf	6
 14258  1A95  0187               	clrf	7
 14259  1A96  0801               	movf	1,w
 14260  1A97  39E3               	andlw	227
 14261  1A98  0473               	iorwf	??_fill_osr_press_settings+1,w
 14262  1A99  00F4               	movwf	??_fill_osr_press_settings+2
 14263  1A9A  0875               	movf	fill_osr_press_settings@reg_data,w
 14264  1A9B  0086               	movwf	6
 14265  1A9C  0187               	clrf	7
 14266  1A9D  0874               	movf	??_fill_osr_press_settings+2,w
 14267  1A9E  0081               	movwf	1
 14268  1A9F  0008               	return
 14269  1AA0                     __end_of_fill_osr_press_settings:	
 14270                           
 14271                           	psect	text44
 14272  1046                     __ptext44:	
 14273 ;; *************** function _set_osr_humidity_settings *****************
 14274 ;; Defined at:
 14275 ;;		line 798 in file "BME280_driver/bme280.c"
 14276 ;; Parameters:    Size  Location     Type
 14277 ;;  settings        2   58[BANK0 ] PTR const struct bme280_
 14278 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14279 ;;  dev             1   60[BANK0 ] PTR const struct bme280_
 14280 ;;		 -> EnvSensor(51), 
 14281 ;; Auto vars:     Size  Location     Type
 14282 ;;  reg_addr        1   67[BANK0 ] unsigned char 
 14283 ;;  rslt            1   66[BANK0 ] char 
 14284 ;;  ctrl_meas       1   65[BANK0 ] unsigned char 
 14285 ;;  ctrl_hum        1   64[BANK0 ] unsigned char 
 14286 ;; Return value:  Size  Location     Type
 14287 ;;                  1    wreg      char 
 14288 ;; Registers used:
 14289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14290 ;; Tracked objects:
 14291 ;;		On entry : 1F/0
 14292 ;;		On exit  : 1F/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14295 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;Total ram usage:       10 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; Hardware stack levels required when called:   10
 14302 ;; This function calls:
 14303 ;;		_bme280_get_regs
 14304 ;;		_bme280_set_regs
 14305 ;; This function is called by:
 14306 ;;		_set_osr_settings
 14307 ;; This function uses a non-reentrant model
 14308 ;;
 14309                           
 14310                           
 14311                           ;psect for function _set_osr_humidity_settings
 14312  1046                     _set_osr_humidity_settings:	
 14313                           
 14314                           ;BME280_driver/bme280.c: 798: static int8_t set_osr_humidity_settings(const struct bme28
      +                          0_settings *settings, const struct bme280_dev *dev);BME280_driver/bme280.c: 799: {;BME28
      +                          0_driver/bme280.c: 800:     int8_t rslt;;BME280_driver/bme280.c: 801:     uint8_t ctrl_h
      +                          um;;BME280_driver/bme280.c: 802:     uint8_t ctrl_meas;;BME280_driver/bme280.c: 803:    
      +                           uint8_t reg_addr = 0xF2;
 14315                           
 14316                           ;incstack = 0
 14317                           ; Regs used in _set_osr_humidity_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14318  1046  30F2               	movlw	242
 14319  1047  00DD               	movwf	??_set_osr_humidity_settings
 14320  1048  085D               	movf	??_set_osr_humidity_settings,w
 14321  1049  00E3               	movwf	set_osr_humidity_settings@reg_addr
 14322                           
 14323                           ;BME280_driver/bme280.c: 805:     ctrl_hum = settings->osr_h & 0x07;
 14324  104A  085A               	movf	set_osr_humidity_settings@settings,w
 14325  104B  0086               	movwf	6
 14326  104C  085B               	movf	set_osr_humidity_settings@settings+1,w
 14327  104D  0087               	movwf	7
 14328  104E  3142               	addfsr 1,2
 14329  104F  0801               	movf	1,w
 14330  1050  3907               	andlw	7
 14331  1051  00DD               	movwf	??_set_osr_humidity_settings
 14332  1052  085D               	movf	??_set_osr_humidity_settings,w
 14333  1053  00E0               	movwf	set_osr_humidity_settings@ctrl_hum
 14334                           
 14335                           ;BME280_driver/bme280.c: 808:     rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 14336  1054  3060               	movlw	(low (set_osr_humidity_settings@ctrl_hum| 0))& (0+255)
 14337  1055  00DD               	movwf	??_set_osr_humidity_settings
 14338  1056  085D               	movf	??_set_osr_humidity_settings,w
 14339  1057  00BB               	movwf	bme280_set_regs@reg_data
 14340  1058  01BC               	clrf	bme280_set_regs@len
 14341  1059  0ABC               	incf	bme280_set_regs@len,f
 14342  105A  085C               	movf	set_osr_humidity_settings@dev,w
 14343  105B  00DE               	movwf	??_set_osr_humidity_settings+1
 14344  105C  085E               	movf	??_set_osr_humidity_settings+1,w
 14345  105D  00BD               	movwf	bme280_set_regs@dev
 14346  105E  3063               	movlw	(low (set_osr_humidity_settings@reg_addr| 0))& (0+255)
 14347  105F  3188  2027  3190   	fcall	_bme280_set_regs
 14348  1062  00DF               	movwf	??_set_osr_humidity_settings+2
 14349  1063  085F               	movf	??_set_osr_humidity_settings+2,w
 14350  1064  00E2               	movwf	set_osr_humidity_settings@rslt
 14351                           
 14352                           ;BME280_driver/bme280.c: 813:     if (rslt == 0)
 14353  1065  0862               	movf	set_osr_humidity_settings@rslt,w
 14354  1066  1D03               	btfss	3,2
 14355  1067  2892               	goto	l4062
 14356                           
 14357                           ;BME280_driver/bme280.c: 814:     {;BME280_driver/bme280.c: 815:         reg_addr = 0xF4
      +                          ;
 14358  1068  30F4               	movlw	244
 14359  1069  00DD               	movwf	??_set_osr_humidity_settings
 14360  106A  085D               	movf	??_set_osr_humidity_settings,w
 14361  106B  00E3               	movwf	set_osr_humidity_settings@reg_addr
 14362                           
 14363                           ;BME280_driver/bme280.c: 816:         rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, de
      +                          v);
 14364  106C  3061               	movlw	(low (set_osr_humidity_settings@ctrl_meas| 0))& (0+255)
 14365  106D  00DD               	movwf	??_set_osr_humidity_settings
 14366  106E  085D               	movf	??_set_osr_humidity_settings,w
 14367  106F  00BB               	movwf	bme280_get_regs@reg_data
 14368  1070  3001               	movlw	1
 14369  1071  00BC               	movwf	bme280_get_regs@len
 14370  1072  3000               	movlw	0
 14371  1073  00BD               	movwf	bme280_get_regs@len+1
 14372  1074  085C               	movf	set_osr_humidity_settings@dev,w
 14373  1075  00DE               	movwf	??_set_osr_humidity_settings+1
 14374  1076  085E               	movf	??_set_osr_humidity_settings+1,w
 14375  1077  00BE               	movwf	bme280_get_regs@dev
 14376  1078  0863               	movf	set_osr_humidity_settings@reg_addr,w
 14377  1079  319E  2662  3190   	fcall	_bme280_get_regs
 14378  107C  00DF               	movwf	??_set_osr_humidity_settings+2
 14379  107D  085F               	movf	??_set_osr_humidity_settings+2,w
 14380  107E  00E2               	movwf	set_osr_humidity_settings@rslt
 14381                           
 14382                           ;BME280_driver/bme280.c: 817:         if (rslt == 0)
 14383  107F  0862               	movf	set_osr_humidity_settings@rslt,w
 14384  1080  1D03               	btfss	3,2
 14385  1081  2892               	goto	l4062
 14386                           
 14387                           ;BME280_driver/bme280.c: 818:         {;BME280_driver/bme280.c: 819:             rslt = 
      +                          bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 14388  1082  3061               	movlw	(low (set_osr_humidity_settings@ctrl_meas| 0))& (0+255)
 14389  1083  00DD               	movwf	??_set_osr_humidity_settings
 14390  1084  085D               	movf	??_set_osr_humidity_settings,w
 14391  1085  00BB               	movwf	bme280_set_regs@reg_data
 14392  1086  01BC               	clrf	bme280_set_regs@len
 14393  1087  0ABC               	incf	bme280_set_regs@len,f
 14394  1088  085C               	movf	set_osr_humidity_settings@dev,w
 14395  1089  00DE               	movwf	??_set_osr_humidity_settings+1
 14396  108A  085E               	movf	??_set_osr_humidity_settings+1,w
 14397  108B  00BD               	movwf	bme280_set_regs@dev
 14398  108C  3063               	movlw	(low (set_osr_humidity_settings@reg_addr| 0))& (0+255)
 14399  108D  3188  2027         	fcall	_bme280_set_regs
 14400  108F  00DF               	movwf	??_set_osr_humidity_settings+2
 14401  1090  085F               	movf	??_set_osr_humidity_settings+2,w
 14402  1091  00E2               	movwf	set_osr_humidity_settings@rslt
 14403  1092                     l4062:	
 14404                           
 14405                           ;BME280_driver/bme280.c: 823:     return rslt;
 14406  1092  0862               	movf	set_osr_humidity_settings@rslt,w
 14407  1093  0008               	return
 14408  1094                     __end_of_set_osr_humidity_settings:	
 14409                           
 14410                           	psect	text45
 14411  1EA4                     __ptext45:	
 14412 ;; *************** function _set_filter_standby_settings *****************
 14413 ;; Defined at:
 14414 ;;		line 861 in file "BME280_driver/bme280.c"
 14415 ;; Parameters:    Size  Location     Type
 14416 ;;  desired_sett    1    wreg     unsigned char 
 14417 ;;  settings        2   58[BANK0 ] PTR const struct bme280_
 14418 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14419 ;;  dev             1   60[BANK0 ] PTR const struct bme280_
 14420 ;;		 -> EnvSensor(51), 
 14421 ;; Auto vars:     Size  Location     Type
 14422 ;;  desired_sett    1   64[BANK0 ] unsigned char 
 14423 ;;  reg_data        1   67[BANK0 ] unsigned char 
 14424 ;;  reg_addr        1   66[BANK0 ] unsigned char 
 14425 ;;  rslt            1   65[BANK0 ] char 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  1    wreg      char 
 14428 ;; Registers used:
 14429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 1E/1
 14432 ;;		On exit  : 1F/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14435 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;Total ram usage:       10 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; Hardware stack levels required when called:   10
 14442 ;; This function calls:
 14443 ;;		_bme280_get_regs
 14444 ;;		_bme280_set_regs
 14445 ;;		_fill_filter_settings
 14446 ;;		_fill_standby_settings
 14447 ;; This function is called by:
 14448 ;;		_bme280_set_sensor_settings
 14449 ;;		_reload_device_settings
 14450 ;; This function uses a non-reentrant model
 14451 ;;
 14452                           
 14453                           
 14454                           ;psect for function _set_filter_standby_settings
 14455  1EA4                     _set_filter_standby_settings:	
 14456                           
 14457                           ;incstack = 0
 14458                           ; Regs used in _set_filter_standby_settings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14459                           ;set_filter_standby_settings@desired_settings stored from wreg
 14460  1EA4  0020               	movlb	0	; select bank0
 14461  1EA5  00E0               	movwf	set_filter_standby_settings@desired_settings
 14462                           
 14463                           ;BME280_driver/bme280.c: 861: static int8_t set_filter_standby_settings(uint8_t desired_
      +                          settings,;BME280_driver/bme280.c: 862:                                           const s
      +                          truct bme280_settings *settings,;BME280_driver/bme280.c: 863:                           
      +                                          const struct bme280_dev *dev);BME280_driver/bme280.c: 864: {;BME280_driv
      +                          er/bme280.c: 865:     int8_t rslt;;BME280_driver/bme280.c: 866:     uint8_t reg_addr = 0
      +                          xF5;
 14464  1EA6  30F5               	movlw	245
 14465  1EA7  00DD               	movwf	??_set_filter_standby_settings
 14466  1EA8  085D               	movf	??_set_filter_standby_settings,w
 14467  1EA9  00E2               	movwf	set_filter_standby_settings@reg_addr
 14468                           
 14469                           ;BME280_driver/bme280.c: 867:     uint8_t reg_data;;BME280_driver/bme280.c: 869:     rsl
      +                          t = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 14470  1EAA  3063               	movlw	(low (set_filter_standby_settings@reg_data| 0))& (0+255)
 14471  1EAB  00DD               	movwf	??_set_filter_standby_settings
 14472  1EAC  085D               	movf	??_set_filter_standby_settings,w
 14473  1EAD  00BB               	movwf	bme280_get_regs@reg_data
 14474  1EAE  3001               	movlw	1
 14475  1EAF  00BC               	movwf	bme280_get_regs@len
 14476  1EB0  3000               	movlw	0
 14477  1EB1  00BD               	movwf	bme280_get_regs@len+1
 14478  1EB2  085C               	movf	set_filter_standby_settings@dev,w
 14479  1EB3  00DE               	movwf	??_set_filter_standby_settings+1
 14480  1EB4  085E               	movf	??_set_filter_standby_settings+1,w
 14481  1EB5  00BE               	movwf	bme280_get_regs@dev
 14482  1EB6  0862               	movf	set_filter_standby_settings@reg_addr,w
 14483  1EB7  319E  2662  319E   	fcall	_bme280_get_regs
 14484  1EBA  00DF               	movwf	??_set_filter_standby_settings+2
 14485  1EBB  085F               	movf	??_set_filter_standby_settings+2,w
 14486  1EBC  00E1               	movwf	set_filter_standby_settings@rslt
 14487                           
 14488                           ;BME280_driver/bme280.c: 870:     if (rslt == 0)
 14489  1EBD  0861               	movf	set_filter_standby_settings@rslt,w
 14490  1EBE  1D03               	btfss	3,2
 14491  1EBF  2EE4               	goto	l4116
 14492                           
 14493                           ;BME280_driver/bme280.c: 871:     {;BME280_driver/bme280.c: 872:         if (desired_set
      +                          tings & 1 << 3)
 14494  1EC0  1DE0               	btfss	set_filter_standby_settings@desired_settings,3
 14495  1EC1  2ECA               	goto	l4112
 14496                           
 14497                           ;BME280_driver/bme280.c: 873:         {;BME280_driver/bme280.c: 874:             fill_fi
      +                          lter_settings(&reg_data, settings);
 14498  1EC2  085B               	movf	set_filter_standby_settings@settings+1,w
 14499  1EC3  00F1               	movwf	fill_filter_settings@settings+1
 14500  1EC4  085A               	movf	set_filter_standby_settings@settings,w
 14501  1EC5  00F0               	movwf	fill_filter_settings@settings
 14502  1EC6  3063               	movlw	(low (set_filter_standby_settings@reg_data| 0))& (0+255)
 14503  1EC7  319A  22A0  319E   	fcall	_fill_filter_settings
 14504  1ECA                     l4112:	
 14505                           
 14506                           ;BME280_driver/bme280.c: 876:         if (desired_settings & 1 << 4)
 14507  1ECA  1E60               	btfss	set_filter_standby_settings@desired_settings,4
 14508  1ECB  2ED4               	goto	l152
 14509                           
 14510                           ;BME280_driver/bme280.c: 877:         {;BME280_driver/bme280.c: 878:             fill_st
      +                          andby_settings(&reg_data, settings);
 14511  1ECC  085B               	movf	set_filter_standby_settings@settings+1,w
 14512  1ECD  00F1               	movwf	fill_standby_settings@settings+1
 14513  1ECE  085A               	movf	set_filter_standby_settings@settings,w
 14514  1ECF  00F0               	movwf	fill_standby_settings@settings
 14515  1ED0  3063               	movlw	(low (set_filter_standby_settings@reg_data| 0))& (0+255)
 14516  1ED1  319A  22BC  319E   	fcall	_fill_standby_settings
 14517  1ED4                     l152:	
 14518                           ;BME280_driver/bme280.c: 879:         }
 14519                           
 14520                           
 14521                           ;BME280_driver/bme280.c: 882:         rslt = bme280_set_regs(&reg_addr, &reg_data, 1, de
      +                          v);
 14522  1ED4  3063               	movlw	(low (set_filter_standby_settings@reg_data| 0))& (0+255)
 14523  1ED5  00DD               	movwf	??_set_filter_standby_settings
 14524  1ED6  085D               	movf	??_set_filter_standby_settings,w
 14525  1ED7  00BB               	movwf	bme280_set_regs@reg_data
 14526  1ED8  01BC               	clrf	bme280_set_regs@len
 14527  1ED9  0ABC               	incf	bme280_set_regs@len,f
 14528  1EDA  085C               	movf	set_filter_standby_settings@dev,w
 14529  1EDB  00DE               	movwf	??_set_filter_standby_settings+1
 14530  1EDC  085E               	movf	??_set_filter_standby_settings+1,w
 14531  1EDD  00BD               	movwf	bme280_set_regs@dev
 14532  1EDE  3062               	movlw	(low (set_filter_standby_settings@reg_addr| 0))& (0+255)
 14533  1EDF  3188  2027         	fcall	_bme280_set_regs
 14534  1EE1  00DF               	movwf	??_set_filter_standby_settings+2
 14535  1EE2  085F               	movf	??_set_filter_standby_settings+2,w
 14536  1EE3  00E1               	movwf	set_filter_standby_settings@rslt
 14537  1EE4                     l4116:	
 14538                           
 14539                           ;BME280_driver/bme280.c: 885:     return rslt;
 14540  1EE4  0861               	movf	set_filter_standby_settings@rslt,w
 14541  1EE5  0008               	return
 14542  1EE6                     __end_of_set_filter_standby_settings:	
 14543                           
 14544                           	psect	text46
 14545  1ABC                     __ptext46:	
 14546 ;; *************** function _fill_standby_settings *****************
 14547 ;; Defined at:
 14548 ;;		line 901 in file "BME280_driver/bme280.c"
 14549 ;; Parameters:    Size  Location     Type
 14550 ;;  reg_data        1    wreg     PTR unsigned char 
 14551 ;;		 -> set_filter_standby_settings@reg_data(1), 
 14552 ;;  settings        2    0[COMMON] PTR const struct bme280_
 14553 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14554 ;; Auto vars:     Size  Location     Type
 14555 ;;  reg_data        1    5[COMMON] PTR unsigned char 
 14556 ;;		 -> set_filter_standby_settings@reg_data(1), 
 14557 ;; Return value:  Size  Location     Type
 14558 ;;                  1    wreg      void 
 14559 ;; Registers used:
 14560 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14561 ;; Tracked objects:
 14562 ;;		On entry : 1F/0
 14563 ;;		On exit  : 1F/0
 14564 ;;		Unchanged: 1F/0
 14565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;Total ram usage:        6 bytes
 14571 ;; Hardware stack levels used:    1
 14572 ;; Hardware stack levels required when called:    3
 14573 ;; This function calls:
 14574 ;;		Nothing
 14575 ;; This function is called by:
 14576 ;;		_set_filter_standby_settings
 14577 ;; This function uses a non-reentrant model
 14578 ;;
 14579                           
 14580                           
 14581                           ;psect for function _fill_standby_settings
 14582  1ABC                     _fill_standby_settings:	
 14583                           
 14584                           ;incstack = 0
 14585                           ; Regs used in _fill_standby_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14586                           ;fill_standby_settings@reg_data stored from wreg
 14587  1ABC  00F5               	movwf	fill_standby_settings@reg_data
 14588                           
 14589                           ;BME280_driver/bme280.c: 901: static void fill_standby_settings(uint8_t *reg_data, const
      +                           struct bme280_settings *settings);BME280_driver/bme280.c: 902: {;BME280_driver/bme280.c
      +                          : 903:     *reg_data = ((*reg_data & ~( 0xE0)) | ((settings->standby_time << 0x05) & 0xE
      +                          0));
 14590  1ABD  0870               	movf	fill_standby_settings@settings,w
 14591  1ABE  0086               	movwf	6
 14592  1ABF  0871               	movf	fill_standby_settings@settings+1,w
 14593  1AC0  0087               	movwf	7
 14594  1AC1  3144               	addfsr 1,4
 14595  1AC2  0801               	movf	1,w
 14596  1AC3  00F2               	movwf	??_fill_standby_settings
 14597  1AC4  3005               	movlw	5
 14598  1AC5                     u4425:	
 14599  1AC5  35F2               	lslf	??_fill_standby_settings,f
 14600  1AC6  0B89               	decfsz	9,f
 14601  1AC7  2AC5               	goto	u4425
 14602  1AC8  30E0               	movlw	224
 14603  1AC9  0572               	andwf	??_fill_standby_settings,w
 14604  1ACA  00F3               	movwf	??_fill_standby_settings+1
 14605  1ACB  0875               	movf	fill_standby_settings@reg_data,w
 14606  1ACC  0086               	movwf	6
 14607  1ACD  0187               	clrf	7
 14608  1ACE  0801               	movf	1,w
 14609  1ACF  391F               	andlw	31
 14610  1AD0  0473               	iorwf	??_fill_standby_settings+1,w
 14611  1AD1  00F4               	movwf	??_fill_standby_settings+2
 14612  1AD2  0875               	movf	fill_standby_settings@reg_data,w
 14613  1AD3  0086               	movwf	6
 14614  1AD4  0187               	clrf	7
 14615  1AD5  0874               	movf	??_fill_standby_settings+2,w
 14616  1AD6  0081               	movwf	1
 14617  1AD7  0008               	return
 14618  1AD8                     __end_of_fill_standby_settings:	
 14619                           
 14620                           	psect	text47
 14621  1AA0                     __ptext47:	
 14622 ;; *************** function _fill_filter_settings *****************
 14623 ;; Defined at:
 14624 ;;		line 892 in file "BME280_driver/bme280.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;  reg_data        1    wreg     PTR unsigned char 
 14627 ;;		 -> set_filter_standby_settings@reg_data(1), 
 14628 ;;  settings        2    0[COMMON] PTR const struct bme280_
 14629 ;;		 -> EnvSensor(51), put_device_to_sleep@settings(5), 
 14630 ;; Auto vars:     Size  Location     Type
 14631 ;;  reg_data        1    5[COMMON] PTR unsigned char 
 14632 ;;		 -> set_filter_standby_settings@reg_data(1), 
 14633 ;; Return value:  Size  Location     Type
 14634 ;;                  1    wreg      void 
 14635 ;; Registers used:
 14636 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14637 ;; Tracked objects:
 14638 ;;		On entry : 1F/0
 14639 ;;		On exit  : 1F/0
 14640 ;;		Unchanged: 1F/0
 14641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14642 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14645 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14646 ;;Total ram usage:        6 bytes
 14647 ;; Hardware stack levels used:    1
 14648 ;; Hardware stack levels required when called:    3
 14649 ;; This function calls:
 14650 ;;		Nothing
 14651 ;; This function is called by:
 14652 ;;		_set_filter_standby_settings
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           
 14657                           ;psect for function _fill_filter_settings
 14658  1AA0                     _fill_filter_settings:	
 14659                           
 14660                           ;incstack = 0
 14661                           ; Regs used in _fill_filter_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14662                           ;fill_filter_settings@reg_data stored from wreg
 14663  1AA0  00F5               	movwf	fill_filter_settings@reg_data
 14664                           
 14665                           ;BME280_driver/bme280.c: 892: static void fill_filter_settings(uint8_t *reg_data, const 
      +                          struct bme280_settings *settings);BME280_driver/bme280.c: 893: {;BME280_driver/bme280.c:
      +                           894:     *reg_data = ((*reg_data & ~( 0x1C)) | ((settings->filter << 0x02) & 0x1C));
 14666  1AA1  0870               	movf	fill_filter_settings@settings,w
 14667  1AA2  0086               	movwf	6
 14668  1AA3  0871               	movf	fill_filter_settings@settings+1,w
 14669  1AA4  0087               	movwf	7
 14670  1AA5  3143               	addfsr 1,3
 14671  1AA6  0801               	movf	1,w
 14672  1AA7  00F2               	movwf	??_fill_filter_settings
 14673  1AA8  3002               	movlw	2
 14674  1AA9                     u4415:	
 14675  1AA9  35F2               	lslf	??_fill_filter_settings,f
 14676  1AAA  0B89               	decfsz	9,f
 14677  1AAB  2AA9               	goto	u4415
 14678  1AAC  301C               	movlw	28
 14679  1AAD  0572               	andwf	??_fill_filter_settings,w
 14680  1AAE  00F3               	movwf	??_fill_filter_settings+1
 14681  1AAF  0875               	movf	fill_filter_settings@reg_data,w
 14682  1AB0  0086               	movwf	6
 14683  1AB1  0187               	clrf	7
 14684  1AB2  0801               	movf	1,w
 14685  1AB3  39E3               	andlw	227
 14686  1AB4  0473               	iorwf	??_fill_filter_settings+1,w
 14687  1AB5  00F4               	movwf	??_fill_filter_settings+2
 14688  1AB6  0875               	movf	fill_filter_settings@reg_data,w
 14689  1AB7  0086               	movwf	6
 14690  1AB8  0187               	clrf	7
 14691  1AB9  0874               	movf	??_fill_filter_settings+2,w
 14692  1ABA  0081               	movwf	1
 14693  1ABB  0008               	return
 14694  1ABC                     __end_of_fill_filter_settings:	
 14695                           
 14696                           	psect	text48
 14697  11DB                     __ptext48:	
 14698 ;; *************** function _parse_device_settings *****************
 14699 ;; Defined at:
 14700 ;;		line 929 in file "BME280_driver/bme280.c"
 14701 ;; Parameters:    Size  Location     Type
 14702 ;;  reg_data        1    wreg     PTR const unsigned char 
 14703 ;;		 -> put_device_to_sleep@reg_data(4), bme280_get_sensor_settings@reg_data(4), 
 14704 ;;  settings        1    0[COMMON] PTR struct bme280_settin
 14705 ;;		 -> put_device_to_sleep@settings(5), 
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;  reg_data        1    3[COMMON] PTR const unsigned char 
 14708 ;;		 -> put_device_to_sleep@reg_data(4), bme280_get_sensor_settings@reg_data(4), 
 14709 ;; Return value:  Size  Location     Type
 14710 ;;                  1    wreg      void 
 14711 ;; Registers used:
 14712 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14713 ;; Tracked objects:
 14714 ;;		On entry : 1F/1
 14715 ;;		On exit  : 1F/1
 14716 ;;		Unchanged: 1F/0
 14717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14718 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;Total ram usage:        4 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; Hardware stack levels required when called:    3
 14725 ;; This function calls:
 14726 ;;		Nothing
 14727 ;; This function is called by:
 14728 ;;		_put_device_to_sleep
 14729 ;; This function uses a non-reentrant model
 14730 ;;
 14731                           
 14732                           
 14733                           ;psect for function _parse_device_settings
 14734  11DB                     _parse_device_settings:	
 14735                           
 14736                           ;incstack = 0
 14737                           ; Regs used in _parse_device_settings: [wreg+fsr1l+fsr1h+status,2+status,0]
 14738                           ;parse_device_settings@reg_data stored from wreg
 14739  11DB  00F3               	movwf	parse_device_settings@reg_data
 14740                           
 14741                           ;BME280_driver/bme280.c: 929: static void parse_device_settings(const uint8_t *reg_data,
      +                           struct bme280_settings *settings);BME280_driver/bme280.c: 930: {;BME280_driver/bme280.c
      +                          : 931:     settings->osr_h = (reg_data[0] & ( 0x07));
 14742  11DC  0873               	movf	parse_device_settings@reg_data,w
 14743  11DD  0086               	movwf	6
 14744  11DE  0187               	clrf	7
 14745  11DF  0801               	movf	1,w
 14746  11E0  3907               	andlw	7
 14747  11E1  00F1               	movwf	??_parse_device_settings
 14748  11E2  0870               	movf	parse_device_settings@settings,w
 14749  11E3  3E02               	addlw	2
 14750  11E4  0086               	movwf	6
 14751  11E5  0187               	clrf	7
 14752  11E6  0871               	movf	??_parse_device_settings,w
 14753  11E7  0081               	movwf	1
 14754                           
 14755                           ;BME280_driver/bme280.c: 932:     settings->osr_p = ((reg_data[2] & ( 0x1C)) >> ( 0x02))
      +                          ;
 14756  11E8  0873               	movf	parse_device_settings@reg_data,w
 14757  11E9  3E02               	addlw	2
 14758  11EA  0086               	movwf	6
 14759  11EB  0187               	clrf	7
 14760  11EC  0801               	movf	1,w
 14761  11ED  00F1               	movwf	??_parse_device_settings
 14762  11EE  3002               	movlw	2
 14763  11EF                     u4495:	
 14764  11EF  36F1               	lsrf	??_parse_device_settings,f
 14765  11F0  0B89               	decfsz	9,f
 14766  11F1  29EF               	goto	u4495
 14767  11F2  0871               	movf	??_parse_device_settings,w
 14768  11F3  3907               	andlw	7
 14769  11F4  00F2               	movwf	??_parse_device_settings+1
 14770  11F5  0870               	movf	parse_device_settings@settings,w
 14771  11F6  0086               	movwf	6
 14772  11F7  0187               	clrf	7
 14773  11F8  0872               	movf	??_parse_device_settings+1,w
 14774  11F9  0081               	movwf	1
 14775                           
 14776                           ;BME280_driver/bme280.c: 933:     settings->osr_t = ((reg_data[2] & ( 0xE0)) >> ( 0x05))
      +                          ;
 14777  11FA  0873               	movf	parse_device_settings@reg_data,w
 14778  11FB  3E02               	addlw	2
 14779  11FC  0086               	movwf	6
 14780  11FD  0187               	clrf	7
 14781  11FE  0801               	movf	1,w
 14782  11FF  00F1               	movwf	??_parse_device_settings
 14783  1200  3005               	movlw	5
 14784  1201                     u4505:	
 14785  1201  36F1               	lsrf	??_parse_device_settings,f
 14786  1202  0B89               	decfsz	9,f
 14787  1203  2A01               	goto	u4505
 14788  1204  0871               	movf	??_parse_device_settings,w
 14789  1205  3907               	andlw	7
 14790  1206  00F2               	movwf	??_parse_device_settings+1
 14791  1207  0A70               	incf	parse_device_settings@settings,w
 14792  1208  0086               	movwf	6
 14793  1209  0187               	clrf	7
 14794  120A  0872               	movf	??_parse_device_settings+1,w
 14795  120B  0081               	movwf	1
 14796                           
 14797                           ;BME280_driver/bme280.c: 934:     settings->filter = ((reg_data[3] & ( 0x1C)) >> ( 0x02)
      +                          );
 14798  120C  0873               	movf	parse_device_settings@reg_data,w
 14799  120D  3E03               	addlw	3
 14800  120E  0086               	movwf	6
 14801  120F  0187               	clrf	7
 14802  1210  0801               	movf	1,w
 14803  1211  00F1               	movwf	??_parse_device_settings
 14804  1212  3002               	movlw	2
 14805  1213                     u4515:	
 14806  1213  36F1               	lsrf	??_parse_device_settings,f
 14807  1214  0B89               	decfsz	9,f
 14808  1215  2A13               	goto	u4515
 14809  1216  0871               	movf	??_parse_device_settings,w
 14810  1217  3907               	andlw	7
 14811  1218  00F2               	movwf	??_parse_device_settings+1
 14812  1219  0870               	movf	parse_device_settings@settings,w
 14813  121A  3E03               	addlw	3
 14814  121B  0086               	movwf	6
 14815  121C  0187               	clrf	7
 14816  121D  0872               	movf	??_parse_device_settings+1,w
 14817  121E  0081               	movwf	1
 14818                           
 14819                           ;BME280_driver/bme280.c: 935:     settings->standby_time = ((reg_data[3] & ( 0xE0)) >> (
      +                           0x05));
 14820  121F  0873               	movf	parse_device_settings@reg_data,w
 14821  1220  3E03               	addlw	3
 14822  1221  0086               	movwf	6
 14823  1222  0187               	clrf	7
 14824  1223  0801               	movf	1,w
 14825  1224  00F1               	movwf	??_parse_device_settings
 14826  1225  3005               	movlw	5
 14827  1226                     u4525:	
 14828  1226  36F1               	lsrf	??_parse_device_settings,f
 14829  1227  0B89               	decfsz	9,f
 14830  1228  2A26               	goto	u4525
 14831  1229  0871               	movf	??_parse_device_settings,w
 14832  122A  3907               	andlw	7
 14833  122B  00F2               	movwf	??_parse_device_settings+1
 14834  122C  0870               	movf	parse_device_settings@settings,w
 14835  122D  3E04               	addlw	4
 14836  122E  0086               	movwf	6
 14837  122F  0187               	clrf	7
 14838  1230  0872               	movf	??_parse_device_settings+1,w
 14839  1231  0081               	movwf	1
 14840  1232  0008               	return
 14841  1233                     __end_of_parse_device_settings:	
 14842                           
 14843                           	psect	text49
 14844  1C0C                     __ptext49:	
 14845 ;; *************** function _bme280_get_sensor_mode *****************
 14846 ;; Defined at:
 14847 ;;		line 610 in file "BME280_driver/bme280.c"
 14848 ;; Parameters:    Size  Location     Type
 14849 ;;  sensor_mode     1    wreg     PTR unsigned char 
 14850 ;;		 -> bme280_set_sensor_mode@last_set_mode(1), bme280_set_sensor_settings@sensor_mode(1), 
 14851 ;;  dev             1   36[BANK0 ] PTR const struct bme280_
 14852 ;;		 -> EnvSensor(51), 
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;  sensor_mode     1   41[BANK0 ] PTR unsigned char 
 14855 ;;		 -> bme280_set_sensor_mode@last_set_mode(1), bme280_set_sensor_settings@sensor_mode(1), 
 14856 ;;  rslt            1   40[BANK0 ] char 
 14857 ;; Return value:  Size  Location     Type
 14858 ;;                  1    wreg      char 
 14859 ;; Registers used:
 14860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14861 ;; Tracked objects:
 14862 ;;		On entry : 1F/0
 14863 ;;		On exit  : 1F/0
 14864 ;;		Unchanged: 0/0
 14865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14866 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;Total ram usage:        6 bytes
 14871 ;; Hardware stack levels used:    1
 14872 ;; Hardware stack levels required when called:   10
 14873 ;; This function calls:
 14874 ;;		_bme280_get_regs
 14875 ;;		_null_ptr_check
 14876 ;; This function is called by:
 14877 ;;		_bme280_set_sensor_settings
 14878 ;;		_bme280_set_sensor_mode
 14879 ;; This function uses a non-reentrant model
 14880 ;;
 14881                           
 14882                           
 14883                           ;psect for function _bme280_get_sensor_mode
 14884  1C0C                     _bme280_get_sensor_mode:	
 14885                           
 14886                           ;incstack = 0
 14887                           ; Regs used in _bme280_get_sensor_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14888                           ;bme280_get_sensor_mode@sensor_mode stored from wreg
 14889  1C0C  00C9               	movwf	bme280_get_sensor_mode@sensor_mode
 14890                           
 14891                           ;BME280_driver/bme280.c: 610: int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const 
      +                          struct bme280_dev *dev);BME280_driver/bme280.c: 611: {;BME280_driver/bme280.c: 612:     
      +                          int8_t rslt;;BME280_driver/bme280.c: 615:     rslt = null_ptr_check(dev);
 14892  1C0D  0844               	movf	bme280_get_sensor_mode@dev,w
 14893  1C0E  319B  2317  319C   	fcall	_null_ptr_check
 14894  1C11  0020               	movlb	0	; select bank0
 14895  1C12  00C5               	movwf	??_bme280_get_sensor_mode
 14896  1C13  0845               	movf	??_bme280_get_sensor_mode,w
 14897  1C14  00C8               	movwf	bme280_get_sensor_mode@rslt
 14898                           
 14899                           ;BME280_driver/bme280.c: 616:     if (rslt == 0)
 14900  1C15  0848               	movf	bme280_get_sensor_mode@rslt,w
 14901  1C16  1D03               	btfss	3,2
 14902  1C17  2C35               	goto	l4222
 14903                           
 14904                           ;BME280_driver/bme280.c: 617:     {;BME280_driver/bme280.c: 619:         rslt = bme280_g
      +                          et_regs(0xF4, sensor_mode, 1, dev);
 14905  1C18  0849               	movf	bme280_get_sensor_mode@sensor_mode,w
 14906  1C19  00C5               	movwf	??_bme280_get_sensor_mode
 14907  1C1A  0845               	movf	??_bme280_get_sensor_mode,w
 14908  1C1B  00BB               	movwf	bme280_get_regs@reg_data
 14909  1C1C  3001               	movlw	1
 14910  1C1D  00BC               	movwf	bme280_get_regs@len
 14911  1C1E  3000               	movlw	0
 14912  1C1F  00BD               	movwf	bme280_get_regs@len+1
 14913  1C20  0844               	movf	bme280_get_sensor_mode@dev,w
 14914  1C21  00C6               	movwf	??_bme280_get_sensor_mode+1
 14915  1C22  0846               	movf	??_bme280_get_sensor_mode+1,w
 14916  1C23  00BE               	movwf	bme280_get_regs@dev
 14917  1C24  30F4               	movlw	244
 14918  1C25  319E  2662         	fcall	_bme280_get_regs
 14919  1C27  00C7               	movwf	??_bme280_get_sensor_mode+2
 14920  1C28  0847               	movf	??_bme280_get_sensor_mode+2,w
 14921  1C29  00C8               	movwf	bme280_get_sensor_mode@rslt
 14922                           
 14923                           ;BME280_driver/bme280.c: 622:         *sensor_mode = (*sensor_mode & ( 0x03));
 14924  1C2A  0849               	movf	bme280_get_sensor_mode@sensor_mode,w
 14925  1C2B  0086               	movwf	6
 14926  1C2C  0187               	clrf	7
 14927  1C2D  0801               	movf	1,w
 14928  1C2E  3903               	andlw	3
 14929  1C2F  00C5               	movwf	??_bme280_get_sensor_mode
 14930  1C30  0849               	movf	bme280_get_sensor_mode@sensor_mode,w
 14931  1C31  0086               	movwf	6
 14932  1C32  0187               	clrf	7
 14933  1C33  0845               	movf	??_bme280_get_sensor_mode,w
 14934  1C34  0081               	movwf	1
 14935  1C35                     l4222:	
 14936                           
 14937                           ;BME280_driver/bme280.c: 625:     return rslt;
 14938  1C35  0848               	movf	bme280_get_sensor_mode@rslt,w
 14939  1C36  0008               	return
 14940  1C37                     __end_of_bme280_get_sensor_mode:	
 14941                           
 14942                           	psect	text50
 14943  12F3                     __ptext50:	
 14944 ;; *************** function _bme280_init *****************
 14945 ;; Defined at:
 14946 ;;		line 357 in file "BME280_driver/bme280.c"
 14947 ;; Parameters:    Size  Location     Type
 14948 ;;  dev             1    wreg     PTR struct bme280_dev
 14949 ;;		 -> EnvSensor(51), 
 14950 ;; Auto vars:     Size  Location     Type
 14951 ;;  dev             1   74[BANK0 ] PTR struct bme280_dev
 14952 ;;		 -> EnvSensor(51), 
 14953 ;;  rslt            1   73[BANK0 ] char 
 14954 ;;  chip_id         1   72[BANK0 ] unsigned char 
 14955 ;;  try_count       1   71[BANK0 ] unsigned char 
 14956 ;; Return value:  Size  Location     Type
 14957 ;;                  1    wreg      char 
 14958 ;; Registers used:
 14959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14960 ;; Tracked objects:
 14961 ;;		On entry : 1F/3
 14962 ;;		On exit  : 1F/0
 14963 ;;		Unchanged: 0/0
 14964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;Total ram usage:        7 bytes
 14970 ;; Hardware stack levels used:    1
 14971 ;; Hardware stack levels required when called:   11
 14972 ;; This function calls:
 14973 ;;		_Sleep
 14974 ;;		_bme280_get_regs
 14975 ;;		_bme280_soft_reset
 14976 ;;		_get_calib_data
 14977 ;;		_null_ptr_check
 14978 ;; This function is called by:
 14979 ;;		_BME280_Init
 14980 ;; This function uses a non-reentrant model
 14981 ;;
 14982                           
 14983                           
 14984                           ;psect for function _bme280_init
 14985  12F3                     _bme280_init:	
 14986                           
 14987                           ;incstack = 0
 14988                           ; Regs used in _bme280_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14989                           ;bme280_init@dev stored from wreg
 14990  12F3  0020               	movlb	0	; select bank0
 14991  12F4  00EA               	movwf	bme280_init@dev
 14992                           
 14993                           ;BME280_driver/bme280.c: 357: int8_t bme280_init(struct bme280_dev *dev);BME280_driver/b
      +                          me280.c: 358: {;BME280_driver/bme280.c: 359:     int8_t rslt;;BME280_driver/bme280.c: 36
      +                          2:     uint8_t try_count = 5;
 14994  12F5  3005               	movlw	5
 14995  12F6  00E4               	movwf	??_bme280_init
 14996  12F7  0864               	movf	??_bme280_init,w
 14997  12F8  00E7               	movwf	bme280_init@try_count
 14998                           
 14999                           ;BME280_driver/bme280.c: 363:     uint8_t chip_id = 0;
 15000  12F9  01E8               	clrf	bme280_init@chip_id
 15001                           
 15002                           ;BME280_driver/bme280.c: 366:     rslt = null_ptr_check(dev);
 15003  12FA  086A               	movf	bme280_init@dev,w
 15004  12FB  319B  2317  3192   	fcall	_null_ptr_check
 15005  12FE  0020               	movlb	0	; select bank0
 15006  12FF  00E4               	movwf	??_bme280_init
 15007  1300  0864               	movf	??_bme280_init,w
 15008  1301  00E9               	movwf	bme280_init@rslt
 15009                           
 15010                           ;BME280_driver/bme280.c: 369:     if (rslt == 0)
 15011  1302  0869               	movf	bme280_init@rslt,w
 15012  1303  1903               	btfsc	3,2
 15013  1304  2B4F               	goto	l4422
 15014  1305  2B59               	goto	l55
 15015  1306                     l4404:	
 15016                           
 15017                           ;BME280_driver/bme280.c: 372:         {;BME280_driver/bme280.c: 374:             rslt = 
      +                          bme280_get_regs(0xD0, &chip_id, 1, dev);
 15018  1306  3068               	movlw	(low (bme280_init@chip_id| 0))& (0+255)
 15019  1307  00E4               	movwf	??_bme280_init
 15020  1308  0864               	movf	??_bme280_init,w
 15021  1309  00BB               	movwf	bme280_get_regs@reg_data
 15022  130A  3001               	movlw	1
 15023  130B  00BC               	movwf	bme280_get_regs@len
 15024  130C  3000               	movlw	0
 15025  130D  00BD               	movwf	bme280_get_regs@len+1
 15026  130E  086A               	movf	bme280_init@dev,w
 15027  130F  00E5               	movwf	??_bme280_init+1
 15028  1310  0865               	movf	??_bme280_init+1,w
 15029  1311  00BE               	movwf	bme280_get_regs@dev
 15030  1312  30D0               	movlw	208
 15031  1313  319E  2662  3192   	fcall	_bme280_get_regs
 15032  1316  00E6               	movwf	??_bme280_init+2
 15033  1317  0866               	movf	??_bme280_init+2,w
 15034  1318  00E9               	movwf	bme280_init@rslt
 15035                           
 15036                           ;BME280_driver/bme280.c: 377:             if ((rslt == 0) && (chip_id == 0x60))
 15037  1319  0869               	movf	bme280_init@rslt,w
 15038  131A  1D03               	btfss	3,2
 15039  131B  2B3A               	goto	l4418
 15040  131C  3060               	movlw	96
 15041  131D  0668               	xorwf	bme280_init@chip_id,w
 15042  131E  1D03               	btfss	3,2
 15043  131F  2B3A               	goto	l4418
 15044                           
 15045                           ;BME280_driver/bme280.c: 378:             {;BME280_driver/bme280.c: 379:                
      +                           dev->chip_id = chip_id;
 15046  1320  0868               	movf	bme280_init@chip_id,w
 15047  1321  00E4               	movwf	??_bme280_init
 15048  1322  086A               	movf	bme280_init@dev,w
 15049  1323  0086               	movwf	6
 15050  1324  3001               	movlw	1	; select bank2/3
 15051  1325  0087               	movwf	7
 15052  1326  0864               	movf	??_bme280_init,w
 15053  1327  0081               	movwf	1
 15054                           
 15055                           ;BME280_driver/bme280.c: 382:                 rslt = bme280_soft_reset(dev);
 15056  1328  086A               	movf	bme280_init@dev,w
 15057  1329  319D  252F  3192   	fcall	_bme280_soft_reset
 15058  132C  00E4               	movwf	??_bme280_init
 15059  132D  0864               	movf	??_bme280_init,w
 15060  132E  00E9               	movwf	bme280_init@rslt
 15061                           
 15062                           ;BME280_driver/bme280.c: 383:                 if (rslt == 0)
 15063  132F  0869               	movf	bme280_init@rslt,w
 15064  1330  1D03               	btfss	3,2
 15065  1331  2B52               	goto	l4424
 15066                           
 15067                           ;BME280_driver/bme280.c: 384:                 {;BME280_driver/bme280.c: 386:            
      +                                   rslt = get_calib_data(dev);
 15068  1332  086A               	movf	bme280_init@dev,w
 15069  1333  319F  2770  3192   	fcall	_get_calib_data
 15070  1336  00E4               	movwf	??_bme280_init
 15071  1337  0864               	movf	??_bme280_init,w
 15072  1338  00E9               	movwf	bme280_init@rslt
 15073  1339  2B52               	goto	l4424
 15074  133A                     l4418:	
 15075                           
 15076                           ;BME280_driver/bme280.c: 392:             dev->delay_ms(1);
 15077  133A  3000               	movlw	0
 15078  133B  00F3               	movwf	Sleep@ms+3
 15079  133C  3000               	movlw	0
 15080  133D  00F2               	movwf	Sleep@ms+2
 15081  133E  3000               	movlw	0
 15082  133F  00F1               	movwf	Sleep@ms+1
 15083  1340  3001               	movlw	1
 15084  1341  00F0               	movwf	Sleep@ms
 15085  1342  086A               	movf	bme280_init@dev,w
 15086  1343  3E07               	addlw	7
 15087  1344  0086               	movwf	6
 15088  1345  3001               	movlw	1	; select bank2/3
 15089  1346  0087               	movwf	7
 15090  1347  3F41               	moviw [1]fsr1
 15091  1348  008A               	movwf	10
 15092  1349  3F40               	moviw [0]fsr1
 15093  134A  000A               	callw
 15094  134B  3192               	pagesel	$
 15095                           
 15096                           ;BME280_driver/bme280.c: 393:             --try_count;
 15097  134C  3001               	movlw	1
 15098  134D  0020               	movlb	0	; select bank0
 15099  134E  02E7               	subwf	bme280_init@try_count,f
 15100  134F                     l4422:	
 15101                           
 15102                           ;BME280_driver/bme280.c: 371:         while (try_count)
 15103  134F  0867               	movf	bme280_init@try_count,w
 15104  1350  1D03               	btfss	3,2
 15105  1351  2B06               	goto	l4404
 15106  1352                     l4424:	
 15107                           
 15108                           ;BME280_driver/bme280.c: 397:         if (!try_count)
 15109  1352  0867               	movf	bme280_init@try_count,w
 15110  1353  1D03               	btfss	3,2
 15111  1354  2B59               	goto	l55
 15112                           
 15113                           ;BME280_driver/bme280.c: 398:         {;BME280_driver/bme280.c: 399:             rslt = 
      +                          -2;
 15114  1355  30FE               	movlw	254
 15115  1356  00E4               	movwf	??_bme280_init
 15116  1357  0864               	movf	??_bme280_init,w
 15117  1358  00E9               	movwf	bme280_init@rslt
 15118  1359                     l55:	
 15119                           ;BME280_driver/bme280.c: 401:     }
 15120                           
 15121                           
 15122                           ;BME280_driver/bme280.c: 403:     return rslt;
 15123  1359  0869               	movf	bme280_init@rslt,w
 15124  135A  0008               	return
 15125  135B                     __end_of_bme280_init:	
 15126                           
 15127                           	psect	text51
 15128  1F70                     __ptext51:	
 15129 ;; *************** function _get_calib_data *****************
 15130 ;; Defined at:
 15131 ;;		line 1307 in file "BME280_driver/bme280.c"
 15132 ;; Parameters:    Size  Location     Type
 15133 ;;  dev             1    wreg     PTR struct bme280_dev
 15134 ;;		 -> EnvSensor(51), 
 15135 ;; Auto vars:     Size  Location     Type
 15136 ;;  dev             1   67[BANK0 ] PTR struct bme280_dev
 15137 ;;		 -> EnvSensor(51), 
 15138 ;;  calib_data     26   39[BANK0 ] unsigned char [26]
 15139 ;;  rslt            1   66[BANK0 ] char 
 15140 ;;  reg_addr        1    0        unsigned char 
 15141 ;; Return value:  Size  Location     Type
 15142 ;;                  1    wreg      char 
 15143 ;; Registers used:
 15144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15145 ;; Tracked objects:
 15146 ;;		On entry : 1F/0
 15147 ;;		On exit  : 1F/0
 15148 ;;		Unchanged: 0/0
 15149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15151 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15152 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;Total ram usage:       32 bytes
 15155 ;; Hardware stack levels used:    1
 15156 ;; Hardware stack levels required when called:   10
 15157 ;; This function calls:
 15158 ;;		_bme280_get_regs
 15159 ;;		_parse_humidity_calib_data
 15160 ;;		_parse_temp_press_calib_data
 15161 ;; This function is called by:
 15162 ;;		_bme280_init
 15163 ;; This function uses a non-reentrant model
 15164 ;;
 15165                           
 15166                           
 15167                           ;psect for function _get_calib_data
 15168  1F70                     _get_calib_data:	
 15169                           
 15170                           ;incstack = 0
 15171                           ; Regs used in _get_calib_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15172                           ;get_calib_data@dev stored from wreg
 15173  1F70  00E3               	movwf	get_calib_data@dev
 15174                           
 15175                           ;BME280_driver/bme280.c: 1313:     uint8_t calib_data[26] = { 0 };
 15176  1F71  3047               	movlw	low get_calib_data@calib_data
 15177  1F72  0086               	movwf	6
 15178  1F73  3000               	movlw	high get_calib_data@calib_data
 15179  1F74  0087               	movwf	7
 15180  1F75  301A               	movlw	26
 15181  1F76  00C4               	movwf	??_get_calib_data
 15182  1F77  3000               	movlw	0
 15183  1F78                     u4550:	
 15184  1F78  001E               	movwi fsr1++
 15185  1F79  0BC4               	decfsz	??_get_calib_data,f
 15186  1F7A  2F78               	goto	u4550
 15187                           
 15188                           ;BME280_driver/bme280.c: 1316:     rslt = bme280_get_regs(reg_addr, calib_data, 26, dev)
      +                          ;
 15189  1F7B  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
 15190  1F7C  00C4               	movwf	??_get_calib_data
 15191  1F7D  0844               	movf	??_get_calib_data,w
 15192  1F7E  00BB               	movwf	bme280_get_regs@reg_data
 15193  1F7F  301A               	movlw	26
 15194  1F80  00BC               	movwf	bme280_get_regs@len
 15195  1F81  3000               	movlw	0
 15196  1F82  00BD               	movwf	bme280_get_regs@len+1
 15197  1F83  0863               	movf	get_calib_data@dev,w
 15198  1F84  00C5               	movwf	??_get_calib_data+1
 15199  1F85  0845               	movf	??_get_calib_data+1,w
 15200  1F86  00BE               	movwf	bme280_get_regs@dev
 15201  1F87  3088               	movlw	136
 15202  1F88  319E  2662  319F   	fcall	_bme280_get_regs
 15203  1F8B  00C6               	movwf	??_get_calib_data+2
 15204  1F8C  0846               	movf	??_get_calib_data+2,w
 15205  1F8D  00E2               	movwf	get_calib_data@rslt
 15206                           
 15207                           ;BME280_driver/bme280.c: 1317:     if (rslt == 0)
 15208  1F8E  0862               	movf	get_calib_data@rslt,w
 15209  1F8F  1D03               	btfss	3,2
 15210  1F90  2FB6               	goto	l4210
 15211                           
 15212                           ;BME280_driver/bme280.c: 1318:     {;BME280_driver/bme280.c: 1322:         parse_temp_pr
      +                          ess_calib_data(calib_data, dev);
 15213  1F91  0863               	movf	get_calib_data@dev,w
 15214  1F92  00C4               	movwf	??_get_calib_data
 15215  1F93  0844               	movf	??_get_calib_data,w
 15216  1F94  00F0               	movwf	parse_temp_press_calib_data@dev
 15217  1F95  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
 15218  1F96  3188  20C5  319F   	fcall	_parse_temp_press_calib_data
 15219                           
 15220                           ;BME280_driver/bme280.c: 1326:         rslt = bme280_get_regs(reg_addr, calib_data, 7, d
      +                          ev);
 15221  1F99  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
 15222  1F9A  00C4               	movwf	??_get_calib_data
 15223  1F9B  0844               	movf	??_get_calib_data,w
 15224  1F9C  00BB               	movwf	bme280_get_regs@reg_data
 15225  1F9D  3007               	movlw	7
 15226  1F9E  00BC               	movwf	bme280_get_regs@len
 15227  1F9F  3000               	movlw	0
 15228  1FA0  00BD               	movwf	bme280_get_regs@len+1
 15229  1FA1  0863               	movf	get_calib_data@dev,w
 15230  1FA2  00C5               	movwf	??_get_calib_data+1
 15231  1FA3  0845               	movf	??_get_calib_data+1,w
 15232  1FA4  00BE               	movwf	bme280_get_regs@dev
 15233  1FA5  30E1               	movlw	225
 15234  1FA6  319E  2662  319F   	fcall	_bme280_get_regs
 15235  1FA9  00C6               	movwf	??_get_calib_data+2
 15236  1FAA  0846               	movf	??_get_calib_data+2,w
 15237  1FAB  00E2               	movwf	get_calib_data@rslt
 15238                           
 15239                           ;BME280_driver/bme280.c: 1327:         if (rslt == 0)
 15240  1FAC  0862               	movf	get_calib_data@rslt,w
 15241  1FAD  1D03               	btfss	3,2
 15242  1FAE  2FB6               	goto	l4210
 15243                           
 15244                           ;BME280_driver/bme280.c: 1328:         {;BME280_driver/bme280.c: 1332:             parse
      +                          _humidity_calib_data(calib_data, dev);
 15245  1FAF  0863               	movf	get_calib_data@dev,w
 15246  1FB0  00C4               	movwf	??_get_calib_data
 15247  1FB1  0844               	movf	??_get_calib_data,w
 15248  1FB2  00F0               	movwf	parse_humidity_calib_data@dev
 15249  1FB3  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
 15250  1FB4  3197  2767         	fcall	_parse_humidity_calib_data
 15251  1FB6                     l4210:	
 15252                           
 15253                           ;BME280_driver/bme280.c: 1336:     return rslt;
 15254  1FB6  0862               	movf	get_calib_data@rslt,w
 15255  1FB7  0008               	return
 15256  1FB8                     __end_of_get_calib_data:	
 15257                           
 15258                           	psect	text52
 15259  08C5                     __ptext52:	
 15260 ;; *************** function _parse_temp_press_calib_data *****************
 15261 ;; Defined at:
 15262 ;;		line 1358 in file "BME280_driver/bme280.c"
 15263 ;; Parameters:    Size  Location     Type
 15264 ;;  reg_data        1    wreg     PTR const unsigned char 
 15265 ;;		 -> get_calib_data@calib_data(26), 
 15266 ;;  dev             1    0[COMMON] PTR struct bme280_dev
 15267 ;;		 -> EnvSensor(51), 
 15268 ;; Auto vars:     Size  Location     Type
 15269 ;;  reg_data        1    3[COMMON] PTR const unsigned char 
 15270 ;;		 -> get_calib_data@calib_data(26), 
 15271 ;;  calib_data      1    2[COMMON] PTR struct bme280_calib_
 15272 ;;		 -> EnvSensor.calib_data(37), EnvSensor(51), 
 15273 ;; Return value:  Size  Location     Type
 15274 ;;                  1    wreg      void 
 15275 ;; Registers used:
 15276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15277 ;; Tracked objects:
 15278 ;;		On entry : 1F/0
 15279 ;;		On exit  : 1F/0
 15280 ;;		Unchanged: 1F/0
 15281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15282 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;Total ram usage:        4 bytes
 15287 ;; Hardware stack levels used:    1
 15288 ;; Hardware stack levels required when called:    3
 15289 ;; This function calls:
 15290 ;;		Nothing
 15291 ;; This function is called by:
 15292 ;;		_get_calib_data
 15293 ;; This function uses a non-reentrant model
 15294 ;;
 15295                           
 15296                           
 15297                           ;psect for function _parse_temp_press_calib_data
 15298  08C5                     _parse_temp_press_calib_data:	
 15299                           
 15300                           ;incstack = 0
 15301                           ; Regs used in _parse_temp_press_calib_data: [wreg-fsr1h+status,2+status,0]
 15302                           ;parse_temp_press_calib_data@reg_data stored from wreg
 15303  08C5  00F3               	movwf	parse_temp_press_calib_data@reg_data
 15304                           
 15305                           ;BME280_driver/bme280.c: 1358: static void parse_temp_press_calib_data(const uint8_t *re
      +                          g_data, struct bme280_dev *dev);BME280_driver/bme280.c: 1359: {;BME280_driver/bme280.c: 
      +                          1360:     struct bme280_calib_data *calib_data = &dev->calib_data;
 15306  08C6  0870               	movf	parse_temp_press_calib_data@dev,w
 15307  08C7  3E09               	addlw	9
 15308  08C8  00F1               	movwf	??_parse_temp_press_calib_data
 15309  08C9  0871               	movf	??_parse_temp_press_calib_data,w
 15310  08CA  00F2               	movwf	parse_temp_press_calib_data@calib_data
 15311                           
 15312                           ;BME280_driver/bme280.c: 1362:     calib_data->dig_T1 = (((uint16_t)reg_data[1] << 8) | 
      +                          (uint16_t)reg_data[0]);
 15313  08CB  0A73               	incf	parse_temp_press_calib_data@reg_data,w
 15314  08CC  0084               	movwf	4
 15315  08CD  0185               	clrf	5
 15316  08CE  0800               	movf	0,w
 15317  08CF  00F1               	movwf	??_parse_temp_press_calib_data
 15318  08D0  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15319  08D1  0084               	movwf	4
 15320  08D2  0185               	clrf	5
 15321  08D3  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15322  08D4  0086               	movwf	6
 15323  08D5  3001               	movlw	1	; select bank2/3
 15324  08D6  0087               	movwf	7
 15325  08D7  0800               	movf	0,w
 15326  08D8  3FC0               	movwi [0]fsr1
 15327  08D9  0871               	movf	??_parse_temp_press_calib_data,w
 15328  08DA  3FC1               	movwi [1]fsr1
 15329                           
 15330                           ;BME280_driver/bme280.c: 1363:     calib_data->dig_T2 = (int16_t)(((uint16_t)reg_data[3]
      +                           << 8) | (uint16_t)reg_data[2]);
 15331  08DB  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15332  08DC  3E03               	addlw	3
 15333  08DD  0084               	movwf	4
 15334  08DE  0185               	clrf	5
 15335  08DF  0800               	movf	0,w
 15336  08E0  00F1               	movwf	??_parse_temp_press_calib_data
 15337  08E1  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15338  08E2  3E02               	addlw	2
 15339  08E3  0084               	movwf	4
 15340  08E4  0185               	clrf	5
 15341  08E5  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15342  08E6  3E02               	addlw	2
 15343  08E7  0086               	movwf	6
 15344  08E8  3001               	movlw	1	; select bank2/3
 15345  08E9  0087               	movwf	7
 15346  08EA  0800               	movf	0,w
 15347  08EB  3FC0               	movwi [0]fsr1
 15348  08EC  0871               	movf	??_parse_temp_press_calib_data,w
 15349  08ED  3FC1               	movwi [1]fsr1
 15350                           
 15351                           ;BME280_driver/bme280.c: 1364:     calib_data->dig_T3 = (int16_t)(((uint16_t)reg_data[5]
      +                           << 8) | (uint16_t)reg_data[4]);
 15352  08EE  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15353  08EF  3E05               	addlw	5
 15354  08F0  0084               	movwf	4
 15355  08F1  0185               	clrf	5
 15356  08F2  0800               	movf	0,w
 15357  08F3  00F1               	movwf	??_parse_temp_press_calib_data
 15358  08F4  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15359  08F5  3E04               	addlw	4
 15360  08F6  0084               	movwf	4
 15361  08F7  0185               	clrf	5
 15362  08F8  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15363  08F9  3E04               	addlw	4
 15364  08FA  0086               	movwf	6
 15365  08FB  3001               	movlw	1	; select bank2/3
 15366  08FC  0087               	movwf	7
 15367  08FD  0800               	movf	0,w
 15368  08FE  3FC0               	movwi [0]fsr1
 15369  08FF  0871               	movf	??_parse_temp_press_calib_data,w
 15370  0900  3FC1               	movwi [1]fsr1
 15371                           
 15372                           ;BME280_driver/bme280.c: 1365:     calib_data->dig_P1 = (((uint16_t)reg_data[7] << 8) | 
      +                          (uint16_t)reg_data[6]);
 15373  0901  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15374  0902  3E07               	addlw	7
 15375  0903  0084               	movwf	4
 15376  0904  0185               	clrf	5
 15377  0905  0800               	movf	0,w
 15378  0906  00F1               	movwf	??_parse_temp_press_calib_data
 15379  0907  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15380  0908  3E06               	addlw	6
 15381  0909  0084               	movwf	4
 15382  090A  0185               	clrf	5
 15383  090B  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15384  090C  3E06               	addlw	6
 15385  090D  0086               	movwf	6
 15386  090E  3001               	movlw	1	; select bank2/3
 15387  090F  0087               	movwf	7
 15388  0910  0800               	movf	0,w
 15389  0911  3FC0               	movwi [0]fsr1
 15390  0912  0871               	movf	??_parse_temp_press_calib_data,w
 15391  0913  3FC1               	movwi [1]fsr1
 15392                           
 15393                           ;BME280_driver/bme280.c: 1366:     calib_data->dig_P2 = (int16_t)(((uint16_t)reg_data[9]
      +                           << 8) | (uint16_t)reg_data[8]);
 15394  0914  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15395  0915  3E09               	addlw	9
 15396  0916  0084               	movwf	4
 15397  0917  0185               	clrf	5
 15398  0918  0800               	movf	0,w
 15399  0919  00F1               	movwf	??_parse_temp_press_calib_data
 15400  091A  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15401  091B  3E08               	addlw	8
 15402  091C  0084               	movwf	4
 15403  091D  0185               	clrf	5
 15404  091E  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15405  091F  3E08               	addlw	8
 15406  0920  0086               	movwf	6
 15407  0921  3001               	movlw	1	; select bank2/3
 15408  0922  0087               	movwf	7
 15409  0923  0800               	movf	0,w
 15410  0924  3FC0               	movwi [0]fsr1
 15411  0925  0871               	movf	??_parse_temp_press_calib_data,w
 15412  0926  3FC1               	movwi [1]fsr1
 15413                           
 15414                           ;BME280_driver/bme280.c: 1367:     calib_data->dig_P3 = (int16_t)(((uint16_t)reg_data[11
      +                          ] << 8) | (uint16_t)reg_data[10]);
 15415  0927  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15416  0928  3E0B               	addlw	11
 15417  0929  0084               	movwf	4
 15418  092A  0185               	clrf	5
 15419  092B  0800               	movf	0,w
 15420  092C  00F1               	movwf	??_parse_temp_press_calib_data
 15421  092D  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15422  092E  3E0A               	addlw	10
 15423  092F  0084               	movwf	4
 15424  0930  0185               	clrf	5
 15425  0931  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15426  0932  3E0A               	addlw	10
 15427  0933  0086               	movwf	6
 15428  0934  3001               	movlw	1	; select bank2/3
 15429  0935  0087               	movwf	7
 15430  0936  0800               	movf	0,w
 15431  0937  3FC0               	movwi [0]fsr1
 15432  0938  0871               	movf	??_parse_temp_press_calib_data,w
 15433  0939  3FC1               	movwi [1]fsr1
 15434                           
 15435                           ;BME280_driver/bme280.c: 1368:     calib_data->dig_P4 = (int16_t)(((uint16_t)reg_data[13
      +                          ] << 8) | (uint16_t)reg_data[12]);
 15436  093A  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15437  093B  3E0D               	addlw	13
 15438  093C  0084               	movwf	4
 15439  093D  0185               	clrf	5
 15440  093E  0800               	movf	0,w
 15441  093F  00F1               	movwf	??_parse_temp_press_calib_data
 15442  0940  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15443  0941  3E0C               	addlw	12
 15444  0942  0084               	movwf	4
 15445  0943  0185               	clrf	5
 15446  0944  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15447  0945  3E0C               	addlw	12
 15448  0946  0086               	movwf	6
 15449  0947  3001               	movlw	1	; select bank2/3
 15450  0948  0087               	movwf	7
 15451  0949  0800               	movf	0,w
 15452  094A  3FC0               	movwi [0]fsr1
 15453  094B  0871               	movf	??_parse_temp_press_calib_data,w
 15454  094C  3FC1               	movwi [1]fsr1
 15455                           
 15456                           ;BME280_driver/bme280.c: 1369:     calib_data->dig_P5 = (int16_t)(((uint16_t)reg_data[15
      +                          ] << 8) | (uint16_t)reg_data[14]);
 15457  094D  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15458  094E  3E0F               	addlw	15
 15459  094F  0084               	movwf	4
 15460  0950  0185               	clrf	5
 15461  0951  0800               	movf	0,w
 15462  0952  00F1               	movwf	??_parse_temp_press_calib_data
 15463  0953  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15464  0954  3E0E               	addlw	14
 15465  0955  0084               	movwf	4
 15466  0956  0185               	clrf	5
 15467  0957  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15468  0958  3E0E               	addlw	14
 15469  0959  0086               	movwf	6
 15470  095A  3001               	movlw	1	; select bank2/3
 15471  095B  0087               	movwf	7
 15472  095C  0800               	movf	0,w
 15473  095D  3FC0               	movwi [0]fsr1
 15474  095E  0871               	movf	??_parse_temp_press_calib_data,w
 15475  095F  3FC1               	movwi [1]fsr1
 15476                           
 15477                           ;BME280_driver/bme280.c: 1370:     calib_data->dig_P6 = (int16_t)(((uint16_t)reg_data[17
      +                          ] << 8) | (uint16_t)reg_data[16]);
 15478  0960  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15479  0961  3E11               	addlw	17
 15480  0962  0084               	movwf	4
 15481  0963  0185               	clrf	5
 15482  0964  0800               	movf	0,w
 15483  0965  00F1               	movwf	??_parse_temp_press_calib_data
 15484  0966  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15485  0967  3E10               	addlw	16
 15486  0968  0084               	movwf	4
 15487  0969  0185               	clrf	5
 15488  096A  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15489  096B  3E10               	addlw	16
 15490  096C  0086               	movwf	6
 15491  096D  3001               	movlw	1	; select bank2/3
 15492  096E  0087               	movwf	7
 15493  096F  0800               	movf	0,w
 15494  0970  3FC0               	movwi [0]fsr1
 15495  0971  0871               	movf	??_parse_temp_press_calib_data,w
 15496  0972  3FC1               	movwi [1]fsr1
 15497                           
 15498                           ;BME280_driver/bme280.c: 1371:     calib_data->dig_P7 = (int16_t)(((uint16_t)reg_data[19
      +                          ] << 8) | (uint16_t)reg_data[18]);
 15499  0973  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15500  0974  3E13               	addlw	19
 15501  0975  0084               	movwf	4
 15502  0976  0185               	clrf	5
 15503  0977  0800               	movf	0,w
 15504  0978  00F1               	movwf	??_parse_temp_press_calib_data
 15505  0979  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15506  097A  3E12               	addlw	18
 15507  097B  0084               	movwf	4
 15508  097C  0185               	clrf	5
 15509  097D  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15510  097E  3E12               	addlw	18
 15511  097F  0086               	movwf	6
 15512  0980  3001               	movlw	1	; select bank2/3
 15513  0981  0087               	movwf	7
 15514  0982  0800               	movf	0,w
 15515  0983  3FC0               	movwi [0]fsr1
 15516  0984  0871               	movf	??_parse_temp_press_calib_data,w
 15517  0985  3FC1               	movwi [1]fsr1
 15518                           
 15519                           ;BME280_driver/bme280.c: 1372:     calib_data->dig_P8 = (int16_t)(((uint16_t)reg_data[21
      +                          ] << 8) | (uint16_t)reg_data[20]);
 15520  0986  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15521  0987  3E15               	addlw	21
 15522  0988  0084               	movwf	4
 15523  0989  0185               	clrf	5
 15524  098A  0800               	movf	0,w
 15525  098B  00F1               	movwf	??_parse_temp_press_calib_data
 15526  098C  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15527  098D  3E14               	addlw	20
 15528  098E  0084               	movwf	4
 15529  098F  0185               	clrf	5
 15530  0990  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15531  0991  3E14               	addlw	20
 15532  0992  0086               	movwf	6
 15533  0993  3001               	movlw	1	; select bank2/3
 15534  0994  0087               	movwf	7
 15535  0995  0800               	movf	0,w
 15536  0996  3FC0               	movwi [0]fsr1
 15537  0997  0871               	movf	??_parse_temp_press_calib_data,w
 15538  0998  3FC1               	movwi [1]fsr1
 15539                           
 15540                           ;BME280_driver/bme280.c: 1373:     calib_data->dig_P9 = (int16_t)(((uint16_t)reg_data[23
      +                          ] << 8) | (uint16_t)reg_data[22]);
 15541  0999  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15542  099A  3E17               	addlw	23
 15543  099B  0084               	movwf	4
 15544  099C  0185               	clrf	5
 15545  099D  0800               	movf	0,w
 15546  099E  00F1               	movwf	??_parse_temp_press_calib_data
 15547  099F  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15548  09A0  3E16               	addlw	22
 15549  09A1  0084               	movwf	4
 15550  09A2  0185               	clrf	5
 15551  09A3  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15552  09A4  3E16               	addlw	22
 15553  09A5  0086               	movwf	6
 15554  09A6  3001               	movlw	1	; select bank2/3
 15555  09A7  0087               	movwf	7
 15556  09A8  0800               	movf	0,w
 15557  09A9  3FC0               	movwi [0]fsr1
 15558  09AA  0871               	movf	??_parse_temp_press_calib_data,w
 15559  09AB  3FC1               	movwi [1]fsr1
 15560                           
 15561                           ;BME280_driver/bme280.c: 1374:     calib_data->dig_H1 = reg_data[25];
 15562  09AC  0873               	movf	parse_temp_press_calib_data@reg_data,w
 15563  09AD  3E19               	addlw	25
 15564  09AE  0086               	movwf	6
 15565  09AF  0187               	clrf	7
 15566  09B0  0801               	movf	1,w
 15567  09B1  00F1               	movwf	??_parse_temp_press_calib_data
 15568  09B2  0872               	movf	parse_temp_press_calib_data@calib_data,w
 15569  09B3  3E18               	addlw	24
 15570  09B4  0086               	movwf	6
 15571  09B5  3001               	movlw	1	; select bank2/3
 15572  09B6  0087               	movwf	7
 15573  09B7  0871               	movf	??_parse_temp_press_calib_data,w
 15574  09B8  0081               	movwf	1
 15575  09B9  0008               	return
 15576  09BA                     __end_of_parse_temp_press_calib_data:	
 15577                           
 15578                           	psect	text53
 15579  1767                     __ptext53:	
 15580 ;; *************** function _parse_humidity_calib_data *****************
 15581 ;; Defined at:
 15582 ;;		line 1381 in file "BME280_driver/bme280.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;  reg_data        1    wreg     PTR const unsigned char 
 15585 ;;		 -> get_calib_data@calib_data(26), 
 15586 ;;  dev             1    0[COMMON] PTR struct bme280_dev
 15587 ;;		 -> EnvSensor(51), 
 15588 ;; Auto vars:     Size  Location     Type
 15589 ;;  reg_data        1   13[COMMON] PTR const unsigned char 
 15590 ;;		 -> get_calib_data@calib_data(26), 
 15591 ;;  dig_H5_msb      2   10[COMMON] short 
 15592 ;;  dig_H5_lsb      2    8[COMMON] short 
 15593 ;;  dig_H4_msb      2    6[COMMON] short 
 15594 ;;  dig_H4_lsb      2    4[COMMON] short 
 15595 ;;  calib_data      1   12[COMMON] PTR struct bme280_calib_
 15596 ;;		 -> EnvSensor.calib_data(37), EnvSensor(51), 
 15597 ;; Return value:  Size  Location     Type
 15598 ;;                  1    wreg      void 
 15599 ;; Registers used:
 15600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15601 ;; Tracked objects:
 15602 ;;		On entry : 1F/0
 15603 ;;		On exit  : 1F/0
 15604 ;;		Unchanged: 1F/0
 15605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15606 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15607 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15608 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15609 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;Total ram usage:       14 bytes
 15611 ;; Hardware stack levels used:    1
 15612 ;; Hardware stack levels required when called:    3
 15613 ;; This function calls:
 15614 ;;		Nothing
 15615 ;; This function is called by:
 15616 ;;		_get_calib_data
 15617 ;; This function uses a non-reentrant model
 15618 ;;
 15619                           
 15620                           
 15621                           ;psect for function _parse_humidity_calib_data
 15622  1767                     _parse_humidity_calib_data:	
 15623                           
 15624                           ;incstack = 0
 15625                           ; Regs used in _parse_humidity_calib_data: [wreg-fsr1h+status,2+status,0]
 15626                           ;parse_humidity_calib_data@reg_data stored from wreg
 15627  1767  00FD               	movwf	parse_humidity_calib_data@reg_data
 15628                           
 15629                           ;BME280_driver/bme280.c: 1381: static void parse_humidity_calib_data(const uint8_t *reg_
      +                          data, struct bme280_dev *dev);BME280_driver/bme280.c: 1382: {;BME280_driver/bme280.c: 13
      +                          83:     struct bme280_calib_data *calib_data = &dev->calib_data;
 15630  1768  0870               	movf	parse_humidity_calib_data@dev,w
 15631  1769  3E09               	addlw	9
 15632  176A  00F1               	movwf	??_parse_humidity_calib_data
 15633  176B  0871               	movf	??_parse_humidity_calib_data,w
 15634  176C  00FC               	movwf	parse_humidity_calib_data@calib_data
 15635                           
 15636                           ;BME280_driver/bme280.c: 1384:     int16_t dig_H4_lsb;;BME280_driver/bme280.c: 1385:    
      +                           int16_t dig_H4_msb;;BME280_driver/bme280.c: 1386:     int16_t dig_H5_lsb;;BME280_driver
      +                          /bme280.c: 1387:     int16_t dig_H5_msb;;BME280_driver/bme280.c: 1389:     calib_data->d
      +                          ig_H2 = (int16_t)(((uint16_t)reg_data[1] << 8) | (uint16_t)reg_data[0]);
 15637  176D  0A7D               	incf	parse_humidity_calib_data@reg_data,w
 15638  176E  0084               	movwf	4
 15639  176F  0185               	clrf	5
 15640  1770  0800               	movf	0,w
 15641  1771  00F1               	movwf	??_parse_humidity_calib_data
 15642  1772  087D               	movf	parse_humidity_calib_data@reg_data,w
 15643  1773  0084               	movwf	4
 15644  1774  0185               	clrf	5
 15645  1775  087C               	movf	parse_humidity_calib_data@calib_data,w
 15646  1776  3E19               	addlw	25
 15647  1777  0086               	movwf	6
 15648  1778  3001               	movlw	1	; select bank2/3
 15649  1779  0087               	movwf	7
 15650  177A  0800               	movf	0,w
 15651  177B  3FC0               	movwi [0]fsr1
 15652  177C  0871               	movf	??_parse_humidity_calib_data,w
 15653  177D  3FC1               	movwi [1]fsr1
 15654                           
 15655                           ;BME280_driver/bme280.c: 1390:     calib_data->dig_H3 = reg_data[2];
 15656  177E  087D               	movf	parse_humidity_calib_data@reg_data,w
 15657  177F  3E02               	addlw	2
 15658  1780  0086               	movwf	6
 15659  1781  0187               	clrf	7
 15660  1782  0801               	movf	1,w
 15661  1783  00F1               	movwf	??_parse_humidity_calib_data
 15662  1784  087C               	movf	parse_humidity_calib_data@calib_data,w
 15663  1785  3E1B               	addlw	27
 15664  1786  0086               	movwf	6
 15665  1787  3001               	movlw	1	; select bank2/3
 15666  1788  0087               	movwf	7
 15667  1789  0871               	movf	??_parse_humidity_calib_data,w
 15668  178A  0081               	movwf	1
 15669                           
 15670                           ;BME280_driver/bme280.c: 1391:     dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 15671  178B  087D               	movf	parse_humidity_calib_data@reg_data,w
 15672  178C  3E03               	addlw	3
 15673  178D  0086               	movwf	6
 15674  178E  0187               	clrf	7
 15675  178F  0801               	movf	1,w
 15676  1790  00F1               	movwf	??_parse_humidity_calib_data
 15677  1791  01F2               	clrf	??_parse_humidity_calib_data+1
 15678  1792  1BF1               	btfsc	??_parse_humidity_calib_data,7
 15679  1793  03F2               	decf	??_parse_humidity_calib_data+1,f
 15680  1794  0EF1               	swapf	??_parse_humidity_calib_data,f
 15681  1795  0EF2               	swapf	??_parse_humidity_calib_data+1,f
 15682  1796  30F0               	movlw	240
 15683  1797  05F2               	andwf	??_parse_humidity_calib_data+1,f
 15684  1798  0871               	movf	??_parse_humidity_calib_data,w
 15685  1799  390F               	andlw	15
 15686  179A  04F2               	iorwf	??_parse_humidity_calib_data+1,f
 15687  179B  30F0               	movlw	240
 15688  179C  05F1               	andwf	??_parse_humidity_calib_data,f
 15689  179D  0871               	movf	??_parse_humidity_calib_data,w
 15690  179E  00F6               	movwf	parse_humidity_calib_data@dig_H4_msb
 15691  179F  0872               	movf	??_parse_humidity_calib_data+1,w
 15692  17A0  00F7               	movwf	parse_humidity_calib_data@dig_H4_msb+1
 15693                           
 15694                           ;BME280_driver/bme280.c: 1392:     dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 15695  17A1  087D               	movf	parse_humidity_calib_data@reg_data,w
 15696  17A2  3E04               	addlw	4
 15697  17A3  0086               	movwf	6
 15698  17A4  0187               	clrf	7
 15699  17A5  0801               	movf	1,w
 15700  17A6  390F               	andlw	15
 15701  17A7  00F1               	movwf	??_parse_humidity_calib_data
 15702  17A8  01F2               	clrf	??_parse_humidity_calib_data+1
 15703  17A9  0871               	movf	??_parse_humidity_calib_data,w
 15704  17AA  00F4               	movwf	parse_humidity_calib_data@dig_H4_lsb
 15705  17AB  0872               	movf	??_parse_humidity_calib_data+1,w
 15706  17AC  00F5               	movwf	parse_humidity_calib_data@dig_H4_lsb+1
 15707                           
 15708                           ;BME280_driver/bme280.c: 1393:     calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 15709  17AD  0874               	movf	parse_humidity_calib_data@dig_H4_lsb,w
 15710  17AE  0476               	iorwf	parse_humidity_calib_data@dig_H4_msb,w
 15711  17AF  00F1               	movwf	??_parse_humidity_calib_data
 15712  17B0  0875               	movf	parse_humidity_calib_data@dig_H4_lsb+1,w
 15713  17B1  0477               	iorwf	parse_humidity_calib_data@dig_H4_msb+1,w
 15714  17B2  00F2               	movwf	??_parse_humidity_calib_data+1
 15715  17B3  087C               	movf	parse_humidity_calib_data@calib_data,w
 15716  17B4  3E1C               	addlw	28
 15717  17B5  0086               	movwf	6
 15718  17B6  3001               	movlw	1	; select bank2/3
 15719  17B7  0087               	movwf	7
 15720  17B8  0871               	movf	??_parse_humidity_calib_data,w
 15721  17B9  3FC0               	movwi [0]fsr1
 15722  17BA  0872               	movf	??_parse_humidity_calib_data+1,w
 15723  17BB  3FC1               	movwi [1]fsr1
 15724                           
 15725                           ;BME280_driver/bme280.c: 1394:     dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 15726  17BC  087D               	movf	parse_humidity_calib_data@reg_data,w
 15727  17BD  3E05               	addlw	5
 15728  17BE  0086               	movwf	6
 15729  17BF  0187               	clrf	7
 15730  17C0  0801               	movf	1,w
 15731  17C1  00F1               	movwf	??_parse_humidity_calib_data
 15732  17C2  01F2               	clrf	??_parse_humidity_calib_data+1
 15733  17C3  1BF1               	btfsc	??_parse_humidity_calib_data,7
 15734  17C4  03F2               	decf	??_parse_humidity_calib_data+1,f
 15735  17C5  0EF1               	swapf	??_parse_humidity_calib_data,f
 15736  17C6  0EF2               	swapf	??_parse_humidity_calib_data+1,f
 15737  17C7  30F0               	movlw	240
 15738  17C8  05F2               	andwf	??_parse_humidity_calib_data+1,f
 15739  17C9  0871               	movf	??_parse_humidity_calib_data,w
 15740  17CA  390F               	andlw	15
 15741  17CB  04F2               	iorwf	??_parse_humidity_calib_data+1,f
 15742  17CC  30F0               	movlw	240
 15743  17CD  05F1               	andwf	??_parse_humidity_calib_data,f
 15744  17CE  0871               	movf	??_parse_humidity_calib_data,w
 15745  17CF  00FA               	movwf	parse_humidity_calib_data@dig_H5_msb
 15746  17D0  0872               	movf	??_parse_humidity_calib_data+1,w
 15747  17D1  00FB               	movwf	parse_humidity_calib_data@dig_H5_msb+1
 15748                           
 15749                           ;BME280_driver/bme280.c: 1395:     dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 15750  17D2  087D               	movf	parse_humidity_calib_data@reg_data,w
 15751  17D3  3E04               	addlw	4
 15752  17D4  0086               	movwf	6
 15753  17D5  0187               	clrf	7
 15754  17D6  0801               	movf	1,w
 15755  17D7  00F1               	movwf	??_parse_humidity_calib_data
 15756  17D8  3004               	movlw	4
 15757  17D9                     u4545:	
 15758  17D9  36F1               	lsrf	??_parse_humidity_calib_data,f
 15759  17DA  0B89               	decfsz	9,f
 15760  17DB  2FD9               	goto	u4545
 15761  17DC  0871               	movf	??_parse_humidity_calib_data,w
 15762  17DD  00F2               	movwf	??_parse_humidity_calib_data+1
 15763  17DE  01F3               	clrf	??_parse_humidity_calib_data+2
 15764  17DF  0872               	movf	??_parse_humidity_calib_data+1,w
 15765  17E0  00F8               	movwf	parse_humidity_calib_data@dig_H5_lsb
 15766  17E1  0873               	movf	??_parse_humidity_calib_data+2,w
 15767  17E2  00F9               	movwf	parse_humidity_calib_data@dig_H5_lsb+1
 15768                           
 15769                           ;BME280_driver/bme280.c: 1396:     calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 15770  17E3  0878               	movf	parse_humidity_calib_data@dig_H5_lsb,w
 15771  17E4  047A               	iorwf	parse_humidity_calib_data@dig_H5_msb,w
 15772  17E5  00F1               	movwf	??_parse_humidity_calib_data
 15773  17E6  0879               	movf	parse_humidity_calib_data@dig_H5_lsb+1,w
 15774  17E7  047B               	iorwf	parse_humidity_calib_data@dig_H5_msb+1,w
 15775  17E8  00F2               	movwf	??_parse_humidity_calib_data+1
 15776  17E9  087C               	movf	parse_humidity_calib_data@calib_data,w
 15777  17EA  3E1E               	addlw	30
 15778  17EB  0086               	movwf	6
 15779  17EC  3001               	movlw	1	; select bank2/3
 15780  17ED  0087               	movwf	7
 15781  17EE  0871               	movf	??_parse_humidity_calib_data,w
 15782  17EF  3FC0               	movwi [0]fsr1
 15783  17F0  0872               	movf	??_parse_humidity_calib_data+1,w
 15784  17F1  3FC1               	movwi [1]fsr1
 15785                           
 15786                           ;BME280_driver/bme280.c: 1397:     calib_data->dig_H6 = (int8_t)reg_data[6];
 15787  17F2  087D               	movf	parse_humidity_calib_data@reg_data,w
 15788  17F3  3E06               	addlw	6
 15789  17F4  0086               	movwf	6
 15790  17F5  0187               	clrf	7
 15791  17F6  0801               	movf	1,w
 15792  17F7  00F1               	movwf	??_parse_humidity_calib_data
 15793  17F8  087C               	movf	parse_humidity_calib_data@calib_data,w
 15794  17F9  3E20               	addlw	32
 15795  17FA  0086               	movwf	6
 15796  17FB  3001               	movlw	1	; select bank2/3
 15797  17FC  0087               	movwf	7
 15798  17FD  0871               	movf	??_parse_humidity_calib_data,w
 15799  17FE  0081               	movwf	1
 15800  17FF  0008               	return
 15801  1800                     __end_of_parse_humidity_calib_data:	
 15802                           
 15803                           	psect	text54
 15804  1E62                     __ptext54:	
 15805 ;; *************** function _bme280_get_regs *****************
 15806 ;; Defined at:
 15807 ;;		line 409 in file "BME280_driver/bme280.c"
 15808 ;; Parameters:    Size  Location     Type
 15809 ;;  reg_addr        1    wreg     unsigned char 
 15810 ;;  reg_data        1   27[BANK0 ] PTR unsigned char 
 15811 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
 15812 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
 15813 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
 15814 ;;  len             2   28[BANK0 ] unsigned short 
 15815 ;;  dev             1   30[BANK0 ] PTR const struct bme280_
 15816 ;;		 -> EnvSensor(51), 
 15817 ;; Auto vars:     Size  Location     Type
 15818 ;;  reg_addr        1   34[BANK0 ] unsigned char 
 15819 ;;  rslt            1   35[BANK0 ] char 
 15820 ;; Return value:  Size  Location     Type
 15821 ;;                  1    wreg      char 
 15822 ;; Registers used:
 15823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15824 ;; Tracked objects:
 15825 ;;		On entry : 1F/0
 15826 ;;		On exit  : 1F/0
 15827 ;;		Unchanged: 0/0
 15828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15829 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15830 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15831 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15832 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15833 ;;Total ram usage:        9 bytes
 15834 ;; Hardware stack levels used:    1
 15835 ;; Hardware stack levels required when called:    9
 15836 ;; This function calls:
 15837 ;;		_ReadEnvSensor
 15838 ;;		_null_ptr_check
 15839 ;; This function is called by:
 15840 ;;		_bme280_init
 15841 ;;		_bme280_get_sensor_mode
 15842 ;;		_bme280_get_sensor_data
 15843 ;;		_set_osr_humidity_settings
 15844 ;;		_set_osr_press_temp_settings
 15845 ;;		_set_filter_standby_settings
 15846 ;;		_write_power_mode
 15847 ;;		_put_device_to_sleep
 15848 ;;		_get_calib_data
 15849 ;; This function uses a non-reentrant model
 15850 ;;
 15851                           
 15852                           
 15853                           ;psect for function _bme280_get_regs
 15854  1E62                     _bme280_get_regs:	
 15855                           
 15856                           ;incstack = 0
 15857                           ; Regs used in _bme280_get_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15858                           ;bme280_get_regs@reg_addr stored from wreg
 15859  1E62  00C2               	movwf	bme280_get_regs@reg_addr
 15860                           
 15861                           ;BME280_driver/bme280.c: 409: int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data
      +                          , uint16_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 410: {;BME280_driv
      +                          er/bme280.c: 411:     int8_t rslt;;BME280_driver/bme280.c: 414:     rslt = null_ptr_chec
      +                          k(dev);
 15862  1E63  083E               	movf	bme280_get_regs@dev,w
 15863  1E64  319B  2317  319E   	fcall	_null_ptr_check
 15864  1E67  0020               	movlb	0	; select bank0
 15865  1E68  00BF               	movwf	??_bme280_get_regs
 15866  1E69  083F               	movf	??_bme280_get_regs,w
 15867  1E6A  00C3               	movwf	bme280_get_regs@rslt
 15868                           
 15869                           ;BME280_driver/bme280.c: 417:     if (rslt == 0)
 15870  1E6B  0843               	movf	bme280_get_regs@rslt,w
 15871  1E6C  1D03               	btfss	3,2
 15872  1E6D  2EA2               	goto	l65
 15873                           
 15874                           ;BME280_driver/bme280.c: 418:     {;BME280_driver/bme280.c: 420:         if (dev->intf !
      +                          = BME280_I2C_INTF)
 15875  1E6E  083E               	movf	bme280_get_regs@dev,w
 15876  1E6F  3E02               	addlw	2
 15877  1E70  0086               	movwf	6
 15878  1E71  3001               	movlw	1	; select bank2/3
 15879  1E72  0087               	movwf	7
 15880  1E73  0301               	decf	1,w
 15881  1E74  1903               	btfsc	3,2
 15882  1E75  2E7B               	goto	l3988
 15883                           
 15884                           ;BME280_driver/bme280.c: 421:         {;BME280_driver/bme280.c: 422:             reg_add
      +                          r = reg_addr | 0x80;
 15885  1E76  0842               	movf	bme280_get_regs@reg_addr,w
 15886  1E77  3880               	iorlw	128
 15887  1E78  00BF               	movwf	??_bme280_get_regs
 15888  1E79  083F               	movf	??_bme280_get_regs,w
 15889  1E7A  00C2               	movwf	bme280_get_regs@reg_addr
 15890  1E7B                     l3988:	
 15891                           
 15892                           ;BME280_driver/bme280.c: 426:         rslt = dev->read(dev->dev_id, reg_addr, reg_data, 
      +                          len);
 15893  1E7B  083E               	movf	bme280_get_regs@dev,w
 15894  1E7C  0086               	movwf	6
 15895  1E7D  3001               	movlw	1	; select bank2/3
 15896  1E7E  0087               	movwf	7
 15897  1E7F  3001               	movlw	1	; select bank2/3
 15898  1E80  3F41               	moviw [1]fsr1
 15899  1E81  00AF               	movwf	ReadEnvSensor@dev_id
 15900  1E82  0842               	movf	bme280_get_regs@reg_addr,w
 15901  1E83  00BF               	movwf	??_bme280_get_regs
 15902  1E84  083F               	movf	??_bme280_get_regs,w
 15903  1E85  00B0               	movwf	ReadEnvSensor@reg_addr
 15904  1E86  083B               	movf	bme280_get_regs@reg_data,w
 15905  1E87  00C0               	movwf	??_bme280_get_regs+1
 15906  1E88  0840               	movf	??_bme280_get_regs+1,w
 15907  1E89  00B1               	movwf	ReadEnvSensor@reg_data
 15908  1E8A  083D               	movf	bme280_get_regs@len+1,w
 15909  1E8B  00B3               	movwf	ReadEnvSensor@len+1
 15910  1E8C  083C               	movf	bme280_get_regs@len,w
 15911  1E8D  00B2               	movwf	ReadEnvSensor@len
 15912  1E8E  083E               	movf	bme280_get_regs@dev,w
 15913  1E8F  3E03               	addlw	3
 15914  1E90  0086               	movwf	6
 15915  1E91  3001               	movlw	1	; select bank2/3
 15916  1E92  0087               	movwf	7
 15917  1E93  3F41               	moviw [1]fsr1
 15918  1E94  008A               	movwf	10
 15919  1E95  3F40               	moviw [0]fsr1
 15920  1E96  000A               	callw
 15921  1E97  319E               	pagesel	$
 15922  1E98  00C1               	movwf	??_bme280_get_regs+2
 15923  1E99  0841               	movf	??_bme280_get_regs+2,w
 15924  1E9A  00C3               	movwf	bme280_get_regs@rslt
 15925                           
 15926                           ;BME280_driver/bme280.c: 429:         if (rslt != 0)
 15927  1E9B  0843               	movf	bme280_get_regs@rslt,w
 15928  1E9C  1903               	btfsc	3,2
 15929  1E9D  2EA2               	goto	l65
 15930                           
 15931                           ;BME280_driver/bme280.c: 430:         {;BME280_driver/bme280.c: 431:             rslt = 
      +                          -4;
 15932  1E9E  30FC               	movlw	252
 15933  1E9F  00BF               	movwf	??_bme280_get_regs
 15934  1EA0  083F               	movf	??_bme280_get_regs,w
 15935  1EA1  00C3               	movwf	bme280_get_regs@rslt
 15936  1EA2                     l65:	
 15937                           ;BME280_driver/bme280.c: 433:     }
 15938                           
 15939                           
 15940                           ;BME280_driver/bme280.c: 435:     return rslt;
 15941  1EA2  0843               	movf	bme280_get_regs@rslt,w
 15942  1EA3  0008               	return
 15943  1EA4                     __end_of_bme280_get_regs:	
 15944                           
 15945                           	psect	text55
 15946  073E                     __ptext55:	
 15947 ;; *************** function _ReadEnvSensor *****************
 15948 ;; Defined at:
 15949 ;;		line 117 in file "bme280_i2c.c"
 15950 ;; Parameters:    Size  Location     Type
 15951 ;;  dev_id          1   15[BANK0 ] unsigned char 
 15952 ;;  reg_addr        1   16[BANK0 ] unsigned char 
 15953 ;;  reg_data        1   17[BANK0 ] PTR unsigned char 
 15954 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
 15955 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
 15956 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
 15957 ;;  len             2   18[BANK0 ] unsigned short 
 15958 ;; Auto vars:     Size  Location     Type
 15959 ;;  i               2   25[BANK0 ] int 
 15960 ;;  rslt            1   24[BANK0 ] char 
 15961 ;; Return value:  Size  Location     Type
 15962 ;;                  1    wreg      char 
 15963 ;; Registers used:
 15964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15965 ;; Tracked objects:
 15966 ;;		On entry : 1F/0
 15967 ;;		On exit  : 1F/0
 15968 ;;		Unchanged: 0/0
 15969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15970 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15971 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15972 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15973 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15974 ;;Total ram usage:       12 bytes
 15975 ;; Hardware stack levels used:    1
 15976 ;; Hardware stack levels required when called:    8
 15977 ;; This function calls:
 15978 ;;		_DebugAlert
 15979 ;;		_I2C_ReadByte
 15980 ;;		_I2C_Stop
 15981 ;;		_I2C_WriteByte
 15982 ;; This function is called by:
 15983 ;;		_BME280_Init
 15984 ;;		_bme280_get_regs
 15985 ;; This function uses a non-reentrant model
 15986 ;;
 15987                           
 15988                           
 15989                           ;psect for function _ReadEnvSensor
 15990  073E                     _ReadEnvSensor:	
 15991                           
 15992                           ;bme280_i2c.c: 117: int8_t ReadEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_
      +                          data, uint16_t len);bme280_i2c.c: 118: {;bme280_i2c.c: 119:     int8_t rslt = 0;
 15993                           
 15994                           ;incstack = 0
 15995                           ; Regs used in _ReadEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15996  073E  01B8               	clrf	ReadEnvSensor@rslt
 15997                           
 15998                           ;bme280_i2c.c: 121:     PIR1bits.SSP1IF = 0;
 15999  073F  1190               	bcf	16,3	;volatile
 16000                           
 16001                           ;bme280_i2c.c: 124:     SSP1CON2bits.SEN = 1;
 16002  0740  0024               	movlb	4	; select bank4
 16003  0741  1416               	bsf	22,0	;volatile
 16004                           
 16005                           ;bme280_i2c.c: 125:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if 
      +                          (ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1
      +                          IF = 0;;
 16006  0742  0021               	movlb	1	; select bank1
 16007  0743  086B               	movf	(_ticks+3)^(0+128),w
 16008  0744  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 16009  0745  086A               	movf	(_ticks+2)^(0+128),w
 16010  0746  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 16011  0747  0869               	movf	(_ticks+1)^(0+128),w
 16012  0748  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 16013  0749  0868               	movf	_ticks^(0+128),w
 16014  074A  00EC               	movwf	___g_timeout_start^(0+128)
 16015  074B                     l629:	
 16016  074B  0020               	movlb	0	; select bank0
 16017  074C  1990               	btfsc	16,3	;volatile
 16018  074D  2F7D               	goto	l632
 16019  074E  0021               	movlb	1	; select bank1
 16020  074F  086C               	movf	___g_timeout_start^(0+128),w
 16021  0750  0268               	subwf	_ticks^(0+128),w
 16022  0751  0020               	movlb	0	; select bank0
 16023  0752  00B4               	movwf	??_ReadEnvSensor
 16024  0753  0021               	movlb	1	; select bank1
 16025  0754  086D               	movf	(___g_timeout_start+1)^(0+128),w
 16026  0755  3B69               	subwfb	(_ticks+1)^(0+128),w
 16027  0756  0020               	movlb	0	; select bank0
 16028  0757  00B5               	movwf	??_ReadEnvSensor+1
 16029  0758  0021               	movlb	1	; select bank1
 16030  0759  086E               	movf	(___g_timeout_start+2)^(0+128),w
 16031  075A  3B6A               	subwfb	(_ticks+2)^(0+128),w
 16032  075B  0020               	movlb	0	; select bank0
 16033  075C  00B6               	movwf	??_ReadEnvSensor+2
 16034  075D  0021               	movlb	1	; select bank1
 16035  075E  086F               	movf	(___g_timeout_start+3)^(0+128),w
 16036  075F  3B6B               	subwfb	(_ticks+3)^(0+128),w
 16037  0760  0020               	movlb	0	; select bank0
 16038  0761  00B7               	movwf	??_ReadEnvSensor+3
 16039  0762  0837               	movf	??_ReadEnvSensor+3,w
 16040  0763  1D03               	btfss	3,2
 16041  0764  2F6E               	goto	l3920
 16042  0765  0836               	movf	??_ReadEnvSensor+2,w
 16043  0766  1D03               	btfss	3,2
 16044  0767  2F6E               	goto	l3920
 16045  0768  30B9               	movlw	185
 16046  0769  0234               	subwf	??_ReadEnvSensor,w
 16047  076A  300B               	movlw	11
 16048  076B  3B35               	subwfb	??_ReadEnvSensor+1,w
 16049  076C  1C03               	btfss	3,0
 16050  076D  2F4B               	goto	l629
 16051  076E                     l3920:	
 16052  076E  30C8               	movlw	200
 16053  076F  00A0               	movwf	DebugAlert@delay_high
 16054  0770  3000               	movlw	0
 16055  0771  00A1               	movwf	DebugAlert@delay_high+1
 16056  0772  30C8               	movlw	200
 16057  0773  00A2               	movwf	DebugAlert@delay_low
 16058  0774  3000               	movlw	0
 16059  0775  00A3               	movwf	DebugAlert@delay_low+1
 16060  0776  3003               	movlw	3
 16061  0777  00B4               	movwf	??_ReadEnvSensor
 16062  0778  0834               	movf	??_ReadEnvSensor,w
 16063  0779  00A4               	movwf	DebugAlert@num_flashes
 16064  077A  319B  23E1  3187   	fcall	_DebugAlert
 16065  077D                     l632:	
 16066  077D  0020               	movlb	0	; select bank0
 16067  077E  1190               	bcf	16,3	;volatile
 16068                           
 16069                           ;bme280_i2c.c: 128:     I2C_WriteByte(dev_id << 1);
 16070  077F  352F               	lslf	ReadEnvSensor@dev_id,w
 16071  0780  319F  2728  3187   	fcall	_I2C_WriteByte
 16072                           
 16073                           ;bme280_i2c.c: 131:     I2C_WriteByte(reg_addr);
 16074  0783  0020               	movlb	0	; select bank0
 16075  0784  0830               	movf	ReadEnvSensor@reg_addr,w
 16076  0785  319F  2728  3187   	fcall	_I2C_WriteByte
 16077                           
 16078                           ;bme280_i2c.c: 134:     SSP1CON2bits.RSEN = 1;
 16079  0788  0024               	movlb	4	; select bank4
 16080  0789  1496               	bsf	22,1	;volatile
 16081                           
 16082                           ;bme280_i2c.c: 135:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if 
      +                          (ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1
      +                          IF = 0;;
 16083  078A  0021               	movlb	1	; select bank1
 16084  078B  086B               	movf	(_ticks+3)^(0+128),w
 16085  078C  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 16086  078D  086A               	movf	(_ticks+2)^(0+128),w
 16087  078E  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 16088  078F  0869               	movf	(_ticks+1)^(0+128),w
 16089  0790  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 16090  0791  0868               	movf	_ticks^(0+128),w
 16091  0792  00EC               	movwf	___g_timeout_start^(0+128)
 16092  0793                     l633:	
 16093  0793  0020               	movlb	0	; select bank0
 16094  0794  1990               	btfsc	16,3	;volatile
 16095  0795  2FC5               	goto	l636
 16096  0796  0021               	movlb	1	; select bank1
 16097  0797  086C               	movf	___g_timeout_start^(0+128),w
 16098  0798  0268               	subwf	_ticks^(0+128),w
 16099  0799  0020               	movlb	0	; select bank0
 16100  079A  00B4               	movwf	??_ReadEnvSensor
 16101  079B  0021               	movlb	1	; select bank1
 16102  079C  086D               	movf	(___g_timeout_start+1)^(0+128),w
 16103  079D  3B69               	subwfb	(_ticks+1)^(0+128),w
 16104  079E  0020               	movlb	0	; select bank0
 16105  079F  00B5               	movwf	??_ReadEnvSensor+1
 16106  07A0  0021               	movlb	1	; select bank1
 16107  07A1  086E               	movf	(___g_timeout_start+2)^(0+128),w
 16108  07A2  3B6A               	subwfb	(_ticks+2)^(0+128),w
 16109  07A3  0020               	movlb	0	; select bank0
 16110  07A4  00B6               	movwf	??_ReadEnvSensor+2
 16111  07A5  0021               	movlb	1	; select bank1
 16112  07A6  086F               	movf	(___g_timeout_start+3)^(0+128),w
 16113  07A7  3B6B               	subwfb	(_ticks+3)^(0+128),w
 16114  07A8  0020               	movlb	0	; select bank0
 16115  07A9  00B7               	movwf	??_ReadEnvSensor+3
 16116  07AA  0837               	movf	??_ReadEnvSensor+3,w
 16117  07AB  1D03               	btfss	3,2
 16118  07AC  2FB6               	goto	l3930
 16119  07AD  0836               	movf	??_ReadEnvSensor+2,w
 16120  07AE  1D03               	btfss	3,2
 16121  07AF  2FB6               	goto	l3930
 16122  07B0  30B9               	movlw	185
 16123  07B1  0234               	subwf	??_ReadEnvSensor,w
 16124  07B2  300B               	movlw	11
 16125  07B3  3B35               	subwfb	??_ReadEnvSensor+1,w
 16126  07B4  1C03               	btfss	3,0
 16127  07B5  2F93               	goto	l633
 16128  07B6                     l3930:	
 16129  07B6  30C8               	movlw	200
 16130  07B7  00A0               	movwf	DebugAlert@delay_high
 16131  07B8  3000               	movlw	0
 16132  07B9  00A1               	movwf	DebugAlert@delay_high+1
 16133  07BA  30C8               	movlw	200
 16134  07BB  00A2               	movwf	DebugAlert@delay_low
 16135  07BC  3000               	movlw	0
 16136  07BD  00A3               	movwf	DebugAlert@delay_low+1
 16137  07BE  3003               	movlw	3
 16138  07BF  00B4               	movwf	??_ReadEnvSensor
 16139  07C0  0834               	movf	??_ReadEnvSensor,w
 16140  07C1  00A4               	movwf	DebugAlert@num_flashes
 16141  07C2  319B  23E1  3187   	fcall	_DebugAlert
 16142  07C5                     l636:	
 16143  07C5  0020               	movlb	0	; select bank0
 16144  07C6  1190               	bcf	16,3	;volatile
 16145                           
 16146                           ;bme280_i2c.c: 138:     I2C_WriteByte((dev_id << 1) | 0x01);
 16147  07C7  1403               	setc
 16148  07C8  0D2F               	rlf	ReadEnvSensor@dev_id,w
 16149  07C9  319F  2728  3187   	fcall	_I2C_WriteByte
 16150                           
 16151                           ;bme280_i2c.c: 141:     for(int i = 0; i < len; i++){
 16152  07CC  0020               	movlb	0	; select bank0
 16153  07CD  01B9               	clrf	ReadEnvSensor@i
 16154  07CE  01BA               	clrf	ReadEnvSensor@i+1
 16155  07CF                     l3944:	
 16156  07CF  0833               	movf	ReadEnvSensor@len+1,w
 16157  07D0  023A               	subwf	ReadEnvSensor@i+1,w
 16158  07D1  1D03               	skipz
 16159  07D2  2FD5               	goto	u4185
 16160  07D3  0832               	movf	ReadEnvSensor@len,w
 16161  07D4  0239               	subwf	ReadEnvSensor@i,w
 16162  07D5                     u4185:	
 16163  07D5  1803               	btfsc	3,0
 16164  07D6  2FF9               	goto	l3946
 16165                           
 16166                           ;bme280_i2c.c: 142:         if(i == len - 1){
 16167  07D7  0832               	movf	ReadEnvSensor@len,w
 16168  07D8  3EFF               	addlw	255
 16169  07D9  00B4               	movwf	??_ReadEnvSensor
 16170  07DA  30FF               	movlw	255
 16171  07DB  3D33               	addwfc	ReadEnvSensor@len+1,w
 16172  07DC  00B5               	movwf	??_ReadEnvSensor+1
 16173  07DD  083A               	movf	ReadEnvSensor@i+1,w
 16174  07DE  0635               	xorwf	??_ReadEnvSensor+1,w
 16175  07DF  1D03               	skipz
 16176  07E0  2FE3               	goto	u4175
 16177  07E1  0839               	movf	ReadEnvSensor@i,w
 16178  07E2  0634               	xorwf	??_ReadEnvSensor,w
 16179  07E3                     u4175:	
 16180  07E3  1D03               	skipz
 16181  07E4  2FE7               	goto	l3940
 16182                           
 16183                           ;bme280_i2c.c: 143:             reg_data[i] = I2C_ReadByte(1);
 16184  07E5  3001               	movlw	1
 16185  07E6  2FE8               	goto	L5
 16186  07E7                     l3940:	
 16187                           ;bme280_i2c.c: 144:         }
 16188                           
 16189                           
 16190                           ;bme280_i2c.c: 146:             reg_data[i]=I2C_ReadByte(0);
 16191  07E7  3000               	movlw	0
 16192  07E8                     L5:	
 16193  07E8  3196  26DC  3187   	fcall	_I2C_ReadByte
 16194  07EB  00B4               	movwf	??_ReadEnvSensor
 16195  07EC  0839               	movf	ReadEnvSensor@i,w
 16196  07ED  0731               	addwf	ReadEnvSensor@reg_data,w
 16197  07EE  00B5               	movwf	??_ReadEnvSensor+1
 16198  07EF  0835               	movf	??_ReadEnvSensor+1,w
 16199  07F0  0086               	movwf	6
 16200  07F1  0187               	clrf	7
 16201  07F2  0834               	movf	??_ReadEnvSensor,w
 16202  07F3  0081               	movwf	1
 16203                           
 16204                           ;bme280_i2c.c: 148:     }
 16205  07F4  3001               	movlw	1
 16206  07F5  07B9               	addwf	ReadEnvSensor@i,f
 16207  07F6  3000               	movlw	0
 16208  07F7  3DBA               	addwfc	ReadEnvSensor@i+1,f
 16209  07F8  2FCF               	goto	l3944
 16210  07F9                     l3946:	
 16211                           
 16212                           ;bme280_i2c.c: 151:     I2C_Stop();
 16213  07F9  319D  25E2         	fcall	_I2C_Stop
 16214                           
 16215                           ;bme280_i2c.c: 153:     return rslt;
 16216  07FB  0838               	movf	ReadEnvSensor@rslt,w
 16217  07FC  0008               	return
 16218  07FD                     __end_of_ReadEnvSensor:	
 16219                           
 16220                           	psect	text56
 16221  16DC                     __ptext56:	
 16222 ;; *************** function _I2C_ReadByte *****************
 16223 ;; Defined at:
 16224 ;;		line 44 in file "bme280_i2c.c"
 16225 ;; Parameters:    Size  Location     Type
 16226 ;;  ackbit          1    wreg     unsigned char 
 16227 ;; Auto vars:     Size  Location     Type
 16228 ;;  ackbit          1   11[BANK0 ] unsigned char 
 16229 ;;  rcvdata         1   12[BANK0 ] unsigned char 
 16230 ;; Return value:  Size  Location     Type
 16231 ;;                  1    wreg      unsigned char 
 16232 ;; Registers used:
 16233 ;;		wreg, status,2, status,0, pclath, cstack
 16234 ;; Tracked objects:
 16235 ;;		On entry : 1F/0
 16236 ;;		On exit  : 1F/0
 16237 ;;		Unchanged: 0/0
 16238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16240 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16241 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16242 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16243 ;;Total ram usage:        6 bytes
 16244 ;; Hardware stack levels used:    1
 16245 ;; Hardware stack levels required when called:    5
 16246 ;; This function calls:
 16247 ;;		_DebugAlert
 16248 ;; This function is called by:
 16249 ;;		_ReadEnvSensor
 16250 ;; This function uses a non-reentrant model
 16251 ;;
 16252                           
 16253                           
 16254                           ;psect for function _I2C_ReadByte
 16255  16DC                     _I2C_ReadByte:	
 16256                           
 16257                           ;incstack = 0
 16258                           ; Regs used in _I2C_ReadByte: [wreg+status,2+status,0+pclath+cstack]
 16259                           ;I2C_ReadByte@ackbit stored from wreg
 16260  16DC  00AB               	movwf	I2C_ReadByte@ackbit
 16261                           
 16262                           ;bme280_i2c.c: 44: uint8_t I2C_ReadByte(uint8_t ackbit);bme280_i2c.c: 45: {;bme280_i2c.c
      +                          : 46:     uint8_t rcvdata;;bme280_i2c.c: 48:     SSP1CON2bits.RCEN = 1;
 16263  16DD  0024               	movlb	4	; select bank4
 16264  16DE  1596               	bsf	22,3	;volatile
 16265                           
 16266                           ;bme280_i2c.c: 49:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if (
      +                          ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1I
      +                          F = 0;;
 16267  16DF  0021               	movlb	1	; select bank1
 16268  16E0  086B               	movf	(_ticks+3)^(0+128),w
 16269  16E1  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 16270  16E2  086A               	movf	(_ticks+2)^(0+128),w
 16271  16E3  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 16272  16E4  0869               	movf	(_ticks+1)^(0+128),w
 16273  16E5  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 16274  16E6  0868               	movf	_ticks^(0+128),w
 16275  16E7  00EC               	movwf	___g_timeout_start^(0+128)
 16276  16E8                     l601:	
 16277  16E8  0020               	movlb	0	; select bank0
 16278  16E9  1990               	btfsc	16,3	;volatile
 16279  16EA  2F1A               	goto	l604
 16280  16EB  0021               	movlb	1	; select bank1
 16281  16EC  086C               	movf	___g_timeout_start^(0+128),w
 16282  16ED  0268               	subwf	_ticks^(0+128),w
 16283  16EE  0020               	movlb	0	; select bank0
 16284  16EF  00A7               	movwf	??_I2C_ReadByte
 16285  16F0  0021               	movlb	1	; select bank1
 16286  16F1  086D               	movf	(___g_timeout_start+1)^(0+128),w
 16287  16F2  3B69               	subwfb	(_ticks+1)^(0+128),w
 16288  16F3  0020               	movlb	0	; select bank0
 16289  16F4  00A8               	movwf	??_I2C_ReadByte+1
 16290  16F5  0021               	movlb	1	; select bank1
 16291  16F6  086E               	movf	(___g_timeout_start+2)^(0+128),w
 16292  16F7  3B6A               	subwfb	(_ticks+2)^(0+128),w
 16293  16F8  0020               	movlb	0	; select bank0
 16294  16F9  00A9               	movwf	??_I2C_ReadByte+2
 16295  16FA  0021               	movlb	1	; select bank1
 16296  16FB  086F               	movf	(___g_timeout_start+3)^(0+128),w
 16297  16FC  3B6B               	subwfb	(_ticks+3)^(0+128),w
 16298  16FD  0020               	movlb	0	; select bank0
 16299  16FE  00AA               	movwf	??_I2C_ReadByte+3
 16300  16FF  082A               	movf	??_I2C_ReadByte+3,w
 16301  1700  1D03               	btfss	3,2
 16302  1701  2F0B               	goto	l3870
 16303  1702  0829               	movf	??_I2C_ReadByte+2,w
 16304  1703  1D03               	btfss	3,2
 16305  1704  2F0B               	goto	l3870
 16306  1705  30B9               	movlw	185
 16307  1706  0227               	subwf	??_I2C_ReadByte,w
 16308  1707  300B               	movlw	11
 16309  1708  3B28               	subwfb	??_I2C_ReadByte+1,w
 16310  1709  1C03               	btfss	3,0
 16311  170A  2EE8               	goto	l601
 16312  170B                     l3870:	
 16313  170B  30C8               	movlw	200
 16314  170C  00A0               	movwf	DebugAlert@delay_high
 16315  170D  3000               	movlw	0
 16316  170E  00A1               	movwf	DebugAlert@delay_high+1
 16317  170F  30C8               	movlw	200
 16318  1710  00A2               	movwf	DebugAlert@delay_low
 16319  1711  3000               	movlw	0
 16320  1712  00A3               	movwf	DebugAlert@delay_low+1
 16321  1713  3003               	movlw	3
 16322  1714  00A7               	movwf	??_I2C_ReadByte
 16323  1715  0827               	movf	??_I2C_ReadByte,w
 16324  1716  00A4               	movwf	DebugAlert@num_flashes
 16325  1717  319B  23E1  3196   	fcall	_DebugAlert
 16326  171A                     l604:	
 16327  171A  0020               	movlb	0	; select bank0
 16328  171B  1190               	bcf	16,3	;volatile
 16329                           
 16330                           ;bme280_i2c.c: 51:     rcvdata = SSP1BUF;
 16331  171C  0024               	movlb	4	; select bank4
 16332  171D  0811               	movf	17,w	;volatile
 16333  171E  0020               	movlb	0	; select bank0
 16334  171F  00A7               	movwf	??_I2C_ReadByte
 16335  1720  0827               	movf	??_I2C_ReadByte,w
 16336  1721  00AC               	movwf	I2C_ReadByte@rcvdata
 16337                           
 16338                           ;bme280_i2c.c: 54:     SSP1CON2bits.ACKDT=ackbit;
 16339  1722  0C2B               	rrf	I2C_ReadByte@ackbit,w
 16340  1723  0024               	movlb	4	; select bank4
 16341  1724  1C03               	skipc
 16342  1725  1296               	bcf	22,5	;volatile
 16343  1726  1803               	skipnc
 16344  1727  1696               	bsf	22,5	;volatile
 16345                           
 16346                           ;bme280_i2c.c: 55:     SSP1CON2bits.ACKEN = 1;
 16347  1728  1616               	bsf	22,4	;volatile
 16348                           
 16349                           ;bme280_i2c.c: 56:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if (
      +                          ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1I
      +                          F = 0;;
 16350  1729  0021               	movlb	1	; select bank1
 16351  172A  086B               	movf	(_ticks+3)^(0+128),w
 16352  172B  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 16353  172C  086A               	movf	(_ticks+2)^(0+128),w
 16354  172D  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 16355  172E  0869               	movf	(_ticks+1)^(0+128),w
 16356  172F  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 16357  1730  0868               	movf	_ticks^(0+128),w
 16358  1731  00EC               	movwf	___g_timeout_start^(0+128)
 16359  1732                     l605:	
 16360  1732  0020               	movlb	0	; select bank0
 16361  1733  1990               	btfsc	16,3	;volatile
 16362  1734  2F63               	goto	l608
 16363  1735  0021               	movlb	1	; select bank1
 16364  1736  086C               	movf	___g_timeout_start^(0+128),w
 16365  1737  0268               	subwf	_ticks^(0+128),w
 16366  1738  0020               	movlb	0	; select bank0
 16367  1739  00A7               	movwf	??_I2C_ReadByte
 16368  173A  0021               	movlb	1	; select bank1
 16369  173B  086D               	movf	(___g_timeout_start+1)^(0+128),w
 16370  173C  3B69               	subwfb	(_ticks+1)^(0+128),w
 16371  173D  0020               	movlb	0	; select bank0
 16372  173E  00A8               	movwf	??_I2C_ReadByte+1
 16373  173F  0021               	movlb	1	; select bank1
 16374  1740  086E               	movf	(___g_timeout_start+2)^(0+128),w
 16375  1741  3B6A               	subwfb	(_ticks+2)^(0+128),w
 16376  1742  0020               	movlb	0	; select bank0
 16377  1743  00A9               	movwf	??_I2C_ReadByte+2
 16378  1744  0021               	movlb	1	; select bank1
 16379  1745  086F               	movf	(___g_timeout_start+3)^(0+128),w
 16380  1746  3B6B               	subwfb	(_ticks+3)^(0+128),w
 16381  1747  0020               	movlb	0	; select bank0
 16382  1748  00AA               	movwf	??_I2C_ReadByte+3
 16383  1749  082A               	movf	??_I2C_ReadByte+3,w
 16384  174A  1D03               	btfss	3,2
 16385  174B  2F55               	goto	l3882
 16386  174C  0829               	movf	??_I2C_ReadByte+2,w
 16387  174D  1D03               	btfss	3,2
 16388  174E  2F55               	goto	l3882
 16389  174F  30B9               	movlw	185
 16390  1750  0227               	subwf	??_I2C_ReadByte,w
 16391  1751  300B               	movlw	11
 16392  1752  3B28               	subwfb	??_I2C_ReadByte+1,w
 16393  1753  1C03               	btfss	3,0
 16394  1754  2F32               	goto	l605
 16395  1755                     l3882:	
 16396  1755  30C8               	movlw	200
 16397  1756  00A0               	movwf	DebugAlert@delay_high
 16398  1757  3000               	movlw	0
 16399  1758  00A1               	movwf	DebugAlert@delay_high+1
 16400  1759  30C8               	movlw	200
 16401  175A  00A2               	movwf	DebugAlert@delay_low
 16402  175B  3000               	movlw	0
 16403  175C  00A3               	movwf	DebugAlert@delay_low+1
 16404  175D  3003               	movlw	3
 16405  175E  00A7               	movwf	??_I2C_ReadByte
 16406  175F  0827               	movf	??_I2C_ReadByte,w
 16407  1760  00A4               	movwf	DebugAlert@num_flashes
 16408  1761  319B  23E1         	fcall	_DebugAlert
 16409  1763                     l608:	
 16410  1763  0020               	movlb	0	; select bank0
 16411  1764  1190               	bcf	16,3	;volatile
 16412                           
 16413                           ;bme280_i2c.c: 58:     return (rcvdata);
 16414  1765  082C               	movf	I2C_ReadByte@rcvdata,w
 16415  1766  0008               	return
 16416  1767                     __end_of_I2C_ReadByte:	
 16417                           
 16418                           	psect	text57
 16419  1D2F                     __ptext57:	
 16420 ;; *************** function _bme280_soft_reset *****************
 16421 ;; Defined at:
 16422 ;;		line 631 in file "BME280_driver/bme280.c"
 16423 ;; Parameters:    Size  Location     Type
 16424 ;;  dev             1    wreg     PTR const struct bme280_
 16425 ;;		 -> EnvSensor(51), 
 16426 ;; Auto vars:     Size  Location     Type
 16427 ;;  dev             1   64[BANK0 ] PTR const struct bme280_
 16428 ;;		 -> EnvSensor(51), 
 16429 ;;  reg_addr        1   63[BANK0 ] unsigned char 
 16430 ;;  rslt            1   62[BANK0 ] char 
 16431 ;;  soft_rst_cmd    1   61[BANK0 ] unsigned char 
 16432 ;; Return value:  Size  Location     Type
 16433 ;;                  1    wreg      char 
 16434 ;; Registers used:
 16435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16436 ;; Tracked objects:
 16437 ;;		On entry : 1E/1
 16438 ;;		On exit  : 1F/0
 16439 ;;		Unchanged: 0/0
 16440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16443 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16444 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16445 ;;Total ram usage:        7 bytes
 16446 ;; Hardware stack levels used:    1
 16447 ;; Hardware stack levels required when called:   10
 16448 ;; This function calls:
 16449 ;;		_Sleep
 16450 ;;		_bme280_set_regs
 16451 ;;		_null_ptr_check
 16452 ;; This function is called by:
 16453 ;;		_bme280_init
 16454 ;;		_put_device_to_sleep
 16455 ;; This function uses a non-reentrant model
 16456 ;;
 16457                           
 16458                           
 16459                           ;psect for function _bme280_soft_reset
 16460  1D2F                     _bme280_soft_reset:	
 16461                           
 16462                           ;incstack = 0
 16463                           ; Regs used in _bme280_soft_reset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16464                           ;bme280_soft_reset@dev stored from wreg
 16465  1D2F  0020               	movlb	0	; select bank0
 16466  1D30  00E0               	movwf	bme280_soft_reset@dev
 16467                           
 16468                           ;BME280_driver/bme280.c: 631: int8_t bme280_soft_reset(const struct bme280_dev *dev);BME
      +                          280_driver/bme280.c: 632: {;BME280_driver/bme280.c: 633:     int8_t rslt;;BME280_driver/
      +                          bme280.c: 634:     uint8_t reg_addr = 0xE0;
 16469  1D31  30E0               	movlw	224
 16470  1D32  00DA               	movwf	??_bme280_soft_reset
 16471  1D33  085A               	movf	??_bme280_soft_reset,w
 16472  1D34  00DF               	movwf	bme280_soft_reset@reg_addr
 16473                           
 16474                           ;BME280_driver/bme280.c: 637:     uint8_t soft_rst_cmd = 0xB6;
 16475  1D35  30B6               	movlw	182
 16476  1D36  00DA               	movwf	??_bme280_soft_reset
 16477  1D37  085A               	movf	??_bme280_soft_reset,w
 16478  1D38  00DD               	movwf	bme280_soft_reset@soft_rst_cmd
 16479                           
 16480                           ;BME280_driver/bme280.c: 640:     rslt = null_ptr_check(dev);
 16481  1D39  0860               	movf	bme280_soft_reset@dev,w
 16482  1D3A  319B  2317  319D   	fcall	_null_ptr_check
 16483  1D3D  0020               	movlb	0	; select bank0
 16484  1D3E  00DA               	movwf	??_bme280_soft_reset
 16485  1D3F  085A               	movf	??_bme280_soft_reset,w
 16486  1D40  00DE               	movwf	bme280_soft_reset@rslt
 16487                           
 16488                           ;BME280_driver/bme280.c: 643:     if (rslt == 0)
 16489  1D41  085E               	movf	bme280_soft_reset@rslt,w
 16490  1D42  1D03               	btfss	3,2
 16491  1D43  2D67               	goto	l4128
 16492                           
 16493                           ;BME280_driver/bme280.c: 644:     {;BME280_driver/bme280.c: 646:         rslt = bme280_s
      +                          et_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 16494  1D44  305D               	movlw	(low (bme280_soft_reset@soft_rst_cmd| 0))& (0+255)
 16495  1D45  00DA               	movwf	??_bme280_soft_reset
 16496  1D46  085A               	movf	??_bme280_soft_reset,w
 16497  1D47  00BB               	movwf	bme280_set_regs@reg_data
 16498  1D48  01BC               	clrf	bme280_set_regs@len
 16499  1D49  0ABC               	incf	bme280_set_regs@len,f
 16500  1D4A  0860               	movf	bme280_soft_reset@dev,w
 16501  1D4B  00DB               	movwf	??_bme280_soft_reset+1
 16502  1D4C  085B               	movf	??_bme280_soft_reset+1,w
 16503  1D4D  00BD               	movwf	bme280_set_regs@dev
 16504  1D4E  305F               	movlw	(low (bme280_soft_reset@reg_addr| 0))& (0+255)
 16505  1D4F  3188  2027  319D   	fcall	_bme280_set_regs
 16506  1D52  00DC               	movwf	??_bme280_soft_reset+2
 16507  1D53  085C               	movf	??_bme280_soft_reset+2,w
 16508  1D54  00DE               	movwf	bme280_soft_reset@rslt
 16509                           
 16510                           ;BME280_driver/bme280.c: 649:         dev->delay_ms(2);
 16511  1D55  3000               	movlw	0
 16512  1D56  00F3               	movwf	Sleep@ms+3
 16513  1D57  3000               	movlw	0
 16514  1D58  00F2               	movwf	Sleep@ms+2
 16515  1D59  3000               	movlw	0
 16516  1D5A  00F1               	movwf	Sleep@ms+1
 16517  1D5B  3002               	movlw	2
 16518  1D5C  00F0               	movwf	Sleep@ms
 16519  1D5D  0860               	movf	bme280_soft_reset@dev,w
 16520  1D5E  3E07               	addlw	7
 16521  1D5F  0086               	movwf	6
 16522  1D60  3001               	movlw	1	; select bank2/3
 16523  1D61  0087               	movwf	7
 16524  1D62  3F41               	moviw [1]fsr1
 16525  1D63  008A               	movwf	10
 16526  1D64  3F40               	moviw [0]fsr1
 16527  1D65  000A               	callw
 16528  1D66  319D               	pagesel	$
 16529  1D67                     l4128:	
 16530                           
 16531                           ;BME280_driver/bme280.c: 652:     return rslt;
 16532  1D67  0020               	movlb	0	; select bank0
 16533  1D68  085E               	movf	bme280_soft_reset@rslt,w
 16534  1D69  0008               	return
 16535  1D6A                     __end_of_bme280_soft_reset:	
 16536                           
 16537                           	psect	text58
 16538  0827                     __ptext58:	
 16539 ;; *************** function _bme280_set_regs *****************
 16540 ;; Defined at:
 16541 ;;		line 442 in file "BME280_driver/bme280.c"
 16542 ;; Parameters:    Size  Location     Type
 16543 ;;  reg_addr        1    wreg     PTR unsigned char 
 16544 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
 16545 ;;		 -> bme280_soft_reset@reg_addr(1), 
 16546 ;;  reg_data        1   27[BANK0 ] PTR const unsigned char 
 16547 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
 16548 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
 16549 ;;  len             1   28[BANK0 ] unsigned char 
 16550 ;;  dev             1   29[BANK0 ] PTR const struct bme280_
 16551 ;;		 -> EnvSensor(51), 
 16552 ;; Auto vars:     Size  Location     Type
 16553 ;;  reg_addr        1   57[BANK0 ] PTR unsigned char 
 16554 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
 16555 ;;		 -> bme280_soft_reset@reg_addr(1), 
 16556 ;;  temp_buff      20   33[BANK0 ] unsigned char [20]
 16557 ;;  temp_len        2   53[BANK0 ] unsigned short 
 16558 ;;  rslt            1   56[BANK0 ] char 
 16559 ;;  reg_addr_cnt    1   55[BANK0 ] unsigned char 
 16560 ;; Return value:  Size  Location     Type
 16561 ;;                  1    wreg      char 
 16562 ;; Registers used:
 16563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16564 ;; Tracked objects:
 16565 ;;		On entry : 1F/0
 16566 ;;		On exit  : 1F/0
 16567 ;;		Unchanged: 0/0
 16568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16569 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16570 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16571 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16573 ;;Total ram usage:       31 bytes
 16574 ;; Hardware stack levels used:    1
 16575 ;; Hardware stack levels required when called:    9
 16576 ;; This function calls:
 16577 ;;		_WriteEnvSensor
 16578 ;;		_interleave_reg_addr
 16579 ;;		_null_ptr_check
 16580 ;; This function is called by:
 16581 ;;		_bme280_soft_reset
 16582 ;;		_set_osr_humidity_settings
 16583 ;;		_set_osr_press_temp_settings
 16584 ;;		_set_filter_standby_settings
 16585 ;;		_write_power_mode
 16586 ;; This function uses a non-reentrant model
 16587 ;;
 16588                           
 16589                           
 16590                           ;psect for function _bme280_set_regs
 16591  0827                     _bme280_set_regs:	
 16592                           
 16593                           ;incstack = 0
 16594                           ; Regs used in _bme280_set_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16595                           ;bme280_set_regs@reg_addr stored from wreg
 16596  0827  00D9               	movwf	bme280_set_regs@reg_addr
 16597                           
 16598                           ;BME280_driver/bme280.c: 442: int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *r
      +                          eg_data, uint8_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 443: {;BME28
      +                          0_driver/bme280.c: 444:     int8_t rslt;;BME280_driver/bme280.c: 445:     uint8_t temp_b
      +                          uff[20];;BME280_driver/bme280.c: 447:     if (len > 10)
 16599  0828  300B               	movlw	11
 16600  0829  023C               	subwf	bme280_set_regs@len,w
 16601  082A  1C03               	skipc
 16602  082B  2830               	goto	l4000
 16603                           
 16604                           ;BME280_driver/bme280.c: 448:     {;BME280_driver/bme280.c: 449:         len = 10;
 16605  082C  300A               	movlw	10
 16606  082D  00BE               	movwf	??_bme280_set_regs
 16607  082E  083E               	movf	??_bme280_set_regs,w
 16608  082F  00BC               	movwf	bme280_set_regs@len
 16609  0830                     l4000:	
 16610                           
 16611                           ;BME280_driver/bme280.c: 451:     uint16_t temp_len;;BME280_driver/bme280.c: 452:     ui
      +                          nt8_t reg_addr_cnt;;BME280_driver/bme280.c: 455:     rslt = null_ptr_check(dev);
 16612  0830  083D               	movf	bme280_set_regs@dev,w
 16613  0831  319B  2317  3188   	fcall	_null_ptr_check
 16614  0834  0020               	movlb	0	; select bank0
 16615  0835  00BE               	movwf	??_bme280_set_regs
 16616  0836  083E               	movf	??_bme280_set_regs,w
 16617  0837  00D8               	movwf	bme280_set_regs@rslt
 16618                           
 16619                           ;BME280_driver/bme280.c: 458:     if ((rslt == 0) && (reg_addr != ((void*)0)) && (reg_da
      +                          ta != ((void*)0)))
 16620  0838  0858               	movf	bme280_set_regs@rslt,w
 16621  0839  1D03               	btfss	3,2
 16622  083A  28C1               	goto	l72
 16623  083B  0859               	movf	bme280_set_regs@reg_addr,w
 16624  083C  1903               	btfsc	3,2
 16625  083D  28C1               	goto	l72
 16626  083E  083B               	movf	bme280_set_regs@reg_data,w
 16627  083F  1903               	btfsc	3,2
 16628  0840  28C1               	goto	l72
 16629                           
 16630                           ;BME280_driver/bme280.c: 459:     {;BME280_driver/bme280.c: 460:         if (len != 0)
 16631  0841  083C               	movf	bme280_set_regs@len,w
 16632  0842  1903               	btfsc	3,2
 16633  0843  28BC               	goto	l4036
 16634                           
 16635                           ;BME280_driver/bme280.c: 461:         {;BME280_driver/bme280.c: 462:             temp_bu
      +                          ff[0] = reg_data[0];
 16636  0844  083B               	movf	bme280_set_regs@reg_data,w
 16637  0845  0086               	movwf	6
 16638  0846  0187               	clrf	7
 16639  0847  0801               	movf	1,w
 16640  0848  00BE               	movwf	??_bme280_set_regs
 16641  0849  083E               	movf	??_bme280_set_regs,w
 16642  084A  00C1               	movwf	bme280_set_regs@temp_buff
 16643                           
 16644                           ;BME280_driver/bme280.c: 465:             if (dev->intf != BME280_I2C_INTF)
 16645  084B  083D               	movf	bme280_set_regs@dev,w
 16646  084C  3E02               	addlw	2
 16647  084D  0086               	movwf	6
 16648  084E  3001               	movlw	1	; select bank2/3
 16649  084F  0087               	movwf	7
 16650  0850  0301               	decf	1,w
 16651  0851  1903               	btfsc	3,2
 16652  0852  286E               	goto	l4022
 16653                           
 16654                           ;BME280_driver/bme280.c: 466:             {;BME280_driver/bme280.c: 467:                
      +                           for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 16655  0853  01D7               	clrf	bme280_set_regs@reg_addr_cnt
 16656  0854                     l4020:	
 16657  0854  083C               	movf	bme280_set_regs@len,w
 16658  0855  0257               	subwf	bme280_set_regs@reg_addr_cnt,w
 16659  0856  1803               	btfsc	3,0
 16660  0857  286E               	goto	l4022
 16661                           
 16662                           ;BME280_driver/bme280.c: 468:                 {;BME280_driver/bme280.c: 469:            
      +                                   reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 16663  0858  0857               	movf	bme280_set_regs@reg_addr_cnt,w
 16664  0859  0759               	addwf	bme280_set_regs@reg_addr,w
 16665  085A  00BE               	movwf	??_bme280_set_regs
 16666  085B  083E               	movf	??_bme280_set_regs,w
 16667  085C  0086               	movwf	6
 16668  085D  0187               	clrf	7
 16669  085E  0801               	movf	1,w
 16670  085F  397F               	andlw	127
 16671  0860  00BF               	movwf	??_bme280_set_regs+1
 16672  0861  0857               	movf	bme280_set_regs@reg_addr_cnt,w
 16673  0862  0759               	addwf	bme280_set_regs@reg_addr,w
 16674  0863  00C0               	movwf	??_bme280_set_regs+2
 16675  0864  0840               	movf	??_bme280_set_regs+2,w
 16676  0865  0086               	movwf	6
 16677  0866  0187               	clrf	7
 16678  0867  083F               	movf	??_bme280_set_regs+1,w
 16679  0868  0081               	movwf	1
 16680                           
 16681                           ;BME280_driver/bme280.c: 470:                 }
 16682  0869  3001               	movlw	1
 16683  086A  00BE               	movwf	??_bme280_set_regs
 16684  086B  083E               	movf	??_bme280_set_regs,w
 16685  086C  07D7               	addwf	bme280_set_regs@reg_addr_cnt,f
 16686  086D  2854               	goto	l4020
 16687  086E                     l4022:	
 16688                           
 16689                           ;BME280_driver/bme280.c: 474:             if (len > 1)
 16690  086E  3002               	movlw	2
 16691  086F  023C               	subwf	bme280_set_regs@len,w
 16692  0870  1C03               	skipc
 16693  0871  288D               	goto	l4028
 16694                           
 16695                           ;BME280_driver/bme280.c: 475:             {;BME280_driver/bme280.c: 479:                
      +                           interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 16696  0872  3041               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
 16697  0873  00BE               	movwf	??_bme280_set_regs
 16698  0874  083E               	movf	??_bme280_set_regs,w
 16699  0875  00F0               	movwf	interleave_reg_addr@temp_buff
 16700  0876  083B               	movf	bme280_set_regs@reg_data,w
 16701  0877  00BF               	movwf	??_bme280_set_regs+1
 16702  0878  083F               	movf	??_bme280_set_regs+1,w
 16703  0879  00F1               	movwf	interleave_reg_addr@reg_data
 16704  087A  083C               	movf	bme280_set_regs@len,w
 16705  087B  00C0               	movwf	??_bme280_set_regs+2
 16706  087C  0840               	movf	??_bme280_set_regs+2,w
 16707  087D  00F2               	movwf	interleave_reg_addr@len
 16708  087E  0859               	movf	bme280_set_regs@reg_addr,w
 16709  087F  319C  2437  3188   	fcall	_interleave_reg_addr
 16710                           
 16711                           ;BME280_driver/bme280.c: 480:                 temp_len = ((len * 2) - 1);
 16712  0882  083C               	movf	bme280_set_regs@len,w
 16713  0883  00BE               	movwf	??_bme280_set_regs
 16714  0884  01BF               	clrf	??_bme280_set_regs+1
 16715  0885  35BE               	lslf	??_bme280_set_regs,f
 16716  0886  0DBF               	rlf	??_bme280_set_regs+1,f
 16717  0887  083E               	movf	??_bme280_set_regs,w
 16718  0888  3EFF               	addlw	255
 16719  0889  00D5               	movwf	bme280_set_regs@temp_len
 16720  088A  30FF               	movlw	255
 16721  088B  3D3F               	addwfc	??_bme280_set_regs+1,w
 16722  088C  2893               	goto	L6
 16723  088D                     l4028:	
 16724                           ;BME280_driver/bme280.c: 481:             }
 16725                           
 16726                           
 16727                           ;BME280_driver/bme280.c: 483:             {;BME280_driver/bme280.c: 484:                
      +                           temp_len = len;
 16728  088D  083C               	movf	bme280_set_regs@len,w
 16729  088E  00BE               	movwf	??_bme280_set_regs
 16730  088F  01BF               	clrf	??_bme280_set_regs+1
 16731  0890  083E               	movf	??_bme280_set_regs,w
 16732  0891  00D5               	movwf	bme280_set_regs@temp_len
 16733  0892  083F               	movf	??_bme280_set_regs+1,w
 16734  0893                     L6:	
 16735  0893  00D6               	movwf	bme280_set_regs@temp_len+1
 16736                           
 16737                           ;BME280_driver/bme280.c: 486:             rslt = dev->write(dev->dev_id, reg_addr[0], te
      +                          mp_buff, temp_len);
 16738  0894  083D               	movf	bme280_set_regs@dev,w
 16739  0895  0086               	movwf	6
 16740  0896  3001               	movlw	1	; select bank2/3
 16741  0897  0087               	movwf	7
 16742  0898  3001               	movlw	1	; select bank2/3
 16743  0899  3F41               	moviw [1]fsr1
 16744  089A  00AF               	movwf	WriteEnvSensor@dev_id
 16745  089B  0859               	movf	bme280_set_regs@reg_addr,w
 16746  089C  0086               	movwf	6
 16747  089D  0187               	clrf	7
 16748  089E  0801               	movf	1,w
 16749  089F  00BE               	movwf	??_bme280_set_regs
 16750  08A0  083E               	movf	??_bme280_set_regs,w
 16751  08A1  00B0               	movwf	WriteEnvSensor@reg_addr
 16752  08A2  3041               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
 16753  08A3  00BF               	movwf	??_bme280_set_regs+1
 16754  08A4  083F               	movf	??_bme280_set_regs+1,w
 16755  08A5  00B1               	movwf	WriteEnvSensor@reg_data
 16756  08A6  0856               	movf	bme280_set_regs@temp_len+1,w
 16757  08A7  00B3               	movwf	WriteEnvSensor@len+1
 16758  08A8  0855               	movf	bme280_set_regs@temp_len,w
 16759  08A9  00B2               	movwf	WriteEnvSensor@len
 16760  08AA  083D               	movf	bme280_set_regs@dev,w
 16761  08AB  3E05               	addlw	5
 16762  08AC  0086               	movwf	6
 16763  08AD  3001               	movlw	1	; select bank2/3
 16764  08AE  0087               	movwf	7
 16765  08AF  3F41               	moviw [1]fsr1
 16766  08B0  008A               	movwf	10
 16767  08B1  3F40               	moviw [0]fsr1
 16768  08B2  000A               	callw
 16769  08B3  3188               	pagesel	$
 16770  08B4  00C0               	movwf	??_bme280_set_regs+2
 16771  08B5  0840               	movf	??_bme280_set_regs+2,w
 16772  08B6  00D8               	movwf	bme280_set_regs@rslt
 16773                           
 16774                           ;BME280_driver/bme280.c: 489:             if (rslt != 0)
 16775  08B7  0858               	movf	bme280_set_regs@rslt,w
 16776  08B8  1903               	btfsc	3,2
 16777  08B9  28C3               	goto	l4038
 16778                           
 16779                           ;BME280_driver/bme280.c: 490:             {;BME280_driver/bme280.c: 491:                
      +                           rslt = -4;
 16780  08BA  30FC               	movlw	252
 16781  08BB  28BD               	goto	L7
 16782  08BC                     l4036:	
 16783                           
 16784                           ;BME280_driver/bme280.c: 495:         {;BME280_driver/bme280.c: 496:             rslt = 
      +                          -3;
 16785  08BC  30FD               	movlw	253
 16786  08BD                     L7:	
 16787  08BD  00BE               	movwf	??_bme280_set_regs
 16788  08BE  083E               	movf	??_bme280_set_regs,w
 16789  08BF  00D8               	movwf	bme280_set_regs@rslt
 16790  08C0  28C3               	goto	l4038
 16791  08C1                     l72:	
 16792                           ;BME280_driver/bme280.c: 499:     else
 16793                           
 16794                           
 16795                           ;BME280_driver/bme280.c: 500:     {;BME280_driver/bme280.c: 501:         rslt = -1;
 16796  08C1  01D8               	clrf	bme280_set_regs@rslt
 16797  08C2  03D8               	decf	bme280_set_regs@rslt,f
 16798  08C3                     l4038:	
 16799                           
 16800                           ;BME280_driver/bme280.c: 504:     return rslt;
 16801  08C3  0858               	movf	bme280_set_regs@rslt,w
 16802  08C4  0008               	return
 16803  08C5                     __end_of_bme280_set_regs:	
 16804                           
 16805                           	psect	text59
 16806  1B17                     __ptext59:	
 16807 ;; *************** function _null_ptr_check *****************
 16808 ;; Defined at:
 16809 ;;		line 1426 in file "BME280_driver/bme280.c"
 16810 ;; Parameters:    Size  Location     Type
 16811 ;;  dev             1    wreg     PTR const struct bme280_
 16812 ;;		 -> EnvSensor(51), 
 16813 ;; Auto vars:     Size  Location     Type
 16814 ;;  dev             1    3[COMMON] PTR const struct bme280_
 16815 ;;		 -> EnvSensor(51), 
 16816 ;;  rslt            1    2[COMMON] char 
 16817 ;; Return value:  Size  Location     Type
 16818 ;;                  1    wreg      char 
 16819 ;; Registers used:
 16820 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16821 ;; Tracked objects:
 16822 ;;		On entry : 1E/0
 16823 ;;		On exit  : 1E/0
 16824 ;;		Unchanged: 1E/0
 16825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16827 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16830 ;;Total ram usage:        4 bytes
 16831 ;; Hardware stack levels used:    1
 16832 ;; Hardware stack levels required when called:    3
 16833 ;; This function calls:
 16834 ;;		Nothing
 16835 ;; This function is called by:
 16836 ;;		_bme280_init
 16837 ;;		_bme280_get_regs
 16838 ;;		_bme280_set_regs
 16839 ;;		_bme280_set_sensor_settings
 16840 ;;		_bme280_set_sensor_mode
 16841 ;;		_bme280_get_sensor_mode
 16842 ;;		_bme280_soft_reset
 16843 ;;		_bme280_get_sensor_data
 16844 ;; This function uses a non-reentrant model
 16845 ;;
 16846                           
 16847                           
 16848                           ;psect for function _null_ptr_check
 16849  1B17                     _null_ptr_check:	
 16850                           
 16851                           ;incstack = 0
 16852                           ; Regs used in _null_ptr_check: [wreg+fsr1l+fsr1h+status,2+status,0]
 16853                           ;null_ptr_check@dev stored from wreg
 16854  1B17  00F3               	movwf	null_ptr_check@dev
 16855                           
 16856                           ;BME280_driver/bme280.c: 1426: static int8_t null_ptr_check(const struct bme280_dev *dev
      +                          );BME280_driver/bme280.c: 1427: {;BME280_driver/bme280.c: 1428:     int8_t rslt;;BME280_
      +                          driver/bme280.c: 1430:     if ((dev == ((void*)0)) || (dev->read == ((void*)0)) || (dev-
      +                          >write == ((void*)0)) || (dev->delay_ms == ((void*)0)))
 16857  1B18  0873               	movf	null_ptr_check@dev,w
 16858  1B19  1903               	btfsc	3,2
 16859  1B1A  2B36               	goto	l238
 16860  1B1B  0873               	movf	null_ptr_check@dev,w
 16861  1B1C  3E03               	addlw	3
 16862  1B1D  0086               	movwf	6
 16863  1B1E  3001               	movlw	1	; select bank2/3
 16864  1B1F  0087               	movwf	7
 16865  1B20  0016               	moviw fsr1++
 16866  1B21  0401               	iorwf	1,w
 16867  1B22  1903               	btfsc	3,2
 16868  1B23  2B36               	goto	l238
 16869  1B24  0873               	movf	null_ptr_check@dev,w
 16870  1B25  3E05               	addlw	5
 16871  1B26  0086               	movwf	6
 16872  1B27  3001               	movlw	1	; select bank2/3
 16873  1B28  0087               	movwf	7
 16874  1B29  0016               	moviw fsr1++
 16875  1B2A  0401               	iorwf	1,w
 16876  1B2B  1903               	btfsc	3,2
 16877  1B2C  2B36               	goto	l238
 16878  1B2D  0873               	movf	null_ptr_check@dev,w
 16879  1B2E  3E07               	addlw	7
 16880  1B2F  0086               	movwf	6
 16881  1B30  3001               	movlw	1	; select bank2/3
 16882  1B31  0087               	movwf	7
 16883  1B32  0016               	moviw fsr1++
 16884  1B33  0401               	iorwf	1,w
 16885  1B34  1D03               	btfss	3,2
 16886  1B35  2B39               	goto	l3896
 16887  1B36                     l238:	
 16888                           
 16889                           ;BME280_driver/bme280.c: 1431:     {;BME280_driver/bme280.c: 1433:         rslt = -1;
 16890  1B36  01F2               	clrf	null_ptr_check@rslt
 16891  1B37  03F2               	decf	null_ptr_check@rslt,f
 16892                           
 16893                           ;BME280_driver/bme280.c: 1434:     }
 16894  1B38  2B3A               	goto	l3898
 16895  1B39                     l3896:	
 16896                           
 16897                           ;BME280_driver/bme280.c: 1436:     {;BME280_driver/bme280.c: 1438:         rslt = 0;
 16898  1B39  01F2               	clrf	null_ptr_check@rslt
 16899  1B3A                     l3898:	
 16900                           
 16901                           ;BME280_driver/bme280.c: 1441:     return rslt;
 16902  1B3A  0872               	movf	null_ptr_check@rslt,w
 16903  1B3B  0008               	return
 16904  1B3C                     __end_of_null_ptr_check:	
 16905                           
 16906                           	psect	text60
 16907  1C37                     __ptext60:	
 16908 ;; *************** function _interleave_reg_addr *****************
 16909 ;; Defined at:
 16910 ;;		line 1343 in file "BME280_driver/bme280.c"
 16911 ;; Parameters:    Size  Location     Type
 16912 ;;  reg_addr        1    wreg     PTR const unsigned char 
 16913 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
 16914 ;;		 -> bme280_soft_reset@reg_addr(1), 
 16915 ;;  temp_buff       1    0[COMMON] PTR unsigned char 
 16916 ;;		 -> bme280_set_regs@temp_buff(20), 
 16917 ;;  reg_data        1    1[COMMON] PTR const unsigned char 
 16918 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
 16919 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
 16920 ;;  len             1    2[COMMON] unsigned char 
 16921 ;; Auto vars:     Size  Location     Type
 16922 ;;  reg_addr        1    6[COMMON] PTR const unsigned char 
 16923 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
 16924 ;;		 -> bme280_soft_reset@reg_addr(1), 
 16925 ;;  index           1    7[COMMON] unsigned char 
 16926 ;; Return value:  Size  Location     Type
 16927 ;;                  1    wreg      void 
 16928 ;; Registers used:
 16929 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16930 ;; Tracked objects:
 16931 ;;		On entry : 1F/0
 16932 ;;		On exit  : 1F/0
 16933 ;;		Unchanged: 1F/0
 16934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16935 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16936 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16937 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16939 ;;Total ram usage:        8 bytes
 16940 ;; Hardware stack levels used:    1
 16941 ;; Hardware stack levels required when called:    3
 16942 ;; This function calls:
 16943 ;;		Nothing
 16944 ;; This function is called by:
 16945 ;;		_bme280_set_regs
 16946 ;; This function uses a non-reentrant model
 16947 ;;
 16948                           
 16949                           
 16950                           ;psect for function _interleave_reg_addr
 16951  1C37                     _interleave_reg_addr:	
 16952                           
 16953                           ;incstack = 0
 16954                           ; Regs used in _interleave_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0]
 16955                           ;interleave_reg_addr@reg_addr stored from wreg
 16956  1C37  00F6               	movwf	interleave_reg_addr@reg_addr
 16957                           
 16958                           ;BME280_driver/bme280.c: 1343: static void interleave_reg_addr(const uint8_t *reg_addr, 
      +                          uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len);BME280_driver/bme280.c: 1344: 
      +                          {;BME280_driver/bme280.c: 1345:     uint8_t index;;BME280_driver/bme280.c: 1347:     for
      +                           (index = 1; index < len; index++)
 16959  1C38  01F7               	clrf	interleave_reg_addr@index
 16960  1C39  0AF7               	incf	interleave_reg_addr@index,f
 16961  1C3A                     l3908:	
 16962  1C3A  0872               	movf	interleave_reg_addr@len,w
 16963  1C3B  0277               	subwf	interleave_reg_addr@index,w
 16964  1C3C  1803               	btfsc	3,0
 16965  1C3D  0008               	return
 16966                           
 16967                           ;BME280_driver/bme280.c: 1348:     {;BME280_driver/bme280.c: 1349:         temp_buff[(in
      +                          dex * 2) - 1] = reg_addr[index];
 16968  1C3E  0877               	movf	interleave_reg_addr@index,w
 16969  1C3F  0776               	addwf	interleave_reg_addr@reg_addr,w
 16970  1C40  00F3               	movwf	??_interleave_reg_addr
 16971  1C41  0873               	movf	??_interleave_reg_addr,w
 16972  1C42  0086               	movwf	6
 16973  1C43  0187               	clrf	7
 16974  1C44  0801               	movf	1,w
 16975  1C45  00F4               	movwf	??_interleave_reg_addr+1
 16976  1C46  3577               	lslf	interleave_reg_addr@index,w
 16977  1C47  0770               	addwf	interleave_reg_addr@temp_buff,w
 16978  1C48  00F5               	movwf	??_interleave_reg_addr+2
 16979  1C49  0875               	movf	??_interleave_reg_addr+2,w
 16980  1C4A  3EFF               	addlw	-1
 16981  1C4B  0086               	movwf	6
 16982  1C4C  0187               	clrf	7
 16983  1C4D  0874               	movf	??_interleave_reg_addr+1,w
 16984  1C4E  0081               	movwf	1
 16985                           
 16986                           ;BME280_driver/bme280.c: 1350:         temp_buff[index * 2] = reg_data[index];
 16987  1C4F  0877               	movf	interleave_reg_addr@index,w
 16988  1C50  0771               	addwf	interleave_reg_addr@reg_data,w
 16989  1C51  00F3               	movwf	??_interleave_reg_addr
 16990  1C52  0873               	movf	??_interleave_reg_addr,w
 16991  1C53  0086               	movwf	6
 16992  1C54  0187               	clrf	7
 16993  1C55  0801               	movf	1,w
 16994  1C56  00F4               	movwf	??_interleave_reg_addr+1
 16995  1C57  3577               	lslf	interleave_reg_addr@index,w
 16996  1C58  0770               	addwf	interleave_reg_addr@temp_buff,w
 16997  1C59  00F5               	movwf	??_interleave_reg_addr+2
 16998  1C5A  0875               	movf	??_interleave_reg_addr+2,w
 16999  1C5B  0086               	movwf	6
 17000  1C5C  0187               	clrf	7
 17001  1C5D  0874               	movf	??_interleave_reg_addr+1,w
 17002  1C5E  0081               	movwf	1
 17003                           
 17004                           ;BME280_driver/bme280.c: 1351:     }
 17005  1C5F  3001               	movlw	1
 17006  1C60  00F3               	movwf	??_interleave_reg_addr
 17007  1C61  0873               	movf	??_interleave_reg_addr,w
 17008  1C62  07F7               	addwf	interleave_reg_addr@index,f
 17009  1C63  2C3A               	goto	l3908
 17010  1C64                     __end_of_interleave_reg_addr:	
 17011                           
 17012                           	psect	text61
 17013  142B                     __ptext61:	
 17014 ;; *************** function _WriteEnvSensor *****************
 17015 ;; Defined at:
 17016 ;;		line 156 in file "bme280_i2c.c"
 17017 ;; Parameters:    Size  Location     Type
 17018 ;;  dev_id          1   15[BANK0 ] unsigned char 
 17019 ;;  reg_addr        1   16[BANK0 ] unsigned char 
 17020 ;;  reg_data        1   17[BANK0 ] PTR unsigned char 
 17021 ;;		 -> bme280_set_regs@temp_buff(20), 
 17022 ;;  len             2   18[BANK0 ] unsigned short 
 17023 ;; Auto vars:     Size  Location     Type
 17024 ;;  i               2   25[BANK0 ] int 
 17025 ;;  rslt            1   24[BANK0 ] char 
 17026 ;; Return value:  Size  Location     Type
 17027 ;;                  1    wreg      char 
 17028 ;; Registers used:
 17029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17030 ;; Tracked objects:
 17031 ;;		On entry : 1F/0
 17032 ;;		On exit  : 1F/0
 17033 ;;		Unchanged: 0/0
 17034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17035 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17036 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17037 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17038 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17039 ;;Total ram usage:       12 bytes
 17040 ;; Hardware stack levels used:    1
 17041 ;; Hardware stack levels required when called:    8
 17042 ;; This function calls:
 17043 ;;		_DebugAlert
 17044 ;;		_I2C_Stop
 17045 ;;		_I2C_WriteByte
 17046 ;; This function is called by:
 17047 ;;		_BME280_Init
 17048 ;;		_bme280_set_regs
 17049 ;; This function uses a non-reentrant model
 17050 ;;
 17051                           
 17052                           
 17053                           ;psect for function _WriteEnvSensor
 17054  142B                     _WriteEnvSensor:	
 17055                           
 17056                           ;bme280_i2c.c: 156: int8_t WriteEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg
      +                          _data, uint16_t len);bme280_i2c.c: 157: {;bme280_i2c.c: 158:     int8_t rslt = 0;
 17057                           
 17058                           ;incstack = 0
 17059                           ; Regs used in _WriteEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17060  142B  01B8               	clrf	WriteEnvSensor@rslt
 17061                           
 17062                           ;bme280_i2c.c: 160:     PIR1bits.SSP1IF = 0;
 17063  142C  1190               	bcf	16,3	;volatile
 17064                           
 17065                           ;bme280_i2c.c: 163:     SSP1CON2bits.SEN = 1;
 17066  142D  0024               	movlb	4	; select bank4
 17067  142E  1416               	bsf	22,0	;volatile
 17068                           
 17069                           ;bme280_i2c.c: 164:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if 
      +                          (ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1
      +                          IF = 0;;
 17070  142F  0021               	movlb	1	; select bank1
 17071  1430  086B               	movf	(_ticks+3)^(0+128),w
 17072  1431  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 17073  1432  086A               	movf	(_ticks+2)^(0+128),w
 17074  1433  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 17075  1434  0869               	movf	(_ticks+1)^(0+128),w
 17076  1435  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 17077  1436  0868               	movf	_ticks^(0+128),w
 17078  1437  00EC               	movwf	___g_timeout_start^(0+128)
 17079  1438                     l645:	
 17080  1438  0020               	movlb	0	; select bank0
 17081  1439  1990               	btfsc	16,3	;volatile
 17082  143A  2C6A               	goto	l648
 17083  143B  0021               	movlb	1	; select bank1
 17084  143C  086C               	movf	___g_timeout_start^(0+128),w
 17085  143D  0268               	subwf	_ticks^(0+128),w
 17086  143E  0020               	movlb	0	; select bank0
 17087  143F  00B4               	movwf	??_WriteEnvSensor
 17088  1440  0021               	movlb	1	; select bank1
 17089  1441  086D               	movf	(___g_timeout_start+1)^(0+128),w
 17090  1442  3B69               	subwfb	(_ticks+1)^(0+128),w
 17091  1443  0020               	movlb	0	; select bank0
 17092  1444  00B5               	movwf	??_WriteEnvSensor+1
 17093  1445  0021               	movlb	1	; select bank1
 17094  1446  086E               	movf	(___g_timeout_start+2)^(0+128),w
 17095  1447  3B6A               	subwfb	(_ticks+2)^(0+128),w
 17096  1448  0020               	movlb	0	; select bank0
 17097  1449  00B6               	movwf	??_WriteEnvSensor+2
 17098  144A  0021               	movlb	1	; select bank1
 17099  144B  086F               	movf	(___g_timeout_start+3)^(0+128),w
 17100  144C  3B6B               	subwfb	(_ticks+3)^(0+128),w
 17101  144D  0020               	movlb	0	; select bank0
 17102  144E  00B7               	movwf	??_WriteEnvSensor+3
 17103  144F  0837               	movf	??_WriteEnvSensor+3,w
 17104  1450  1D03               	btfss	3,2
 17105  1451  2C5B               	goto	l3962
 17106  1452  0836               	movf	??_WriteEnvSensor+2,w
 17107  1453  1D03               	btfss	3,2
 17108  1454  2C5B               	goto	l3962
 17109  1455  30B9               	movlw	185
 17110  1456  0234               	subwf	??_WriteEnvSensor,w
 17111  1457  300B               	movlw	11
 17112  1458  3B35               	subwfb	??_WriteEnvSensor+1,w
 17113  1459  1C03               	btfss	3,0
 17114  145A  2C38               	goto	l645
 17115  145B                     l3962:	
 17116  145B  30C8               	movlw	200
 17117  145C  00A0               	movwf	DebugAlert@delay_high
 17118  145D  3000               	movlw	0
 17119  145E  00A1               	movwf	DebugAlert@delay_high+1
 17120  145F  30C8               	movlw	200
 17121  1460  00A2               	movwf	DebugAlert@delay_low
 17122  1461  3000               	movlw	0
 17123  1462  00A3               	movwf	DebugAlert@delay_low+1
 17124  1463  3003               	movlw	3
 17125  1464  00B4               	movwf	??_WriteEnvSensor
 17126  1465  0834               	movf	??_WriteEnvSensor,w
 17127  1466  00A4               	movwf	DebugAlert@num_flashes
 17128  1467  319B  23E1  3194   	fcall	_DebugAlert
 17129  146A                     l648:	
 17130  146A  0020               	movlb	0	; select bank0
 17131  146B  1190               	bcf	16,3	;volatile
 17132                           
 17133                           ;bme280_i2c.c: 167:     I2C_WriteByte(dev_id<<1);
 17134  146C  352F               	lslf	WriteEnvSensor@dev_id,w
 17135  146D  319F  2728  3194   	fcall	_I2C_WriteByte
 17136                           
 17137                           ;bme280_i2c.c: 170:     I2C_WriteByte(reg_addr);
 17138  1470  0020               	movlb	0	; select bank0
 17139  1471  0830               	movf	WriteEnvSensor@reg_addr,w
 17140  1472  319F  2728  3194   	fcall	_I2C_WriteByte
 17141                           
 17142                           ;bme280_i2c.c: 172:     for(int i = 0; i < len; i++){
 17143  1475  0020               	movlb	0	; select bank0
 17144  1476  01B9               	clrf	WriteEnvSensor@i
 17145  1477  01BA               	clrf	WriteEnvSensor@i+1
 17146  1478                     l3972:	
 17147  1478  0833               	movf	WriteEnvSensor@len+1,w
 17148  1479  023A               	subwf	WriteEnvSensor@i+1,w
 17149  147A  1D03               	skipz
 17150  147B  2C7E               	goto	u4215
 17151  147C  0832               	movf	WriteEnvSensor@len,w
 17152  147D  0239               	subwf	WriteEnvSensor@i,w
 17153  147E                     u4215:	
 17154  147E  1803               	btfsc	3,0
 17155  147F  2C90               	goto	l3974
 17156                           
 17157                           ;bme280_i2c.c: 173:         I2C_WriteByte(reg_data[i]);
 17158  1480  0839               	movf	WriteEnvSensor@i,w
 17159  1481  0731               	addwf	WriteEnvSensor@reg_data,w
 17160  1482  00B4               	movwf	??_WriteEnvSensor
 17161  1483  0834               	movf	??_WriteEnvSensor,w
 17162  1484  0086               	movwf	6
 17163  1485  0187               	clrf	7
 17164  1486  0801               	movf	1,w
 17165  1487  319F  2728  3194   	fcall	_I2C_WriteByte
 17166                           
 17167                           ;bme280_i2c.c: 174:     }
 17168  148A  3001               	movlw	1
 17169  148B  0020               	movlb	0	; select bank0
 17170  148C  07B9               	addwf	WriteEnvSensor@i,f
 17171  148D  3000               	movlw	0
 17172  148E  3DBA               	addwfc	WriteEnvSensor@i+1,f
 17173  148F  2C78               	goto	l3972
 17174  1490                     l3974:	
 17175                           
 17176                           ;bme280_i2c.c: 176:     I2C_Stop();
 17177  1490  319D  25E2         	fcall	_I2C_Stop
 17178                           
 17179                           ;bme280_i2c.c: 178:     return rslt;
 17180  1492  0838               	movf	WriteEnvSensor@rslt,w
 17181  1493  0008               	return
 17182  1494                     __end_of_WriteEnvSensor:	
 17183                           
 17184                           	psect	text62
 17185  1F28                     __ptext62:	
 17186 ;; *************** function _I2C_WriteByte *****************
 17187 ;; Defined at:
 17188 ;;		line 31 in file "bme280_i2c.c"
 17189 ;; Parameters:    Size  Location     Type
 17190 ;;  data            1    wreg     unsigned char 
 17191 ;; Auto vars:     Size  Location     Type
 17192 ;;  data            1   13[COMMON] unsigned char 
 17193 ;; Return value:  Size  Location     Type
 17194 ;;                  1    wreg      void 
 17195 ;; Registers used:
 17196 ;;		wreg, status,2, status,0, pclath, cstack
 17197 ;; Tracked objects:
 17198 ;;		On entry : 1F/0
 17199 ;;		On exit  : 1B/0
 17200 ;;		Unchanged: 0/0
 17201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17204 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17205 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17206 ;;Total ram usage:        5 bytes
 17207 ;; Hardware stack levels used:    1
 17208 ;; Hardware stack levels required when called:    7
 17209 ;; This function calls:
 17210 ;;		_DebugAlert
 17211 ;;		_I2C_UserAlert
 17212 ;; This function is called by:
 17213 ;;		_ReadEnvSensor
 17214 ;;		_WriteEnvSensor
 17215 ;; This function uses a non-reentrant model
 17216 ;;
 17217                           
 17218                           
 17219                           ;psect for function _I2C_WriteByte
 17220  1F28                     _I2C_WriteByte:	
 17221                           
 17222                           ;incstack = 0
 17223                           ; Regs used in _I2C_WriteByte: [wreg+status,2+status,0+pclath+cstack]
 17224                           ;I2C_WriteByte@data stored from wreg
 17225  1F28  00FD               	movwf	I2C_WriteByte@data
 17226                           
 17227                           ;bme280_i2c.c: 31: void I2C_WriteByte(uint8_t data);bme280_i2c.c: 32: {;bme280_i2c.c: 33
      +                          :     SSP1BUF = data;
 17228  1F29  087D               	movf	I2C_WriteByte@data,w
 17229  1F2A  0024               	movlb	4	; select bank4
 17230  1F2B  0091               	movwf	17	;volatile
 17231                           
 17232                           ;bme280_i2c.c: 34:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if (
      +                          ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1I
      +                          F = 0;;
 17233  1F2C  0021               	movlb	1	; select bank1
 17234  1F2D  086B               	movf	(_ticks+3)^(0+128),w
 17235  1F2E  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 17236  1F2F  086A               	movf	(_ticks+2)^(0+128),w
 17237  1F30  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 17238  1F31  0869               	movf	(_ticks+1)^(0+128),w
 17239  1F32  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 17240  1F33  0868               	movf	_ticks^(0+128),w
 17241  1F34  00EC               	movwf	___g_timeout_start^(0+128)
 17242  1F35                     l593:	
 17243  1F35  0020               	movlb	0	; select bank0
 17244  1F36  1990               	btfsc	16,3	;volatile
 17245  1F37  2F67               	goto	l596
 17246  1F38  0021               	movlb	1	; select bank1
 17247  1F39  086C               	movf	___g_timeout_start^(0+128),w
 17248  1F3A  0268               	subwf	_ticks^(0+128),w
 17249  1F3B  0020               	movlb	0	; select bank0
 17250  1F3C  00AB               	movwf	??_I2C_WriteByte
 17251  1F3D  0021               	movlb	1	; select bank1
 17252  1F3E  086D               	movf	(___g_timeout_start+1)^(0+128),w
 17253  1F3F  3B69               	subwfb	(_ticks+1)^(0+128),w
 17254  1F40  0020               	movlb	0	; select bank0
 17255  1F41  00AC               	movwf	??_I2C_WriteByte+1
 17256  1F42  0021               	movlb	1	; select bank1
 17257  1F43  086E               	movf	(___g_timeout_start+2)^(0+128),w
 17258  1F44  3B6A               	subwfb	(_ticks+2)^(0+128),w
 17259  1F45  0020               	movlb	0	; select bank0
 17260  1F46  00AD               	movwf	??_I2C_WriteByte+2
 17261  1F47  0021               	movlb	1	; select bank1
 17262  1F48  086F               	movf	(___g_timeout_start+3)^(0+128),w
 17263  1F49  3B6B               	subwfb	(_ticks+3)^(0+128),w
 17264  1F4A  0020               	movlb	0	; select bank0
 17265  1F4B  00AE               	movwf	??_I2C_WriteByte+3
 17266  1F4C  082E               	movf	??_I2C_WriteByte+3,w
 17267  1F4D  1D03               	btfss	3,2
 17268  1F4E  2F58               	goto	l3858
 17269  1F4F  082D               	movf	??_I2C_WriteByte+2,w
 17270  1F50  1D03               	btfss	3,2
 17271  1F51  2F58               	goto	l3858
 17272  1F52  30B9               	movlw	185
 17273  1F53  022B               	subwf	??_I2C_WriteByte,w
 17274  1F54  300B               	movlw	11
 17275  1F55  3B2C               	subwfb	??_I2C_WriteByte+1,w
 17276  1F56  1C03               	btfss	3,0
 17277  1F57  2F35               	goto	l593
 17278  1F58                     l3858:	
 17279  1F58  30C8               	movlw	200
 17280  1F59  00A0               	movwf	DebugAlert@delay_high
 17281  1F5A  3000               	movlw	0
 17282  1F5B  00A1               	movwf	DebugAlert@delay_high+1
 17283  1F5C  30C8               	movlw	200
 17284  1F5D  00A2               	movwf	DebugAlert@delay_low
 17285  1F5E  3000               	movlw	0
 17286  1F5F  00A3               	movwf	DebugAlert@delay_low+1
 17287  1F60  3003               	movlw	3
 17288  1F61  00AB               	movwf	??_I2C_WriteByte
 17289  1F62  082B               	movf	??_I2C_WriteByte,w
 17290  1F63  00A4               	movwf	DebugAlert@num_flashes
 17291  1F64  319B  23E1  319F   	fcall	_DebugAlert
 17292  1F67                     l596:	
 17293  1F67  0020               	movlb	0	; select bank0
 17294  1F68  1190               	bcf	16,3	;volatile
 17295                           
 17296                           ;bme280_i2c.c: 37:     if(SSP1CON2bits.ACKSTAT!=0){
 17297  1F69  0024               	movlb	4	; select bank4
 17298  1F6A  1F16               	btfss	22,6	;volatile
 17299  1F6B  0008               	return
 17300                           
 17301                           ;bme280_i2c.c: 38:         I2C_UserAlert(I2C_ERROR_WRITE_NO_ACK);
 17302  1F6C  3001               	movlw	1
 17303  1F6D  3187  27FD         	fcall	_I2C_UserAlert
 17304  1F6F  0008               	return
 17305  1F70                     __end_of_I2C_WriteByte:	
 17306                           
 17307                           	psect	text63
 17308  07FD                     __ptext63:	
 17309 ;; *************** function _I2C_UserAlert *****************
 17310 ;; Defined at:
 17311 ;;		line 67 in file "bme280_i2c.c"
 17312 ;; Parameters:    Size  Location     Type
 17313 ;;  status          1    wreg     enum E10053
 17314 ;; Auto vars:     Size  Location     Type
 17315 ;;  status          1    0[COMMON] enum E10053
 17316 ;; Return value:  Size  Location     Type
 17317 ;;                  1    wreg      void 
 17318 ;; Registers used:
 17319 ;;		wreg, status,2, status,0, pclath, cstack
 17320 ;; Tracked objects:
 17321 ;;		On entry : 1F/4
 17322 ;;		On exit  : 1F/0
 17323 ;;		Unchanged: 0/0
 17324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17329 ;;Total ram usage:        0 bytes
 17330 ;; Hardware stack levels used:    1
 17331 ;; Hardware stack levels required when called:    6
 17332 ;; This function calls:
 17333 ;;		_I2C_Stop
 17334 ;; This function is called by:
 17335 ;;		_I2C_WriteByte
 17336 ;; This function uses a non-reentrant model
 17337 ;;
 17338                           
 17339                           
 17340                           ;psect for function _I2C_UserAlert
 17341  07FD                     _I2C_UserAlert:	
 17342                           
 17343                           ;bme280_i2c.c: 67: void I2C_UserAlert(I2C_ERROR status);bme280_i2c.c: 68: {;bme280_i2c.c
      +                          : 69:     I2C_Stop();
 17344                           
 17345                           ;incstack = 0
 17346                           ; Regs used in _I2C_UserAlert: [wreg+status,2+status,0+pclath+cstack]
 17347  07FD  319D  25E2         	fcall	_I2C_Stop
 17348  07FF  0008               	return
 17349  0800                     __end_of_I2C_UserAlert:	
 17350                           
 17351                           	psect	text64
 17352  1DE2                     __ptext64:	
 17353 ;; *************** function _I2C_Stop *****************
 17354 ;; Defined at:
 17355 ;;		line 61 in file "bme280_i2c.c"
 17356 ;; Parameters:    Size  Location     Type
 17357 ;;		None
 17358 ;; Auto vars:     Size  Location     Type
 17359 ;;		None
 17360 ;; Return value:  Size  Location     Type
 17361 ;;                  1    wreg      void 
 17362 ;; Registers used:
 17363 ;;		wreg, status,2, status,0, pclath, cstack
 17364 ;; Tracked objects:
 17365 ;;		On entry : 1B/0
 17366 ;;		On exit  : 1F/0
 17367 ;;		Unchanged: 0/0
 17368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17371 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17372 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17373 ;;Total ram usage:        4 bytes
 17374 ;; Hardware stack levels used:    1
 17375 ;; Hardware stack levels required when called:    5
 17376 ;; This function calls:
 17377 ;;		_DebugAlert
 17378 ;; This function is called by:
 17379 ;;		_I2C_UserAlert
 17380 ;;		_ReadEnvSensor
 17381 ;;		_WriteEnvSensor
 17382 ;; This function uses a non-reentrant model
 17383 ;;
 17384                           
 17385                           
 17386                           ;psect for function _I2C_Stop
 17387  1DE2                     _I2C_Stop:	
 17388                           
 17389                           ;bme280_i2c.c: 63:     SSP1CON2bits.PEN = 1;
 17390                           
 17391                           ;incstack = 0
 17392                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
 17393  1DE2  0024               	movlb	4	; select bank4
 17394  1DE3  1516               	bsf	22,2	;volatile
 17395                           
 17396                           ;bme280_i2c.c: 64:     __g_timeout_start = ticks; while (!(PIR1bits.SSP1IF != 0)) { if (
      +                          ticks - __g_timeout_start > 3000) { DebugAlert(200, 200, 3);; break; } }; PIR1bits.SSP1I
      +                          F = 0;;
 17397  1DE4  0021               	movlb	1	; select bank1
 17398  1DE5  086B               	movf	(_ticks+3)^(0+128),w
 17399  1DE6  00EF               	movwf	(___g_timeout_start+3)^(0+128)
 17400  1DE7  086A               	movf	(_ticks+2)^(0+128),w
 17401  1DE8  00EE               	movwf	(___g_timeout_start+2)^(0+128)
 17402  1DE9  0869               	movf	(_ticks+1)^(0+128),w
 17403  1DEA  00ED               	movwf	(___g_timeout_start+1)^(0+128)
 17404  1DEB  0868               	movf	_ticks^(0+128),w
 17405  1DEC  00EC               	movwf	___g_timeout_start^(0+128)
 17406  1DED                     l612:	
 17407  1DED  0020               	movlb	0	; select bank0
 17408  1DEE  1990               	btfsc	16,3	;volatile
 17409  1DEF  2E1E               	goto	l615
 17410  1DF0  0021               	movlb	1	; select bank1
 17411  1DF1  086C               	movf	___g_timeout_start^(0+128),w
 17412  1DF2  0268               	subwf	_ticks^(0+128),w
 17413  1DF3  0020               	movlb	0	; select bank0
 17414  1DF4  00A7               	movwf	??_I2C_Stop
 17415  1DF5  0021               	movlb	1	; select bank1
 17416  1DF6  086D               	movf	(___g_timeout_start+1)^(0+128),w
 17417  1DF7  3B69               	subwfb	(_ticks+1)^(0+128),w
 17418  1DF8  0020               	movlb	0	; select bank0
 17419  1DF9  00A8               	movwf	??_I2C_Stop+1
 17420  1DFA  0021               	movlb	1	; select bank1
 17421  1DFB  086E               	movf	(___g_timeout_start+2)^(0+128),w
 17422  1DFC  3B6A               	subwfb	(_ticks+2)^(0+128),w
 17423  1DFD  0020               	movlb	0	; select bank0
 17424  1DFE  00A9               	movwf	??_I2C_Stop+2
 17425  1DFF  0021               	movlb	1	; select bank1
 17426  1E00  086F               	movf	(___g_timeout_start+3)^(0+128),w
 17427  1E01  3B6B               	subwfb	(_ticks+3)^(0+128),w
 17428  1E02  0020               	movlb	0	; select bank0
 17429  1E03  00AA               	movwf	??_I2C_Stop+3
 17430  1E04  082A               	movf	??_I2C_Stop+3,w
 17431  1E05  1D03               	btfss	3,2
 17432  1E06  2E10               	goto	l3850
 17433  1E07  0829               	movf	??_I2C_Stop+2,w
 17434  1E08  1D03               	btfss	3,2
 17435  1E09  2E10               	goto	l3850
 17436  1E0A  30B9               	movlw	185
 17437  1E0B  0227               	subwf	??_I2C_Stop,w
 17438  1E0C  300B               	movlw	11
 17439  1E0D  3B28               	subwfb	??_I2C_Stop+1,w
 17440  1E0E  1C03               	btfss	3,0
 17441  1E0F  2DED               	goto	l612
 17442  1E10                     l3850:	
 17443  1E10  30C8               	movlw	200
 17444  1E11  00A0               	movwf	DebugAlert@delay_high
 17445  1E12  3000               	movlw	0
 17446  1E13  00A1               	movwf	DebugAlert@delay_high+1
 17447  1E14  30C8               	movlw	200
 17448  1E15  00A2               	movwf	DebugAlert@delay_low
 17449  1E16  3000               	movlw	0
 17450  1E17  00A3               	movwf	DebugAlert@delay_low+1
 17451  1E18  3003               	movlw	3
 17452  1E19  00A7               	movwf	??_I2C_Stop
 17453  1E1A  0827               	movf	??_I2C_Stop,w
 17454  1E1B  00A4               	movwf	DebugAlert@num_flashes
 17455  1E1C  319B  23E1         	fcall	_DebugAlert
 17456  1E1E                     l615:	
 17457  1E1E  0020               	movlb	0	; select bank0
 17458  1E1F  1190               	bcf	16,3	;volatile
 17459  1E20  0008               	return
 17460  1E21                     __end_of_I2C_Stop:	
 17461                           
 17462                           	psect	text65
 17463  1BE1                     __ptext65:	
 17464 ;; *************** function _DebugAlert *****************
 17465 ;; Defined at:
 17466 ;;		line 4 in file "debug.c"
 17467 ;; Parameters:    Size  Location     Type
 17468 ;;  delay_high      2    0[BANK0 ] unsigned int 
 17469 ;;  delay_low       2    2[BANK0 ] unsigned int 
 17470 ;;  num_flashes     1    4[BANK0 ] unsigned char 
 17471 ;; Auto vars:     Size  Location     Type
 17472 ;;  i               2    5[BANK0 ] int 
 17473 ;; Return value:  Size  Location     Type
 17474 ;;                  1    wreg      void 
 17475 ;; Registers used:
 17476 ;;		wreg, status,2, status,0, pclath, cstack
 17477 ;; Tracked objects:
 17478 ;;		On entry : 1F/0
 17479 ;;		On exit  : 0/0
 17480 ;;		Unchanged: 0/0
 17481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17482 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;Total ram usage:        8 bytes
 17487 ;; Hardware stack levels used:    1
 17488 ;; Hardware stack levels required when called:    4
 17489 ;; This function calls:
 17490 ;;		_Sleep
 17491 ;; This function is called by:
 17492 ;;		_I2C_WriteByte
 17493 ;;		_I2C_ReadByte
 17494 ;;		_I2C_Stop
 17495 ;;		_BME280_Init
 17496 ;;		_ReadEnvSensor
 17497 ;;		_WriteEnvSensor
 17498 ;; This function uses a non-reentrant model
 17499 ;;
 17500                           
 17501                           
 17502                           ;psect for function _DebugAlert
 17503  1BE1                     _DebugAlert:	
 17504                           
 17505                           ;debug.c: 4: void DebugAlert(unsigned int delay_high, unsigned int delay_low, uint8_t nu
      +                          m_flashes);debug.c: 5: {;debug.c: 7:     for (int i = 0; i < num_flashes; i++)
 17506                           
 17507                           ;incstack = 0
 17508                           ; Regs used in _DebugAlert: [wreg+status,2+status,0+pclath+cstack]
 17509  1BE1  01A5               	clrf	DebugAlert@i
 17510  1BE2  01A6               	clrf	DebugAlert@i+1
 17511  1BE3                     l3842:	
 17512  1BE3  0826               	movf	DebugAlert@i+1,w
 17513  1BE4  3A80               	xorlw	128
 17514  1BE5  00FC               	movwf	??_DebugAlert
 17515  1BE6  3080               	movlw	128
 17516  1BE7  027C               	subwf	??_DebugAlert,w
 17517  1BE8  1D03               	skipz
 17518  1BE9  2BEC               	goto	u3985
 17519  1BEA  0824               	movf	DebugAlert@num_flashes,w
 17520  1BEB  0225               	subwf	DebugAlert@i,w
 17521  1BEC                     u3985:	
 17522  1BEC  1803               	btfsc	3,0
 17523  1BED  0008               	return
 17524                           
 17525                           ;debug.c: 8:     {;debug.c: 9:         do { LATCbits.LATC5 = 1; } while(0);
 17526  1BEE  0022               	movlb	2	; select bank2
 17527  1BEF  168E               	bsf	14,5	;volatile
 17528                           
 17529                           ;debug.c: 10:         Sleep(delay_high);
 17530  1BF0  0020               	movlb	0	; select bank0
 17531  1BF1  0820               	movf	DebugAlert@delay_high,w
 17532  1BF2  00F0               	movwf	Sleep@ms
 17533  1BF3  0821               	movf	DebugAlert@delay_high+1,w
 17534  1BF4  00F1               	movwf	Sleep@ms+1
 17535  1BF5  01F2               	clrf	Sleep@ms+2
 17536  1BF6  01F3               	clrf	Sleep@ms+3
 17537  1BF7  319B  23B6  319B   	fcall	_Sleep
 17538  1BFA  0022               	movlb	2	; select bank2
 17539  1BFB  128E               	bcf	14,5	;volatile
 17540                           
 17541                           ;debug.c: 12:         Sleep(delay_low);
 17542  1BFC  0020               	movlb	0	; select bank0
 17543  1BFD  0822               	movf	DebugAlert@delay_low,w
 17544  1BFE  00F0               	movwf	Sleep@ms
 17545  1BFF  0823               	movf	DebugAlert@delay_low+1,w
 17546  1C00  00F1               	movwf	Sleep@ms+1
 17547  1C01  01F2               	clrf	Sleep@ms+2
 17548  1C02  01F3               	clrf	Sleep@ms+3
 17549  1C03  319B  23B6  319B   	fcall	_Sleep
 17550                           
 17551                           ;debug.c: 13:     }
 17552  1C06  3001               	movlw	1
 17553  1C07  0020               	movlb	0	; select bank0
 17554  1C08  07A5               	addwf	DebugAlert@i,f
 17555  1C09  3000               	movlw	0
 17556  1C0A  3DA6               	addwfc	DebugAlert@i+1,f
 17557  1C0B  2BE3               	goto	l3842
 17558  1C0C                     __end_of_DebugAlert:	
 17559                           
 17560                           	psect	text66
 17561  1BB6                     __ptext66:	
 17562 ;; *************** function _Sleep *****************
 17563 ;; Defined at:
 17564 ;;		line 17 in file "timing.c"
 17565 ;; Parameters:    Size  Location     Type
 17566 ;;  ms              4    0[COMMON] unsigned long 
 17567 ;; Auto vars:     Size  Location     Type
 17568 ;;  start           4    8[COMMON] unsigned long 
 17569 ;; Return value:  Size  Location     Type
 17570 ;;                  1    wreg      void 
 17571 ;; Registers used:
 17572 ;;		wreg
 17573 ;; Tracked objects:
 17574 ;;		On entry : 1F/0
 17575 ;;		On exit  : 1F/1
 17576 ;;		Unchanged: 0/0
 17577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17579 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17580 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17581 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17582 ;;Total ram usage:       12 bytes
 17583 ;; Hardware stack levels used:    1
 17584 ;; Hardware stack levels required when called:    3
 17585 ;; This function calls:
 17586 ;;		Nothing
 17587 ;; This function is called by:
 17588 ;;		_BME280_Init
 17589 ;;		_DebugAlert
 17590 ;;		_bme280_soft_reset
 17591 ;;		_bme280_init
 17592 ;; This function uses a non-reentrant model
 17593 ;;
 17594                           
 17595                           
 17596                           ;psect for function _Sleep
 17597  1BB6                     _Sleep:	
 17598                           
 17599                           ;timing.c: 17: void Sleep(uint32_t ms);timing.c: 18: {;timing.c: 19:     unsigned long s
      +                          tart = ticks;
 17600                           
 17601                           ;incstack = 0
 17602                           ; Regs used in _Sleep: [wreg]
 17603  1BB6  0021               	movlb	1	; select bank1
 17604  1BB7  086B               	movf	(_ticks+3)^(0+128),w
 17605  1BB8  00FB               	movwf	Sleep@start+3
 17606  1BB9  086A               	movf	(_ticks+2)^(0+128),w
 17607  1BBA  00FA               	movwf	Sleep@start+2
 17608  1BBB  0869               	movf	(_ticks+1)^(0+128),w
 17609  1BBC  00F9               	movwf	Sleep@start+1
 17610  1BBD  0868               	movf	_ticks^(0+128),w
 17611  1BBE  00F8               	movwf	Sleep@start
 17612  1BBF                     l669:	
 17613                           ;timing.c: 23:     }
 17614                           
 17615                           ;timing.c: 20:     while (ticks - start < ms)
 17616                           
 17617                           
 17618                           ;timing.c: 20:     while (ticks - start < ms)
 17619  1BBF  0878               	movf	Sleep@start,w
 17620  1BC0  0021               	movlb	1	; select bank1
 17621  1BC1  0268               	subwf	_ticks^(0+128),w
 17622  1BC2  00F4               	movwf	??_Sleep
 17623  1BC3  0879               	movf	Sleep@start+1,w
 17624  1BC4  3B69               	subwfb	(_ticks+1)^(0+128),w
 17625  1BC5  00F5               	movwf	??_Sleep+1
 17626  1BC6  087A               	movf	Sleep@start+2,w
 17627  1BC7  3B6A               	subwfb	(_ticks+2)^(0+128),w
 17628  1BC8  00F6               	movwf	??_Sleep+2
 17629  1BC9  087B               	movf	Sleep@start+3,w
 17630  1BCA  3B6B               	subwfb	(_ticks+3)^(0+128),w
 17631  1BCB  00F7               	movwf	??_Sleep+3
 17632  1BCC  0873               	movf	Sleep@ms+3,w
 17633  1BCD  0277               	subwf	??_Sleep+3,w
 17634  1BCE  1D03               	skipz
 17635  1BCF  2BDA               	goto	u3975
 17636  1BD0  0872               	movf	Sleep@ms+2,w
 17637  1BD1  0276               	subwf	??_Sleep+2,w
 17638  1BD2  1D03               	skipz
 17639  1BD3  2BDA               	goto	u3975
 17640  1BD4  0871               	movf	Sleep@ms+1,w
 17641  1BD5  0275               	subwf	??_Sleep+1,w
 17642  1BD6  1D03               	skipz
 17643  1BD7  2BDA               	goto	u3975
 17644  1BD8  0870               	movf	Sleep@ms,w
 17645  1BD9  0274               	subwf	??_Sleep,w
 17646  1BDA                     u3975:	
 17647  1BDA  1803               	btfsc	3,0
 17648  1BDB  0008               	return
 17649                           
 17650                           ;timing.c: 21:     {;timing.c: 22:         _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;
 17651  1BDC  30C8               	movlw	200
 17652  1BDD                     u5297:	
 17653  1BDD  3200               	nop2
 17654  1BDE  0B89               	decfsz	9,f
 17655  1BDF  2BDD               	goto	u5297
 17656  1BE0  2BBF               	goto	l669
 17657  1BE1                     __end_of_Sleep:	
 17658                           
 17659                           	psect	text67
 17660  1A2C                     __ptext67:	
 17661 ;; *************** function _I2C_Init *****************
 17662 ;; Defined at:
 17663 ;;		line 16 in file "bme280_i2c.c"
 17664 ;; Parameters:    Size  Location     Type
 17665 ;;		None
 17666 ;; Auto vars:     Size  Location     Type
 17667 ;;		None
 17668 ;; Return value:  Size  Location     Type
 17669 ;;                  1    wreg      void 
 17670 ;; Registers used:
 17671 ;;		wreg, status,2
 17672 ;; Tracked objects:
 17673 ;;		On entry : 1F/2
 17674 ;;		On exit  : 1F/4
 17675 ;;		Unchanged: 0/0
 17676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;Total ram usage:        0 bytes
 17682 ;; Hardware stack levels used:    1
 17683 ;; Hardware stack levels required when called:    3
 17684 ;; This function calls:
 17685 ;;		Nothing
 17686 ;; This function is called by:
 17687 ;;		_BME280_Init
 17688 ;; This function uses a non-reentrant model
 17689 ;;
 17690                           
 17691                           
 17692                           ;psect for function _I2C_Init
 17693  1A2C                     _I2C_Init:	
 17694                           
 17695                           ;bme280_i2c.c: 18:     SSPCLKPPS = 0x0E;
 17696                           
 17697                           ;incstack = 0
 17698                           ; Regs used in _I2C_Init: [wreg+status,2]
 17699  1A2C  300E               	movlw	14
 17700  1A2D  003C               	movlb	28	; select bank28
 17701  1A2E  00A0               	movwf	32	;volatile
 17702                           
 17703                           ;bme280_i2c.c: 19:     SSPDATPPS = 0x0C;
 17704  1A2F  300C               	movlw	12
 17705  1A30  00A1               	movwf	33	;volatile
 17706                           
 17707                           ;bme280_i2c.c: 20:     RB6PPS = 0x10;
 17708  1A31  3010               	movlw	16
 17709  1A32  003D               	movlb	29	; select bank29
 17710  1A33  009E               	movwf	30	;volatile
 17711                           
 17712                           ;bme280_i2c.c: 21:     RB4PPS = 0x11;
 17713  1A34  3011               	movlw	17
 17714  1A35  009C               	movwf	28	;volatile
 17715                           
 17716                           ;bme280_i2c.c: 23:     SSP1STAT = 0x80;
 17717  1A36  3080               	movlw	128
 17718  1A37  0024               	movlb	4	; select bank4
 17719  1A38  0094               	movwf	20	;volatile
 17720                           
 17721                           ;bme280_i2c.c: 24:     SSP1CON1 = 0x28;
 17722  1A39  3028               	movlw	40
 17723  1A3A  0095               	movwf	21	;volatile
 17724                           
 17725                           ;bme280_i2c.c: 25:     SSP1CON2 = 0x00;
 17726  1A3B  0196               	clrf	22	;volatile
 17727                           
 17728                           ;bme280_i2c.c: 26:     SSP1ADD = 0x4f;
 17729  1A3C  304F               	movlw	79
 17730  1A3D  0092               	movwf	18	;volatile
 17731                           
 17732                           ;bme280_i2c.c: 28:     SSP1CON1bits.SSPEN = 1;
 17733  1A3E  1695               	bsf	21,5	;volatile
 17734  1A3F  0008               	return
 17735  1A40                     __end_of_I2C_Init:	
 17736                           
 17737                           	psect	intentry
 17738  0004                     __pintentry:	
 17739 ;; *************** function _INTERRUPT_InterruptManager *****************
 17740 ;; Defined at:
 17741 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 17742 ;; Parameters:    Size  Location     Type
 17743 ;;		None
 17744 ;; Auto vars:     Size  Location     Type
 17745 ;;		None
 17746 ;; Return value:  Size  Location     Type
 17747 ;;                  1    wreg      void 
 17748 ;; Registers used:
 17749 ;;		wreg, status,2, status,0, pclath, cstack
 17750 ;; Tracked objects:
 17751 ;;		On entry : 0/0
 17752 ;;		On exit  : 0/0
 17753 ;;		Unchanged: 0/0
 17754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17759 ;;Total ram usage:        0 bytes
 17760 ;; Hardware stack levels used:    1
 17761 ;; Hardware stack levels required when called:    2
 17762 ;; This function calls:
 17763 ;;		_TMR0_ISR
 17764 ;; This function is called by:
 17765 ;;		Interrupt level 1
 17766 ;; This function uses a non-reentrant model
 17767 ;;
 17768                           
 17769  0004                     _INTERRUPT_InterruptManager:	
 17770                           
 17771                           ;incstack = 0
 17772  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17773                           
 17774                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 17775  0005  3180               	pagesel	$
 17776                           
 17777                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 17778  0006  1A8B               	btfsc	11,5	;volatile
 17779  0007  1D0B               	btfss	11,2	;volatile
 17780  0008  280B               	goto	i1l366
 17781                           
 17782                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 17783  0009  319A  221C         	fcall	_TMR0_ISR
 17784  000B                     i1l366:	
 17785                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 17786                           
 17787  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17788  000C  0009               	retfie
 17789  000D                     __end_of_INTERRUPT_InterruptManager:	
 17790                           
 17791                           	psect	text69
 17792  1A1C                     __ptext69:	
 17793 ;; *************** function _TMR0_ISR *****************
 17794 ;; Defined at:
 17795 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 17796 ;; Parameters:    Size  Location     Type
 17797 ;;		None
 17798 ;; Auto vars:     Size  Location     Type
 17799 ;;		None
 17800 ;; Return value:  Size  Location     Type
 17801 ;;                  1    wreg      void 
 17802 ;; Registers used:
 17803 ;;		wreg, status,2, status,0, pclath, cstack
 17804 ;; Tracked objects:
 17805 ;;		On entry : 0/0
 17806 ;;		On exit  : 0/0
 17807 ;;		Unchanged: 0/0
 17808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17813 ;;Total ram usage:        0 bytes
 17814 ;; Hardware stack levels used:    1
 17815 ;; Hardware stack levels required when called:    1
 17816 ;; This function calls:
 17817 ;;		Absolute function
 17818 ;;		_TMR0_DefaultInterruptHandler
 17819 ;;		_TimerISR
 17820 ;; This function is called by:
 17821 ;;		_INTERRUPT_InterruptManager
 17822 ;; This function uses a non-reentrant model
 17823 ;;
 17824                           
 17825                           
 17826                           ;psect for function _TMR0_ISR
 17827  1A1C                     _TMR0_ISR:	
 17828                           
 17829                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 17830                           
 17831                           ;incstack = 0
 17832                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 17833  1A1C  110B               	bcf	11,2	;volatile
 17834                           
 17835                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 17836  1A1D  0022               	movlb	2	; select bank2
 17837  1A1E  0864               	movf	_timer0ReloadVal^(0+256),w	;volatile
 17838  1A1F  0020               	movlb	0	; select bank0
 17839  1A20  0095               	movwf	21	;volatile
 17840                           
 17841                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
 17842  1A21  0022               	movlb	2	; select bank2
 17843  1A22  0862               	movf	_TMR0_InterruptHandler^(0+256),w
 17844  1A23  0463               	iorwf	(_TMR0_InterruptHandler+1)^(0+256),w
 17845  1A24  1903               	btfsc	3,2
 17846  1A25  0008               	return
 17847                           
 17848                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
 17849  1A26  0863               	movf	(_TMR0_InterruptHandler+1)^(0+256),w
 17850  1A27  008A               	movwf	10
 17851  1A28  0862               	movf	_TMR0_InterruptHandler^(0+256),w
 17852  1A29  000A               	callw
 17853  1A2A  319A               	pagesel	$
 17854  1A2B  0008               	return
 17855  1A2C                     __end_of_TMR0_ISR:	
 17856                           
 17857                           	psect	text70
 17858  0003                     __ptext70:	
 17859 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17860 ;; Defined at:
 17861 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 17862 ;; Parameters:    Size  Location     Type
 17863 ;;		None
 17864 ;; Auto vars:     Size  Location     Type
 17865 ;;		None
 17866 ;; Return value:  Size  Location     Type
 17867 ;;                  1    wreg      void 
 17868 ;; Registers used:
 17869 ;;		None
 17870 ;; Tracked objects:
 17871 ;;		On entry : 1F/2
 17872 ;;		On exit  : 1F/2
 17873 ;;		Unchanged: 1F/0
 17874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;Total ram usage:        0 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; This function calls:
 17882 ;;		Nothing
 17883 ;; This function is called by:
 17884 ;;		_TMR0_Initialize
 17885 ;;		_TMR0_ISR
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           
 17890                           ;psect for function _TMR0_DefaultInterruptHandler
 17891  0003                     _TMR0_DefaultInterruptHandler:	
 17892                           
 17893                           ;incstack = 0
 17894                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 17895  0003  0008               	return
 17896  0004                     __end_of_TMR0_DefaultInterruptHandler:	
 17897                           
 17898                           	psect	text71
 17899  19F0                     __ptext71:	
 17900 ;; *************** function _TimerISR *****************
 17901 ;; Defined at:
 17902 ;;		line 6 in file "timing.c"
 17903 ;; Parameters:    Size  Location     Type
 17904 ;;		None
 17905 ;; Auto vars:     Size  Location     Type
 17906 ;;		None
 17907 ;; Return value:  Size  Location     Type
 17908 ;;                  1    wreg      void 
 17909 ;; Registers used:
 17910 ;;		wreg
 17911 ;; Tracked objects:
 17912 ;;		On entry : 1F/2
 17913 ;;		On exit  : 1F/1
 17914 ;;		Unchanged: 0/0
 17915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17920 ;;Total ram usage:        0 bytes
 17921 ;; Hardware stack levels used:    1
 17922 ;; This function calls:
 17923 ;;		Nothing
 17924 ;; This function is called by:
 17925 ;;		_InitTiming
 17926 ;;		_TMR0_ISR
 17927 ;; This function uses a non-reentrant model
 17928 ;;
 17929                           
 17930                           
 17931                           ;psect for function _TimerISR
 17932  19F0                     _TimerISR:	
 17933                           
 17934                           ;timing.c: 8:     ticks++;
 17935                           
 17936                           ;incstack = 0
 17937                           ; Regs used in _TimerISR: [wreg]
 17938  19F0  3001               	movlw	1
 17939  19F1  0021               	movlb	1	; select bank1
 17940  19F2  07E8               	addwf	_ticks^(0+128),f
 17941  19F3  3000               	movlw	0
 17942  19F4  3DE9               	addwfc	(_ticks+1)^(0+128),f
 17943  19F5  3000               	movlw	0
 17944  19F6  3DEA               	addwfc	(_ticks+2)^(0+128),f
 17945  19F7  3000               	movlw	0
 17946  19F8  3DEB               	addwfc	(_ticks+3)^(0+128),f
 17947  19F9  0008               	return
 17948  19FA                     __end_of_TimerISR:	
 17949  007E                     btemp	set	126	;btemp
 17950  007E                     int$flags	set	126
 17951  007E                     wtemp0	set	126


Data Sizes:
    Strings     9
    Constant    0
    Data        4
    BSS         272
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     72      80
    BANK2            80     34      69
    BANK3            80      0      67
    BANK4            80      0      26
    BANK5            80      0      70
    BANK6            80      0      73
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    put_device_to_sleep@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 0
		 -> Sleep(), 

    put_device_to_sleep@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> WriteEnvSensor(), 

    put_device_to_sleep@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> ReadEnvSensor(), 

    get_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 0
		 -> Sleep(), 

    get_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> WriteEnvSensor(), 

    get_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> ReadEnvSensor(), 

    S54$4$2	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    S54$3$2	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(BANK1[4]), write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), 
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(BANK1[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(BANK1[1]), bme280_init@chip_id(BANK0[1]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 73
		 -> STR_2(CODE[3]), checksum(BANK2[6]), STR_1(CODE[6]), main@convertedNumber(BANK2[16]), 
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 73
		 -> STR_2(CODE[3]), checksum(BANK2[6]), STR_1(CODE[6]), main@convertedNumber(BANK2[16]), 
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    TransmitString@message	PTR unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    crc16@data	PTR PTR unsigned char  size(1) Largest target is 4
		 -> messages(BANK2[4]), 

    crc16_update@pData	PTR unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    WriteEnvSensor@reg_data	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    ReadEnvSensor@reg_data	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(BANK1[4]), write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), 
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(BANK1[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(BANK1[1]), bme280_init@chip_id(BANK0[1]), 

    messages	PTR unsigned char [2] size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    UIntToString@dest	PTR unsigned char  size(1) Largest target is 16
		 -> main@convertedNumber(BANK2[16]), 

    IntToString@dest	PTR unsigned char  size(1) Largest target is 16
		 -> main@convertedNumber(BANK2[16]), 

    UIntToHexString@dest	PTR unsigned char  size(1) Largest target is 6
		 -> checksum(BANK2[6]), 

    ReverseString@opposite	PTR unsigned char  size(1) Largest target is 16
		 -> checksum(BANK2[6]), main@convertedNumber(BANK2[16]), 

    ReverseString@str	PTR unsigned char  size(1) Largest target is 16
		 -> checksum(BANK2[6]), main@convertedNumber(BANK2[16]), 

    InsertString@dest	PTR unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    InsertString@src	PTR unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[3]), checksum(BANK2[6]), STR_1(CODE[6]), main@convertedNumber(BANK2[16]), 

    Insert@dest	PTR unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    ClearString@str	PTR unsigned char  size(2) Largest target is 73
		 -> main@convertedNumber(BANK2[16]), message_end(BANK6[73]), message_start(BANK5[70]), 

    EnvSensor.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    EnvSensor.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    EnvSensor.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    null_ptr_check@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    null_ptr_check@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    null_ptr_check@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    null_ptr_check@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    parse_humidity_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_humidity_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_humidity_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_humidity_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_humidity_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    parse_humidity_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor.calib_data(BANK3[37]), EnvSensor(BANK3[51]), 

    parse_temp_press_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_temp_press_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_temp_press_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_temp_press_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_temp_press_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    parse_temp_press_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor.calib_data(BANK3[37]), EnvSensor(BANK3[51]), 

    interleave_reg_addr@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(BANK0[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    interleave_reg_addr@reg_addr	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(BANK0[1]), set_filter_standby_settings@reg_addr(BANK0[1]), set_osr_press_temp_settings@reg_addr(BANK0[1]), set_osr_humidity_settings@reg_addr(BANK0[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    interleave_reg_addr@temp_buff	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    get_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    compensate_humidity@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    compensate_humidity@calib_data	PTR const struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    compensate_pressure@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    compensate_pressure@calib_data	PTR const struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    compensate_temperature@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    compensate_temperature@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    reload_device_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    reload_device_settings@settings	PTR const struct bme280_settings size(1) Largest target is 5
		 -> put_device_to_sleep@settings(BANK1[5]), 

    put_device_to_sleep@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    write_power_mode@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    parse_device_settings@reg_data	PTR const unsigned char  size(1) Largest target is 4
		 -> put_device_to_sleep@reg_data(BANK1[4]), bme280_get_sensor_settings@reg_data(COMMON[4]), 

    parse_device_settings@settings	PTR struct bme280_settings size(1) Largest target is 5
		 -> put_device_to_sleep@settings(BANK1[5]), 

    fill_osr_temp_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    fill_osr_temp_settings@reg_data	PTR unsigned char  size(1) Largest target is 1
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), 

    fill_osr_press_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    fill_osr_press_settings@reg_data	PTR unsigned char  size(1) Largest target is 1
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), 

    fill_standby_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    fill_standby_settings@reg_data	PTR unsigned char  size(1) Largest target is 1
		 -> set_filter_standby_settings@reg_data(BANK0[1]), 

    fill_filter_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    fill_filter_settings@reg_data	PTR unsigned char  size(1) Largest target is 1
		 -> set_filter_standby_settings@reg_data(BANK0[1]), 

    set_filter_standby_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    set_filter_standby_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    set_osr_press_temp_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    set_osr_press_temp_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    set_osr_humidity_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    set_osr_humidity_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    set_osr_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    set_osr_settings@settings	PTR const struct bme280_settings size(2) Largest target is 51
		 -> EnvSensor(BANK3[51]), put_device_to_sleep@settings(BANK1[5]), 

    bme280_compensate_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_compensate_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_compensate_data@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    bme280_parse_sensor_data@uncomp_data	PTR struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    bme280_parse_sensor_data@reg_data	PTR const unsigned char  size(1) Largest target is 8
		 -> bme280_get_sensor_data@reg_data(BANK1[8]), 

    bme280_get_sensor_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_sensor_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_get_sensor_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_soft_reset@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_soft_reset@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_soft_reset@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_soft_reset@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_get_sensor_mode@sensor_mode	PTR unsigned char  size(1) Largest target is 1
		 -> bme280_set_sensor_mode@last_set_mode(BANK1[1]), bme280_set_sensor_settings@sensor_mode(BANK1[1]), 

    bme280_get_sensor_mode@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_set_sensor_mode@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_get_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_sensor_settings@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_set_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(BANK0[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    bme280_set_regs@reg_addr	PTR unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(BANK0[1]), set_filter_standby_settings@reg_addr(BANK0[1]), set_osr_press_temp_settings@reg_addr(BANK0[1]), set_osr_humidity_settings@reg_addr(BANK0[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    bme280_set_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    bme280_get_regs@reg_data	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(BANK1[4]), write_power_mode@sensor_mode_reg_val(BANK0[1]), set_filter_standby_settings@reg_data(BANK0[1]), 
		 -> set_osr_press_temp_settings@reg_data(BANK0[1]), set_osr_humidity_settings@ctrl_meas(BANK0[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(BANK1[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(BANK1[1]), bme280_init@chip_id(BANK0[1]), 

    bme280_get_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 

    S54bme280_dev$delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_init@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    S54bme280_dev$write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_init@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    S54bme280_dev$read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> EnvSensor(BANK3[51]), 


Critical Paths under _main in COMMON

    _main->_IntToString
    _crc16->_crc16_update
    _crc16_update->_strlen
    _compensate_temperature->___aldiv
    _compensate_pressure->___lldiv
    _compensate_humidity->___aldiv
    ___aldiv->___lmul
    _UIntToString->___lldiv
    _TransmitString->_TransmitByte
    _TransmitByte->_TransmitBit
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _IntToString->_ReverseString
    _ReverseString->___awdiv
    _InsertString->_Insert
    _InitTiming->_TMR0_SetInterruptHandler
    _ClearString->_strlen
    _get_calib_data->_parse_humidity_calib_data
    _ReadEnvSensor->_I2C_WriteByte
    _I2C_ReadByte->_DebugAlert
    _WriteEnvSensor->_I2C_WriteByte
    _I2C_WriteByte->_DebugAlert
    _I2C_Stop->_DebugAlert
    _DebugAlert->_Sleep

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _crc16->_crc16_update
    _bme280_get_sensor_data->_bme280_compensate_data
    _bme280_compensate_data->_compensate_humidity
    _compensate_temperature->___aldiv
    _compensate_pressure->___aldiv
    _compensate_humidity->___aldiv
    _UIntToString->_ReverseString
    _UIntToHexString->_crc16
    _IntToString->_ReverseString
    _write_power_mode->_bme280_set_regs
    _put_device_to_sleep->_reload_device_settings
    _reload_device_settings->_set_osr_settings
    _set_osr_settings->_set_osr_humidity_settings
    _set_osr_settings->_set_osr_press_temp_settings
    _set_osr_press_temp_settings->_bme280_set_regs
    _set_osr_humidity_settings->_bme280_set_regs
    _set_filter_standby_settings->_bme280_set_regs
    _bme280_get_sensor_mode->_bme280_get_regs
    _bme280_init->_get_calib_data
    _get_calib_data->_bme280_get_regs
    _bme280_get_regs->_ReadEnvSensor
    _ReadEnvSensor->_I2C_WriteByte
    _I2C_ReadByte->_DebugAlert
    _bme280_soft_reset->_bme280_set_regs
    _bme280_set_regs->_WriteEnvSensor
    _WriteEnvSensor->_I2C_WriteByte
    _I2C_UserAlert->_I2C_Stop
    _I2C_Stop->_DebugAlert

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_bme280_get_sensor_data
    _bme280_compensate_data->_compensate_pressure
    _BME280_Init->_bme280_set_sensor_mode
    _BME280_Init->_bme280_set_sensor_settings
    _bme280_set_sensor_settings->_put_device_to_sleep
    _bme280_set_sensor_mode->_put_device_to_sleep

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0  599078
                                             67 BANK1      5     5      0
                                              0 BANK2     34    34      0
                        _BME280_Init
                        _ClearString
                         _InitTiming
                             _Insert
                       _InsertString
                        _IntToString
                  _SYSTEM_Initialize
                     _TransmitString
                    _UIntToHexString
                       _UIntToString
             _bme280_get_sensor_data
                              _crc16
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _crc16                                                9     7      2    1418
                                              1 BANK0      9     7      2
                       _crc16_update
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _crc16_update                                        10     4      6     486
                                              5 COMMON     9     3      6
                                              0 BANK0      1     1      0
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _bme280_get_sensor_data                              27    25      2   50802
                                             65 BANK0      5     3      2
                                             45 BANK1     22    22      0
             _bme280_compensate_data
                    _bme280_get_regs
           _bme280_parse_sensor_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _bme280_parse_sensor_data                            22    21      1     535
                                              0 COMMON     9     8      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _bme280_compensate_data                               6     3      3   30461
                                             59 BANK0      6     3      3
                _compensate_humidity
                _compensate_pressure
             _compensate_temperature
 ---------------------------------------------------------------------------------
 (3) _compensate_temperature                              39    35      4    9255
                                             14 BANK0     39    35      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _compensate_pressure                                 67    63      4   10752
                                             14 BANK0     22    18      4
                                              0 BANK1     45    45      0
                            ___aldiv
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _compensate_humidity                                 45    41      4    9589
                                             14 BANK0     45    41      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    3588
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8    4860
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _UIntToString                                         9     4      5    3156
                                              9 BANK0      9     4      5
                      _ReverseString
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     311
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     618
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _UIntToHexString                                     19    14      5    2166
                                             10 BANK0     19    14      5
                      _ReverseString
                              _crc16 (ARG)
 ---------------------------------------------------------------------------------
 (1) _TransmitString                                       7     5      2     902
                                              6 COMMON     7     5      2
                       _TransmitByte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _TransmitByte                                         4     4      0     112
                                              2 COMMON     4     4      0
                        _TransmitBit
 ---------------------------------------------------------------------------------
 (3) _TransmitBit                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IntToString                                          8     5      3    3792
                                             11 COMMON     3     0      3
                                              9 BANK0      5     5      0
                      _ReverseString
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ReverseString                                       11    11      0    1766
                                              9 COMMON     2     2      0
                                              0 BANK0      9     9      0
                            ___awdiv
                             _strlen
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     730
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _InsertString                                        13     5      8    5598
                                             11 COMMON     1     1      0
                                              0 BANK0     12     4      8
                             _Insert
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _Insert                                              11     4      7    2529
                                              0 COMMON    11     4      7
 ---------------------------------------------------------------------------------
 (1) _InitTiming                                           0     0      0     174
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ClearString                                          7     5      2     990
                                              5 COMMON     7     5      2
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               5     3      2     546
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _BME280_Init                                          4     4      0  525810
                                             20 BANK1      4     4      0
                         _DebugAlert
                           _I2C_Init
                        _bme280_init
             _bme280_set_sensor_mode
         _bme280_set_sensor_settings
 ---------------------------------------------------------------------------------
 (2) _bme280_set_sensor_settings                           6     5      1  267982
                                             14 BANK1      6     5      1
               _are_settings_changed
             _bme280_get_sensor_mode
                     _null_ptr_check
                _put_device_to_sleep
        _set_filter_standby_settings
                   _set_osr_settings
 ---------------------------------------------------------------------------------
 (3) _are_settings_changed                                 3     2      1     282
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _bme280_set_sensor_mode                               6     5      1  196836
                                             14 BANK1      6     5      1
             _bme280_get_sensor_mode
                     _null_ptr_check
                _put_device_to_sleep
                   _write_power_mode
 ---------------------------------------------------------------------------------
 (3) _write_power_mode                                     8     7      1   34159
                                             58 BANK0      8     7      1
                    _bme280_get_regs
                    _bme280_set_regs
 ---------------------------------------------------------------------------------
 (3) _put_device_to_sleep                                 14    14      0  141656
                                              0 BANK1     14    14      0
                    _bme280_get_regs
                  _bme280_soft_reset
              _parse_device_settings
             _reload_device_settings
 ---------------------------------------------------------------------------------
 (4) _reload_device_settings                               5     4      1  105121
                                             75 BANK0      5     4      1
        _set_filter_standby_settings
                   _set_osr_settings
 ---------------------------------------------------------------------------------
 (3) _set_osr_settings                                     7     4      3   69797
                                             68 BANK0      7     4      3
          _set_osr_humidity_settings
        _set_osr_press_temp_settings
 ---------------------------------------------------------------------------------
 (4) _set_osr_press_temp_settings                         10     7      3   34826
                                             58 BANK0     10     7      3
                    _bme280_get_regs
                    _bme280_set_regs
            _fill_osr_press_settings
             _fill_osr_temp_settings
 ---------------------------------------------------------------------------------
 (5) _fill_osr_temp_settings                               6     4      2     219
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _fill_osr_press_settings                              6     4      2     219
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _set_osr_humidity_settings                           10     7      3   34354
                                             58 BANK0     10     7      3
                    _bme280_get_regs
                    _bme280_set_regs
 ---------------------------------------------------------------------------------
 (3) _set_filter_standby_settings                         10     7      3   35006
                                             58 BANK0     10     7      3
                    _bme280_get_regs
                    _bme280_set_regs
               _fill_filter_settings
              _fill_standby_settings
 ---------------------------------------------------------------------------------
 (4) _fill_standby_settings                                6     4      2     219
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _fill_filter_settings                                 6     4      2     219
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _parse_device_settings                                4     3      1     542
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _bme280_get_sensor_mode                               6     5      1   19638
                                             36 BANK0      6     5      1
                    _bme280_get_regs
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _bme280_init                                          7     7      0   58207
                                             68 BANK0      7     7      0
                              _Sleep *
                    _bme280_get_regs
                  _bme280_soft_reset
                     _get_calib_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (3) _get_calib_data                                      32    32      0   20896
                                             36 BANK0     32    32      0
                    _bme280_get_regs
          _parse_humidity_calib_data
        _parse_temp_press_calib_data
 ---------------------------------------------------------------------------------
 (4) _parse_temp_press_calib_data                          4     3      1    1338
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _parse_humidity_calib_data                           14    13      1     699
                                              0 COMMON    14    13      1
 ---------------------------------------------------------------------------------
 (2) _bme280_get_regs                                      9     5      4   18244
                                             27 BANK0      9     5      4
                      _ReadEnvSensor *
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (3) _ReadEnvSensor                                       12     7      5   14062
                                             15 BANK0     12     7      5
                         _DebugAlert
                       _I2C_ReadByte
                           _I2C_Stop
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (4) _I2C_ReadByte                                         6     6      0    2730
                                              7 BANK0      6     6      0
                         _DebugAlert
 ---------------------------------------------------------------------------------
 (4) _bme280_soft_reset                                    7     7      0   17186
                                             58 BANK0      7     7      0
                              _Sleep *
                    _bme280_set_regs
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (5) _bme280_set_regs                                     31    28      3   15470
                                             27 BANK0     31    28      3
                     _WriteEnvSensor *
                _interleave_reg_addr
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _null_ptr_check                                       4     4      0     919
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _interleave_reg_addr                                  8     5      3     622
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (6) _WriteEnvSensor                                      12     7      5   11177
                                             15 BANK0     12     7      5
                         _DebugAlert
                           _I2C_Stop
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (4) _I2C_WriteByte                                        5     5      0    5361
                                             13 COMMON     1     1      0
                                             11 BANK0      4     4      0
                         _DebugAlert
                      _I2C_UserAlert
 ---------------------------------------------------------------------------------
 (5) _I2C_UserAlert                                        1     1      0    2665
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (6) _I2C_Stop                                             4     4      0    2665
                                              7 BANK0      4     4      0
                         _DebugAlert
 ---------------------------------------------------------------------------------
 (7) _DebugAlert                                           8     3      5    2665
                                             12 COMMON     1     1      0
                                              0 BANK0      7     2      5
                              _Sleep
 ---------------------------------------------------------------------------------
 (8) _Sleep                                               12     8      4     375
                                              0 COMMON    12     8      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _INTERRUPT_InterruptManager                          0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (15) _TMR0_ISR                                            0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                           _TimerISR *
 ---------------------------------------------------------------------------------
 (16) _TimerISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BME280_Init
     _DebugAlert
       _Sleep
     _I2C_Init
     _bme280_init
       _Sleep *
       _bme280_get_regs *
         _ReadEnvSensor *
           _DebugAlert
             _Sleep
           _I2C_ReadByte
             _DebugAlert
               _Sleep
           _I2C_Stop
             _DebugAlert
               _Sleep
           _I2C_WriteByte
             _DebugAlert
               _Sleep
             _I2C_UserAlert
               _I2C_Stop
                 _DebugAlert
                   _Sleep
         _null_ptr_check *
       _bme280_soft_reset *
         _Sleep *
         _bme280_set_regs *
           _WriteEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _interleave_reg_addr *
           _null_ptr_check *
         _null_ptr_check *
       _get_calib_data *
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _parse_humidity_calib_data
         _parse_temp_press_calib_data
       _null_ptr_check *
     _bme280_set_sensor_mode
       _bme280_get_sensor_mode
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _null_ptr_check
       _null_ptr_check
       _put_device_to_sleep
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _bme280_soft_reset
           _Sleep *
           _bme280_set_regs *
             _WriteEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _interleave_reg_addr *
             _null_ptr_check *
           _null_ptr_check *
         _parse_device_settings
         _reload_device_settings
           _set_filter_standby_settings
             _bme280_get_regs
               _ReadEnvSensor *
                 _DebugAlert
                   _Sleep
                 _I2C_ReadByte
                   _DebugAlert
                     _Sleep
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
                 _I2C_WriteByte
                   _DebugAlert
                     _Sleep
                   _I2C_UserAlert
                     _I2C_Stop
                       _DebugAlert
                         _Sleep
               _null_ptr_check *
             _bme280_set_regs
               _WriteEnvSensor *
                 _DebugAlert
                   _Sleep
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
                 _I2C_WriteByte
                   _DebugAlert
                     _Sleep
                   _I2C_UserAlert
                     _I2C_Stop
                       _DebugAlert
                         _Sleep
               _interleave_reg_addr *
               _null_ptr_check *
             _fill_filter_settings
             _fill_standby_settings
           _set_osr_settings
             _set_osr_humidity_settings
               _bme280_get_regs
                 _ReadEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_ReadByte
                     _DebugAlert
                       _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _null_ptr_check *
               _bme280_set_regs
                 _WriteEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _interleave_reg_addr *
                 _null_ptr_check *
             _set_osr_press_temp_settings
               _bme280_get_regs
                 _ReadEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_ReadByte
                     _DebugAlert
                       _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _null_ptr_check *
               _bme280_set_regs
                 _WriteEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _interleave_reg_addr *
                 _null_ptr_check *
               _fill_osr_press_settings
               _fill_osr_temp_settings
       _write_power_mode
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _bme280_set_regs
           _WriteEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _interleave_reg_addr *
           _null_ptr_check *
     _bme280_set_sensor_settings
       _are_settings_changed
       _bme280_get_sensor_mode
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _null_ptr_check
       _null_ptr_check
       _put_device_to_sleep
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _bme280_soft_reset
           _Sleep *
           _bme280_set_regs *
             _WriteEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _interleave_reg_addr *
             _null_ptr_check *
           _null_ptr_check *
         _parse_device_settings
         _reload_device_settings
           _set_filter_standby_settings
             _bme280_get_regs
               _ReadEnvSensor *
                 _DebugAlert
                   _Sleep
                 _I2C_ReadByte
                   _DebugAlert
                     _Sleep
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
                 _I2C_WriteByte
                   _DebugAlert
                     _Sleep
                   _I2C_UserAlert
                     _I2C_Stop
                       _DebugAlert
                         _Sleep
               _null_ptr_check *
             _bme280_set_regs
               _WriteEnvSensor *
                 _DebugAlert
                   _Sleep
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
                 _I2C_WriteByte
                   _DebugAlert
                     _Sleep
                   _I2C_UserAlert
                     _I2C_Stop
                       _DebugAlert
                         _Sleep
               _interleave_reg_addr *
               _null_ptr_check *
             _fill_filter_settings
             _fill_standby_settings
           _set_osr_settings
             _set_osr_humidity_settings
               _bme280_get_regs
                 _ReadEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_ReadByte
                     _DebugAlert
                       _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _null_ptr_check *
               _bme280_set_regs
                 _WriteEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _interleave_reg_addr *
                 _null_ptr_check *
             _set_osr_press_temp_settings
               _bme280_get_regs
                 _ReadEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_ReadByte
                     _DebugAlert
                       _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _null_ptr_check *
               _bme280_set_regs
                 _WriteEnvSensor *
                   _DebugAlert
                     _Sleep
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
                   _I2C_WriteByte
                     _DebugAlert
                       _Sleep
                     _I2C_UserAlert
                       _I2C_Stop
                         _DebugAlert
                           _Sleep
                 _interleave_reg_addr *
                 _null_ptr_check *
               _fill_osr_press_settings
               _fill_osr_temp_settings
       _set_filter_standby_settings
         _bme280_get_regs
           _ReadEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_ReadByte
               _DebugAlert
                 _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _null_ptr_check *
         _bme280_set_regs
           _WriteEnvSensor *
             _DebugAlert
               _Sleep
             _I2C_Stop
               _DebugAlert
                 _Sleep
             _I2C_WriteByte
               _DebugAlert
                 _Sleep
               _I2C_UserAlert
                 _I2C_Stop
                   _DebugAlert
                     _Sleep
           _interleave_reg_addr *
           _null_ptr_check *
         _fill_filter_settings
         _fill_standby_settings
       _set_osr_settings
         _set_osr_humidity_settings
           _bme280_get_regs
             _ReadEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_ReadByte
                 _DebugAlert
                   _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _null_ptr_check *
           _bme280_set_regs
             _WriteEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _interleave_reg_addr *
             _null_ptr_check *
         _set_osr_press_temp_settings
           _bme280_get_regs
             _ReadEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_ReadByte
                 _DebugAlert
                   _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _null_ptr_check *
           _bme280_set_regs
             _WriteEnvSensor *
               _DebugAlert
                 _Sleep
               _I2C_Stop
                 _DebugAlert
                   _Sleep
               _I2C_WriteByte
                 _DebugAlert
                   _Sleep
                 _I2C_UserAlert
                   _I2C_Stop
                     _DebugAlert
                       _Sleep
             _interleave_reg_addr *
             _null_ptr_check *
           _fill_osr_press_settings
           _fill_osr_temp_settings
   _ClearString
     _strlen
   _InitTiming
     _TMR0_SetInterruptHandler
   _Insert
   _InsertString
     _Insert
     _strlen
   _IntToString
     _ReverseString
       ___awdiv
       _strlen
     ___awdiv
     ___awmod
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TransmitString
     _TransmitByte
       _TransmitBit
     _strlen
   _UIntToHexString
     _ReverseString
       ___awdiv
       _strlen
     _crc16 (ARG)
       _crc16_update
         _strlen (ARG)
       _strlen
   _UIntToString
     _ReverseString
       ___awdiv
       _strlen
     ___lldiv
     ___llmod
   _bme280_get_sensor_data
     _bme280_compensate_data
       _compensate_humidity
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _compensate_pressure
         ___aldiv
           ___lmul (ARG)
         ___lldiv
         ___lmul
       _compensate_temperature
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _bme280_get_regs
       _ReadEnvSensor *
         _DebugAlert
           _Sleep
         _I2C_ReadByte
           _DebugAlert
             _Sleep
         _I2C_Stop
           _DebugAlert
             _Sleep
         _I2C_WriteByte
           _DebugAlert
             _Sleep
           _I2C_UserAlert
             _I2C_Stop
               _DebugAlert
                 _Sleep
       _null_ptr_check *
     _bme280_parse_sensor_data
     _null_ptr_check
   _crc16
     _crc16_update
       _strlen (ARG)
     _strlen
   _strlen

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _TimerISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     22      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      43      11       83.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1A      13       32.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      46      15       87.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      49      17       91.3%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1DF      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1DF      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Sep 05 20:46:27 2019

                        __end_of_ClearString 0827                                  __CFG_CP$OFF 0000  
           bme280_parse_sensor_data@data_lsb 0024             bme280_parse_sensor_data@data_msb 0028  
                                         l55 1359                                           l72 08C1  
                                         l65 1EA2                                 ___awdiv@sign 0076  
                                         _id 0156                              _timer0ReloadVal 0164  
                 ?_set_osr_humidity_settings 005A             __end_of_bme280_parse_sensor_data 0AD8  
                                __CFG_LVP$ON 0000                                          l126 15E0  
                                        l152 1ED4                                          l208 0FF7  
                                        l146 1E50                                          l238 1B36  
                                        l192 03F2                                          l601 16E8  
                                        l185 0735                                          l612 1DED  
                                        l604 171A                                          l196 058B  
                                        l605 1732                                          l615 1E1E  
                                        l608 1763                                          l632 077D  
                                        l464 15EC                                          l633 0793  
                                        l705 1A74                                          l636 07C5  
                                        l645 1438                                          l629 074B  
                                        l648 146A                                          l593 1F35  
                                        l596 1F67                                          l669 1BBF  
                                        l685 1DC2                                          l865 166B  
          bme280_parse_sensor_data@data_xlsb 0020              __size_of_fill_osr_temp_settings 001C  
                               ___awmod@sign 0076                                 __CFG_BORV$LO 0000  
                                        wreg 0009                                 __CFG_IESO$ON 0000  
           bme280_parse_sensor_data@reg_data 002C                               bme280_init@dev 006A  
            __size_of_compensate_temperature 01A3                            ___g_timeout_start 00EC  
                             ReverseString@i 0026                                 __CFG_ZCD$OFF 0000  
                                 _DebugAlert 1BE1                                         l4000 0830  
                                       l3210 10FA                                         l4020 0854  
                                       l3220 1102                                         l3204 10EF  
                                       l4022 086E                                         l3222 110E  
                                       l4112 1ECA                                         l3232 1129  
                                       l4210 1FB6                                         l4028 088D  
                                       l4036 08BC                                         l4116 1EE4  
                                       l4140 1B15                                         l3236 1131  
                                       l3228 1120                                         l4038 08C3  
                                       l4222 1C35                                         l4062 1092  
                      __size_of_crc16_update 003C                                         l4128 1D67  
                                       l4080 1E60                                         l3512 100B  
                                       l3186 1A5A                                         l3450 12AE  
                                       l3530 1030                                         l3194 1A76  
                                       l4404 1306                                         l4076 1E46  
                                       l4236 1DA4                                         l3188 1A66  
                                       l3452 12E9                                         l3524 1018  
                                       l3516 1012                                         l4340 0583  
                                       l4500 15C8                                         l4422 134F  
                                       l4094 1B50                                         l4262 1CF5  
                                       l4246 1A02                                         l3526 1024  
                                       l3534 1039                                         l3630 1637  
                                       l3622 160D                                         l3550 1EFC  
                                       l2902 1C99                                         l4326 03D6  
                                       l4424 1352                                         l4248 1A03  
                                       l4520 152C                                         l4600 10A3  
                                       l2920 1146                                         l4336 0570  
                                       l4504 15E2                                         l4418 133A  
                                       l4098 1B62                                         l4442 14BA  
                                       l4602 10DF                                         l3538 1041  
                                       l3634 164A                                         l2930 1174  
                                       l2922 1154                                         l3554 1F14  
                                       l2906 1CA3                                         l4338 0578  
                                       l4532 1530                                         l3636 1657  
                                       l3548 1EEE                                         l4380 0FB5  
                                       l4470 1D1D                                         l4454 14FF  
                                       l4534 1569                                         l3646 13D6  
                                       l2934 117F                                         l3558 1F1F  
                                       l4390 0FEF                                         l4286 071F  
                                       l3920 076E                                         l4448 14DD  
                                       l3496 1C6B                                         l3664 118A  
                                       l4288 072D                                         l4552 1DC8  
                                       l3842 1BE3                                         l3850 1E10  
                                       l3930 07B6                                         l4474 1D2D  
                                       l3658 141F                                         l2970 16C5  
                                       l4386 0FC9                                         l3908 1C3A  
                                       l3940 07E7                                         l2956 168C  
                                       l2948 167C                                         l4556 1DA6  
                                       l4660 1FFA                                         l3870 170B  
                                       l2974 16D3                                         l2966 16BA  
                                       l2958 169A                                         l4558 1DDD  
                                       l4750 0D26                                         l3944 07CF  
                                       l4648 13B1                                         l4672 1B71  
                                       l4496 15B2                                         l3858 1F58  
                                       l3962 145B                                         l3882 1755  
                                       l3946 07F9                                         l4586 080F  
                                       l4658 1FBF                                         l4682 0AF1  
                                       l3972 1478                                         l3974 1490  
                                       l4598 10D3                                         l3896 1B39  
                                       l3898 1B3A                                         l3988 1E7B  
                                       STR_1 1800                                         STR_2 1806  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         u3105 1119  
                                       u3115 1121                                         u3075 1105  
                                       u3315 09C4                                         u2605 1155  
                                       u3325 09DB                                         u4215 147E  
                                       u3095 110F                                         u2615 1169  
                                       u3335 09F0                                         u3520 1C76  
                                       u5120 123D                                         u2625 1175  
                                       u2705 16AF                                         u2545 1CA4  
                                       u3345 0A31                                         u3530 1C77  
                                       u3514 1C70                                         u5130 124A  
                                       u3515 1C6F                                         u2715 16BB  
                                       u2555 1CAB                                         u3355 0A49  
                                       u3605 102A                                         u3365 0A5E  
                                       u4175 07E3                                         u4415 1AA9  
                                       u3615 1031                                         u3375 0AA0  
                                       u5240 0B19                                         u4185 07D5  
                                       u4505 1201                                         u4425 1AC5  
                                       u4345 1A8D                                         u3545 1C87  
                                       u2585 1149                                         u5225 1FC9  
                                       u4515 1213                                         u4355 1AE1  
                                       u3475 12B8                                         u5235 1B7B  
                                       u2675 168F                                         u4525 1226  
                                       u5085 153A                                         u3805 162A  
                                       u4550 1F78                                         u3830 13CA  
                                       u5175 0819                                         u3655 1EF1  
                                       u2695 169B                                         u5255 0D3E  
                                       u3840 13CB                                         u4545 17D9  
                                       u5185 10DD                                         u3585 101B  
                                       u5195 10AE                                         u3675 1F0A  
                                       u4635 05B3                                         u5267 0D2A  
                                       u5277 1A79                                         u3685 1F15  
                                       u4725 0402                                         u4645 05C6  
                                       u4495 11EF                                         u5287 1A80  
                                       u4735 0421                                         u4655 0630  
                                       u5297 1BDD                                         u3865 140A  
                                       u4745 043C                                         u4755 04AD  
                                       u4685 0155                                         u3975 1BDA  
                                       u4695 0183                                         u3985 1BEC  
                                       u4785 0D68                                         u4795 0D86  
                __end_of_compensate_humidity 1000                                         _TMR0 0015  
                                       _WPUA 020C                                         _WPUB 020D  
                                       _WPUC 020E                       ??_fill_filter_settings 0072  
                  __size_of_write_power_mode 0037                       WriteEnvSensor@reg_addr 0030  
        bme280_parse_sensor_data@uncomp_data 0070                       WriteEnvSensor@reg_data 0031  
          bme280_get_sensor_data@uncomp_data 00D7                                 __CFG_WRT$OFF 0000  
                              __CFG_FCMEN$ON 0000              __size_of_bme280_set_sensor_mode 0038  
                  __size_of_set_osr_settings 0028                        __size_of_I2C_ReadByte 008B  
                        _put_device_to_sleep 1D6A                                         _main 0AD8  
              compensate_humidity@calib_data 002E                             __end_of_I2C_Init 1A40  
                               TransmitBit@b 0071                                         fsr0h 0005  
                                       fsr1h 0007                                         indf0 0000  
                                       fsr0l 0004                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                     interleave_reg_addr@len 0072                             __end_of_I2C_Stop 1E21  
       are_settings_changed@desired_settings 0070                  put_device_to_sleep@reg_data 00A3  
                              __CFG_BOREN$ON 0000                                         start 000D  
                       bme280_soft_reset@dev 0060                  __end_of_compensate_pressure 059B  
                              __CFG_MCLRE$ON 0000               reload_device_settings@settings 006E  
                    ??_fill_standby_settings 0072                                ??_IntToString 0029  
                put_device_to_sleep@settings 00A9                                _ReadEnvSensor 073E  
                            bme280_init@rslt 0069                      __end_of_TMR0_Initialize 1A56  
             ??_TMR0_DefaultInterruptHandler 0070               __size_of_OSCILLATOR_Initialize 0007  
              __end_of_OSCILLATOR_Initialize 19E8                         ?_put_device_to_sleep 0069  
                            __end_of___aldiv 16DC                        ReverseString@opposite 0023  
                                      ?_main 0070                              __end_of___awdiv 1136  
                              __CFG_WDTE$OFF 0000                              __end_of___awmod 1046  
                            __end_of___lldiv 1188                       _bme280_compensate_data 156E  
                            ___awdiv@divisor 0070                              __end_of___llmod 1F28  
                                      i1l366 000B                              ___awdiv@counter 0075  
                               _crc16_update 1DA6                                   Insert@dest 0070  
                          _bme280_soft_reset 1D2F                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
                                      _RXPPS 0E24                                   Insert@temp 0079  
          __size_of_TMR0_SetInterruptHandler 0006                     __size_of_bme280_get_regs 0042  
                        ___lmul@multiplicand 0074                    ?_TMR0_SetInterruptHandler 0070  
                                      _Sleep 1BB6                             __end_of_TMR0_ISR 1A2C  
             compensate_pressure@uncomp_data 00B4                   bme280_compensate_data@rslt 005F  
                         ?_bme280_soft_reset 0053                                 _I2C_ReadByte 16DC  
                   UIntToHexString@remainder 0035                                        _crc16 1FB8  
                           crc16_update@wCrc 0079                             ?_UIntToHexString 002A  
                                      _ticks 00E8                                        main@i 0132  
                                      pclath 000A                                TransmitByte@i 0074  
              __size_of_are_settings_changed 000B                          ??_bme280_soft_reset 005A  
                                      status 0003                                        wtemp0 007E  
                                _ClearString 0802                     __size_of_bme280_set_regs 009E  
                           ??_get_calib_data 0044                       put_device_to_sleep@dev 00A8  
                      bme280_soft_reset@rslt 005E                       _fill_osr_temp_settings 1AD8  
 bme280_set_sensor_settings@desired_settings 00B1                         __end_of_UIntToString 11DB  
              bme280_set_sensor_settings@dev 00AE                              __initialization 000F  
                      DebugAlert@num_flashes 0024                       _compensate_temperature 059B  
                                 _InitTiming 19E8            parse_humidity_calib_data@reg_data 007D  
                             ?_ReadEnvSensor 002F                                 __end_of_main 0D41  
                             __CFG_LPBOR$OFF 0000                  ?_INTERRUPT_InterruptManager 0070  
                     _bme280_set_sensor_mode 1CF7                        ??_put_device_to_sleep 00A0  
                    ?_bme280_get_sensor_data 0061                    __end_of_bme280_soft_reset 1D6A  
                    ?_bme280_get_sensor_mode 0044                                       ??_main 00E3  
                      __end_of_ReverseString 12F3                          __end_of_IntToString 142B  
                     __size_of_I2C_UserAlert 0003                      __size_of_WriteEnvSensor 0069  
                           ??_null_ptr_check 0070              bme280_compensate_data@comp_data 005C  
          bme280_set_sensor_mode@sensor_mode 00B1                             ReverseString@str 0028  
                             __CFG_PLLEN$OFF 0000                             __end_of_TimerISR 19FA  
            compensate_pressure@pressure_max 00B5                    bme280_get_sensor_data@dev 0062  
                      ReadEnvSensor@reg_addr 0030                                ?_InsertString 0020  
                      ReadEnvSensor@reg_data 0031          write_power_mode@sensor_mode_reg_val 0061  
                                     ?_Sleep 0070                     _bme280_parse_sensor_data 09BA  
                                     ?_crc16 0021                                   Sleep@start 0078  
                     __size_of_I2C_WriteByte 0048                             ___llmod@dividend 0074  
                           ___awdiv@dividend 0072                                  ?_DebugAlert 0020  
                                     _ANSELA 018C                                       _ANSELB 018D  
                                     _ANSELC 018E                                       _BORCON 0116  
                   _compensate_humidity$2266 003A                                       _RC1STA 019D  
                   ??_reload_device_settings 006C                                       _RB4PPS 0E9C  
                                     _RB6PPS 0E9E                                       _RB7PPS 0E9F  
                                     _ODCONA 028C                                       _ODCONB 028D  
                                     _ODCONC 028E                                       _OSCCON 0099  
                                     _SPBRGH 019C                                       _SPBRGL 019B  
                                     _TX1STA 019E                          I2C_ReadByte@rcvdata 002C  
                                Insert@index 0073                 __size_of_interleave_reg_addr 002D  
                  bme280_get_sensor_mode@dev 0044                    bme280_set_sensor_mode@dev 00AE  
                             __CFG_PWRTE$OFF 0000                   ?_parse_humidity_calib_data 0070  
                                     _Insert 1501                 fill_filter_settings@reg_data 0075  
                                     ___lmul 1C91                            crc16_update@pData 0075  
                                  ??___aldiv 007C                                    ??___awdiv 0074  
                                     crc16@i 0028                               __CFG_STVREN$ON 0000  
                                  ??___awmod 0074                                    ??___lldiv 0078  
               parse_humidity_calib_data@dev 0070                                    ??___llmod 0078  
             __end_of_bme280_get_sensor_data 1290                          DebugAlert@delay_low 0022  
             __end_of_bme280_get_sensor_mode 1C37                             ?_TMR0_Initialize 0070  
             fill_osr_temp_settings@reg_data 0075                  compensate_pressure@pressure 00C5  
                           ___awdiv@quotient 0077                              ___awmod@divisor 0070  
               fill_filter_settings@settings 0070                              ___awmod@counter 0075  
                                     _strlen 1A56                     interleave_reg_addr@index 0077  
                          get_calib_data@dev 0063                                 IntToString@i 002C  
                               IntToString@n 007B                              InsertString@src 0022  
                                  ?_I2C_Init 0070                      compensate_pressure@var1 00C9  
                    compensate_pressure@var2 00C1                      compensate_pressure@var3 00A0  
                    compensate_pressure@var4 00A4                      compensate_pressure@var5 00A8  
                             ??_InsertString 007B                                    ?_I2C_Stop 0070  
             fill_osr_temp_settings@settings 0070                             ??_TransmitString 0078  
                        write_power_mode@dev 005A     TMR0_SetInterruptHandler@InterruptHandler 0070  
                    put_device_to_sleep@rslt 00A7                            ??_bme280_get_regs 003F  
                           _write_power_mode 1CC0             bme280_compensate_data@calib_data 005D  
               interleave_reg_addr@temp_buff 0070                            _SYSTEM_Initialize 1A10  
                    __end_of__initialization 004F                             _set_osr_settings 1B3C  
                              _I2C_UserAlert 07FD                           ?_SYSTEM_Initialize 0070  
                        main@convertedNumber 0120                         _UIntToHexString$1373 0031  
           compensate_temperature@calib_data 002E              set_filter_standby_settings@rslt 0061  
                            ??_ReadEnvSensor 0034                          ReverseString@counti 0024  
             bme280_set_sensor_settings@rslt 00B3                                ??_bme280_init 0064  
                   get_calib_data@calib_data 0047                               __pcstackCOMMON 0070  
                                ?_InitTiming 0070                                __end_of_Sleep 1BE1  
                              _I2C_WriteByte 1F28             __size_of_fill_osr_press_settings 001B  
                               __pidataBANK2 19D1                            ??_bme280_set_regs 003E  
                              __end_of_crc16 2000                          ??_SYSTEM_Initialize 0073  
                                _IntToString 13C3                                    ?_TMR0_ISR 0070  
           set_osr_settings@desired_settings 006A                                ??_TransmitBit 0070  
                        __size_of_DebugAlert 002B                   __size_of_bme280_soft_reset 003B  
                ??_set_osr_humidity_settings 005D                        _parse_device_settings 11DB  
                                 ??_I2C_Init 0070                               _OPTION_REGbits 0095  
                                 ??_I2C_Stop 0027             are_settings_changed@sub_settings 0071  
                                    ??_Sleep 0074                          set_osr_settings@dev 0066  
                                    ??_crc16 0023                    __end_of_SYSTEM_Initialize 1A1C  
                                 __pbssBANK1 00E8                                   __pbssBANK2 0142  
                                 __pbssBANK3 01A0                                   __pbssBANK4 0220  
                                 __pbssBANK5 02A0                                   __pbssBANK6 0320  
                              ??_BME280_Init 00B4              __size_of_reload_device_settings 0023  
                interleave_reg_addr@reg_addr 0076                        __size_of_UIntToString 0053  
                             ?_I2C_UserAlert 0070                            ReverseString@temp 0022  
                interleave_reg_addr@reg_data 0071                        InsertString@destLimit 0026  
                                    ?_Insert 0070                                   __pmaintext 0AD8  
                                  ?_TimerISR 0070                               ?_I2C_WriteByte 0070  
             set_osr_press_temp_settings@dev 005C             __end_of_TMR0_SetInterruptHandler 19DB  
                                    ?___lmul 0070                                   ??_TMR0_ISR 0070  
             __size_of_fill_standby_settings 001C                              __CFG_PPS1WAY$ON 0000  
              __end_of_fill_standby_settings 1AD8                                   __pintentry 0004  
                    ?_bme280_compensate_data 005B  set_filter_standby_settings@desired_settings 0060  
                             ___lmul@product 0078                             ReadEnvSensor@len 0032  
                        __end_of_bme280_init 135B                               _WriteEnvSensor 142B  
                                    ?_strlen 0070                 ??_bme280_set_sensor_settings 00AF  
                            __CFG_WDTCCS$SWC 0000                          __end_of_TransmitBit 1A85  
                               _UIntToString 1188                                      _OSCTUNE 0098  
               ?_parse_temp_press_calib_data 0070                                      _SSP1ADD 0212  
                                    _SLRCONA 030C                                      _SLRCONB 030D  
                                    _SLRCONC 030E                                      _SSP1BUF 0211  
              set_osr_humidity_settings@rslt 0062                          __size_of_InitTiming 0008  
                    ?_fill_osr_temp_settings 0070                 ?_set_osr_press_temp_settings 005A  
                  _set_osr_humidity_settings 1046                                 ?_ClearString 0075  
              __size_of_fill_filter_settings 001C                 set_osr_humidity_settings@dev 005C  
                    ?_compensate_temperature 002E                bme280_soft_reset@soft_rst_cmd 005D  
                                    Sleep@ms 0070                 __size_of_compensate_humidity 02BF  
                       __end_of_InsertString 10E5                          __end_of_BME280_Init 13C3  
                            __size_of_Insert 006D                                   ??_TimerISR 0070  
                    ?_bme280_set_sensor_mode 00AE               __end_of_bme280_compensate_data 15E4  
                                    ___aldiv 165B                                      ___awdiv 10E5  
                            __size_of___lmul 002F                                      ___awmod 1001  
                                    ___lldiv 1136                                      ___llmod 1EE6  
               __end_of_are_settings_changed 1A05                       __end_of_WriteEnvSensor 1494  
               __size_of_compensate_pressure 0548                       _reload_device_settings 1AF4  
                 ??_bme280_parse_sensor_data 0071                       ?_parse_device_settings 0070  
                         crc16_update@length 0077                                      __ptext1 1FB8  
                                    __ptext2 1DA6                                      __ptext3 1233  
                                    __ptext4 09BA                                      __ptext5 156E  
                                    __ptext6 059B                                      __ptext7 0053  
                                    __ptext8 0D41                                      __ptext9 1C91  
        parse_humidity_calib_data@dig_H4_lsb 0074          parse_humidity_calib_data@dig_H4_msb 0076  
        parse_humidity_calib_data@dig_H5_lsb 0078          parse_humidity_calib_data@dig_H5_msb 007A  
                       DebugAlert@delay_high 0020          parse_humidity_calib_data@calib_data 007C  
                            __size_of_strlen 0017                          _interleave_reg_addr 1C37  
                      _OSCILLATOR_Initialize 19E1                             ___awmod@dividend 0072  
                              _message_start 02A0                             ___aldiv@dividend 0024  
                   ??_PIN_MANAGER_Initialize 0070                           get_calib_data@F376 0220  
                  reload_device_settings@dev 006B               __end_of_fill_osr_temp_settings 1AF4  
                                    main@end 0130                   __size_of_SYSTEM_Initialize 000C  
                                    clrloop0 19DC                                 ??_DebugAlert 007C  
              ??_parse_temp_press_calib_data 0071                              ??_I2C_UserAlert 007D  
                       end_of_initialization 004F              bme280_get_sensor_data@comp_data 0061  
                         get_calib_data@rslt 0062                             InsertString@dest 0020  
      bme280_set_sensor_settings@sensor_mode 00B2               __end_of_compensate_temperature 073E  
              ??_set_osr_press_temp_settings 005D                         ?_interleave_reg_addr 0070  
                   __size_of_UIntToHexString 0077                            _EUSART_Initialize 1A05  
                            ??_I2C_WriteByte 002B                              ___lldiv@divisor 0070  
             __end_of_bme280_set_sensor_mode 1D2F                              ___lldiv@counter 007D  
                ??_parse_humidity_calib_data 0071                      _fill_osr_press_settings 1A85  
                         ?_EUSART_Initialize 0070                  __end_of_put_device_to_sleep 1DA6  
                       write_power_mode@rslt 005F                                  _bme280_init 12F3  
                   write_power_mode@reg_addr 0060                             ___aldiv@quotient 002A  
                 reload_device_settings@rslt 006F            compensate_temperature@temperature 0051  
                                 main@F10039 01A0                               ClearString@str 0075  
                            ?_WriteEnvSensor 002F                                  _TransmitBit 1A6D  
                                    strlen@a 0073                     __end_of_write_power_mode 1CF7  
                                    strlen@s 0070                          ??_EUSART_Initialize 0070  
                         __end_of_DebugAlert 1C0C                     _TMR0_SetInterruptHandler 19D5  
                   __end_of_set_osr_settings 1B64                                    _SSPDATPPS 0E21  
                            _bme280_get_regs 1E62                                    _SSPCLKPPS 0E20  
                         bme280_get_regs@dev 003E                              WriteEnvSensor@i 0039  
                         bme280_get_regs@len 003C                              TransmitString@i 007B  
                              ?_TransmitByte 0070                             __CFG_FOSC$INTOSC 0000  
                              crc16@segments 0021              fill_osr_press_settings@reg_data 0075  
                          __size_of_I2C_Init 0014                            __size_of_I2C_Stop 003F  
               ?_set_filter_standby_settings 005A              fill_osr_press_settings@settings 0070  
             compensate_humidity@uncomp_data 003E                              _bme280_set_regs 0827  
                                _BME280_Init 135B                    __end_of_EUSART_Initialize 1A10  
                       bme280_init@try_count 0067                        ??_interleave_reg_addr 0073  
                  bme280_soft_reset@reg_addr 005F            compensate_temperature@uncomp_data 004C  
                       ReverseString@halfway 0020                       __size_of_ReverseString 0063  
                      TransmitString@message 0076                                 ??_InitTiming 0072  
       __size_of_parse_temp_press_calib_data 00F5                               __end_of_Insert 156E  
                               ?_IntToString 007B                               __end_of___lmul 1CC0  
                    __size_of_get_calib_data 0048                                    Insert@src 0072  
       __size_of_set_osr_press_temp_settings 0041                            __size_of_TMR0_ISR 0010  
         __end_of_bme280_set_sensor_settings 1501                   _bme280_set_sensor_settings 1494  
                     ?_OSCILLATOR_Initialize 0070               parse_temp_press_calib_data@dev 0070  
                                  _EnvSensor 01B0                     bme280_set_regs@temp_buff 0041  
                             ??_TransmitByte 0072                    _parse_humidity_calib_data 1767  
                             __end_of_strlen 1A6D                          start_initialization 000F  
                        UIntToHexString@dest 002E                     __size_of_TMR0_Initialize 0016  
            __size_of_PIN_MANAGER_Initialize 002A        parse_temp_press_calib_data@calib_data 0072  
                           UIntToHexString@i 0039                             UIntToHexString@n 002A  
                         __end_of_InitTiming 19F0                         _are_settings_changed 19FA  
                         I2C_ReadByte@ackbit 002B                      __size_of_null_ptr_check 0025  
                      __size_of_InsertString 0051                ??_set_filter_standby_settings 005D  
                            ___llmod@divisor 0070                    ??_fill_osr_press_settings 0072  
                            ___llmod@counter 0079                         __size_of_ClearString 0025  
                                   ??_Insert 0077                           bme280_init@chip_id 0068  
                      __end_of_ReadEnvSensor 07FD                         set_osr_settings@rslt 0069  
                                   ??___lmul 0078           __size_of_set_osr_humidity_settings 004E  
                    __end_of_bme280_get_regs 1EA4                              BME280_Init@rslt 00B7  
                          ??_UIntToHexString 002F                            __size_of_TimerISR 000A  
                                __pdataBANK2 015E                           null_ptr_check@rslt 0072  
                               ClearString@i 007A                                     ??_strlen 0072  
                              ?_crc16_update 0075                   compensate_temperature@var1 0048  
                 compensate_temperature@var2 004D        compensate_temperature@temperature_max 0044  
                              _ReverseString 1290                                    ___latbits 0002  
                        _compensate_humidity 0D41                                __pcstackBANK0 0020  
                              __pcstackBANK1 00A0                                __pcstackBANK2 0120  
                              ?_I2C_ReadByte 0070                      __end_of_bme280_set_regs 08C5  
                               _InsertString 1094                                crc16_update@i 0020  
                   _compensate_pressure$2263 00B9                     _compensate_pressure$2264 00AC  
                   _compensate_pressure$2265 00B0                        ?_are_settings_changed 0070  
                        _compensate_pressure 0053                   __size_of_EUSART_Initialize 000B  
        bme280_set_sensor_mode@last_set_mode 00B2            set_osr_humidity_settings@ctrl_hum 0060  
                                  crc16@data 0025                      __size_of_TransmitString 0028  
                      _TMR0_InterruptHandler 0162                                    __pnvBANK2 0162  
          set_osr_humidity_settings@reg_addr 0063                     set_osr_settings@settings 0064  
                   ??_bme280_get_sensor_data 0063                         ?_compensate_humidity 002E  
                   ??_bme280_get_sensor_mode 0045                       _PIN_MANAGER_Initialize 1B8C  
                    ?_reload_device_settings 006B                      ??_parse_device_settings 0071  
                                   ?___aldiv 0020                                     ?___awdiv 0070  
                                   ?___awmod 0070                                     ?___lldiv 0070  
        set_filter_standby_settings@reg_addr 0062                                     ?___llmod 0070  
        set_filter_standby_settings@reg_data 0063            set_osr_humidity_settings@settings 005A  
            set_osr_press_temp_settings@rslt 0061                         ?_compensate_pressure 002E  
       __size_of_set_filter_standby_settings 0042            __end_of_set_osr_humidity_settings 1094  
               ??_INTERRUPT_InterruptManager 0070                        _fill_standby_settings 1ABC  
               __end_of_fill_filter_settings 1ABC                               ??_crc16_update 007B  
            __end_of_fill_osr_press_settings 1AA0                               ?_ReverseString 0070  
                                   _BAUD1CON 019F          set_filter_standby_settings@settings 005A  
                                   _I2C_Init 1A2C                                     _I2C_Stop 1DE2  
                             ??_I2C_ReadByte 0027                            ReadEnvSensor@rslt 0038  
                             __size_of_Sleep 002B                               __size_of_crc16 0048  
set_osr_press_temp_settings@desired_settings 0060                              ___aldiv@divisor 0020  
                          ??_TMR0_Initialize 0072                              ___aldiv@counter 0028  
                                   _LATAbits 010C                                     _LATCbits 010E  
                    BME280_Init@settings_sel 00B6                                    clear_ram0 19DB  
                       __end_of_TransmitByte 1C91                        ??_compensate_humidity 0032  
             __end_of_reload_device_settings 1B17          __size_of_INTERRUPT_InterruptManager 0009  
        parse_temp_press_calib_data@reg_data 0073                             ??_WriteEnvSensor 0034  
                 ??_TMR0_SetInterruptHandler 0072                                     _PIR1bits 0010  
                               ?_bme280_init 005E                                  DebugAlert@i 0025  
                              UIntToString@i 0030                                UIntToString@n 0029  
             bme280_get_sensor_data@reg_data 00CD                         __CFG_WDTCPS$WDTCPS1F 0000  
                                   _SSP1CON1 0215                                     _SSP1CON2 0216  
                                   _TMR0_ISR 1A1C                        ??_compensate_pressure 0032  
                                   _SSP1STAT 0214                             ?_bme280_get_regs 003B  
                             _get_calib_data 1F70                                 ?_TransmitBit 0070  
                       __size_of_IntToString 0068                            ?_write_power_mode 005A  
                compensate_humidity@humidity 0043                                Insert@current 007A  
                          ?_set_osr_settings 0064                         WriteEnvSensor@dev_id 002F  
                         ??_write_power_mode 005B                                    main@index 0140  
                    compensate_humidity@var1 0047                      compensate_humidity@var2 004B  
                    compensate_humidity@var3 0057                      compensate_humidity@var4 004F  
                    compensate_humidity@var5 0053                           ??_set_osr_settings 0067  
                       TransmitString@counti 0079                      bme280_get_regs@reg_addr 0042  
                    bme280_set_regs@reg_addr 0059                      bme280_get_regs@reg_data 003B  
                    bme280_set_regs@reg_data 003B                             ?_bme280_set_regs 003B  
          bme280_get_sensor_mode@sensor_mode 0049                       ??_are_settings_changed 0071  
                          ___lmul@multiplier 0070                      bme280_set_regs@temp_len 0055  
          __size_of_bme280_parse_sensor_data 011E                    ?_bme280_parse_sensor_data 0070  
                             _null_ptr_check 1B17           __size_of_parse_humidity_calib_data 0099  
                               ?_BME280_Init 0070                        __end_of_I2C_UserAlert 0800  
                        ReadEnvSensor@dev_id 002F                  bme280_set_regs@reg_addr_cnt 0057  
                         InsertString@counti 0028                              IntToString@dest 007D  
                            IntToString@sign 002B              __size_of_bme280_get_sensor_data 005D  
                        bme280_set_regs@rslt 0058              __size_of_bme280_get_sensor_mode 002B  
                      __end_of_I2C_WriteByte 1F70                                     _TimerISR 19F0  
                     __end_of_get_calib_data 1FB8                            null_ptr_check@dev 0073  
                              InsertString@i 002A                      ??_OSCILLATOR_Initialize 0070  
                           __size_of___aldiv 0081                             __size_of___awdiv 0051  
                     ?_fill_standby_settings 0070                             __size_of___awmod 0045  
                           __size_of___lldiv 0052                             __size_of___llmod 0042  
                            ??_ReverseString 0079                 __size_of_put_device_to_sleep 003C  
                ?_bme280_set_sensor_settings 00AE                            ClearString@counti 0078  
                                   crc16@crc 0026                                     _checksum 0158  
        __end_of_parse_temp_press_calib_data 09BA                  _parse_temp_press_calib_data 08C5  
                        I2C_UserAlert@status 0070               set_filter_standby_settings@dev 005C  
                             ReadEnvSensor@i 0039                                     __ptext10 165B  
                                   __ptext11 1188                                     __ptext20 1B8C  
                                   __ptext12 1EE6                                     __ptext21 19E1  
                                   __ptext13 1136                                     __ptext30 19D5  
                                   __ptext22 1A05                                     __ptext14 15E4  
                                   __ptext31 0802                                     __ptext23 13C3  
                                   __ptext15 1B64                                     __ptext40 1B3C  
                                   __ptext32 1A56                                     __ptext24 1001  
                                   __ptext16 1C64                                     __ptext41 1E21  
                                   __ptext33 135B                                     __ptext25 1290  
                                   __ptext17 1A6D                                     __ptext50 12F3  
                                   __ptext42 1AD8                                     __ptext34 1494  
                                   __ptext26 10E5                                     __ptext18 1A10  
                                   __ptext51 1F70                                     __ptext43 1A85  
                                   __ptext35 19FA                                     __ptext27 1094  
                                   __ptext19 1A40                                     __ptext60 1C37  
                                   __ptext52 08C5                                     __ptext44 1046  
                                   __ptext36 1CF7                                     __ptext28 1501  
                                   __ptext61 142B                                     __ptext53 1767  
                                   __ptext45 1EA4                                     __ptext37 1CC0  
                                   __ptext29 19E8                                     __ptext70 0003  
                                   __ptext62 1F28                                     __ptext54 1E62  
                                   __ptext46 1ABC                                     __ptext38 1D6A  
                                   __ptext71 19F0                                     __ptext63 07FD  
                                   __ptext55 073E                                     __ptext47 1AA0  
                                   __ptext39 1AF4                                     __ptext64 1DE2  
                                   __ptext56 16DC                                     __ptext48 11DB  
                                   __ptext65 1BE1                                     __ptext57 1D2F  
                                   __ptext49 1C0C                                     __ptext66 1BB6  
                                   __ptext58 0827                                     __ptext67 1A2C  
                                   __ptext59 1B17                                     __ptext69 1A1C  
                __end_of_interleave_reg_addr 1C64                                 _SSP1CON1bits 0215  
                     __end_of_null_ptr_check 1B3C                                 _SSP1CON2bits 0216  
        __end_of_set_osr_press_temp_settings 1E62                  _set_osr_press_temp_settings 1E21  
              compensate_pressure@calib_data 002E                              _UIntToHexString 15E4  
                             _TransmitString 1B64                                __size_of_main 0269  
          bme280_compensate_data@sensor_comp 0060                     ??_bme280_compensate_data 005E  
                       _fill_filter_settings 1AA0            __end_of_parse_humidity_calib_data 1800  
                                _message_end 0320                         __end_of_crc16_update 1DE2  
                                   _messages 015E         __end_of_TMR0_DefaultInterruptHandler 0004  
      __size_of_TMR0_DefaultInterruptHandler 0001                 _TMR0_DefaultInterruptHandler 0003  
                       __CFG_WDTCWS$WDTCWSSW 0000                         __end_of_I2C_ReadByte 1767  
                            ?_get_calib_data 003E                  _compensate_temperature$2262 003C  
                                   int$flags 007E           __end_of_INTERRUPT_InterruptManager 000D  
                 _INTERRUPT_InterruptManager 0004                             UIntToString@dest 002D  
                            main@sensor_data 0134                     ??_fill_osr_temp_settings 0072  
                                 _INTCONbits 000B                       _bme280_get_sensor_data 1233  
                          InsertString@index 0024                       _bme280_get_sensor_mode 1C0C  
         set_osr_humidity_settings@ctrl_meas 0061                                ?_UIntToString 0029  
                         bme280_set_regs@dev 003D                           bme280_set_regs@len 003C  
              parse_device_settings@reg_data 0073                     ??_compensate_temperature 0032  
          bme280_compensate_data@uncomp_data 005B                              ?_null_ptr_check 0070  
                 bme280_get_sensor_data@F271 014E                   bme280_get_sensor_data@F273 0142  
                     __end_of_TransmitString 1B8C                        __size_of_TransmitByte 002D  
                                   intlevel1 0000                     ??_bme280_set_sensor_mode 00AF  
                           TransmitByte@byte 0073                parse_device_settings@settings 0070  
              fill_standby_settings@reg_data 0075                                ??_ClearString 0077  
                           ___lldiv@dividend 0074                        ?_fill_filter_settings 0070  
                    ?_PIN_MANAGER_Initialize 0070                   bme280_get_sensor_data@rslt 00D6  
                          __CFG_CLKOUTEN$OFF 0000                ?_TMR0_DefaultInterruptHandler 0070  
              fill_standby_settings@settings 0070                           WriteEnvSensor@rslt 0038  
                       __size_of_bme280_init 0068               __size_of_parse_device_settings 0058  
              __end_of_parse_device_settings 1233                                __pstringtext1 1800  
                              __pstringtext2 1806                                __pstringtext3 0000  
                       __size_of_TransmitBit 0018                                   _OPTION_REG 0095  
                           ___lldiv@quotient 0079                               ??_UIntToString 002E  
                               _TransmitByte 1C64                              _TMR0_Initialize 1A40  
       are_settings_changed@settings_changed 0072                                 ___aldiv@sign 0029  
                    __end_of_UIntToHexString 165B                            WriteEnvSensor@len 0032  
        __end_of_set_filter_standby_settings 1EE6                  _set_filter_standby_settings 1EA4  
                 bme280_get_sensor_mode@rslt 0048                       __size_of_ReadEnvSensor 00BF  
                   ?_fill_osr_press_settings 0070                   bme280_set_sensor_mode@rslt 00B3  
                            ?_TransmitString 0076               __end_of_PIN_MANAGER_Initialize 1BB6  
                            Insert@destLimit 0075          set_osr_press_temp_settings@reg_addr 0062  
        set_osr_press_temp_settings@reg_data 0063                          bme280_get_regs@rslt 0043  
                          I2C_WriteByte@data 007D              __size_of_bme280_compensate_data 0076  
                       __size_of_BME280_Init 0068          __size_of_bme280_set_sensor_settings 006D  
          bme280_get_sensor_data@sensor_comp 00D5                  write_power_mode@sensor_mode 005E  
        set_osr_press_temp_settings@settings 005A  
