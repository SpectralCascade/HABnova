

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Sep  3 18:31:10 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK5,global,class=CODE,delta=2
     6                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	cinit,global,class=CODE,merge=1,delta=2
    20                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    28                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    29                           	psect	inittext,global,class=CODE,delta=2
    30                           	psect	clrtext,global,class=CODE,delta=2
    31                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    32                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    33                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    34                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    36                           	psect	text1,local,class=CODE,merge=1,delta=2
    37                           	psect	text2,local,class=CODE,merge=1,delta=2
    38                           	psect	text3,local,class=CODE,merge=1,delta=2
    39                           	psect	text4,local,class=CODE,merge=1,delta=2
    40                           	psect	text5,local,class=CODE,merge=1,delta=2
    41                           	psect	text6,local,class=CODE,merge=1,delta=2
    42                           	psect	text7,local,class=CODE,merge=1,delta=2
    43                           	psect	text8,local,class=CODE,merge=1,delta=2
    44                           	psect	text9,local,class=CODE,merge=1,delta=2
    45                           	psect	text10,local,class=CODE,merge=1,delta=2
    46                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text12,local,class=CODE,merge=1,delta=2
    48                           	psect	text13,local,class=CODE,merge=1,delta=2
    49                           	psect	text14,local,class=CODE,merge=1,delta=2
    50                           	psect	text15,local,class=CODE,merge=1,delta=2
    51                           	psect	text16,local,class=CODE,merge=1,delta=2
    52                           	psect	text17,local,class=CODE,merge=1,delta=2
    53                           	psect	text18,local,class=CODE,merge=1,delta=2
    54                           	psect	text19,local,class=CODE,merge=1,delta=2
    55                           	psect	text20,local,class=CODE,merge=1,delta=2
    56                           	psect	text21,local,class=CODE,merge=1,delta=2
    57                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text23,local,class=CODE,merge=1,delta=2
    59                           	psect	text24,local,class=CODE,merge=1,delta=2
    60                           	psect	text25,local,class=CODE,merge=1,delta=2
    61                           	psect	text26,local,class=CODE,merge=1,delta=2
    62                           	psect	text27,local,class=CODE,merge=1,delta=2
    63                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text31,local,class=CODE,merge=1,delta=2
    67                           	psect	text32,local,class=CODE,merge=1,delta=2
    68                           	psect	text33,local,class=CODE,merge=1,delta=2
    69                           	psect	text34,local,class=CODE,merge=1,delta=2
    70                           	psect	text35,local,class=CODE,merge=1,delta=2
    71                           	psect	text36,local,class=CODE,merge=1,delta=2
    72                           	psect	text37,local,class=CODE,merge=1,delta=2
    73                           	psect	text38,local,class=CODE,merge=1,delta=2
    74                           	psect	text39,local,class=CODE,merge=1,delta=2
    75                           	psect	text40,local,class=CODE,merge=1,delta=2
    76                           	psect	text41,local,class=CODE,merge=1,delta=2
    77                           	psect	text42,local,class=CODE,merge=1,delta=2
    78                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text44,local,class=CODE,merge=1,delta=2
    80                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	text46,local,class=CODE,merge=1,delta=2
    82                           	psect	text47,local,class=CODE,merge=1,delta=2
    83                           	psect	text48,local,class=CODE,merge=1,delta=2
    84                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    85                           	psect	intentry,global,class=CODE,delta=2
    86                           	psect	text51,local,class=CODE,merge=1,delta=2
    87                           	psect	text52,local,class=CODE,merge=1,delta=2
    88                           	psect	text53,local,class=CODE,merge=1,delta=2
    89                           	psect	text54,local,class=CODE,merge=1,delta=2
    90                           	psect	text55,local,class=CODE,merge=1,delta=2
    91                           	psect	text56,local,class=CODE,merge=1,delta=2
    92                           	psect	text57,local,class=CODE,merge=1,delta=2
    93                           	dabs	1,0x620,48
    94                           	dabs	1,0x5A8,72
    95                           	dabs	1,0x2378,0,WriteEnvSensor@trb
    96                           	dabs	1,0x7E,2
    97  0000                     
    98                           ; Version 2.10
    99                           ; Generated 31/07/2019 GMT
   100                           ; 
   101                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16F1619 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  008C                     	;# 
   167  008D                     	;# 
   168  008E                     	;# 
   169  0090                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0094                     	;# 
   174  0095                     	;# 
   175  0096                     	;# 
   176  0098                     	;# 
   177  0099                     	;# 
   178  009A                     	;# 
   179  009B                     	;# 
   180  009B                     	;# 
   181  009C                     	;# 
   182  009D                     	;# 
   183  009E                     	;# 
   184  009F                     	;# 
   185  010C                     	;# 
   186  010D                     	;# 
   187  010E                     	;# 
   188  0111                     	;# 
   189  0112                     	;# 
   190  0113                     	;# 
   191  0114                     	;# 
   192  0115                     	;# 
   193  0116                     	;# 
   194  0117                     	;# 
   195  0118                     	;# 
   196  0119                     	;# 
   197  011C                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  018E                     	;# 
   201  0191                     	;# 
   202  0191                     	;# 
   203  0192                     	;# 
   204  0193                     	;# 
   205  0193                     	;# 
   206  0194                     	;# 
   207  0195                     	;# 
   208  0196                     	;# 
   209  0197                     	;# 
   210  0199                     	;# 
   211  0199                     	;# 
   212  0199                     	;# 
   213  019A                     	;# 
   214  019A                     	;# 
   215  019A                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019C                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019D                     	;# 
   226  019D                     	;# 
   227  019E                     	;# 
   228  019E                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  019F                     	;# 
   233  019F                     	;# 
   234  019F                     	;# 
   235  020C                     	;# 
   236  020D                     	;# 
   237  020E                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0216                     	;# 
   251  0216                     	;# 
   252  0217                     	;# 
   253  0217                     	;# 
   254  028C                     	;# 
   255  028D                     	;# 
   256  028E                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0294                     	;# 
   262  0298                     	;# 
   263  0298                     	;# 
   264  0299                     	;# 
   265  029A                     	;# 
   266  029B                     	;# 
   267  029E                     	;# 
   268  030C                     	;# 
   269  030D                     	;# 
   270  030E                     	;# 
   271  038C                     	;# 
   272  038D                     	;# 
   273  038E                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  0397                     	;# 
   281  0398                     	;# 
   282  0399                     	;# 
   283  040E                     	;# 
   284  0413                     	;# 
   285  0413                     	;# 
   286  0414                     	;# 
   287  0414                     	;# 
   288  0415                     	;# 
   289  0416                     	;# 
   290  0417                     	;# 
   291  0418                     	;# 
   292  041A                     	;# 
   293  041A                     	;# 
   294  041B                     	;# 
   295  041B                     	;# 
   296  041C                     	;# 
   297  041D                     	;# 
   298  041E                     	;# 
   299  041F                     	;# 
   300  0493                     	;# 
   301  0494                     	;# 
   302  0495                     	;# 
   303  0496                     	;# 
   304  049A                     	;# 
   305  049B                     	;# 
   306  049C                     	;# 
   307  049D                     	;# 
   308  058C                     	;# 
   309  058C                     	;# 
   310  058D                     	;# 
   311  058E                     	;# 
   312  058E                     	;# 
   313  058F                     	;# 
   314  0590                     	;# 
   315  0590                     	;# 
   316  0591                     	;# 
   317  0592                     	;# 
   318  0592                     	;# 
   319  0593                     	;# 
   320  0594                     	;# 
   321  0594                     	;# 
   322  0595                     	;# 
   323  0596                     	;# 
   324  0596                     	;# 
   325  0597                     	;# 
   326  0598                     	;# 
   327  0599                     	;# 
   328  059A                     	;# 
   329  059B                     	;# 
   330  059B                     	;# 
   331  059C                     	;# 
   332  059D                     	;# 
   333  060C                     	;# 
   334  060C                     	;# 
   335  060D                     	;# 
   336  060E                     	;# 
   337  060F                     	;# 
   338  060F                     	;# 
   339  0610                     	;# 
   340  0611                     	;# 
   341  0612                     	;# 
   342  0613                     	;# 
   343  0614                     	;# 
   344  0617                     	;# 
   345  0617                     	;# 
   346  0618                     	;# 
   347  0619                     	;# 
   348  061A                     	;# 
   349  061A                     	;# 
   350  061B                     	;# 
   351  061C                     	;# 
   352  0691                     	;# 
   353  0692                     	;# 
   354  0693                     	;# 
   355  0694                     	;# 
   356  0695                     	;# 
   357  0696                     	;# 
   358  0697                     	;# 
   359  0699                     	;# 
   360  069A                     	;# 
   361  0711                     	;# 
   362  0712                     	;# 
   363  0713                     	;# 
   364  0714                     	;# 
   365  0715                     	;# 
   366  0718                     	;# 
   367  0718                     	;# 
   368  0719                     	;# 
   369  071A                     	;# 
   370  071A                     	;# 
   371  071B                     	;# 
   372  071C                     	;# 
   373  071D                     	;# 
   374  0791                     	;# 
   375  0791                     	;# 
   376  0792                     	;# 
   377  0793                     	;# 
   378  0793                     	;# 
   379  0794                     	;# 
   380  0795                     	;# 
   381  0795                     	;# 
   382  0796                     	;# 
   383  0797                     	;# 
   384  0797                     	;# 
   385  0798                     	;# 
   386  0799                     	;# 
   387  079A                     	;# 
   388  080C                     	;# 
   389  080C                     	;# 
   390  080D                     	;# 
   391  080E                     	;# 
   392  080E                     	;# 
   393  080F                     	;# 
   394  0810                     	;# 
   395  0810                     	;# 
   396  0811                     	;# 
   397  0812                     	;# 
   398  0812                     	;# 
   399  0813                     	;# 
   400  0814                     	;# 
   401  0815                     	;# 
   402  0816                     	;# 
   403  0817                     	;# 
   404  0818                     	;# 
   405  0819                     	;# 
   406  081A                     	;# 
   407  081A                     	;# 
   408  081B                     	;# 
   409  081C                     	;# 
   410  081C                     	;# 
   411  081D                     	;# 
   412  088C                     	;# 
   413  088D                     	;# 
   414  088E                     	;# 
   415  088F                     	;# 
   416  088F                     	;# 
   417  0890                     	;# 
   418  0891                     	;# 
   419  0892                     	;# 
   420  0893                     	;# 
   421  0893                     	;# 
   422  0894                     	;# 
   423  0895                     	;# 
   424  0896                     	;# 
   425  0897                     	;# 
   426  0897                     	;# 
   427  0898                     	;# 
   428  0899                     	;# 
   429  0D8C                     	;# 
   430  0D8C                     	;# 
   431  0D8D                     	;# 
   432  0D8E                     	;# 
   433  0D8F                     	;# 
   434  0D8F                     	;# 
   435  0D90                     	;# 
   436  0D91                     	;# 
   437  0D92                     	;# 
   438  0D92                     	;# 
   439  0D93                     	;# 
   440  0D94                     	;# 
   441  0D95                     	;# 
   442  0D95                     	;# 
   443  0D96                     	;# 
   444  0D97                     	;# 
   445  0D98                     	;# 
   446  0D99                     	;# 
   447  0D9A                     	;# 
   448  0D9B                     	;# 
   449  0D9C                     	;# 
   450  0D9D                     	;# 
   451  0D9E                     	;# 
   452  0D9E                     	;# 
   453  0D9F                     	;# 
   454  0DA0                     	;# 
   455  0DA1                     	;# 
   456  0DA1                     	;# 
   457  0DA2                     	;# 
   458  0DA3                     	;# 
   459  0DA4                     	;# 
   460  0DA4                     	;# 
   461  0DA5                     	;# 
   462  0DA6                     	;# 
   463  0DA7                     	;# 
   464  0DA7                     	;# 
   465  0DA8                     	;# 
   466  0DA9                     	;# 
   467  0DAA                     	;# 
   468  0DAB                     	;# 
   469  0DAC                     	;# 
   470  0DAD                     	;# 
   471  0DAE                     	;# 
   472  0DAF                     	;# 
   473  0E0F                     	;# 
   474  0E10                     	;# 
   475  0E11                     	;# 
   476  0E12                     	;# 
   477  0E13                     	;# 
   478  0E14                     	;# 
   479  0E15                     	;# 
   480  0E16                     	;# 
   481  0E17                     	;# 
   482  0E18                     	;# 
   483  0E19                     	;# 
   484  0E1A                     	;# 
   485  0E1B                     	;# 
   486  0E1C                     	;# 
   487  0E1D                     	;# 
   488  0E1E                     	;# 
   489  0E1F                     	;# 
   490  0E20                     	;# 
   491  0E21                     	;# 
   492  0E22                     	;# 
   493  0E23                     	;# 
   494  0E24                     	;# 
   495  0E25                     	;# 
   496  0E26                     	;# 
   497  0E27                     	;# 
   498  0E28                     	;# 
   499  0E29                     	;# 
   500  0E2A                     	;# 
   501  0E2B                     	;# 
   502  0E2C                     	;# 
   503  0E2D                     	;# 
   504  0E2E                     	;# 
   505  0E90                     	;# 
   506  0E91                     	;# 
   507  0E92                     	;# 
   508  0E94                     	;# 
   509  0E95                     	;# 
   510  0E9C                     	;# 
   511  0E9D                     	;# 
   512  0E9E                     	;# 
   513  0E9F                     	;# 
   514  0EA0                     	;# 
   515  0EA1                     	;# 
   516  0EA2                     	;# 
   517  0EA3                     	;# 
   518  0EA4                     	;# 
   519  0EA5                     	;# 
   520  0EA6                     	;# 
   521  0EA7                     	;# 
   522  0F0F                     	;# 
   523  0F10                     	;# 
   524  0F11                     	;# 
   525  0F12                     	;# 
   526  0F13                     	;# 
   527  0F14                     	;# 
   528  0F15                     	;# 
   529  0F16                     	;# 
   530  0F17                     	;# 
   531  0F18                     	;# 
   532  0F19                     	;# 
   533  0F1A                     	;# 
   534  0F1B                     	;# 
   535  0F1C                     	;# 
   536  0F1D                     	;# 
   537  0F1E                     	;# 
   538  0F1F                     	;# 
   539  0F20                     	;# 
   540  0F21                     	;# 
   541  0F22                     	;# 
   542  0F23                     	;# 
   543  0F24                     	;# 
   544  0F25                     	;# 
   545  0F26                     	;# 
   546  0F27                     	;# 
   547  0F28                     	;# 
   548  0F29                     	;# 
   549  0F2A                     	;# 
   550  0F2B                     	;# 
   551  0F2C                     	;# 
   552  0F2D                     	;# 
   553  0F2E                     	;# 
   554  0F2F                     	;# 
   555  0F30                     	;# 
   556  0F31                     	;# 
   557  0F32                     	;# 
   558  0F33                     	;# 
   559  0F34                     	;# 
   560  0F35                     	;# 
   561  0F36                     	;# 
   562  0F37                     	;# 
   563  0FE4                     	;# 
   564  0FE5                     	;# 
   565  0FE6                     	;# 
   566  0FE7                     	;# 
   567  0FE8                     	;# 
   568  0FE9                     	;# 
   569  0FEA                     	;# 
   570  0FEB                     	;# 
   571  0FED                     	;# 
   572  0FEE                     	;# 
   573  0FEF                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0008                     	;# 
   583  0009                     	;# 
   584  000A                     	;# 
   585  000B                     	;# 
   586  000C                     	;# 
   587  000D                     	;# 
   588  000E                     	;# 
   589  0010                     	;# 
   590  0011                     	;# 
   591  0012                     	;# 
   592  0013                     	;# 
   593  0014                     	;# 
   594  0015                     	;# 
   595  0016                     	;# 
   596  0016                     	;# 
   597  0017                     	;# 
   598  0018                     	;# 
   599  0019                     	;# 
   600  001A                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001D                     	;# 
   606  001E                     	;# 
   607  001F                     	;# 
   608  008C                     	;# 
   609  008D                     	;# 
   610  008E                     	;# 
   611  0090                     	;# 
   612  0091                     	;# 
   613  0092                     	;# 
   614  0093                     	;# 
   615  0094                     	;# 
   616  0095                     	;# 
   617  0096                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009A                     	;# 
   621  009B                     	;# 
   622  009B                     	;# 
   623  009C                     	;# 
   624  009D                     	;# 
   625  009E                     	;# 
   626  009F                     	;# 
   627  010C                     	;# 
   628  010D                     	;# 
   629  010E                     	;# 
   630  0111                     	;# 
   631  0112                     	;# 
   632  0113                     	;# 
   633  0114                     	;# 
   634  0115                     	;# 
   635  0116                     	;# 
   636  0117                     	;# 
   637  0118                     	;# 
   638  0119                     	;# 
   639  011C                     	;# 
   640  018C                     	;# 
   641  018D                     	;# 
   642  018E                     	;# 
   643  0191                     	;# 
   644  0191                     	;# 
   645  0192                     	;# 
   646  0193                     	;# 
   647  0193                     	;# 
   648  0194                     	;# 
   649  0195                     	;# 
   650  0196                     	;# 
   651  0197                     	;# 
   652  0199                     	;# 
   653  0199                     	;# 
   654  0199                     	;# 
   655  019A                     	;# 
   656  019A                     	;# 
   657  019A                     	;# 
   658  019B                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019C                     	;# 
   664  019C                     	;# 
   665  019C                     	;# 
   666  019D                     	;# 
   667  019D                     	;# 
   668  019D                     	;# 
   669  019E                     	;# 
   670  019E                     	;# 
   671  019E                     	;# 
   672  019F                     	;# 
   673  019F                     	;# 
   674  019F                     	;# 
   675  019F                     	;# 
   676  019F                     	;# 
   677  020C                     	;# 
   678  020D                     	;# 
   679  020E                     	;# 
   680  0211                     	;# 
   681  0211                     	;# 
   682  0212                     	;# 
   683  0212                     	;# 
   684  0213                     	;# 
   685  0213                     	;# 
   686  0214                     	;# 
   687  0214                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0216                     	;# 
   693  0216                     	;# 
   694  0217                     	;# 
   695  0217                     	;# 
   696  028C                     	;# 
   697  028D                     	;# 
   698  028E                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0294                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  029B                     	;# 
   709  029E                     	;# 
   710  030C                     	;# 
   711  030D                     	;# 
   712  030E                     	;# 
   713  038C                     	;# 
   714  038D                     	;# 
   715  038E                     	;# 
   716  0391                     	;# 
   717  0392                     	;# 
   718  0393                     	;# 
   719  0394                     	;# 
   720  0395                     	;# 
   721  0396                     	;# 
   722  0397                     	;# 
   723  0398                     	;# 
   724  0399                     	;# 
   725  040E                     	;# 
   726  0413                     	;# 
   727  0413                     	;# 
   728  0414                     	;# 
   729  0414                     	;# 
   730  0415                     	;# 
   731  0416                     	;# 
   732  0417                     	;# 
   733  0418                     	;# 
   734  041A                     	;# 
   735  041A                     	;# 
   736  041B                     	;# 
   737  041B                     	;# 
   738  041C                     	;# 
   739  041D                     	;# 
   740  041E                     	;# 
   741  041F                     	;# 
   742  0493                     	;# 
   743  0494                     	;# 
   744  0495                     	;# 
   745  0496                     	;# 
   746  049A                     	;# 
   747  049B                     	;# 
   748  049C                     	;# 
   749  049D                     	;# 
   750  058C                     	;# 
   751  058C                     	;# 
   752  058D                     	;# 
   753  058E                     	;# 
   754  058E                     	;# 
   755  058F                     	;# 
   756  0590                     	;# 
   757  0590                     	;# 
   758  0591                     	;# 
   759  0592                     	;# 
   760  0592                     	;# 
   761  0593                     	;# 
   762  0594                     	;# 
   763  0594                     	;# 
   764  0595                     	;# 
   765  0596                     	;# 
   766  0596                     	;# 
   767  0597                     	;# 
   768  0598                     	;# 
   769  0599                     	;# 
   770  059A                     	;# 
   771  059B                     	;# 
   772  059B                     	;# 
   773  059C                     	;# 
   774  059D                     	;# 
   775  060C                     	;# 
   776  060C                     	;# 
   777  060D                     	;# 
   778  060E                     	;# 
   779  060F                     	;# 
   780  060F                     	;# 
   781  0610                     	;# 
   782  0611                     	;# 
   783  0612                     	;# 
   784  0613                     	;# 
   785  0614                     	;# 
   786  0617                     	;# 
   787  0617                     	;# 
   788  0618                     	;# 
   789  0619                     	;# 
   790  061A                     	;# 
   791  061A                     	;# 
   792  061B                     	;# 
   793  061C                     	;# 
   794  0691                     	;# 
   795  0692                     	;# 
   796  0693                     	;# 
   797  0694                     	;# 
   798  0695                     	;# 
   799  0696                     	;# 
   800  0697                     	;# 
   801  0699                     	;# 
   802  069A                     	;# 
   803  0711                     	;# 
   804  0712                     	;# 
   805  0713                     	;# 
   806  0714                     	;# 
   807  0715                     	;# 
   808  0718                     	;# 
   809  0718                     	;# 
   810  0719                     	;# 
   811  071A                     	;# 
   812  071A                     	;# 
   813  071B                     	;# 
   814  071C                     	;# 
   815  071D                     	;# 
   816  0791                     	;# 
   817  0791                     	;# 
   818  0792                     	;# 
   819  0793                     	;# 
   820  0793                     	;# 
   821  0794                     	;# 
   822  0795                     	;# 
   823  0795                     	;# 
   824  0796                     	;# 
   825  0797                     	;# 
   826  0797                     	;# 
   827  0798                     	;# 
   828  0799                     	;# 
   829  079A                     	;# 
   830  080C                     	;# 
   831  080C                     	;# 
   832  080D                     	;# 
   833  080E                     	;# 
   834  080E                     	;# 
   835  080F                     	;# 
   836  0810                     	;# 
   837  0810                     	;# 
   838  0811                     	;# 
   839  0812                     	;# 
   840  0812                     	;# 
   841  0813                     	;# 
   842  0814                     	;# 
   843  0815                     	;# 
   844  0816                     	;# 
   845  0817                     	;# 
   846  0818                     	;# 
   847  0819                     	;# 
   848  081A                     	;# 
   849  081A                     	;# 
   850  081B                     	;# 
   851  081C                     	;# 
   852  081C                     	;# 
   853  081D                     	;# 
   854  088C                     	;# 
   855  088D                     	;# 
   856  088E                     	;# 
   857  088F                     	;# 
   858  088F                     	;# 
   859  0890                     	;# 
   860  0891                     	;# 
   861  0892                     	;# 
   862  0893                     	;# 
   863  0893                     	;# 
   864  0894                     	;# 
   865  0895                     	;# 
   866  0896                     	;# 
   867  0897                     	;# 
   868  0897                     	;# 
   869  0898                     	;# 
   870  0899                     	;# 
   871  0D8C                     	;# 
   872  0D8C                     	;# 
   873  0D8D                     	;# 
   874  0D8E                     	;# 
   875  0D8F                     	;# 
   876  0D8F                     	;# 
   877  0D90                     	;# 
   878  0D91                     	;# 
   879  0D92                     	;# 
   880  0D92                     	;# 
   881  0D93                     	;# 
   882  0D94                     	;# 
   883  0D95                     	;# 
   884  0D95                     	;# 
   885  0D96                     	;# 
   886  0D97                     	;# 
   887  0D98                     	;# 
   888  0D99                     	;# 
   889  0D9A                     	;# 
   890  0D9B                     	;# 
   891  0D9C                     	;# 
   892  0D9D                     	;# 
   893  0D9E                     	;# 
   894  0D9E                     	;# 
   895  0D9F                     	;# 
   896  0DA0                     	;# 
   897  0DA1                     	;# 
   898  0DA1                     	;# 
   899  0DA2                     	;# 
   900  0DA3                     	;# 
   901  0DA4                     	;# 
   902  0DA4                     	;# 
   903  0DA5                     	;# 
   904  0DA6                     	;# 
   905  0DA7                     	;# 
   906  0DA7                     	;# 
   907  0DA8                     	;# 
   908  0DA9                     	;# 
   909  0DAA                     	;# 
   910  0DAB                     	;# 
   911  0DAC                     	;# 
   912  0DAD                     	;# 
   913  0DAE                     	;# 
   914  0DAF                     	;# 
   915  0E0F                     	;# 
   916  0E10                     	;# 
   917  0E11                     	;# 
   918  0E12                     	;# 
   919  0E13                     	;# 
   920  0E14                     	;# 
   921  0E15                     	;# 
   922  0E16                     	;# 
   923  0E17                     	;# 
   924  0E18                     	;# 
   925  0E19                     	;# 
   926  0E1A                     	;# 
   927  0E1B                     	;# 
   928  0E1C                     	;# 
   929  0E1D                     	;# 
   930  0E1E                     	;# 
   931  0E1F                     	;# 
   932  0E20                     	;# 
   933  0E21                     	;# 
   934  0E22                     	;# 
   935  0E23                     	;# 
   936  0E24                     	;# 
   937  0E25                     	;# 
   938  0E26                     	;# 
   939  0E27                     	;# 
   940  0E28                     	;# 
   941  0E29                     	;# 
   942  0E2A                     	;# 
   943  0E2B                     	;# 
   944  0E2C                     	;# 
   945  0E2D                     	;# 
   946  0E2E                     	;# 
   947  0E90                     	;# 
   948  0E91                     	;# 
   949  0E92                     	;# 
   950  0E94                     	;# 
   951  0E95                     	;# 
   952  0E9C                     	;# 
   953  0E9D                     	;# 
   954  0E9E                     	;# 
   955  0E9F                     	;# 
   956  0EA0                     	;# 
   957  0EA1                     	;# 
   958  0EA2                     	;# 
   959  0EA3                     	;# 
   960  0EA4                     	;# 
   961  0EA5                     	;# 
   962  0EA6                     	;# 
   963  0EA7                     	;# 
   964  0F0F                     	;# 
   965  0F10                     	;# 
   966  0F11                     	;# 
   967  0F12                     	;# 
   968  0F13                     	;# 
   969  0F14                     	;# 
   970  0F15                     	;# 
   971  0F16                     	;# 
   972  0F17                     	;# 
   973  0F18                     	;# 
   974  0F19                     	;# 
   975  0F1A                     	;# 
   976  0F1B                     	;# 
   977  0F1C                     	;# 
   978  0F1D                     	;# 
   979  0F1E                     	;# 
   980  0F1F                     	;# 
   981  0F20                     	;# 
   982  0F21                     	;# 
   983  0F22                     	;# 
   984  0F23                     	;# 
   985  0F24                     	;# 
   986  0F25                     	;# 
   987  0F26                     	;# 
   988  0F27                     	;# 
   989  0F28                     	;# 
   990  0F29                     	;# 
   991  0F2A                     	;# 
   992  0F2B                     	;# 
   993  0F2C                     	;# 
   994  0F2D                     	;# 
   995  0F2E                     	;# 
   996  0F2F                     	;# 
   997  0F30                     	;# 
   998  0F31                     	;# 
   999  0F32                     	;# 
  1000  0F33                     	;# 
  1001  0F34                     	;# 
  1002  0F35                     	;# 
  1003  0F36                     	;# 
  1004  0F37                     	;# 
  1005  0FE4                     	;# 
  1006  0FE5                     	;# 
  1007  0FE6                     	;# 
  1008  0FE7                     	;# 
  1009  0FE8                     	;# 
  1010  0FE9                     	;# 
  1011  0FEA                     	;# 
  1012  0FEB                     	;# 
  1013  0FED                     	;# 
  1014  0FEE                     	;# 
  1015  0FEF                     	;# 
  1016  0000                     	;# 
  1017  0001                     	;# 
  1018  0002                     	;# 
  1019  0003                     	;# 
  1020  0004                     	;# 
  1021  0005                     	;# 
  1022  0006                     	;# 
  1023  0007                     	;# 
  1024  0008                     	;# 
  1025  0009                     	;# 
  1026  000A                     	;# 
  1027  000B                     	;# 
  1028  000C                     	;# 
  1029  000D                     	;# 
  1030  000E                     	;# 
  1031  0010                     	;# 
  1032  0011                     	;# 
  1033  0012                     	;# 
  1034  0013                     	;# 
  1035  0014                     	;# 
  1036  0015                     	;# 
  1037  0016                     	;# 
  1038  0016                     	;# 
  1039  0017                     	;# 
  1040  0018                     	;# 
  1041  0019                     	;# 
  1042  001A                     	;# 
  1043  001A                     	;# 
  1044  001B                     	;# 
  1045  001B                     	;# 
  1046  001C                     	;# 
  1047  001D                     	;# 
  1048  001E                     	;# 
  1049  001F                     	;# 
  1050  008C                     	;# 
  1051  008D                     	;# 
  1052  008E                     	;# 
  1053  0090                     	;# 
  1054  0091                     	;# 
  1055  0092                     	;# 
  1056  0093                     	;# 
  1057  0094                     	;# 
  1058  0095                     	;# 
  1059  0096                     	;# 
  1060  0098                     	;# 
  1061  0099                     	;# 
  1062  009A                     	;# 
  1063  009B                     	;# 
  1064  009B                     	;# 
  1065  009C                     	;# 
  1066  009D                     	;# 
  1067  009E                     	;# 
  1068  009F                     	;# 
  1069  010C                     	;# 
  1070  010D                     	;# 
  1071  010E                     	;# 
  1072  0111                     	;# 
  1073  0112                     	;# 
  1074  0113                     	;# 
  1075  0114                     	;# 
  1076  0115                     	;# 
  1077  0116                     	;# 
  1078  0117                     	;# 
  1079  0118                     	;# 
  1080  0119                     	;# 
  1081  011C                     	;# 
  1082  018C                     	;# 
  1083  018D                     	;# 
  1084  018E                     	;# 
  1085  0191                     	;# 
  1086  0191                     	;# 
  1087  0192                     	;# 
  1088  0193                     	;# 
  1089  0193                     	;# 
  1090  0194                     	;# 
  1091  0195                     	;# 
  1092  0196                     	;# 
  1093  0197                     	;# 
  1094  0199                     	;# 
  1095  0199                     	;# 
  1096  0199                     	;# 
  1097  019A                     	;# 
  1098  019A                     	;# 
  1099  019A                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019B                     	;# 
  1104  019B                     	;# 
  1105  019C                     	;# 
  1106  019C                     	;# 
  1107  019C                     	;# 
  1108  019D                     	;# 
  1109  019D                     	;# 
  1110  019D                     	;# 
  1111  019E                     	;# 
  1112  019E                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  019F                     	;# 
  1116  019F                     	;# 
  1117  019F                     	;# 
  1118  019F                     	;# 
  1119  020C                     	;# 
  1120  020D                     	;# 
  1121  020E                     	;# 
  1122  0211                     	;# 
  1123  0211                     	;# 
  1124  0212                     	;# 
  1125  0212                     	;# 
  1126  0213                     	;# 
  1127  0213                     	;# 
  1128  0214                     	;# 
  1129  0214                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0215                     	;# 
  1133  0215                     	;# 
  1134  0216                     	;# 
  1135  0216                     	;# 
  1136  0217                     	;# 
  1137  0217                     	;# 
  1138  028C                     	;# 
  1139  028D                     	;# 
  1140  028E                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0294                     	;# 
  1146  0298                     	;# 
  1147  0298                     	;# 
  1148  0299                     	;# 
  1149  029A                     	;# 
  1150  029B                     	;# 
  1151  029E                     	;# 
  1152  030C                     	;# 
  1153  030D                     	;# 
  1154  030E                     	;# 
  1155  038C                     	;# 
  1156  038D                     	;# 
  1157  038E                     	;# 
  1158  0391                     	;# 
  1159  0392                     	;# 
  1160  0393                     	;# 
  1161  0394                     	;# 
  1162  0395                     	;# 
  1163  0396                     	;# 
  1164  0397                     	;# 
  1165  0398                     	;# 
  1166  0399                     	;# 
  1167  040E                     	;# 
  1168  0413                     	;# 
  1169  0413                     	;# 
  1170  0414                     	;# 
  1171  0414                     	;# 
  1172  0415                     	;# 
  1173  0416                     	;# 
  1174  0417                     	;# 
  1175  0418                     	;# 
  1176  041A                     	;# 
  1177  041A                     	;# 
  1178  041B                     	;# 
  1179  041B                     	;# 
  1180  041C                     	;# 
  1181  041D                     	;# 
  1182  041E                     	;# 
  1183  041F                     	;# 
  1184  0493                     	;# 
  1185  0494                     	;# 
  1186  0495                     	;# 
  1187  0496                     	;# 
  1188  049A                     	;# 
  1189  049B                     	;# 
  1190  049C                     	;# 
  1191  049D                     	;# 
  1192  058C                     	;# 
  1193  058C                     	;# 
  1194  058D                     	;# 
  1195  058E                     	;# 
  1196  058E                     	;# 
  1197  058F                     	;# 
  1198  0590                     	;# 
  1199  0590                     	;# 
  1200  0591                     	;# 
  1201  0592                     	;# 
  1202  0592                     	;# 
  1203  0593                     	;# 
  1204  0594                     	;# 
  1205  0594                     	;# 
  1206  0595                     	;# 
  1207  0596                     	;# 
  1208  0596                     	;# 
  1209  0597                     	;# 
  1210  0598                     	;# 
  1211  0599                     	;# 
  1212  059A                     	;# 
  1213  059B                     	;# 
  1214  059B                     	;# 
  1215  059C                     	;# 
  1216  059D                     	;# 
  1217  060C                     	;# 
  1218  060C                     	;# 
  1219  060D                     	;# 
  1220  060E                     	;# 
  1221  060F                     	;# 
  1222  060F                     	;# 
  1223  0610                     	;# 
  1224  0611                     	;# 
  1225  0612                     	;# 
  1226  0613                     	;# 
  1227  0614                     	;# 
  1228  0617                     	;# 
  1229  0617                     	;# 
  1230  0618                     	;# 
  1231  0619                     	;# 
  1232  061A                     	;# 
  1233  061A                     	;# 
  1234  061B                     	;# 
  1235  061C                     	;# 
  1236  0691                     	;# 
  1237  0692                     	;# 
  1238  0693                     	;# 
  1239  0694                     	;# 
  1240  0695                     	;# 
  1241  0696                     	;# 
  1242  0697                     	;# 
  1243  0699                     	;# 
  1244  069A                     	;# 
  1245  0711                     	;# 
  1246  0712                     	;# 
  1247  0713                     	;# 
  1248  0714                     	;# 
  1249  0715                     	;# 
  1250  0718                     	;# 
  1251  0718                     	;# 
  1252  0719                     	;# 
  1253  071A                     	;# 
  1254  071A                     	;# 
  1255  071B                     	;# 
  1256  071C                     	;# 
  1257  071D                     	;# 
  1258  0791                     	;# 
  1259  0791                     	;# 
  1260  0792                     	;# 
  1261  0793                     	;# 
  1262  0793                     	;# 
  1263  0794                     	;# 
  1264  0795                     	;# 
  1265  0795                     	;# 
  1266  0796                     	;# 
  1267  0797                     	;# 
  1268  0797                     	;# 
  1269  0798                     	;# 
  1270  0799                     	;# 
  1271  079A                     	;# 
  1272  080C                     	;# 
  1273  080C                     	;# 
  1274  080D                     	;# 
  1275  080E                     	;# 
  1276  080E                     	;# 
  1277  080F                     	;# 
  1278  0810                     	;# 
  1279  0810                     	;# 
  1280  0811                     	;# 
  1281  0812                     	;# 
  1282  0812                     	;# 
  1283  0813                     	;# 
  1284  0814                     	;# 
  1285  0815                     	;# 
  1286  0816                     	;# 
  1287  0817                     	;# 
  1288  0818                     	;# 
  1289  0819                     	;# 
  1290  081A                     	;# 
  1291  081A                     	;# 
  1292  081B                     	;# 
  1293  081C                     	;# 
  1294  081C                     	;# 
  1295  081D                     	;# 
  1296  088C                     	;# 
  1297  088D                     	;# 
  1298  088E                     	;# 
  1299  088F                     	;# 
  1300  088F                     	;# 
  1301  0890                     	;# 
  1302  0891                     	;# 
  1303  0892                     	;# 
  1304  0893                     	;# 
  1305  0893                     	;# 
  1306  0894                     	;# 
  1307  0895                     	;# 
  1308  0896                     	;# 
  1309  0897                     	;# 
  1310  0897                     	;# 
  1311  0898                     	;# 
  1312  0899                     	;# 
  1313  0D8C                     	;# 
  1314  0D8C                     	;# 
  1315  0D8D                     	;# 
  1316  0D8E                     	;# 
  1317  0D8F                     	;# 
  1318  0D8F                     	;# 
  1319  0D90                     	;# 
  1320  0D91                     	;# 
  1321  0D92                     	;# 
  1322  0D92                     	;# 
  1323  0D93                     	;# 
  1324  0D94                     	;# 
  1325  0D95                     	;# 
  1326  0D95                     	;# 
  1327  0D96                     	;# 
  1328  0D97                     	;# 
  1329  0D98                     	;# 
  1330  0D99                     	;# 
  1331  0D9A                     	;# 
  1332  0D9B                     	;# 
  1333  0D9C                     	;# 
  1334  0D9D                     	;# 
  1335  0D9E                     	;# 
  1336  0D9E                     	;# 
  1337  0D9F                     	;# 
  1338  0DA0                     	;# 
  1339  0DA1                     	;# 
  1340  0DA1                     	;# 
  1341  0DA2                     	;# 
  1342  0DA3                     	;# 
  1343  0DA4                     	;# 
  1344  0DA4                     	;# 
  1345  0DA5                     	;# 
  1346  0DA6                     	;# 
  1347  0DA7                     	;# 
  1348  0DA7                     	;# 
  1349  0DA8                     	;# 
  1350  0DA9                     	;# 
  1351  0DAA                     	;# 
  1352  0DAB                     	;# 
  1353  0DAC                     	;# 
  1354  0DAD                     	;# 
  1355  0DAE                     	;# 
  1356  0DAF                     	;# 
  1357  0E0F                     	;# 
  1358  0E10                     	;# 
  1359  0E11                     	;# 
  1360  0E12                     	;# 
  1361  0E13                     	;# 
  1362  0E14                     	;# 
  1363  0E15                     	;# 
  1364  0E16                     	;# 
  1365  0E17                     	;# 
  1366  0E18                     	;# 
  1367  0E19                     	;# 
  1368  0E1A                     	;# 
  1369  0E1B                     	;# 
  1370  0E1C                     	;# 
  1371  0E1D                     	;# 
  1372  0E1E                     	;# 
  1373  0E1F                     	;# 
  1374  0E20                     	;# 
  1375  0E21                     	;# 
  1376  0E22                     	;# 
  1377  0E23                     	;# 
  1378  0E24                     	;# 
  1379  0E25                     	;# 
  1380  0E26                     	;# 
  1381  0E27                     	;# 
  1382  0E28                     	;# 
  1383  0E29                     	;# 
  1384  0E2A                     	;# 
  1385  0E2B                     	;# 
  1386  0E2C                     	;# 
  1387  0E2D                     	;# 
  1388  0E2E                     	;# 
  1389  0E90                     	;# 
  1390  0E91                     	;# 
  1391  0E92                     	;# 
  1392  0E94                     	;# 
  1393  0E95                     	;# 
  1394  0E9C                     	;# 
  1395  0E9D                     	;# 
  1396  0E9E                     	;# 
  1397  0E9F                     	;# 
  1398  0EA0                     	;# 
  1399  0EA1                     	;# 
  1400  0EA2                     	;# 
  1401  0EA3                     	;# 
  1402  0EA4                     	;# 
  1403  0EA5                     	;# 
  1404  0EA6                     	;# 
  1405  0EA7                     	;# 
  1406  0F0F                     	;# 
  1407  0F10                     	;# 
  1408  0F11                     	;# 
  1409  0F12                     	;# 
  1410  0F13                     	;# 
  1411  0F14                     	;# 
  1412  0F15                     	;# 
  1413  0F16                     	;# 
  1414  0F17                     	;# 
  1415  0F18                     	;# 
  1416  0F19                     	;# 
  1417  0F1A                     	;# 
  1418  0F1B                     	;# 
  1419  0F1C                     	;# 
  1420  0F1D                     	;# 
  1421  0F1E                     	;# 
  1422  0F1F                     	;# 
  1423  0F20                     	;# 
  1424  0F21                     	;# 
  1425  0F22                     	;# 
  1426  0F23                     	;# 
  1427  0F24                     	;# 
  1428  0F25                     	;# 
  1429  0F26                     	;# 
  1430  0F27                     	;# 
  1431  0F28                     	;# 
  1432  0F29                     	;# 
  1433  0F2A                     	;# 
  1434  0F2B                     	;# 
  1435  0F2C                     	;# 
  1436  0F2D                     	;# 
  1437  0F2E                     	;# 
  1438  0F2F                     	;# 
  1439  0F30                     	;# 
  1440  0F31                     	;# 
  1441  0F32                     	;# 
  1442  0F33                     	;# 
  1443  0F34                     	;# 
  1444  0F35                     	;# 
  1445  0F36                     	;# 
  1446  0F37                     	;# 
  1447  0FE4                     	;# 
  1448  0FE5                     	;# 
  1449  0FE6                     	;# 
  1450  0FE7                     	;# 
  1451  0FE8                     	;# 
  1452  0FE9                     	;# 
  1453  0FEA                     	;# 
  1454  0FEB                     	;# 
  1455  0FED                     	;# 
  1456  0FEE                     	;# 
  1457  0FEF                     	;# 
  1458  0000                     	;# 
  1459  0001                     	;# 
  1460  0002                     	;# 
  1461  0003                     	;# 
  1462  0004                     	;# 
  1463  0005                     	;# 
  1464  0006                     	;# 
  1465  0007                     	;# 
  1466  0008                     	;# 
  1467  0009                     	;# 
  1468  000A                     	;# 
  1469  000B                     	;# 
  1470  000C                     	;# 
  1471  000D                     	;# 
  1472  000E                     	;# 
  1473  0010                     	;# 
  1474  0011                     	;# 
  1475  0012                     	;# 
  1476  0013                     	;# 
  1477  0014                     	;# 
  1478  0015                     	;# 
  1479  0016                     	;# 
  1480  0016                     	;# 
  1481  0017                     	;# 
  1482  0018                     	;# 
  1483  0019                     	;# 
  1484  001A                     	;# 
  1485  001A                     	;# 
  1486  001B                     	;# 
  1487  001B                     	;# 
  1488  001C                     	;# 
  1489  001D                     	;# 
  1490  001E                     	;# 
  1491  001F                     	;# 
  1492  008C                     	;# 
  1493  008D                     	;# 
  1494  008E                     	;# 
  1495  0090                     	;# 
  1496  0091                     	;# 
  1497  0092                     	;# 
  1498  0093                     	;# 
  1499  0094                     	;# 
  1500  0095                     	;# 
  1501  0096                     	;# 
  1502  0098                     	;# 
  1503  0099                     	;# 
  1504  009A                     	;# 
  1505  009B                     	;# 
  1506  009B                     	;# 
  1507  009C                     	;# 
  1508  009D                     	;# 
  1509  009E                     	;# 
  1510  009F                     	;# 
  1511  010C                     	;# 
  1512  010D                     	;# 
  1513  010E                     	;# 
  1514  0111                     	;# 
  1515  0112                     	;# 
  1516  0113                     	;# 
  1517  0114                     	;# 
  1518  0115                     	;# 
  1519  0116                     	;# 
  1520  0117                     	;# 
  1521  0118                     	;# 
  1522  0119                     	;# 
  1523  011C                     	;# 
  1524  018C                     	;# 
  1525  018D                     	;# 
  1526  018E                     	;# 
  1527  0191                     	;# 
  1528  0191                     	;# 
  1529  0192                     	;# 
  1530  0193                     	;# 
  1531  0193                     	;# 
  1532  0194                     	;# 
  1533  0195                     	;# 
  1534  0196                     	;# 
  1535  0197                     	;# 
  1536  0199                     	;# 
  1537  0199                     	;# 
  1538  0199                     	;# 
  1539  019A                     	;# 
  1540  019A                     	;# 
  1541  019A                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019B                     	;# 
  1546  019B                     	;# 
  1547  019C                     	;# 
  1548  019C                     	;# 
  1549  019C                     	;# 
  1550  019D                     	;# 
  1551  019D                     	;# 
  1552  019D                     	;# 
  1553  019E                     	;# 
  1554  019E                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  019F                     	;# 
  1558  019F                     	;# 
  1559  019F                     	;# 
  1560  019F                     	;# 
  1561  020C                     	;# 
  1562  020D                     	;# 
  1563  020E                     	;# 
  1564  0211                     	;# 
  1565  0211                     	;# 
  1566  0212                     	;# 
  1567  0212                     	;# 
  1568  0213                     	;# 
  1569  0213                     	;# 
  1570  0214                     	;# 
  1571  0214                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  028C                     	;# 
  1581  028D                     	;# 
  1582  028E                     	;# 
  1583  0291                     	;# 
  1584  0291                     	;# 
  1585  0292                     	;# 
  1586  0293                     	;# 
  1587  0294                     	;# 
  1588  0298                     	;# 
  1589  0298                     	;# 
  1590  0299                     	;# 
  1591  029A                     	;# 
  1592  029B                     	;# 
  1593  029E                     	;# 
  1594  030C                     	;# 
  1595  030D                     	;# 
  1596  030E                     	;# 
  1597  038C                     	;# 
  1598  038D                     	;# 
  1599  038E                     	;# 
  1600  0391                     	;# 
  1601  0392                     	;# 
  1602  0393                     	;# 
  1603  0394                     	;# 
  1604  0395                     	;# 
  1605  0396                     	;# 
  1606  0397                     	;# 
  1607  0398                     	;# 
  1608  0399                     	;# 
  1609  040E                     	;# 
  1610  0413                     	;# 
  1611  0413                     	;# 
  1612  0414                     	;# 
  1613  0414                     	;# 
  1614  0415                     	;# 
  1615  0416                     	;# 
  1616  0417                     	;# 
  1617  0418                     	;# 
  1618  041A                     	;# 
  1619  041A                     	;# 
  1620  041B                     	;# 
  1621  041B                     	;# 
  1622  041C                     	;# 
  1623  041D                     	;# 
  1624  041E                     	;# 
  1625  041F                     	;# 
  1626  0493                     	;# 
  1627  0494                     	;# 
  1628  0495                     	;# 
  1629  0496                     	;# 
  1630  049A                     	;# 
  1631  049B                     	;# 
  1632  049C                     	;# 
  1633  049D                     	;# 
  1634  058C                     	;# 
  1635  058C                     	;# 
  1636  058D                     	;# 
  1637  058E                     	;# 
  1638  058E                     	;# 
  1639  058F                     	;# 
  1640  0590                     	;# 
  1641  0590                     	;# 
  1642  0591                     	;# 
  1643  0592                     	;# 
  1644  0592                     	;# 
  1645  0593                     	;# 
  1646  0594                     	;# 
  1647  0594                     	;# 
  1648  0595                     	;# 
  1649  0596                     	;# 
  1650  0596                     	;# 
  1651  0597                     	;# 
  1652  0598                     	;# 
  1653  0599                     	;# 
  1654  059A                     	;# 
  1655  059B                     	;# 
  1656  059B                     	;# 
  1657  059C                     	;# 
  1658  059D                     	;# 
  1659  060C                     	;# 
  1660  060C                     	;# 
  1661  060D                     	;# 
  1662  060E                     	;# 
  1663  060F                     	;# 
  1664  060F                     	;# 
  1665  0610                     	;# 
  1666  0611                     	;# 
  1667  0612                     	;# 
  1668  0613                     	;# 
  1669  0614                     	;# 
  1670  0617                     	;# 
  1671  0617                     	;# 
  1672  0618                     	;# 
  1673  0619                     	;# 
  1674  061A                     	;# 
  1675  061A                     	;# 
  1676  061B                     	;# 
  1677  061C                     	;# 
  1678  0691                     	;# 
  1679  0692                     	;# 
  1680  0693                     	;# 
  1681  0694                     	;# 
  1682  0695                     	;# 
  1683  0696                     	;# 
  1684  0697                     	;# 
  1685  0699                     	;# 
  1686  069A                     	;# 
  1687  0711                     	;# 
  1688  0712                     	;# 
  1689  0713                     	;# 
  1690  0714                     	;# 
  1691  0715                     	;# 
  1692  0718                     	;# 
  1693  0718                     	;# 
  1694  0719                     	;# 
  1695  071A                     	;# 
  1696  071A                     	;# 
  1697  071B                     	;# 
  1698  071C                     	;# 
  1699  071D                     	;# 
  1700  0791                     	;# 
  1701  0791                     	;# 
  1702  0792                     	;# 
  1703  0793                     	;# 
  1704  0793                     	;# 
  1705  0794                     	;# 
  1706  0795                     	;# 
  1707  0795                     	;# 
  1708  0796                     	;# 
  1709  0797                     	;# 
  1710  0797                     	;# 
  1711  0798                     	;# 
  1712  0799                     	;# 
  1713  079A                     	;# 
  1714  080C                     	;# 
  1715  080C                     	;# 
  1716  080D                     	;# 
  1717  080E                     	;# 
  1718  080E                     	;# 
  1719  080F                     	;# 
  1720  0810                     	;# 
  1721  0810                     	;# 
  1722  0811                     	;# 
  1723  0812                     	;# 
  1724  0812                     	;# 
  1725  0813                     	;# 
  1726  0814                     	;# 
  1727  0815                     	;# 
  1728  0816                     	;# 
  1729  0817                     	;# 
  1730  0818                     	;# 
  1731  0819                     	;# 
  1732  081A                     	;# 
  1733  081A                     	;# 
  1734  081B                     	;# 
  1735  081C                     	;# 
  1736  081C                     	;# 
  1737  081D                     	;# 
  1738  088C                     	;# 
  1739  088D                     	;# 
  1740  088E                     	;# 
  1741  088F                     	;# 
  1742  088F                     	;# 
  1743  0890                     	;# 
  1744  0891                     	;# 
  1745  0892                     	;# 
  1746  0893                     	;# 
  1747  0893                     	;# 
  1748  0894                     	;# 
  1749  0895                     	;# 
  1750  0896                     	;# 
  1751  0897                     	;# 
  1752  0897                     	;# 
  1753  0898                     	;# 
  1754  0899                     	;# 
  1755  0D8C                     	;# 
  1756  0D8C                     	;# 
  1757  0D8D                     	;# 
  1758  0D8E                     	;# 
  1759  0D8F                     	;# 
  1760  0D8F                     	;# 
  1761  0D90                     	;# 
  1762  0D91                     	;# 
  1763  0D92                     	;# 
  1764  0D92                     	;# 
  1765  0D93                     	;# 
  1766  0D94                     	;# 
  1767  0D95                     	;# 
  1768  0D95                     	;# 
  1769  0D96                     	;# 
  1770  0D97                     	;# 
  1771  0D98                     	;# 
  1772  0D99                     	;# 
  1773  0D9A                     	;# 
  1774  0D9B                     	;# 
  1775  0D9C                     	;# 
  1776  0D9D                     	;# 
  1777  0D9E                     	;# 
  1778  0D9E                     	;# 
  1779  0D9F                     	;# 
  1780  0DA0                     	;# 
  1781  0DA1                     	;# 
  1782  0DA1                     	;# 
  1783  0DA2                     	;# 
  1784  0DA3                     	;# 
  1785  0DA4                     	;# 
  1786  0DA4                     	;# 
  1787  0DA5                     	;# 
  1788  0DA6                     	;# 
  1789  0DA7                     	;# 
  1790  0DA7                     	;# 
  1791  0DA8                     	;# 
  1792  0DA9                     	;# 
  1793  0DAA                     	;# 
  1794  0DAB                     	;# 
  1795  0DAC                     	;# 
  1796  0DAD                     	;# 
  1797  0DAE                     	;# 
  1798  0DAF                     	;# 
  1799  0E0F                     	;# 
  1800  0E10                     	;# 
  1801  0E11                     	;# 
  1802  0E12                     	;# 
  1803  0E13                     	;# 
  1804  0E14                     	;# 
  1805  0E15                     	;# 
  1806  0E16                     	;# 
  1807  0E17                     	;# 
  1808  0E18                     	;# 
  1809  0E19                     	;# 
  1810  0E1A                     	;# 
  1811  0E1B                     	;# 
  1812  0E1C                     	;# 
  1813  0E1D                     	;# 
  1814  0E1E                     	;# 
  1815  0E1F                     	;# 
  1816  0E20                     	;# 
  1817  0E21                     	;# 
  1818  0E22                     	;# 
  1819  0E23                     	;# 
  1820  0E24                     	;# 
  1821  0E25                     	;# 
  1822  0E26                     	;# 
  1823  0E27                     	;# 
  1824  0E28                     	;# 
  1825  0E29                     	;# 
  1826  0E2A                     	;# 
  1827  0E2B                     	;# 
  1828  0E2C                     	;# 
  1829  0E2D                     	;# 
  1830  0E2E                     	;# 
  1831  0E90                     	;# 
  1832  0E91                     	;# 
  1833  0E92                     	;# 
  1834  0E94                     	;# 
  1835  0E95                     	;# 
  1836  0E9C                     	;# 
  1837  0E9D                     	;# 
  1838  0E9E                     	;# 
  1839  0E9F                     	;# 
  1840  0EA0                     	;# 
  1841  0EA1                     	;# 
  1842  0EA2                     	;# 
  1843  0EA3                     	;# 
  1844  0EA4                     	;# 
  1845  0EA5                     	;# 
  1846  0EA6                     	;# 
  1847  0EA7                     	;# 
  1848  0F0F                     	;# 
  1849  0F10                     	;# 
  1850  0F11                     	;# 
  1851  0F12                     	;# 
  1852  0F13                     	;# 
  1853  0F14                     	;# 
  1854  0F15                     	;# 
  1855  0F16                     	;# 
  1856  0F17                     	;# 
  1857  0F18                     	;# 
  1858  0F19                     	;# 
  1859  0F1A                     	;# 
  1860  0F1B                     	;# 
  1861  0F1C                     	;# 
  1862  0F1D                     	;# 
  1863  0F1E                     	;# 
  1864  0F1F                     	;# 
  1865  0F20                     	;# 
  1866  0F21                     	;# 
  1867  0F22                     	;# 
  1868  0F23                     	;# 
  1869  0F24                     	;# 
  1870  0F25                     	;# 
  1871  0F26                     	;# 
  1872  0F27                     	;# 
  1873  0F28                     	;# 
  1874  0F29                     	;# 
  1875  0F2A                     	;# 
  1876  0F2B                     	;# 
  1877  0F2C                     	;# 
  1878  0F2D                     	;# 
  1879  0F2E                     	;# 
  1880  0F2F                     	;# 
  1881  0F30                     	;# 
  1882  0F31                     	;# 
  1883  0F32                     	;# 
  1884  0F33                     	;# 
  1885  0F34                     	;# 
  1886  0F35                     	;# 
  1887  0F36                     	;# 
  1888  0F37                     	;# 
  1889  0FE4                     	;# 
  1890  0FE5                     	;# 
  1891  0FE6                     	;# 
  1892  0FE7                     	;# 
  1893  0FE8                     	;# 
  1894  0FE9                     	;# 
  1895  0FEA                     	;# 
  1896  0FEB                     	;# 
  1897  0FED                     	;# 
  1898  0FEE                     	;# 
  1899  0FEF                     	;# 
  1900  0000                     	;# 
  1901  0001                     	;# 
  1902  0002                     	;# 
  1903  0003                     	;# 
  1904  0004                     	;# 
  1905  0005                     	;# 
  1906  0006                     	;# 
  1907  0007                     	;# 
  1908  0008                     	;# 
  1909  0009                     	;# 
  1910  000A                     	;# 
  1911  000B                     	;# 
  1912  000C                     	;# 
  1913  000D                     	;# 
  1914  000E                     	;# 
  1915  0010                     	;# 
  1916  0011                     	;# 
  1917  0012                     	;# 
  1918  0013                     	;# 
  1919  0014                     	;# 
  1920  0015                     	;# 
  1921  0016                     	;# 
  1922  0016                     	;# 
  1923  0017                     	;# 
  1924  0018                     	;# 
  1925  0019                     	;# 
  1926  001A                     	;# 
  1927  001A                     	;# 
  1928  001B                     	;# 
  1929  001B                     	;# 
  1930  001C                     	;# 
  1931  001D                     	;# 
  1932  001E                     	;# 
  1933  001F                     	;# 
  1934  008C                     	;# 
  1935  008D                     	;# 
  1936  008E                     	;# 
  1937  0090                     	;# 
  1938  0091                     	;# 
  1939  0092                     	;# 
  1940  0093                     	;# 
  1941  0094                     	;# 
  1942  0095                     	;# 
  1943  0096                     	;# 
  1944  0098                     	;# 
  1945  0099                     	;# 
  1946  009A                     	;# 
  1947  009B                     	;# 
  1948  009B                     	;# 
  1949  009C                     	;# 
  1950  009D                     	;# 
  1951  009E                     	;# 
  1952  009F                     	;# 
  1953  010C                     	;# 
  1954  010D                     	;# 
  1955  010E                     	;# 
  1956  0111                     	;# 
  1957  0112                     	;# 
  1958  0113                     	;# 
  1959  0114                     	;# 
  1960  0115                     	;# 
  1961  0116                     	;# 
  1962  0117                     	;# 
  1963  0118                     	;# 
  1964  0119                     	;# 
  1965  011C                     	;# 
  1966  018C                     	;# 
  1967  018D                     	;# 
  1968  018E                     	;# 
  1969  0191                     	;# 
  1970  0191                     	;# 
  1971  0192                     	;# 
  1972  0193                     	;# 
  1973  0193                     	;# 
  1974  0194                     	;# 
  1975  0195                     	;# 
  1976  0196                     	;# 
  1977  0197                     	;# 
  1978  0199                     	;# 
  1979  0199                     	;# 
  1980  0199                     	;# 
  1981  019A                     	;# 
  1982  019A                     	;# 
  1983  019A                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019B                     	;# 
  1987  019B                     	;# 
  1988  019B                     	;# 
  1989  019C                     	;# 
  1990  019C                     	;# 
  1991  019C                     	;# 
  1992  019D                     	;# 
  1993  019D                     	;# 
  1994  019D                     	;# 
  1995  019E                     	;# 
  1996  019E                     	;# 
  1997  019E                     	;# 
  1998  019F                     	;# 
  1999  019F                     	;# 
  2000  019F                     	;# 
  2001  019F                     	;# 
  2002  019F                     	;# 
  2003  020C                     	;# 
  2004  020D                     	;# 
  2005  020E                     	;# 
  2006  0211                     	;# 
  2007  0211                     	;# 
  2008  0212                     	;# 
  2009  0212                     	;# 
  2010  0213                     	;# 
  2011  0213                     	;# 
  2012  0214                     	;# 
  2013  0214                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0215                     	;# 
  2018  0216                     	;# 
  2019  0216                     	;# 
  2020  0217                     	;# 
  2021  0217                     	;# 
  2022  028C                     	;# 
  2023  028D                     	;# 
  2024  028E                     	;# 
  2025  0291                     	;# 
  2026  0291                     	;# 
  2027  0292                     	;# 
  2028  0293                     	;# 
  2029  0294                     	;# 
  2030  0298                     	;# 
  2031  0298                     	;# 
  2032  0299                     	;# 
  2033  029A                     	;# 
  2034  029B                     	;# 
  2035  029E                     	;# 
  2036  030C                     	;# 
  2037  030D                     	;# 
  2038  030E                     	;# 
  2039  038C                     	;# 
  2040  038D                     	;# 
  2041  038E                     	;# 
  2042  0391                     	;# 
  2043  0392                     	;# 
  2044  0393                     	;# 
  2045  0394                     	;# 
  2046  0395                     	;# 
  2047  0396                     	;# 
  2048  0397                     	;# 
  2049  0398                     	;# 
  2050  0399                     	;# 
  2051  040E                     	;# 
  2052  0413                     	;# 
  2053  0413                     	;# 
  2054  0414                     	;# 
  2055  0414                     	;# 
  2056  0415                     	;# 
  2057  0416                     	;# 
  2058  0417                     	;# 
  2059  0418                     	;# 
  2060  041A                     	;# 
  2061  041A                     	;# 
  2062  041B                     	;# 
  2063  041B                     	;# 
  2064  041C                     	;# 
  2065  041D                     	;# 
  2066  041E                     	;# 
  2067  041F                     	;# 
  2068  0493                     	;# 
  2069  0494                     	;# 
  2070  0495                     	;# 
  2071  0496                     	;# 
  2072  049A                     	;# 
  2073  049B                     	;# 
  2074  049C                     	;# 
  2075  049D                     	;# 
  2076  058C                     	;# 
  2077  058C                     	;# 
  2078  058D                     	;# 
  2079  058E                     	;# 
  2080  058E                     	;# 
  2081  058F                     	;# 
  2082  0590                     	;# 
  2083  0590                     	;# 
  2084  0591                     	;# 
  2085  0592                     	;# 
  2086  0592                     	;# 
  2087  0593                     	;# 
  2088  0594                     	;# 
  2089  0594                     	;# 
  2090  0595                     	;# 
  2091  0596                     	;# 
  2092  0596                     	;# 
  2093  0597                     	;# 
  2094  0598                     	;# 
  2095  0599                     	;# 
  2096  059A                     	;# 
  2097  059B                     	;# 
  2098  059B                     	;# 
  2099  059C                     	;# 
  2100  059D                     	;# 
  2101  060C                     	;# 
  2102  060C                     	;# 
  2103  060D                     	;# 
  2104  060E                     	;# 
  2105  060F                     	;# 
  2106  060F                     	;# 
  2107  0610                     	;# 
  2108  0611                     	;# 
  2109  0612                     	;# 
  2110  0613                     	;# 
  2111  0614                     	;# 
  2112  0617                     	;# 
  2113  0617                     	;# 
  2114  0618                     	;# 
  2115  0619                     	;# 
  2116  061A                     	;# 
  2117  061A                     	;# 
  2118  061B                     	;# 
  2119  061C                     	;# 
  2120  0691                     	;# 
  2121  0692                     	;# 
  2122  0693                     	;# 
  2123  0694                     	;# 
  2124  0695                     	;# 
  2125  0696                     	;# 
  2126  0697                     	;# 
  2127  0699                     	;# 
  2128  069A                     	;# 
  2129  0711                     	;# 
  2130  0712                     	;# 
  2131  0713                     	;# 
  2132  0714                     	;# 
  2133  0715                     	;# 
  2134  0718                     	;# 
  2135  0718                     	;# 
  2136  0719                     	;# 
  2137  071A                     	;# 
  2138  071A                     	;# 
  2139  071B                     	;# 
  2140  071C                     	;# 
  2141  071D                     	;# 
  2142  0791                     	;# 
  2143  0791                     	;# 
  2144  0792                     	;# 
  2145  0793                     	;# 
  2146  0793                     	;# 
  2147  0794                     	;# 
  2148  0795                     	;# 
  2149  0795                     	;# 
  2150  0796                     	;# 
  2151  0797                     	;# 
  2152  0797                     	;# 
  2153  0798                     	;# 
  2154  0799                     	;# 
  2155  079A                     	;# 
  2156  080C                     	;# 
  2157  080C                     	;# 
  2158  080D                     	;# 
  2159  080E                     	;# 
  2160  080E                     	;# 
  2161  080F                     	;# 
  2162  0810                     	;# 
  2163  0810                     	;# 
  2164  0811                     	;# 
  2165  0812                     	;# 
  2166  0812                     	;# 
  2167  0813                     	;# 
  2168  0814                     	;# 
  2169  0815                     	;# 
  2170  0816                     	;# 
  2171  0817                     	;# 
  2172  0818                     	;# 
  2173  0819                     	;# 
  2174  081A                     	;# 
  2175  081A                     	;# 
  2176  081B                     	;# 
  2177  081C                     	;# 
  2178  081C                     	;# 
  2179  081D                     	;# 
  2180  088C                     	;# 
  2181  088D                     	;# 
  2182  088E                     	;# 
  2183  088F                     	;# 
  2184  088F                     	;# 
  2185  0890                     	;# 
  2186  0891                     	;# 
  2187  0892                     	;# 
  2188  0893                     	;# 
  2189  0893                     	;# 
  2190  0894                     	;# 
  2191  0895                     	;# 
  2192  0896                     	;# 
  2193  0897                     	;# 
  2194  0897                     	;# 
  2195  0898                     	;# 
  2196  0899                     	;# 
  2197  0D8C                     	;# 
  2198  0D8C                     	;# 
  2199  0D8D                     	;# 
  2200  0D8E                     	;# 
  2201  0D8F                     	;# 
  2202  0D8F                     	;# 
  2203  0D90                     	;# 
  2204  0D91                     	;# 
  2205  0D92                     	;# 
  2206  0D92                     	;# 
  2207  0D93                     	;# 
  2208  0D94                     	;# 
  2209  0D95                     	;# 
  2210  0D95                     	;# 
  2211  0D96                     	;# 
  2212  0D97                     	;# 
  2213  0D98                     	;# 
  2214  0D99                     	;# 
  2215  0D9A                     	;# 
  2216  0D9B                     	;# 
  2217  0D9C                     	;# 
  2218  0D9D                     	;# 
  2219  0D9E                     	;# 
  2220  0D9E                     	;# 
  2221  0D9F                     	;# 
  2222  0DA0                     	;# 
  2223  0DA1                     	;# 
  2224  0DA1                     	;# 
  2225  0DA2                     	;# 
  2226  0DA3                     	;# 
  2227  0DA4                     	;# 
  2228  0DA4                     	;# 
  2229  0DA5                     	;# 
  2230  0DA6                     	;# 
  2231  0DA7                     	;# 
  2232  0DA7                     	;# 
  2233  0DA8                     	;# 
  2234  0DA9                     	;# 
  2235  0DAA                     	;# 
  2236  0DAB                     	;# 
  2237  0DAC                     	;# 
  2238  0DAD                     	;# 
  2239  0DAE                     	;# 
  2240  0DAF                     	;# 
  2241  0E0F                     	;# 
  2242  0E10                     	;# 
  2243  0E11                     	;# 
  2244  0E12                     	;# 
  2245  0E13                     	;# 
  2246  0E14                     	;# 
  2247  0E15                     	;# 
  2248  0E16                     	;# 
  2249  0E17                     	;# 
  2250  0E18                     	;# 
  2251  0E19                     	;# 
  2252  0E1A                     	;# 
  2253  0E1B                     	;# 
  2254  0E1C                     	;# 
  2255  0E1D                     	;# 
  2256  0E1E                     	;# 
  2257  0E1F                     	;# 
  2258  0E20                     	;# 
  2259  0E21                     	;# 
  2260  0E22                     	;# 
  2261  0E23                     	;# 
  2262  0E24                     	;# 
  2263  0E25                     	;# 
  2264  0E26                     	;# 
  2265  0E27                     	;# 
  2266  0E28                     	;# 
  2267  0E29                     	;# 
  2268  0E2A                     	;# 
  2269  0E2B                     	;# 
  2270  0E2C                     	;# 
  2271  0E2D                     	;# 
  2272  0E2E                     	;# 
  2273  0E90                     	;# 
  2274  0E91                     	;# 
  2275  0E92                     	;# 
  2276  0E94                     	;# 
  2277  0E95                     	;# 
  2278  0E9C                     	;# 
  2279  0E9D                     	;# 
  2280  0E9E                     	;# 
  2281  0E9F                     	;# 
  2282  0EA0                     	;# 
  2283  0EA1                     	;# 
  2284  0EA2                     	;# 
  2285  0EA3                     	;# 
  2286  0EA4                     	;# 
  2287  0EA5                     	;# 
  2288  0EA6                     	;# 
  2289  0EA7                     	;# 
  2290  0F0F                     	;# 
  2291  0F10                     	;# 
  2292  0F11                     	;# 
  2293  0F12                     	;# 
  2294  0F13                     	;# 
  2295  0F14                     	;# 
  2296  0F15                     	;# 
  2297  0F16                     	;# 
  2298  0F17                     	;# 
  2299  0F18                     	;# 
  2300  0F19                     	;# 
  2301  0F1A                     	;# 
  2302  0F1B                     	;# 
  2303  0F1C                     	;# 
  2304  0F1D                     	;# 
  2305  0F1E                     	;# 
  2306  0F1F                     	;# 
  2307  0F20                     	;# 
  2308  0F21                     	;# 
  2309  0F22                     	;# 
  2310  0F23                     	;# 
  2311  0F24                     	;# 
  2312  0F25                     	;# 
  2313  0F26                     	;# 
  2314  0F27                     	;# 
  2315  0F28                     	;# 
  2316  0F29                     	;# 
  2317  0F2A                     	;# 
  2318  0F2B                     	;# 
  2319  0F2C                     	;# 
  2320  0F2D                     	;# 
  2321  0F2E                     	;# 
  2322  0F2F                     	;# 
  2323  0F30                     	;# 
  2324  0F31                     	;# 
  2325  0F32                     	;# 
  2326  0F33                     	;# 
  2327  0F34                     	;# 
  2328  0F35                     	;# 
  2329  0F36                     	;# 
  2330  0F37                     	;# 
  2331  0FE4                     	;# 
  2332  0FE5                     	;# 
  2333  0FE6                     	;# 
  2334  0FE7                     	;# 
  2335  0FE8                     	;# 
  2336  0FE9                     	;# 
  2337  0FEA                     	;# 
  2338  0FEB                     	;# 
  2339  0FED                     	;# 
  2340  0FEE                     	;# 
  2341  0FEF                     	;# 
  2342  0000                     	;# 
  2343  0001                     	;# 
  2344  0002                     	;# 
  2345  0003                     	;# 
  2346  0004                     	;# 
  2347  0005                     	;# 
  2348  0006                     	;# 
  2349  0007                     	;# 
  2350  0008                     	;# 
  2351  0009                     	;# 
  2352  000A                     	;# 
  2353  000B                     	;# 
  2354  000C                     	;# 
  2355  000D                     	;# 
  2356  000E                     	;# 
  2357  0010                     	;# 
  2358  0011                     	;# 
  2359  0012                     	;# 
  2360  0013                     	;# 
  2361  0014                     	;# 
  2362  0015                     	;# 
  2363  0016                     	;# 
  2364  0016                     	;# 
  2365  0017                     	;# 
  2366  0018                     	;# 
  2367  0019                     	;# 
  2368  001A                     	;# 
  2369  001A                     	;# 
  2370  001B                     	;# 
  2371  001B                     	;# 
  2372  001C                     	;# 
  2373  001D                     	;# 
  2374  001E                     	;# 
  2375  001F                     	;# 
  2376  008C                     	;# 
  2377  008D                     	;# 
  2378  008E                     	;# 
  2379  0090                     	;# 
  2380  0091                     	;# 
  2381  0092                     	;# 
  2382  0093                     	;# 
  2383  0094                     	;# 
  2384  0095                     	;# 
  2385  0096                     	;# 
  2386  0098                     	;# 
  2387  0099                     	;# 
  2388  009A                     	;# 
  2389  009B                     	;# 
  2390  009B                     	;# 
  2391  009C                     	;# 
  2392  009D                     	;# 
  2393  009E                     	;# 
  2394  009F                     	;# 
  2395  010C                     	;# 
  2396  010D                     	;# 
  2397  010E                     	;# 
  2398  0111                     	;# 
  2399  0112                     	;# 
  2400  0113                     	;# 
  2401  0114                     	;# 
  2402  0115                     	;# 
  2403  0116                     	;# 
  2404  0117                     	;# 
  2405  0118                     	;# 
  2406  0119                     	;# 
  2407  011C                     	;# 
  2408  018C                     	;# 
  2409  018D                     	;# 
  2410  018E                     	;# 
  2411  0191                     	;# 
  2412  0191                     	;# 
  2413  0192                     	;# 
  2414  0193                     	;# 
  2415  0193                     	;# 
  2416  0194                     	;# 
  2417  0195                     	;# 
  2418  0196                     	;# 
  2419  0197                     	;# 
  2420  0199                     	;# 
  2421  0199                     	;# 
  2422  0199                     	;# 
  2423  019A                     	;# 
  2424  019A                     	;# 
  2425  019A                     	;# 
  2426  019B                     	;# 
  2427  019B                     	;# 
  2428  019B                     	;# 
  2429  019B                     	;# 
  2430  019B                     	;# 
  2431  019C                     	;# 
  2432  019C                     	;# 
  2433  019C                     	;# 
  2434  019D                     	;# 
  2435  019D                     	;# 
  2436  019D                     	;# 
  2437  019E                     	;# 
  2438  019E                     	;# 
  2439  019E                     	;# 
  2440  019F                     	;# 
  2441  019F                     	;# 
  2442  019F                     	;# 
  2443  019F                     	;# 
  2444  019F                     	;# 
  2445  020C                     	;# 
  2446  020D                     	;# 
  2447  020E                     	;# 
  2448  0211                     	;# 
  2449  0211                     	;# 
  2450  0212                     	;# 
  2451  0212                     	;# 
  2452  0213                     	;# 
  2453  0213                     	;# 
  2454  0214                     	;# 
  2455  0214                     	;# 
  2456  0215                     	;# 
  2457  0215                     	;# 
  2458  0215                     	;# 
  2459  0215                     	;# 
  2460  0216                     	;# 
  2461  0216                     	;# 
  2462  0217                     	;# 
  2463  0217                     	;# 
  2464  028C                     	;# 
  2465  028D                     	;# 
  2466  028E                     	;# 
  2467  0291                     	;# 
  2468  0291                     	;# 
  2469  0292                     	;# 
  2470  0293                     	;# 
  2471  0294                     	;# 
  2472  0298                     	;# 
  2473  0298                     	;# 
  2474  0299                     	;# 
  2475  029A                     	;# 
  2476  029B                     	;# 
  2477  029E                     	;# 
  2478  030C                     	;# 
  2479  030D                     	;# 
  2480  030E                     	;# 
  2481  038C                     	;# 
  2482  038D                     	;# 
  2483  038E                     	;# 
  2484  0391                     	;# 
  2485  0392                     	;# 
  2486  0393                     	;# 
  2487  0394                     	;# 
  2488  0395                     	;# 
  2489  0396                     	;# 
  2490  0397                     	;# 
  2491  0398                     	;# 
  2492  0399                     	;# 
  2493  040E                     	;# 
  2494  0413                     	;# 
  2495  0413                     	;# 
  2496  0414                     	;# 
  2497  0414                     	;# 
  2498  0415                     	;# 
  2499  0416                     	;# 
  2500  0417                     	;# 
  2501  0418                     	;# 
  2502  041A                     	;# 
  2503  041A                     	;# 
  2504  041B                     	;# 
  2505  041B                     	;# 
  2506  041C                     	;# 
  2507  041D                     	;# 
  2508  041E                     	;# 
  2509  041F                     	;# 
  2510  0493                     	;# 
  2511  0494                     	;# 
  2512  0495                     	;# 
  2513  0496                     	;# 
  2514  049A                     	;# 
  2515  049B                     	;# 
  2516  049C                     	;# 
  2517  049D                     	;# 
  2518  058C                     	;# 
  2519  058C                     	;# 
  2520  058D                     	;# 
  2521  058E                     	;# 
  2522  058E                     	;# 
  2523  058F                     	;# 
  2524  0590                     	;# 
  2525  0590                     	;# 
  2526  0591                     	;# 
  2527  0592                     	;# 
  2528  0592                     	;# 
  2529  0593                     	;# 
  2530  0594                     	;# 
  2531  0594                     	;# 
  2532  0595                     	;# 
  2533  0596                     	;# 
  2534  0596                     	;# 
  2535  0597                     	;# 
  2536  0598                     	;# 
  2537  0599                     	;# 
  2538  059A                     	;# 
  2539  059B                     	;# 
  2540  059B                     	;# 
  2541  059C                     	;# 
  2542  059D                     	;# 
  2543  060C                     	;# 
  2544  060C                     	;# 
  2545  060D                     	;# 
  2546  060E                     	;# 
  2547  060F                     	;# 
  2548  060F                     	;# 
  2549  0610                     	;# 
  2550  0611                     	;# 
  2551  0612                     	;# 
  2552  0613                     	;# 
  2553  0614                     	;# 
  2554  0617                     	;# 
  2555  0617                     	;# 
  2556  0618                     	;# 
  2557  0619                     	;# 
  2558  061A                     	;# 
  2559  061A                     	;# 
  2560  061B                     	;# 
  2561  061C                     	;# 
  2562  0691                     	;# 
  2563  0692                     	;# 
  2564  0693                     	;# 
  2565  0694                     	;# 
  2566  0695                     	;# 
  2567  0696                     	;# 
  2568  0697                     	;# 
  2569  0699                     	;# 
  2570  069A                     	;# 
  2571  0711                     	;# 
  2572  0712                     	;# 
  2573  0713                     	;# 
  2574  0714                     	;# 
  2575  0715                     	;# 
  2576  0718                     	;# 
  2577  0718                     	;# 
  2578  0719                     	;# 
  2579  071A                     	;# 
  2580  071A                     	;# 
  2581  071B                     	;# 
  2582  071C                     	;# 
  2583  071D                     	;# 
  2584  0791                     	;# 
  2585  0791                     	;# 
  2586  0792                     	;# 
  2587  0793                     	;# 
  2588  0793                     	;# 
  2589  0794                     	;# 
  2590  0795                     	;# 
  2591  0795                     	;# 
  2592  0796                     	;# 
  2593  0797                     	;# 
  2594  0797                     	;# 
  2595  0798                     	;# 
  2596  0799                     	;# 
  2597  079A                     	;# 
  2598  080C                     	;# 
  2599  080C                     	;# 
  2600  080D                     	;# 
  2601  080E                     	;# 
  2602  080E                     	;# 
  2603  080F                     	;# 
  2604  0810                     	;# 
  2605  0810                     	;# 
  2606  0811                     	;# 
  2607  0812                     	;# 
  2608  0812                     	;# 
  2609  0813                     	;# 
  2610  0814                     	;# 
  2611  0815                     	;# 
  2612  0816                     	;# 
  2613  0817                     	;# 
  2614  0818                     	;# 
  2615  0819                     	;# 
  2616  081A                     	;# 
  2617  081A                     	;# 
  2618  081B                     	;# 
  2619  081C                     	;# 
  2620  081C                     	;# 
  2621  081D                     	;# 
  2622  088C                     	;# 
  2623  088D                     	;# 
  2624  088E                     	;# 
  2625  088F                     	;# 
  2626  088F                     	;# 
  2627  0890                     	;# 
  2628  0891                     	;# 
  2629  0892                     	;# 
  2630  0893                     	;# 
  2631  0893                     	;# 
  2632  0894                     	;# 
  2633  0895                     	;# 
  2634  0896                     	;# 
  2635  0897                     	;# 
  2636  0897                     	;# 
  2637  0898                     	;# 
  2638  0899                     	;# 
  2639  0D8C                     	;# 
  2640  0D8C                     	;# 
  2641  0D8D                     	;# 
  2642  0D8E                     	;# 
  2643  0D8F                     	;# 
  2644  0D8F                     	;# 
  2645  0D90                     	;# 
  2646  0D91                     	;# 
  2647  0D92                     	;# 
  2648  0D92                     	;# 
  2649  0D93                     	;# 
  2650  0D94                     	;# 
  2651  0D95                     	;# 
  2652  0D95                     	;# 
  2653  0D96                     	;# 
  2654  0D97                     	;# 
  2655  0D98                     	;# 
  2656  0D99                     	;# 
  2657  0D9A                     	;# 
  2658  0D9B                     	;# 
  2659  0D9C                     	;# 
  2660  0D9D                     	;# 
  2661  0D9E                     	;# 
  2662  0D9E                     	;# 
  2663  0D9F                     	;# 
  2664  0DA0                     	;# 
  2665  0DA1                     	;# 
  2666  0DA1                     	;# 
  2667  0DA2                     	;# 
  2668  0DA3                     	;# 
  2669  0DA4                     	;# 
  2670  0DA4                     	;# 
  2671  0DA5                     	;# 
  2672  0DA6                     	;# 
  2673  0DA7                     	;# 
  2674  0DA7                     	;# 
  2675  0DA8                     	;# 
  2676  0DA9                     	;# 
  2677  0DAA                     	;# 
  2678  0DAB                     	;# 
  2679  0DAC                     	;# 
  2680  0DAD                     	;# 
  2681  0DAE                     	;# 
  2682  0DAF                     	;# 
  2683  0E0F                     	;# 
  2684  0E10                     	;# 
  2685  0E11                     	;# 
  2686  0E12                     	;# 
  2687  0E13                     	;# 
  2688  0E14                     	;# 
  2689  0E15                     	;# 
  2690  0E16                     	;# 
  2691  0E17                     	;# 
  2692  0E18                     	;# 
  2693  0E19                     	;# 
  2694  0E1A                     	;# 
  2695  0E1B                     	;# 
  2696  0E1C                     	;# 
  2697  0E1D                     	;# 
  2698  0E1E                     	;# 
  2699  0E1F                     	;# 
  2700  0E20                     	;# 
  2701  0E21                     	;# 
  2702  0E22                     	;# 
  2703  0E23                     	;# 
  2704  0E24                     	;# 
  2705  0E25                     	;# 
  2706  0E26                     	;# 
  2707  0E27                     	;# 
  2708  0E28                     	;# 
  2709  0E29                     	;# 
  2710  0E2A                     	;# 
  2711  0E2B                     	;# 
  2712  0E2C                     	;# 
  2713  0E2D                     	;# 
  2714  0E2E                     	;# 
  2715  0E90                     	;# 
  2716  0E91                     	;# 
  2717  0E92                     	;# 
  2718  0E94                     	;# 
  2719  0E95                     	;# 
  2720  0E9C                     	;# 
  2721  0E9D                     	;# 
  2722  0E9E                     	;# 
  2723  0E9F                     	;# 
  2724  0EA0                     	;# 
  2725  0EA1                     	;# 
  2726  0EA2                     	;# 
  2727  0EA3                     	;# 
  2728  0EA4                     	;# 
  2729  0EA5                     	;# 
  2730  0EA6                     	;# 
  2731  0EA7                     	;# 
  2732  0F0F                     	;# 
  2733  0F10                     	;# 
  2734  0F11                     	;# 
  2735  0F12                     	;# 
  2736  0F13                     	;# 
  2737  0F14                     	;# 
  2738  0F15                     	;# 
  2739  0F16                     	;# 
  2740  0F17                     	;# 
  2741  0F18                     	;# 
  2742  0F19                     	;# 
  2743  0F1A                     	;# 
  2744  0F1B                     	;# 
  2745  0F1C                     	;# 
  2746  0F1D                     	;# 
  2747  0F1E                     	;# 
  2748  0F1F                     	;# 
  2749  0F20                     	;# 
  2750  0F21                     	;# 
  2751  0F22                     	;# 
  2752  0F23                     	;# 
  2753  0F24                     	;# 
  2754  0F25                     	;# 
  2755  0F26                     	;# 
  2756  0F27                     	;# 
  2757  0F28                     	;# 
  2758  0F29                     	;# 
  2759  0F2A                     	;# 
  2760  0F2B                     	;# 
  2761  0F2C                     	;# 
  2762  0F2D                     	;# 
  2763  0F2E                     	;# 
  2764  0F2F                     	;# 
  2765  0F30                     	;# 
  2766  0F31                     	;# 
  2767  0F32                     	;# 
  2768  0F33                     	;# 
  2769  0F34                     	;# 
  2770  0F35                     	;# 
  2771  0F36                     	;# 
  2772  0F37                     	;# 
  2773  0FE4                     	;# 
  2774  0FE5                     	;# 
  2775  0FE6                     	;# 
  2776  0FE7                     	;# 
  2777  0FE8                     	;# 
  2778  0FE9                     	;# 
  2779  0FEA                     	;# 
  2780  0FEB                     	;# 
  2781  0FED                     	;# 
  2782  0FEE                     	;# 
  2783  0FEF                     	;# 
  2784  0000                     	;# 
  2785  0001                     	;# 
  2786  0002                     	;# 
  2787  0003                     	;# 
  2788  0004                     	;# 
  2789  0005                     	;# 
  2790  0006                     	;# 
  2791  0007                     	;# 
  2792  0008                     	;# 
  2793  0009                     	;# 
  2794  000A                     	;# 
  2795  000B                     	;# 
  2796  000C                     	;# 
  2797  000D                     	;# 
  2798  000E                     	;# 
  2799  0010                     	;# 
  2800  0011                     	;# 
  2801  0012                     	;# 
  2802  0013                     	;# 
  2803  0014                     	;# 
  2804  0015                     	;# 
  2805  0016                     	;# 
  2806  0016                     	;# 
  2807  0017                     	;# 
  2808  0018                     	;# 
  2809  0019                     	;# 
  2810  001A                     	;# 
  2811  001A                     	;# 
  2812  001B                     	;# 
  2813  001B                     	;# 
  2814  001C                     	;# 
  2815  001D                     	;# 
  2816  001E                     	;# 
  2817  001F                     	;# 
  2818  008C                     	;# 
  2819  008D                     	;# 
  2820  008E                     	;# 
  2821  0090                     	;# 
  2822  0091                     	;# 
  2823  0092                     	;# 
  2824  0093                     	;# 
  2825  0094                     	;# 
  2826  0095                     	;# 
  2827  0096                     	;# 
  2828  0098                     	;# 
  2829  0099                     	;# 
  2830  009A                     	;# 
  2831  009B                     	;# 
  2832  009B                     	;# 
  2833  009C                     	;# 
  2834  009D                     	;# 
  2835  009E                     	;# 
  2836  009F                     	;# 
  2837  010C                     	;# 
  2838  010D                     	;# 
  2839  010E                     	;# 
  2840  0111                     	;# 
  2841  0112                     	;# 
  2842  0113                     	;# 
  2843  0114                     	;# 
  2844  0115                     	;# 
  2845  0116                     	;# 
  2846  0117                     	;# 
  2847  0118                     	;# 
  2848  0119                     	;# 
  2849  011C                     	;# 
  2850  018C                     	;# 
  2851  018D                     	;# 
  2852  018E                     	;# 
  2853  0191                     	;# 
  2854  0191                     	;# 
  2855  0192                     	;# 
  2856  0193                     	;# 
  2857  0193                     	;# 
  2858  0194                     	;# 
  2859  0195                     	;# 
  2860  0196                     	;# 
  2861  0197                     	;# 
  2862  0199                     	;# 
  2863  0199                     	;# 
  2864  0199                     	;# 
  2865  019A                     	;# 
  2866  019A                     	;# 
  2867  019A                     	;# 
  2868  019B                     	;# 
  2869  019B                     	;# 
  2870  019B                     	;# 
  2871  019B                     	;# 
  2872  019B                     	;# 
  2873  019C                     	;# 
  2874  019C                     	;# 
  2875  019C                     	;# 
  2876  019D                     	;# 
  2877  019D                     	;# 
  2878  019D                     	;# 
  2879  019E                     	;# 
  2880  019E                     	;# 
  2881  019E                     	;# 
  2882  019F                     	;# 
  2883  019F                     	;# 
  2884  019F                     	;# 
  2885  019F                     	;# 
  2886  019F                     	;# 
  2887  020C                     	;# 
  2888  020D                     	;# 
  2889  020E                     	;# 
  2890  0211                     	;# 
  2891  0211                     	;# 
  2892  0212                     	;# 
  2893  0212                     	;# 
  2894  0213                     	;# 
  2895  0213                     	;# 
  2896  0214                     	;# 
  2897  0214                     	;# 
  2898  0215                     	;# 
  2899  0215                     	;# 
  2900  0215                     	;# 
  2901  0215                     	;# 
  2902  0216                     	;# 
  2903  0216                     	;# 
  2904  0217                     	;# 
  2905  0217                     	;# 
  2906  028C                     	;# 
  2907  028D                     	;# 
  2908  028E                     	;# 
  2909  0291                     	;# 
  2910  0291                     	;# 
  2911  0292                     	;# 
  2912  0293                     	;# 
  2913  0294                     	;# 
  2914  0298                     	;# 
  2915  0298                     	;# 
  2916  0299                     	;# 
  2917  029A                     	;# 
  2918  029B                     	;# 
  2919  029E                     	;# 
  2920  030C                     	;# 
  2921  030D                     	;# 
  2922  030E                     	;# 
  2923  038C                     	;# 
  2924  038D                     	;# 
  2925  038E                     	;# 
  2926  0391                     	;# 
  2927  0392                     	;# 
  2928  0393                     	;# 
  2929  0394                     	;# 
  2930  0395                     	;# 
  2931  0396                     	;# 
  2932  0397                     	;# 
  2933  0398                     	;# 
  2934  0399                     	;# 
  2935  040E                     	;# 
  2936  0413                     	;# 
  2937  0413                     	;# 
  2938  0414                     	;# 
  2939  0414                     	;# 
  2940  0415                     	;# 
  2941  0416                     	;# 
  2942  0417                     	;# 
  2943  0418                     	;# 
  2944  041A                     	;# 
  2945  041A                     	;# 
  2946  041B                     	;# 
  2947  041B                     	;# 
  2948  041C                     	;# 
  2949  041D                     	;# 
  2950  041E                     	;# 
  2951  041F                     	;# 
  2952  0493                     	;# 
  2953  0494                     	;# 
  2954  0495                     	;# 
  2955  0496                     	;# 
  2956  049A                     	;# 
  2957  049B                     	;# 
  2958  049C                     	;# 
  2959  049D                     	;# 
  2960  058C                     	;# 
  2961  058C                     	;# 
  2962  058D                     	;# 
  2963  058E                     	;# 
  2964  058E                     	;# 
  2965  058F                     	;# 
  2966  0590                     	;# 
  2967  0590                     	;# 
  2968  0591                     	;# 
  2969  0592                     	;# 
  2970  0592                     	;# 
  2971  0593                     	;# 
  2972  0594                     	;# 
  2973  0594                     	;# 
  2974  0595                     	;# 
  2975  0596                     	;# 
  2976  0596                     	;# 
  2977  0597                     	;# 
  2978  0598                     	;# 
  2979  0599                     	;# 
  2980  059A                     	;# 
  2981  059B                     	;# 
  2982  059B                     	;# 
  2983  059C                     	;# 
  2984  059D                     	;# 
  2985  060C                     	;# 
  2986  060C                     	;# 
  2987  060D                     	;# 
  2988  060E                     	;# 
  2989  060F                     	;# 
  2990  060F                     	;# 
  2991  0610                     	;# 
  2992  0611                     	;# 
  2993  0612                     	;# 
  2994  0613                     	;# 
  2995  0614                     	;# 
  2996  0617                     	;# 
  2997  0617                     	;# 
  2998  0618                     	;# 
  2999  0619                     	;# 
  3000  061A                     	;# 
  3001  061A                     	;# 
  3002  061B                     	;# 
  3003  061C                     	;# 
  3004  0691                     	;# 
  3005  0692                     	;# 
  3006  0693                     	;# 
  3007  0694                     	;# 
  3008  0695                     	;# 
  3009  0696                     	;# 
  3010  0697                     	;# 
  3011  0699                     	;# 
  3012  069A                     	;# 
  3013  0711                     	;# 
  3014  0712                     	;# 
  3015  0713                     	;# 
  3016  0714                     	;# 
  3017  0715                     	;# 
  3018  0718                     	;# 
  3019  0718                     	;# 
  3020  0719                     	;# 
  3021  071A                     	;# 
  3022  071A                     	;# 
  3023  071B                     	;# 
  3024  071C                     	;# 
  3025  071D                     	;# 
  3026  0791                     	;# 
  3027  0791                     	;# 
  3028  0792                     	;# 
  3029  0793                     	;# 
  3030  0793                     	;# 
  3031  0794                     	;# 
  3032  0795                     	;# 
  3033  0795                     	;# 
  3034  0796                     	;# 
  3035  0797                     	;# 
  3036  0797                     	;# 
  3037  0798                     	;# 
  3038  0799                     	;# 
  3039  079A                     	;# 
  3040  080C                     	;# 
  3041  080C                     	;# 
  3042  080D                     	;# 
  3043  080E                     	;# 
  3044  080E                     	;# 
  3045  080F                     	;# 
  3046  0810                     	;# 
  3047  0810                     	;# 
  3048  0811                     	;# 
  3049  0812                     	;# 
  3050  0812                     	;# 
  3051  0813                     	;# 
  3052  0814                     	;# 
  3053  0815                     	;# 
  3054  0816                     	;# 
  3055  0817                     	;# 
  3056  0818                     	;# 
  3057  0819                     	;# 
  3058  081A                     	;# 
  3059  081A                     	;# 
  3060  081B                     	;# 
  3061  081C                     	;# 
  3062  081C                     	;# 
  3063  081D                     	;# 
  3064  088C                     	;# 
  3065  088D                     	;# 
  3066  088E                     	;# 
  3067  088F                     	;# 
  3068  088F                     	;# 
  3069  0890                     	;# 
  3070  0891                     	;# 
  3071  0892                     	;# 
  3072  0893                     	;# 
  3073  0893                     	;# 
  3074  0894                     	;# 
  3075  0895                     	;# 
  3076  0896                     	;# 
  3077  0897                     	;# 
  3078  0897                     	;# 
  3079  0898                     	;# 
  3080  0899                     	;# 
  3081  0D8C                     	;# 
  3082  0D8C                     	;# 
  3083  0D8D                     	;# 
  3084  0D8E                     	;# 
  3085  0D8F                     	;# 
  3086  0D8F                     	;# 
  3087  0D90                     	;# 
  3088  0D91                     	;# 
  3089  0D92                     	;# 
  3090  0D92                     	;# 
  3091  0D93                     	;# 
  3092  0D94                     	;# 
  3093  0D95                     	;# 
  3094  0D95                     	;# 
  3095  0D96                     	;# 
  3096  0D97                     	;# 
  3097  0D98                     	;# 
  3098  0D99                     	;# 
  3099  0D9A                     	;# 
  3100  0D9B                     	;# 
  3101  0D9C                     	;# 
  3102  0D9D                     	;# 
  3103  0D9E                     	;# 
  3104  0D9E                     	;# 
  3105  0D9F                     	;# 
  3106  0DA0                     	;# 
  3107  0DA1                     	;# 
  3108  0DA1                     	;# 
  3109  0DA2                     	;# 
  3110  0DA3                     	;# 
  3111  0DA4                     	;# 
  3112  0DA4                     	;# 
  3113  0DA5                     	;# 
  3114  0DA6                     	;# 
  3115  0DA7                     	;# 
  3116  0DA7                     	;# 
  3117  0DA8                     	;# 
  3118  0DA9                     	;# 
  3119  0DAA                     	;# 
  3120  0DAB                     	;# 
  3121  0DAC                     	;# 
  3122  0DAD                     	;# 
  3123  0DAE                     	;# 
  3124  0DAF                     	;# 
  3125  0E0F                     	;# 
  3126  0E10                     	;# 
  3127  0E11                     	;# 
  3128  0E12                     	;# 
  3129  0E13                     	;# 
  3130  0E14                     	;# 
  3131  0E15                     	;# 
  3132  0E16                     	;# 
  3133  0E17                     	;# 
  3134  0E18                     	;# 
  3135  0E19                     	;# 
  3136  0E1A                     	;# 
  3137  0E1B                     	;# 
  3138  0E1C                     	;# 
  3139  0E1D                     	;# 
  3140  0E1E                     	;# 
  3141  0E1F                     	;# 
  3142  0E20                     	;# 
  3143  0E21                     	;# 
  3144  0E22                     	;# 
  3145  0E23                     	;# 
  3146  0E24                     	;# 
  3147  0E25                     	;# 
  3148  0E26                     	;# 
  3149  0E27                     	;# 
  3150  0E28                     	;# 
  3151  0E29                     	;# 
  3152  0E2A                     	;# 
  3153  0E2B                     	;# 
  3154  0E2C                     	;# 
  3155  0E2D                     	;# 
  3156  0E2E                     	;# 
  3157  0E90                     	;# 
  3158  0E91                     	;# 
  3159  0E92                     	;# 
  3160  0E94                     	;# 
  3161  0E95                     	;# 
  3162  0E9C                     	;# 
  3163  0E9D                     	;# 
  3164  0E9E                     	;# 
  3165  0E9F                     	;# 
  3166  0EA0                     	;# 
  3167  0EA1                     	;# 
  3168  0EA2                     	;# 
  3169  0EA3                     	;# 
  3170  0EA4                     	;# 
  3171  0EA5                     	;# 
  3172  0EA6                     	;# 
  3173  0EA7                     	;# 
  3174  0F0F                     	;# 
  3175  0F10                     	;# 
  3176  0F11                     	;# 
  3177  0F12                     	;# 
  3178  0F13                     	;# 
  3179  0F14                     	;# 
  3180  0F15                     	;# 
  3181  0F16                     	;# 
  3182  0F17                     	;# 
  3183  0F18                     	;# 
  3184  0F19                     	;# 
  3185  0F1A                     	;# 
  3186  0F1B                     	;# 
  3187  0F1C                     	;# 
  3188  0F1D                     	;# 
  3189  0F1E                     	;# 
  3190  0F1F                     	;# 
  3191  0F20                     	;# 
  3192  0F21                     	;# 
  3193  0F22                     	;# 
  3194  0F23                     	;# 
  3195  0F24                     	;# 
  3196  0F25                     	;# 
  3197  0F26                     	;# 
  3198  0F27                     	;# 
  3199  0F28                     	;# 
  3200  0F29                     	;# 
  3201  0F2A                     	;# 
  3202  0F2B                     	;# 
  3203  0F2C                     	;# 
  3204  0F2D                     	;# 
  3205  0F2E                     	;# 
  3206  0F2F                     	;# 
  3207  0F30                     	;# 
  3208  0F31                     	;# 
  3209  0F32                     	;# 
  3210  0F33                     	;# 
  3211  0F34                     	;# 
  3212  0F35                     	;# 
  3213  0F36                     	;# 
  3214  0F37                     	;# 
  3215  0FE4                     	;# 
  3216  0FE5                     	;# 
  3217  0FE6                     	;# 
  3218  0FE7                     	;# 
  3219  0FE8                     	;# 
  3220  0FE9                     	;# 
  3221  0FEA                     	;# 
  3222  0FEB                     	;# 
  3223  0FED                     	;# 
  3224  0FEE                     	;# 
  3225  0FEF                     	;WriteEnvSensor@trb
  3226                           
  3227                           	psect	idataBANK1
  3228  07FE                     __pidataBANK1:	
  3229                           
  3230                           ;initializer for _messages
  3231  07FE  3420               	retlw	low (_message_start| (0+768))
  3232  07FF  34A0               	retlw	low (_message_end| (0+768))
  3233                           
  3234                           	psect	idataBANK5
  3235  108E                     __pidataBANK5:	
  3236                           
  3237                           ;initializer for _setNavFlightMode
  3238  108E  34B5               	retlw	181
  3239  108F  3462               	retlw	98
  3240  1090  3406               	retlw	6
  3241  1091  3424               	retlw	36
  3242  1092  3424               	retlw	36
  3243  1093  3400               	retlw	0
  3244  1094  34FF               	retlw	255
  3245  1095  34FF               	retlw	255
  3246  1096  3406               	retlw	6
  3247  1097  3403               	retlw	3
  3248  1098  3400               	retlw	0
  3249  1099  3400               	retlw	0
  3250  109A  3400               	retlw	0
  3251  109B  3400               	retlw	0
  3252  109C  3410               	retlw	16
  3253  109D  3427               	retlw	39
  3254  109E  3400               	retlw	0
  3255  109F  3400               	retlw	0
  3256  10A0  3405               	retlw	5
  3257  10A1  3400               	retlw	0
  3258  10A2  34FA               	retlw	250
  3259  10A3  3400               	retlw	0
  3260  10A4  34FA               	retlw	250
  3261  10A5  3400               	retlw	0
  3262  10A6  3464               	retlw	100
  3263  10A7  3400               	retlw	0
  3264  10A8  342C               	retlw	44
  3265  10A9  3401               	retlw	1
  3266  10AA  3400               	retlw	0
  3267  10AB  3400               	retlw	0
  3268  10AC  3400               	retlw	0
  3269  10AD  3400               	retlw	0
  3270  10AE  3400               	retlw	0
  3271  10AF  3400               	retlw	0
  3272  10B0  3400               	retlw	0
  3273  10B1  3400               	retlw	0
  3274  10B2  3400               	retlw	0
  3275  10B3  3400               	retlw	0
  3276  10B4  3400               	retlw	0
  3277  10B5  3400               	retlw	0
  3278  10B6  3400               	retlw	0
  3279  10B7  3400               	retlw	0
  3280  10B8  3416               	retlw	22
  3281  10B9  34DC               	retlw	220
  3282                           
  3283                           	psect	nvBANK3
  3284  01E4                     __pnvBANK3:	
  3285  01E4                     _TMR0_InterruptHandler:	
  3286  01E4                     	ds	2
  3287  01E6                     _timer0ReloadVal:	
  3288  01E6                     	ds	1
  3289  0015                     _TMR0	set	21
  3290  0011                     _PIR2bits	set	17
  3291  000B                     _INTCONbits	set	11
  3292  0010                     _PIR1bits	set	16
  3293  0095                     _OPTION_REG	set	149
  3294  0090                     _PIE1bits	set	144
  3295  0091                     _PIE2bits	set	145
  3296  0095                     _OPTION_REGbits	set	149
  3297  008E                     _TRISC	set	142
  3298  008D                     _TRISB	set	141
  3299  008C                     _TRISA	set	140
  3300  0098                     _OSCTUNE	set	152
  3301  0099                     _OSCCON	set	153
  3302  010C                     _LATAbits	set	268
  3303  010E                     _LATCbits	set	270
  3304  010E                     _LATC	set	270
  3305  010D                     _LATB	set	269
  3306  010C                     _LATA	set	268
  3307  0116                     _BORCON	set	278
  3308  019C                     _SPBRGH	set	412
  3309  019B                     _SPBRGL	set	411
  3310  019E                     _TX1STA	set	414
  3311  019D                     _RC1STA	set	413
  3312  019F                     _BAUD1CON	set	415
  3313  018C                     _ANSELA	set	396
  3314  018D                     _ANSELB	set	397
  3315  018E                     _ANSELC	set	398
  3316  0211                     _SSP1BUF	set	529
  3317  0216                     _SSP1CON2bits	set	534
  3318  0215                     _SSP1CON1bits	set	533
  3319  0212                     _SSP1ADD	set	530
  3320  0217                     _SSP1CON3	set	535
  3321  0215                     _SSP1CON1	set	533
  3322  0214                     _SSP1STAT	set	532
  3323  020E                     _WPUC	set	526
  3324  020C                     _WPUA	set	524
  3325  020D                     _WPUB	set	525
  3326  028E                     _ODCONC	set	654
  3327  028D                     _ODCONB	set	653
  3328  028C                     _ODCONA	set	652
  3329  030E                     _SLRCONC	set	782
  3330  030D                     _SLRCONB	set	781
  3331  030C                     _SLRCONA	set	780
  3332  0E20                     _SSPCLKPPS	set	3616
  3333  0E21                     _SSPDATPPS	set	3617
  3334  0E24                     _RXPPS	set	3620
  3335  0E9C                     _RB4PPS	set	3740
  3336  0E9F                     _RB7PPS	set	3743
  3337  0E9E                     _RB6PPS	set	3742
  3338                           
  3339                           	psect	stringtext1
  3340  1800                     __pstringtext1:	
  3341  1800                     STR_6:	
  3342  1800  3424               	retlw	36	;'$'
  3343  1801  3450               	retlw	80	;'P'
  3344  1802  3455               	retlw	85	;'U'
  3345  1803  3442               	retlw	66	;'B'
  3346  1804  3458               	retlw	88	;'X'
  3347  1805  342C               	retlw	44	;','
  3348  1806  3434               	retlw	52	;'4'
  3349  1807  3430               	retlw	48	;'0'
  3350  1808  342C               	retlw	44	;','
  3351  1809  3452               	retlw	82	;'R'
  3352  180A  344D               	retlw	77	;'M'
  3353  180B  3443               	retlw	67	;'C'
  3354  180C  342C               	retlw	44	;','
  3355  180D  3430               	retlw	48	;'0'
  3356  180E  342C               	retlw	44	;','
  3357  180F  3430               	retlw	48	;'0'
  3358  1810  342C               	retlw	44	;','
  3359  1811  3430               	retlw	48	;'0'
  3360  1812  342C               	retlw	44	;','
  3361  1813  3430               	retlw	48	;'0'
  3362  1814  342A               	retlw	42	;'*'
  3363  1815  3434               	retlw	52	;'4'
  3364  1816  3437               	retlw	55	;'7'
  3365  1817  340D               	retlw	13
  3366  1818  340A               	retlw	10
  3367  1819  3400               	retlw	0
  3368                           
  3369                           	psect	stringtext2
  3370  181A                     __pstringtext2:	
  3371  181A                     STR_4:	
  3372  181A  3424               	retlw	36	;'$'
  3373  181B  3450               	retlw	80	;'P'
  3374  181C  3455               	retlw	85	;'U'
  3375  181D  3442               	retlw	66	;'B'
  3376  181E  3458               	retlw	88	;'X'
  3377  181F  342C               	retlw	44	;','
  3378  1820  3434               	retlw	52	;'4'
  3379  1821  3430               	retlw	48	;'0'
  3380  1822  342C               	retlw	44	;','
  3381  1823  3447               	retlw	71	;'G'
  3382  1824  3453               	retlw	83	;'S'
  3383  1825  3456               	retlw	86	;'V'
  3384  1826  342C               	retlw	44	;','
  3385  1827  3430               	retlw	48	;'0'
  3386  1828  342C               	retlw	44	;','
  3387  1829  3430               	retlw	48	;'0'
  3388  182A  342C               	retlw	44	;','
  3389  182B  3430               	retlw	48	;'0'
  3390  182C  342C               	retlw	44	;','
  3391  182D  3430               	retlw	48	;'0'
  3392  182E  342A               	retlw	42	;'*'
  3393  182F  3435               	retlw	53	;'5'
  3394  1830  3439               	retlw	57	;'9'
  3395  1831  340D               	retlw	13
  3396  1832  340A               	retlw	10
  3397  1833  3400               	retlw	0
  3398                           
  3399                           	psect	stringtext3
  3400  1834                     __pstringtext3:	
  3401  1834                     STR_2:	
  3402  1834  3424               	retlw	36	;'$'
  3403  1835  3450               	retlw	80	;'P'
  3404  1836  3455               	retlw	85	;'U'
  3405  1837  3442               	retlw	66	;'B'
  3406  1838  3458               	retlw	88	;'X'
  3407  1839  342C               	retlw	44	;','
  3408  183A  3434               	retlw	52	;'4'
  3409  183B  3430               	retlw	48	;'0'
  3410  183C  342C               	retlw	44	;','
  3411  183D  3447               	retlw	71	;'G'
  3412  183E  3447               	retlw	71	;'G'
  3413  183F  3441               	retlw	65	;'A'
  3414  1840  342C               	retlw	44	;','
  3415  1841  3430               	retlw	48	;'0'
  3416  1842  342C               	retlw	44	;','
  3417  1843  3430               	retlw	48	;'0'
  3418  1844  342C               	retlw	44	;','
  3419  1845  3430               	retlw	48	;'0'
  3420  1846  342C               	retlw	44	;','
  3421  1847  3430               	retlw	48	;'0'
  3422  1848  342A               	retlw	42	;'*'
  3423  1849  3435               	retlw	53	;'5'
  3424  184A  3441               	retlw	65	;'A'
  3425  184B  340D               	retlw	13
  3426  184C  340A               	retlw	10
  3427  184D  3400               	retlw	0
  3428                           
  3429                           	psect	stringtext4
  3430  184E                     __pstringtext4:	
  3431  184E                     STR_1:	
  3432  184E  3424               	retlw	36	;'$'
  3433  184F  3450               	retlw	80	;'P'
  3434  1850  3455               	retlw	85	;'U'
  3435  1851  3442               	retlw	66	;'B'
  3436  1852  3458               	retlw	88	;'X'
  3437  1853  342C               	retlw	44	;','
  3438  1854  3434               	retlw	52	;'4'
  3439  1855  3430               	retlw	48	;'0'
  3440  1856  342C               	retlw	44	;','
  3441  1857  3447               	retlw	71	;'G'
  3442  1858  344C               	retlw	76	;'L'
  3443  1859  344C               	retlw	76	;'L'
  3444  185A  342C               	retlw	44	;','
  3445  185B  3430               	retlw	48	;'0'
  3446  185C  342C               	retlw	44	;','
  3447  185D  3430               	retlw	48	;'0'
  3448  185E  342C               	retlw	44	;','
  3449  185F  3430               	retlw	48	;'0'
  3450  1860  342C               	retlw	44	;','
  3451  1861  3430               	retlw	48	;'0'
  3452  1862  342A               	retlw	42	;'*'
  3453  1863  3435               	retlw	53	;'5'
  3454  1864  3443               	retlw	67	;'C'
  3455  1865  340D               	retlw	13
  3456  1866  340A               	retlw	10
  3457  1867  3400               	retlw	0
  3458                           
  3459                           	psect	stringtext5
  3460  1868                     __pstringtext5:	
  3461  1868                     STR_5:	
  3462  1868  3424               	retlw	36	;'$'
  3463  1869  3450               	retlw	80	;'P'
  3464  186A  3455               	retlw	85	;'U'
  3465  186B  3442               	retlw	66	;'B'
  3466  186C  3458               	retlw	88	;'X'
  3467  186D  342C               	retlw	44	;','
  3468  186E  3434               	retlw	52	;'4'
  3469  186F  3430               	retlw	48	;'0'
  3470  1870  342C               	retlw	44	;','
  3471  1871  3447               	retlw	71	;'G'
  3472  1872  3453               	retlw	83	;'S'
  3473  1873  3441               	retlw	65	;'A'
  3474  1874  342C               	retlw	44	;','
  3475  1875  3430               	retlw	48	;'0'
  3476  1876  342C               	retlw	44	;','
  3477  1877  3430               	retlw	48	;'0'
  3478  1878  342C               	retlw	44	;','
  3479  1879  3430               	retlw	48	;'0'
  3480  187A  342C               	retlw	44	;','
  3481  187B  3430               	retlw	48	;'0'
  3482  187C  342A               	retlw	42	;'*'
  3483  187D  3434               	retlw	52	;'4'
  3484  187E  3445               	retlw	69	;'E'
  3485  187F  340D               	retlw	13
  3486  1880  340A               	retlw	10
  3487  1881  3400               	retlw	0
  3488                           
  3489                           	psect	stringtext6
  3490  1882                     __pstringtext6:	
  3491  1882                     STR_3:	
  3492  1882  3424               	retlw	36	;'$'
  3493  1883  3450               	retlw	80	;'P'
  3494  1884  3455               	retlw	85	;'U'
  3495  1885  3442               	retlw	66	;'B'
  3496  1886  3458               	retlw	88	;'X'
  3497  1887  342C               	retlw	44	;','
  3498  1888  3434               	retlw	52	;'4'
  3499  1889  3430               	retlw	48	;'0'
  3500  188A  342C               	retlw	44	;','
  3501  188B  3456               	retlw	86	;'V'
  3502  188C  3454               	retlw	84	;'T'
  3503  188D  3447               	retlw	71	;'G'
  3504  188E  342C               	retlw	44	;','
  3505  188F  3430               	retlw	48	;'0'
  3506  1890  342C               	retlw	44	;','
  3507  1891  3430               	retlw	48	;'0'
  3508  1892  342C               	retlw	44	;','
  3509  1893  3430               	retlw	48	;'0'
  3510  1894  342C               	retlw	44	;','
  3511  1895  3430               	retlw	48	;'0'
  3512  1896  342A               	retlw	42	;'*'
  3513  1897  3435               	retlw	53	;'5'
  3514  1898  3445               	retlw	69	;'E'
  3515  1899  340D               	retlw	13
  3516  189A  340A               	retlw	10
  3517  189B  3400               	retlw	0
  3518                           
  3519                           	psect	stringtext7
  3520  189C                     __pstringtext7:	
  3521  189C                     STR_7:	
  3522  189C  3424               	retlw	36	;'$'
  3523  189D  3450               	retlw	80	;'P'
  3524  189E  3455               	retlw	85	;'U'
  3525  189F  3442               	retlw	66	;'B'
  3526  18A0  3458               	retlw	88	;'X'
  3527  18A1  342C               	retlw	44	;','
  3528  18A2  3430               	retlw	48	;'0'
  3529  18A3  3430               	retlw	48	;'0'
  3530  18A4  342A               	retlw	42	;'*'
  3531  18A5  3433               	retlw	51	;'3'
  3532  18A6  3433               	retlw	51	;'3'
  3533  18A7  340D               	retlw	13
  3534  18A8  340A               	retlw	10
  3535  18A9  3400               	retlw	0
  3536                           
  3537                           	psect	stringtext8
  3538  18AA                     __pstringtext8:	
  3539  18AA                     STR_11:	
  3540  18AA  3454               	retlw	84	;'T'
  3541  18AB  3445               	retlw	69	;'E'
  3542  18AC  3453               	retlw	83	;'S'
  3543  18AD  3454               	retlw	84	;'T'
  3544  18AE  342C               	retlw	44	;','
  3545  18AF  3400               	retlw	0
  3546                           
  3547                           	psect	stringtext9
  3548  18B0                     __pstringtext9:	
  3549  18B0                     STR_10:	
  3550  18B0  3454               	retlw	84	;'T'
  3551  18B1  3445               	retlw	69	;'E'
  3552  18B2  3453               	retlw	83	;'S'
  3553  18B3  3454               	retlw	84	;'T'
  3554  18B4  3400               	retlw	0
  3555                           
  3556                           	psect	stringtext10
  3557  18B5                     __pstringtext10:	
  3558  18B5                     STR_8:	
  3559  18B5  3450               	retlw	80	;'P'
  3560  18B6  3455               	retlw	85	;'U'
  3561  18B7  3442               	retlw	66	;'B'
  3562  18B8  3458               	retlw	88	;'X'
  3563  18B9  3400               	retlw	0
  3564                           
  3565                           	psect	stringtext11
  3566  18BA                     __pstringtext11:	
  3567  18BA                     STR_12:	
  3568  18BA  3424               	retlw	36	;'$'
  3569  18BB  3424               	retlw	36	;'$'
  3570  18BC  3400               	retlw	0
  3571                           
  3572                           	psect	stringtext12
  3573  0000                     __pstringtext12:	
  3574  18B5                     
  3575                           ; #config settings
  3576  0000                     
  3577                           	psect	cinit
  3578  0025                     start_initialization:	
  3579  0025                     __initialization:		;BIGRAM
  3580                           
  3581                           ; Initialize objects allocated to BANK1
  3582  0025  0021               	movlb	1	; select bank1
  3583  0026  3187  27FE  3180   	fcall	__pidataBANK1	;fetch initializer
  3584  0029  00EE               	movwf	__pdataBANK1& (0+127)
  3585  002A  3187  27FF  3180   	fcall	__pidataBANK1+1	;fetch initializer
  3586  002D  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  3587                           
  3588                           ; Initialize objects allocated to BANK5
  3589  002E  308E               	movlw	low __pidataBANK5
  3590  002F  0084               	movwf	4
  3591  0030  3090               	movlw	(high __pidataBANK5)| (0+128)
  3592  0031  0085               	movwf	5
  3593  0032  30A0               	movlw	low __pdataBANK5
  3594  0033  0086               	movwf	6
  3595  0034  3002               	movlw	high __pdataBANK5
  3596  0035  0087               	movwf	7
  3597  0036  3000               	movlw	0
  3598  0037  00FF               	movwf	btemp+1
  3599  0038  302C               	movlw	44
  3600  0039  3190  2000  3180   	fcall	init_ram
  3601                           
  3602                           ; Clear objects allocated to BIGRAM
  3603  003C  3078               	movlw	low (0+9080)
  3604  003D  0084               	movwf	4
  3605  003E  3023               	movlw	high (0+9080)
  3606  003F  0085               	movwf	5
  3607  0040  3078               	movlw	120
  3608  0041  00FE               	movwf	btemp
  3609  0042  3000               	movlw	0
  3610  0043  00FF               	movwf	btemp+1
  3611  0044  319E  26BE  3180   	fcall	clear_ram0
  3612                           
  3613                           ; Clear objects allocated to COMMON
  3614  0047  01FA               	clrf	__pbssCOMMON& (0+127)
  3615  0048  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  3616  0049  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  3617  004A  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  3618                           
  3619                           ; Clear objects allocated to BANK1
  3620  004B  01EA               	clrf	__pbssBANK1& (0+127)
  3621  004C  01EB               	clrf	(__pbssBANK1+1)& (0+127)
  3622  004D  01EC               	clrf	(__pbssBANK1+2)& (0+127)
  3623  004E  01ED               	clrf	(__pbssBANK1+3)& (0+127)
  3624                           
  3625                           ; Clear objects allocated to BANK2
  3626  004F  0022               	movlb	2	; select bank2
  3627  0050  01EF               	clrf	__pbssBANK2& (0+127)
  3628                           
  3629                           ; Clear objects allocated to BANK3
  3630  0051  30A0               	movlw	low __pbssBANK3
  3631  0052  0084               	movwf	4
  3632  0053  3001               	movlw	high __pbssBANK3
  3633  0054  0085               	movwf	5
  3634  0055  3044               	movlw	68
  3635  0056  00FE               	movwf	btemp
  3636  0057  3000               	movlw	0
  3637  0058  00FF               	movwf	btemp+1
  3638  0059  319E  26BE  3180   	fcall	clear_ram0
  3639                           
  3640                           ; Clear objects allocated to BANK4
  3641  005C  3020               	movlw	low __pbssBANK4
  3642  005D  0084               	movwf	4
  3643  005E  3002               	movlw	high __pbssBANK4
  3644  005F  0085               	movwf	5
  3645  0060  3036               	movlw	54
  3646  0061  00FE               	movwf	btemp
  3647  0062  3000               	movlw	0
  3648  0063  00FF               	movwf	btemp+1
  3649  0064  319E  26BE  3180   	fcall	clear_ram0
  3650                           
  3651                           ; Clear objects allocated to BANK6
  3652  0067  3020               	movlw	low __pbssBANK6
  3653  0068  0084               	movwf	4
  3654  0069  3003               	movlw	high __pbssBANK6
  3655  006A  0085               	movwf	5
  3656  006B  3046               	movlw	70
  3657  006C  00FE               	movwf	btemp
  3658  006D  3000               	movlw	0
  3659  006E  00FF               	movwf	btemp+1
  3660  006F  319E  26BE  3180   	fcall	clear_ram0
  3661                           
  3662                           ; Clear objects allocated to BANK7
  3663  0072  30A0               	movlw	low __pbssBANK7
  3664  0073  0084               	movwf	4
  3665  0074  3003               	movlw	high __pbssBANK7
  3666  0075  0085               	movwf	5
  3667  0076  3049               	movlw	73
  3668  0077  00FE               	movwf	btemp
  3669  0078  3000               	movlw	0
  3670  0079  00FF               	movwf	btemp+1
  3671  007A  319E  26BE         	fcall	clear_ram0
  3672  007C                     end_of_initialization:	
  3673                           ;End of C runtime variable initialization code
  3674                           
  3675  007C                     __end_of__initialization:	
  3676  007C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3677  007D  0020               	movlb	0
  3678  007E  318E  2E14         	ljmp	_main	;jump to C main() function
  3679                           
  3680                           	psect	bssCOMMON
  3681  007A                     __pbssCOMMON:	
  3682  007A                     _i2c_trb_count:	
  3683  007A                     	ds	1
  3684  007B                     _i2c_state:	
  3685  007B                     	ds	1
  3686  007C                     I2C_ISR@i2c_address:	
  3687  007C                     	ds	2
  3688                           
  3689                           	psect	bssBANK1
  3690  00EA                     __pbssBANK1:	
  3691  00EA                     _ticks:	
  3692  00EA                     	ds	4
  3693                           
  3694                           	psect	dataBANK1
  3695  00EE                     __pdataBANK1:	
  3696  00EE                     _messages:	
  3697  00EE                     	ds	2
  3698                           
  3699                           	psect	bssBANK2
  3700  016F                     __pbssBANK2:	
  3701  016F                     I2C_ISR@pi2c_buf_ptr:	
  3702  016F                     	ds	1
  3703                           
  3704                           	psect	bssBANK3
  3705  01A0                     __pbssBANK3:	
  3706  01A0                     bme280_get_sensor_data@F273:	
  3707  01A0                     	ds	12
  3708  01AC                     bme280_get_sensor_data@F271:	
  3709  01AC                     	ds	8
  3710  01B4                     GetNavData@F10104:	
  3711  01B4                     	ds	7
  3712  01BB                     _i2c_object:	
  3713  01BB                     	ds	7
  3714  01C2                     ___g_timeout_start:	
  3715  01C2                     	ds	4
  3716  01C6                     _id:	
  3717  01C6                     	ds	2
  3718  01C8                     _p_i2c_current:	
  3719  01C8                     	ds	2
  3720  01CA                     _p_i2c_trb_current:	
  3721  01CA                     	ds	2
  3722  01CC                     _gps_configured:	
  3723  01CC                     	ds	1
  3724  01CD                     I2C_ISR@i2c_10bit_address_restart:	
  3725  01CD                     	ds	1
  3726  01CE                     I2C_ISR@i2c_bytes_left:	
  3727  01CE                     	ds	1
  3728  01CF                     _checksum:	
  3729  01CF                     	ds	6
  3730  01D5                     I2C_MasterRead@trBlock:	
  3731  01D5                     	ds	5
  3732  01DA                     I2C_MasterWrite@trBlock:	
  3733  01DA                     	ds	5
  3734  01DF                     _i2c_tr_queue:	
  3735  01DF                     	ds	5
  3736                           
  3737                           	psect	bssBANK4
  3738  0220                     __pbssBANK4:	
  3739  0220                     get_calib_data@F376:	
  3740  0220                     	ds	26
  3741  023A                     main@F10178:	
  3742  023A                     	ds	16
  3743  024A                     GetNavData@F10110:	
  3744  024A                     	ds	12
  3745                           
  3746                           	psect	dataBANK5
  3747  02A0                     __pdataBANK5:	
  3748  02A0                     _setNavFlightMode:	
  3749  02A0                     	ds	44
  3750                           
  3751                           	psect	bssBANK6
  3752  0320                     __pbssBANK6:	
  3753  0320                     _message_start:	
  3754  0320                     	ds	70
  3755                           
  3756                           	psect	bssBANK7
  3757  03A0                     __pbssBANK7:	
  3758  03A0                     _message_end:	
  3759  03A0                     	ds	73
  3760                           
  3761                           	psect	inittext
  3762  1000                     init_ram:	
  3763  1000  00FE               	movwf	126
  3764  1001                     initloop:	
  3765  1001  0012               	moviw fsr0++
  3766  1002  001E               	movwi fsr1++
  3767  1003  3001               	movlw	1
  3768  1004  02FE               	subwf	126,f
  3769  1005  3000               	movlw	0
  3770  1006  3BFF               	subwfb	127,f
  3771  1007  087F               	movf	127,w
  3772  1008  047E               	iorwf	126,w
  3773  1009  1903               	btfsc	3,2
  3774  100A  3400               	retlw	0
  3775  100B  2801               	goto	initloop
  3776                           
  3777                           	psect	clrtext
  3778  1EBE                     clear_ram0:	
  3779                           ;	Called with FSR0 containing the base address, and
  3780                           ;	btemp/btemp+1 has the size to clear
  3781                           
  3782  1EBE  0064               	clrwdt	;clear the watchdog before getting into this loop
  3783  1EBF                     clrloop0:	
  3784  1EBF  0180               	clrf	0	;clear RAM location pointed to by FSR
  3785  1EC0  3101               	addfsr 0,1
  3786  1EC1  3001               	movlw	1
  3787  1EC2  02FE               	subwf	126,f
  3788  1EC3  3000               	movlw	0
  3789  1EC4  3BFF               	subwfb	127,f
  3790  1EC5  087F               	movf	127,w
  3791  1EC6  047E               	iorwf	126,w
  3792  1EC7  1903               	btfsc	3,2
  3793  1EC8  3400               	retlw	0	;all done for this memory range, return
  3794  1EC9  2EBF               	goto	clrloop0	;have we reached the end yet?
  3795                           
  3796                           	psect	cstackBANK2
  3797  0120                     __pcstackBANK2:	
  3798  0120                     main@convertedNumber:	
  3799                           
  3800                           ; 16 bytes @ 0x0
  3801  0120                     	ds	16
  3802  0130                     main@sensor_data:	
  3803                           
  3804                           ; 12 bytes @ 0x10
  3805  0130                     	ds	12
  3806  013C                     main@env_sensor:	
  3807                           
  3808                           ; 51 bytes @ 0x1C
  3809  013C                     	ds	51
  3810                           
  3811                           	psect	cstackBANK1
  3812  00A0                     __pcstackBANK1:	
  3813  00A0                     compensate_pressure@var3:	
  3814                           
  3815                           ; 4 bytes @ 0x0
  3816  00A0                     	ds	4
  3817  00A4                     compensate_pressure@var4:	
  3818                           
  3819                           ; 4 bytes @ 0x4
  3820  00A4                     	ds	4
  3821  00A8                     compensate_pressure@var5:	
  3822                           
  3823                           ; 4 bytes @ 0x8
  3824  00A8                     	ds	4
  3825  00AC                     _compensate_pressure$2554:	
  3826                           
  3827                           ; 4 bytes @ 0xC
  3828  00AC                     	ds	4
  3829  00B0                     _compensate_pressure$2555:	
  3830                           
  3831                           ; 4 bytes @ 0x10
  3832  00B0                     	ds	4
  3833  00B4                     compensate_pressure@uncomp_data:	
  3834                           
  3835                           ; 1 bytes @ 0x14
  3836  00B4                     	ds	1
  3837  00B5                     compensate_pressure@pressure_max:	
  3838                           
  3839                           ; 4 bytes @ 0x15
  3840  00B5                     	ds	4
  3841  00B9                     _compensate_pressure$2553:	
  3842                           
  3843                           ; 4 bytes @ 0x19
  3844  00B9                     	ds	8
  3845  00C1                     compensate_pressure@var2:	
  3846                           
  3847                           ; 4 bytes @ 0x21
  3848  00C1                     	ds	4
  3849  00C5                     compensate_pressure@pressure:	
  3850                           
  3851                           ; 4 bytes @ 0x25
  3852  00C5                     	ds	4
  3853  00C9                     compensate_pressure@var1:	
  3854                           
  3855                           ; 4 bytes @ 0x29
  3856  00C9                     	ds	4
  3857  00CD                     bme280_get_sensor_data@reg_data:	
  3858                           
  3859                           ; 8 bytes @ 0x2D
  3860  00CD                     	ds	8
  3861  00D5                     bme280_get_sensor_data@sensor_comp:	
  3862                           
  3863                           ; 1 bytes @ 0x35
  3864  00D5                     	ds	1
  3865  00D6                     bme280_get_sensor_data@rslt:	
  3866                           
  3867                           ; 1 bytes @ 0x36
  3868  00D6                     	ds	1
  3869  00D7                     bme280_get_sensor_data@uncomp_data:	
  3870                           
  3871                           ; 12 bytes @ 0x37
  3872  00D7                     	ds	13
  3873  00E4                     main@end:	
  3874                           
  3875                           ; 2 bytes @ 0x44
  3876  00E4                     	ds	2
  3877  00E6                     main@i:	
  3878                           
  3879                           ; 2 bytes @ 0x46
  3880  00E6                     	ds	2
  3881  00E8                     main@index:	
  3882                           
  3883                           ; 2 bytes @ 0x48
  3884  00E8                     	ds	2
  3885                           
  3886                           	psect	cstackCOMMON
  3887  0070                     __pcstackCOMMON:	
  3888  0070                     ?_null_ptr_check:	
  3889  0070                     ?_bme280_soft_reset:	
  3890                           ; 1 bytes @ 0x0
  3891                           
  3892  0070                     ?_get_calib_data:	
  3893                           ; 1 bytes @ 0x0
  3894                           
  3895  0070                     ?_PIN_MANAGER_Initialize:	
  3896                           ; 1 bytes @ 0x0
  3897                           
  3898  0070                     ?_OSCILLATOR_Initialize:	
  3899                           ; 1 bytes @ 0x0
  3900                           
  3901  0070                     ?_I2C_Initialize:	
  3902                           ; 1 bytes @ 0x0
  3903                           
  3904  0070                     ?_TMR0_Initialize:	
  3905                           ; 1 bytes @ 0x0
  3906                           
  3907  0070                     ?_EUSART_Initialize:	
  3908                           ; 1 bytes @ 0x0
  3909                           
  3910  0070                     ?_TMR0_ISR:	
  3911                           ; 1 bytes @ 0x0
  3912                           
  3913  0070                     ??_TMR0_ISR:	
  3914                           ; 1 bytes @ 0x0
  3915                           
  3916  0070                     ?_I2C_BusCollisionISR:	
  3917                           ; 1 bytes @ 0x0
  3918                           
  3919  0070                     ??_I2C_BusCollisionISR:	
  3920                           ; 1 bytes @ 0x0
  3921                           
  3922  0070                     ?_I2C_ISR:	
  3923                           ; 1 bytes @ 0x0
  3924                           
  3925  0070                     ?_TMR0_DefaultInterruptHandler:	
  3926                           ; 1 bytes @ 0x0
  3927                           
  3928  0070                     ??_TMR0_DefaultInterruptHandler:	
  3929                           ; 1 bytes @ 0x0
  3930                           
  3931  0070                     ?_I2C_Stop:	
  3932                           ; 1 bytes @ 0x0
  3933                           
  3934  0070                     ??_I2C_Stop:	
  3935                           ; 1 bytes @ 0x0
  3936                           
  3937  0070                     ?_I2C_FunctionComplete:	
  3938                           ; 1 bytes @ 0x0
  3939                           
  3940  0070                     ??_I2C_FunctionComplete:	
  3941                           ; 1 bytes @ 0x0
  3942                           
  3943  0070                     ?_bme280_init:	
  3944                           ; 1 bytes @ 0x0
  3945                           
  3946  0070                     ?_SYSTEM_Initialize:	
  3947                           ; 1 bytes @ 0x0
  3948                           
  3949  0070                     ?_INTERRUPT_InterruptManager:	
  3950                           ; 1 bytes @ 0x0
  3951                           
  3952  0070                     ?_I2C_WaitForLastPacketToComplete:	
  3953                           ; 1 bytes @ 0x0
  3954                           
  3955  0070                     ?_TimerISR:	
  3956                           ; 1 bytes @ 0x0
  3957                           
  3958  0070                     ??_TimerISR:	
  3959                           ; 1 bytes @ 0x0
  3960                           
  3961  0070                     ?_FlashError:	
  3962                           ; 1 bytes @ 0x0
  3963                           
  3964  0070                     ?_TransmitBit:	
  3965                           ; 1 bytes @ 0x0
  3966                           
  3967  0070                     ?_TransmitByte:	
  3968                           ; 1 bytes @ 0x0
  3969                           
  3970  0070                     ?_TransmitString:	
  3971                           ; 1 bytes @ 0x0
  3972                           
  3973  0070                     ?_main:	
  3974                           ; 1 bytes @ 0x0
  3975                           
  3976                           
  3977                           ; 1 bytes @ 0x0
  3978  0070                     	ds	1
  3979  0071                     I2C_Stop@completion_code:	
  3980                           
  3981                           ; 1 bytes @ 0x1
  3982  0071                     	ds	1
  3983  0072                     ??_I2C_ISR:	
  3984                           
  3985                           ; 1 bytes @ 0x2
  3986  0072                     	ds	2
  3987  0074                     ??_null_ptr_check:	
  3988  0074                     ?_interleave_reg_addr:	
  3989                           ; 1 bytes @ 0x4
  3990                           
  3991  0074                     ?_bme280_parse_sensor_data:	
  3992                           ; 1 bytes @ 0x4
  3993                           
  3994  0074                     ?_parse_temp_press_calib_data:	
  3995                           ; 1 bytes @ 0x4
  3996                           
  3997  0074                     ?_parse_humidity_calib_data:	
  3998                           ; 1 bytes @ 0x4
  3999                           
  4000  0074                     ??_PIN_MANAGER_Initialize:	
  4001                           ; 1 bytes @ 0x4
  4002                           
  4003  0074                     ??_OSCILLATOR_Initialize:	
  4004                           ; 1 bytes @ 0x4
  4005                           
  4006  0074                     ??_I2C_Initialize:	
  4007                           ; 1 bytes @ 0x4
  4008                           
  4009  0074                     ??_EUSART_Initialize:	
  4010                           ; 1 bytes @ 0x4
  4011                           
  4012  0074                     ?_TMR0_SetInterruptHandler:	
  4013                           ; 1 bytes @ 0x4
  4014                           
  4015  0074                     ?_I2C_MasterTRBInsert:	
  4016                           ; 1 bytes @ 0x4
  4017                           
  4018  0074                     ?_I2C_MasterReadTRBBuild:	
  4019                           ; 1 bytes @ 0x4
  4020                           
  4021  0074                     ??_INTERRUPT_InterruptManager:	
  4022                           ; 1 bytes @ 0x4
  4023                           
  4024  0074                     ??_I2C_WaitForLastPacketToComplete:	
  4025                           ; 1 bytes @ 0x4
  4026                           
  4027  0074                     ??_FlashError:	
  4028                           ; 1 bytes @ 0x4
  4029                           
  4030  0074                     ?_Sleep:	
  4031                           ; 1 bytes @ 0x4
  4032                           
  4033  0074                     ??_TransmitBit:	
  4034                           ; 1 bytes @ 0x4
  4035                           
  4036  0074                     ??___lmul:	
  4037                           ; 1 bytes @ 0x4
  4038                           
  4039  0074                     ??___lldiv:	
  4040                           ; 1 bytes @ 0x4
  4041                           
  4042  0074                     ?_strlen:	
  4043                           ; 1 bytes @ 0x4
  4044                           
  4045  0074                     ?_Insert:	
  4046                           ; 2 bytes @ 0x4
  4047                           
  4048  0074                     ?___wmul:	
  4049                           ; 2 bytes @ 0x4
  4050                           
  4051  0074                     ?___awdiv:	
  4052                           ; 2 bytes @ 0x4
  4053                           
  4054  0074                     ?___awmod:	
  4055                           ; 2 bytes @ 0x4
  4056                           
  4057  0074                     bme280_parse_sensor_data@uncomp_data:	
  4058                           ; 2 bytes @ 0x4
  4059                           
  4060  0074                     interleave_reg_addr@temp_buff:	
  4061                           ; 1 bytes @ 0x4
  4062                           
  4063  0074                     parse_temp_press_calib_data@dev:	
  4064                           ; 1 bytes @ 0x4
  4065                           
  4066  0074                     parse_humidity_calib_data@dev:	
  4067                           ; 1 bytes @ 0x4
  4068                           
  4069  0074                     Insert@src:	
  4070                           ; 1 bytes @ 0x4
  4071                           
  4072  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  4073                           ; 1 bytes @ 0x4
  4074                           
  4075  0074                     I2C_MasterTRBInsert@ptrb_list:	
  4076                           ; 2 bytes @ 0x4
  4077                           
  4078  0074                     I2C_MasterReadTRBBuild@ptrb:	
  4079                           ; 2 bytes @ 0x4
  4080                           
  4081  0074                     ___wmul@multiplier:	
  4082                           ; 2 bytes @ 0x4
  4083                           
  4084  0074                     ___awdiv@divisor:	
  4085                           ; 2 bytes @ 0x4
  4086                           
  4087  0074                     ___awmod@divisor:	
  4088                           ; 2 bytes @ 0x4
  4089                           
  4090  0074                     strlen@s:	
  4091                           ; 2 bytes @ 0x4
  4092                           
  4093  0074                     Sleep@ms:	
  4094                           ; 2 bytes @ 0x4
  4095                           
  4096  0074                     ___lmul@product:	
  4097                           ; 4 bytes @ 0x4
  4098                           
  4099                           
  4100                           ; 4 bytes @ 0x4
  4101  0074                     	ds	1
  4102  0075                     ??_parse_temp_press_calib_data:	
  4103  0075                     ??_parse_humidity_calib_data:	
  4104                           ; 1 bytes @ 0x5
  4105                           
  4106  0075                     interleave_reg_addr@reg_data:	
  4107                           ; 1 bytes @ 0x5
  4108                           
  4109  0075                     TransmitBit@b:	
  4110                           ; 1 bytes @ 0x5
  4111                           
  4112  0075                     Insert@index:	
  4113                           ; 1 bytes @ 0x5
  4114                           
  4115  0075                     ___lldiv@quotient:	
  4116                           ; 2 bytes @ 0x5
  4117                           
  4118                           
  4119                           ; 4 bytes @ 0x5
  4120  0075                     	ds	1
  4121  0076                     ??_TMR0_Initialize:	
  4122  0076                     ??_TMR0_SetInterruptHandler:	
  4123                           ; 1 bytes @ 0x6
  4124                           
  4125  0076                     ??_strlen:	
  4126                           ; 1 bytes @ 0x6
  4127                           
  4128  0076                     ??_TransmitByte:	
  4129                           ; 1 bytes @ 0x6
  4130                           
  4131  0076                     interleave_reg_addr@len:	
  4132                           ; 1 bytes @ 0x6
  4133                           
  4134  0076                     parse_temp_press_calib_data@calib_data:	
  4135                           ; 1 bytes @ 0x6
  4136                           
  4137  0076                     null_ptr_check@rslt:	
  4138                           ; 1 bytes @ 0x6
  4139                           
  4140  0076                     I2C_MasterTRBInsert@pflag:	
  4141                           ; 1 bytes @ 0x6
  4142                           
  4143  0076                     I2C_MasterReadTRBBuild@pdata:	
  4144                           ; 1 bytes @ 0x6
  4145                           
  4146  0076                     FlashError@i:	
  4147                           ; 1 bytes @ 0x6
  4148                           
  4149  0076                     ___wmul@multiplicand:	
  4150                           ; 2 bytes @ 0x6
  4151                           
  4152  0076                     ___awdiv@dividend:	
  4153                           ; 2 bytes @ 0x6
  4154                           
  4155  0076                     ___awmod@dividend:	
  4156                           ; 2 bytes @ 0x6
  4157                           
  4158                           
  4159                           ; 2 bytes @ 0x6
  4160  0076                     	ds	1
  4161  0077                     ??_interleave_reg_addr:	
  4162  0077                     ??_I2C_MasterTRBInsert:	
  4163                           ; 1 bytes @ 0x7
  4164                           
  4165  0077                     ??_SYSTEM_Initialize:	
  4166                           ; 1 bytes @ 0x7
  4167                           
  4168  0077                     parse_temp_press_calib_data@reg_data:	
  4169                           ; 1 bytes @ 0x7
  4170                           
  4171  0077                     null_ptr_check@dev:	
  4172                           ; 1 bytes @ 0x7
  4173                           
  4174  0077                     I2C_MasterReadTRBBuild@length:	
  4175                           ; 1 bytes @ 0x7
  4176                           
  4177  0077                     TransmitByte@byte:	
  4178                           ; 1 bytes @ 0x7
  4179                           
  4180  0077                     Insert@destLimit:	
  4181                           ; 1 bytes @ 0x7
  4182                           
  4183  0077                     strlen@a:	
  4184                           ; 2 bytes @ 0x7
  4185                           
  4186                           
  4187                           ; 2 bytes @ 0x7
  4188  0077                     	ds	1
  4189  0078                     ??___wmul:	
  4190  0078                     ??___aldiv:	
  4191                           ; 1 bytes @ 0x8
  4192                           
  4193  0078                     ??___awdiv:	
  4194                           ; 1 bytes @ 0x8
  4195                           
  4196  0078                     ??___awmod:	
  4197                           ; 1 bytes @ 0x8
  4198                           
  4199  0078                     I2C_MasterReadTRBBuild@address:	
  4200                           ; 1 bytes @ 0x8
  4201                           
  4202  0078                     TransmitByte@i:	
  4203                           ; 2 bytes @ 0x8
  4204                           
  4205  0078                     ___wmul@product:	
  4206                           ; 2 bytes @ 0x8
  4207                           
  4208                           
  4209                           ; 2 bytes @ 0x8
  4210  0078                     	ds	1
  4211  0079                     ??_ClearString:	
  4212  0079                     ??_InsertString:	
  4213                           ; 1 bytes @ 0x9
  4214                           
  4215  0079                     I2C_MasterTRBInsert@count:	
  4216                           ; 1 bytes @ 0x9
  4217                           
  4218  0079                     ___lldiv@counter:	
  4219                           ; 1 bytes @ 0x9
  4220                           
  4221                           
  4222                           ; 1 bytes @ 0x9
  4223  0079                     	ds	1
  4224                           
  4225                           	psect	cstackBANK0
  4226  0020                     __pcstackBANK0:	
  4227  0020                     ??_bme280_parse_sensor_data:	
  4228  0020                     ?_I2C_MasterWriteTRBBuild:	
  4229                           ; 1 bytes @ 0x0
  4230                           
  4231  0020                     ??_I2C_MasterReadTRBBuild:	
  4232                           ; 1 bytes @ 0x0
  4233                           
  4234  0020                     ?_ClearString:	
  4235                           ; 1 bytes @ 0x0
  4236                           
  4237  0020                     ??_Insert:	
  4238                           ; 1 bytes @ 0x0
  4239                           
  4240  0020                     ??_Sleep:	
  4241                           ; 1 bytes @ 0x0
  4242                           
  4243  0020                     ??_TransmitString:	
  4244                           ; 1 bytes @ 0x0
  4245                           
  4246  0020                     ?_crc16_update:	
  4247                           ; 1 bytes @ 0x0
  4248                           
  4249  0020                     ?___lmul:	
  4250                           ; 2 bytes @ 0x0
  4251                           
  4252  0020                     ?___lldiv:	
  4253                           ; 4 bytes @ 0x0
  4254                           
  4255  0020                     interleave_reg_addr@reg_addr:	
  4256                           ; 4 bytes @ 0x0
  4257                           
  4258  0020                     ___awdiv@counter:	
  4259                           ; 1 bytes @ 0x0
  4260                           
  4261  0020                     ___awmod@counter:	
  4262                           ; 1 bytes @ 0x0
  4263                           
  4264  0020                     parse_humidity_calib_data@dig_H4_lsb:	
  4265                           ; 1 bytes @ 0x0
  4266                           
  4267  0020                     I2C_MasterWriteTRBBuild@ptrb:	
  4268                           ; 2 bytes @ 0x0
  4269                           
  4270  0020                     ClearString@str:	
  4271                           ; 2 bytes @ 0x0
  4272                           
  4273  0020                     crc16_update@length:	
  4274                           ; 2 bytes @ 0x0
  4275                           
  4276  0020                     ___lmul@multiplier:	
  4277                           ; 2 bytes @ 0x0
  4278                           
  4279  0020                     ___lldiv@divisor:	
  4280                           ; 4 bytes @ 0x0
  4281                           
  4282                           
  4283                           ; 4 bytes @ 0x0
  4284  0020                     	ds	1
  4285  0021                     interleave_reg_addr@index:	
  4286  0021                     ___awdiv@sign:	
  4287                           ; 1 bytes @ 0x1
  4288                           
  4289  0021                     ___awmod@sign:	
  4290                           ; 1 bytes @ 0x1
  4291                           
  4292  0021                     TransmitString@counti:	
  4293                           ; 1 bytes @ 0x1
  4294                           
  4295                           
  4296                           ; 2 bytes @ 0x1
  4297  0021                     	ds	1
  4298  0022                     ?_I2C_MasterRead:	
  4299  0022                     I2C_MasterRead@length:	
  4300                           ; 1 bytes @ 0x2
  4301                           
  4302  0022                     I2C_MasterWriteTRBBuild@pdata:	
  4303                           ; 1 bytes @ 0x2
  4304                           
  4305  0022                     Insert@temp:	
  4306                           ; 1 bytes @ 0x2
  4307                           
  4308  0022                     parse_humidity_calib_data@dig_H4_msb:	
  4309                           ; 1 bytes @ 0x2
  4310                           
  4311  0022                     ClearString@counti:	
  4312                           ; 2 bytes @ 0x2
  4313                           
  4314  0022                     crc16_update@wCrc:	
  4315                           ; 2 bytes @ 0x2
  4316                           
  4317  0022                     ___awdiv@quotient:	
  4318                           ; 2 bytes @ 0x2
  4319                           
  4320                           
  4321                           ; 2 bytes @ 0x2
  4322  0022                     	ds	1
  4323  0023                     I2C_MasterWriteTRBBuild@length:	
  4324  0023                     Insert@current:	
  4325                           ; 1 bytes @ 0x3
  4326                           
  4327  0023                     I2C_MasterRead@address:	
  4328                           ; 1 bytes @ 0x3
  4329                           
  4330  0023                     TransmitString@i:	
  4331                           ; 2 bytes @ 0x3
  4332                           
  4333                           
  4334                           ; 2 bytes @ 0x3
  4335  0023                     	ds	1
  4336  0024                     ?_ReverseString:	
  4337  0024                     ??_crc16_update:	
  4338                           ; 1 bytes @ 0x4
  4339                           
  4340  0024                     Insert@dest:	
  4341                           ; 1 bytes @ 0x4
  4342                           
  4343  0024                     parse_humidity_calib_data@dig_H5_lsb:	
  4344                           ; 1 bytes @ 0x4
  4345                           
  4346  0024                     I2C_MasterWriteTRBBuild@address:	
  4347                           ; 2 bytes @ 0x4
  4348                           
  4349  0024                     ClearString@i:	
  4350                           ; 2 bytes @ 0x4
  4351                           
  4352  0024                     ReverseString@str:	
  4353                           ; 2 bytes @ 0x4
  4354                           
  4355  0024                     Sleep@start:	
  4356                           ; 2 bytes @ 0x4
  4357                           
  4358  0024                     ___lmul@multiplicand:	
  4359                           ; 4 bytes @ 0x4
  4360                           
  4361  0024                     ___lldiv@dividend:	
  4362                           ; 4 bytes @ 0x4
  4363                           
  4364                           
  4365                           ; 4 bytes @ 0x4
  4366  0024                     	ds	1
  4367  0025                     ?_InsertString:	
  4368  0025                     I2C_MasterRead@pflag:	
  4369                           ; 2 bytes @ 0x5
  4370                           
  4371  0025                     TransmitString@message:	
  4372                           ; 1 bytes @ 0x5
  4373                           
  4374  0025                     InsertString@src:	
  4375                           ; 1 bytes @ 0x5
  4376                           
  4377                           
  4378                           ; 2 bytes @ 0x5
  4379  0025                     	ds	1
  4380  0026                     ??_I2C_MasterWriteTRBBuild:	
  4381  0026                     ??_I2C_MasterRead:	
  4382                           ; 1 bytes @ 0x6
  4383                           
  4384  0026                     ??_ReverseString:	
  4385                           ; 1 bytes @ 0x6
  4386                           
  4387  0026                     parse_humidity_calib_data@dig_H5_msb:	
  4388                           ; 1 bytes @ 0x6
  4389                           
  4390                           
  4391                           ; 2 bytes @ 0x6
  4392  0026                     	ds	1
  4393  0027                     crc16_update@pData:	
  4394  0027                     InsertString@index:	
  4395                           ; 1 bytes @ 0x7
  4396                           
  4397                           
  4398                           ; 2 bytes @ 0x7
  4399  0027                     	ds	1
  4400  0028                     ?_I2C_MasterWrite:	
  4401  0028                     ?_WriteEnvSensor:	
  4402                           ; 1 bytes @ 0x8
  4403                           
  4404  0028                     ?___aldiv:	
  4405                           ; 1 bytes @ 0x8
  4406                           
  4407  0028                     parse_humidity_calib_data@calib_data:	
  4408                           ; 4 bytes @ 0x8
  4409                           
  4410  0028                     I2C_MasterWrite@length:	
  4411                           ; 1 bytes @ 0x8
  4412                           
  4413  0028                     I2C_MasterRead@pdata:	
  4414                           ; 1 bytes @ 0x8
  4415                           
  4416  0028                     crc16_update@i:	
  4417                           ; 1 bytes @ 0x8
  4418                           
  4419  0028                     WriteEnvSensor@dev_id:	
  4420                           ; 1 bytes @ 0x8
  4421                           
  4422  0028                     bme280_parse_sensor_data@data_xlsb:	
  4423                           ; 1 bytes @ 0x8
  4424                           
  4425  0028                     ___aldiv@divisor:	
  4426                           ; 4 bytes @ 0x8
  4427                           
  4428                           
  4429                           ; 4 bytes @ 0x8
  4430  0028                     	ds	1
  4431  0029                     ?_crc16:	
  4432  0029                     parse_humidity_calib_data@reg_data:	
  4433                           ; 2 bytes @ 0x9
  4434                           
  4435  0029                     WriteEnvSensor@reg_addr:	
  4436                           ; 1 bytes @ 0x9
  4437                           
  4438  0029                     I2C_MasterWrite@address:	
  4439                           ; 1 bytes @ 0x9
  4440                           
  4441  0029                     InsertString@destLimit:	
  4442                           ; 2 bytes @ 0x9
  4443                           
  4444  0029                     crc16@segments:	
  4445                           ; 2 bytes @ 0x9
  4446                           
  4447                           
  4448                           ; 2 bytes @ 0x9
  4449  0029                     	ds	1
  4450  002A                     WriteEnvSensor@reg_data:	
  4451  002A                     ReverseString@halfway:	
  4452                           ; 1 bytes @ 0xA
  4453                           
  4454                           
  4455                           ; 2 bytes @ 0xA
  4456  002A                     	ds	1
  4457  002B                     ??_crc16:	
  4458  002B                     I2C_MasterWrite@pflag:	
  4459                           ; 1 bytes @ 0xB
  4460                           
  4461  002B                     InsertString@counti:	
  4462                           ; 1 bytes @ 0xB
  4463                           
  4464  002B                     WriteEnvSensor@len:	
  4465                           ; 2 bytes @ 0xB
  4466                           
  4467                           
  4468                           ; 2 bytes @ 0xB
  4469  002B                     	ds	1
  4470  002C                     ??_I2C_MasterWrite:	
  4471  002C                     ReverseString@temp:	
  4472                           ; 1 bytes @ 0xC
  4473                           
  4474  002C                     bme280_parse_sensor_data@data_lsb:	
  4475                           ; 1 bytes @ 0xC
  4476                           
  4477  002C                     ___aldiv@dividend:	
  4478                           ; 4 bytes @ 0xC
  4479                           
  4480                           
  4481                           ; 4 bytes @ 0xC
  4482  002C                     	ds	1
  4483  002D                     ??_WriteEnvSensor:	
  4484  002D                     InsertString@i:	
  4485                           ; 1 bytes @ 0xD
  4486                           
  4487  002D                     ReverseString@opposite:	
  4488                           ; 2 bytes @ 0xD
  4489                           
  4490  002D                     crc16@crc:	
  4491                           ; 2 bytes @ 0xD
  4492                           
  4493                           
  4494                           ; 2 bytes @ 0xD
  4495  002D                     	ds	1
  4496  002E                     I2C_MasterWrite@pdata:	
  4497                           
  4498                           ; 1 bytes @ 0xE
  4499  002E                     	ds	1
  4500  002F                     ?_ReadEnvSensor:	
  4501  002F                     InsertString@dest:	
  4502                           ; 1 bytes @ 0xF
  4503                           
  4504  002F                     crc16@data:	
  4505                           ; 1 bytes @ 0xF
  4506                           
  4507  002F                     ReadEnvSensor@dev_id:	
  4508                           ; 1 bytes @ 0xF
  4509                           
  4510  002F                     ReverseString@counti:	
  4511                           ; 1 bytes @ 0xF
  4512                           
  4513                           
  4514                           ; 2 bytes @ 0xF
  4515  002F                     	ds	1
  4516  0030                     ReadEnvSensor@reg_addr:	
  4517  0030                     ___aldiv@counter:	
  4518                           ; 1 bytes @ 0x10
  4519                           
  4520  0030                     crc16@i:	
  4521                           ; 1 bytes @ 0x10
  4522                           
  4523  0030                     bme280_parse_sensor_data@data_msb:	
  4524                           ; 2 bytes @ 0x10
  4525                           
  4526                           
  4527                           ; 4 bytes @ 0x10
  4528  0030                     	ds	1
  4529  0031                     ReadEnvSensor@data:	
  4530  0031                     ___aldiv@sign:	
  4531                           ; 1 bytes @ 0x11
  4532                           
  4533  0031                     ReverseString@i:	
  4534                           ; 1 bytes @ 0x11
  4535                           
  4536                           
  4537                           ; 2 bytes @ 0x11
  4538  0031                     	ds	1
  4539  0032                     ReadEnvSensor@len:	
  4540  0032                     ___aldiv@quotient:	
  4541                           ; 2 bytes @ 0x12
  4542                           
  4543                           
  4544                           ; 4 bytes @ 0x12
  4545  0032                     	ds	1
  4546  0033                     ?_UIntToHexString:	
  4547  0033                     ?_IntToString:	
  4548                           ; 1 bytes @ 0x13
  4549                           
  4550  0033                     IntToString@n:	
  4551                           ; 1 bytes @ 0x13
  4552                           
  4553  0033                     UIntToHexString@n:	
  4554                           ; 2 bytes @ 0x13
  4555                           
  4556                           
  4557                           ; 4 bytes @ 0x13
  4558  0033                     	ds	1
  4559  0034                     ??_ReadEnvSensor:	
  4560  0034                     bme280_parse_sensor_data@reg_data:	
  4561                           ; 1 bytes @ 0x14
  4562                           
  4563  0034                     WriteEnvSensor@i:	
  4564                           ; 1 bytes @ 0x14
  4565                           
  4566                           
  4567                           ; 1 bytes @ 0x14
  4568  0034                     	ds	1
  4569  0035                     WriteEnvSensor@j:	
  4570  0035                     IntToString@dest:	
  4571                           ; 1 bytes @ 0x15
  4572                           
  4573                           
  4574                           ; 2 bytes @ 0x15
  4575  0035                     	ds	1
  4576  0036                     ?_compensate_temperature:	
  4577  0036                     ?_compensate_pressure:	
  4578                           ; 4 bytes @ 0x16
  4579                           
  4580  0036                     compensate_temperature@calib_data:	
  4581                           ; 4 bytes @ 0x16
  4582                           
  4583  0036                     compensate_pressure@calib_data:	
  4584                           ; 1 bytes @ 0x16
  4585                           
  4586  0036                     WriteEnvSensor@local_address:	
  4587                           ; 1 bytes @ 0x16
  4588                           
  4589                           
  4590                           ; 1 bytes @ 0x16
  4591  0036                     	ds	1
  4592  0037                     ??_IntToString:	
  4593  0037                     UIntToHexString@dest:	
  4594                           ; 1 bytes @ 0x17
  4595                           
  4596  0037                     WriteEnvSensor@status:	
  4597                           ; 1 bytes @ 0x17
  4598                           
  4599                           
  4600                           ; 1 bytes @ 0x17
  4601  0037                     	ds	1
  4602  0038                     ?_bme280_set_regs:	
  4603  0038                     ??_UIntToHexString:	
  4604                           ; 1 bytes @ 0x18
  4605                           
  4606  0038                     bme280_set_regs@reg_data:	
  4607                           ; 1 bytes @ 0x18
  4608                           
  4609                           
  4610                           ; 1 bytes @ 0x18
  4611  0038                     	ds	1
  4612  0039                     bme280_set_regs@len:	
  4613                           
  4614                           ; 1 bytes @ 0x19
  4615  0039                     	ds	1
  4616  003A                     ??_compensate_temperature:	
  4617  003A                     ??_compensate_pressure:	
  4618                           ; 1 bytes @ 0x1A
  4619                           
  4620  003A                     bme280_set_regs@dev:	
  4621                           ; 1 bytes @ 0x1A
  4622                           
  4623  003A                     IntToString@sign:	
  4624                           ; 1 bytes @ 0x1A
  4625                           
  4626  003A                     ReadEnvSensor@status:	
  4627                           ; 1 bytes @ 0x1A
  4628                           
  4629  003A                     _UIntToHexString$1797:	
  4630                           ; 1 bytes @ 0x1A
  4631                           
  4632                           
  4633                           ; 4 bytes @ 0x1A
  4634  003A                     	ds	1
  4635  003B                     ?_bme280_get_regs:	
  4636  003B                     ??_bme280_set_regs:	
  4637                           ; 1 bytes @ 0x1B
  4638                           
  4639  003B                     bme280_get_regs@reg_data:	
  4640                           ; 1 bytes @ 0x1B
  4641                           
  4642  003B                     IntToString@i:	
  4643                           ; 1 bytes @ 0x1B
  4644                           
  4645                           
  4646                           ; 2 bytes @ 0x1B
  4647  003B                     	ds	1
  4648  003C                     bme280_get_regs@len:	
  4649                           
  4650                           ; 2 bytes @ 0x1C
  4651  003C                     	ds	2
  4652  003E                     bme280_get_regs@dev:	
  4653  003E                     UIntToHexString@remainder:	
  4654                           ; 1 bytes @ 0x1E
  4655                           
  4656  003E                     bme280_set_regs@temp_buff:	
  4657                           ; 4 bytes @ 0x1E
  4658                           
  4659                           
  4660                           ; 20 bytes @ 0x1E
  4661  003E                     	ds	1
  4662  003F                     ??_bme280_get_regs:	
  4663                           
  4664                           ; 1 bytes @ 0x1F
  4665  003F                     	ds	3
  4666  0042                     bme280_get_regs@reg_addr:	
  4667  0042                     UIntToHexString@i:	
  4668                           ; 1 bytes @ 0x22
  4669                           
  4670                           
  4671                           ; 4 bytes @ 0x22
  4672  0042                     	ds	1
  4673  0043                     bme280_get_regs@rslt:	
  4674                           
  4675                           ; 1 bytes @ 0x23
  4676  0043                     	ds	1
  4677  0044                     ??_get_calib_data:	
  4678  0044                     _compensate_temperature$2552:	
  4679                           ; 1 bytes @ 0x24
  4680                           
  4681                           
  4682                           ; 4 bytes @ 0x24
  4683  0044                     	ds	3
  4684  0047                     get_calib_data@calib_data:	
  4685                           
  4686                           ; 26 bytes @ 0x27
  4687  0047                     	ds	5
  4688  004C                     compensate_temperature@temperature_max:	
  4689                           
  4690                           ; 4 bytes @ 0x2C
  4691  004C                     	ds	4
  4692  0050                     compensate_temperature@var1:	
  4693                           
  4694                           ; 4 bytes @ 0x30
  4695  0050                     	ds	2
  4696  0052                     bme280_set_regs@temp_len:	
  4697                           
  4698                           ; 2 bytes @ 0x32
  4699  0052                     	ds	2
  4700  0054                     bme280_set_regs@reg_addr_cnt:	
  4701  0054                     compensate_temperature@uncomp_data:	
  4702                           ; 1 bytes @ 0x34
  4703                           
  4704                           
  4705                           ; 1 bytes @ 0x34
  4706  0054                     	ds	1
  4707  0055                     bme280_set_regs@rslt:	
  4708  0055                     compensate_temperature@var2:	
  4709                           ; 1 bytes @ 0x35
  4710                           
  4711                           
  4712                           ; 4 bytes @ 0x35
  4713  0055                     	ds	1
  4714  0056                     bme280_set_regs@reg_addr:	
  4715                           
  4716                           ; 1 bytes @ 0x36
  4717  0056                     	ds	1
  4718  0057                     ??_bme280_soft_reset:	
  4719                           
  4720                           ; 1 bytes @ 0x37
  4721  0057                     	ds	2
  4722  0059                     compensate_temperature@temperature:	
  4723                           
  4724                           ; 4 bytes @ 0x39
  4725  0059                     	ds	1
  4726  005A                     bme280_soft_reset@soft_rst_cmd:	
  4727                           
  4728                           ; 1 bytes @ 0x3A
  4729  005A                     	ds	1
  4730  005B                     bme280_soft_reset@rslt:	
  4731                           
  4732                           ; 1 bytes @ 0x3B
  4733  005B                     	ds	1
  4734  005C                     bme280_soft_reset@reg_addr:	
  4735                           
  4736                           ; 1 bytes @ 0x3C
  4737  005C                     	ds	1
  4738  005D                     ?_bme280_compensate_data:	
  4739  005D                     bme280_soft_reset@dev:	
  4740                           ; 1 bytes @ 0x3D
  4741                           
  4742  005D                     bme280_compensate_data@uncomp_data:	
  4743                           ; 1 bytes @ 0x3D
  4744                           
  4745                           
  4746                           ; 1 bytes @ 0x3D
  4747  005D                     	ds	1
  4748  005E                     bme280_compensate_data@comp_data:	
  4749                           
  4750                           ; 1 bytes @ 0x3E
  4751  005E                     	ds	1
  4752  005F                     bme280_compensate_data@calib_data:	
  4753                           
  4754                           ; 1 bytes @ 0x3F
  4755  005F                     	ds	1
  4756  0060                     ??_bme280_compensate_data:	
  4757                           
  4758                           ; 1 bytes @ 0x40
  4759  0060                     	ds	1
  4760  0061                     bme280_compensate_data@rslt:	
  4761                           
  4762                           ; 1 bytes @ 0x41
  4763  0061                     	ds	1
  4764  0062                     bme280_compensate_data@sensor_comp:	
  4765  0062                     get_calib_data@rslt:	
  4766                           ; 1 bytes @ 0x42
  4767                           
  4768                           
  4769                           ; 1 bytes @ 0x42
  4770  0062                     	ds	1
  4771  0063                     ?_bme280_get_sensor_data:	
  4772  0063                     bme280_get_sensor_data@comp_data:	
  4773                           ; 1 bytes @ 0x43
  4774                           
  4775  0063                     get_calib_data@dev:	
  4776                           ; 1 bytes @ 0x43
  4777                           
  4778                           
  4779                           ; 1 bytes @ 0x43
  4780  0063                     	ds	1
  4781  0064                     ??_bme280_init:	
  4782  0064                     bme280_get_sensor_data@dev:	
  4783                           ; 1 bytes @ 0x44
  4784                           
  4785                           
  4786                           ; 1 bytes @ 0x44
  4787  0064                     	ds	1
  4788  0065                     ??_bme280_get_sensor_data:	
  4789                           
  4790                           ; 1 bytes @ 0x45
  4791  0065                     	ds	2
  4792  0067                     bme280_init@try_count:	
  4793                           
  4794                           ; 1 bytes @ 0x47
  4795  0067                     	ds	1
  4796  0068                     bme280_init@chip_id:	
  4797                           
  4798                           ; 1 bytes @ 0x48
  4799  0068                     	ds	1
  4800  0069                     bme280_init@rslt:	
  4801                           
  4802                           ; 1 bytes @ 0x49
  4803  0069                     	ds	1
  4804  006A                     bme280_init@dev:	
  4805                           
  4806                           ; 1 bytes @ 0x4A
  4807  006A                     	ds	1
  4808  006B                     ??_main:	
  4809                           
  4810                           ; 1 bytes @ 0x4B
  4811  006B                     	ds	5
  4812                           
  4813                           	psect	maintext
  4814  0E14                     __pmaintext:	
  4815 ;;
  4816 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  4817 ;;
  4818 ;; *************** function _main *****************
  4819 ;; Defined at:
  4820 ;;		line 849 in file "main.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;		None
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  i               2   70[BANK1 ] int 
  4825 ;;  convertedNum   16    0[BANK2 ] unsigned char [16]
  4826 ;;  sensor_data    12   16[BANK2 ] struct bme280_data
  4827 ;;  index           2   72[BANK1 ] int 
  4828 ;;  end             2   68[BANK1 ] int 
  4829 ;;  env_sensor     51   28[BANK2 ] struct bme280_dev
  4830 ;;  env_sensor_s    1    0        char 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  1    wreg      void 
  4833 ;; Registers used:
  4834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : B1F/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Locals:         0       0       7      79       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Totals:         0       5       7      79       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;Total ram usage:       91 bytes
  4845 ;; Hardware stack levels required when called:   10
  4846 ;; This function calls:
  4847 ;;		_ClearString
  4848 ;;		_FlashError
  4849 ;;		_Insert
  4850 ;;		_InsertString
  4851 ;;		_IntToString
  4852 ;;		_SYSTEM_Initialize
  4853 ;;		_TMR0_SetInterruptHandler
  4854 ;;		_TransmitString
  4855 ;;		_UIntToHexString
  4856 ;;		_bme280_get_sensor_data
  4857 ;;		_bme280_init
  4858 ;;		_crc16
  4859 ;;		_strlen
  4860 ;; This function is called by:
  4861 ;;		Startup code after reset
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _main
  4867  0E14                     _main:	
  4868                           
  4869                           ;main.c: 852:     SYSTEM_Initialize();
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4873  0E14  319E  26CA  318E   	fcall	_SYSTEM_Initialize
  4874                           
  4875                           ;main.c: 853:     (INTCONbits.GIE = 1);
  4876  0E17  178B               	bsf	11,7	;volatile
  4877                           
  4878                           ;main.c: 854:     TMR0_SetInterruptHandler(TimerISR);
  4879  0E18  30AA               	movlw	low _TimerISR
  4880  0E19  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4881  0E1A  301E               	movlw	high _TimerISR
  4882  0E1B  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4883  0E1C  319E  26A5  318E   	fcall	_TMR0_SetInterruptHandler
  4884                           
  4885                           ;main.c: 860:     env_sensor.dev_id = 0x76;
  4886  0E1F  3076               	movlw	118
  4887  0E20  0020               	movlb	0	; select bank0
  4888  0E21  00EB               	movwf	??_main
  4889  0E22  086B               	movf	??_main,w
  4890  0E23  0022               	movlb	2	; select bank2
  4891  0E24  00BD               	movwf	(main@env_sensor^(0+256)+1)
  4892                           
  4893                           ;main.c: 861:     env_sensor.intf = BME280_I2C_INTF;
  4894  0E25  01BE               	clrf	(main@env_sensor^(0+256)+2)
  4895  0E26  0ABE               	incf	(main@env_sensor^(0+256)+2),f
  4896                           
  4897                           ;main.c: 862:     env_sensor.read = ReadEnvSensor;
  4898  0E27  303E               	movlw	low _ReadEnvSensor
  4899  0E28  00BF               	movwf	(low ((main@env_sensor| (0+256)+3)))^0
  4900  0E29  3009               	movlw	high _ReadEnvSensor
  4901  0E2A  00C0               	movwf	((low ((main@env_sensor| (0+256)+3)))^0+1)
  4902                           
  4903                           ;main.c: 863:     env_sensor.write = WriteEnvSensor;
  4904  0E2B  30EC               	movlw	low _WriteEnvSensor
  4905  0E2C  00C1               	movwf	(low ((main@env_sensor| (0+256)+5)))^0
  4906  0E2D  3009               	movlw	high _WriteEnvSensor
  4907  0E2E  00C2               	movwf	((low ((main@env_sensor| (0+256)+5)))^0+1)
  4908                           
  4909                           ;main.c: 864:     env_sensor.delay_ms = Sleep;
  4910  0E2F  30C4               	movlw	low _Sleep
  4911  0E30  00C3               	movwf	(low ((main@env_sensor| (0+256)+7)))^0
  4912  0E31  3007               	movlw	high _Sleep
  4913  0E32  00C4               	movwf	((low ((main@env_sensor| (0+256)+7)))^0+1)
  4914                           
  4915                           ;main.c: 866:     ClearString(messages[0]);
  4916  0E33  0021               	movlb	1	; select bank1
  4917  0E34  086E               	movf	_messages^(0+128),w
  4918  0E35  0020               	movlb	0	; select bank0
  4919  0E36  00A0               	movwf	ClearString@str
  4920  0E37  3003               	movlw	3
  4921  0E38  00A1               	movwf	ClearString@str+1
  4922  0E39  319F  27B2  318E   	fcall	_ClearString
  4923                           
  4924                           ;main.c: 867:     ClearString(messages[1]);
  4925  0E3C  0021               	movlb	1	; select bank1
  4926  0E3D  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  4927  0E3E  0020               	movlb	0	; select bank0
  4928  0E3F  00A0               	movwf	ClearString@str
  4929  0E40  3003               	movlw	3
  4930  0E41  00A1               	movwf	ClearString@str+1
  4931  0E42  319F  27B2  318E   	fcall	_ClearString
  4932  0E45  303C               	movlw	(low (main@env_sensor| (0+256)))& (0+255)
  4933  0E46  3195  255B  318E   	fcall	_bme280_init
  4934  0E49                     l4017:	
  4935                           
  4936                           ;main.c: 886:         {;main.c: 888:             struct bme280_data sensor_data;;main.c:
      +                           889:             bme280_get_sensor_data(0x07, &sensor_data, &env_sensor);
  4937  0E49  3030               	movlw	(low (main@sensor_data| (0+256)))& (0+255)
  4938  0E4A  0020               	movlb	0	; select bank0
  4939  0E4B  00EB               	movwf	??_main
  4940  0E4C  086B               	movf	??_main,w
  4941  0E4D  00E3               	movwf	bme280_get_sensor_data@comp_data
  4942  0E4E  303C               	movlw	(low (main@env_sensor| (0+256)))& (0+255)
  4943  0E4F  00EC               	movwf	??_main+1
  4944  0E50  086C               	movf	??_main+1,w
  4945  0E51  00E4               	movwf	bme280_get_sensor_data@dev
  4946  0E52  3007               	movlw	7
  4947  0E53  3194  24A0  318E   	fcall	_bme280_get_sensor_data
  4948                           
  4949                           ;main.c: 890:             ClearString(messages[0]);
  4950  0E56  0021               	movlb	1	; select bank1
  4951  0E57  086E               	movf	_messages^(0+128),w
  4952  0E58  0020               	movlb	0	; select bank0
  4953  0E59  00A0               	movwf	ClearString@str
  4954  0E5A  3003               	movlw	3
  4955  0E5B  00A1               	movwf	ClearString@str+1
  4956  0E5C  319F  27B2  318E   	fcall	_ClearString
  4957                           
  4958                           ;main.c: 891:             ClearString(messages[1]);
  4959  0E5F  0021               	movlb	1	; select bank1
  4960  0E60  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  4961  0E61  0020               	movlb	0	; select bank0
  4962  0E62  00A0               	movwf	ClearString@str
  4963  0E63  3003               	movlw	3
  4964  0E64  00A1               	movwf	ClearString@str+1
  4965  0E65  319F  27B2  318E   	fcall	_ClearString
  4966                           
  4967                           ;main.c: 894:             char convertedNumber[16] = {'\0'};
  4968  0E68  3020               	movlw	low main@convertedNumber
  4969  0E69  0086               	movwf	6
  4970  0E6A  3001               	movlw	high main@convertedNumber
  4971  0E6B  0087               	movwf	7
  4972  0E6C  3010               	movlw	16
  4973  0E6D  0020               	movlb	0	; select bank0
  4974  0E6E  00EB               	movwf	??_main
  4975  0E6F  3000               	movlw	0
  4976  0E70                     u3660:	
  4977  0E70  001E               	movwi fsr1++
  4978  0E71  0BEB               	decfsz	??_main,f
  4979  0E72  2E70               	goto	u3660
  4980                           
  4981                           ;main.c: 896:             IntToString(sensor_data.temperature, convertedNumber);
  4982  0E73  0022               	movlb	2	; select bank2
  4983  0E74  0835               	movf	((main@sensor_data+1)^(0+256)+4),w
  4984  0E75  0020               	movlb	0	; select bank0
  4985  0E76  00B4               	movwf	IntToString@n+1
  4986  0E77  0022               	movlb	2	; select bank2
  4987  0E78  0834               	movf	(main@sensor_data^(0+256)+4),w
  4988  0E79  0020               	movlb	0	; select bank0
  4989  0E7A  00B3               	movwf	IntToString@n
  4990  0E7B  3020               	movlw	low main@convertedNumber
  4991  0E7C  00B5               	movwf	IntToString@dest
  4992  0E7D  3001               	movlw	high main@convertedNumber
  4993  0E7E  00B6               	movwf	IntToString@dest+1
  4994  0E7F  3196  2698  318E   	fcall	_IntToString
  4995                           
  4996                           ;main.c: 897:             int index = strlen(messages[1]);
  4997  0E82  0021               	movlb	1	; select bank1
  4998  0E83  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  4999  0E84  00F4               	movwf	strlen@s
  5000  0E85  3003               	movlw	3
  5001  0E86  00F5               	movwf	strlen@s+1
  5002  0E87  319F  270F  318E   	fcall	_strlen
  5003  0E8A  0875               	movf	?_strlen+1,w
  5004  0E8B  0021               	movlb	1	; select bank1
  5005  0E8C  00E9               	movwf	(main@index+1)^(0+128)
  5006  0E8D  0874               	movf	?_strlen,w
  5007  0E8E  00E8               	movwf	main@index^(0+128)
  5008                           
  5009                           ;main.c: 898:             index = InsertString(messages[1], convertedNumber, index, 70);
  5010  0E8F  3020               	movlw	low main@convertedNumber
  5011  0E90  0020               	movlb	0	; select bank0
  5012  0E91  00A5               	movwf	InsertString@src
  5013  0E92  3001               	movlw	high main@convertedNumber
  5014  0E93  00A6               	movwf	InsertString@src+1
  5015  0E94  0021               	movlb	1	; select bank1
  5016  0E95  0869               	movf	(main@index+1)^(0+128),w
  5017  0E96  0020               	movlb	0	; select bank0
  5018  0E97  00A8               	movwf	InsertString@index+1
  5019  0E98  0021               	movlb	1	; select bank1
  5020  0E99  0868               	movf	main@index^(0+128),w
  5021  0E9A  0020               	movlb	0	; select bank0
  5022  0E9B  00A7               	movwf	InsertString@index
  5023  0E9C  3046               	movlw	70
  5024  0E9D  00A9               	movwf	InsertString@destLimit
  5025  0E9E  3000               	movlw	0
  5026  0E9F  00AA               	movwf	InsertString@destLimit+1
  5027  0EA0  0021               	movlb	1	; select bank1
  5028  0EA1  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  5029  0EA2  3193  235B  318E   	fcall	_InsertString
  5030  0EA5  0826               	movf	?_InsertString+1,w
  5031  0EA6  0021               	movlb	1	; select bank1
  5032  0EA7  00E9               	movwf	(main@index+1)^(0+128)
  5033  0EA8  0020               	movlb	0	; select bank0
  5034  0EA9  0825               	movf	?_InsertString,w
  5035  0EAA  0021               	movlb	1	; select bank1
  5036  0EAB  00E8               	movwf	main@index^(0+128)
  5037                           
  5038                           ;main.c: 899:             index = Insert(messages[1], ',', index, 70);
  5039  0EAC  302C               	movlw	44
  5040  0EAD  0020               	movlb	0	; select bank0
  5041  0EAE  00EB               	movwf	??_main
  5042  0EAF  086B               	movf	??_main,w
  5043  0EB0  00F4               	movwf	Insert@src
  5044  0EB1  0021               	movlb	1	; select bank1
  5045  0EB2  0869               	movf	(main@index+1)^(0+128),w
  5046  0EB3  00F6               	movwf	Insert@index+1
  5047  0EB4  0868               	movf	main@index^(0+128),w
  5048  0EB5  00F5               	movwf	Insert@index
  5049  0EB6  3046               	movlw	70
  5050  0EB7  00F7               	movwf	Insert@destLimit
  5051  0EB8  3000               	movlw	0
  5052  0EB9  00F8               	movwf	Insert@destLimit+1
  5053  0EBA  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  5054  0EBB  3195  25C1  318E   	fcall	_Insert
  5055  0EBE  0875               	movf	?_Insert+1,w
  5056  0EBF  0021               	movlb	1	; select bank1
  5057  0EC0  00E9               	movwf	(main@index+1)^(0+128)
  5058  0EC1  0874               	movf	?_Insert,w
  5059  0EC2  00E8               	movwf	main@index^(0+128)
  5060                           
  5061                           ;main.c: 900:             ClearString(convertedNumber);
  5062  0EC3  3020               	movlw	low main@convertedNumber
  5063  0EC4  0020               	movlb	0	; select bank0
  5064  0EC5  00A0               	movwf	ClearString@str
  5065  0EC6  3001               	movlw	high main@convertedNumber
  5066  0EC7  00A1               	movwf	ClearString@str+1
  5067  0EC8  319F  27B2  318E   	fcall	_ClearString
  5068                           
  5069                           ;main.c: 901:             IntToString(sensor_data.pressure, convertedNumber);
  5070  0ECB  0022               	movlb	2	; select bank2
  5071  0ECC  0831               	movf	(main@sensor_data+1)^(0+256),w
  5072  0ECD  0020               	movlb	0	; select bank0
  5073  0ECE  00B4               	movwf	IntToString@n+1
  5074  0ECF  0022               	movlb	2	; select bank2
  5075  0ED0  0830               	movf	main@sensor_data^(0+256),w
  5076  0ED1  0020               	movlb	0	; select bank0
  5077  0ED2  00B3               	movwf	IntToString@n
  5078  0ED3  3020               	movlw	low main@convertedNumber
  5079  0ED4  00B5               	movwf	IntToString@dest
  5080  0ED5  3001               	movlw	high main@convertedNumber
  5081  0ED6  00B6               	movwf	IntToString@dest+1
  5082  0ED7  3196  2698  318E   	fcall	_IntToString
  5083                           
  5084                           ;main.c: 902:             index = InsertString(messages[1], convertedNumber, index, 70);
  5085  0EDA  3020               	movlw	low main@convertedNumber
  5086  0EDB  00A5               	movwf	InsertString@src
  5087  0EDC  3001               	movlw	high main@convertedNumber
  5088  0EDD  00A6               	movwf	InsertString@src+1
  5089  0EDE  0021               	movlb	1	; select bank1
  5090  0EDF  0869               	movf	(main@index+1)^(0+128),w
  5091  0EE0  0020               	movlb	0	; select bank0
  5092  0EE1  00A8               	movwf	InsertString@index+1
  5093  0EE2  0021               	movlb	1	; select bank1
  5094  0EE3  0868               	movf	main@index^(0+128),w
  5095  0EE4  0020               	movlb	0	; select bank0
  5096  0EE5  00A7               	movwf	InsertString@index
  5097  0EE6  3046               	movlw	70
  5098  0EE7  00A9               	movwf	InsertString@destLimit
  5099  0EE8  3000               	movlw	0
  5100  0EE9  00AA               	movwf	InsertString@destLimit+1
  5101  0EEA  0021               	movlb	1	; select bank1
  5102  0EEB  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  5103  0EEC  3193  235B  318E   	fcall	_InsertString
  5104  0EEF  0826               	movf	?_InsertString+1,w
  5105  0EF0  0021               	movlb	1	; select bank1
  5106  0EF1  00E9               	movwf	(main@index+1)^(0+128)
  5107  0EF2  0020               	movlb	0	; select bank0
  5108  0EF3  0825               	movf	?_InsertString,w
  5109  0EF4  0021               	movlb	1	; select bank1
  5110  0EF5  00E8               	movwf	main@index^(0+128)
  5111                           
  5112                           ;main.c: 903:             int end = index;
  5113  0EF6  0869               	movf	(main@index+1)^(0+128),w
  5114  0EF7  00E5               	movwf	(main@end+1)^(0+128)
  5115  0EF8  0868               	movf	main@index^(0+128),w
  5116  0EF9  00E4               	movwf	main@end^(0+128)
  5117                           
  5118                           ;main.c: 906:             index = InsertString(messages[0], "TEST,", 0, 70);
  5119  0EFA  30AA               	movlw	low (STR_11| (0+32768))
  5120  0EFB  0020               	movlb	0	; select bank0
  5121  0EFC  00A5               	movwf	InsertString@src
  5122  0EFD  3098               	movlw	high (STR_11| (0+32768))
  5123  0EFE  00A6               	movwf	InsertString@src+1
  5124  0EFF  3000               	movlw	0
  5125  0F00  00A7               	movwf	InsertString@index
  5126  0F01  00A8               	movwf	InsertString@index+1
  5127  0F02  3046               	movlw	70
  5128  0F03  00A9               	movwf	InsertString@destLimit
  5129  0F04  3000               	movlw	0
  5130  0F05  00AA               	movwf	InsertString@destLimit+1
  5131  0F06  0021               	movlb	1	; select bank1
  5132  0F07  086E               	movf	_messages^(0+128),w
  5133  0F08  3193  235B  318E   	fcall	_InsertString
  5134  0F0B  0826               	movf	?_InsertString+1,w
  5135  0F0C  0021               	movlb	1	; select bank1
  5136  0F0D  00E9               	movwf	(main@index+1)^(0+128)
  5137  0F0E  0020               	movlb	0	; select bank0
  5138  0F0F  0825               	movf	?_InsertString,w
  5139  0F10  0021               	movlb	1	; select bank1
  5140  0F11  00E8               	movwf	main@index^(0+128)
  5141                           
  5142                           ;main.c: 907:             ClearString(convertedNumber);
  5143  0F12  3020               	movlw	low main@convertedNumber
  5144  0F13  0020               	movlb	0	; select bank0
  5145  0F14  00A0               	movwf	ClearString@str
  5146  0F15  3001               	movlw	high main@convertedNumber
  5147  0F16  00A1               	movwf	ClearString@str+1
  5148  0F17  319F  27B2  318E   	fcall	_ClearString
  5149                           
  5150                           ;main.c: 908:             IntToString(id, convertedNumber);
  5151  0F1A  0023               	movlb	3	; select bank3
  5152  0F1B  0847               	movf	(_id+1)^(0+384),w
  5153  0F1C  0020               	movlb	0	; select bank0
  5154  0F1D  00B4               	movwf	IntToString@n+1
  5155  0F1E  0023               	movlb	3	; select bank3
  5156  0F1F  0846               	movf	_id^(0+384),w
  5157  0F20  0020               	movlb	0	; select bank0
  5158  0F21  00B3               	movwf	IntToString@n
  5159  0F22  3020               	movlw	low main@convertedNumber
  5160  0F23  00B5               	movwf	IntToString@dest
  5161  0F24  3001               	movlw	high main@convertedNumber
  5162  0F25  00B6               	movwf	IntToString@dest+1
  5163  0F26  3196  2698  318E   	fcall	_IntToString
  5164                           
  5165                           ;main.c: 909:             index = InsertString(messages[0], convertedNumber, index, 70);
  5166  0F29  3020               	movlw	low main@convertedNumber
  5167  0F2A  00A5               	movwf	InsertString@src
  5168  0F2B  3001               	movlw	high main@convertedNumber
  5169  0F2C  00A6               	movwf	InsertString@src+1
  5170  0F2D  0021               	movlb	1	; select bank1
  5171  0F2E  0869               	movf	(main@index+1)^(0+128),w
  5172  0F2F  0020               	movlb	0	; select bank0
  5173  0F30  00A8               	movwf	InsertString@index+1
  5174  0F31  0021               	movlb	1	; select bank1
  5175  0F32  0868               	movf	main@index^(0+128),w
  5176  0F33  0020               	movlb	0	; select bank0
  5177  0F34  00A7               	movwf	InsertString@index
  5178  0F35  3046               	movlw	70
  5179  0F36  00A9               	movwf	InsertString@destLimit
  5180  0F37  3000               	movlw	0
  5181  0F38  00AA               	movwf	InsertString@destLimit+1
  5182  0F39  0021               	movlb	1	; select bank1
  5183  0F3A  086E               	movf	_messages^(0+128),w
  5184  0F3B  3193  235B  318E   	fcall	_InsertString
  5185  0F3E  0826               	movf	?_InsertString+1,w
  5186  0F3F  0021               	movlb	1	; select bank1
  5187  0F40  00E9               	movwf	(main@index+1)^(0+128)
  5188  0F41  0020               	movlb	0	; select bank0
  5189  0F42  0825               	movf	?_InsertString,w
  5190  0F43  0021               	movlb	1	; select bank1
  5191  0F44  00E8               	movwf	main@index^(0+128)
  5192                           
  5193                           ;main.c: 910:             Insert(messages[0], ',', index, 70);
  5194  0F45  302C               	movlw	44
  5195  0F46  0020               	movlb	0	; select bank0
  5196  0F47  00EB               	movwf	??_main
  5197  0F48  086B               	movf	??_main,w
  5198  0F49  00F4               	movwf	Insert@src
  5199  0F4A  0021               	movlb	1	; select bank1
  5200  0F4B  0869               	movf	(main@index+1)^(0+128),w
  5201  0F4C  00F6               	movwf	Insert@index+1
  5202  0F4D  0868               	movf	main@index^(0+128),w
  5203  0F4E  00F5               	movwf	Insert@index
  5204  0F4F  3046               	movlw	70
  5205  0F50  00F7               	movwf	Insert@destLimit
  5206  0F51  3000               	movlw	0
  5207  0F52  00F8               	movwf	Insert@destLimit+1
  5208  0F53  086E               	movf	_messages^(0+128),w
  5209  0F54  3195  25C1  318E   	fcall	_Insert
  5210                           
  5211                           ;main.c: 912:             UIntToHexString(crc16(messages, 2), checksum);
  5212  0F57  3002               	movlw	2
  5213  0F58  0020               	movlb	0	; select bank0
  5214  0F59  00A9               	movwf	crc16@segments
  5215  0F5A  3000               	movlw	0
  5216  0F5B  00AA               	movwf	crc16@segments+1
  5217  0F5C  30EE               	movlw	(low (_messages| 0))& (0+255)
  5218  0F5D  3192  228B  318E   	fcall	_crc16
  5219  0F60  0829               	movf	?_crc16,w
  5220  0F61  00EB               	movwf	??_main
  5221  0F62  082A               	movf	?_crc16+1,w
  5222  0F63  00EC               	movwf	??_main+1
  5223  0F64  01ED               	clrf	??_main+2
  5224  0F65  01EE               	clrf	??_main+3
  5225  0F66  086E               	movf	??_main+3,w
  5226  0F67  00B6               	movwf	UIntToHexString@n+3
  5227  0F68  086D               	movf	??_main+2,w
  5228  0F69  00B5               	movwf	UIntToHexString@n+2
  5229  0F6A  086C               	movf	??_main+1,w
  5230  0F6B  00B4               	movwf	UIntToHexString@n+1
  5231  0F6C  086B               	movf	??_main,w
  5232  0F6D  00B3               	movwf	UIntToHexString@n
  5233  0F6E  30CF               	movlw	(low (_checksum| (0+256)))& (0+255)
  5234  0F6F  00EF               	movwf	??_main+4
  5235  0F70  086F               	movf	??_main+4,w
  5236  0F71  00B7               	movwf	UIntToHexString@dest
  5237  0F72  3197  2705  318E   	fcall	_UIntToHexString
  5238                           
  5239                           ;main.c: 915:             InsertString(messages[0], "$$", 0, 70);
  5240  0F75  30BA               	movlw	low (STR_12| (0+32768))
  5241  0F76  00A5               	movwf	InsertString@src
  5242  0F77  3098               	movlw	high (STR_12| (0+32768))
  5243  0F78  00A6               	movwf	InsertString@src+1
  5244  0F79  3000               	movlw	0
  5245  0F7A  00A7               	movwf	InsertString@index
  5246  0F7B  00A8               	movwf	InsertString@index+1
  5247  0F7C  3046               	movlw	70
  5248  0F7D  00A9               	movwf	InsertString@destLimit
  5249  0F7E  3000               	movlw	0
  5250  0F7F  00AA               	movwf	InsertString@destLimit+1
  5251  0F80  0021               	movlb	1	; select bank1
  5252  0F81  086E               	movf	_messages^(0+128),w
  5253  0F82  3193  235B  318E   	fcall	_InsertString
  5254                           
  5255                           ;main.c: 917:             index = Insert(messages[1], '*', end, 70);
  5256  0F85  302A               	movlw	42
  5257  0F86  00EB               	movwf	??_main
  5258  0F87  086B               	movf	??_main,w
  5259  0F88  00F4               	movwf	Insert@src
  5260  0F89  0021               	movlb	1	; select bank1
  5261  0F8A  0865               	movf	(main@end+1)^(0+128),w
  5262  0F8B  00F6               	movwf	Insert@index+1
  5263  0F8C  0864               	movf	main@end^(0+128),w
  5264  0F8D  00F5               	movwf	Insert@index
  5265  0F8E  3046               	movlw	70
  5266  0F8F  00F7               	movwf	Insert@destLimit
  5267  0F90  3000               	movlw	0
  5268  0F91  00F8               	movwf	Insert@destLimit+1
  5269  0F92  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  5270  0F93  3195  25C1  318E   	fcall	_Insert
  5271  0F96  0875               	movf	?_Insert+1,w
  5272  0F97  0021               	movlb	1	; select bank1
  5273  0F98  00E9               	movwf	(main@index+1)^(0+128)
  5274  0F99  0874               	movf	?_Insert,w
  5275  0F9A  00E8               	movwf	main@index^(0+128)
  5276                           
  5277                           ;main.c: 918:             index = InsertString(messages[1], checksum, index, 70);
  5278  0F9B  30CF               	movlw	low _checksum
  5279  0F9C  0020               	movlb	0	; select bank0
  5280  0F9D  00A5               	movwf	InsertString@src
  5281  0F9E  3001               	movlw	high _checksum
  5282  0F9F  00A6               	movwf	InsertString@src+1
  5283  0FA0  0021               	movlb	1	; select bank1
  5284  0FA1  0869               	movf	(main@index+1)^(0+128),w
  5285  0FA2  0020               	movlb	0	; select bank0
  5286  0FA3  00A8               	movwf	InsertString@index+1
  5287  0FA4  0021               	movlb	1	; select bank1
  5288  0FA5  0868               	movf	main@index^(0+128),w
  5289  0FA6  0020               	movlb	0	; select bank0
  5290  0FA7  00A7               	movwf	InsertString@index
  5291  0FA8  3046               	movlw	70
  5292  0FA9  00A9               	movwf	InsertString@destLimit
  5293  0FAA  3000               	movlw	0
  5294  0FAB  00AA               	movwf	InsertString@destLimit+1
  5295  0FAC  0021               	movlb	1	; select bank1
  5296  0FAD  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  5297  0FAE  3193  235B  318E   	fcall	_InsertString
  5298  0FB1  0826               	movf	?_InsertString+1,w
  5299  0FB2  0021               	movlb	1	; select bank1
  5300  0FB3  00E9               	movwf	(main@index+1)^(0+128)
  5301  0FB4  0020               	movlb	0	; select bank0
  5302  0FB5  0825               	movf	?_InsertString,w
  5303  0FB6  0021               	movlb	1	; select bank1
  5304  0FB7  00E8               	movwf	main@index^(0+128)
  5305                           
  5306                           ;main.c: 919:             index = Insert(messages[1], '\n', index, 70);
  5307  0FB8  300A               	movlw	10
  5308  0FB9  0020               	movlb	0	; select bank0
  5309  0FBA  00EB               	movwf	??_main
  5310  0FBB  086B               	movf	??_main,w
  5311  0FBC  00F4               	movwf	Insert@src
  5312  0FBD  0021               	movlb	1	; select bank1
  5313  0FBE  0869               	movf	(main@index+1)^(0+128),w
  5314  0FBF  00F6               	movwf	Insert@index+1
  5315  0FC0  0868               	movf	main@index^(0+128),w
  5316  0FC1  00F5               	movwf	Insert@index
  5317  0FC2  3046               	movlw	70
  5318  0FC3  00F7               	movwf	Insert@destLimit
  5319  0FC4  3000               	movlw	0
  5320  0FC5  00F8               	movwf	Insert@destLimit+1
  5321  0FC6  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  5322  0FC7  3195  25C1  318E   	fcall	_Insert
  5323  0FCA  0875               	movf	?_Insert+1,w
  5324  0FCB  0021               	movlb	1	; select bank1
  5325  0FCC  00E9               	movwf	(main@index+1)^(0+128)
  5326  0FCD  0874               	movf	?_Insert,w
  5327  0FCE  00E8               	movwf	main@index^(0+128)
  5328                           
  5329                           ;main.c: 921:             id++;
  5330  0FCF  3001               	movlw	1
  5331  0FD0  0023               	movlb	3	; select bank3
  5332  0FD1  07C6               	addwf	_id^(0+384),f
  5333  0FD2  3000               	movlw	0
  5334  0FD3  3DC7               	addwfc	(_id+1)^(0+384),f
  5335  0FD4  0022               	movlb	2	; select bank2
  5336  0FD5  150C               	bsf	12,2	;volatile
  5337                           
  5338                           ;main.c: 924:             TransmitString(messages[0]);
  5339  0FD6  0021               	movlb	1	; select bank1
  5340  0FD7  086E               	movf	_messages^(0+128),w
  5341  0FD8  3191  2114  318E   	fcall	_TransmitString
  5342                           
  5343                           ;main.c: 925:             TransmitString(messages[1]);
  5344  0FDB  0021               	movlb	1	; select bank1
  5345  0FDC  086F               	movf	(low ((_messages| 0+1)))^(0+128),w
  5346  0FDD  3191  2114  318E   	fcall	_TransmitString
  5347  0FE0  0022               	movlb	2	; select bank2
  5348  0FE1  110C               	bcf	12,2	;volatile
  5349                           
  5350                           ;main.c: 936:         for (int i = 0; i < 1000; i++)
  5351  0FE2  0021               	movlb	1	; select bank1
  5352  0FE3  01E6               	clrf	main@i^(0+128)
  5353  0FE4  01E7               	clrf	(main@i+1)^(0+128)
  5354  0FE5                     l4079:	
  5355                           
  5356                           ;main.c: 937:         {;main.c: 938:             _delay((unsigned long)((5)*(4000000/400
      +                          0.0)));
  5357  0FE5  3007               	movlw	7
  5358  0FE6  0020               	movlb	0	; select bank0
  5359  0FE7  00EB               	movwf	??_main
  5360  0FE8  307D               	movlw	125
  5361  0FE9                     u3687:	
  5362  0FE9  0B89               	decfsz	9,f
  5363  0FEA  2FE9               	goto	u3687
  5364  0FEB  0BEB               	decfsz	??_main,f
  5365  0FEC  2FE9               	goto	u3687
  5366                           
  5367                           ;main.c: 939:         }
  5368  0FED  3001               	movlw	1
  5369  0FEE  0021               	movlb	1	; select bank1
  5370  0FEF  07E6               	addwf	main@i^(0+128),f
  5371  0FF0  3000               	movlw	0
  5372  0FF1  3DE7               	addwfc	(main@i+1)^(0+128),f
  5373  0FF2  0867               	movf	(main@i+1)^(0+128),w
  5374  0FF3  3A80               	xorlw	128
  5375  0FF4  0020               	movlb	0	; select bank0
  5376  0FF5  00EB               	movwf	??_main
  5377  0FF6  3083               	movlw	131
  5378  0FF7  026B               	subwf	??_main,w
  5379  0FF8  1D03               	skipz
  5380  0FF9  2FFD               	goto	u3675
  5381  0FFA  30E8               	movlw	232
  5382  0FFB  0021               	movlb	1	; select bank1
  5383  0FFC  0266               	subwf	main@i^(0+128),w
  5384  0FFD                     u3675:	
  5385  0FFD  1803               	btfsc	3,0
  5386  0FFE  2E49               	goto	l4017
  5387  0FFF  2FE5               	goto	l4079
  5388  1000                     __end_of_main:	
  5389                           
  5390                           	psect	text1
  5391  128B                     __ptext1:	
  5392 ;; *************** function _crc16 *****************
  5393 ;; Defined at:
  5394 ;;		line 315 in file "main.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;  data            1    wreg     PTR PTR unsigned char 
  5397 ;;		 -> messages(2), 
  5398 ;;  segments        2    9[BANK0 ] int 
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;  data            1   15[BANK0 ] PTR PTR unsigned char 
  5401 ;;		 -> messages(2), 
  5402 ;;  i               2   16[BANK0 ] int 
  5403 ;;  crc             2   13[BANK0 ] unsigned short 
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  2    9[BANK0 ] unsigned short 
  5406 ;; Registers used:
  5407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5408 ;; Tracked objects:
  5409 ;;		On entry : 1F/0
  5410 ;;		On exit  : 1F/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5413 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;Total ram usage:        9 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    4
  5420 ;; This function calls:
  5421 ;;		_crc16_update
  5422 ;;		_strlen
  5423 ;; This function is called by:
  5424 ;;		_main
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           
  5429                           ;psect for function _crc16
  5430  128B                     _crc16:	
  5431                           
  5432                           ;incstack = 0
  5433                           ; Regs used in _crc16: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5434                           ;crc16@data stored from wreg
  5435  128B  00AF               	movwf	crc16@data
  5436                           
  5437                           ;main.c: 315: uint16_t crc16(char** data, int segments);main.c: 316: {;main.c: 317:     
      +                          uint16_t crc = 0xFFFF;
  5438  128C  30FF               	movlw	255
  5439  128D  00AD               	movwf	crc16@crc
  5440  128E  30FF               	movlw	255
  5441  128F  00AE               	movwf	crc16@crc+1
  5442                           
  5443                           ;main.c: 318:     for (int i = 0; i < segments; i++)
  5444  1290  01B0               	clrf	crc16@i
  5445  1291  01B1               	clrf	crc16@i+1
  5446  1292                     l3771:	
  5447  1292  0831               	movf	crc16@i+1,w
  5448  1293  3A80               	xorlw	128
  5449  1294  00AB               	movwf	??_crc16
  5450  1295  082A               	movf	crc16@segments+1,w
  5451  1296  3A80               	xorlw	128
  5452  1297  022B               	subwf	??_crc16,w
  5453  1298  1D03               	skipz
  5454  1299  2A9C               	goto	u3445
  5455  129A  0829               	movf	crc16@segments,w
  5456  129B  0230               	subwf	crc16@i,w
  5457  129C                     u3445:	
  5458  129C  1803               	btfsc	3,0
  5459  129D  2AC8               	goto	l3773
  5460                           
  5461                           ;main.c: 319:     {;main.c: 320:         crc = crc16_update(data[i], strlen(data[i]), cr
      +                          c);
  5462  129E  0020               	movlb	0	; select bank0
  5463  129F  0830               	movf	crc16@i,w
  5464  12A0  072F               	addwf	crc16@data,w
  5465  12A1  00AB               	movwf	??_crc16
  5466  12A2  082B               	movf	??_crc16,w
  5467  12A3  0086               	movwf	6
  5468  12A4  0187               	clrf	7
  5469  12A5  0801               	movf	1,w
  5470  12A6  00F4               	movwf	strlen@s
  5471  12A7  3003               	movlw	3
  5472  12A8  00F5               	movwf	strlen@s+1
  5473  12A9  319F  270F  3192   	fcall	_strlen
  5474  12AC  0875               	movf	?_strlen+1,w
  5475  12AD  0020               	movlb	0	; select bank0
  5476  12AE  00A1               	movwf	crc16_update@length+1
  5477  12AF  0874               	movf	?_strlen,w
  5478  12B0  00A0               	movwf	crc16_update@length
  5479  12B1  082E               	movf	crc16@crc+1,w
  5480  12B2  00A3               	movwf	crc16_update@wCrc+1
  5481  12B3  082D               	movf	crc16@crc,w
  5482  12B4  00A2               	movwf	crc16_update@wCrc
  5483  12B5  0830               	movf	crc16@i,w
  5484  12B6  072F               	addwf	crc16@data,w
  5485  12B7  00AC               	movwf	??_crc16+1
  5486  12B8  082C               	movf	??_crc16+1,w
  5487  12B9  0086               	movwf	6
  5488  12BA  0187               	clrf	7
  5489  12BB  0801               	movf	1,w
  5490  12BC  3192  220C  3192   	fcall	_crc16_update
  5491  12BF  0821               	movf	?_crc16_update+1,w
  5492  12C0  00AE               	movwf	crc16@crc+1
  5493  12C1  0820               	movf	?_crc16_update,w
  5494  12C2  00AD               	movwf	crc16@crc
  5495                           
  5496                           ;main.c: 321:     }
  5497  12C3  3001               	movlw	1
  5498  12C4  07B0               	addwf	crc16@i,f
  5499  12C5  3000               	movlw	0
  5500  12C6  3DB1               	addwfc	crc16@i+1,f
  5501  12C7  2A92               	goto	l3771
  5502  12C8                     l3773:	
  5503                           
  5504                           ;main.c: 322:     return crc & 0xFFFF;
  5505  12C8  0020               	movlb	0	; select bank0
  5506  12C9  082E               	movf	crc16@crc+1,w
  5507  12CA  00AA               	movwf	?_crc16+1
  5508  12CB  082D               	movf	crc16@crc,w
  5509  12CC  00A9               	movwf	?_crc16
  5510  12CD  0008               	return
  5511  12CE                     __end_of_crc16:	
  5512                           
  5513                           	psect	text2
  5514  120C                     __ptext2:	
  5515 ;; *************** function _crc16_update *****************
  5516 ;; Defined at:
  5517 ;;		line 304 in file "main.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  pData           1    wreg     PTR unsigned char 
  5520 ;;		 -> message_end(73), message_start(70), 
  5521 ;;  length          2    0[BANK0 ] int 
  5522 ;;  wCrc            2    2[BANK0 ] unsigned short 
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;  pData           1    7[BANK0 ] PTR unsigned char 
  5525 ;;		 -> message_end(73), message_start(70), 
  5526 ;;  i               1    8[BANK0 ] unsigned char 
  5527 ;; Return value:  Size  Location     Type
  5528 ;;                  2    0[BANK0 ] unsigned short 
  5529 ;; Registers used:
  5530 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5531 ;; Tracked objects:
  5532 ;;		On entry : 1F/0
  5533 ;;		On exit  : 1F/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5536 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5537 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5538 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;Total ram usage:        9 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:    3
  5543 ;; This function calls:
  5544 ;;		Nothing
  5545 ;; This function is called by:
  5546 ;;		_crc16
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           
  5551                           ;psect for function _crc16_update
  5552  120C                     _crc16_update:	
  5553                           
  5554                           ;incstack = 0
  5555                           ; Regs used in _crc16_update: [wreg+fsr1l+fsr1h+status,2+status,0]
  5556                           ;crc16_update@pData stored from wreg
  5557  120C  00A7               	movwf	crc16_update@pData
  5558  120D                     l3421:	
  5559                           ;main.c: 304: uint16_t crc16_update(char* pData, int length, uint16_t wCrc);main.c: 305:
      +                           {;main.c: 306:     uint8_t i;;main.c: 307:     while (length--) {
  5560                           
  5561                           
  5562                           ;main.c: 307:     while (length--) {
  5563  120D  30FF               	movlw	255
  5564  120E  07A0               	addwf	crc16_update@length,f
  5565  120F  30FF               	movlw	255
  5566  1210  3DA1               	addwfc	crc16_update@length+1,f
  5567  1211  0A20               	incf	crc16_update@length,w
  5568  1212  1903               	btfsc	3,2
  5569  1213  0A21               	incf	crc16_update@length+1,w
  5570  1214  1903               	btfsc	3,2
  5571  1215  2A44               	goto	l3423
  5572                           
  5573                           ;main.c: 308:         wCrc ^= *(unsigned char *)pData++ << 8;
  5574  1216  0827               	movf	crc16_update@pData,w
  5575  1217  0086               	movwf	6
  5576  1218  3003               	movlw	3	; select bank6/7
  5577  1219  0087               	movwf	7
  5578  121A  0801               	movf	1,w
  5579  121B  00A4               	movwf	??_crc16_update
  5580  121C  01A5               	clrf	??_crc16_update+1
  5581  121D  0824               	movf	??_crc16_update,w
  5582  121E  00A5               	movwf	??_crc16_update+1
  5583  121F  01A4               	clrf	??_crc16_update
  5584  1220  0824               	movf	??_crc16_update,w
  5585  1221  06A2               	xorwf	crc16_update@wCrc,f
  5586  1222  0825               	movf	??_crc16_update+1,w
  5587  1223  06A3               	xorwf	crc16_update@wCrc+1,f
  5588  1224  3001               	movlw	1
  5589  1225  00A4               	movwf	??_crc16_update
  5590  1226  0824               	movf	??_crc16_update,w
  5591  1227  07A7               	addwf	crc16_update@pData,f
  5592                           
  5593                           ;main.c: 309:         for (i=0; i < 8; i++)
  5594  1228  01A8               	clrf	crc16_update@i
  5595  1229                     l735:	
  5596                           
  5597                           ;main.c: 310:             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
  5598  1229  1BA3               	btfsc	crc16_update@wCrc+1,7
  5599  122A  2A2F               	goto	l3417
  5600  122B  3522               	lslf	crc16_update@wCrc,w
  5601  122C  00A2               	movwf	crc16_update@wCrc
  5602  122D  0D23               	rlf	crc16_update@wCrc+1,w
  5603  122E  2A3A               	goto	L1
  5604  122F                     l3417:	
  5605  122F  0823               	movf	crc16_update@wCrc+1,w
  5606  1230  00A5               	movwf	??_crc16_update+1
  5607  1231  0822               	movf	crc16_update@wCrc,w
  5608  1232  00A4               	movwf	??_crc16_update
  5609  1233  35A4               	lslf	??_crc16_update,f
  5610  1234  0DA5               	rlf	??_crc16_update+1,f
  5611  1235  3021               	movlw	33
  5612  1236  0624               	xorwf	??_crc16_update,w
  5613  1237  00A2               	movwf	crc16_update@wCrc
  5614  1238  3010               	movlw	16
  5615  1239  0625               	xorwf	??_crc16_update+1,w
  5616  123A                     L1:	
  5617  123A  00A3               	movwf	crc16_update@wCrc+1
  5618  123B  3001               	movlw	1
  5619  123C  00A4               	movwf	??_crc16_update
  5620  123D  0824               	movf	??_crc16_update,w
  5621  123E  07A8               	addwf	crc16_update@i,f
  5622  123F  3008               	movlw	8
  5623  1240  0228               	subwf	crc16_update@i,w
  5624  1241  1803               	btfsc	3,0
  5625  1242  2A0D               	goto	l3421
  5626  1243  2A29               	goto	l735
  5627  1244                     l3423:	
  5628                           
  5629                           ;main.c: 312:     return wCrc;
  5630  1244  0823               	movf	crc16_update@wCrc+1,w
  5631  1245  00A1               	movwf	?_crc16_update+1
  5632  1246  0822               	movf	crc16_update@wCrc,w
  5633  1247  00A0               	movwf	?_crc16_update
  5634  1248  0008               	return
  5635  1249                     __end_of_crc16_update:	
  5636                           
  5637                           	psect	text3
  5638  155B                     __ptext3:	
  5639 ;; *************** function _bme280_init *****************
  5640 ;; Defined at:
  5641 ;;		line 357 in file "BME280_driver/bme280.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;  dev             1    wreg     PTR struct bme280_dev
  5644 ;;		 -> main@env_sensor(51), 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;  dev             1   74[BANK0 ] PTR struct bme280_dev
  5647 ;;		 -> main@env_sensor(51), 
  5648 ;;  rslt            1   73[BANK0 ] char 
  5649 ;;  chip_id         1   72[BANK0 ] unsigned char 
  5650 ;;  try_count       1   71[BANK0 ] unsigned char 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  1    wreg      char 
  5653 ;; Registers used:
  5654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/2
  5657 ;;		On exit  : 1F/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;Total ram usage:        7 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    9
  5667 ;; This function calls:
  5668 ;;		_Sleep
  5669 ;;		_bme280_get_regs
  5670 ;;		_bme280_soft_reset
  5671 ;;		_get_calib_data
  5672 ;;		_null_ptr_check
  5673 ;; This function is called by:
  5674 ;;		_main
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           
  5679                           ;psect for function _bme280_init
  5680  155B                     _bme280_init:	
  5681                           
  5682                           ;incstack = 0
  5683                           ; Regs used in _bme280_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5684                           ;bme280_init@dev stored from wreg
  5685  155B  0020               	movlb	0	; select bank0
  5686  155C  00EA               	movwf	bme280_init@dev
  5687                           
  5688                           ;BME280_driver/bme280.c: 357: int8_t bme280_init(struct bme280_dev *dev);BME280_driver/b
      +                          me280.c: 358: {;BME280_driver/bme280.c: 359:     int8_t rslt;;BME280_driver/bme280.c: 36
      +                          2:     uint8_t try_count = 5;
  5689  155D  3005               	movlw	5
  5690  155E  00E4               	movwf	??_bme280_init
  5691  155F  0864               	movf	??_bme280_init,w
  5692  1560  00E7               	movwf	bme280_init@try_count
  5693                           
  5694                           ;BME280_driver/bme280.c: 363:     uint8_t chip_id = 0;
  5695  1561  01E8               	clrf	bme280_init@chip_id
  5696                           
  5697                           ;BME280_driver/bme280.c: 366:     rslt = null_ptr_check(dev);
  5698  1562  086A               	movf	bme280_init@dev,w
  5699  1563  319F  278D  3195   	fcall	_null_ptr_check
  5700  1566  00E4               	movwf	??_bme280_init
  5701  1567  0864               	movf	??_bme280_init,w
  5702  1568  00E9               	movwf	bme280_init@rslt
  5703                           
  5704                           ;BME280_driver/bme280.c: 369:     if (rslt == 0)
  5705  1569  0869               	movf	bme280_init@rslt,w
  5706  156A  1903               	btfsc	3,2
  5707  156B  2DB5               	goto	l3509
  5708  156C  2DBF               	goto	l53
  5709  156D                     l3491:	
  5710                           
  5711                           ;BME280_driver/bme280.c: 372:         {;BME280_driver/bme280.c: 374:             rslt = 
      +                          bme280_get_regs(0xD0, &chip_id, 1, dev);
  5712  156D  3068               	movlw	(low (bme280_init@chip_id| 0))& (0+255)
  5713  156E  00E4               	movwf	??_bme280_init
  5714  156F  0864               	movf	??_bme280_init,w
  5715  1570  00BB               	movwf	bme280_get_regs@reg_data
  5716  1571  3001               	movlw	1
  5717  1572  00BC               	movwf	bme280_get_regs@len
  5718  1573  3000               	movlw	0
  5719  1574  00BD               	movwf	bme280_get_regs@len+1
  5720  1575  086A               	movf	bme280_init@dev,w
  5721  1576  00E5               	movwf	??_bme280_init+1
  5722  1577  0865               	movf	??_bme280_init+1,w
  5723  1578  00BE               	movwf	bme280_get_regs@dev
  5724  1579  30D0               	movlw	208
  5725  157A  3192  2249  3195   	fcall	_bme280_get_regs
  5726  157D  00E6               	movwf	??_bme280_init+2
  5727  157E  0866               	movf	??_bme280_init+2,w
  5728  157F  00E9               	movwf	bme280_init@rslt
  5729                           
  5730                           ;BME280_driver/bme280.c: 377:             if ((rslt == 0) && (chip_id == 0x60))
  5731  1580  0869               	movf	bme280_init@rslt,w
  5732  1581  1D03               	btfss	3,2
  5733  1582  2DA1               	goto	l3505
  5734  1583  3060               	movlw	96
  5735  1584  0668               	xorwf	bme280_init@chip_id,w
  5736  1585  1D03               	btfss	3,2
  5737  1586  2DA1               	goto	l3505
  5738                           
  5739                           ;BME280_driver/bme280.c: 378:             {;BME280_driver/bme280.c: 379:                
      +                           dev->chip_id = chip_id;
  5740  1587  0868               	movf	bme280_init@chip_id,w
  5741  1588  00E4               	movwf	??_bme280_init
  5742  1589  086A               	movf	bme280_init@dev,w
  5743  158A  0086               	movwf	6
  5744  158B  3001               	movlw	1	; select bank2/3
  5745  158C  0087               	movwf	7
  5746  158D  0864               	movf	??_bme280_init,w
  5747  158E  0081               	movwf	1
  5748                           
  5749                           ;BME280_driver/bme280.c: 382:                 rslt = bme280_soft_reset(dev);
  5750  158F  086A               	movf	bme280_init@dev,w
  5751  1590  3191  21D4  3195   	fcall	_bme280_soft_reset
  5752  1593  00E4               	movwf	??_bme280_init
  5753  1594  0864               	movf	??_bme280_init,w
  5754  1595  00E9               	movwf	bme280_init@rslt
  5755                           
  5756                           ;BME280_driver/bme280.c: 383:                 if (rslt == 0)
  5757  1596  0869               	movf	bme280_init@rslt,w
  5758  1597  1D03               	btfss	3,2
  5759  1598  2DB8               	goto	l3511
  5760                           
  5761                           ;BME280_driver/bme280.c: 384:                 {;BME280_driver/bme280.c: 386:            
      +                                   rslt = get_calib_data(dev);
  5762  1599  086A               	movf	bme280_init@dev,w
  5763  159A  3193  2313  3195   	fcall	_get_calib_data
  5764  159D  00E4               	movwf	??_bme280_init
  5765  159E  0864               	movf	??_bme280_init,w
  5766  159F  00E9               	movwf	bme280_init@rslt
  5767  15A0  2DB8               	goto	l3511
  5768  15A1                     l3505:	
  5769                           
  5770                           ;BME280_driver/bme280.c: 392:             dev->delay_ms(1);
  5771  15A1  3000               	movlw	0
  5772  15A2  00F7               	movwf	Sleep@ms+3
  5773  15A3  3000               	movlw	0
  5774  15A4  00F6               	movwf	Sleep@ms+2
  5775  15A5  3000               	movlw	0
  5776  15A6  00F5               	movwf	Sleep@ms+1
  5777  15A7  3001               	movlw	1
  5778  15A8  00F4               	movwf	Sleep@ms
  5779  15A9  086A               	movf	bme280_init@dev,w
  5780  15AA  3E07               	addlw	7
  5781  15AB  0086               	movwf	6
  5782  15AC  3001               	movlw	1	; select bank2/3
  5783  15AD  0087               	movwf	7
  5784  15AE  3F41               	moviw [1]fsr1
  5785  15AF  008A               	movwf	10
  5786  15B0  3F40               	moviw [0]fsr1
  5787  15B1  000A               	callw
  5788  15B2  3195               	pagesel	$
  5789                           
  5790                           ;BME280_driver/bme280.c: 393:             --try_count;
  5791  15B3  3001               	movlw	1
  5792  15B4  02E7               	subwf	bme280_init@try_count,f
  5793  15B5                     l3509:	
  5794                           
  5795                           ;BME280_driver/bme280.c: 371:         while (try_count)
  5796  15B5  0867               	movf	bme280_init@try_count,w
  5797  15B6  1D03               	btfss	3,2
  5798  15B7  2D6D               	goto	l3491
  5799  15B8                     l3511:	
  5800                           
  5801                           ;BME280_driver/bme280.c: 397:         if (!try_count)
  5802  15B8  0867               	movf	bme280_init@try_count,w
  5803  15B9  1D03               	btfss	3,2
  5804  15BA  2DBF               	goto	l53
  5805                           
  5806                           ;BME280_driver/bme280.c: 398:         {;BME280_driver/bme280.c: 399:             rslt = 
      +                          -2;
  5807  15BB  30FE               	movlw	254
  5808  15BC  00E4               	movwf	??_bme280_init
  5809  15BD  0864               	movf	??_bme280_init,w
  5810  15BE  00E9               	movwf	bme280_init@rslt
  5811  15BF                     l53:	
  5812                           ;BME280_driver/bme280.c: 401:     }
  5813                           
  5814                           
  5815                           ;BME280_driver/bme280.c: 403:     return rslt;
  5816  15BF  0869               	movf	bme280_init@rslt,w
  5817  15C0  0008               	return
  5818  15C1                     __end_of_bme280_init:	
  5819                           
  5820                           	psect	text4
  5821  1313                     __ptext4:	
  5822 ;; *************** function _get_calib_data *****************
  5823 ;; Defined at:
  5824 ;;		line 1305 in file "BME280_driver/bme280.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  dev             1    wreg     PTR struct bme280_dev
  5827 ;;		 -> main@env_sensor(51), 
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  dev             1   67[BANK0 ] PTR struct bme280_dev
  5830 ;;		 -> main@env_sensor(51), 
  5831 ;;  calib_data     26   39[BANK0 ] unsigned char [26]
  5832 ;;  rslt            1   66[BANK0 ] char 
  5833 ;;  reg_addr        1    0        unsigned char 
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      char 
  5836 ;; Registers used:
  5837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : 1F/0
  5840 ;;		On exit  : 1F/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;Total ram usage:       32 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    8
  5850 ;; This function calls:
  5851 ;;		_bme280_get_regs
  5852 ;;		_parse_humidity_calib_data
  5853 ;;		_parse_temp_press_calib_data
  5854 ;; This function is called by:
  5855 ;;		_bme280_init
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           
  5860                           ;psect for function _get_calib_data
  5861  1313                     _get_calib_data:	
  5862                           
  5863                           ;incstack = 0
  5864                           ; Regs used in _get_calib_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5865                           ;get_calib_data@dev stored from wreg
  5866  1313  00E3               	movwf	get_calib_data@dev
  5867                           
  5868                           ;BME280_driver/bme280.c: 1311:     uint8_t calib_data[26] = { 0 };
  5869  1314  3047               	movlw	low get_calib_data@calib_data
  5870  1315  0086               	movwf	6
  5871  1316  3000               	movlw	high get_calib_data@calib_data
  5872  1317  0087               	movwf	7
  5873  1318  301A               	movlw	26
  5874  1319  00C4               	movwf	??_get_calib_data
  5875  131A  3000               	movlw	0
  5876  131B                     u2690:	
  5877  131B  001E               	movwi fsr1++
  5878  131C  0BC4               	decfsz	??_get_calib_data,f
  5879  131D  2B1B               	goto	u2690
  5880                           
  5881                           ;BME280_driver/bme280.c: 1314:     rslt = bme280_get_regs(reg_addr, calib_data, 26, dev)
      +                          ;
  5882  131E  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  5883  131F  00C4               	movwf	??_get_calib_data
  5884  1320  0844               	movf	??_get_calib_data,w
  5885  1321  00BB               	movwf	bme280_get_regs@reg_data
  5886  1322  301A               	movlw	26
  5887  1323  00BC               	movwf	bme280_get_regs@len
  5888  1324  3000               	movlw	0
  5889  1325  00BD               	movwf	bme280_get_regs@len+1
  5890  1326  0863               	movf	get_calib_data@dev,w
  5891  1327  00C5               	movwf	??_get_calib_data+1
  5892  1328  0845               	movf	??_get_calib_data+1,w
  5893  1329  00BE               	movwf	bme280_get_regs@dev
  5894  132A  3088               	movlw	136
  5895  132B  3192  2249  3193   	fcall	_bme280_get_regs
  5896  132E  00C6               	movwf	??_get_calib_data+2
  5897  132F  0846               	movf	??_get_calib_data+2,w
  5898  1330  00E2               	movwf	get_calib_data@rslt
  5899                           
  5900                           ;BME280_driver/bme280.c: 1315:     if (rslt == 0)
  5901  1331  0862               	movf	get_calib_data@rslt,w
  5902  1332  1D03               	btfss	3,2
  5903  1333  2B59               	goto	l3225
  5904                           
  5905                           ;BME280_driver/bme280.c: 1316:     {;BME280_driver/bme280.c: 1320:         parse_temp_pr
      +                          ess_calib_data(calib_data, dev);
  5906  1334  0863               	movf	get_calib_data@dev,w
  5907  1335  00C4               	movwf	??_get_calib_data
  5908  1336  0844               	movf	??_get_calib_data,w
  5909  1337  00F4               	movwf	parse_temp_press_calib_data@dev
  5910  1338  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  5911  1339  318A  22B2  3193   	fcall	_parse_temp_press_calib_data
  5912                           
  5913                           ;BME280_driver/bme280.c: 1324:         rslt = bme280_get_regs(reg_addr, calib_data, 7, d
      +                          ev);
  5914  133C  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  5915  133D  00C4               	movwf	??_get_calib_data
  5916  133E  0844               	movf	??_get_calib_data,w
  5917  133F  00BB               	movwf	bme280_get_regs@reg_data
  5918  1340  3007               	movlw	7
  5919  1341  00BC               	movwf	bme280_get_regs@len
  5920  1342  3000               	movlw	0
  5921  1343  00BD               	movwf	bme280_get_regs@len+1
  5922  1344  0863               	movf	get_calib_data@dev,w
  5923  1345  00C5               	movwf	??_get_calib_data+1
  5924  1346  0845               	movf	??_get_calib_data+1,w
  5925  1347  00BE               	movwf	bme280_get_regs@dev
  5926  1348  30E1               	movlw	225
  5927  1349  3192  2249  3193   	fcall	_bme280_get_regs
  5928  134C  00C6               	movwf	??_get_calib_data+2
  5929  134D  0846               	movf	??_get_calib_data+2,w
  5930  134E  00E2               	movwf	get_calib_data@rslt
  5931                           
  5932                           ;BME280_driver/bme280.c: 1325:         if (rslt == 0)
  5933  134F  0862               	movf	get_calib_data@rslt,w
  5934  1350  1D03               	btfss	3,2
  5935  1351  2B59               	goto	l3225
  5936                           
  5937                           ;BME280_driver/bme280.c: 1326:         {;BME280_driver/bme280.c: 1330:             parse
      +                          _humidity_calib_data(calib_data, dev);
  5938  1352  0863               	movf	get_calib_data@dev,w
  5939  1353  00C4               	movwf	??_get_calib_data
  5940  1354  0844               	movf	??_get_calib_data,w
  5941  1355  00F4               	movwf	parse_humidity_calib_data@dev
  5942  1356  3047               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  5943  1357  3188  2008         	fcall	_parse_humidity_calib_data
  5944  1359                     l3225:	
  5945                           
  5946                           ;BME280_driver/bme280.c: 1334:     return rslt;
  5947  1359  0862               	movf	get_calib_data@rslt,w
  5948  135A  0008               	return
  5949  135B                     __end_of_get_calib_data:	
  5950                           
  5951                           	psect	text5
  5952  0AB2                     __ptext5:	
  5953 ;; *************** function _parse_temp_press_calib_data *****************
  5954 ;; Defined at:
  5955 ;;		line 1356 in file "BME280_driver/bme280.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  reg_data        1    wreg     PTR const unsigned char 
  5958 ;;		 -> get_calib_data@calib_data(26), 
  5959 ;;  dev             1    4[COMMON] PTR struct bme280_dev
  5960 ;;		 -> main@env_sensor(51), 
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  reg_data        1    7[COMMON] PTR const unsigned char 
  5963 ;;		 -> get_calib_data@calib_data(26), 
  5964 ;;  calib_data      1    6[COMMON] PTR struct bme280_calib_
  5965 ;;		 -> env_sensor.calib_data(37), main@env_sensor(51), 
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  1    wreg      void 
  5968 ;; Registers used:
  5969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5970 ;; Tracked objects:
  5971 ;;		On entry : 1F/0
  5972 ;;		On exit  : 1F/0
  5973 ;;		Unchanged: 1F/0
  5974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5975 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;Total ram usage:        4 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    3
  5982 ;; This function calls:
  5983 ;;		Nothing
  5984 ;; This function is called by:
  5985 ;;		_get_calib_data
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           
  5990                           ;psect for function _parse_temp_press_calib_data
  5991  0AB2                     _parse_temp_press_calib_data:	
  5992                           
  5993                           ;incstack = 0
  5994                           ; Regs used in _parse_temp_press_calib_data: [wreg-fsr1h+status,2+status,0]
  5995                           ;parse_temp_press_calib_data@reg_data stored from wreg
  5996  0AB2  00F7               	movwf	parse_temp_press_calib_data@reg_data
  5997                           
  5998                           ;BME280_driver/bme280.c: 1356: static void parse_temp_press_calib_data(const uint8_t *re
      +                          g_data, struct bme280_dev *dev);BME280_driver/bme280.c: 1357: {;BME280_driver/bme280.c: 
      +                          1358:     struct bme280_calib_data *calib_data = &dev->calib_data;
  5999  0AB3  0874               	movf	parse_temp_press_calib_data@dev,w
  6000  0AB4  3E09               	addlw	9
  6001  0AB5  00F5               	movwf	??_parse_temp_press_calib_data
  6002  0AB6  0875               	movf	??_parse_temp_press_calib_data,w
  6003  0AB7  00F6               	movwf	parse_temp_press_calib_data@calib_data
  6004                           
  6005                           ;BME280_driver/bme280.c: 1360:     calib_data->dig_T1 = (((uint16_t)reg_data[1] << 8) | 
      +                          (uint16_t)reg_data[0]);
  6006  0AB8  0A77               	incf	parse_temp_press_calib_data@reg_data,w
  6007  0AB9  0084               	movwf	4
  6008  0ABA  0185               	clrf	5
  6009  0ABB  0800               	movf	0,w
  6010  0ABC  00F5               	movwf	??_parse_temp_press_calib_data
  6011  0ABD  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6012  0ABE  0084               	movwf	4
  6013  0ABF  0185               	clrf	5
  6014  0AC0  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6015  0AC1  0086               	movwf	6
  6016  0AC2  3001               	movlw	1	; select bank2/3
  6017  0AC3  0087               	movwf	7
  6018  0AC4  0800               	movf	0,w
  6019  0AC5  3FC0               	movwi [0]fsr1
  6020  0AC6  0875               	movf	??_parse_temp_press_calib_data,w
  6021  0AC7  3FC1               	movwi [1]fsr1
  6022                           
  6023                           ;BME280_driver/bme280.c: 1361:     calib_data->dig_T2 = (int16_t)(((uint16_t)reg_data[3]
      +                           << 8) | (uint16_t)reg_data[2]);
  6024  0AC8  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6025  0AC9  3E03               	addlw	3
  6026  0ACA  0084               	movwf	4
  6027  0ACB  0185               	clrf	5
  6028  0ACC  0800               	movf	0,w
  6029  0ACD  00F5               	movwf	??_parse_temp_press_calib_data
  6030  0ACE  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6031  0ACF  3E02               	addlw	2
  6032  0AD0  0084               	movwf	4
  6033  0AD1  0185               	clrf	5
  6034  0AD2  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6035  0AD3  3E02               	addlw	2
  6036  0AD4  0086               	movwf	6
  6037  0AD5  3001               	movlw	1	; select bank2/3
  6038  0AD6  0087               	movwf	7
  6039  0AD7  0800               	movf	0,w
  6040  0AD8  3FC0               	movwi [0]fsr1
  6041  0AD9  0875               	movf	??_parse_temp_press_calib_data,w
  6042  0ADA  3FC1               	movwi [1]fsr1
  6043                           
  6044                           ;BME280_driver/bme280.c: 1362:     calib_data->dig_T3 = (int16_t)(((uint16_t)reg_data[5]
      +                           << 8) | (uint16_t)reg_data[4]);
  6045  0ADB  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6046  0ADC  3E05               	addlw	5
  6047  0ADD  0084               	movwf	4
  6048  0ADE  0185               	clrf	5
  6049  0ADF  0800               	movf	0,w
  6050  0AE0  00F5               	movwf	??_parse_temp_press_calib_data
  6051  0AE1  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6052  0AE2  3E04               	addlw	4
  6053  0AE3  0084               	movwf	4
  6054  0AE4  0185               	clrf	5
  6055  0AE5  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6056  0AE6  3E04               	addlw	4
  6057  0AE7  0086               	movwf	6
  6058  0AE8  3001               	movlw	1	; select bank2/3
  6059  0AE9  0087               	movwf	7
  6060  0AEA  0800               	movf	0,w
  6061  0AEB  3FC0               	movwi [0]fsr1
  6062  0AEC  0875               	movf	??_parse_temp_press_calib_data,w
  6063  0AED  3FC1               	movwi [1]fsr1
  6064                           
  6065                           ;BME280_driver/bme280.c: 1363:     calib_data->dig_P1 = (((uint16_t)reg_data[7] << 8) | 
      +                          (uint16_t)reg_data[6]);
  6066  0AEE  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6067  0AEF  3E07               	addlw	7
  6068  0AF0  0084               	movwf	4
  6069  0AF1  0185               	clrf	5
  6070  0AF2  0800               	movf	0,w
  6071  0AF3  00F5               	movwf	??_parse_temp_press_calib_data
  6072  0AF4  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6073  0AF5  3E06               	addlw	6
  6074  0AF6  0084               	movwf	4
  6075  0AF7  0185               	clrf	5
  6076  0AF8  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6077  0AF9  3E06               	addlw	6
  6078  0AFA  0086               	movwf	6
  6079  0AFB  3001               	movlw	1	; select bank2/3
  6080  0AFC  0087               	movwf	7
  6081  0AFD  0800               	movf	0,w
  6082  0AFE  3FC0               	movwi [0]fsr1
  6083  0AFF  0875               	movf	??_parse_temp_press_calib_data,w
  6084  0B00  3FC1               	movwi [1]fsr1
  6085                           
  6086                           ;BME280_driver/bme280.c: 1364:     calib_data->dig_P2 = (int16_t)(((uint16_t)reg_data[9]
      +                           << 8) | (uint16_t)reg_data[8]);
  6087  0B01  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6088  0B02  3E09               	addlw	9
  6089  0B03  0084               	movwf	4
  6090  0B04  0185               	clrf	5
  6091  0B05  0800               	movf	0,w
  6092  0B06  00F5               	movwf	??_parse_temp_press_calib_data
  6093  0B07  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6094  0B08  3E08               	addlw	8
  6095  0B09  0084               	movwf	4
  6096  0B0A  0185               	clrf	5
  6097  0B0B  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6098  0B0C  3E08               	addlw	8
  6099  0B0D  0086               	movwf	6
  6100  0B0E  3001               	movlw	1	; select bank2/3
  6101  0B0F  0087               	movwf	7
  6102  0B10  0800               	movf	0,w
  6103  0B11  3FC0               	movwi [0]fsr1
  6104  0B12  0875               	movf	??_parse_temp_press_calib_data,w
  6105  0B13  3FC1               	movwi [1]fsr1
  6106                           
  6107                           ;BME280_driver/bme280.c: 1365:     calib_data->dig_P3 = (int16_t)(((uint16_t)reg_data[11
      +                          ] << 8) | (uint16_t)reg_data[10]);
  6108  0B14  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6109  0B15  3E0B               	addlw	11
  6110  0B16  0084               	movwf	4
  6111  0B17  0185               	clrf	5
  6112  0B18  0800               	movf	0,w
  6113  0B19  00F5               	movwf	??_parse_temp_press_calib_data
  6114  0B1A  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6115  0B1B  3E0A               	addlw	10
  6116  0B1C  0084               	movwf	4
  6117  0B1D  0185               	clrf	5
  6118  0B1E  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6119  0B1F  3E0A               	addlw	10
  6120  0B20  0086               	movwf	6
  6121  0B21  3001               	movlw	1	; select bank2/3
  6122  0B22  0087               	movwf	7
  6123  0B23  0800               	movf	0,w
  6124  0B24  3FC0               	movwi [0]fsr1
  6125  0B25  0875               	movf	??_parse_temp_press_calib_data,w
  6126  0B26  3FC1               	movwi [1]fsr1
  6127                           
  6128                           ;BME280_driver/bme280.c: 1366:     calib_data->dig_P4 = (int16_t)(((uint16_t)reg_data[13
      +                          ] << 8) | (uint16_t)reg_data[12]);
  6129  0B27  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6130  0B28  3E0D               	addlw	13
  6131  0B29  0084               	movwf	4
  6132  0B2A  0185               	clrf	5
  6133  0B2B  0800               	movf	0,w
  6134  0B2C  00F5               	movwf	??_parse_temp_press_calib_data
  6135  0B2D  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6136  0B2E  3E0C               	addlw	12
  6137  0B2F  0084               	movwf	4
  6138  0B30  0185               	clrf	5
  6139  0B31  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6140  0B32  3E0C               	addlw	12
  6141  0B33  0086               	movwf	6
  6142  0B34  3001               	movlw	1	; select bank2/3
  6143  0B35  0087               	movwf	7
  6144  0B36  0800               	movf	0,w
  6145  0B37  3FC0               	movwi [0]fsr1
  6146  0B38  0875               	movf	??_parse_temp_press_calib_data,w
  6147  0B39  3FC1               	movwi [1]fsr1
  6148                           
  6149                           ;BME280_driver/bme280.c: 1367:     calib_data->dig_P5 = (int16_t)(((uint16_t)reg_data[15
      +                          ] << 8) | (uint16_t)reg_data[14]);
  6150  0B3A  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6151  0B3B  3E0F               	addlw	15
  6152  0B3C  0084               	movwf	4
  6153  0B3D  0185               	clrf	5
  6154  0B3E  0800               	movf	0,w
  6155  0B3F  00F5               	movwf	??_parse_temp_press_calib_data
  6156  0B40  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6157  0B41  3E0E               	addlw	14
  6158  0B42  0084               	movwf	4
  6159  0B43  0185               	clrf	5
  6160  0B44  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6161  0B45  3E0E               	addlw	14
  6162  0B46  0086               	movwf	6
  6163  0B47  3001               	movlw	1	; select bank2/3
  6164  0B48  0087               	movwf	7
  6165  0B49  0800               	movf	0,w
  6166  0B4A  3FC0               	movwi [0]fsr1
  6167  0B4B  0875               	movf	??_parse_temp_press_calib_data,w
  6168  0B4C  3FC1               	movwi [1]fsr1
  6169                           
  6170                           ;BME280_driver/bme280.c: 1368:     calib_data->dig_P6 = (int16_t)(((uint16_t)reg_data[17
      +                          ] << 8) | (uint16_t)reg_data[16]);
  6171  0B4D  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6172  0B4E  3E11               	addlw	17
  6173  0B4F  0084               	movwf	4
  6174  0B50  0185               	clrf	5
  6175  0B51  0800               	movf	0,w
  6176  0B52  00F5               	movwf	??_parse_temp_press_calib_data
  6177  0B53  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6178  0B54  3E10               	addlw	16
  6179  0B55  0084               	movwf	4
  6180  0B56  0185               	clrf	5
  6181  0B57  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6182  0B58  3E10               	addlw	16
  6183  0B59  0086               	movwf	6
  6184  0B5A  3001               	movlw	1	; select bank2/3
  6185  0B5B  0087               	movwf	7
  6186  0B5C  0800               	movf	0,w
  6187  0B5D  3FC0               	movwi [0]fsr1
  6188  0B5E  0875               	movf	??_parse_temp_press_calib_data,w
  6189  0B5F  3FC1               	movwi [1]fsr1
  6190                           
  6191                           ;BME280_driver/bme280.c: 1369:     calib_data->dig_P7 = (int16_t)(((uint16_t)reg_data[19
      +                          ] << 8) | (uint16_t)reg_data[18]);
  6192  0B60  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6193  0B61  3E13               	addlw	19
  6194  0B62  0084               	movwf	4
  6195  0B63  0185               	clrf	5
  6196  0B64  0800               	movf	0,w
  6197  0B65  00F5               	movwf	??_parse_temp_press_calib_data
  6198  0B66  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6199  0B67  3E12               	addlw	18
  6200  0B68  0084               	movwf	4
  6201  0B69  0185               	clrf	5
  6202  0B6A  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6203  0B6B  3E12               	addlw	18
  6204  0B6C  0086               	movwf	6
  6205  0B6D  3001               	movlw	1	; select bank2/3
  6206  0B6E  0087               	movwf	7
  6207  0B6F  0800               	movf	0,w
  6208  0B70  3FC0               	movwi [0]fsr1
  6209  0B71  0875               	movf	??_parse_temp_press_calib_data,w
  6210  0B72  3FC1               	movwi [1]fsr1
  6211                           
  6212                           ;BME280_driver/bme280.c: 1370:     calib_data->dig_P8 = (int16_t)(((uint16_t)reg_data[21
      +                          ] << 8) | (uint16_t)reg_data[20]);
  6213  0B73  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6214  0B74  3E15               	addlw	21
  6215  0B75  0084               	movwf	4
  6216  0B76  0185               	clrf	5
  6217  0B77  0800               	movf	0,w
  6218  0B78  00F5               	movwf	??_parse_temp_press_calib_data
  6219  0B79  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6220  0B7A  3E14               	addlw	20
  6221  0B7B  0084               	movwf	4
  6222  0B7C  0185               	clrf	5
  6223  0B7D  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6224  0B7E  3E14               	addlw	20
  6225  0B7F  0086               	movwf	6
  6226  0B80  3001               	movlw	1	; select bank2/3
  6227  0B81  0087               	movwf	7
  6228  0B82  0800               	movf	0,w
  6229  0B83  3FC0               	movwi [0]fsr1
  6230  0B84  0875               	movf	??_parse_temp_press_calib_data,w
  6231  0B85  3FC1               	movwi [1]fsr1
  6232                           
  6233                           ;BME280_driver/bme280.c: 1371:     calib_data->dig_P9 = (int16_t)(((uint16_t)reg_data[23
      +                          ] << 8) | (uint16_t)reg_data[22]);
  6234  0B86  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6235  0B87  3E17               	addlw	23
  6236  0B88  0084               	movwf	4
  6237  0B89  0185               	clrf	5
  6238  0B8A  0800               	movf	0,w
  6239  0B8B  00F5               	movwf	??_parse_temp_press_calib_data
  6240  0B8C  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6241  0B8D  3E16               	addlw	22
  6242  0B8E  0084               	movwf	4
  6243  0B8F  0185               	clrf	5
  6244  0B90  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6245  0B91  3E16               	addlw	22
  6246  0B92  0086               	movwf	6
  6247  0B93  3001               	movlw	1	; select bank2/3
  6248  0B94  0087               	movwf	7
  6249  0B95  0800               	movf	0,w
  6250  0B96  3FC0               	movwi [0]fsr1
  6251  0B97  0875               	movf	??_parse_temp_press_calib_data,w
  6252  0B98  3FC1               	movwi [1]fsr1
  6253                           
  6254                           ;BME280_driver/bme280.c: 1372:     calib_data->dig_H1 = reg_data[25];
  6255  0B99  0877               	movf	parse_temp_press_calib_data@reg_data,w
  6256  0B9A  3E19               	addlw	25
  6257  0B9B  0086               	movwf	6
  6258  0B9C  0187               	clrf	7
  6259  0B9D  0801               	movf	1,w
  6260  0B9E  00F5               	movwf	??_parse_temp_press_calib_data
  6261  0B9F  0876               	movf	parse_temp_press_calib_data@calib_data,w
  6262  0BA0  3E18               	addlw	24
  6263  0BA1  0086               	movwf	6
  6264  0BA2  3001               	movlw	1	; select bank2/3
  6265  0BA3  0087               	movwf	7
  6266  0BA4  0875               	movf	??_parse_temp_press_calib_data,w
  6267  0BA5  0081               	movwf	1
  6268  0BA6  0008               	return
  6269  0BA7                     __end_of_parse_temp_press_calib_data:	
  6270                           
  6271                           	psect	text6
  6272  0808                     __ptext6:	
  6273 ;; *************** function _parse_humidity_calib_data *****************
  6274 ;; Defined at:
  6275 ;;		line 1379 in file "BME280_driver/bme280.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  reg_data        1    wreg     PTR const unsigned char 
  6278 ;;		 -> get_calib_data@calib_data(26), 
  6279 ;;  dev             1    4[COMMON] PTR struct bme280_dev
  6280 ;;		 -> main@env_sensor(51), 
  6281 ;; Auto vars:     Size  Location     Type
  6282 ;;  reg_data        1    9[BANK0 ] PTR const unsigned char 
  6283 ;;		 -> get_calib_data@calib_data(26), 
  6284 ;;  dig_H5_msb      2    6[BANK0 ] short 
  6285 ;;  dig_H5_lsb      2    4[BANK0 ] short 
  6286 ;;  dig_H4_msb      2    2[BANK0 ] short 
  6287 ;;  dig_H4_lsb      2    0[BANK0 ] short 
  6288 ;;  calib_data      1    8[BANK0 ] PTR struct bme280_calib_
  6289 ;;		 -> env_sensor.calib_data(37), main@env_sensor(51), 
  6290 ;; Return value:  Size  Location     Type
  6291 ;;                  1    wreg      void 
  6292 ;; Registers used:
  6293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6294 ;; Tracked objects:
  6295 ;;		On entry : 1F/0
  6296 ;;		On exit  : 1F/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6299 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;Total ram usage:       14 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; Hardware stack levels required when called:    3
  6306 ;; This function calls:
  6307 ;;		Nothing
  6308 ;; This function is called by:
  6309 ;;		_get_calib_data
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           
  6314                           ;psect for function _parse_humidity_calib_data
  6315  0808                     _parse_humidity_calib_data:	
  6316                           
  6317                           ;incstack = 0
  6318                           ; Regs used in _parse_humidity_calib_data: [wreg-fsr1h+status,2+status,0]
  6319                           ;parse_humidity_calib_data@reg_data stored from wreg
  6320  0808  00A9               	movwf	parse_humidity_calib_data@reg_data
  6321                           
  6322                           ;BME280_driver/bme280.c: 1379: static void parse_humidity_calib_data(const uint8_t *reg_
      +                          data, struct bme280_dev *dev);BME280_driver/bme280.c: 1380: {;BME280_driver/bme280.c: 13
      +                          81:     struct bme280_calib_data *calib_data = &dev->calib_data;
  6323  0809  0874               	movf	parse_humidity_calib_data@dev,w
  6324  080A  3E09               	addlw	9
  6325  080B  00F5               	movwf	??_parse_humidity_calib_data
  6326  080C  0875               	movf	??_parse_humidity_calib_data,w
  6327  080D  00A8               	movwf	parse_humidity_calib_data@calib_data
  6328                           
  6329                           ;BME280_driver/bme280.c: 1382:     int16_t dig_H4_lsb;;BME280_driver/bme280.c: 1383:    
      +                           int16_t dig_H4_msb;;BME280_driver/bme280.c: 1384:     int16_t dig_H5_lsb;;BME280_driver
      +                          /bme280.c: 1385:     int16_t dig_H5_msb;;BME280_driver/bme280.c: 1387:     calib_data->d
      +                          ig_H2 = (int16_t)(((uint16_t)reg_data[1] << 8) | (uint16_t)reg_data[0]);
  6330  080E  0A29               	incf	parse_humidity_calib_data@reg_data,w
  6331  080F  0084               	movwf	4
  6332  0810  0185               	clrf	5
  6333  0811  0800               	movf	0,w
  6334  0812  00F5               	movwf	??_parse_humidity_calib_data
  6335  0813  0829               	movf	parse_humidity_calib_data@reg_data,w
  6336  0814  0084               	movwf	4
  6337  0815  0185               	clrf	5
  6338  0816  0828               	movf	parse_humidity_calib_data@calib_data,w
  6339  0817  3E19               	addlw	25
  6340  0818  0086               	movwf	6
  6341  0819  3001               	movlw	1	; select bank2/3
  6342  081A  0087               	movwf	7
  6343  081B  0800               	movf	0,w
  6344  081C  3FC0               	movwi [0]fsr1
  6345  081D  0875               	movf	??_parse_humidity_calib_data,w
  6346  081E  3FC1               	movwi [1]fsr1
  6347                           
  6348                           ;BME280_driver/bme280.c: 1388:     calib_data->dig_H3 = reg_data[2];
  6349  081F  0829               	movf	parse_humidity_calib_data@reg_data,w
  6350  0820  3E02               	addlw	2
  6351  0821  0086               	movwf	6
  6352  0822  0187               	clrf	7
  6353  0823  0801               	movf	1,w
  6354  0824  00F5               	movwf	??_parse_humidity_calib_data
  6355  0825  0828               	movf	parse_humidity_calib_data@calib_data,w
  6356  0826  3E1B               	addlw	27
  6357  0827  0086               	movwf	6
  6358  0828  3001               	movlw	1	; select bank2/3
  6359  0829  0087               	movwf	7
  6360  082A  0875               	movf	??_parse_humidity_calib_data,w
  6361  082B  0081               	movwf	1
  6362                           
  6363                           ;BME280_driver/bme280.c: 1389:     dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
  6364  082C  0829               	movf	parse_humidity_calib_data@reg_data,w
  6365  082D  3E03               	addlw	3
  6366  082E  0086               	movwf	6
  6367  082F  0187               	clrf	7
  6368  0830  0801               	movf	1,w
  6369  0831  00F5               	movwf	??_parse_humidity_calib_data
  6370  0832  01F6               	clrf	??_parse_humidity_calib_data+1
  6371  0833  1BF5               	btfsc	??_parse_humidity_calib_data,7
  6372  0834  03F6               	decf	??_parse_humidity_calib_data+1,f
  6373  0835  0EF5               	swapf	??_parse_humidity_calib_data,f
  6374  0836  0EF6               	swapf	??_parse_humidity_calib_data+1,f
  6375  0837  30F0               	movlw	240
  6376  0838  05F6               	andwf	??_parse_humidity_calib_data+1,f
  6377  0839  0875               	movf	??_parse_humidity_calib_data,w
  6378  083A  390F               	andlw	15
  6379  083B  04F6               	iorwf	??_parse_humidity_calib_data+1,f
  6380  083C  30F0               	movlw	240
  6381  083D  05F5               	andwf	??_parse_humidity_calib_data,f
  6382  083E  0875               	movf	??_parse_humidity_calib_data,w
  6383  083F  00A2               	movwf	parse_humidity_calib_data@dig_H4_msb
  6384  0840  0876               	movf	??_parse_humidity_calib_data+1,w
  6385  0841  00A3               	movwf	parse_humidity_calib_data@dig_H4_msb+1
  6386                           
  6387                           ;BME280_driver/bme280.c: 1390:     dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
  6388  0842  0829               	movf	parse_humidity_calib_data@reg_data,w
  6389  0843  3E04               	addlw	4
  6390  0844  0086               	movwf	6
  6391  0845  0187               	clrf	7
  6392  0846  0801               	movf	1,w
  6393  0847  390F               	andlw	15
  6394  0848  00F5               	movwf	??_parse_humidity_calib_data
  6395  0849  01F6               	clrf	??_parse_humidity_calib_data+1
  6396  084A  0875               	movf	??_parse_humidity_calib_data,w
  6397  084B  00A0               	movwf	parse_humidity_calib_data@dig_H4_lsb
  6398  084C  0876               	movf	??_parse_humidity_calib_data+1,w
  6399  084D  00A1               	movwf	parse_humidity_calib_data@dig_H4_lsb+1
  6400                           
  6401                           ;BME280_driver/bme280.c: 1391:     calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
  6402  084E  0820               	movf	parse_humidity_calib_data@dig_H4_lsb,w
  6403  084F  0422               	iorwf	parse_humidity_calib_data@dig_H4_msb,w
  6404  0850  00F5               	movwf	??_parse_humidity_calib_data
  6405  0851  0821               	movf	parse_humidity_calib_data@dig_H4_lsb+1,w
  6406  0852  0423               	iorwf	parse_humidity_calib_data@dig_H4_msb+1,w
  6407  0853  00F6               	movwf	??_parse_humidity_calib_data+1
  6408  0854  0828               	movf	parse_humidity_calib_data@calib_data,w
  6409  0855  3E1C               	addlw	28
  6410  0856  0086               	movwf	6
  6411  0857  3001               	movlw	1	; select bank2/3
  6412  0858  0087               	movwf	7
  6413  0859  0875               	movf	??_parse_humidity_calib_data,w
  6414  085A  3FC0               	movwi [0]fsr1
  6415  085B  0876               	movf	??_parse_humidity_calib_data+1,w
  6416  085C  3FC1               	movwi [1]fsr1
  6417                           
  6418                           ;BME280_driver/bme280.c: 1392:     dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
  6419  085D  0829               	movf	parse_humidity_calib_data@reg_data,w
  6420  085E  3E05               	addlw	5
  6421  085F  0086               	movwf	6
  6422  0860  0187               	clrf	7
  6423  0861  0801               	movf	1,w
  6424  0862  00F5               	movwf	??_parse_humidity_calib_data
  6425  0863  01F6               	clrf	??_parse_humidity_calib_data+1
  6426  0864  1BF5               	btfsc	??_parse_humidity_calib_data,7
  6427  0865  03F6               	decf	??_parse_humidity_calib_data+1,f
  6428  0866  0EF5               	swapf	??_parse_humidity_calib_data,f
  6429  0867  0EF6               	swapf	??_parse_humidity_calib_data+1,f
  6430  0868  30F0               	movlw	240
  6431  0869  05F6               	andwf	??_parse_humidity_calib_data+1,f
  6432  086A  0875               	movf	??_parse_humidity_calib_data,w
  6433  086B  390F               	andlw	15
  6434  086C  04F6               	iorwf	??_parse_humidity_calib_data+1,f
  6435  086D  30F0               	movlw	240
  6436  086E  05F5               	andwf	??_parse_humidity_calib_data,f
  6437  086F  0875               	movf	??_parse_humidity_calib_data,w
  6438  0870  00A6               	movwf	parse_humidity_calib_data@dig_H5_msb
  6439  0871  0876               	movf	??_parse_humidity_calib_data+1,w
  6440  0872  00A7               	movwf	parse_humidity_calib_data@dig_H5_msb+1
  6441                           
  6442                           ;BME280_driver/bme280.c: 1393:     dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
  6443  0873  0829               	movf	parse_humidity_calib_data@reg_data,w
  6444  0874  3E04               	addlw	4
  6445  0875  0086               	movwf	6
  6446  0876  0187               	clrf	7
  6447  0877  0801               	movf	1,w
  6448  0878  00F5               	movwf	??_parse_humidity_calib_data
  6449  0879  3004               	movlw	4
  6450  087A                     u2545:	
  6451  087A  36F5               	lsrf	??_parse_humidity_calib_data,f
  6452  087B  0B89               	decfsz	9,f
  6453  087C  287A               	goto	u2545
  6454  087D  0875               	movf	??_parse_humidity_calib_data,w
  6455  087E  00F6               	movwf	??_parse_humidity_calib_data+1
  6456  087F  01F7               	clrf	??_parse_humidity_calib_data+2
  6457  0880  0876               	movf	??_parse_humidity_calib_data+1,w
  6458  0881  00A4               	movwf	parse_humidity_calib_data@dig_H5_lsb
  6459  0882  0877               	movf	??_parse_humidity_calib_data+2,w
  6460  0883  00A5               	movwf	parse_humidity_calib_data@dig_H5_lsb+1
  6461                           
  6462                           ;BME280_driver/bme280.c: 1394:     calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
  6463  0884  0824               	movf	parse_humidity_calib_data@dig_H5_lsb,w
  6464  0885  0426               	iorwf	parse_humidity_calib_data@dig_H5_msb,w
  6465  0886  00F5               	movwf	??_parse_humidity_calib_data
  6466  0887  0825               	movf	parse_humidity_calib_data@dig_H5_lsb+1,w
  6467  0888  0427               	iorwf	parse_humidity_calib_data@dig_H5_msb+1,w
  6468  0889  00F6               	movwf	??_parse_humidity_calib_data+1
  6469  088A  0828               	movf	parse_humidity_calib_data@calib_data,w
  6470  088B  3E1E               	addlw	30
  6471  088C  0086               	movwf	6
  6472  088D  3001               	movlw	1	; select bank2/3
  6473  088E  0087               	movwf	7
  6474  088F  0875               	movf	??_parse_humidity_calib_data,w
  6475  0890  3FC0               	movwi [0]fsr1
  6476  0891  0876               	movf	??_parse_humidity_calib_data+1,w
  6477  0892  3FC1               	movwi [1]fsr1
  6478                           
  6479                           ;BME280_driver/bme280.c: 1395:     calib_data->dig_H6 = (int8_t)reg_data[6];
  6480  0893  0829               	movf	parse_humidity_calib_data@reg_data,w
  6481  0894  3E06               	addlw	6
  6482  0895  0086               	movwf	6
  6483  0896  0187               	clrf	7
  6484  0897  0801               	movf	1,w
  6485  0898  00F5               	movwf	??_parse_humidity_calib_data
  6486  0899  0828               	movf	parse_humidity_calib_data@calib_data,w
  6487  089A  3E20               	addlw	32
  6488  089B  0086               	movwf	6
  6489  089C  3001               	movlw	1	; select bank2/3
  6490  089D  0087               	movwf	7
  6491  089E  0875               	movf	??_parse_humidity_calib_data,w
  6492  089F  0081               	movwf	1
  6493  08A0  0008               	return
  6494  08A1                     __end_of_parse_humidity_calib_data:	
  6495                           
  6496                           	psect	text7
  6497  11D4                     __ptext7:	
  6498 ;; *************** function _bme280_soft_reset *****************
  6499 ;; Defined at:
  6500 ;;		line 631 in file "BME280_driver/bme280.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;  dev             1    wreg     PTR const struct bme280_
  6503 ;;		 -> main@env_sensor(51), 
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  dev             1   61[BANK0 ] PTR const struct bme280_
  6506 ;;		 -> main@env_sensor(51), 
  6507 ;;  reg_addr        1   60[BANK0 ] unsigned char 
  6508 ;;  rslt            1   59[BANK0 ] char 
  6509 ;;  soft_rst_cmd    1   58[BANK0 ] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      char 
  6512 ;; Registers used:
  6513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 1F/0
  6516 ;;		On exit  : 1F/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;Total ram usage:        7 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    7
  6526 ;; This function calls:
  6527 ;;		_Sleep
  6528 ;;		_bme280_set_regs
  6529 ;;		_null_ptr_check
  6530 ;; This function is called by:
  6531 ;;		_bme280_init
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           
  6536                           ;psect for function _bme280_soft_reset
  6537  11D4                     _bme280_soft_reset:	
  6538                           
  6539                           ;incstack = 0
  6540                           ; Regs used in _bme280_soft_reset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6541                           ;bme280_soft_reset@dev stored from wreg
  6542  11D4  00DD               	movwf	bme280_soft_reset@dev
  6543                           
  6544                           ;BME280_driver/bme280.c: 631: int8_t bme280_soft_reset(const struct bme280_dev *dev);BME
      +                          280_driver/bme280.c: 632: {;BME280_driver/bme280.c: 633:     int8_t rslt;;BME280_driver/
      +                          bme280.c: 634:     uint8_t reg_addr = 0xE0;
  6545  11D5  30E0               	movlw	224
  6546  11D6  00D7               	movwf	??_bme280_soft_reset
  6547  11D7  0857               	movf	??_bme280_soft_reset,w
  6548  11D8  00DC               	movwf	bme280_soft_reset@reg_addr
  6549                           
  6550                           ;BME280_driver/bme280.c: 637:     uint8_t soft_rst_cmd = 0xB6;
  6551  11D9  30B6               	movlw	182
  6552  11DA  00D7               	movwf	??_bme280_soft_reset
  6553  11DB  0857               	movf	??_bme280_soft_reset,w
  6554  11DC  00DA               	movwf	bme280_soft_reset@soft_rst_cmd
  6555                           
  6556                           ;BME280_driver/bme280.c: 640:     rslt = null_ptr_check(dev);
  6557  11DD  085D               	movf	bme280_soft_reset@dev,w
  6558  11DE  319F  278D  3191   	fcall	_null_ptr_check
  6559  11E1  00D7               	movwf	??_bme280_soft_reset
  6560  11E2  0857               	movf	??_bme280_soft_reset,w
  6561  11E3  00DB               	movwf	bme280_soft_reset@rslt
  6562                           
  6563                           ;BME280_driver/bme280.c: 643:     if (rslt == 0)
  6564  11E4  085B               	movf	bme280_soft_reset@rslt,w
  6565  11E5  1D03               	btfss	3,2
  6566  11E6  2A0A               	goto	l3203
  6567                           
  6568                           ;BME280_driver/bme280.c: 644:     {;BME280_driver/bme280.c: 646:         rslt = bme280_s
      +                          et_regs(&reg_addr, &soft_rst_cmd, 1, dev);
  6569  11E7  305A               	movlw	(low (bme280_soft_reset@soft_rst_cmd| 0))& (0+255)
  6570  11E8  00D7               	movwf	??_bme280_soft_reset
  6571  11E9  0857               	movf	??_bme280_soft_reset,w
  6572  11EA  00B8               	movwf	bme280_set_regs@reg_data
  6573  11EB  01B9               	clrf	bme280_set_regs@len
  6574  11EC  0AB9               	incf	bme280_set_regs@len,f
  6575  11ED  085D               	movf	bme280_soft_reset@dev,w
  6576  11EE  00D8               	movwf	??_bme280_soft_reset+1
  6577  11EF  0858               	movf	??_bme280_soft_reset+1,w
  6578  11F0  00BA               	movwf	bme280_set_regs@dev
  6579  11F1  305C               	movlw	(low (bme280_soft_reset@reg_addr| 0))& (0+255)
  6580  11F2  3188  20A1  3191   	fcall	_bme280_set_regs
  6581  11F5  00D9               	movwf	??_bme280_soft_reset+2
  6582  11F6  0859               	movf	??_bme280_soft_reset+2,w
  6583  11F7  00DB               	movwf	bme280_soft_reset@rslt
  6584                           
  6585                           ;BME280_driver/bme280.c: 649:         dev->delay_ms(2);
  6586  11F8  3000               	movlw	0
  6587  11F9  00F7               	movwf	Sleep@ms+3
  6588  11FA  3000               	movlw	0
  6589  11FB  00F6               	movwf	Sleep@ms+2
  6590  11FC  3000               	movlw	0
  6591  11FD  00F5               	movwf	Sleep@ms+1
  6592  11FE  3002               	movlw	2
  6593  11FF  00F4               	movwf	Sleep@ms
  6594  1200  085D               	movf	bme280_soft_reset@dev,w
  6595  1201  3E07               	addlw	7
  6596  1202  0086               	movwf	6
  6597  1203  3001               	movlw	1	; select bank2/3
  6598  1204  0087               	movwf	7
  6599  1205  3F41               	moviw [1]fsr1
  6600  1206  008A               	movwf	10
  6601  1207  3F40               	moviw [0]fsr1
  6602  1208  000A               	callw
  6603  1209  3191               	pagesel	$
  6604  120A                     l3203:	
  6605                           
  6606                           ;BME280_driver/bme280.c: 652:     return rslt;
  6607  120A  085B               	movf	bme280_soft_reset@rslt,w
  6608  120B  0008               	return
  6609  120C                     __end_of_bme280_soft_reset:	
  6610                           
  6611                           	psect	text8
  6612  08A1                     __ptext8:	
  6613 ;; *************** function _bme280_set_regs *****************
  6614 ;; Defined at:
  6615 ;;		line 442 in file "BME280_driver/bme280.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  reg_addr        1    wreg     PTR unsigned char 
  6618 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6619 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6620 ;;  reg_data        1   24[BANK0 ] PTR const unsigned char 
  6621 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
  6622 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
  6623 ;;  len             1   25[BANK0 ] unsigned char 
  6624 ;;  dev             1   26[BANK0 ] PTR const struct bme280_
  6625 ;;		 -> main@env_sensor(51), 
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  reg_addr        1   54[BANK0 ] PTR unsigned char 
  6628 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6629 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6630 ;;  temp_buff      20   30[BANK0 ] unsigned char [20]
  6631 ;;  temp_len        2   50[BANK0 ] unsigned short 
  6632 ;;  rslt            1   53[BANK0 ] char 
  6633 ;;  reg_addr_cnt    1   52[BANK0 ] unsigned char 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  1    wreg      char 
  6636 ;; Registers used:
  6637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 1F/0
  6640 ;;		On exit  : 1F/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6643 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;Total ram usage:       31 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    6
  6650 ;; This function calls:
  6651 ;;		_WriteEnvSensor
  6652 ;;		_interleave_reg_addr
  6653 ;;		_null_ptr_check
  6654 ;; This function is called by:
  6655 ;;		_bme280_soft_reset
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _bme280_set_regs
  6661  08A1                     _bme280_set_regs:	
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in _bme280_set_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6665                           ;bme280_set_regs@reg_addr stored from wreg
  6666  08A1  00D6               	movwf	bme280_set_regs@reg_addr
  6667                           
  6668                           ;BME280_driver/bme280.c: 442: int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *r
      +                          eg_data, uint8_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 443: {;BME28
      +                          0_driver/bme280.c: 444:     int8_t rslt;;BME280_driver/bme280.c: 445:     uint8_t temp_b
      +                          uff[20];;BME280_driver/bme280.c: 447:     if (len > 10)
  6669  08A2  300B               	movlw	11
  6670  08A3  0239               	subwf	bme280_set_regs@len,w
  6671  08A4  1C03               	skipc
  6672  08A5  28AA               	goto	l2961
  6673                           
  6674                           ;BME280_driver/bme280.c: 448:     {;BME280_driver/bme280.c: 449:         len = 10;
  6675  08A6  300A               	movlw	10
  6676  08A7  00BB               	movwf	??_bme280_set_regs
  6677  08A8  083B               	movf	??_bme280_set_regs,w
  6678  08A9  00B9               	movwf	bme280_set_regs@len
  6679  08AA                     l2961:	
  6680                           
  6681                           ;BME280_driver/bme280.c: 451:     uint16_t temp_len;;BME280_driver/bme280.c: 452:     ui
      +                          nt8_t reg_addr_cnt;;BME280_driver/bme280.c: 455:     rslt = null_ptr_check(dev);
  6682  08AA  083A               	movf	bme280_set_regs@dev,w
  6683  08AB  319F  278D  3188   	fcall	_null_ptr_check
  6684  08AE  00BB               	movwf	??_bme280_set_regs
  6685  08AF  083B               	movf	??_bme280_set_regs,w
  6686  08B0  00D5               	movwf	bme280_set_regs@rslt
  6687                           
  6688                           ;BME280_driver/bme280.c: 458:     if ((rslt == 0) && (reg_addr != ((void*)0)) && (reg_da
      +                          ta != ((void*)0)))
  6689  08B1  0855               	movf	bme280_set_regs@rslt,w
  6690  08B2  1D03               	btfss	3,2
  6691  08B3  293A               	goto	l70
  6692  08B4  0856               	movf	bme280_set_regs@reg_addr,w
  6693  08B5  1903               	btfsc	3,2
  6694  08B6  293A               	goto	l70
  6695  08B7  0838               	movf	bme280_set_regs@reg_data,w
  6696  08B8  1903               	btfsc	3,2
  6697  08B9  293A               	goto	l70
  6698                           
  6699                           ;BME280_driver/bme280.c: 459:     {;BME280_driver/bme280.c: 460:         if (len != 0)
  6700  08BA  0839               	movf	bme280_set_regs@len,w
  6701  08BB  1903               	btfsc	3,2
  6702  08BC  2935               	goto	l2997
  6703                           
  6704                           ;BME280_driver/bme280.c: 461:         {;BME280_driver/bme280.c: 462:             temp_bu
      +                          ff[0] = reg_data[0];
  6705  08BD  0838               	movf	bme280_set_regs@reg_data,w
  6706  08BE  0086               	movwf	6
  6707  08BF  0187               	clrf	7
  6708  08C0  0801               	movf	1,w
  6709  08C1  00BB               	movwf	??_bme280_set_regs
  6710  08C2  083B               	movf	??_bme280_set_regs,w
  6711  08C3  00BE               	movwf	bme280_set_regs@temp_buff
  6712                           
  6713                           ;BME280_driver/bme280.c: 465:             if (dev->intf != BME280_I2C_INTF)
  6714  08C4  083A               	movf	bme280_set_regs@dev,w
  6715  08C5  3E02               	addlw	2
  6716  08C6  0086               	movwf	6
  6717  08C7  3001               	movlw	1	; select bank2/3
  6718  08C8  0087               	movwf	7
  6719  08C9  0301               	decf	1,w
  6720  08CA  1903               	btfsc	3,2
  6721  08CB  28E7               	goto	l2983
  6722                           
  6723                           ;BME280_driver/bme280.c: 466:             {;BME280_driver/bme280.c: 467:                
      +                           for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
  6724  08CC  01D4               	clrf	bme280_set_regs@reg_addr_cnt
  6725  08CD                     l2981:	
  6726  08CD  0839               	movf	bme280_set_regs@len,w
  6727  08CE  0254               	subwf	bme280_set_regs@reg_addr_cnt,w
  6728  08CF  1803               	btfsc	3,0
  6729  08D0  28E7               	goto	l2983
  6730                           
  6731                           ;BME280_driver/bme280.c: 468:                 {;BME280_driver/bme280.c: 469:            
      +                                   reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
  6732  08D1  0854               	movf	bme280_set_regs@reg_addr_cnt,w
  6733  08D2  0756               	addwf	bme280_set_regs@reg_addr,w
  6734  08D3  00BB               	movwf	??_bme280_set_regs
  6735  08D4  083B               	movf	??_bme280_set_regs,w
  6736  08D5  0086               	movwf	6
  6737  08D6  0187               	clrf	7
  6738  08D7  0801               	movf	1,w
  6739  08D8  397F               	andlw	127
  6740  08D9  00BC               	movwf	??_bme280_set_regs+1
  6741  08DA  0854               	movf	bme280_set_regs@reg_addr_cnt,w
  6742  08DB  0756               	addwf	bme280_set_regs@reg_addr,w
  6743  08DC  00BD               	movwf	??_bme280_set_regs+2
  6744  08DD  083D               	movf	??_bme280_set_regs+2,w
  6745  08DE  0086               	movwf	6
  6746  08DF  0187               	clrf	7
  6747  08E0  083C               	movf	??_bme280_set_regs+1,w
  6748  08E1  0081               	movwf	1
  6749                           
  6750                           ;BME280_driver/bme280.c: 470:                 }
  6751  08E2  3001               	movlw	1
  6752  08E3  00BB               	movwf	??_bme280_set_regs
  6753  08E4  083B               	movf	??_bme280_set_regs,w
  6754  08E5  07D4               	addwf	bme280_set_regs@reg_addr_cnt,f
  6755  08E6  28CD               	goto	l2981
  6756  08E7                     l2983:	
  6757                           
  6758                           ;BME280_driver/bme280.c: 474:             if (len > 1)
  6759  08E7  3002               	movlw	2
  6760  08E8  0239               	subwf	bme280_set_regs@len,w
  6761  08E9  1C03               	skipc
  6762  08EA  2906               	goto	l2989
  6763                           
  6764                           ;BME280_driver/bme280.c: 475:             {;BME280_driver/bme280.c: 479:                
      +                           interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
  6765  08EB  303E               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
  6766  08EC  00BB               	movwf	??_bme280_set_regs
  6767  08ED  083B               	movf	??_bme280_set_regs,w
  6768  08EE  00F4               	movwf	interleave_reg_addr@temp_buff
  6769  08EF  0838               	movf	bme280_set_regs@reg_data,w
  6770  08F0  00BC               	movwf	??_bme280_set_regs+1
  6771  08F1  083C               	movf	??_bme280_set_regs+1,w
  6772  08F2  00F5               	movwf	interleave_reg_addr@reg_data
  6773  08F3  0839               	movf	bme280_set_regs@len,w
  6774  08F4  00BD               	movwf	??_bme280_set_regs+2
  6775  08F5  083D               	movf	??_bme280_set_regs+2,w
  6776  08F6  00F6               	movwf	interleave_reg_addr@len
  6777  08F7  0856               	movf	bme280_set_regs@reg_addr,w
  6778  08F8  3190  20E7  3188   	fcall	_interleave_reg_addr
  6779                           
  6780                           ;BME280_driver/bme280.c: 480:                 temp_len = ((len * 2) - 1);
  6781  08FB  0839               	movf	bme280_set_regs@len,w
  6782  08FC  00BB               	movwf	??_bme280_set_regs
  6783  08FD  01BC               	clrf	??_bme280_set_regs+1
  6784  08FE  35BB               	lslf	??_bme280_set_regs,f
  6785  08FF  0DBC               	rlf	??_bme280_set_regs+1,f
  6786  0900  083B               	movf	??_bme280_set_regs,w
  6787  0901  3EFF               	addlw	255
  6788  0902  00D2               	movwf	bme280_set_regs@temp_len
  6789  0903  30FF               	movlw	255
  6790  0904  3D3C               	addwfc	??_bme280_set_regs+1,w
  6791  0905  290C               	goto	L2
  6792  0906                     l2989:	
  6793                           ;BME280_driver/bme280.c: 481:             }
  6794                           
  6795                           
  6796                           ;BME280_driver/bme280.c: 483:             {;BME280_driver/bme280.c: 484:                
      +                           temp_len = len;
  6797  0906  0839               	movf	bme280_set_regs@len,w
  6798  0907  00BB               	movwf	??_bme280_set_regs
  6799  0908  01BC               	clrf	??_bme280_set_regs+1
  6800  0909  083B               	movf	??_bme280_set_regs,w
  6801  090A  00D2               	movwf	bme280_set_regs@temp_len
  6802  090B  083C               	movf	??_bme280_set_regs+1,w
  6803  090C                     L2:	
  6804  090C  00D3               	movwf	bme280_set_regs@temp_len+1
  6805                           
  6806                           ;BME280_driver/bme280.c: 486:             rslt = dev->write(dev->dev_id, reg_addr[0], te
      +                          mp_buff, temp_len);
  6807  090D  083A               	movf	bme280_set_regs@dev,w
  6808  090E  0086               	movwf	6
  6809  090F  3001               	movlw	1	; select bank2/3
  6810  0910  0087               	movwf	7
  6811  0911  3001               	movlw	1	; select bank2/3
  6812  0912  3F41               	moviw [1]fsr1
  6813  0913  00A8               	movwf	WriteEnvSensor@dev_id
  6814  0914  0856               	movf	bme280_set_regs@reg_addr,w
  6815  0915  0086               	movwf	6
  6816  0916  0187               	clrf	7
  6817  0917  0801               	movf	1,w
  6818  0918  00BB               	movwf	??_bme280_set_regs
  6819  0919  083B               	movf	??_bme280_set_regs,w
  6820  091A  00A9               	movwf	WriteEnvSensor@reg_addr
  6821  091B  303E               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
  6822  091C  00BC               	movwf	??_bme280_set_regs+1
  6823  091D  083C               	movf	??_bme280_set_regs+1,w
  6824  091E  00AA               	movwf	WriteEnvSensor@reg_data
  6825  091F  0853               	movf	bme280_set_regs@temp_len+1,w
  6826  0920  00AC               	movwf	WriteEnvSensor@len+1
  6827  0921  0852               	movf	bme280_set_regs@temp_len,w
  6828  0922  00AB               	movwf	WriteEnvSensor@len
  6829  0923  083A               	movf	bme280_set_regs@dev,w
  6830  0924  3E05               	addlw	5
  6831  0925  0086               	movwf	6
  6832  0926  3001               	movlw	1	; select bank2/3
  6833  0927  0087               	movwf	7
  6834  0928  3F41               	moviw [1]fsr1
  6835  0929  008A               	movwf	10
  6836  092A  3F40               	moviw [0]fsr1
  6837  092B  000A               	callw
  6838  092C  3188               	pagesel	$
  6839  092D  00BD               	movwf	??_bme280_set_regs+2
  6840  092E  083D               	movf	??_bme280_set_regs+2,w
  6841  092F  00D5               	movwf	bme280_set_regs@rslt
  6842                           
  6843                           ;BME280_driver/bme280.c: 489:             if (rslt != 0)
  6844  0930  0855               	movf	bme280_set_regs@rslt,w
  6845  0931  1903               	btfsc	3,2
  6846  0932  293C               	goto	l2999
  6847                           
  6848                           ;BME280_driver/bme280.c: 490:             {;BME280_driver/bme280.c: 491:                
      +                           rslt = -4;
  6849  0933  30FC               	movlw	252
  6850  0934  2936               	goto	L3
  6851  0935                     l2997:	
  6852                           
  6853                           ;BME280_driver/bme280.c: 495:         {;BME280_driver/bme280.c: 496:             rslt = 
      +                          -3;
  6854  0935  30FD               	movlw	253
  6855  0936                     L3:	
  6856  0936  00BB               	movwf	??_bme280_set_regs
  6857  0937  083B               	movf	??_bme280_set_regs,w
  6858  0938  00D5               	movwf	bme280_set_regs@rslt
  6859  0939  293C               	goto	l2999
  6860  093A                     l70:	
  6861                           ;BME280_driver/bme280.c: 499:     else
  6862                           
  6863                           
  6864                           ;BME280_driver/bme280.c: 500:     {;BME280_driver/bme280.c: 501:         rslt = -1;
  6865  093A  01D5               	clrf	bme280_set_regs@rslt
  6866  093B  03D5               	decf	bme280_set_regs@rslt,f
  6867  093C                     l2999:	
  6868                           
  6869                           ;BME280_driver/bme280.c: 504:     return rslt;
  6870  093C  0855               	movf	bme280_set_regs@rslt,w
  6871  093D  0008               	return
  6872  093E                     __end_of_bme280_set_regs:	
  6873                           
  6874                           	psect	text9
  6875  10E7                     __ptext9:	
  6876 ;; *************** function _interleave_reg_addr *****************
  6877 ;; Defined at:
  6878 ;;		line 1341 in file "BME280_driver/bme280.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  reg_addr        1    wreg     PTR const unsigned char 
  6881 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6882 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6883 ;;  temp_buff       1    4[COMMON] PTR unsigned char 
  6884 ;;		 -> bme280_set_regs@temp_buff(20), 
  6885 ;;  reg_data        1    5[COMMON] PTR const unsigned char 
  6886 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
  6887 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
  6888 ;;  len             1    6[COMMON] unsigned char 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  reg_addr        1    0[BANK0 ] PTR const unsigned char 
  6891 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6892 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6893 ;;  index           1    1[BANK0 ] unsigned char 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  1    wreg      void 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6898 ;; Tracked objects:
  6899 ;;		On entry : 1F/0
  6900 ;;		On exit  : 1F/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6903 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Totals:         6       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;Total ram usage:        8 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    3
  6910 ;; This function calls:
  6911 ;;		Nothing
  6912 ;; This function is called by:
  6913 ;;		_bme280_set_regs
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           
  6918                           ;psect for function _interleave_reg_addr
  6919  10E7                     _interleave_reg_addr:	
  6920                           
  6921                           ;incstack = 0
  6922                           ; Regs used in _interleave_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0]
  6923                           ;interleave_reg_addr@reg_addr stored from wreg
  6924  10E7  00A0               	movwf	interleave_reg_addr@reg_addr
  6925                           
  6926                           ;BME280_driver/bme280.c: 1341: static void interleave_reg_addr(const uint8_t *reg_addr, 
      +                          uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len);BME280_driver/bme280.c: 1342: 
      +                          {;BME280_driver/bme280.c: 1343:     uint8_t index;;BME280_driver/bme280.c: 1345:     for
      +                           (index = 1; index < len; index++)
  6927  10E8  01A1               	clrf	interleave_reg_addr@index
  6928  10E9  0AA1               	incf	interleave_reg_addr@index,f
  6929  10EA                     l2775:	
  6930  10EA  0876               	movf	interleave_reg_addr@len,w
  6931  10EB  0221               	subwf	interleave_reg_addr@index,w
  6932  10EC  1803               	btfsc	3,0
  6933  10ED  0008               	return
  6934                           
  6935                           ;BME280_driver/bme280.c: 1346:     {;BME280_driver/bme280.c: 1347:         temp_buff[(in
      +                          dex * 2) - 1] = reg_addr[index];
  6936  10EE  0821               	movf	interleave_reg_addr@index,w
  6937  10EF  0720               	addwf	interleave_reg_addr@reg_addr,w
  6938  10F0  00F7               	movwf	??_interleave_reg_addr
  6939  10F1  0877               	movf	??_interleave_reg_addr,w
  6940  10F2  0086               	movwf	6
  6941  10F3  0187               	clrf	7
  6942  10F4  0801               	movf	1,w
  6943  10F5  00F8               	movwf	??_interleave_reg_addr+1
  6944  10F6  3521               	lslf	interleave_reg_addr@index,w
  6945  10F7  0774               	addwf	interleave_reg_addr@temp_buff,w
  6946  10F8  00F9               	movwf	??_interleave_reg_addr+2
  6947  10F9  0879               	movf	??_interleave_reg_addr+2,w
  6948  10FA  3EFF               	addlw	-1
  6949  10FB  0086               	movwf	6
  6950  10FC  0187               	clrf	7
  6951  10FD  0878               	movf	??_interleave_reg_addr+1,w
  6952  10FE  0081               	movwf	1
  6953                           
  6954                           ;BME280_driver/bme280.c: 1348:         temp_buff[index * 2] = reg_data[index];
  6955  10FF  0821               	movf	interleave_reg_addr@index,w
  6956  1100  0775               	addwf	interleave_reg_addr@reg_data,w
  6957  1101  00F7               	movwf	??_interleave_reg_addr
  6958  1102  0877               	movf	??_interleave_reg_addr,w
  6959  1103  0086               	movwf	6
  6960  1104  0187               	clrf	7
  6961  1105  0801               	movf	1,w
  6962  1106  00F8               	movwf	??_interleave_reg_addr+1
  6963  1107  3521               	lslf	interleave_reg_addr@index,w
  6964  1108  0774               	addwf	interleave_reg_addr@temp_buff,w
  6965  1109  00F9               	movwf	??_interleave_reg_addr+2
  6966  110A  0879               	movf	??_interleave_reg_addr+2,w
  6967  110B  0086               	movwf	6
  6968  110C  0187               	clrf	7
  6969  110D  0878               	movf	??_interleave_reg_addr+1,w
  6970  110E  0081               	movwf	1
  6971                           
  6972                           ;BME280_driver/bme280.c: 1349:     }
  6973  110F  3001               	movlw	1
  6974  1110  00F7               	movwf	??_interleave_reg_addr
  6975  1111  0877               	movf	??_interleave_reg_addr,w
  6976  1112  07A1               	addwf	interleave_reg_addr@index,f
  6977  1113  28EA               	goto	l2775
  6978  1114                     __end_of_interleave_reg_addr:	
  6979                           
  6980                           	psect	text10
  6981  09EC                     __ptext10:	
  6982 ;; *************** function _WriteEnvSensor *****************
  6983 ;; Defined at:
  6984 ;;		line 816 in file "main.c"
  6985 ;; Parameters:    Size  Location     Type
  6986 ;;  dev_id          1    8[BANK0 ] unsigned char 
  6987 ;;  reg_addr        1    9[BANK0 ] unsigned char 
  6988 ;;  reg_data        1   10[BANK0 ] PTR unsigned char 
  6989 ;;		 -> bme280_set_regs@temp_buff(20), 
  6990 ;;  len             2   11[BANK0 ] unsigned short 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  j               1   21[BANK0 ] unsigned char 
  6993 ;;  i               1   20[BANK0 ] unsigned char 
  6994 ;;  status          1   23[BANK0 ] enum E9635
  6995 ;;  local_addres    1   22[BANK0 ] unsigned char 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  1    wreg      char 
  6998 ;; Registers used:
  6999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 1F/0
  7002 ;;		On exit  : 1F/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7005 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;Total ram usage:       16 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    5
  7012 ;; This function calls:
  7013 ;;		_I2C_MasterTRBInsert
  7014 ;;		_I2C_MasterWriteTRBBuild
  7015 ;;		___wmul
  7016 ;; This function is called by:
  7017 ;;		_main
  7018 ;;		_bme280_set_regs
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           
  7023                           ;psect for function _WriteEnvSensor
  7024  09EC                     _WriteEnvSensor:	
  7025                           
  7026                           ;main.c: 816: int8_t WriteEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
      +                           uint16_t len);main.c: 817: {;main.c: 818:     I2C_MESSAGE_STATUS status = I2C_MESSAGE_P
      +                          ENDING;
  7027                           
  7028                           ;incstack = 0
  7029                           ; Regs used in _WriteEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7030  09EC  3002               	movlw	2
  7031  09ED  00AD               	movwf	??_WriteEnvSensor
  7032  09EE  082D               	movf	??_WriteEnvSensor,w
  7033  09EF  00B7               	movwf	WriteEnvSensor@status
  7034                           
  7035                           ;main.c: 820:     static I2C_TRANSACTION_REQUEST_BLOCK trb[24];;main.c: 821:     if (len
      +                           > 24 / 2)
  7036  09F0  3000               	movlw	0
  7037  09F1  022C               	subwf	WriteEnvSensor@len+1,w
  7038  09F2  300D               	movlw	13
  7039  09F3  1903               	skipnz
  7040  09F4  022B               	subwf	WriteEnvSensor@len,w
  7041  09F5  1803               	btfsc	3,0
  7042  09F6                     l891:	
  7043                           ;main.c: 824:         {;main.c: 826:         }
  7044                           
  7045                           ;main.c: 822:     {;main.c: 823:         while (1)
  7046                           
  7047  09F6  29F6               	goto	l891
  7048                           
  7049                           ;main.c: 829:     uint8_t local_address = reg_addr;
  7050  09F7  0829               	movf	WriteEnvSensor@reg_addr,w
  7051  09F8  00AD               	movwf	??_WriteEnvSensor
  7052  09F9  082D               	movf	??_WriteEnvSensor,w
  7053  09FA  00B6               	movwf	WriteEnvSensor@local_address
  7054                           
  7055                           ;main.c: 830:     for (uint8_t i = 0, j = 0; i < len; i++, j += 2)
  7056  09FB  01B4               	clrf	WriteEnvSensor@i
  7057  09FC  01B5               	clrf	WriteEnvSensor@j
  7058  09FD                     l2839:	
  7059  09FD  0834               	movf	WriteEnvSensor@i,w
  7060  09FE  00AD               	movwf	??_WriteEnvSensor
  7061  09FF  01AE               	clrf	??_WriteEnvSensor+1
  7062  0A00  082C               	movf	WriteEnvSensor@len+1,w
  7063  0A01  022E               	subwf	??_WriteEnvSensor+1,w
  7064  0A02  1D03               	skipz
  7065  0A03  2A06               	goto	u2025
  7066  0A04  082B               	movf	WriteEnvSensor@len,w
  7067  0A05  022D               	subwf	??_WriteEnvSensor,w
  7068  0A06                     u2025:	
  7069  0A06  1803               	btfsc	3,0
  7070  0A07  2A66               	goto	l2841
  7071                           
  7072                           ;main.c: 831:     {;main.c: 832:         I2C_MasterWriteTRBBuild(&trb[j], &local_address
      +                          , 1, dev_id);
  7073  0A08  0835               	movf	WriteEnvSensor@j,w
  7074  0A09  00AD               	movwf	??_WriteEnvSensor
  7075  0A0A  01AE               	clrf	??_WriteEnvSensor+1
  7076  0A0B  082D               	movf	??_WriteEnvSensor,w
  7077  0A0C  00F4               	movwf	___wmul@multiplier
  7078  0A0D  082E               	movf	??_WriteEnvSensor+1,w
  7079  0A0E  00F5               	movwf	___wmul@multiplier+1
  7080  0A0F  3005               	movlw	5
  7081  0A10  00F6               	movwf	___wmul@multiplicand
  7082  0A11  3000               	movlw	0
  7083  0A12  00F7               	movwf	___wmul@multiplicand+1
  7084  0A13  319F  2772  3189   	fcall	___wmul
  7085  0A16  3078               	movlw	120
  7086  0A17  00AF               	movwf	??_WriteEnvSensor+2
  7087  0A18  3023               	movlw	35
  7088  0A19  00B0               	movwf	??_WriteEnvSensor+3
  7089  0A1A  0874               	movf	?___wmul,w
  7090  0A1B  072F               	addwf	??_WriteEnvSensor+2,w
  7091  0A1C  00A0               	movwf	I2C_MasterWriteTRBBuild@ptrb
  7092  0A1D  0875               	movf	?___wmul+1,w
  7093  0A1E  3D30               	addwfc	??_WriteEnvSensor+3,w
  7094  0A1F  00A1               	movwf	I2C_MasterWriteTRBBuild@ptrb+1
  7095  0A20  3036               	movlw	(low (WriteEnvSensor@local_address| 0))& (0+255)
  7096  0A21  00B1               	movwf	??_WriteEnvSensor+4
  7097  0A22  0831               	movf	??_WriteEnvSensor+4,w
  7098  0A23  00A2               	movwf	I2C_MasterWriteTRBBuild@pdata
  7099  0A24  01A3               	clrf	I2C_MasterWriteTRBBuild@length
  7100  0A25  0AA3               	incf	I2C_MasterWriteTRBBuild@length,f
  7101  0A26  0828               	movf	WriteEnvSensor@dev_id,w
  7102  0A27  00B2               	movwf	??_WriteEnvSensor+5
  7103  0A28  01B3               	clrf	??_WriteEnvSensor+6
  7104  0A29  0832               	movf	??_WriteEnvSensor+5,w
  7105  0A2A  00A4               	movwf	I2C_MasterWriteTRBBuild@address
  7106  0A2B  0833               	movf	??_WriteEnvSensor+6,w
  7107  0A2C  00A5               	movwf	I2C_MasterWriteTRBBuild@address+1
  7108  0A2D  319F  27D9  3189   	fcall	_I2C_MasterWriteTRBBuild
  7109                           
  7110                           ;main.c: 833:         I2C_MasterWriteTRBBuild(&trb[j + 1], &reg_data[i], 1, dev_id);
  7111  0A30  0835               	movf	WriteEnvSensor@j,w
  7112  0A31  00AD               	movwf	??_WriteEnvSensor
  7113  0A32  01AE               	clrf	??_WriteEnvSensor+1
  7114  0A33  082D               	movf	??_WriteEnvSensor,w
  7115  0A34  00F4               	movwf	___wmul@multiplier
  7116  0A35  082E               	movf	??_WriteEnvSensor+1,w
  7117  0A36  00F5               	movwf	___wmul@multiplier+1
  7118  0A37  3005               	movlw	5
  7119  0A38  00F6               	movwf	___wmul@multiplicand
  7120  0A39  3000               	movlw	0
  7121  0A3A  00F7               	movwf	___wmul@multiplicand+1
  7122  0A3B  319F  2772  3189   	fcall	___wmul
  7123  0A3E  307D               	movlw	125
  7124  0A3F  00AF               	movwf	??_WriteEnvSensor+2
  7125  0A40  3023               	movlw	35
  7126  0A41  00B0               	movwf	??_WriteEnvSensor+3
  7127  0A42  0874               	movf	?___wmul,w
  7128  0A43  072F               	addwf	??_WriteEnvSensor+2,w
  7129  0A44  00A0               	movwf	I2C_MasterWriteTRBBuild@ptrb
  7130  0A45  0875               	movf	?___wmul+1,w
  7131  0A46  3D30               	addwfc	??_WriteEnvSensor+3,w
  7132  0A47  00A1               	movwf	I2C_MasterWriteTRBBuild@ptrb+1
  7133  0A48  082A               	movf	WriteEnvSensor@reg_data,w
  7134  0A49  0734               	addwf	WriteEnvSensor@i,w
  7135  0A4A  00B1               	movwf	??_WriteEnvSensor+4
  7136  0A4B  0831               	movf	??_WriteEnvSensor+4,w
  7137  0A4C  00A2               	movwf	I2C_MasterWriteTRBBuild@pdata
  7138  0A4D  01A3               	clrf	I2C_MasterWriteTRBBuild@length
  7139  0A4E  0AA3               	incf	I2C_MasterWriteTRBBuild@length,f
  7140  0A4F  0828               	movf	WriteEnvSensor@dev_id,w
  7141  0A50  00B2               	movwf	??_WriteEnvSensor+5
  7142  0A51  01B3               	clrf	??_WriteEnvSensor+6
  7143  0A52  0832               	movf	??_WriteEnvSensor+5,w
  7144  0A53  00A4               	movwf	I2C_MasterWriteTRBBuild@address
  7145  0A54  0833               	movf	??_WriteEnvSensor+6,w
  7146  0A55  00A5               	movwf	I2C_MasterWriteTRBBuild@address+1
  7147  0A56  319F  27D9  3189   	fcall	_I2C_MasterWriteTRBBuild
  7148                           
  7149                           ;main.c: 834:         local_address++;
  7150  0A59  3001               	movlw	1
  7151  0A5A  00AD               	movwf	??_WriteEnvSensor
  7152  0A5B  082D               	movf	??_WriteEnvSensor,w
  7153  0A5C  07B6               	addwf	WriteEnvSensor@local_address,f
  7154                           
  7155                           ;main.c: 835:     }
  7156  0A5D  3001               	movlw	1
  7157  0A5E  00AD               	movwf	??_WriteEnvSensor
  7158  0A5F  082D               	movf	??_WriteEnvSensor,w
  7159  0A60  07B4               	addwf	WriteEnvSensor@i,f
  7160  0A61  3002               	movlw	2
  7161  0A62  00AD               	movwf	??_WriteEnvSensor
  7162  0A63  082D               	movf	??_WriteEnvSensor,w
  7163  0A64  07B5               	addwf	WriteEnvSensor@j,f
  7164  0A65  29FD               	goto	l2839
  7165  0A66                     l2841:	
  7166                           
  7167                           ;main.c: 836:     I2C_MasterTRBInsert(1, trb, &status);
  7168  0A66  3078               	movlw	120
  7169  0A67  00F4               	movwf	I2C_MasterTRBInsert@ptrb_list
  7170  0A68  3023               	movlw	35
  7171  0A69  00F5               	movwf	I2C_MasterTRBInsert@ptrb_list+1
  7172  0A6A  3037               	movlw	(low (WriteEnvSensor@status| 0))& (0+255)
  7173  0A6B  00AD               	movwf	??_WriteEnvSensor
  7174  0A6C  082D               	movf	??_WriteEnvSensor,w
  7175  0A6D  00F6               	movwf	I2C_MasterTRBInsert@pflag
  7176  0A6E  3001               	movlw	1
  7177  0A6F  3194  244E  3189   	fcall	_I2C_MasterTRBInsert
  7178                           
  7179                           ;main.c: 837:     __g_timeout_start = ticks; while (!!(status == I2C_MESSAGE_PENDING)) {
      +                           if (ticks - __g_timeout_start > 10000) { return -4; } };
  7180  0A72  0021               	movlb	1	; select bank1
  7181  0A73  086D               	movf	(_ticks+3)^(0+128),w
  7182  0A74  0023               	movlb	3	; select bank3
  7183  0A75  00C5               	movwf	(___g_timeout_start+3)^(0+384)
  7184  0A76  0021               	movlb	1	; select bank1
  7185  0A77  086C               	movf	(_ticks+2)^(0+128),w
  7186  0A78  0023               	movlb	3	; select bank3
  7187  0A79  00C4               	movwf	(___g_timeout_start+2)^(0+384)
  7188  0A7A  0021               	movlb	1	; select bank1
  7189  0A7B  086B               	movf	(_ticks+1)^(0+128),w
  7190  0A7C  0023               	movlb	3	; select bank3
  7191  0A7D  00C3               	movwf	(___g_timeout_start+1)^(0+384)
  7192  0A7E  0021               	movlb	1	; select bank1
  7193  0A7F  086A               	movf	_ticks^(0+128),w
  7194  0A80  0023               	movlb	3	; select bank3
  7195  0A81  00C2               	movwf	___g_timeout_start^(0+384)
  7196  0A82                     l2851:	
  7197  0A82  3002               	movlw	2
  7198  0A83  0020               	movlb	0	; select bank0
  7199  0A84  0637               	xorwf	WriteEnvSensor@status,w
  7200  0A85  1D03               	btfss	3,2
  7201  0A86  2AAD               	goto	l2853
  7202  0A87  0023               	movlb	3	; select bank3
  7203  0A88  0842               	movf	___g_timeout_start^(0+384),w
  7204  0A89  0021               	movlb	1	; select bank1
  7205  0A8A  026A               	subwf	_ticks^(0+128),w
  7206  0A8B  0020               	movlb	0	; select bank0
  7207  0A8C  00AD               	movwf	??_WriteEnvSensor
  7208  0A8D  0023               	movlb	3	; select bank3
  7209  0A8E  0843               	movf	(___g_timeout_start+1)^(0+384),w
  7210  0A8F  0021               	movlb	1	; select bank1
  7211  0A90  3B6B               	subwfb	(_ticks+1)^(0+128),w
  7212  0A91  0020               	movlb	0	; select bank0
  7213  0A92  00AE               	movwf	??_WriteEnvSensor+1
  7214  0A93  0023               	movlb	3	; select bank3
  7215  0A94  0844               	movf	(___g_timeout_start+2)^(0+384),w
  7216  0A95  0021               	movlb	1	; select bank1
  7217  0A96  3B6C               	subwfb	(_ticks+2)^(0+128),w
  7218  0A97  0020               	movlb	0	; select bank0
  7219  0A98  00AF               	movwf	??_WriteEnvSensor+2
  7220  0A99  0023               	movlb	3	; select bank3
  7221  0A9A  0845               	movf	(___g_timeout_start+3)^(0+384),w
  7222  0A9B  0021               	movlb	1	; select bank1
  7223  0A9C  3B6D               	subwfb	(_ticks+3)^(0+128),w
  7224  0A9D  0020               	movlb	0	; select bank0
  7225  0A9E  00B0               	movwf	??_WriteEnvSensor+3
  7226  0A9F  0830               	movf	??_WriteEnvSensor+3,w
  7227  0AA0  1D03               	btfss	3,2
  7228  0AA1  2AAB               	goto	l2847
  7229  0AA2  082F               	movf	??_WriteEnvSensor+2,w
  7230  0AA3  1D03               	btfss	3,2
  7231  0AA4  2AAB               	goto	l2847
  7232  0AA5  3011               	movlw	17
  7233  0AA6  022D               	subwf	??_WriteEnvSensor,w
  7234  0AA7  3027               	movlw	39
  7235  0AA8  3B2E               	subwfb	??_WriteEnvSensor+1,w
  7236  0AA9  1C03               	btfss	3,0
  7237  0AAA  2A82               	goto	l2851
  7238  0AAB                     l2847:	
  7239  0AAB  30FC               	movlw	252
  7240  0AAC  0008               	return
  7241  0AAD                     l2853:	
  7242                           
  7243                           ;main.c: 838:     if (status != I2C_MESSAGE_COMPLETE)
  7244  0AAD  0837               	movf	WriteEnvSensor@status,w
  7245  0AAE  1D03               	btfss	3,2
  7246  0AAF  2AAB               	goto	l2847
  7247                           
  7248                           ;main.c: 843:     return 0;
  7249  0AB0  3000               	movlw	0
  7250  0AB1  0008               	return
  7251  0AB2                     __end_of_WriteEnvSensor:	
  7252                           
  7253                           	psect	text11
  7254  1F72                     __ptext11:	
  7255 ;; *************** function ___wmul *****************
  7256 ;; Defined at:
  7257 ;;		line 15 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/Umul16.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;  multiplier      2    4[COMMON] unsigned int 
  7260 ;;  multiplicand    2    6[COMMON] unsigned int 
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;  product         2    8[COMMON] unsigned int 
  7263 ;; Return value:  Size  Location     Type
  7264 ;;                  2    4[COMMON] unsigned int 
  7265 ;; Registers used:
  7266 ;;		wreg, status,2, status,0
  7267 ;; Tracked objects:
  7268 ;;		On entry : 1F/0
  7269 ;;		On exit  : 1F/0
  7270 ;;		Unchanged: 1F/0
  7271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7272 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;Total ram usage:        6 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    3
  7279 ;; This function calls:
  7280 ;;		Nothing
  7281 ;; This function is called by:
  7282 ;;		_WriteEnvSensor
  7283 ;; This function uses a non-reentrant model
  7284 ;;
  7285                           
  7286                           
  7287                           ;psect for function ___wmul
  7288  1F72                     ___wmul:	
  7289                           
  7290                           ;incstack = 0
  7291                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7292  1F72  01F8               	clrf	___wmul@product
  7293  1F73  01F9               	clrf	___wmul@product+1
  7294  1F74                     l2743:	
  7295  1F74  1C74               	btfss	___wmul@multiplier,0
  7296  1F75  2F7A               	goto	l989
  7297  1F76  0876               	movf	___wmul@multiplicand,w
  7298  1F77  07F8               	addwf	___wmul@product,f
  7299  1F78  0877               	movf	___wmul@multiplicand+1,w
  7300  1F79  3DF9               	addwfc	___wmul@product+1,f
  7301  1F7A                     l989:	
  7302  1F7A  3001               	movlw	1
  7303  1F7B                     u1875:	
  7304  1F7B  35F6               	lslf	___wmul@multiplicand,f
  7305  1F7C  0DF7               	rlf	___wmul@multiplicand+1,f
  7306  1F7D  0B89               	decfsz	9,f
  7307  1F7E  2F7B               	goto	u1875
  7308  1F7F  3001               	movlw	1
  7309  1F80                     u1885:	
  7310  1F80  36F5               	lsrf	___wmul@multiplier+1,f
  7311  1F81  0CF4               	rrf	___wmul@multiplier,f
  7312  1F82  0B89               	decfsz	9,f
  7313  1F83  2F80               	goto	u1885
  7314  1F84  0874               	movf	___wmul@multiplier,w
  7315  1F85  0475               	iorwf	___wmul@multiplier+1,w
  7316  1F86  1D03               	btfss	3,2
  7317  1F87  2F74               	goto	l2743
  7318  1F88  0879               	movf	___wmul@product+1,w
  7319  1F89  00F5               	movwf	?___wmul+1
  7320  1F8A  0878               	movf	___wmul@product,w
  7321  1F8B  00F4               	movwf	?___wmul
  7322  1F8C  0008               	return
  7323  1F8D                     __end_of___wmul:	
  7324                           
  7325                           	psect	text12
  7326  07C4                     __ptext12:	
  7327 ;; *************** function _Sleep *****************
  7328 ;; Defined at:
  7329 ;;		line 257 in file "main.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;  ms              4    4[COMMON] unsigned long 
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;  start           4    4[BANK0 ] unsigned long 
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  1    wreg      void 
  7336 ;; Registers used:
  7337 ;;		wreg
  7338 ;; Tracked objects:
  7339 ;;		On entry : 1F/0
  7340 ;;		On exit  : 1F/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7343 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;Total ram usage:       12 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    3
  7350 ;; This function calls:
  7351 ;;		Nothing
  7352 ;; This function is called by:
  7353 ;;		_main
  7354 ;;		_bme280_soft_reset
  7355 ;;		_bme280_init
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           
  7360                           ;psect for function _Sleep
  7361  07C4                     _Sleep:	
  7362                           
  7363                           ;main.c: 257: void Sleep(uint32_t ms);main.c: 258: {;main.c: 259:     unsigned long star
      +                          t = ticks;
  7364                           
  7365                           ;incstack = 0
  7366                           ; Regs used in _Sleep: [wreg]
  7367  07C4  0021               	movlb	1	; select bank1
  7368  07C5  086D               	movf	(_ticks+3)^(0+128),w
  7369  07C6  0020               	movlb	0	; select bank0
  7370  07C7  00A7               	movwf	Sleep@start+3
  7371  07C8  0021               	movlb	1	; select bank1
  7372  07C9  086C               	movf	(_ticks+2)^(0+128),w
  7373  07CA  0020               	movlb	0	; select bank0
  7374  07CB  00A6               	movwf	Sleep@start+2
  7375  07CC  0021               	movlb	1	; select bank1
  7376  07CD  086B               	movf	(_ticks+1)^(0+128),w
  7377  07CE  0020               	movlb	0	; select bank0
  7378  07CF  00A5               	movwf	Sleep@start+1
  7379  07D0  0021               	movlb	1	; select bank1
  7380  07D1  086A               	movf	_ticks^(0+128),w
  7381  07D2  0020               	movlb	0	; select bank0
  7382  07D3  00A4               	movwf	Sleep@start
  7383  07D4                     l721:	
  7384                           ;main.c: 263:     }
  7385                           
  7386                           ;main.c: 260:     while (ticks - start < ms)
  7387                           
  7388                           
  7389                           ;main.c: 260:     while (ticks - start < ms)
  7390  07D4  0020               	movlb	0	; select bank0
  7391  07D5  0824               	movf	Sleep@start,w
  7392  07D6  0021               	movlb	1	; select bank1
  7393  07D7  026A               	subwf	_ticks^(0+128),w
  7394  07D8  0020               	movlb	0	; select bank0
  7395  07D9  00A0               	movwf	??_Sleep
  7396  07DA  0825               	movf	Sleep@start+1,w
  7397  07DB  0021               	movlb	1	; select bank1
  7398  07DC  3B6B               	subwfb	(_ticks+1)^(0+128),w
  7399  07DD  0020               	movlb	0	; select bank0
  7400  07DE  00A1               	movwf	??_Sleep+1
  7401  07DF  0826               	movf	Sleep@start+2,w
  7402  07E0  0021               	movlb	1	; select bank1
  7403  07E1  3B6C               	subwfb	(_ticks+2)^(0+128),w
  7404  07E2  0020               	movlb	0	; select bank0
  7405  07E3  00A2               	movwf	??_Sleep+2
  7406  07E4  0827               	movf	Sleep@start+3,w
  7407  07E5  0021               	movlb	1	; select bank1
  7408  07E6  3B6D               	subwfb	(_ticks+3)^(0+128),w
  7409  07E7  0020               	movlb	0	; select bank0
  7410  07E8  00A3               	movwf	??_Sleep+3
  7411  07E9  0877               	movf	Sleep@ms+3,w
  7412  07EA  0223               	subwf	??_Sleep+3,w
  7413  07EB  1D03               	skipz
  7414  07EC  2FF7               	goto	u2565
  7415  07ED  0876               	movf	Sleep@ms+2,w
  7416  07EE  0222               	subwf	??_Sleep+2,w
  7417  07EF  1D03               	skipz
  7418  07F0  2FF7               	goto	u2565
  7419  07F1  0875               	movf	Sleep@ms+1,w
  7420  07F2  0221               	subwf	??_Sleep+1,w
  7421  07F3  1D03               	skipz
  7422  07F4  2FF7               	goto	u2565
  7423  07F5  0874               	movf	Sleep@ms,w
  7424  07F6  0220               	subwf	??_Sleep,w
  7425  07F7                     u2565:	
  7426  07F7  1803               	btfsc	3,0
  7427  07F8  0008               	return
  7428                           
  7429                           ;main.c: 261:     {;main.c: 262:         _delay((unsigned long)((1)*(4000000/4000.0)));
  7430  07F9  30C8               	movlw	200
  7431  07FA                     u3697:	
  7432  07FA  3200               	nop2
  7433  07FB  0B89               	decfsz	9,f
  7434  07FC  2FFA               	goto	u3697
  7435  07FD  2FD4               	goto	l721
  7436  07FE                     __end_of_Sleep:	
  7437                           
  7438                           	psect	text13
  7439  14A0                     __ptext13:	
  7440 ;; *************** function _bme280_get_sensor_data *****************
  7441 ;; Defined at:
  7442 ;;		line 660 in file "BME280_driver/bme280.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;  sensor_comp     1    wreg     unsigned char 
  7445 ;;  comp_data       1   67[BANK0 ] PTR struct bme280_data
  7446 ;;		 -> main@sensor_data(12), 
  7447 ;;  dev             1   68[BANK0 ] PTR struct bme280_dev
  7448 ;;		 -> main@env_sensor(51), 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  sensor_comp     1   53[BANK1 ] unsigned char 
  7451 ;;  uncomp_data    12   55[BANK1 ] struct bme280_uncomp_dat
  7452 ;;  reg_data        8   45[BANK1 ] unsigned char [8]
  7453 ;;  rslt            1   54[BANK1 ] char 
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1    wreg      char 
  7456 ;; Registers used:
  7457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7458 ;; Tracked objects:
  7459 ;;		On entry : 1F/0
  7460 ;;		On exit  : 1E/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7463 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7464 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Totals:         0       5      22       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;Total ram usage:       27 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; Hardware stack levels required when called:    8
  7470 ;; This function calls:
  7471 ;;		_bme280_compensate_data
  7472 ;;		_bme280_get_regs
  7473 ;;		_bme280_parse_sensor_data
  7474 ;;		_null_ptr_check
  7475 ;; This function is called by:
  7476 ;;		_main
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function _bme280_get_sensor_data
  7482  14A0                     _bme280_get_sensor_data:	
  7483                           
  7484                           ;incstack = 0
  7485                           ; Regs used in _bme280_get_sensor_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7486                           ;bme280_get_sensor_data@sensor_comp stored from wreg
  7487  14A0  0021               	movlb	1	; select bank1
  7488  14A1  00D5               	movwf	bme280_get_sensor_data@sensor_comp^(0+128)
  7489                           
  7490                           ;BME280_driver/bme280.c: 660: int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct 
      +                          bme280_data *comp_data, struct bme280_dev *dev);BME280_driver/bme280.c: 661: {;BME280_dr
      +                          iver/bme280.c: 662:     int8_t rslt;;BME280_driver/bme280.c: 667:     uint8_t reg_data[8
      +                          ] = { 0 };
  7491  14A2  30CD               	movlw	low bme280_get_sensor_data@reg_data
  7492  14A3  0086               	movwf	6
  7493  14A4  3000               	movlw	high bme280_get_sensor_data@reg_data
  7494  14A5  0087               	movwf	7
  7495  14A6  3008               	movlw	8
  7496  14A7  0020               	movlb	0	; select bank0
  7497  14A8  00E5               	movwf	??_bme280_get_sensor_data
  7498  14A9  3000               	movlw	0
  7499  14AA                     u3120:	
  7500  14AA  001E               	movwi fsr1++
  7501  14AB  0BE5               	decfsz	??_bme280_get_sensor_data,f
  7502  14AC  2CAA               	goto	u3120
  7503                           
  7504                           ;BME280_driver/bme280.c: 668:     struct bme280_uncomp_data uncomp_data = { 0 };
  7505  14AD  30A0               	movlw	low bme280_get_sensor_data@F273
  7506  14AE  0086               	movwf	6
  7507  14AF  3001               	movlw	high bme280_get_sensor_data@F273
  7508  14B0  0087               	movwf	7
  7509  14B1  30D7               	movlw	low bme280_get_sensor_data@uncomp_data
  7510  14B2  0084               	movwf	4
  7511  14B3  3000               	movlw	high bme280_get_sensor_data@uncomp_data
  7512  14B4  0085               	movwf	5
  7513  14B5  300C               	movlw	12
  7514  14B6  00E5               	movwf	??_bme280_get_sensor_data
  7515  14B7                     u3130:	
  7516  14B7  0016               	moviw fsr1++
  7517  14B8  001A               	movwi fsr0++
  7518  14B9  0BE5               	decfsz	??_bme280_get_sensor_data,f
  7519  14BA  2CB7               	goto	u3130
  7520                           
  7521                           ;BME280_driver/bme280.c: 671:     rslt = null_ptr_check(dev);
  7522  14BB  0864               	movf	bme280_get_sensor_data@dev,w
  7523  14BC  319F  278D  3194   	fcall	_null_ptr_check
  7524  14BF  00E5               	movwf	??_bme280_get_sensor_data
  7525  14C0  0865               	movf	??_bme280_get_sensor_data,w
  7526  14C1  0021               	movlb	1	; select bank1
  7527  14C2  00D6               	movwf	bme280_get_sensor_data@rslt^(0+128)
  7528                           
  7529                           ;BME280_driver/bme280.c: 672:     if ((rslt == 0) && (comp_data != ((void*)0)))
  7530  14C3  0856               	movf	bme280_get_sensor_data@rslt^(0+128),w
  7531  14C4  1D03               	btfss	3,2
  7532  14C5  0008               	return
  7533  14C6  0020               	movlb	0	; select bank0
  7534  14C7  0863               	movf	bme280_get_sensor_data@comp_data,w
  7535  14C8  1903               	btfsc	3,2
  7536  14C9  0008               	return
  7537                           
  7538                           ;BME280_driver/bme280.c: 673:     {;BME280_driver/bme280.c: 675:         rslt = bme280_g
      +                          et_regs(0xF7, reg_data, 8, dev);
  7539  14CA  30CD               	movlw	(low (bme280_get_sensor_data@reg_data| 0))& (0+255)
  7540  14CB  00E5               	movwf	??_bme280_get_sensor_data
  7541  14CC  0865               	movf	??_bme280_get_sensor_data,w
  7542  14CD  00BB               	movwf	bme280_get_regs@reg_data
  7543  14CE  3008               	movlw	8
  7544  14CF  00BC               	movwf	bme280_get_regs@len
  7545  14D0  3000               	movlw	0
  7546  14D1  00BD               	movwf	bme280_get_regs@len+1
  7547  14D2  0864               	movf	bme280_get_sensor_data@dev,w
  7548  14D3  00E6               	movwf	??_bme280_get_sensor_data+1
  7549  14D4  0866               	movf	??_bme280_get_sensor_data+1,w
  7550  14D5  00BE               	movwf	bme280_get_regs@dev
  7551  14D6  30F7               	movlw	247
  7552  14D7  3192  2249  3194   	fcall	_bme280_get_regs
  7553  14DA  00E7               	movwf	??_bme280_get_sensor_data+2
  7554  14DB  0867               	movf	??_bme280_get_sensor_data+2,w
  7555  14DC  0021               	movlb	1	; select bank1
  7556  14DD  00D6               	movwf	bme280_get_sensor_data@rslt^(0+128)
  7557                           
  7558                           ;BME280_driver/bme280.c: 676:         if (rslt == 0)
  7559  14DE  0856               	movf	bme280_get_sensor_data@rslt^(0+128),w
  7560  14DF  1D03               	btfss	3,2
  7561  14E0  0008               	return
  7562                           
  7563                           ;BME280_driver/bme280.c: 677:         {;BME280_driver/bme280.c: 679:             bme280_
      +                          parse_sensor_data(reg_data, &uncomp_data);
  7564  14E1  30D7               	movlw	(low (bme280_get_sensor_data@uncomp_data| 0))& (0+255)
  7565  14E2  0020               	movlb	0	; select bank0
  7566  14E3  00E5               	movwf	??_bme280_get_sensor_data
  7567  14E4  0865               	movf	??_bme280_get_sensor_data,w
  7568  14E5  00F4               	movwf	bme280_parse_sensor_data@uncomp_data
  7569  14E6  30CD               	movlw	(low (bme280_get_sensor_data@reg_data| 0))& (0+255)
  7570  14E7  318B  23A7  3194   	fcall	_bme280_parse_sensor_data
  7571  14EA  30D7               	movlw	(low (bme280_get_sensor_data@uncomp_data| 0))& (0+255)
  7572  14EB  00E5               	movwf	??_bme280_get_sensor_data
  7573  14EC  0865               	movf	??_bme280_get_sensor_data,w
  7574  14ED  00DD               	movwf	bme280_compensate_data@uncomp_data
  7575  14EE  0863               	movf	bme280_get_sensor_data@comp_data,w
  7576  14EF  00E6               	movwf	??_bme280_get_sensor_data+1
  7577  14F0  0866               	movf	??_bme280_get_sensor_data+1,w
  7578  14F1  00DE               	movwf	bme280_compensate_data@comp_data
  7579  14F2  0864               	movf	bme280_get_sensor_data@dev,w
  7580  14F3  3E09               	addlw	9
  7581  14F4  00E7               	movwf	??_bme280_get_sensor_data+2
  7582  14F5  0867               	movf	??_bme280_get_sensor_data+2,w
  7583  14F6  00DF               	movwf	bme280_compensate_data@calib_data
  7584  14F7  0021               	movlb	1	; select bank1
  7585  14F8  0855               	movf	bme280_get_sensor_data@sensor_comp^(0+128),w
  7586  14F9  3194  24FC         	fcall	_bme280_compensate_data
  7587  14FB  0008               	return
  7588  14FC                     __end_of_bme280_get_sensor_data:	
  7589                           ;BME280_driver/bme280.c: 687:     else
  7590                           
  7591                           
  7592                           	psect	text14
  7593  0BA7                     __ptext14:	
  7594 ;; *************** function _bme280_parse_sensor_data *****************
  7595 ;; Defined at:
  7596 ;;		line 699 in file "BME280_driver/bme280.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;  reg_data        1    wreg     PTR const unsigned char 
  7599 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7600 ;;  uncomp_data     1    4[COMMON] PTR struct bme280_uncomp
  7601 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;  reg_data        1   20[BANK0 ] PTR const unsigned char 
  7604 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7605 ;;  data_msb        4   16[BANK0 ] unsigned long 
  7606 ;;  data_lsb        4   12[BANK0 ] unsigned long 
  7607 ;;  data_xlsb       4    8[BANK0 ] unsigned long 
  7608 ;; Return value:  Size  Location     Type
  7609 ;;                  1    wreg      void 
  7610 ;; Registers used:
  7611 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7612 ;; Tracked objects:
  7613 ;;		On entry : 1F/0
  7614 ;;		On exit  : 1F/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7617 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Totals:         1      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;Total ram usage:       22 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; Hardware stack levels required when called:    3
  7624 ;; This function calls:
  7625 ;;		Nothing
  7626 ;; This function is called by:
  7627 ;;		_bme280_get_sensor_data
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631                           
  7632                           ;psect for function _bme280_parse_sensor_data
  7633  0BA7                     _bme280_parse_sensor_data:	
  7634                           
  7635                           ;incstack = 0
  7636                           ; Regs used in _bme280_parse_sensor_data: [wreg+fsr1l+fsr1h+status,2+status,0]
  7637                           ;bme280_parse_sensor_data@reg_data stored from wreg
  7638  0BA7  00B4               	movwf	bme280_parse_sensor_data@reg_data
  7639                           
  7640                           ;BME280_driver/bme280.c: 699: void bme280_parse_sensor_data(const uint8_t *reg_data, str
      +                          uct bme280_uncomp_data *uncomp_data);BME280_driver/bme280.c: 700: {;BME280_driver/bme280
      +                          .c: 702:     uint32_t data_xlsb;;BME280_driver/bme280.c: 703:     uint32_t data_lsb;;BME
      +                          280_driver/bme280.c: 704:     uint32_t data_msb;;BME280_driver/bme280.c: 707:     data_m
      +                          sb = (uint32_t)reg_data[0] << 12;
  7641  0BA8  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7642  0BA9  0086               	movwf	6
  7643  0BAA  0187               	clrf	7
  7644  0BAB  0801               	movf	1,w
  7645  0BAC  00A0               	movwf	??_bme280_parse_sensor_data
  7646  0BAD  01A1               	clrf	??_bme280_parse_sensor_data+1
  7647  0BAE  01A2               	clrf	??_bme280_parse_sensor_data+2
  7648  0BAF  01A3               	clrf	??_bme280_parse_sensor_data+3
  7649  0BB0  300C               	movlw	12
  7650  0BB1                     u2725:	
  7651  0BB1  35A0               	lslf	??_bme280_parse_sensor_data,f
  7652  0BB2  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7653  0BB3  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7654  0BB4  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7655  0BB5  0B89               	decfsz	9,f
  7656  0BB6  2BB1               	goto	u2725
  7657  0BB7  0823               	movf	??_bme280_parse_sensor_data+3,w
  7658  0BB8  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  7659  0BB9  0822               	movf	??_bme280_parse_sensor_data+2,w
  7660  0BBA  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  7661  0BBB  0821               	movf	??_bme280_parse_sensor_data+1,w
  7662  0BBC  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  7663  0BBD  0820               	movf	??_bme280_parse_sensor_data,w
  7664  0BBE  00B0               	movwf	bme280_parse_sensor_data@data_msb
  7665                           
  7666                           ;BME280_driver/bme280.c: 708:     data_lsb = (uint32_t)reg_data[1] << 4;
  7667  0BBF  0A34               	incf	bme280_parse_sensor_data@reg_data,w
  7668  0BC0  0086               	movwf	6
  7669  0BC1  0187               	clrf	7
  7670  0BC2  0801               	movf	1,w
  7671  0BC3  00A0               	movwf	??_bme280_parse_sensor_data
  7672  0BC4  01A1               	clrf	??_bme280_parse_sensor_data+1
  7673  0BC5  01A2               	clrf	??_bme280_parse_sensor_data+2
  7674  0BC6  01A3               	clrf	??_bme280_parse_sensor_data+3
  7675  0BC7  3004               	movlw	4
  7676  0BC8                     u2735:	
  7677  0BC8  35A0               	lslf	??_bme280_parse_sensor_data,f
  7678  0BC9  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7679  0BCA  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7680  0BCB  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7681  0BCC  0B89               	decfsz	9,f
  7682  0BCD  2BC8               	goto	u2735
  7683  0BCE  0823               	movf	??_bme280_parse_sensor_data+3,w
  7684  0BCF  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  7685  0BD0  0822               	movf	??_bme280_parse_sensor_data+2,w
  7686  0BD1  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  7687  0BD2  0821               	movf	??_bme280_parse_sensor_data+1,w
  7688  0BD3  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  7689  0BD4  0820               	movf	??_bme280_parse_sensor_data,w
  7690  0BD5  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  7691                           
  7692                           ;BME280_driver/bme280.c: 709:     data_xlsb = (uint32_t)reg_data[2] >> 4;
  7693  0BD6  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7694  0BD7  3E02               	addlw	2
  7695  0BD8  0086               	movwf	6
  7696  0BD9  0187               	clrf	7
  7697  0BDA  0801               	movf	1,w
  7698  0BDB  00A0               	movwf	??_bme280_parse_sensor_data
  7699  0BDC  3004               	movlw	4
  7700  0BDD                     u2745:	
  7701  0BDD  36A0               	lsrf	??_bme280_parse_sensor_data,f
  7702  0BDE  0B89               	decfsz	9,f
  7703  0BDF  2BDD               	goto	u2745
  7704  0BE0  0820               	movf	??_bme280_parse_sensor_data,w
  7705  0BE1  00A1               	movwf	??_bme280_parse_sensor_data+1
  7706  0BE2  01A2               	clrf	??_bme280_parse_sensor_data+2
  7707  0BE3  01A3               	clrf	??_bme280_parse_sensor_data+3
  7708  0BE4  01A4               	clrf	??_bme280_parse_sensor_data+4
  7709  0BE5  0824               	movf	??_bme280_parse_sensor_data+4,w
  7710  0BE6  00AB               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7711  0BE7  0823               	movf	??_bme280_parse_sensor_data+3,w
  7712  0BE8  00AA               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7713  0BE9  0822               	movf	??_bme280_parse_sensor_data+2,w
  7714  0BEA  00A9               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7715  0BEB  0821               	movf	??_bme280_parse_sensor_data+1,w
  7716  0BEC  00A8               	movwf	bme280_parse_sensor_data@data_xlsb
  7717                           
  7718                           ;BME280_driver/bme280.c: 710:     uncomp_data->pressure = data_msb | data_lsb | data_xls
      +                          b;
  7719  0BED  0828               	movf	bme280_parse_sensor_data@data_xlsb,w
  7720  0BEE  00A0               	movwf	??_bme280_parse_sensor_data
  7721  0BEF  0829               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7722  0BF0  00A1               	movwf	??_bme280_parse_sensor_data+1
  7723  0BF1  082A               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7724  0BF2  00A2               	movwf	??_bme280_parse_sensor_data+2
  7725  0BF3  082B               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7726  0BF4  00A3               	movwf	??_bme280_parse_sensor_data+3
  7727  0BF5  0830               	movf	bme280_parse_sensor_data@data_msb,w
  7728  0BF6  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7729  0BF7  00A4               	movwf	??_bme280_parse_sensor_data+4
  7730  0BF8  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  7731  0BF9  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7732  0BFA  00A5               	movwf	??_bme280_parse_sensor_data+5
  7733  0BFB  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  7734  0BFC  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7735  0BFD  00A6               	movwf	??_bme280_parse_sensor_data+6
  7736  0BFE  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  7737  0BFF  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7738  0C00  00A7               	movwf	??_bme280_parse_sensor_data+7
  7739  0C01  0824               	movf	??_bme280_parse_sensor_data+4,w
  7740  0C02  04A0               	iorwf	??_bme280_parse_sensor_data,f
  7741  0C03  0825               	movf	??_bme280_parse_sensor_data+5,w
  7742  0C04  04A1               	iorwf	??_bme280_parse_sensor_data+1,f
  7743  0C05  0826               	movf	??_bme280_parse_sensor_data+6,w
  7744  0C06  04A2               	iorwf	??_bme280_parse_sensor_data+2,f
  7745  0C07  0827               	movf	??_bme280_parse_sensor_data+7,w
  7746  0C08  04A3               	iorwf	??_bme280_parse_sensor_data+3,f
  7747  0C09  0874               	movf	bme280_parse_sensor_data@uncomp_data,w
  7748  0C0A  0086               	movwf	6
  7749  0C0B  0187               	clrf	7
  7750  0C0C  0820               	movf	??_bme280_parse_sensor_data,w
  7751  0C0D  3FC0               	movwi [0]fsr1
  7752  0C0E  0821               	movf	??_bme280_parse_sensor_data+1,w
  7753  0C0F  3FC1               	movwi [1]fsr1
  7754  0C10  0822               	movf	??_bme280_parse_sensor_data+2,w
  7755  0C11  3FC2               	movwi [2]fsr1
  7756  0C12  0823               	movf	??_bme280_parse_sensor_data+3,w
  7757  0C13  3FC3               	movwi [3]fsr1
  7758                           
  7759                           ;BME280_driver/bme280.c: 713:     data_msb = (uint32_t)reg_data[3] << 12;
  7760  0C14  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7761  0C15  3E03               	addlw	3
  7762  0C16  0086               	movwf	6
  7763  0C17  0187               	clrf	7
  7764  0C18  0801               	movf	1,w
  7765  0C19  00A0               	movwf	??_bme280_parse_sensor_data
  7766  0C1A  01A1               	clrf	??_bme280_parse_sensor_data+1
  7767  0C1B  01A2               	clrf	??_bme280_parse_sensor_data+2
  7768  0C1C  01A3               	clrf	??_bme280_parse_sensor_data+3
  7769  0C1D  300C               	movlw	12
  7770  0C1E                     u2755:	
  7771  0C1E  35A0               	lslf	??_bme280_parse_sensor_data,f
  7772  0C1F  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7773  0C20  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7774  0C21  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7775  0C22  0B89               	decfsz	9,f
  7776  0C23  2C1E               	goto	u2755
  7777  0C24  0823               	movf	??_bme280_parse_sensor_data+3,w
  7778  0C25  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  7779  0C26  0822               	movf	??_bme280_parse_sensor_data+2,w
  7780  0C27  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  7781  0C28  0821               	movf	??_bme280_parse_sensor_data+1,w
  7782  0C29  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  7783  0C2A  0820               	movf	??_bme280_parse_sensor_data,w
  7784  0C2B  00B0               	movwf	bme280_parse_sensor_data@data_msb
  7785                           
  7786                           ;BME280_driver/bme280.c: 714:     data_lsb = (uint32_t)reg_data[4] << 4;
  7787  0C2C  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7788  0C2D  3E04               	addlw	4
  7789  0C2E  0086               	movwf	6
  7790  0C2F  0187               	clrf	7
  7791  0C30  0801               	movf	1,w
  7792  0C31  00A0               	movwf	??_bme280_parse_sensor_data
  7793  0C32  01A1               	clrf	??_bme280_parse_sensor_data+1
  7794  0C33  01A2               	clrf	??_bme280_parse_sensor_data+2
  7795  0C34  01A3               	clrf	??_bme280_parse_sensor_data+3
  7796  0C35  3004               	movlw	4
  7797  0C36                     u2765:	
  7798  0C36  35A0               	lslf	??_bme280_parse_sensor_data,f
  7799  0C37  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7800  0C38  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7801  0C39  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7802  0C3A  0B89               	decfsz	9,f
  7803  0C3B  2C36               	goto	u2765
  7804  0C3C  0823               	movf	??_bme280_parse_sensor_data+3,w
  7805  0C3D  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  7806  0C3E  0822               	movf	??_bme280_parse_sensor_data+2,w
  7807  0C3F  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  7808  0C40  0821               	movf	??_bme280_parse_sensor_data+1,w
  7809  0C41  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  7810  0C42  0820               	movf	??_bme280_parse_sensor_data,w
  7811  0C43  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  7812                           
  7813                           ;BME280_driver/bme280.c: 715:     data_xlsb = (uint32_t)reg_data[5] >> 4;
  7814  0C44  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7815  0C45  3E05               	addlw	5
  7816  0C46  0086               	movwf	6
  7817  0C47  0187               	clrf	7
  7818  0C48  0801               	movf	1,w
  7819  0C49  00A0               	movwf	??_bme280_parse_sensor_data
  7820  0C4A  3004               	movlw	4
  7821  0C4B                     u2775:	
  7822  0C4B  36A0               	lsrf	??_bme280_parse_sensor_data,f
  7823  0C4C  0B89               	decfsz	9,f
  7824  0C4D  2C4B               	goto	u2775
  7825  0C4E  0820               	movf	??_bme280_parse_sensor_data,w
  7826  0C4F  00A1               	movwf	??_bme280_parse_sensor_data+1
  7827  0C50  01A2               	clrf	??_bme280_parse_sensor_data+2
  7828  0C51  01A3               	clrf	??_bme280_parse_sensor_data+3
  7829  0C52  01A4               	clrf	??_bme280_parse_sensor_data+4
  7830  0C53  0824               	movf	??_bme280_parse_sensor_data+4,w
  7831  0C54  00AB               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7832  0C55  0823               	movf	??_bme280_parse_sensor_data+3,w
  7833  0C56  00AA               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7834  0C57  0822               	movf	??_bme280_parse_sensor_data+2,w
  7835  0C58  00A9               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7836  0C59  0821               	movf	??_bme280_parse_sensor_data+1,w
  7837  0C5A  00A8               	movwf	bme280_parse_sensor_data@data_xlsb
  7838                           
  7839                           ;BME280_driver/bme280.c: 716:     uncomp_data->temperature = data_msb | data_lsb | data_
      +                          xlsb;
  7840  0C5B  0828               	movf	bme280_parse_sensor_data@data_xlsb,w
  7841  0C5C  00A0               	movwf	??_bme280_parse_sensor_data
  7842  0C5D  0829               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7843  0C5E  00A1               	movwf	??_bme280_parse_sensor_data+1
  7844  0C5F  082A               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7845  0C60  00A2               	movwf	??_bme280_parse_sensor_data+2
  7846  0C61  082B               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7847  0C62  00A3               	movwf	??_bme280_parse_sensor_data+3
  7848  0C63  0830               	movf	bme280_parse_sensor_data@data_msb,w
  7849  0C64  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7850  0C65  00A4               	movwf	??_bme280_parse_sensor_data+4
  7851  0C66  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  7852  0C67  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7853  0C68  00A5               	movwf	??_bme280_parse_sensor_data+5
  7854  0C69  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  7855  0C6A  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7856  0C6B  00A6               	movwf	??_bme280_parse_sensor_data+6
  7857  0C6C  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  7858  0C6D  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7859  0C6E  00A7               	movwf	??_bme280_parse_sensor_data+7
  7860  0C6F  0824               	movf	??_bme280_parse_sensor_data+4,w
  7861  0C70  04A0               	iorwf	??_bme280_parse_sensor_data,f
  7862  0C71  0825               	movf	??_bme280_parse_sensor_data+5,w
  7863  0C72  04A1               	iorwf	??_bme280_parse_sensor_data+1,f
  7864  0C73  0826               	movf	??_bme280_parse_sensor_data+6,w
  7865  0C74  04A2               	iorwf	??_bme280_parse_sensor_data+2,f
  7866  0C75  0827               	movf	??_bme280_parse_sensor_data+7,w
  7867  0C76  04A3               	iorwf	??_bme280_parse_sensor_data+3,f
  7868  0C77  0874               	movf	bme280_parse_sensor_data@uncomp_data,w
  7869  0C78  3E04               	addlw	4
  7870  0C79  0086               	movwf	6
  7871  0C7A  0187               	clrf	7
  7872  0C7B  0820               	movf	??_bme280_parse_sensor_data,w
  7873  0C7C  3FC0               	movwi [0]fsr1
  7874  0C7D  0821               	movf	??_bme280_parse_sensor_data+1,w
  7875  0C7E  3FC1               	movwi [1]fsr1
  7876  0C7F  0822               	movf	??_bme280_parse_sensor_data+2,w
  7877  0C80  3FC2               	movwi [2]fsr1
  7878  0C81  0823               	movf	??_bme280_parse_sensor_data+3,w
  7879  0C82  3FC3               	movwi [3]fsr1
  7880                           
  7881                           ;BME280_driver/bme280.c: 719:     data_lsb = (uint32_t)reg_data[6] << 8;
  7882  0C83  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7883  0C84  3E06               	addlw	6
  7884  0C85  0086               	movwf	6
  7885  0C86  0187               	clrf	7
  7886  0C87  0801               	movf	1,w
  7887  0C88  00A0               	movwf	??_bme280_parse_sensor_data
  7888  0C89  01A1               	clrf	??_bme280_parse_sensor_data+1
  7889  0C8A  01A2               	clrf	??_bme280_parse_sensor_data+2
  7890  0C8B  01A3               	clrf	??_bme280_parse_sensor_data+3
  7891  0C8C  3008               	movlw	8
  7892  0C8D                     u2785:	
  7893  0C8D  35A0               	lslf	??_bme280_parse_sensor_data,f
  7894  0C8E  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7895  0C8F  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7896  0C90  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7897  0C91  0B89               	decfsz	9,f
  7898  0C92  2C8D               	goto	u2785
  7899  0C93  0823               	movf	??_bme280_parse_sensor_data+3,w
  7900  0C94  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  7901  0C95  0822               	movf	??_bme280_parse_sensor_data+2,w
  7902  0C96  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  7903  0C97  0821               	movf	??_bme280_parse_sensor_data+1,w
  7904  0C98  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  7905  0C99  0820               	movf	??_bme280_parse_sensor_data,w
  7906  0C9A  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  7907                           
  7908                           ;BME280_driver/bme280.c: 720:     data_msb = (uint32_t)reg_data[7];
  7909  0C9B  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7910  0C9C  3E07               	addlw	7
  7911  0C9D  0086               	movwf	6
  7912  0C9E  0187               	clrf	7
  7913  0C9F  0801               	movf	1,w
  7914  0CA0  00A0               	movwf	??_bme280_parse_sensor_data
  7915  0CA1  01A1               	clrf	??_bme280_parse_sensor_data+1
  7916  0CA2  01A2               	clrf	??_bme280_parse_sensor_data+2
  7917  0CA3  01A3               	clrf	??_bme280_parse_sensor_data+3
  7918  0CA4  0823               	movf	??_bme280_parse_sensor_data+3,w
  7919  0CA5  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  7920  0CA6  0822               	movf	??_bme280_parse_sensor_data+2,w
  7921  0CA7  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  7922  0CA8  0821               	movf	??_bme280_parse_sensor_data+1,w
  7923  0CA9  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  7924  0CAA  0820               	movf	??_bme280_parse_sensor_data,w
  7925  0CAB  00B0               	movwf	bme280_parse_sensor_data@data_msb
  7926                           
  7927                           ;BME280_driver/bme280.c: 721:     uncomp_data->humidity = data_msb | data_lsb;
  7928  0CAC  0830               	movf	bme280_parse_sensor_data@data_msb,w
  7929  0CAD  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7930  0CAE  00A0               	movwf	??_bme280_parse_sensor_data
  7931  0CAF  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  7932  0CB0  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7933  0CB1  00A1               	movwf	??_bme280_parse_sensor_data+1
  7934  0CB2  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  7935  0CB3  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7936  0CB4  00A2               	movwf	??_bme280_parse_sensor_data+2
  7937  0CB5  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  7938  0CB6  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7939  0CB7  00A3               	movwf	??_bme280_parse_sensor_data+3
  7940  0CB8  0874               	movf	bme280_parse_sensor_data@uncomp_data,w
  7941  0CB9  3E08               	addlw	8
  7942  0CBA  0086               	movwf	6
  7943  0CBB  0187               	clrf	7
  7944  0CBC  0820               	movf	??_bme280_parse_sensor_data,w
  7945  0CBD  3FC0               	movwi [0]fsr1
  7946  0CBE  0821               	movf	??_bme280_parse_sensor_data+1,w
  7947  0CBF  3FC1               	movwi [1]fsr1
  7948  0CC0  0822               	movf	??_bme280_parse_sensor_data+2,w
  7949  0CC1  3FC2               	movwi [2]fsr1
  7950  0CC2  0823               	movf	??_bme280_parse_sensor_data+3,w
  7951  0CC3  3FC3               	movwi [3]fsr1
  7952  0CC4  0008               	return
  7953  0CC5                     __end_of_bme280_parse_sensor_data:	
  7954                           
  7955                           	psect	text15
  7956  1249                     __ptext15:	
  7957 ;; *************** function _bme280_get_regs *****************
  7958 ;; Defined at:
  7959 ;;		line 409 in file "BME280_driver/bme280.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  reg_addr        1    wreg     unsigned char 
  7962 ;;  reg_data        1   27[BANK0 ] PTR unsigned char 
  7963 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  7964 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  7965 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  7966 ;;  len             2   28[BANK0 ] unsigned short 
  7967 ;;  dev             1   30[BANK0 ] PTR const struct bme280_
  7968 ;;		 -> main@env_sensor(51), 
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;  reg_addr        1   34[BANK0 ] unsigned char 
  7971 ;;  rslt            1   35[BANK0 ] char 
  7972 ;; Return value:  Size  Location     Type
  7973 ;;                  1    wreg      char 
  7974 ;; Registers used:
  7975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7976 ;; Tracked objects:
  7977 ;;		On entry : 1F/0
  7978 ;;		On exit  : 1F/0
  7979 ;;		Unchanged: 0/0
  7980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7981 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;Total ram usage:        9 bytes
  7986 ;; Hardware stack levels used:    1
  7987 ;; Hardware stack levels required when called:    7
  7988 ;; This function calls:
  7989 ;;		_ReadEnvSensor
  7990 ;;		_null_ptr_check
  7991 ;; This function is called by:
  7992 ;;		_bme280_init
  7993 ;;		_bme280_get_sensor_data
  7994 ;;		_get_calib_data
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           
  7999                           ;psect for function _bme280_get_regs
  8000  1249                     _bme280_get_regs:	
  8001                           
  8002                           ;incstack = 0
  8003                           ; Regs used in _bme280_get_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8004                           ;bme280_get_regs@reg_addr stored from wreg
  8005  1249  00C2               	movwf	bme280_get_regs@reg_addr
  8006                           
  8007                           ;BME280_driver/bme280.c: 409: int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data
      +                          , uint16_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 410: {;BME280_driv
      +                          er/bme280.c: 411:     int8_t rslt;;BME280_driver/bme280.c: 414:     rslt = null_ptr_chec
      +                          k(dev);
  8008  124A  083E               	movf	bme280_get_regs@dev,w
  8009  124B  319F  278D  3192   	fcall	_null_ptr_check
  8010  124E  00BF               	movwf	??_bme280_get_regs
  8011  124F  083F               	movf	??_bme280_get_regs,w
  8012  1250  00C3               	movwf	bme280_get_regs@rslt
  8013                           
  8014                           ;BME280_driver/bme280.c: 417:     if (rslt == 0)
  8015  1251  0843               	movf	bme280_get_regs@rslt,w
  8016  1252  1D03               	btfss	3,2
  8017  1253  2A89               	goto	l63
  8018                           
  8019                           ;BME280_driver/bme280.c: 418:     {;BME280_driver/bme280.c: 420:         if (dev->intf !
      +                          = BME280_I2C_INTF)
  8020  1254  083E               	movf	bme280_get_regs@dev,w
  8021  1255  3E02               	addlw	2
  8022  1256  0086               	movwf	6
  8023  1257  3001               	movlw	1	; select bank2/3
  8024  1258  0087               	movwf	7
  8025  1259  0301               	decf	1,w
  8026  125A  1903               	btfsc	3,2
  8027  125B  2A61               	goto	l2949
  8028                           
  8029                           ;BME280_driver/bme280.c: 421:         {;BME280_driver/bme280.c: 422:             reg_add
      +                          r = reg_addr | 0x80;
  8030  125C  0842               	movf	bme280_get_regs@reg_addr,w
  8031  125D  3880               	iorlw	128
  8032  125E  00BF               	movwf	??_bme280_get_regs
  8033  125F  083F               	movf	??_bme280_get_regs,w
  8034  1260  00C2               	movwf	bme280_get_regs@reg_addr
  8035  1261                     l2949:	
  8036                           
  8037                           ;BME280_driver/bme280.c: 426:         rslt = dev->read(dev->dev_id, reg_addr, reg_data, 
      +                          len);
  8038  1261  083E               	movf	bme280_get_regs@dev,w
  8039  1262  0086               	movwf	6
  8040  1263  3001               	movlw	1	; select bank2/3
  8041  1264  0087               	movwf	7
  8042  1265  3001               	movlw	1	; select bank2/3
  8043  1266  3F41               	moviw [1]fsr1
  8044  1267  00AF               	movwf	ReadEnvSensor@dev_id
  8045  1268  0842               	movf	bme280_get_regs@reg_addr,w
  8046  1269  00BF               	movwf	??_bme280_get_regs
  8047  126A  083F               	movf	??_bme280_get_regs,w
  8048  126B  00B0               	movwf	ReadEnvSensor@reg_addr
  8049  126C  083B               	movf	bme280_get_regs@reg_data,w
  8050  126D  00C0               	movwf	??_bme280_get_regs+1
  8051  126E  0840               	movf	??_bme280_get_regs+1,w
  8052  126F  00B1               	movwf	ReadEnvSensor@data
  8053  1270  083D               	movf	bme280_get_regs@len+1,w
  8054  1271  00B3               	movwf	ReadEnvSensor@len+1
  8055  1272  083C               	movf	bme280_get_regs@len,w
  8056  1273  00B2               	movwf	ReadEnvSensor@len
  8057  1274  083E               	movf	bme280_get_regs@dev,w
  8058  1275  3E03               	addlw	3
  8059  1276  0086               	movwf	6
  8060  1277  3001               	movlw	1	; select bank2/3
  8061  1278  0087               	movwf	7
  8062  1279  3F41               	moviw [1]fsr1
  8063  127A  008A               	movwf	10
  8064  127B  3F40               	moviw [0]fsr1
  8065  127C  000A               	callw
  8066  127D  3192               	pagesel	$
  8067  127E  0020               	movlb	0	; select bank0
  8068  127F  00C1               	movwf	??_bme280_get_regs+2
  8069  1280  0841               	movf	??_bme280_get_regs+2,w
  8070  1281  00C3               	movwf	bme280_get_regs@rslt
  8071                           
  8072                           ;BME280_driver/bme280.c: 429:         if (rslt != 0)
  8073  1282  0843               	movf	bme280_get_regs@rslt,w
  8074  1283  1903               	btfsc	3,2
  8075  1284  2A89               	goto	l63
  8076                           
  8077                           ;BME280_driver/bme280.c: 430:         {;BME280_driver/bme280.c: 431:             rslt = 
      +                          -4;
  8078  1285  30FC               	movlw	252
  8079  1286  00BF               	movwf	??_bme280_get_regs
  8080  1287  083F               	movf	??_bme280_get_regs,w
  8081  1288  00C3               	movwf	bme280_get_regs@rslt
  8082  1289                     l63:	
  8083                           ;BME280_driver/bme280.c: 433:     }
  8084                           
  8085                           
  8086                           ;BME280_driver/bme280.c: 435:     return rslt;
  8087  1289  0843               	movf	bme280_get_regs@rslt,w
  8088  128A  0008               	return
  8089  128B                     __end_of_bme280_get_regs:	
  8090                           
  8091                           	psect	text16
  8092  1F8D                     __ptext16:	
  8093 ;; *************** function _null_ptr_check *****************
  8094 ;; Defined at:
  8095 ;;		line 1424 in file "BME280_driver/bme280.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;  dev             1    wreg     PTR const struct bme280_
  8098 ;;		 -> main@env_sensor(51), 
  8099 ;; Auto vars:     Size  Location     Type
  8100 ;;  dev             1    7[COMMON] PTR const struct bme280_
  8101 ;;		 -> main@env_sensor(51), 
  8102 ;;  rslt            1    6[COMMON] char 
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  1    wreg      char 
  8105 ;; Registers used:
  8106 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8107 ;; Tracked objects:
  8108 ;;		On entry : 1F/0
  8109 ;;		On exit  : 1F/0
  8110 ;;		Unchanged: 1F/0
  8111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;Total ram usage:        4 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    3
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		_bme280_init
  8123 ;;		_bme280_get_regs
  8124 ;;		_bme280_set_regs
  8125 ;;		_bme280_soft_reset
  8126 ;;		_bme280_get_sensor_data
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           
  8131                           ;psect for function _null_ptr_check
  8132  1F8D                     _null_ptr_check:	
  8133                           
  8134                           ;incstack = 0
  8135                           ; Regs used in _null_ptr_check: [wreg+fsr1l+fsr1h+status,2+status,0]
  8136                           ;null_ptr_check@dev stored from wreg
  8137  1F8D  00F7               	movwf	null_ptr_check@dev
  8138                           
  8139                           ;BME280_driver/bme280.c: 1424: static int8_t null_ptr_check(const struct bme280_dev *dev
      +                          );BME280_driver/bme280.c: 1425: {;BME280_driver/bme280.c: 1426:     int8_t rslt;;BME280_
      +                          driver/bme280.c: 1428:     if ((dev == ((void*)0)) || (dev->read == ((void*)0)) || (dev-
      +                          >write == ((void*)0)) || (dev->delay_ms == ((void*)0)))
  8140  1F8E  0877               	movf	null_ptr_check@dev,w
  8141  1F8F  1903               	btfsc	3,2
  8142  1F90  2FAC               	goto	l236
  8143  1F91  0877               	movf	null_ptr_check@dev,w
  8144  1F92  3E03               	addlw	3
  8145  1F93  0086               	movwf	6
  8146  1F94  3001               	movlw	1	; select bank2/3
  8147  1F95  0087               	movwf	7
  8148  1F96  0016               	moviw fsr1++
  8149  1F97  0401               	iorwf	1,w
  8150  1F98  1903               	btfsc	3,2
  8151  1F99  2FAC               	goto	l236
  8152  1F9A  0877               	movf	null_ptr_check@dev,w
  8153  1F9B  3E05               	addlw	5
  8154  1F9C  0086               	movwf	6
  8155  1F9D  3001               	movlw	1	; select bank2/3
  8156  1F9E  0087               	movwf	7
  8157  1F9F  0016               	moviw fsr1++
  8158  1FA0  0401               	iorwf	1,w
  8159  1FA1  1903               	btfsc	3,2
  8160  1FA2  2FAC               	goto	l236
  8161  1FA3  0877               	movf	null_ptr_check@dev,w
  8162  1FA4  3E07               	addlw	7
  8163  1FA5  0086               	movwf	6
  8164  1FA6  3001               	movlw	1	; select bank2/3
  8165  1FA7  0087               	movwf	7
  8166  1FA8  0016               	moviw fsr1++
  8167  1FA9  0401               	iorwf	1,w
  8168  1FAA  1D03               	btfss	3,2
  8169  1FAB  2FAF               	goto	l2763
  8170  1FAC                     l236:	
  8171                           
  8172                           ;BME280_driver/bme280.c: 1429:     {;BME280_driver/bme280.c: 1431:         rslt = -1;
  8173  1FAC  01F6               	clrf	null_ptr_check@rslt
  8174  1FAD  03F6               	decf	null_ptr_check@rslt,f
  8175                           
  8176                           ;BME280_driver/bme280.c: 1432:     }
  8177  1FAE  2FB0               	goto	l2765
  8178  1FAF                     l2763:	
  8179                           
  8180                           ;BME280_driver/bme280.c: 1434:     {;BME280_driver/bme280.c: 1436:         rslt = 0;
  8181  1FAF  01F6               	clrf	null_ptr_check@rslt
  8182  1FB0                     l2765:	
  8183                           
  8184                           ;BME280_driver/bme280.c: 1439:     return rslt;
  8185  1FB0  0876               	movf	null_ptr_check@rslt,w
  8186  1FB1  0008               	return
  8187  1FB2                     __end_of_null_ptr_check:	
  8188                           
  8189                           	psect	text17
  8190  093E                     __ptext17:	
  8191 ;; *************** function _ReadEnvSensor *****************
  8192 ;; Defined at:
  8193 ;;		line 790 in file "main.c"
  8194 ;; Parameters:    Size  Location     Type
  8195 ;;  dev_id          1   15[BANK0 ] unsigned char 
  8196 ;;  reg_addr        1   16[BANK0 ] unsigned char 
  8197 ;;  data            1   17[BANK0 ] PTR unsigned char 
  8198 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8199 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8200 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8201 ;;  len             2   18[BANK0 ] unsigned short 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  startTime       2    0        int 
  8204 ;;  status          1   26[BANK0 ] enum E9635
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      char 
  8207 ;; Registers used:
  8208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8209 ;; Tracked objects:
  8210 ;;		On entry : 1F/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8214 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;Total ram usage:       12 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    6
  8221 ;; This function calls:
  8222 ;;		_FlashError
  8223 ;;		_I2C_MasterRead
  8224 ;;		_I2C_MasterWrite
  8225 ;; This function is called by:
  8226 ;;		_main
  8227 ;;		_bme280_get_regs
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           
  8232                           ;psect for function _ReadEnvSensor
  8233  093E                     _ReadEnvSensor:	
  8234                           
  8235                           ;main.c: 790: int8_t ReadEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint
      +                          16_t len);main.c: 791: {;main.c: 792:     I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDIN
      +                          G;
  8236                           
  8237                           ;incstack = 0
  8238                           ; Regs used in _ReadEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8239  093E  3002               	movlw	2
  8240  093F  00B4               	movwf	??_ReadEnvSensor
  8241  0940  0834               	movf	??_ReadEnvSensor,w
  8242  0941  00BA               	movwf	ReadEnvSensor@status
  8243                           
  8244                           ;main.c: 795:     I2C_MasterWrite(&reg_addr, 1, dev_id, &status);
  8245  0942  01A8               	clrf	I2C_MasterWrite@length
  8246  0943  0AA8               	incf	I2C_MasterWrite@length,f
  8247  0944  082F               	movf	ReadEnvSensor@dev_id,w
  8248  0945  00B4               	movwf	??_ReadEnvSensor
  8249  0946  01B5               	clrf	??_ReadEnvSensor+1
  8250  0947  0834               	movf	??_ReadEnvSensor,w
  8251  0948  00A9               	movwf	I2C_MasterWrite@address
  8252  0949  0835               	movf	??_ReadEnvSensor+1,w
  8253  094A  00AA               	movwf	I2C_MasterWrite@address+1
  8254  094B  303A               	movlw	(low (ReadEnvSensor@status| 0))& (0+255)
  8255  094C  00B6               	movwf	??_ReadEnvSensor+2
  8256  094D  0836               	movf	??_ReadEnvSensor+2,w
  8257  094E  00AB               	movwf	I2C_MasterWrite@pflag
  8258  094F  3030               	movlw	(low (ReadEnvSensor@reg_addr| 0))& (0+255)
  8259  0950  3190  2037  3189   	fcall	_I2C_MasterWrite
  8260                           
  8261                           ;main.c: 796:     __g_timeout_start = ticks; while (!!(status == I2C_MESSAGE_PENDING)) {
      +                           if (ticks - __g_timeout_start > 10000) { return -4; } };
  8262  0953  0021               	movlb	1	; select bank1
  8263  0954  086D               	movf	(_ticks+3)^(0+128),w
  8264  0955  0023               	movlb	3	; select bank3
  8265  0956  00C5               	movwf	(___g_timeout_start+3)^(0+384)
  8266  0957  0021               	movlb	1	; select bank1
  8267  0958  086C               	movf	(_ticks+2)^(0+128),w
  8268  0959  0023               	movlb	3	; select bank3
  8269  095A  00C4               	movwf	(___g_timeout_start+2)^(0+384)
  8270  095B  0021               	movlb	1	; select bank1
  8271  095C  086B               	movf	(_ticks+1)^(0+128),w
  8272  095D  0023               	movlb	3	; select bank3
  8273  095E  00C3               	movwf	(___g_timeout_start+1)^(0+384)
  8274  095F  0021               	movlb	1	; select bank1
  8275  0960  086A               	movf	_ticks^(0+128),w
  8276  0961  0023               	movlb	3	; select bank3
  8277  0962  00C2               	movwf	___g_timeout_start^(0+384)
  8278  0963                     l2789:	
  8279  0963  3002               	movlw	2
  8280  0964  0020               	movlb	0	; select bank0
  8281  0965  063A               	xorwf	ReadEnvSensor@status,w
  8282  0966  1D03               	btfss	3,2
  8283  0967  298E               	goto	l2791
  8284  0968  0023               	movlb	3	; select bank3
  8285  0969  0842               	movf	___g_timeout_start^(0+384),w
  8286  096A  0021               	movlb	1	; select bank1
  8287  096B  026A               	subwf	_ticks^(0+128),w
  8288  096C  0020               	movlb	0	; select bank0
  8289  096D  00B4               	movwf	??_ReadEnvSensor
  8290  096E  0023               	movlb	3	; select bank3
  8291  096F  0843               	movf	(___g_timeout_start+1)^(0+384),w
  8292  0970  0021               	movlb	1	; select bank1
  8293  0971  3B6B               	subwfb	(_ticks+1)^(0+128),w
  8294  0972  0020               	movlb	0	; select bank0
  8295  0973  00B5               	movwf	??_ReadEnvSensor+1
  8296  0974  0023               	movlb	3	; select bank3
  8297  0975  0844               	movf	(___g_timeout_start+2)^(0+384),w
  8298  0976  0021               	movlb	1	; select bank1
  8299  0977  3B6C               	subwfb	(_ticks+2)^(0+128),w
  8300  0978  0020               	movlb	0	; select bank0
  8301  0979  00B6               	movwf	??_ReadEnvSensor+2
  8302  097A  0023               	movlb	3	; select bank3
  8303  097B  0845               	movf	(___g_timeout_start+3)^(0+384),w
  8304  097C  0021               	movlb	1	; select bank1
  8305  097D  3B6D               	subwfb	(_ticks+3)^(0+128),w
  8306  097E  0020               	movlb	0	; select bank0
  8307  097F  00B7               	movwf	??_ReadEnvSensor+3
  8308  0980  0837               	movf	??_ReadEnvSensor+3,w
  8309  0981  1D03               	btfss	3,2
  8310  0982  298C               	goto	l2785
  8311  0983  0836               	movf	??_ReadEnvSensor+2,w
  8312  0984  1D03               	btfss	3,2
  8313  0985  298C               	goto	l2785
  8314  0986  3011               	movlw	17
  8315  0987  0234               	subwf	??_ReadEnvSensor,w
  8316  0988  3027               	movlw	39
  8317  0989  3B35               	subwfb	??_ReadEnvSensor+1,w
  8318  098A  1C03               	btfss	3,0
  8319  098B  2963               	goto	l2789
  8320  098C                     l2785:	
  8321  098C  30FC               	movlw	252
  8322  098D  0008               	return
  8323  098E                     l2791:	
  8324                           
  8325                           ;main.c: 797:     if (status == I2C_MESSAGE_COMPLETE)
  8326  098E  083A               	movf	ReadEnvSensor@status,w
  8327  098F  1D03               	btfss	3,2
  8328  0990  29E6               	goto	l2813
  8329                           
  8330                           ;main.c: 798:     {;main.c: 799:         status = I2C_MESSAGE_PENDING;
  8331  0991  3002               	movlw	2
  8332  0992  00B4               	movwf	??_ReadEnvSensor
  8333  0993  0834               	movf	??_ReadEnvSensor,w
  8334  0994  00BA               	movwf	ReadEnvSensor@status
  8335                           
  8336                           ;main.c: 800:         I2C_MasterRead(data, len, dev_id, &status);
  8337  0995  0832               	movf	ReadEnvSensor@len,w
  8338  0996  00B4               	movwf	??_ReadEnvSensor
  8339  0997  0834               	movf	??_ReadEnvSensor,w
  8340  0998  00A2               	movwf	I2C_MasterRead@length
  8341  0999  082F               	movf	ReadEnvSensor@dev_id,w
  8342  099A  00B5               	movwf	??_ReadEnvSensor+1
  8343  099B  01B6               	clrf	??_ReadEnvSensor+2
  8344  099C  0835               	movf	??_ReadEnvSensor+1,w
  8345  099D  00A3               	movwf	I2C_MasterRead@address
  8346  099E  0836               	movf	??_ReadEnvSensor+2,w
  8347  099F  00A4               	movwf	I2C_MasterRead@address+1
  8348  09A0  303A               	movlw	(low (ReadEnvSensor@status| 0))& (0+255)
  8349  09A1  00B7               	movwf	??_ReadEnvSensor+3
  8350  09A2  0837               	movf	??_ReadEnvSensor+3,w
  8351  09A3  00A5               	movwf	I2C_MasterRead@pflag
  8352  09A4  0831               	movf	ReadEnvSensor@data,w
  8353  09A5  3190  200C  3189   	fcall	_I2C_MasterRead
  8354                           
  8355                           ;main.c: 801:         __g_timeout_start = ticks; while (!!(status == I2C_MESSAGE_PENDING
      +                          )) { if (ticks - __g_timeout_start > 10000) { return -4; } };
  8356  09A8  0021               	movlb	1	; select bank1
  8357  09A9  086D               	movf	(_ticks+3)^(0+128),w
  8358  09AA  0023               	movlb	3	; select bank3
  8359  09AB  00C5               	movwf	(___g_timeout_start+3)^(0+384)
  8360  09AC  0021               	movlb	1	; select bank1
  8361  09AD  086C               	movf	(_ticks+2)^(0+128),w
  8362  09AE  0023               	movlb	3	; select bank3
  8363  09AF  00C4               	movwf	(___g_timeout_start+2)^(0+384)
  8364  09B0  0021               	movlb	1	; select bank1
  8365  09B1  086B               	movf	(_ticks+1)^(0+128),w
  8366  09B2  0023               	movlb	3	; select bank3
  8367  09B3  00C3               	movwf	(___g_timeout_start+1)^(0+384)
  8368  09B4  0021               	movlb	1	; select bank1
  8369  09B5  086A               	movf	_ticks^(0+128),w
  8370  09B6  0023               	movlb	3	; select bank3
  8371  09B7  00C2               	movwf	___g_timeout_start^(0+384)
  8372  09B8                     l2805:	
  8373  09B8  3002               	movlw	2
  8374  09B9  0020               	movlb	0	; select bank0
  8375  09BA  063A               	xorwf	ReadEnvSensor@status,w
  8376  09BB  1D03               	btfss	3,2
  8377  09BC  29E2               	goto	l2807
  8378  09BD  0023               	movlb	3	; select bank3
  8379  09BE  0842               	movf	___g_timeout_start^(0+384),w
  8380  09BF  0021               	movlb	1	; select bank1
  8381  09C0  026A               	subwf	_ticks^(0+128),w
  8382  09C1  0020               	movlb	0	; select bank0
  8383  09C2  00B4               	movwf	??_ReadEnvSensor
  8384  09C3  0023               	movlb	3	; select bank3
  8385  09C4  0843               	movf	(___g_timeout_start+1)^(0+384),w
  8386  09C5  0021               	movlb	1	; select bank1
  8387  09C6  3B6B               	subwfb	(_ticks+1)^(0+128),w
  8388  09C7  0020               	movlb	0	; select bank0
  8389  09C8  00B5               	movwf	??_ReadEnvSensor+1
  8390  09C9  0023               	movlb	3	; select bank3
  8391  09CA  0844               	movf	(___g_timeout_start+2)^(0+384),w
  8392  09CB  0021               	movlb	1	; select bank1
  8393  09CC  3B6C               	subwfb	(_ticks+2)^(0+128),w
  8394  09CD  0020               	movlb	0	; select bank0
  8395  09CE  00B6               	movwf	??_ReadEnvSensor+2
  8396  09CF  0023               	movlb	3	; select bank3
  8397  09D0  0845               	movf	(___g_timeout_start+3)^(0+384),w
  8398  09D1  0021               	movlb	1	; select bank1
  8399  09D2  3B6D               	subwfb	(_ticks+3)^(0+128),w
  8400  09D3  0020               	movlb	0	; select bank0
  8401  09D4  00B7               	movwf	??_ReadEnvSensor+3
  8402  09D5  0837               	movf	??_ReadEnvSensor+3,w
  8403  09D6  1D03               	btfss	3,2
  8404  09D7  298C               	goto	l2785
  8405  09D8  0836               	movf	??_ReadEnvSensor+2,w
  8406  09D9  1D03               	btfss	3,2
  8407  09DA  298C               	goto	l2785
  8408  09DB  3011               	movlw	17
  8409  09DC  0234               	subwf	??_ReadEnvSensor,w
  8410  09DD  3027               	movlw	39
  8411  09DE  3B35               	subwfb	??_ReadEnvSensor+1,w
  8412  09DF  1803               	btfsc	3,0
  8413  09E0  298C               	goto	l2785
  8414  09E1  29B8               	goto	l2805
  8415  09E2                     l2807:	
  8416                           
  8417                           ;main.c: 802:         if (status != I2C_MESSAGE_COMPLETE)
  8418  09E2  083A               	movf	ReadEnvSensor@status,w
  8419  09E3  1D03               	btfss	3,2
  8420  09E4  298C               	goto	l2785
  8421  09E5  29EA               	goto	l2819
  8422  09E6                     l2813:	
  8423                           
  8424                           ;main.c: 809:     {;main.c: 810:         FlashError();
  8425  09E6  3190  2062  3189   	fcall	_FlashError
  8426  09E9  298C               	goto	l2785
  8427  09EA                     l2819:	
  8428                           
  8429                           ;main.c: 813:     return 0;
  8430  09EA  3000               	movlw	0
  8431  09EB  0008               	return
  8432  09EC                     __end_of_ReadEnvSensor:	
  8433                           
  8434                           	psect	text18
  8435  1037                     __ptext18:	
  8436 ;; *************** function _I2C_MasterWrite *****************
  8437 ;; Defined at:
  8438 ;;		line 600 in file "mcc_generated_files/i2c.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;  pdata           1    wreg     PTR unsigned char 
  8441 ;;		 -> ReadEnvSensor@reg_addr(1), 
  8442 ;;  length          1    8[BANK0 ] unsigned char 
  8443 ;;  address         2    9[BANK0 ] unsigned short 
  8444 ;;  pflag           1   11[BANK0 ] PTR enum E9633
  8445 ;;		 -> ReadEnvSensor@status(1), 
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  8448 ;;		 -> ReadEnvSensor@reg_addr(1), 
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      void 
  8451 ;; Registers used:
  8452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : 1F/0
  8455 ;;		On exit  : 1C/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8458 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;Total ram usage:        7 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:    5
  8465 ;; This function calls:
  8466 ;;		_I2C_MasterTRBInsert
  8467 ;;		_I2C_MasterWriteTRBBuild
  8468 ;; This function is called by:
  8469 ;;		_ReadEnvSensor
  8470 ;; This function uses a non-reentrant model
  8471 ;;
  8472                           
  8473                           
  8474                           ;psect for function _I2C_MasterWrite
  8475  1037                     _I2C_MasterWrite:	
  8476                           
  8477                           ;incstack = 0
  8478                           ; Regs used in _I2C_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8479                           ;I2C_MasterWrite@pdata stored from wreg
  8480  1037  00AE               	movwf	I2C_MasterWrite@pdata
  8481                           
  8482                           ;mcc_generated_files/i2c.c: 601:                                 uint8_t *pdata,;mcc_gen
      +                          erated_files/i2c.c: 602:                                 uint8_t length,;mcc_generated_f
      +                          iles/i2c.c: 603:                                 uint16_t address,;mcc_generated_files/i
      +                          2c.c: 604:                                 I2C_MESSAGE_STATUS *pflag);mcc_generated_file
      +                          s/i2c.c: 605: {;mcc_generated_files/i2c.c: 606:     static I2C_TRANSACTION_REQUEST_BLOCK
      +                           trBlock;;mcc_generated_files/i2c.c: 609:     if (i2c_object.trStatus.s.full != 1)
  8483  1038  0023               	movlb	3	; select bank3
  8484  1039  183F               	btfsc	(_i2c_object^(0+384)+4),0
  8485  103A  285B               	goto	l2723
  8486                           
  8487                           ;mcc_generated_files/i2c.c: 610:     {;mcc_generated_files/i2c.c: 611:         I2C_Maste
      +                          rWriteTRBBuild(&trBlock, pdata, length, address);
  8488  103B  30DA               	movlw	low I2C_MasterWrite@trBlock
  8489  103C  0020               	movlb	0	; select bank0
  8490  103D  00A0               	movwf	I2C_MasterWriteTRBBuild@ptrb
  8491  103E  3001               	movlw	high I2C_MasterWrite@trBlock
  8492  103F  00A1               	movwf	I2C_MasterWriteTRBBuild@ptrb+1
  8493  1040  082E               	movf	I2C_MasterWrite@pdata,w
  8494  1041  00AC               	movwf	??_I2C_MasterWrite
  8495  1042  082C               	movf	??_I2C_MasterWrite,w
  8496  1043  00A2               	movwf	I2C_MasterWriteTRBBuild@pdata
  8497  1044  0828               	movf	I2C_MasterWrite@length,w
  8498  1045  00AD               	movwf	??_I2C_MasterWrite+1
  8499  1046  082D               	movf	??_I2C_MasterWrite+1,w
  8500  1047  00A3               	movwf	I2C_MasterWriteTRBBuild@length
  8501  1048  082A               	movf	I2C_MasterWrite@address+1,w
  8502  1049  00A5               	movwf	I2C_MasterWriteTRBBuild@address+1
  8503  104A  0829               	movf	I2C_MasterWrite@address,w
  8504  104B  00A4               	movwf	I2C_MasterWriteTRBBuild@address
  8505  104C  319F  27D9  3190   	fcall	_I2C_MasterWriteTRBBuild
  8506                           
  8507                           ;mcc_generated_files/i2c.c: 612:         I2C_MasterTRBInsert(1, &trBlock, pflag);
  8508  104F  30DA               	movlw	low I2C_MasterWrite@trBlock
  8509  1050  00F4               	movwf	I2C_MasterTRBInsert@ptrb_list
  8510  1051  3001               	movlw	high I2C_MasterWrite@trBlock
  8511  1052  00F5               	movwf	I2C_MasterTRBInsert@ptrb_list+1
  8512  1053  082B               	movf	I2C_MasterWrite@pflag,w
  8513  1054  00AC               	movwf	??_I2C_MasterWrite
  8514  1055  082C               	movf	??_I2C_MasterWrite,w
  8515  1056  00F6               	movwf	I2C_MasterTRBInsert@pflag
  8516  1057  3001               	movlw	1
  8517  1058  3194  244E         	fcall	_I2C_MasterTRBInsert
  8518                           
  8519                           ;mcc_generated_files/i2c.c: 613:     }
  8520  105A  0008               	return
  8521  105B                     l2723:	
  8522                           
  8523                           ;mcc_generated_files/i2c.c: 615:     {;mcc_generated_files/i2c.c: 616:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  8524  105B  0020               	movlb	0	; select bank0
  8525  105C  082B               	movf	I2C_MasterWrite@pflag,w
  8526  105D  0086               	movwf	6
  8527  105E  0187               	clrf	7
  8528  105F  0181               	clrf	1
  8529  1060  0A81               	incf	1,f
  8530  1061  0008               	return
  8531  1062                     __end_of_I2C_MasterWrite:	
  8532                           
  8533                           	psect	text19
  8534  1FD9                     __ptext19:	
  8535 ;; *************** function _I2C_MasterWriteTRBBuild *****************
  8536 ;; Defined at:
  8537 ;;		line 721 in file "mcc_generated_files/i2c.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  ptrb            2    0[BANK0 ] PTR struct .
  8540 ;;		 -> WriteEnvSensor@trb(120), I2C_MasterWrite@trBlock(5), 
  8541 ;;  pdata           1    2[BANK0 ] PTR unsigned char 
  8542 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  8543 ;;  length          1    3[BANK0 ] unsigned char 
  8544 ;;  address         2    4[BANK0 ] unsigned short 
  8545 ;; Auto vars:     Size  Location     Type
  8546 ;;		None
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  1    wreg      void 
  8549 ;; Registers used:
  8550 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8551 ;; Tracked objects:
  8552 ;;		On entry : 1F/0
  8553 ;;		On exit  : 1F/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8556 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8560 ;;Total ram usage:        8 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; Hardware stack levels required when called:    3
  8563 ;; This function calls:
  8564 ;;		Nothing
  8565 ;; This function is called by:
  8566 ;;		_I2C_MasterWrite
  8567 ;;		_WriteEnvSensor
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           
  8572                           ;psect for function _I2C_MasterWriteTRBBuild
  8573  1FD9                     _I2C_MasterWriteTRBBuild:	
  8574                           
  8575                           ;mcc_generated_files/i2c.c: 722:                                 I2C_TRANSACTION_REQUEST
      +                          _BLOCK *ptrb,;mcc_generated_files/i2c.c: 723:                                 uint8_t *p
      +                          data,;mcc_generated_files/i2c.c: 724:                                 uint8_t length,;mc
      +                          c_generated_files/i2c.c: 725:                                 uint16_t address);mcc_gene
      +                          rated_files/i2c.c: 726: {;mcc_generated_files/i2c.c: 727:     ptrb->address = address <<
      +                           1;
  8576                           
  8577                           ;incstack = 0
  8578                           ; Regs used in _I2C_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  8579  1FD9  0825               	movf	I2C_MasterWriteTRBBuild@address+1,w
  8580  1FDA  00A7               	movwf	??_I2C_MasterWriteTRBBuild+1
  8581  1FDB  0824               	movf	I2C_MasterWriteTRBBuild@address,w
  8582  1FDC  00A6               	movwf	??_I2C_MasterWriteTRBBuild
  8583  1FDD  35A6               	lslf	??_I2C_MasterWriteTRBBuild,f
  8584  1FDE  0DA7               	rlf	??_I2C_MasterWriteTRBBuild+1,f
  8585  1FDF  0820               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8586  1FE0  0086               	movwf	6
  8587  1FE1  0821               	movf	I2C_MasterWriteTRBBuild@ptrb+1,w
  8588  1FE2  0087               	movwf	7
  8589  1FE3  0826               	movf	??_I2C_MasterWriteTRBBuild,w
  8590  1FE4  3FC0               	movwi [0]fsr1
  8591  1FE5  0827               	movf	??_I2C_MasterWriteTRBBuild+1,w
  8592  1FE6  3FC1               	movwi [1]fsr1
  8593                           
  8594                           ;mcc_generated_files/i2c.c: 728:     ptrb->length = length;
  8595  1FE7  0820               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8596  1FE8  3E02               	addlw	2
  8597  1FE9  00A6               	movwf	??_I2C_MasterWriteTRBBuild
  8598  1FEA  3000               	movlw	0
  8599  1FEB  3D21               	addwfc	I2C_MasterWriteTRBBuild@ptrb+1,w
  8600  1FEC  00A7               	movwf	??_I2C_MasterWriteTRBBuild+1
  8601  1FED  0826               	movf	??_I2C_MasterWriteTRBBuild,w
  8602  1FEE  0086               	movwf	6
  8603  1FEF  0827               	movf	??_I2C_MasterWriteTRBBuild+1,w
  8604  1FF0  0087               	movwf	7
  8605  1FF1  0823               	movf	I2C_MasterWriteTRBBuild@length,w
  8606  1FF2  0081               	movwf	1
  8607                           
  8608                           ;mcc_generated_files/i2c.c: 729:     ptrb->pbuffer = pdata;
  8609  1FF3  0820               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8610  1FF4  3E03               	addlw	3
  8611  1FF5  00A6               	movwf	??_I2C_MasterWriteTRBBuild
  8612  1FF6  3000               	movlw	0
  8613  1FF7  3D21               	addwfc	I2C_MasterWriteTRBBuild@ptrb+1,w
  8614  1FF8  00A7               	movwf	??_I2C_MasterWriteTRBBuild+1
  8615  1FF9  0826               	movf	??_I2C_MasterWriteTRBBuild,w
  8616  1FFA  0086               	movwf	6
  8617  1FFB  0827               	movf	??_I2C_MasterWriteTRBBuild+1,w
  8618  1FFC  0087               	movwf	7
  8619  1FFD  0822               	movf	I2C_MasterWriteTRBBuild@pdata,w
  8620  1FFE  0081               	movwf	1
  8621  1FFF  0008               	return
  8622  2000                     __end_of_I2C_MasterWriteTRBBuild:	
  8623                           
  8624                           	psect	text20
  8625  100C                     __ptext20:	
  8626 ;; *************** function _I2C_MasterRead *****************
  8627 ;; Defined at:
  8628 ;;		line 621 in file "mcc_generated_files/i2c.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;  pdata           1    wreg     PTR unsigned char 
  8631 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8632 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8633 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8634 ;;  length          1    2[BANK0 ] unsigned char 
  8635 ;;  address         2    3[BANK0 ] unsigned short 
  8636 ;;  pflag           1    5[BANK0 ] PTR enum E9633
  8637 ;;		 -> ReadEnvSensor@status(1), 
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;  pdata           1    8[BANK0 ] PTR unsigned char 
  8640 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8641 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8642 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : 1F/0
  8649 ;;		On exit  : 1C/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8652 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;Total ram usage:        7 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    5
  8659 ;; This function calls:
  8660 ;;		_I2C_MasterReadTRBBuild
  8661 ;;		_I2C_MasterTRBInsert
  8662 ;; This function is called by:
  8663 ;;		_ReadEnvSensor
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           
  8668                           ;psect for function _I2C_MasterRead
  8669  100C                     _I2C_MasterRead:	
  8670                           
  8671                           ;incstack = 0
  8672                           ; Regs used in _I2C_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8673                           ;I2C_MasterRead@pdata stored from wreg
  8674  100C  00A8               	movwf	I2C_MasterRead@pdata
  8675                           
  8676                           ;mcc_generated_files/i2c.c: 622:                                 uint8_t *pdata,;mcc_gen
      +                          erated_files/i2c.c: 623:                                 uint8_t length,;mcc_generated_f
      +                          iles/i2c.c: 624:                                 uint16_t address,;mcc_generated_files/i
      +                          2c.c: 625:                                 I2C_MESSAGE_STATUS *pflag);mcc_generated_file
      +                          s/i2c.c: 626: {;mcc_generated_files/i2c.c: 627:     static I2C_TRANSACTION_REQUEST_BLOCK
      +                           trBlock;;mcc_generated_files/i2c.c: 631:     if (i2c_object.trStatus.s.full != 1)
  8677  100D  0023               	movlb	3	; select bank3
  8678  100E  183F               	btfsc	(_i2c_object^(0+384)+4),0
  8679  100F  2830               	goto	l2729
  8680                           
  8681                           ;mcc_generated_files/i2c.c: 632:     {;mcc_generated_files/i2c.c: 633:         I2C_Maste
      +                          rReadTRBBuild(&trBlock, pdata, length, address);
  8682  1010  30D5               	movlw	low I2C_MasterRead@trBlock
  8683  1011  00F4               	movwf	I2C_MasterReadTRBBuild@ptrb
  8684  1012  3001               	movlw	high I2C_MasterRead@trBlock
  8685  1013  00F5               	movwf	I2C_MasterReadTRBBuild@ptrb+1
  8686  1014  0020               	movlb	0	; select bank0
  8687  1015  0828               	movf	I2C_MasterRead@pdata,w
  8688  1016  00A6               	movwf	??_I2C_MasterRead
  8689  1017  0826               	movf	??_I2C_MasterRead,w
  8690  1018  00F6               	movwf	I2C_MasterReadTRBBuild@pdata
  8691  1019  0822               	movf	I2C_MasterRead@length,w
  8692  101A  00A7               	movwf	??_I2C_MasterRead+1
  8693  101B  0827               	movf	??_I2C_MasterRead+1,w
  8694  101C  00F7               	movwf	I2C_MasterReadTRBBuild@length
  8695  101D  0824               	movf	I2C_MasterRead@address+1,w
  8696  101E  00F9               	movwf	I2C_MasterReadTRBBuild@address+1
  8697  101F  0823               	movf	I2C_MasterRead@address,w
  8698  1020  00F8               	movwf	I2C_MasterReadTRBBuild@address
  8699  1021  3191  2171  3190   	fcall	_I2C_MasterReadTRBBuild
  8700                           
  8701                           ;mcc_generated_files/i2c.c: 634:         I2C_MasterTRBInsert(1, &trBlock, pflag);
  8702  1024  30D5               	movlw	low I2C_MasterRead@trBlock
  8703  1025  00F4               	movwf	I2C_MasterTRBInsert@ptrb_list
  8704  1026  3001               	movlw	high I2C_MasterRead@trBlock
  8705  1027  00F5               	movwf	I2C_MasterTRBInsert@ptrb_list+1
  8706  1028  0825               	movf	I2C_MasterRead@pflag,w
  8707  1029  00A6               	movwf	??_I2C_MasterRead
  8708  102A  0826               	movf	??_I2C_MasterRead,w
  8709  102B  00F6               	movwf	I2C_MasterTRBInsert@pflag
  8710  102C  3001               	movlw	1
  8711  102D  3194  244E         	fcall	_I2C_MasterTRBInsert
  8712                           
  8713                           ;mcc_generated_files/i2c.c: 635:     }
  8714  102F  0008               	return
  8715  1030                     l2729:	
  8716                           
  8717                           ;mcc_generated_files/i2c.c: 637:     {;mcc_generated_files/i2c.c: 638:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  8718  1030  0020               	movlb	0	; select bank0
  8719  1031  0825               	movf	I2C_MasterRead@pflag,w
  8720  1032  0086               	movwf	6
  8721  1033  0187               	clrf	7
  8722  1034  0181               	clrf	1
  8723  1035  0A81               	incf	1,f
  8724  1036  0008               	return
  8725  1037                     __end_of_I2C_MasterRead:	
  8726                           
  8727                           	psect	text21
  8728  144E                     __ptext21:	
  8729 ;; *************** function _I2C_MasterTRBInsert *****************
  8730 ;; Defined at:
  8731 ;;		line 654 in file "mcc_generated_files/i2c.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  count           1    wreg     unsigned char 
  8734 ;;  ptrb_list       2    4[COMMON] PTR struct .
  8735 ;;		 -> WriteEnvSensor@trb(120), I2C_MasterRead@trBlock(5), I2C_MasterWrite@trBlock(5), 
  8736 ;;  pflag           1    6[COMMON] PTR enum E9633
  8737 ;;		 -> WriteEnvSensor@status(1), ReadEnvSensor@status(1), 
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  count           1    9[COMMON] unsigned char 
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  1    wreg      void 
  8742 ;; Registers used:
  8743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8744 ;; Tracked objects:
  8745 ;;		On entry : 1F/0
  8746 ;;		On exit  : 1C/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8749 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8752 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;Total ram usage:        6 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; Hardware stack levels required when called:    4
  8756 ;; This function calls:
  8757 ;;		_I2C_WaitForLastPacketToComplete
  8758 ;; This function is called by:
  8759 ;;		_I2C_MasterWrite
  8760 ;;		_I2C_MasterRead
  8761 ;;		_WriteEnvSensor
  8762 ;; This function uses a non-reentrant model
  8763 ;;
  8764                           
  8765                           
  8766                           ;psect for function _I2C_MasterTRBInsert
  8767  144E                     _I2C_MasterTRBInsert:	
  8768                           
  8769                           ;incstack = 0
  8770                           ; Regs used in _I2C_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8771                           ;I2C_MasterTRBInsert@count stored from wreg
  8772  144E  00F9               	movwf	I2C_MasterTRBInsert@count
  8773                           
  8774                           ;mcc_generated_files/i2c.c: 655:                                 uint8_t count,;mcc_gene
      +                          rated_files/i2c.c: 656:                                 I2C_TRANSACTION_REQUEST_BLOCK *p
      +                          trb_list,;mcc_generated_files/i2c.c: 657:                                 I2C_MESSAGE_ST
      +                          ATUS *pflag);mcc_generated_files/i2c.c: 658: {;mcc_generated_files/i2c.c: 661:     if (i
      +                          2c_object.trStatus.s.full != 1)
  8775  144F  0023               	movlb	3	; select bank3
  8776  1450  183F               	btfsc	(_i2c_object^(0+384)+4),0
  8777  1451  2C8F               	goto	l2709
  8778                           
  8779                           ;mcc_generated_files/i2c.c: 662:     {;mcc_generated_files/i2c.c: 663:         *pflag = 
      +                          I2C_MESSAGE_PENDING;
  8780  1452  3002               	movlw	2
  8781  1453  00F7               	movwf	??_I2C_MasterTRBInsert
  8782  1454  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8783  1455  0086               	movwf	6
  8784  1456  0187               	clrf	7
  8785  1457  0877               	movf	??_I2C_MasterTRBInsert,w
  8786  1458  0081               	movwf	1
  8787                           
  8788                           ;mcc_generated_files/i2c.c: 665:         i2c_object.pTrTail->ptrb_list = ptrb_list;
  8789  1459  083B               	movf	_i2c_object^(0+384),w
  8790  145A  0086               	movwf	6
  8791  145B  083C               	movf	(_i2c_object+1)^(0+384),w
  8792  145C  0087               	movwf	7
  8793  145D  3141               	addfsr 1,1
  8794  145E  0874               	movf	I2C_MasterTRBInsert@ptrb_list,w
  8795  145F  3FC0               	movwi [0]fsr1
  8796  1460  0875               	movf	I2C_MasterTRBInsert@ptrb_list+1,w
  8797  1461  3FC1               	movwi [1]fsr1
  8798                           
  8799                           ;mcc_generated_files/i2c.c: 666:         i2c_object.pTrTail->count = count;
  8800  1462  083B               	movf	_i2c_object^(0+384),w
  8801  1463  0086               	movwf	6
  8802  1464  083C               	movf	(_i2c_object+1)^(0+384),w
  8803  1465  0087               	movwf	7
  8804  1466  0879               	movf	I2C_MasterTRBInsert@count,w
  8805  1467  0081               	movwf	1
  8806                           
  8807                           ;mcc_generated_files/i2c.c: 667:         i2c_object.pTrTail->pTrFlag = pflag;
  8808  1468  083B               	movf	_i2c_object^(0+384),w
  8809  1469  3E03               	addlw	3
  8810  146A  00F7               	movwf	??_I2C_MasterTRBInsert
  8811  146B  3000               	movlw	0
  8812  146C  3D3C               	addwfc	(_i2c_object+1)^(0+384),w
  8813  146D  00F8               	movwf	??_I2C_MasterTRBInsert+1
  8814  146E  0877               	movf	??_I2C_MasterTRBInsert,w
  8815  146F  0086               	movwf	6
  8816  1470  0878               	movf	??_I2C_MasterTRBInsert+1,w
  8817  1471  0087               	movwf	7
  8818  1472  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8819  1473  0081               	movwf	1
  8820                           
  8821                           ;mcc_generated_files/i2c.c: 668:         i2c_object.pTrTail++;
  8822  1474  3005               	movlw	5
  8823  1475  07BB               	addwf	_i2c_object^(0+384),f
  8824  1476  3000               	movlw	0
  8825  1477  3DBC               	addwfc	(_i2c_object+1)^(0+384),f
  8826                           
  8827                           ;mcc_generated_files/i2c.c: 671:         if (i2c_object.pTrTail == (i2c_tr_queue + 1))
  8828  1478  3001               	movlw	high (_i2c_tr_queue+5)
  8829  1479  063C               	xorwf	(_i2c_object+1)^(0+384),w
  8830  147A  1D03               	skipz
  8831  147B  2C7E               	goto	u1805
  8832  147C  30E4               	movlw	low (_i2c_tr_queue+5)
  8833  147D  063B               	xorwf	_i2c_object^(0+384),w
  8834  147E                     u1805:	
  8835  147E  1D03               	skipz
  8836  147F  2C84               	goto	l2705
  8837                           
  8838                           ;mcc_generated_files/i2c.c: 672:         {;mcc_generated_files/i2c.c: 674:             i
      +                          2c_object.pTrTail = i2c_tr_queue;
  8839  1480  30DF               	movlw	low _i2c_tr_queue
  8840  1481  00BB               	movwf	_i2c_object^(0+384)
  8841  1482  3001               	movlw	high _i2c_tr_queue
  8842  1483  00BC               	movwf	(_i2c_object^(0+384)+1)
  8843  1484                     l2705:	
  8844                           
  8845                           ;mcc_generated_files/i2c.c: 679:         i2c_object.trStatus.s.empty = 0;
  8846  1484  10BF               	bcf	(_i2c_object^(0+384)+4),1
  8847                           
  8848                           ;mcc_generated_files/i2c.c: 682:         if (i2c_object.pTrHead == i2c_object.pTrTail)
  8849  1485  083C               	movf	(_i2c_object+1)^(0+384),w
  8850  1486  063E               	xorwf	((_i2c_object+1)^(0+384)+2),w
  8851  1487  1D03               	skipz
  8852  1488  2C8B               	goto	u1815
  8853  1489  083B               	movf	_i2c_object^(0+384),w
  8854  148A  063D               	xorwf	(_i2c_object^(0+384)+2),w
  8855  148B                     u1815:	
  8856  148B  1D03               	skipz
  8857  148C  2C94               	goto	l2711
  8858                           
  8859                           ;mcc_generated_files/i2c.c: 683:         {;mcc_generated_files/i2c.c: 685:             i
      +                          2c_object.trStatus.s.full = 1;
  8860  148D  143F               	bsf	(_i2c_object^(0+384)+4),0
  8861  148E  2C94               	goto	l2711
  8862  148F                     l2709:	
  8863                           
  8864                           ;mcc_generated_files/i2c.c: 690:     {;mcc_generated_files/i2c.c: 691:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  8865  148F  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8866  1490  0086               	movwf	6
  8867  1491  0187               	clrf	7
  8868  1492  0181               	clrf	1
  8869  1493  0A81               	incf	1,f
  8870  1494                     l2711:	
  8871                           
  8872                           ;mcc_generated_files/i2c.c: 695:     if (*pflag == I2C_MESSAGE_PENDING)
  8873  1494  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8874  1495  0086               	movwf	6
  8875  1496  0187               	clrf	7
  8876  1497  3002               	movlw	2
  8877  1498  0601               	xorwf	1,w
  8878  1499  1D03               	btfss	3,2
  8879  149A  0008               	return
  8880                           
  8881                           ;mcc_generated_files/i2c.c: 696:     {;mcc_generated_files/i2c.c: 697:         I2C_WaitF
      +                          orLastPacketToComplete();
  8882  149B  319E  26A1         	fcall	_I2C_WaitForLastPacketToComplete
  8883                           
  8884                           ;mcc_generated_files/i2c.c: 702:         PIR1bits.SSP1IF = 1;
  8885  149D  0020               	movlb	0	; select bank0
  8886  149E  1590               	bsf	16,3	;volatile
  8887  149F  0008               	return
  8888  14A0                     __end_of_I2C_MasterTRBInsert:	
  8889                           
  8890                           	psect	text22
  8891  1EA1                     __ptext22:	
  8892 ;; *************** function _I2C_WaitForLastPacketToComplete *****************
  8893 ;; Defined at:
  8894 ;;		line 644 in file "mcc_generated_files/i2c.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      void 
  8901 ;; Registers used:
  8902 ;;		wreg, status,2, status,0
  8903 ;; Tracked objects:
  8904 ;;		On entry : 1F/3
  8905 ;;		On exit  : 1F/3
  8906 ;;		Unchanged: 1E/0
  8907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;Total ram usage:        0 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    3
  8915 ;; This function calls:
  8916 ;;		Nothing
  8917 ;; This function is called by:
  8918 ;;		_I2C_MasterTRBInsert
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           
  8923                           ;psect for function _I2C_WaitForLastPacketToComplete
  8924  1EA1                     _I2C_WaitForLastPacketToComplete:	
  8925  1EA1                     l2689:	
  8926                           ;mcc_generated_files/i2c.c: 646:     while(i2c_state != S_MASTER_IDLE)
  8927                           
  8928                           ;incstack = 0
  8929                           ; Regs used in _I2C_WaitForLastPacketToComplete: [wreg+status,2+status,0]
  8930                           
  8931                           
  8932                           ;mcc_generated_files/i2c.c: 646:     while(i2c_state != S_MASTER_IDLE)
  8933  1EA1  087B               	movf	_i2c_state,w
  8934  1EA2  1903               	btfsc	3,2
  8935  1EA3  0008               	return
  8936  1EA4  2EA1               	goto	l2689
  8937  1EA5                     __end_of_I2C_WaitForLastPacketToComplete:	
  8938                           
  8939                           	psect	text23
  8940  1171                     __ptext23:	
  8941 ;; *************** function _I2C_MasterReadTRBBuild *****************
  8942 ;; Defined at:
  8943 ;;		line 708 in file "mcc_generated_files/i2c.c"
  8944 ;; Parameters:    Size  Location     Type
  8945 ;;  ptrb            2    4[COMMON] PTR struct .
  8946 ;;		 -> I2C_MasterRead@trBlock(5), 
  8947 ;;  pdata           1    6[COMMON] PTR unsigned char 
  8948 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8949 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8950 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8951 ;;  length          1    7[COMMON] unsigned char 
  8952 ;;  address         2    8[COMMON] unsigned short 
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;		None
  8955 ;; Return value:  Size  Location     Type
  8956 ;;                  1    wreg      void 
  8957 ;; Registers used:
  8958 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8959 ;; Tracked objects:
  8960 ;;		On entry : 1F/0
  8961 ;;		On exit  : 1F/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8964 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Totals:         6       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;Total ram usage:        8 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; Hardware stack levels required when called:    3
  8971 ;; This function calls:
  8972 ;;		Nothing
  8973 ;; This function is called by:
  8974 ;;		_I2C_MasterRead
  8975 ;; This function uses a non-reentrant model
  8976 ;;
  8977                           
  8978                           
  8979                           ;psect for function _I2C_MasterReadTRBBuild
  8980  1171                     _I2C_MasterReadTRBBuild:	
  8981                           
  8982                           ;mcc_generated_files/i2c.c: 709:                                 I2C_TRANSACTION_REQUEST
      +                          _BLOCK *ptrb,;mcc_generated_files/i2c.c: 710:                                 uint8_t *p
      +                          data,;mcc_generated_files/i2c.c: 711:                                 uint8_t length,;mc
      +                          c_generated_files/i2c.c: 712:                                 uint16_t address);mcc_gene
      +                          rated_files/i2c.c: 713: {;mcc_generated_files/i2c.c: 714:     ptrb->address = address <<
      +                           1;
  8983                           
  8984                           ;incstack = 0
  8985                           ; Regs used in _I2C_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  8986  1171  0879               	movf	I2C_MasterReadTRBBuild@address+1,w
  8987  1172  00A1               	movwf	??_I2C_MasterReadTRBBuild+1
  8988  1173  0878               	movf	I2C_MasterReadTRBBuild@address,w
  8989  1174  00A0               	movwf	??_I2C_MasterReadTRBBuild
  8990  1175  35A0               	lslf	??_I2C_MasterReadTRBBuild,f
  8991  1176  0DA1               	rlf	??_I2C_MasterReadTRBBuild+1,f
  8992  1177  0874               	movf	I2C_MasterReadTRBBuild@ptrb,w
  8993  1178  0086               	movwf	6
  8994  1179  0875               	movf	I2C_MasterReadTRBBuild@ptrb+1,w
  8995  117A  0087               	movwf	7
  8996  117B  0820               	movf	??_I2C_MasterReadTRBBuild,w
  8997  117C  3FC0               	movwi [0]fsr1
  8998  117D  0821               	movf	??_I2C_MasterReadTRBBuild+1,w
  8999  117E  3FC1               	movwi [1]fsr1
  9000                           
  9001                           ;mcc_generated_files/i2c.c: 716:     ptrb->address |= 0x01;
  9002  117F  0874               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9003  1180  0086               	movwf	6
  9004  1181  0875               	movf	I2C_MasterReadTRBBuild@ptrb+1,w
  9005  1182  0087               	movwf	7
  9006  1183  3001               	movlw	1
  9007  1184  0481               	iorwf	1,f
  9008  1185  3141               	addfsr 1,1
  9009  1186  3000               	movlw	0
  9010  1187  0481               	iorwf	1,f
  9011                           
  9012                           ;mcc_generated_files/i2c.c: 717:     ptrb->length = length;
  9013  1188  0874               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9014  1189  3E02               	addlw	2
  9015  118A  00A0               	movwf	??_I2C_MasterReadTRBBuild
  9016  118B  3000               	movlw	0
  9017  118C  3D75               	addwfc	I2C_MasterReadTRBBuild@ptrb+1,w
  9018  118D  00A1               	movwf	??_I2C_MasterReadTRBBuild+1
  9019  118E  0820               	movf	??_I2C_MasterReadTRBBuild,w
  9020  118F  0086               	movwf	6
  9021  1190  0821               	movf	??_I2C_MasterReadTRBBuild+1,w
  9022  1191  0087               	movwf	7
  9023  1192  0877               	movf	I2C_MasterReadTRBBuild@length,w
  9024  1193  0081               	movwf	1
  9025                           
  9026                           ;mcc_generated_files/i2c.c: 718:     ptrb->pbuffer = pdata;
  9027  1194  0874               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9028  1195  3E03               	addlw	3
  9029  1196  00A0               	movwf	??_I2C_MasterReadTRBBuild
  9030  1197  3000               	movlw	0
  9031  1198  3D75               	addwfc	I2C_MasterReadTRBBuild@ptrb+1,w
  9032  1199  00A1               	movwf	??_I2C_MasterReadTRBBuild+1
  9033  119A  0820               	movf	??_I2C_MasterReadTRBBuild,w
  9034  119B  0086               	movwf	6
  9035  119C  0821               	movf	??_I2C_MasterReadTRBBuild+1,w
  9036  119D  0087               	movwf	7
  9037  119E  0876               	movf	I2C_MasterReadTRBBuild@pdata,w
  9038  119F  0081               	movwf	1
  9039  11A0  0008               	return
  9040  11A1                     __end_of_I2C_MasterReadTRBBuild:	
  9041                           
  9042                           	psect	text24
  9043  1062                     __ptext24:	
  9044 ;; *************** function _FlashError *****************
  9045 ;; Defined at:
  9046 ;;		line 30 in file "main.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;		None
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;  i               2    6[COMMON] int 
  9051 ;; Return value:  Size  Location     Type
  9052 ;;                  1    wreg      void 
  9053 ;; Registers used:
  9054 ;;		wreg, status,2
  9055 ;; Tracked objects:
  9056 ;;		On entry : 1F/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;Total ram usage:        4 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    3
  9067 ;; This function calls:
  9068 ;;		Nothing
  9069 ;; This function is called by:
  9070 ;;		_ReadEnvSensor
  9071 ;;		_main
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           
  9076                           ;psect for function _FlashError
  9077  1062                     _FlashError:	
  9078                           
  9079                           ;main.c: 32:     for (int i = 0; i < 3; i++)
  9080                           
  9081                           ;incstack = 0
  9082                           ; Regs used in _FlashError: [wreg+status,2]
  9083  1062  01F6               	clrf	FlashError@i
  9084  1063  01F7               	clrf	FlashError@i+1
  9085  1064                     l626:	
  9086                           ;main.c: 33:     {;main.c: 34:         do { LATCbits.LATC5 = 1; } while(0);
  9087                           
  9088  1064  0022               	movlb	2	; select bank2
  9089  1065  168E               	bsf	14,5	;volatile
  9090                           
  9091                           ;main.c: 35:         _delay((unsigned long)((250)*(4000000/4000.0)));
  9092  1066  3002               	movlw	2
  9093  1067  00F5               	movwf	??_FlashError+1
  9094  1068  3045               	movlw	69
  9095  1069  00F4               	movwf	??_FlashError
  9096  106A  30AA               	movlw	170
  9097  106B                     u3707:	
  9098  106B  0B89               	decfsz	9,f
  9099  106C  286B               	goto	u3707
  9100  106D  0BF4               	decfsz	??_FlashError,f
  9101  106E  286B               	goto	u3707
  9102  106F  0BF5               	decfsz	??_FlashError+1,f
  9103  1070  286B               	goto	u3707
  9104  1071  0022               	movlb	2	; select bank2
  9105  1072  128E               	bcf	14,5	;volatile
  9106                           
  9107                           ;main.c: 37:         _delay((unsigned long)((250)*(4000000/4000.0)));
  9108  1073  3002               	movlw	2
  9109  1074  00F5               	movwf	??_FlashError+1
  9110  1075  3045               	movlw	69
  9111  1076  00F4               	movwf	??_FlashError
  9112  1077  30AA               	movlw	170
  9113  1078                     u3717:	
  9114  1078  0B89               	decfsz	9,f
  9115  1079  2878               	goto	u3717
  9116  107A  0BF4               	decfsz	??_FlashError,f
  9117  107B  2878               	goto	u3717
  9118  107C  0BF5               	decfsz	??_FlashError+1,f
  9119  107D  2878               	goto	u3717
  9120                           
  9121                           ;main.c: 38:     }
  9122  107E  3001               	movlw	1
  9123  107F  07F6               	addwf	FlashError@i,f
  9124  1080  3000               	movlw	0
  9125  1081  3DF7               	addwfc	FlashError@i+1,f
  9126  1082  0877               	movf	FlashError@i+1,w
  9127  1083  3A80               	xorlw	128
  9128  1084  00F4               	movwf	??_FlashError
  9129  1085  3080               	movlw	128
  9130  1086  0274               	subwf	??_FlashError,w
  9131  1087  1D03               	skipz
  9132  1088  288B               	goto	u1855
  9133  1089  3003               	movlw	3
  9134  108A  0276               	subwf	FlashError@i,w
  9135  108B                     u1855:	
  9136  108B  1803               	btfsc	3,0
  9137  108C  0008               	return
  9138  108D  2864               	goto	l626
  9139  108E                     __end_of_FlashError:	
  9140                           
  9141                           	psect	text25
  9142  14FC                     __ptext25:	
  9143 ;; *************** function _bme280_compensate_data *****************
  9144 ;; Defined at:
  9145 ;;		line 729 in file "BME280_driver/bme280.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;  sensor_comp     1    wreg     unsigned char 
  9148 ;;  uncomp_data     1   61[BANK0 ] PTR const struct bme280_
  9149 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9150 ;;  comp_data       1   62[BANK0 ] PTR struct bme280_data
  9151 ;;		 -> main@sensor_data(12), 
  9152 ;;  calib_data      1   63[BANK0 ] PTR struct bme280_calib_
  9153 ;;		 -> main@env_sensor(51), 
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;  sensor_comp     1   66[BANK0 ] unsigned char 
  9156 ;;  rslt            1   65[BANK0 ] char 
  9157 ;; Return value:  Size  Location     Type
  9158 ;;                  1    wreg      char 
  9159 ;; Registers used:
  9160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9161 ;; Tracked objects:
  9162 ;;		On entry : 1F/1
  9163 ;;		On exit  : 1F/0
  9164 ;;		Unchanged: 0/0
  9165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9166 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;Total ram usage:        6 bytes
  9171 ;; Hardware stack levels used:    1
  9172 ;; Hardware stack levels required when called:    5
  9173 ;; This function calls:
  9174 ;;		_compensate_pressure
  9175 ;;		_compensate_temperature
  9176 ;; This function is called by:
  9177 ;;		_bme280_get_sensor_data
  9178 ;; This function uses a non-reentrant model
  9179 ;;
  9180                           
  9181                           
  9182                           ;psect for function _bme280_compensate_data
  9183  14FC                     _bme280_compensate_data:	
  9184                           
  9185                           ;incstack = 0
  9186                           ; Regs used in _bme280_compensate_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9187                           ;bme280_compensate_data@sensor_comp stored from wreg
  9188  14FC  0020               	movlb	0	; select bank0
  9189  14FD  00E2               	movwf	bme280_compensate_data@sensor_comp
  9190                           
  9191                           ;BME280_driver/bme280.c: 729: int8_t bme280_compensate_data(uint8_t sensor_comp,;BME280_
      +                          driver/bme280.c: 730:                               const struct bme280_uncomp_data *unc
      +                          omp_data,;BME280_driver/bme280.c: 731:                               struct bme280_data 
      +                          *comp_data,;BME280_driver/bme280.c: 732:                               struct bme280_cal
      +                          ib_data *calib_data);BME280_driver/bme280.c: 733: {;BME280_driver/bme280.c: 734:     int
      +                          8_t rslt = 0;
  9192  14FE  01E1               	clrf	bme280_compensate_data@rslt
  9193                           
  9194                           ;BME280_driver/bme280.c: 736:     if ((uncomp_data != ((void*)0)) && (comp_data != ((voi
      +                          d*)0)) && (calib_data != ((void*)0)))
  9195  14FF  085D               	movf	bme280_compensate_data@uncomp_data,w
  9196  1500  1903               	btfsc	3,2
  9197  1501  2D57               	goto	l124
  9198  1502  085E               	movf	bme280_compensate_data@comp_data,w
  9199  1503  1903               	btfsc	3,2
  9200  1504  2D57               	goto	l124
  9201  1505  085F               	movf	bme280_compensate_data@calib_data,w
  9202  1506  1903               	btfsc	3,2
  9203  1507  2D57               	goto	l124
  9204                           
  9205                           ;BME280_driver/bme280.c: 737:     {;BME280_driver/bme280.c: 739:         comp_data->temp
      +                          erature = 0;
  9206  1508  085E               	movf	bme280_compensate_data@comp_data,w
  9207  1509  3E04               	addlw	4
  9208  150A  0086               	movwf	6
  9209  150B  3001               	movlw	1	; select bank2/3
  9210  150C  0087               	movwf	7
  9211  150D  3000               	movlw	0
  9212  150E  3FC0               	movwi [0]fsr1
  9213  150F  3000               	movlw	0
  9214  1510  3FC1               	movwi [1]fsr1
  9215  1511  3FC2               	movwi [2]fsr1
  9216  1512  3FC3               	movwi [3]fsr1
  9217                           
  9218                           ;BME280_driver/bme280.c: 740:         comp_data->pressure = 0;
  9219  1513  085E               	movf	bme280_compensate_data@comp_data,w
  9220  1514  0086               	movwf	6
  9221  1515  3001               	movlw	1	; select bank2/3
  9222  1516  0087               	movwf	7
  9223  1517  3000               	movlw	0
  9224  1518  3FC0               	movwi [0]fsr1
  9225  1519  3FC1               	movwi [1]fsr1
  9226  151A  3FC2               	movwi [2]fsr1
  9227  151B  3FC3               	movwi [3]fsr1
  9228                           
  9229                           ;BME280_driver/bme280.c: 741:         comp_data->humidity = 0;
  9230  151C  085E               	movf	bme280_compensate_data@comp_data,w
  9231  151D  3E08               	addlw	8
  9232  151E  0086               	movwf	6
  9233  151F  3001               	movlw	1	; select bank2/3
  9234  1520  0087               	movwf	7
  9235  1521  3000               	movlw	0
  9236  1522  3FC0               	movwi [0]fsr1
  9237  1523  3000               	movlw	0
  9238  1524  3FC1               	movwi [1]fsr1
  9239  1525  3FC2               	movwi [2]fsr1
  9240  1526  3FC3               	movwi [3]fsr1
  9241                           
  9242                           ;BME280_driver/bme280.c: 744:         if (sensor_comp & (1 | 1 << 1 | 1 << 2))
  9243  1527  0862               	movf	bme280_compensate_data@sensor_comp,w
  9244  1528  3907               	andlw	7
  9245  1529  1903               	btfsc	3,2
  9246  152A  2D40               	goto	l3249
  9247                           
  9248                           ;BME280_driver/bme280.c: 745:         {;BME280_driver/bme280.c: 747:             comp_da
      +                          ta->temperature = compensate_temperature(uncomp_data, calib_data);
  9249  152B  085F               	movf	bme280_compensate_data@calib_data,w
  9250  152C  00E0               	movwf	??_bme280_compensate_data
  9251  152D  0860               	movf	??_bme280_compensate_data,w
  9252  152E  00B6               	movwf	compensate_temperature@calib_data
  9253  152F  085D               	movf	bme280_compensate_data@uncomp_data,w
  9254  1530  3186  2625  3194   	fcall	_compensate_temperature
  9255  1533  085E               	movf	bme280_compensate_data@comp_data,w
  9256  1534  3E04               	addlw	4
  9257  1535  0086               	movwf	6
  9258  1536  3001               	movlw	1	; select bank2/3
  9259  1537  0087               	movwf	7
  9260  1538  0836               	movf	?_compensate_temperature,w
  9261  1539  3FC0               	movwi [0]fsr1
  9262  153A  0837               	movf	?_compensate_temperature+1,w
  9263  153B  3FC1               	movwi [1]fsr1
  9264  153C  0838               	movf	?_compensate_temperature+2,w
  9265  153D  3FC2               	movwi [2]fsr1
  9266  153E  0839               	movf	?_compensate_temperature+3,w
  9267  153F  3FC3               	movwi [3]fsr1
  9268  1540                     l3249:	
  9269                           
  9270                           ;BME280_driver/bme280.c: 749:         if (sensor_comp & 1)
  9271  1540  1C62               	btfss	bme280_compensate_data@sensor_comp,0
  9272  1541  2D59               	goto	l3255
  9273                           
  9274                           ;BME280_driver/bme280.c: 750:         {;BME280_driver/bme280.c: 752:             comp_da
      +                          ta->pressure = compensate_pressure(uncomp_data, calib_data);
  9275  1542  085F               	movf	bme280_compensate_data@calib_data,w
  9276  1543  00E0               	movwf	??_bme280_compensate_data
  9277  1544  0860               	movf	??_bme280_compensate_data,w
  9278  1545  00B6               	movwf	compensate_pressure@calib_data
  9279  1546  085D               	movf	bme280_compensate_data@uncomp_data,w
  9280  1547  3180  2080  3194   	fcall	_compensate_pressure
  9281  154A  085E               	movf	bme280_compensate_data@comp_data,w
  9282  154B  0086               	movwf	6
  9283  154C  3001               	movlw	1	; select bank2/3
  9284  154D  0087               	movwf	7
  9285  154E  0836               	movf	?_compensate_pressure,w
  9286  154F  3FC0               	movwi [0]fsr1
  9287  1550  0837               	movf	?_compensate_pressure+1,w
  9288  1551  3FC1               	movwi [1]fsr1
  9289  1552  0838               	movf	?_compensate_pressure+2,w
  9290  1553  3FC2               	movwi [2]fsr1
  9291  1554  0839               	movf	?_compensate_pressure+3,w
  9292  1555  3FC3               	movwi [3]fsr1
  9293                           
  9294                           ;BME280_driver/bme280.c: 762:     }
  9295                           
  9296                           ;BME280_driver/bme280.c: 755:         {;BME280_driver/bme280.c: 761:         }
  9297  1556  2D59               	goto	l3255
  9298  1557                     l124:	
  9299                           ;BME280_driver/bme280.c: 763:     else
  9300                           
  9301                           
  9302                           ;BME280_driver/bme280.c: 764:     {;BME280_driver/bme280.c: 765:         rslt = -1;
  9303  1557  01E1               	clrf	bme280_compensate_data@rslt
  9304  1558  03E1               	decf	bme280_compensate_data@rslt,f
  9305  1559                     l3255:	
  9306                           
  9307                           ;BME280_driver/bme280.c: 768:     return rslt;
  9308  1559  0861               	movf	bme280_compensate_data@rslt,w
  9309  155A  0008               	return
  9310  155B                     __end_of_bme280_compensate_data:	
  9311                           
  9312                           	psect	text26
  9313  0625                     __ptext26:	
  9314 ;; *************** function _compensate_temperature *****************
  9315 ;; Defined at:
  9316 ;;		line 1124 in file "BME280_driver/bme280.c"
  9317 ;; Parameters:    Size  Location     Type
  9318 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  9319 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9320 ;;  calib_data      1   22[BANK0 ] PTR struct bme280_calib_
  9321 ;;		 -> main@env_sensor(51), 
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;  uncomp_data     1   52[BANK0 ] PTR const struct bme280_
  9324 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9325 ;;  temperature     4   57[BANK0 ] long 
  9326 ;;  var2            4   53[BANK0 ] long 
  9327 ;;  var1            4   48[BANK0 ] long 
  9328 ;;  temperature_    4   44[BANK0 ] long 
  9329 ;;  temperature_    4    0        long 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  4   22[BANK0 ] long 
  9332 ;; Registers used:
  9333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 1F/0
  9336 ;;		On exit  : 1F/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:       39 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    4
  9346 ;; This function calls:
  9347 ;;		___aldiv
  9348 ;;		___lmul
  9349 ;; This function is called by:
  9350 ;;		_bme280_compensate_data
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           
  9355                           ;psect for function _compensate_temperature
  9356  0625                     _compensate_temperature:	
  9357                           
  9358                           ;incstack = 0
  9359                           ; Regs used in _compensate_temperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9360                           ;compensate_temperature@uncomp_data stored from wreg
  9361  0625  00D4               	movwf	compensate_temperature@uncomp_data
  9362                           
  9363                           ;BME280_driver/bme280.c: 1131:     int32_t temperature_max = 8500;
  9364  0626  3000               	movlw	0
  9365  0627  00CF               	movwf	compensate_temperature@temperature_max+3
  9366  0628  3000               	movlw	0
  9367  0629  00CE               	movwf	compensate_temperature@temperature_max+2
  9368  062A  3021               	movlw	33
  9369  062B  00CD               	movwf	compensate_temperature@temperature_max+1
  9370  062C  3034               	movlw	52
  9371  062D  00CC               	movwf	compensate_temperature@temperature_max
  9372                           
  9373                           ;BME280_driver/bme280.c: 1133:     var1 = (int32_t)((uncomp_data->temperature / 8) - ((i
      +                          nt32_t)calib_data->dig_T1 * 2));
  9374  062E  0836               	movf	compensate_temperature@calib_data,w
  9375  062F  0086               	movwf	6
  9376  0630  3001               	movlw	1	; select bank2/3
  9377  0631  0087               	movwf	7
  9378  0632  3F40               	moviw [0]fsr1
  9379  0633  00BA               	movwf	??_compensate_temperature
  9380  0634  3F41               	moviw [1]fsr1
  9381  0635  00BB               	movwf	??_compensate_temperature+1
  9382  0636  083A               	movf	??_compensate_temperature,w
  9383  0637  00BC               	movwf	??_compensate_temperature+2
  9384  0638  083B               	movf	??_compensate_temperature+1,w
  9385  0639  00BD               	movwf	??_compensate_temperature+3
  9386  063A  01BE               	clrf	??_compensate_temperature+4
  9387  063B  01BF               	clrf	??_compensate_temperature+5
  9388  063C  3001               	movlw	1
  9389  063D                     u2395:	
  9390  063D  35BC               	lslf	??_compensate_temperature+2,f
  9391  063E  0DBD               	rlf	??_compensate_temperature+3,f
  9392  063F  0DBE               	rlf	??_compensate_temperature+4,f
  9393  0640  0DBF               	rlf	??_compensate_temperature+5,f
  9394  0641  0B89               	decfsz	9,f
  9395  0642  2E3D               	goto	u2395
  9396  0643  0854               	movf	compensate_temperature@uncomp_data,w
  9397  0644  3E04               	addlw	4
  9398  0645  0086               	movwf	6
  9399  0646  0187               	clrf	7
  9400  0647  3F40               	moviw [0]fsr1
  9401  0648  00C0               	movwf	??_compensate_temperature+6
  9402  0649  3F41               	moviw [1]fsr1
  9403  064A  00C1               	movwf	??_compensate_temperature+7
  9404  064B  3F42               	moviw [2]fsr1
  9405  064C  00C2               	movwf	??_compensate_temperature+8
  9406  064D  3F43               	moviw [3]fsr1
  9407  064E  00C3               	movwf	??_compensate_temperature+9
  9408  064F  3003               	movlw	3
  9409  0650                     u2405:	
  9410  0650  36C3               	lsrf	??_compensate_temperature+9,f
  9411  0651  0CC2               	rrf	??_compensate_temperature+8,f
  9412  0652  0CC1               	rrf	??_compensate_temperature+7,f
  9413  0653  0CC0               	rrf	??_compensate_temperature+6,f
  9414  0654  0B89               	decfsz	9,f
  9415  0655  2E50               	goto	u2405
  9416  0656  083C               	movf	??_compensate_temperature+2,w
  9417  0657  02C0               	subwf	??_compensate_temperature+6,f
  9418  0658  083D               	movf	??_compensate_temperature+3,w
  9419  0659  3BC1               	subwfb	??_compensate_temperature+7,f
  9420  065A  083E               	movf	??_compensate_temperature+4,w
  9421  065B  3BC2               	subwfb	??_compensate_temperature+8,f
  9422  065C  083F               	movf	??_compensate_temperature+5,w
  9423  065D  3BC3               	subwfb	??_compensate_temperature+9,f
  9424  065E  0843               	movf	??_compensate_temperature+9,w
  9425  065F  00D3               	movwf	compensate_temperature@var1+3
  9426  0660  0842               	movf	??_compensate_temperature+8,w
  9427  0661  00D2               	movwf	compensate_temperature@var1+2
  9428  0662  0841               	movf	??_compensate_temperature+7,w
  9429  0663  00D1               	movwf	compensate_temperature@var1+1
  9430  0664  0840               	movf	??_compensate_temperature+6,w
  9431  0665  00D0               	movwf	compensate_temperature@var1
  9432                           
  9433                           ;BME280_driver/bme280.c: 1134:     var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
  9434  0666  3000               	movlw	0
  9435  0667  00AB               	movwf	___aldiv@divisor+3
  9436  0668  3000               	movlw	0
  9437  0669  00AA               	movwf	___aldiv@divisor+2
  9438  066A  3008               	movlw	8
  9439  066B  00A9               	movwf	___aldiv@divisor+1
  9440  066C  3000               	movlw	0
  9441  066D  00A8               	movwf	___aldiv@divisor
  9442  066E  0836               	movf	compensate_temperature@calib_data,w
  9443  066F  3E02               	addlw	2
  9444  0670  0086               	movwf	6
  9445  0671  3001               	movlw	1	; select bank2/3
  9446  0672  0087               	movwf	7
  9447  0673  3F40               	moviw [0]fsr1
  9448  0674  00BA               	movwf	??_compensate_temperature
  9449  0675  3F41               	moviw [1]fsr1
  9450  0676  00BB               	movwf	??_compensate_temperature+1
  9451  0677  083A               	movf	??_compensate_temperature,w
  9452  0678  00A0               	movwf	___lmul@multiplier
  9453  0679  083B               	movf	??_compensate_temperature+1,w
  9454  067A  00A1               	movwf	___lmul@multiplier+1
  9455  067B  0D89               	rlf	9,f
  9456  067C  3B89               	subwfb	9,f
  9457  067D  0989               	comf	9,f
  9458  067E  00A2               	movwf	___lmul@multiplier+2
  9459  067F  00A3               	movwf	___lmul@multiplier+3
  9460  0680  0853               	movf	compensate_temperature@var1+3,w
  9461  0681  00A7               	movwf	___lmul@multiplicand+3
  9462  0682  0852               	movf	compensate_temperature@var1+2,w
  9463  0683  00A6               	movwf	___lmul@multiplicand+2
  9464  0684  0851               	movf	compensate_temperature@var1+1,w
  9465  0685  00A5               	movwf	___lmul@multiplicand+1
  9466  0686  0850               	movf	compensate_temperature@var1,w
  9467  0687  00A4               	movwf	___lmul@multiplicand
  9468  0688  3191  2142  3186   	fcall	___lmul
  9469  068B  0823               	movf	?___lmul+3,w
  9470  068C  00AF               	movwf	___aldiv@dividend+3
  9471  068D  0822               	movf	?___lmul+2,w
  9472  068E  00AE               	movwf	___aldiv@dividend+2
  9473  068F  0821               	movf	?___lmul+1,w
  9474  0690  00AD               	movwf	___aldiv@dividend+1
  9475  0691  0820               	movf	?___lmul,w
  9476  0692  00AC               	movwf	___aldiv@dividend
  9477  0693  3197  277F  3186   	fcall	___aldiv
  9478  0696  082B               	movf	?___aldiv+3,w
  9479  0697  00D3               	movwf	compensate_temperature@var1+3
  9480  0698  082A               	movf	?___aldiv+2,w
  9481  0699  00D2               	movwf	compensate_temperature@var1+2
  9482  069A  0829               	movf	?___aldiv+1,w
  9483  069B  00D1               	movwf	compensate_temperature@var1+1
  9484  069C  0828               	movf	?___aldiv,w
  9485  069D  00D0               	movwf	compensate_temperature@var1
  9486                           
  9487                           ;BME280_driver/bme280.c: 1135:     var2 = (int32_t)((uncomp_data->temperature / 16) - ((
      +                          int32_t)calib_data->dig_T1));
  9488  069E  0836               	movf	compensate_temperature@calib_data,w
  9489  069F  0086               	movwf	6
  9490  06A0  3001               	movlw	1	; select bank2/3
  9491  06A1  0087               	movwf	7
  9492  06A2  3F40               	moviw [0]fsr1
  9493  06A3  00BA               	movwf	??_compensate_temperature
  9494  06A4  3F41               	moviw [1]fsr1
  9495  06A5  00BB               	movwf	??_compensate_temperature+1
  9496  06A6  083A               	movf	??_compensate_temperature,w
  9497  06A7  00BC               	movwf	??_compensate_temperature+2
  9498  06A8  083B               	movf	??_compensate_temperature+1,w
  9499  06A9  00BD               	movwf	??_compensate_temperature+3
  9500  06AA  01BE               	clrf	??_compensate_temperature+4
  9501  06AB  01BF               	clrf	??_compensate_temperature+5
  9502  06AC  0854               	movf	compensate_temperature@uncomp_data,w
  9503  06AD  3E04               	addlw	4
  9504  06AE  0086               	movwf	6
  9505  06AF  0187               	clrf	7
  9506  06B0  3F40               	moviw [0]fsr1
  9507  06B1  00C0               	movwf	??_compensate_temperature+6
  9508  06B2  3F41               	moviw [1]fsr1
  9509  06B3  00C1               	movwf	??_compensate_temperature+7
  9510  06B4  3F42               	moviw [2]fsr1
  9511  06B5  00C2               	movwf	??_compensate_temperature+8
  9512  06B6  3F43               	moviw [3]fsr1
  9513  06B7  00C3               	movwf	??_compensate_temperature+9
  9514  06B8  3004               	movlw	4
  9515  06B9                     u2415:	
  9516  06B9  36C3               	lsrf	??_compensate_temperature+9,f
  9517  06BA  0CC2               	rrf	??_compensate_temperature+8,f
  9518  06BB  0CC1               	rrf	??_compensate_temperature+7,f
  9519  06BC  0CC0               	rrf	??_compensate_temperature+6,f
  9520  06BD  0B89               	decfsz	9,f
  9521  06BE  2EB9               	goto	u2415
  9522  06BF  083C               	movf	??_compensate_temperature+2,w
  9523  06C0  02C0               	subwf	??_compensate_temperature+6,f
  9524  06C1  083D               	movf	??_compensate_temperature+3,w
  9525  06C2  3BC1               	subwfb	??_compensate_temperature+7,f
  9526  06C3  083E               	movf	??_compensate_temperature+4,w
  9527  06C4  3BC2               	subwfb	??_compensate_temperature+8,f
  9528  06C5  083F               	movf	??_compensate_temperature+5,w
  9529  06C6  3BC3               	subwfb	??_compensate_temperature+9,f
  9530  06C7  0843               	movf	??_compensate_temperature+9,w
  9531  06C8  00D8               	movwf	compensate_temperature@var2+3
  9532  06C9  0842               	movf	??_compensate_temperature+8,w
  9533  06CA  00D7               	movwf	compensate_temperature@var2+2
  9534  06CB  0841               	movf	??_compensate_temperature+7,w
  9535  06CC  00D6               	movwf	compensate_temperature@var2+1
  9536  06CD  0840               	movf	??_compensate_temperature+6,w
  9537  06CE  00D5               	movwf	compensate_temperature@var2
  9538                           
  9539                           ;BME280_driver/bme280.c: 1136:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  9540  06CF  3000               	movlw	0
  9541  06D0  00AB               	movwf	___aldiv@divisor+3
  9542  06D1  3000               	movlw	0
  9543  06D2  00AA               	movwf	___aldiv@divisor+2
  9544  06D3  3010               	movlw	16
  9545  06D4  00A9               	movwf	___aldiv@divisor+1
  9546  06D5  3000               	movlw	0
  9547  06D6  00A8               	movwf	___aldiv@divisor
  9548  06D7  0858               	movf	compensate_temperature@var2+3,w
  9549  06D8  00A3               	movwf	___lmul@multiplier+3
  9550  06D9  0857               	movf	compensate_temperature@var2+2,w
  9551  06DA  00A2               	movwf	___lmul@multiplier+2
  9552  06DB  0856               	movf	compensate_temperature@var2+1,w
  9553  06DC  00A1               	movwf	___lmul@multiplier+1
  9554  06DD  0855               	movf	compensate_temperature@var2,w
  9555  06DE  00A0               	movwf	___lmul@multiplier
  9556  06DF  0858               	movf	compensate_temperature@var2+3,w
  9557  06E0  00A7               	movwf	___lmul@multiplicand+3
  9558  06E1  0857               	movf	compensate_temperature@var2+2,w
  9559  06E2  00A6               	movwf	___lmul@multiplicand+2
  9560  06E3  0856               	movf	compensate_temperature@var2+1,w
  9561  06E4  00A5               	movwf	___lmul@multiplicand+1
  9562  06E5  0855               	movf	compensate_temperature@var2,w
  9563  06E6  00A4               	movwf	___lmul@multiplicand
  9564  06E7  3191  2142  3186   	fcall	___lmul
  9565  06EA  0823               	movf	?___lmul+3,w
  9566  06EB  00AF               	movwf	___aldiv@dividend+3
  9567  06EC  0822               	movf	?___lmul+2,w
  9568  06ED  00AE               	movwf	___aldiv@dividend+2
  9569  06EE  0821               	movf	?___lmul+1,w
  9570  06EF  00AD               	movwf	___aldiv@dividend+1
  9571  06F0  0820               	movf	?___lmul,w
  9572  06F1  00AC               	movwf	___aldiv@dividend
  9573  06F2  3197  277F  3186   	fcall	___aldiv
  9574  06F5  082B               	movf	?___aldiv+3,w
  9575  06F6  00C7               	movwf	_compensate_temperature$2552+3
  9576  06F7  082A               	movf	?___aldiv+2,w
  9577  06F8  00C6               	movwf	_compensate_temperature$2552+2
  9578  06F9  0829               	movf	?___aldiv+1,w
  9579  06FA  00C5               	movwf	_compensate_temperature$2552+1
  9580  06FB  0828               	movf	?___aldiv,w
  9581  06FC  00C4               	movwf	_compensate_temperature$2552
  9582                           
  9583                           ;BME280_driver/bme280.c: 1136:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  9584  06FD  3000               	movlw	0
  9585  06FE  00AB               	movwf	___aldiv@divisor+3
  9586  06FF  3000               	movlw	0
  9587  0700  00AA               	movwf	___aldiv@divisor+2
  9588  0701  3040               	movlw	64
  9589  0702  00A9               	movwf	___aldiv@divisor+1
  9590  0703  3000               	movlw	0
  9591  0704  00A8               	movwf	___aldiv@divisor
  9592  0705  0847               	movf	_compensate_temperature$2552+3,w
  9593  0706  00A3               	movwf	___lmul@multiplier+3
  9594  0707  0846               	movf	_compensate_temperature$2552+2,w
  9595  0708  00A2               	movwf	___lmul@multiplier+2
  9596  0709  0845               	movf	_compensate_temperature$2552+1,w
  9597  070A  00A1               	movwf	___lmul@multiplier+1
  9598  070B  0844               	movf	_compensate_temperature$2552,w
  9599  070C  00A0               	movwf	___lmul@multiplier
  9600  070D  0836               	movf	compensate_temperature@calib_data,w
  9601  070E  3E04               	addlw	4
  9602  070F  0086               	movwf	6
  9603  0710  3001               	movlw	1	; select bank2/3
  9604  0711  0087               	movwf	7
  9605  0712  3F40               	moviw [0]fsr1
  9606  0713  00BA               	movwf	??_compensate_temperature
  9607  0714  3F41               	moviw [1]fsr1
  9608  0715  00BB               	movwf	??_compensate_temperature+1
  9609  0716  083A               	movf	??_compensate_temperature,w
  9610  0717  00A4               	movwf	___lmul@multiplicand
  9611  0718  083B               	movf	??_compensate_temperature+1,w
  9612  0719  00A5               	movwf	___lmul@multiplicand+1
  9613  071A  0D89               	rlf	9,f
  9614  071B  3B89               	subwfb	9,f
  9615  071C  0989               	comf	9,f
  9616  071D  00A6               	movwf	___lmul@multiplicand+2
  9617  071E  00A7               	movwf	___lmul@multiplicand+3
  9618  071F  3191  2142  3186   	fcall	___lmul
  9619  0722  0823               	movf	?___lmul+3,w
  9620  0723  00AF               	movwf	___aldiv@dividend+3
  9621  0724  0822               	movf	?___lmul+2,w
  9622  0725  00AE               	movwf	___aldiv@dividend+2
  9623  0726  0821               	movf	?___lmul+1,w
  9624  0727  00AD               	movwf	___aldiv@dividend+1
  9625  0728  0820               	movf	?___lmul,w
  9626  0729  00AC               	movwf	___aldiv@dividend
  9627  072A  3197  277F  3186   	fcall	___aldiv
  9628  072D  082B               	movf	?___aldiv+3,w
  9629  072E  00D8               	movwf	compensate_temperature@var2+3
  9630  072F  082A               	movf	?___aldiv+2,w
  9631  0730  00D7               	movwf	compensate_temperature@var2+2
  9632  0731  0829               	movf	?___aldiv+1,w
  9633  0732  00D6               	movwf	compensate_temperature@var2+1
  9634  0733  0828               	movf	?___aldiv,w
  9635  0734  00D5               	movwf	compensate_temperature@var2
  9636                           
  9637                           ;BME280_driver/bme280.c: 1137:     calib_data->t_fine = var1 + var2;
  9638  0735  0850               	movf	compensate_temperature@var1,w
  9639  0736  0755               	addwf	compensate_temperature@var2,w
  9640  0737  00BA               	movwf	??_compensate_temperature
  9641  0738  0851               	movf	compensate_temperature@var1+1,w
  9642  0739  3D56               	addwfc	compensate_temperature@var2+1,w
  9643  073A  00BB               	movwf	??_compensate_temperature+1
  9644  073B  0852               	movf	compensate_temperature@var1+2,w
  9645  073C  3D57               	addwfc	compensate_temperature@var2+2,w
  9646  073D  00BC               	movwf	??_compensate_temperature+2
  9647  073E  0853               	movf	compensate_temperature@var1+3,w
  9648  073F  3D58               	addwfc	compensate_temperature@var2+3,w
  9649  0740  00BD               	movwf	??_compensate_temperature+3
  9650  0741  0836               	movf	compensate_temperature@calib_data,w
  9651  0742  3E21               	addlw	33
  9652  0743  0086               	movwf	6
  9653  0744  3001               	movlw	1	; select bank2/3
  9654  0745  0087               	movwf	7
  9655  0746  083A               	movf	??_compensate_temperature,w
  9656  0747  3FC0               	movwi [0]fsr1
  9657  0748  083B               	movf	??_compensate_temperature+1,w
  9658  0749  3FC1               	movwi [1]fsr1
  9659  074A  083C               	movf	??_compensate_temperature+2,w
  9660  074B  3FC2               	movwi [2]fsr1
  9661  074C  083D               	movf	??_compensate_temperature+3,w
  9662  074D  3FC3               	movwi [3]fsr1
  9663                           
  9664                           ;BME280_driver/bme280.c: 1138:     temperature = (calib_data->t_fine * 5 + 128) / 256;
  9665  074E  3000               	movlw	0
  9666  074F  00AB               	movwf	___aldiv@divisor+3
  9667  0750  3000               	movlw	0
  9668  0751  00AA               	movwf	___aldiv@divisor+2
  9669  0752  3001               	movlw	1
  9670  0753  00A9               	movwf	___aldiv@divisor+1
  9671  0754  3000               	movlw	0
  9672  0755  00A8               	movwf	___aldiv@divisor
  9673  0756  3080               	movlw	128
  9674  0757  00BA               	movwf	??_compensate_temperature
  9675  0758  3000               	movlw	0
  9676  0759  00BB               	movwf	??_compensate_temperature+1
  9677  075A  3000               	movlw	0
  9678  075B  00BC               	movwf	??_compensate_temperature+2
  9679  075C  3000               	movlw	0
  9680  075D  00BD               	movwf	??_compensate_temperature+3
  9681  075E  0836               	movf	compensate_temperature@calib_data,w
  9682  075F  3E21               	addlw	33
  9683  0760  0086               	movwf	6
  9684  0761  3001               	movlw	1	; select bank2/3
  9685  0762  0087               	movwf	7
  9686  0763  3F40               	moviw [0]fsr1
  9687  0764  00A0               	movwf	___lmul@multiplier
  9688  0765  3F41               	moviw [1]fsr1
  9689  0766  00A1               	movwf	___lmul@multiplier+1
  9690  0767  3F42               	moviw [2]fsr1
  9691  0768  00A2               	movwf	___lmul@multiplier+2
  9692  0769  3F43               	moviw [3]fsr1
  9693  076A  00A3               	movwf	___lmul@multiplier+3
  9694  076B  3000               	movlw	0
  9695  076C  00A7               	movwf	___lmul@multiplicand+3
  9696  076D  3000               	movlw	0
  9697  076E  00A6               	movwf	___lmul@multiplicand+2
  9698  076F  3000               	movlw	0
  9699  0770  00A5               	movwf	___lmul@multiplicand+1
  9700  0771  3005               	movlw	5
  9701  0772  00A4               	movwf	___lmul@multiplicand
  9702  0773  3191  2142  3186   	fcall	___lmul
  9703  0776  0820               	movf	?___lmul,w
  9704  0777  07BA               	addwf	??_compensate_temperature,f
  9705  0778  0821               	movf	?___lmul+1,w
  9706  0779  3DBB               	addwfc	??_compensate_temperature+1,f
  9707  077A  0822               	movf	?___lmul+2,w
  9708  077B  3DBC               	addwfc	??_compensate_temperature+2,f
  9709  077C  0823               	movf	?___lmul+3,w
  9710  077D  3DBD               	addwfc	??_compensate_temperature+3,f
  9711  077E  083D               	movf	??_compensate_temperature+3,w
  9712  077F  00AF               	movwf	___aldiv@dividend+3
  9713  0780  083C               	movf	??_compensate_temperature+2,w
  9714  0781  00AE               	movwf	___aldiv@dividend+2
  9715  0782  083B               	movf	??_compensate_temperature+1,w
  9716  0783  00AD               	movwf	___aldiv@dividend+1
  9717  0784  083A               	movf	??_compensate_temperature,w
  9718  0785  00AC               	movwf	___aldiv@dividend
  9719  0786  3197  277F  3186   	fcall	___aldiv
  9720  0789  082B               	movf	?___aldiv+3,w
  9721  078A  00DC               	movwf	compensate_temperature@temperature+3
  9722  078B  082A               	movf	?___aldiv+2,w
  9723  078C  00DB               	movwf	compensate_temperature@temperature+2
  9724  078D  0829               	movf	?___aldiv+1,w
  9725  078E  00DA               	movwf	compensate_temperature@temperature+1
  9726  078F  0828               	movf	?___aldiv,w
  9727  0790  00D9               	movwf	compensate_temperature@temperature
  9728                           
  9729                           ;BME280_driver/bme280.c: 1139:     if (temperature < temperature_min)
  9730  0791  1FDC               	btfss	compensate_temperature@temperature+3,7
  9731  0792  2FA5               	goto	l3023
  9732  0793  3060               	movlw	96
  9733  0794  0259               	subwf	compensate_temperature@temperature,w
  9734  0795  30F0               	movlw	240
  9735  0796  3B5A               	subwfb	compensate_temperature@temperature+1,w
  9736  0797  30FF               	movlw	255
  9737  0798  3B5B               	subwfb	compensate_temperature@temperature+2,w
  9738  0799  30FF               	movlw	255
  9739  079A  3B5C               	subwfb	compensate_temperature@temperature+3,w
  9740  079B  1803               	btfsc	3,0
  9741  079C  2FA5               	goto	l3023
  9742                           
  9743                           ;BME280_driver/bme280.c: 1140:     {;BME280_driver/bme280.c: 1141:         temperature =
      +                           temperature_min;
  9744  079D  30FF               	movlw	255
  9745  079E  00DC               	movwf	compensate_temperature@temperature+3
  9746  079F  30FF               	movlw	255
  9747  07A0  00DB               	movwf	compensate_temperature@temperature+2
  9748  07A1  30F0               	movlw	240
  9749  07A2  00DA               	movwf	compensate_temperature@temperature+1
  9750  07A3  3060               	movlw	96
  9751  07A4  2FBA               	goto	L4
  9752  07A5                     l3023:	
  9753                           ;BME280_driver/bme280.c: 1142:     }
  9754                           
  9755  07A5  1BDC               	btfsc	compensate_temperature@temperature+3,7
  9756  07A6  2FBB               	goto	l183
  9757  07A7  085C               	movf	compensate_temperature@temperature+3,w
  9758  07A8  1D03               	btfss	3,2
  9759  07A9  2FB3               	goto	l3025
  9760  07AA  085B               	movf	compensate_temperature@temperature+2,w
  9761  07AB  1D03               	btfss	3,2
  9762  07AC  2FB3               	goto	l3025
  9763  07AD  3035               	movlw	53
  9764  07AE  0259               	subwf	compensate_temperature@temperature,w
  9765  07AF  3021               	movlw	33
  9766  07B0  3B5A               	subwfb	compensate_temperature@temperature+1,w
  9767  07B1  1C03               	btfss	3,0
  9768  07B2  2FBB               	goto	l183
  9769  07B3                     l3025:	
  9770                           
  9771                           ;BME280_driver/bme280.c: 1144:     {;BME280_driver/bme280.c: 1145:         temperature =
      +                           temperature_max;
  9772  07B3  3000               	movlw	0
  9773  07B4  00DC               	movwf	compensate_temperature@temperature+3
  9774  07B5  3000               	movlw	0
  9775  07B6  00DB               	movwf	compensate_temperature@temperature+2
  9776  07B7  3021               	movlw	33
  9777  07B8  00DA               	movwf	compensate_temperature@temperature+1
  9778  07B9  3034               	movlw	52
  9779  07BA                     L4:	
  9780  07BA  00D9               	movwf	compensate_temperature@temperature
  9781  07BB                     l183:	
  9782                           
  9783                           ;BME280_driver/bme280.c: 1148:     return temperature;
  9784  07BB  085C               	movf	compensate_temperature@temperature+3,w
  9785  07BC  00B9               	movwf	?_compensate_temperature+3
  9786  07BD  085B               	movf	compensate_temperature@temperature+2,w
  9787  07BE  00B8               	movwf	?_compensate_temperature+2
  9788  07BF  085A               	movf	compensate_temperature@temperature+1,w
  9789  07C0  00B7               	movwf	?_compensate_temperature+1
  9790  07C1  0859               	movf	compensate_temperature@temperature,w
  9791  07C2  00B6               	movwf	?_compensate_temperature
  9792  07C3  0008               	return
  9793  07C4                     __end_of_compensate_temperature:	
  9794                           
  9795                           	psect	text27
  9796  0080                     __ptext27:	
  9797 ;; *************** function _compensate_pressure *****************
  9798 ;; Defined at:
  9799 ;;		line 1207 in file "BME280_driver/bme280.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  9802 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9803 ;;  calib_data      1   22[BANK0 ] PTR const struct bme280_
  9804 ;;		 -> main@env_sensor(51), 
  9805 ;; Auto vars:     Size  Location     Type
  9806 ;;  uncomp_data     1   20[BANK1 ] PTR const struct bme280_
  9807 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9808 ;;  var1            4   41[BANK1 ] long 
  9809 ;;  pressure        4   37[BANK1 ] unsigned long 
  9810 ;;  var2            4   33[BANK1 ] long 
  9811 ;;  pressure_min    4    0        unsigned long 
  9812 ;;  pressure_max    4   21[BANK1 ] unsigned long 
  9813 ;;  var5            4    8[BANK1 ] unsigned long 
  9814 ;;  var4            4    4[BANK1 ] long 
  9815 ;;  var3            4    0[BANK1 ] long 
  9816 ;; Return value:  Size  Location     Type
  9817 ;;                  4   22[BANK0 ] unsigned long 
  9818 ;; Registers used:
  9819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9820 ;; Tracked objects:
  9821 ;;		On entry : 1F/0
  9822 ;;		On exit  : 1F/0
  9823 ;;		Unchanged: 0/0
  9824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9825 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Locals:         0       0      45       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;      Totals:         0      22      45       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;Total ram usage:       67 bytes
  9830 ;; Hardware stack levels used:    1
  9831 ;; Hardware stack levels required when called:    4
  9832 ;; This function calls:
  9833 ;;		___aldiv
  9834 ;;		___lldiv
  9835 ;;		___lmul
  9836 ;; This function is called by:
  9837 ;;		_bme280_compensate_data
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           
  9842                           ;psect for function _compensate_pressure
  9843  0080                     _compensate_pressure:	
  9844                           
  9845                           ;incstack = 0
  9846                           ; Regs used in _compensate_pressure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9847                           ;compensate_pressure@uncomp_data stored from wreg
  9848  0080  0021               	movlb	1	; select bank1
  9849  0081  00B4               	movwf	compensate_pressure@uncomp_data^(0+128)
  9850                           
  9851                           ;BME280_driver/bme280.c: 1217:     uint32_t pressure_max = 110000;
  9852  0082  3000               	movlw	0
  9853  0083  00B8               	movwf	(compensate_pressure@pressure_max+3)^(0+128)
  9854  0084  3001               	movlw	1
  9855  0085  00B7               	movwf	(compensate_pressure@pressure_max+2)^(0+128)
  9856  0086  30AD               	movlw	173
  9857  0087  00B6               	movwf	(compensate_pressure@pressure_max+1)^(0+128)
  9858  0088  30B0               	movlw	176
  9859  0089  00B5               	movwf	compensate_pressure@pressure_max^(0+128)
  9860                           
  9861                           ;BME280_driver/bme280.c: 1219:     var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t
      +                          )64000;
  9862  008A  3000               	movlw	0
  9863  008B  0020               	movlb	0	; select bank0
  9864  008C  00AB               	movwf	___aldiv@divisor+3
  9865  008D  3000               	movlw	0
  9866  008E  00AA               	movwf	___aldiv@divisor+2
  9867  008F  3000               	movlw	0
  9868  0090  00A9               	movwf	___aldiv@divisor+1
  9869  0091  3002               	movlw	2
  9870  0092  00A8               	movwf	___aldiv@divisor
  9871  0093  0836               	movf	compensate_pressure@calib_data,w
  9872  0094  3E21               	addlw	33
  9873  0095  0086               	movwf	6
  9874  0096  3001               	movlw	1	; select bank2/3
  9875  0097  0087               	movwf	7
  9876  0098  3F40               	moviw [0]fsr1
  9877  0099  00AC               	movwf	___aldiv@dividend
  9878  009A  3F41               	moviw [1]fsr1
  9879  009B  00AD               	movwf	___aldiv@dividend+1
  9880  009C  3F42               	moviw [2]fsr1
  9881  009D  00AE               	movwf	___aldiv@dividend+2
  9882  009E  3F43               	moviw [3]fsr1
  9883  009F  00AF               	movwf	___aldiv@dividend+3
  9884  00A0  3197  277F  3180   	fcall	___aldiv
  9885  00A3  3000               	movlw	0
  9886  00A4  0728               	addwf	?___aldiv,w
  9887  00A5  0021               	movlb	1	; select bank1
  9888  00A6  00C9               	movwf	compensate_pressure@var1^(0+128)
  9889  00A7  3006               	movlw	6
  9890  00A8  0020               	movlb	0	; select bank0
  9891  00A9  3D29               	addwfc	?___aldiv+1,w
  9892  00AA  0021               	movlb	1	; select bank1
  9893  00AB  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
  9894  00AC  30FF               	movlw	255
  9895  00AD  0020               	movlb	0	; select bank0
  9896  00AE  3D2A               	addwfc	?___aldiv+2,w
  9897  00AF  0021               	movlb	1	; select bank1
  9898  00B0  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
  9899  00B1  30FF               	movlw	255
  9900  00B2  0020               	movlb	0	; select bank0
  9901  00B3  3D2B               	addwfc	?___aldiv+3,w
  9902  00B4  0021               	movlb	1	; select bank1
  9903  00B5  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
  9904                           
  9905                           ;BME280_driver/bme280.c: 1220:     var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t
      +                          )calib_data->dig_P6);
  9906  00B6  3000               	movlw	0
  9907  00B7  0020               	movlb	0	; select bank0
  9908  00B8  00AB               	movwf	___aldiv@divisor+3
  9909  00B9  3000               	movlw	0
  9910  00BA  00AA               	movwf	___aldiv@divisor+2
  9911  00BB  3000               	movlw	0
  9912  00BC  00A9               	movwf	___aldiv@divisor+1
  9913  00BD  3004               	movlw	4
  9914  00BE  00A8               	movwf	___aldiv@divisor
  9915  00BF  0021               	movlb	1	; select bank1
  9916  00C0  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  9917  00C1  0020               	movlb	0	; select bank0
  9918  00C2  00AF               	movwf	___aldiv@dividend+3
  9919  00C3  0021               	movlb	1	; select bank1
  9920  00C4  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  9921  00C5  0020               	movlb	0	; select bank0
  9922  00C6  00AE               	movwf	___aldiv@dividend+2
  9923  00C7  0021               	movlb	1	; select bank1
  9924  00C8  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  9925  00C9  0020               	movlb	0	; select bank0
  9926  00CA  00AD               	movwf	___aldiv@dividend+1
  9927  00CB  0021               	movlb	1	; select bank1
  9928  00CC  0849               	movf	compensate_pressure@var1^(0+128),w
  9929  00CD  0020               	movlb	0	; select bank0
  9930  00CE  00AC               	movwf	___aldiv@dividend
  9931  00CF  3197  277F  3180   	fcall	___aldiv
  9932  00D2  082B               	movf	?___aldiv+3,w
  9933  00D3  00A3               	movwf	___lmul@multiplier+3
  9934  00D4  082A               	movf	?___aldiv+2,w
  9935  00D5  00A2               	movwf	___lmul@multiplier+2
  9936  00D6  0829               	movf	?___aldiv+1,w
  9937  00D7  00A1               	movwf	___lmul@multiplier+1
  9938  00D8  0828               	movf	?___aldiv,w
  9939  00D9  00A0               	movwf	___lmul@multiplier
  9940  00DA  3000               	movlw	0
  9941  00DB  00AB               	movwf	___aldiv@divisor+3
  9942  00DC  3000               	movlw	0
  9943  00DD  00AA               	movwf	___aldiv@divisor+2
  9944  00DE  3000               	movlw	0
  9945  00DF  00A9               	movwf	___aldiv@divisor+1
  9946  00E0  3004               	movlw	4
  9947  00E1  00A8               	movwf	___aldiv@divisor
  9948  00E2  0021               	movlb	1	; select bank1
  9949  00E3  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
  9950  00E4  0020               	movlb	0	; select bank0
  9951  00E5  00AF               	movwf	___aldiv@dividend+3
  9952  00E6  0021               	movlb	1	; select bank1
  9953  00E7  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
  9954  00E8  0020               	movlb	0	; select bank0
  9955  00E9  00AE               	movwf	___aldiv@dividend+2
  9956  00EA  0021               	movlb	1	; select bank1
  9957  00EB  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
  9958  00EC  0020               	movlb	0	; select bank0
  9959  00ED  00AD               	movwf	___aldiv@dividend+1
  9960  00EE  0021               	movlb	1	; select bank1
  9961  00EF  0849               	movf	compensate_pressure@var1^(0+128),w
  9962  00F0  0020               	movlb	0	; select bank0
  9963  00F1  00AC               	movwf	___aldiv@dividend
  9964  00F2  3197  277F  3180   	fcall	___aldiv
  9965  00F5  082B               	movf	?___aldiv+3,w
  9966  00F6  00A7               	movwf	___lmul@multiplicand+3
  9967  00F7  082A               	movf	?___aldiv+2,w
  9968  00F8  00A6               	movwf	___lmul@multiplicand+2
  9969  00F9  0829               	movf	?___aldiv+1,w
  9970  00FA  00A5               	movwf	___lmul@multiplicand+1
  9971  00FB  0828               	movf	?___aldiv,w
  9972  00FC  00A4               	movwf	___lmul@multiplicand
  9973  00FD  3191  2142  3180   	fcall	___lmul
  9974  0100  0823               	movf	?___lmul+3,w
  9975  0101  0021               	movlb	1	; select bank1
  9976  0102  00BC               	movwf	(_compensate_pressure$2553+3)^(0+128)
  9977  0103  0020               	movlb	0	; select bank0
  9978  0104  0822               	movf	?___lmul+2,w
  9979  0105  0021               	movlb	1	; select bank1
  9980  0106  00BB               	movwf	(_compensate_pressure$2553+2)^(0+128)
  9981  0107  0020               	movlb	0	; select bank0
  9982  0108  0821               	movf	?___lmul+1,w
  9983  0109  0021               	movlb	1	; select bank1
  9984  010A  00BA               	movwf	(_compensate_pressure$2553+1)^(0+128)
  9985  010B  0020               	movlb	0	; select bank0
  9986  010C  0820               	movf	?___lmul,w
  9987  010D  0021               	movlb	1	; select bank1
  9988  010E  00B9               	movwf	_compensate_pressure$2553^(0+128)
  9989                           
  9990                           ;BME280_driver/bme280.c: 1220:     var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t
      +                          )calib_data->dig_P6);
  9991  010F  3000               	movlw	0
  9992  0110  0020               	movlb	0	; select bank0
  9993  0111  00AB               	movwf	___aldiv@divisor+3
  9994  0112  3000               	movlw	0
  9995  0113  00AA               	movwf	___aldiv@divisor+2
  9996  0114  3008               	movlw	8
  9997  0115  00A9               	movwf	___aldiv@divisor+1
  9998  0116  3000               	movlw	0
  9999  0117  00A8               	movwf	___aldiv@divisor
 10000  0118  0021               	movlb	1	; select bank1
 10001  0119  083C               	movf	(_compensate_pressure$2553+3)^(0+128),w
 10002  011A  0020               	movlb	0	; select bank0
 10003  011B  00AF               	movwf	___aldiv@dividend+3
 10004  011C  0021               	movlb	1	; select bank1
 10005  011D  083B               	movf	(_compensate_pressure$2553+2)^(0+128),w
 10006  011E  0020               	movlb	0	; select bank0
 10007  011F  00AE               	movwf	___aldiv@dividend+2
 10008  0120  0021               	movlb	1	; select bank1
 10009  0121  083A               	movf	(_compensate_pressure$2553+1)^(0+128),w
 10010  0122  0020               	movlb	0	; select bank0
 10011  0123  00AD               	movwf	___aldiv@dividend+1
 10012  0124  0021               	movlb	1	; select bank1
 10013  0125  0839               	movf	_compensate_pressure$2553^(0+128),w
 10014  0126  0020               	movlb	0	; select bank0
 10015  0127  00AC               	movwf	___aldiv@dividend
 10016  0128  3197  277F  3180   	fcall	___aldiv
 10017  012B  082B               	movf	?___aldiv+3,w
 10018  012C  00A3               	movwf	___lmul@multiplier+3
 10019  012D  082A               	movf	?___aldiv+2,w
 10020  012E  00A2               	movwf	___lmul@multiplier+2
 10021  012F  0829               	movf	?___aldiv+1,w
 10022  0130  00A1               	movwf	___lmul@multiplier+1
 10023  0131  0828               	movf	?___aldiv,w
 10024  0132  00A0               	movwf	___lmul@multiplier
 10025  0133  0836               	movf	compensate_pressure@calib_data,w
 10026  0134  3E10               	addlw	16
 10027  0135  0086               	movwf	6
 10028  0136  3001               	movlw	1	; select bank2/3
 10029  0137  0087               	movwf	7
 10030  0138  3F40               	moviw [0]fsr1
 10031  0139  00BA               	movwf	??_compensate_pressure
 10032  013A  3F41               	moviw [1]fsr1
 10033  013B  00BB               	movwf	??_compensate_pressure+1
 10034  013C  083A               	movf	??_compensate_pressure,w
 10035  013D  00A4               	movwf	___lmul@multiplicand
 10036  013E  083B               	movf	??_compensate_pressure+1,w
 10037  013F  00A5               	movwf	___lmul@multiplicand+1
 10038  0140  0D89               	rlf	9,f
 10039  0141  3B89               	subwfb	9,f
 10040  0142  0989               	comf	9,f
 10041  0143  00A6               	movwf	___lmul@multiplicand+2
 10042  0144  00A7               	movwf	___lmul@multiplicand+3
 10043  0145  3191  2142  3180   	fcall	___lmul
 10044  0148  0823               	movf	?___lmul+3,w
 10045  0149  0021               	movlb	1	; select bank1
 10046  014A  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
 10047  014B  0020               	movlb	0	; select bank0
 10048  014C  0822               	movf	?___lmul+2,w
 10049  014D  0021               	movlb	1	; select bank1
 10050  014E  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
 10051  014F  0020               	movlb	0	; select bank0
 10052  0150  0821               	movf	?___lmul+1,w
 10053  0151  0021               	movlb	1	; select bank1
 10054  0152  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
 10055  0153  0020               	movlb	0	; select bank0
 10056  0154  0820               	movf	?___lmul,w
 10057  0155  0021               	movlb	1	; select bank1
 10058  0156  00C1               	movwf	compensate_pressure@var2^(0+128)
 10059                           
 10060                           ;BME280_driver/bme280.c: 1221:     var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5))
      +                           * 2);
 10061  0157  0841               	movf	compensate_pressure@var2^(0+128),w
 10062  0158  0020               	movlb	0	; select bank0
 10063  0159  00BA               	movwf	??_compensate_pressure
 10064  015A  0021               	movlb	1	; select bank1
 10065  015B  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
 10066  015C  0020               	movlb	0	; select bank0
 10067  015D  00BB               	movwf	??_compensate_pressure+1
 10068  015E  0021               	movlb	1	; select bank1
 10069  015F  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
 10070  0160  0020               	movlb	0	; select bank0
 10071  0161  00BC               	movwf	??_compensate_pressure+2
 10072  0162  0021               	movlb	1	; select bank1
 10073  0163  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
 10074  0164  0020               	movlb	0	; select bank0
 10075  0165  00BD               	movwf	??_compensate_pressure+3
 10076  0166  0836               	movf	compensate_pressure@calib_data,w
 10077  0167  3E0E               	addlw	14
 10078  0168  0086               	movwf	6
 10079  0169  3001               	movlw	1	; select bank2/3
 10080  016A  0087               	movwf	7
 10081  016B  3F40               	moviw [0]fsr1
 10082  016C  00BE               	movwf	??_compensate_pressure+4
 10083  016D  3F41               	moviw [1]fsr1
 10084  016E  00BF               	movwf	??_compensate_pressure+5
 10085  016F  083E               	movf	??_compensate_pressure+4,w
 10086  0170  00A0               	movwf	___lmul@multiplier
 10087  0171  083F               	movf	??_compensate_pressure+5,w
 10088  0172  00A1               	movwf	___lmul@multiplier+1
 10089  0173  0D89               	rlf	9,f
 10090  0174  3B89               	subwfb	9,f
 10091  0175  0989               	comf	9,f
 10092  0176  00A2               	movwf	___lmul@multiplier+2
 10093  0177  00A3               	movwf	___lmul@multiplier+3
 10094  0178  0021               	movlb	1	; select bank1
 10095  0179  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
 10096  017A  0020               	movlb	0	; select bank0
 10097  017B  00A7               	movwf	___lmul@multiplicand+3
 10098  017C  0021               	movlb	1	; select bank1
 10099  017D  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
 10100  017E  0020               	movlb	0	; select bank0
 10101  017F  00A6               	movwf	___lmul@multiplicand+2
 10102  0180  0021               	movlb	1	; select bank1
 10103  0181  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
 10104  0182  0020               	movlb	0	; select bank0
 10105  0183  00A5               	movwf	___lmul@multiplicand+1
 10106  0184  0021               	movlb	1	; select bank1
 10107  0185  0849               	movf	compensate_pressure@var1^(0+128),w
 10108  0186  0020               	movlb	0	; select bank0
 10109  0187  00A4               	movwf	___lmul@multiplicand
 10110  0188  3191  2142  3180   	fcall	___lmul
 10111  018B  0820               	movf	?___lmul,w
 10112  018C  00C0               	movwf	??_compensate_pressure+6
 10113  018D  0821               	movf	?___lmul+1,w
 10114  018E  00C1               	movwf	??_compensate_pressure+7
 10115  018F  0822               	movf	?___lmul+2,w
 10116  0190  00C2               	movwf	??_compensate_pressure+8
 10117  0191  0823               	movf	?___lmul+3,w
 10118  0192  00C3               	movwf	??_compensate_pressure+9
 10119  0193  3001               	movlw	1
 10120  0194                     u2445:	
 10121  0194  35C0               	lslf	??_compensate_pressure+6,f
 10122  0195  0DC1               	rlf	??_compensate_pressure+7,f
 10123  0196  0DC2               	rlf	??_compensate_pressure+8,f
 10124  0197  0DC3               	rlf	??_compensate_pressure+9,f
 10125  0198  0B89               	decfsz	9,f
 10126  0199  2994               	goto	u2445
 10127  019A  0840               	movf	??_compensate_pressure+6,w
 10128  019B  07BA               	addwf	??_compensate_pressure,f
 10129  019C  0841               	movf	??_compensate_pressure+7,w
 10130  019D  3DBB               	addwfc	??_compensate_pressure+1,f
 10131  019E  0842               	movf	??_compensate_pressure+8,w
 10132  019F  3DBC               	addwfc	??_compensate_pressure+2,f
 10133  01A0  0843               	movf	??_compensate_pressure+9,w
 10134  01A1  3DBD               	addwfc	??_compensate_pressure+3,f
 10135  01A2  083D               	movf	??_compensate_pressure+3,w
 10136  01A3  0021               	movlb	1	; select bank1
 10137  01A4  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
 10138  01A5  0020               	movlb	0	; select bank0
 10139  01A6  083C               	movf	??_compensate_pressure+2,w
 10140  01A7  0021               	movlb	1	; select bank1
 10141  01A8  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
 10142  01A9  0020               	movlb	0	; select bank0
 10143  01AA  083B               	movf	??_compensate_pressure+1,w
 10144  01AB  0021               	movlb	1	; select bank1
 10145  01AC  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
 10146  01AD  0020               	movlb	0	; select bank0
 10147  01AE  083A               	movf	??_compensate_pressure,w
 10148  01AF  0021               	movlb	1	; select bank1
 10149  01B0  00C1               	movwf	compensate_pressure@var2^(0+128)
 10150                           
 10151                           ;BME280_driver/bme280.c: 1222:     var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 
      +                          65536);
 10152  01B1  0020               	movlb	0	; select bank0
 10153  01B2  0836               	movf	compensate_pressure@calib_data,w
 10154  01B3  3E0C               	addlw	12
 10155  01B4  0086               	movwf	6
 10156  01B5  3001               	movlw	1	; select bank2/3
 10157  01B6  0087               	movwf	7
 10158  01B7  3F40               	moviw [0]fsr1
 10159  01B8  00BA               	movwf	??_compensate_pressure
 10160  01B9  3F41               	moviw [1]fsr1
 10161  01BA  00BB               	movwf	??_compensate_pressure+1
 10162  01BB  083A               	movf	??_compensate_pressure,w
 10163  01BC  00BC               	movwf	??_compensate_pressure+2
 10164  01BD  083B               	movf	??_compensate_pressure+1,w
 10165  01BE  00BD               	movwf	??_compensate_pressure+3
 10166  01BF  01BE               	clrf	??_compensate_pressure+4
 10167  01C0  01BF               	clrf	??_compensate_pressure+5
 10168  01C1  3010               	movlw	16
 10169  01C2                     u2455:	
 10170  01C2  35BC               	lslf	??_compensate_pressure+2,f
 10171  01C3  0DBD               	rlf	??_compensate_pressure+3,f
 10172  01C4  0DBE               	rlf	??_compensate_pressure+4,f
 10173  01C5  0DBF               	rlf	??_compensate_pressure+5,f
 10174  01C6  0B89               	decfsz	9,f
 10175  01C7  29C2               	goto	u2455
 10176  01C8  3000               	movlw	0
 10177  01C9  00AB               	movwf	___aldiv@divisor+3
 10178  01CA  3000               	movlw	0
 10179  01CB  00AA               	movwf	___aldiv@divisor+2
 10180  01CC  3000               	movlw	0
 10181  01CD  00A9               	movwf	___aldiv@divisor+1
 10182  01CE  3004               	movlw	4
 10183  01CF  00A8               	movwf	___aldiv@divisor
 10184  01D0  0021               	movlb	1	; select bank1
 10185  01D1  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
 10186  01D2  0020               	movlb	0	; select bank0
 10187  01D3  00AF               	movwf	___aldiv@dividend+3
 10188  01D4  0021               	movlb	1	; select bank1
 10189  01D5  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
 10190  01D6  0020               	movlb	0	; select bank0
 10191  01D7  00AE               	movwf	___aldiv@dividend+2
 10192  01D8  0021               	movlb	1	; select bank1
 10193  01D9  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
 10194  01DA  0020               	movlb	0	; select bank0
 10195  01DB  00AD               	movwf	___aldiv@dividend+1
 10196  01DC  0021               	movlb	1	; select bank1
 10197  01DD  0841               	movf	compensate_pressure@var2^(0+128),w
 10198  01DE  0020               	movlb	0	; select bank0
 10199  01DF  00AC               	movwf	___aldiv@dividend
 10200  01E0  3197  277F  3180   	fcall	___aldiv
 10201  01E3  0828               	movf	?___aldiv,w
 10202  01E4  07BC               	addwf	??_compensate_pressure+2,f
 10203  01E5  0829               	movf	?___aldiv+1,w
 10204  01E6  3DBD               	addwfc	??_compensate_pressure+3,f
 10205  01E7  082A               	movf	?___aldiv+2,w
 10206  01E8  3DBE               	addwfc	??_compensate_pressure+4,f
 10207  01E9  082B               	movf	?___aldiv+3,w
 10208  01EA  3DBF               	addwfc	??_compensate_pressure+5,f
 10209  01EB  083F               	movf	??_compensate_pressure+5,w
 10210  01EC  0021               	movlb	1	; select bank1
 10211  01ED  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
 10212  01EE  0020               	movlb	0	; select bank0
 10213  01EF  083E               	movf	??_compensate_pressure+4,w
 10214  01F0  0021               	movlb	1	; select bank1
 10215  01F1  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
 10216  01F2  0020               	movlb	0	; select bank0
 10217  01F3  083D               	movf	??_compensate_pressure+3,w
 10218  01F4  0021               	movlb	1	; select bank1
 10219  01F5  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
 10220  01F6  0020               	movlb	0	; select bank0
 10221  01F7  083C               	movf	??_compensate_pressure+2,w
 10222  01F8  0021               	movlb	1	; select bank1
 10223  01F9  00C1               	movwf	compensate_pressure@var2^(0+128)
 10224                           
 10225                           ;BME280_driver/bme280.c: 1223:     var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4
      +                          )) / 8192)) / 8;
 10226  01FA  3000               	movlw	0
 10227  01FB  0020               	movlb	0	; select bank0
 10228  01FC  00AB               	movwf	___aldiv@divisor+3
 10229  01FD  3000               	movlw	0
 10230  01FE  00AA               	movwf	___aldiv@divisor+2
 10231  01FF  3000               	movlw	0
 10232  0200  00A9               	movwf	___aldiv@divisor+1
 10233  0201  3004               	movlw	4
 10234  0202  00A8               	movwf	___aldiv@divisor
 10235  0203  0021               	movlb	1	; select bank1
 10236  0204  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
 10237  0205  0020               	movlb	0	; select bank0
 10238  0206  00AF               	movwf	___aldiv@dividend+3
 10239  0207  0021               	movlb	1	; select bank1
 10240  0208  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
 10241  0209  0020               	movlb	0	; select bank0
 10242  020A  00AE               	movwf	___aldiv@dividend+2
 10243  020B  0021               	movlb	1	; select bank1
 10244  020C  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
 10245  020D  0020               	movlb	0	; select bank0
 10246  020E  00AD               	movwf	___aldiv@dividend+1
 10247  020F  0021               	movlb	1	; select bank1
 10248  0210  0849               	movf	compensate_pressure@var1^(0+128),w
 10249  0211  0020               	movlb	0	; select bank0
 10250  0212  00AC               	movwf	___aldiv@dividend
 10251  0213  3197  277F  3180   	fcall	___aldiv
 10252  0216  082B               	movf	?___aldiv+3,w
 10253  0217  00A3               	movwf	___lmul@multiplier+3
 10254  0218  082A               	movf	?___aldiv+2,w
 10255  0219  00A2               	movwf	___lmul@multiplier+2
 10256  021A  0829               	movf	?___aldiv+1,w
 10257  021B  00A1               	movwf	___lmul@multiplier+1
 10258  021C  0828               	movf	?___aldiv,w
 10259  021D  00A0               	movwf	___lmul@multiplier
 10260  021E  3000               	movlw	0
 10261  021F  00AB               	movwf	___aldiv@divisor+3
 10262  0220  3000               	movlw	0
 10263  0221  00AA               	movwf	___aldiv@divisor+2
 10264  0222  3000               	movlw	0
 10265  0223  00A9               	movwf	___aldiv@divisor+1
 10266  0224  3004               	movlw	4
 10267  0225  00A8               	movwf	___aldiv@divisor
 10268  0226  0021               	movlb	1	; select bank1
 10269  0227  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
 10270  0228  0020               	movlb	0	; select bank0
 10271  0229  00AF               	movwf	___aldiv@dividend+3
 10272  022A  0021               	movlb	1	; select bank1
 10273  022B  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
 10274  022C  0020               	movlb	0	; select bank0
 10275  022D  00AE               	movwf	___aldiv@dividend+2
 10276  022E  0021               	movlb	1	; select bank1
 10277  022F  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
 10278  0230  0020               	movlb	0	; select bank0
 10279  0231  00AD               	movwf	___aldiv@dividend+1
 10280  0232  0021               	movlb	1	; select bank1
 10281  0233  0849               	movf	compensate_pressure@var1^(0+128),w
 10282  0234  0020               	movlb	0	; select bank0
 10283  0235  00AC               	movwf	___aldiv@dividend
 10284  0236  3197  277F  3180   	fcall	___aldiv
 10285  0239  082B               	movf	?___aldiv+3,w
 10286  023A  00A7               	movwf	___lmul@multiplicand+3
 10287  023B  082A               	movf	?___aldiv+2,w
 10288  023C  00A6               	movwf	___lmul@multiplicand+2
 10289  023D  0829               	movf	?___aldiv+1,w
 10290  023E  00A5               	movwf	___lmul@multiplicand+1
 10291  023F  0828               	movf	?___aldiv,w
 10292  0240  00A4               	movwf	___lmul@multiplicand
 10293  0241  3191  2142  3180   	fcall	___lmul
 10294  0244  0823               	movf	?___lmul+3,w
 10295  0245  0021               	movlb	1	; select bank1
 10296  0246  00BC               	movwf	(_compensate_pressure$2553+3)^(0+128)
 10297  0247  0020               	movlb	0	; select bank0
 10298  0248  0822               	movf	?___lmul+2,w
 10299  0249  0021               	movlb	1	; select bank1
 10300  024A  00BB               	movwf	(_compensate_pressure$2553+2)^(0+128)
 10301  024B  0020               	movlb	0	; select bank0
 10302  024C  0821               	movf	?___lmul+1,w
 10303  024D  0021               	movlb	1	; select bank1
 10304  024E  00BA               	movwf	(_compensate_pressure$2553+1)^(0+128)
 10305  024F  0020               	movlb	0	; select bank0
 10306  0250  0820               	movf	?___lmul,w
 10307  0251  0021               	movlb	1	; select bank1
 10308  0252  00B9               	movwf	_compensate_pressure$2553^(0+128)
 10309                           
 10310                           ;BME280_driver/bme280.c: 1223:     var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4
      +                          )) / 8192)) / 8;
 10311  0253  0020               	movlb	0	; select bank0
 10312  0254  0836               	movf	compensate_pressure@calib_data,w
 10313  0255  3E0A               	addlw	10
 10314  0256  0086               	movwf	6
 10315  0257  3001               	movlw	1	; select bank2/3
 10316  0258  0087               	movwf	7
 10317  0259  3F40               	moviw [0]fsr1
 10318  025A  00BA               	movwf	??_compensate_pressure
 10319  025B  3F41               	moviw [1]fsr1
 10320  025C  00BB               	movwf	??_compensate_pressure+1
 10321  025D  083A               	movf	??_compensate_pressure,w
 10322  025E  00A0               	movwf	___lmul@multiplier
 10323  025F  083B               	movf	??_compensate_pressure+1,w
 10324  0260  00A1               	movwf	___lmul@multiplier+1
 10325  0261  0D89               	rlf	9,f
 10326  0262  3B89               	subwfb	9,f
 10327  0263  0989               	comf	9,f
 10328  0264  00A2               	movwf	___lmul@multiplier+2
 10329  0265  00A3               	movwf	___lmul@multiplier+3
 10330  0266  3000               	movlw	0
 10331  0267  00AB               	movwf	___aldiv@divisor+3
 10332  0268  3000               	movlw	0
 10333  0269  00AA               	movwf	___aldiv@divisor+2
 10334  026A  3020               	movlw	32
 10335  026B  00A9               	movwf	___aldiv@divisor+1
 10336  026C  3000               	movlw	0
 10337  026D  00A8               	movwf	___aldiv@divisor
 10338  026E  0021               	movlb	1	; select bank1
 10339  026F  083C               	movf	(_compensate_pressure$2553+3)^(0+128),w
 10340  0270  0020               	movlb	0	; select bank0
 10341  0271  00AF               	movwf	___aldiv@dividend+3
 10342  0272  0021               	movlb	1	; select bank1
 10343  0273  083B               	movf	(_compensate_pressure$2553+2)^(0+128),w
 10344  0274  0020               	movlb	0	; select bank0
 10345  0275  00AE               	movwf	___aldiv@dividend+2
 10346  0276  0021               	movlb	1	; select bank1
 10347  0277  083A               	movf	(_compensate_pressure$2553+1)^(0+128),w
 10348  0278  0020               	movlb	0	; select bank0
 10349  0279  00AD               	movwf	___aldiv@dividend+1
 10350  027A  0021               	movlb	1	; select bank1
 10351  027B  0839               	movf	_compensate_pressure$2553^(0+128),w
 10352  027C  0020               	movlb	0	; select bank0
 10353  027D  00AC               	movwf	___aldiv@dividend
 10354  027E  3197  277F  3180   	fcall	___aldiv
 10355  0281  082B               	movf	?___aldiv+3,w
 10356  0282  00A7               	movwf	___lmul@multiplicand+3
 10357  0283  082A               	movf	?___aldiv+2,w
 10358  0284  00A6               	movwf	___lmul@multiplicand+2
 10359  0285  0829               	movf	?___aldiv+1,w
 10360  0286  00A5               	movwf	___lmul@multiplicand+1
 10361  0287  0828               	movf	?___aldiv,w
 10362  0288  00A4               	movwf	___lmul@multiplicand
 10363  0289  3191  2142  3180   	fcall	___lmul
 10364  028C  0823               	movf	?___lmul+3,w
 10365  028D  0021               	movlb	1	; select bank1
 10366  028E  00AF               	movwf	(_compensate_pressure$2554+3)^(0+128)
 10367  028F  0020               	movlb	0	; select bank0
 10368  0290  0822               	movf	?___lmul+2,w
 10369  0291  0021               	movlb	1	; select bank1
 10370  0292  00AE               	movwf	(_compensate_pressure$2554+2)^(0+128)
 10371  0293  0020               	movlb	0	; select bank0
 10372  0294  0821               	movf	?___lmul+1,w
 10373  0295  0021               	movlb	1	; select bank1
 10374  0296  00AD               	movwf	(_compensate_pressure$2554+1)^(0+128)
 10375  0297  0020               	movlb	0	; select bank0
 10376  0298  0820               	movf	?___lmul,w
 10377  0299  0021               	movlb	1	; select bank1
 10378  029A  00AC               	movwf	_compensate_pressure$2554^(0+128)
 10379                           
 10380                           ;BME280_driver/bme280.c: 1223:     var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4
      +                          )) / 8192)) / 8;
 10381  029B  3000               	movlw	0
 10382  029C  0020               	movlb	0	; select bank0
 10383  029D  00AB               	movwf	___aldiv@divisor+3
 10384  029E  3000               	movlw	0
 10385  029F  00AA               	movwf	___aldiv@divisor+2
 10386  02A0  3000               	movlw	0
 10387  02A1  00A9               	movwf	___aldiv@divisor+1
 10388  02A2  3008               	movlw	8
 10389  02A3  00A8               	movwf	___aldiv@divisor
 10390  02A4  0021               	movlb	1	; select bank1
 10391  02A5  082F               	movf	(_compensate_pressure$2554+3)^(0+128),w
 10392  02A6  0020               	movlb	0	; select bank0
 10393  02A7  00AF               	movwf	___aldiv@dividend+3
 10394  02A8  0021               	movlb	1	; select bank1
 10395  02A9  082E               	movf	(_compensate_pressure$2554+2)^(0+128),w
 10396  02AA  0020               	movlb	0	; select bank0
 10397  02AB  00AE               	movwf	___aldiv@dividend+2
 10398  02AC  0021               	movlb	1	; select bank1
 10399  02AD  082D               	movf	(_compensate_pressure$2554+1)^(0+128),w
 10400  02AE  0020               	movlb	0	; select bank0
 10401  02AF  00AD               	movwf	___aldiv@dividend+1
 10402  02B0  0021               	movlb	1	; select bank1
 10403  02B1  082C               	movf	_compensate_pressure$2554^(0+128),w
 10404  02B2  0020               	movlb	0	; select bank0
 10405  02B3  00AC               	movwf	___aldiv@dividend
 10406  02B4  3197  277F  3180   	fcall	___aldiv
 10407  02B7  082B               	movf	?___aldiv+3,w
 10408  02B8  0021               	movlb	1	; select bank1
 10409  02B9  00A3               	movwf	(compensate_pressure@var3+3)^(0+128)
 10410  02BA  0020               	movlb	0	; select bank0
 10411  02BB  082A               	movf	?___aldiv+2,w
 10412  02BC  0021               	movlb	1	; select bank1
 10413  02BD  00A2               	movwf	(compensate_pressure@var3+2)^(0+128)
 10414  02BE  0020               	movlb	0	; select bank0
 10415  02BF  0829               	movf	?___aldiv+1,w
 10416  02C0  0021               	movlb	1	; select bank1
 10417  02C1  00A1               	movwf	(compensate_pressure@var3+1)^(0+128)
 10418  02C2  0020               	movlb	0	; select bank0
 10419  02C3  0828               	movf	?___aldiv,w
 10420  02C4  0021               	movlb	1	; select bank1
 10421  02C5  00A0               	movwf	compensate_pressure@var3^(0+128)
 10422                           
 10423                           ;BME280_driver/bme280.c: 1224:     var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
 10424  02C6  3000               	movlw	0
 10425  02C7  0020               	movlb	0	; select bank0
 10426  02C8  00AB               	movwf	___aldiv@divisor+3
 10427  02C9  3000               	movlw	0
 10428  02CA  00AA               	movwf	___aldiv@divisor+2
 10429  02CB  3000               	movlw	0
 10430  02CC  00A9               	movwf	___aldiv@divisor+1
 10431  02CD  3002               	movlw	2
 10432  02CE  00A8               	movwf	___aldiv@divisor
 10433  02CF  0836               	movf	compensate_pressure@calib_data,w
 10434  02D0  3E08               	addlw	8
 10435  02D1  0086               	movwf	6
 10436  02D2  3001               	movlw	1	; select bank2/3
 10437  02D3  0087               	movwf	7
 10438  02D4  3F40               	moviw [0]fsr1
 10439  02D5  00BA               	movwf	??_compensate_pressure
 10440  02D6  3F41               	moviw [1]fsr1
 10441  02D7  00BB               	movwf	??_compensate_pressure+1
 10442  02D8  083A               	movf	??_compensate_pressure,w
 10443  02D9  00A0               	movwf	___lmul@multiplier
 10444  02DA  083B               	movf	??_compensate_pressure+1,w
 10445  02DB  00A1               	movwf	___lmul@multiplier+1
 10446  02DC  0D89               	rlf	9,f
 10447  02DD  3B89               	subwfb	9,f
 10448  02DE  0989               	comf	9,f
 10449  02DF  00A2               	movwf	___lmul@multiplier+2
 10450  02E0  00A3               	movwf	___lmul@multiplier+3
 10451  02E1  0021               	movlb	1	; select bank1
 10452  02E2  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
 10453  02E3  0020               	movlb	0	; select bank0
 10454  02E4  00A7               	movwf	___lmul@multiplicand+3
 10455  02E5  0021               	movlb	1	; select bank1
 10456  02E6  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
 10457  02E7  0020               	movlb	0	; select bank0
 10458  02E8  00A6               	movwf	___lmul@multiplicand+2
 10459  02E9  0021               	movlb	1	; select bank1
 10460  02EA  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
 10461  02EB  0020               	movlb	0	; select bank0
 10462  02EC  00A5               	movwf	___lmul@multiplicand+1
 10463  02ED  0021               	movlb	1	; select bank1
 10464  02EE  0849               	movf	compensate_pressure@var1^(0+128),w
 10465  02EF  0020               	movlb	0	; select bank0
 10466  02F0  00A4               	movwf	___lmul@multiplicand
 10467  02F1  3191  2142  3180   	fcall	___lmul
 10468  02F4  0823               	movf	?___lmul+3,w
 10469  02F5  00AF               	movwf	___aldiv@dividend+3
 10470  02F6  0822               	movf	?___lmul+2,w
 10471  02F7  00AE               	movwf	___aldiv@dividend+2
 10472  02F8  0821               	movf	?___lmul+1,w
 10473  02F9  00AD               	movwf	___aldiv@dividend+1
 10474  02FA  0820               	movf	?___lmul,w
 10475  02FB  00AC               	movwf	___aldiv@dividend
 10476  02FC  3197  277F  3180   	fcall	___aldiv
 10477  02FF  082B               	movf	?___aldiv+3,w
 10478  0300  0021               	movlb	1	; select bank1
 10479  0301  00A7               	movwf	(compensate_pressure@var4+3)^(0+128)
 10480  0302  0020               	movlb	0	; select bank0
 10481  0303  082A               	movf	?___aldiv+2,w
 10482  0304  0021               	movlb	1	; select bank1
 10483  0305  00A6               	movwf	(compensate_pressure@var4+2)^(0+128)
 10484  0306  0020               	movlb	0	; select bank0
 10485  0307  0829               	movf	?___aldiv+1,w
 10486  0308  0021               	movlb	1	; select bank1
 10487  0309  00A5               	movwf	(compensate_pressure@var4+1)^(0+128)
 10488  030A  0020               	movlb	0	; select bank0
 10489  030B  0828               	movf	?___aldiv,w
 10490  030C  0021               	movlb	1	; select bank1
 10491  030D  00A4               	movwf	compensate_pressure@var4^(0+128)
 10492                           
 10493                           ;BME280_driver/bme280.c: 1225:     var1 = (var3 + var4) / 262144;
 10494  030E  3000               	movlw	0
 10495  030F  0020               	movlb	0	; select bank0
 10496  0310  00AB               	movwf	___aldiv@divisor+3
 10497  0311  3004               	movlw	4
 10498  0312  00AA               	movwf	___aldiv@divisor+2
 10499  0313  3000               	movlw	0
 10500  0314  00A9               	movwf	___aldiv@divisor+1
 10501  0315  3000               	movlw	0
 10502  0316  00A8               	movwf	___aldiv@divisor
 10503  0317  0021               	movlb	1	; select bank1
 10504  0318  0820               	movf	compensate_pressure@var3^(0+128),w
 10505  0319  0724               	addwf	compensate_pressure@var4^(0+128),w
 10506  031A  0020               	movlb	0	; select bank0
 10507  031B  00BA               	movwf	??_compensate_pressure
 10508  031C  0021               	movlb	1	; select bank1
 10509  031D  0821               	movf	(compensate_pressure@var3+1)^(0+128),w
 10510  031E  3D25               	addwfc	(compensate_pressure@var4+1)^(0+128),w
 10511  031F  0020               	movlb	0	; select bank0
 10512  0320  00BB               	movwf	??_compensate_pressure+1
 10513  0321  0021               	movlb	1	; select bank1
 10514  0322  0822               	movf	(compensate_pressure@var3+2)^(0+128),w
 10515  0323  3D26               	addwfc	(compensate_pressure@var4+2)^(0+128),w
 10516  0324  0020               	movlb	0	; select bank0
 10517  0325  00BC               	movwf	??_compensate_pressure+2
 10518  0326  0021               	movlb	1	; select bank1
 10519  0327  0823               	movf	(compensate_pressure@var3+3)^(0+128),w
 10520  0328  3D27               	addwfc	(compensate_pressure@var4+3)^(0+128),w
 10521  0329  0020               	movlb	0	; select bank0
 10522  032A  00BD               	movwf	??_compensate_pressure+3
 10523  032B  083D               	movf	??_compensate_pressure+3,w
 10524  032C  00AF               	movwf	___aldiv@dividend+3
 10525  032D  083C               	movf	??_compensate_pressure+2,w
 10526  032E  00AE               	movwf	___aldiv@dividend+2
 10527  032F  083B               	movf	??_compensate_pressure+1,w
 10528  0330  00AD               	movwf	___aldiv@dividend+1
 10529  0331  083A               	movf	??_compensate_pressure,w
 10530  0332  00AC               	movwf	___aldiv@dividend
 10531  0333  3197  277F  3180   	fcall	___aldiv
 10532  0336  082B               	movf	?___aldiv+3,w
 10533  0337  0021               	movlb	1	; select bank1
 10534  0338  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
 10535  0339  0020               	movlb	0	; select bank0
 10536  033A  082A               	movf	?___aldiv+2,w
 10537  033B  0021               	movlb	1	; select bank1
 10538  033C  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
 10539  033D  0020               	movlb	0	; select bank0
 10540  033E  0829               	movf	?___aldiv+1,w
 10541  033F  0021               	movlb	1	; select bank1
 10542  0340  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
 10543  0341  0020               	movlb	0	; select bank0
 10544  0342  0828               	movf	?___aldiv,w
 10545  0343  0021               	movlb	1	; select bank1
 10546  0344  00C9               	movwf	compensate_pressure@var1^(0+128)
 10547                           
 10548                           ;BME280_driver/bme280.c: 1226:     var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_
      +                          P1)) / 32768;
 10549  0345  3000               	movlw	0
 10550  0346  0020               	movlb	0	; select bank0
 10551  0347  00AB               	movwf	___aldiv@divisor+3
 10552  0348  3000               	movlw	0
 10553  0349  00AA               	movwf	___aldiv@divisor+2
 10554  034A  3080               	movlw	128
 10555  034B  00A9               	movwf	___aldiv@divisor+1
 10556  034C  3000               	movlw	0
 10557  034D  00A8               	movwf	___aldiv@divisor
 10558  034E  3000               	movlw	0
 10559  034F  0021               	movlb	1	; select bank1
 10560  0350  0749               	addwf	compensate_pressure@var1^(0+128),w
 10561  0351  0020               	movlb	0	; select bank0
 10562  0352  00A0               	movwf	___lmul@multiplier
 10563  0353  3080               	movlw	128
 10564  0354  0021               	movlb	1	; select bank1
 10565  0355  3D4A               	addwfc	(compensate_pressure@var1+1)^(0+128),w
 10566  0356  0020               	movlb	0	; select bank0
 10567  0357  00A1               	movwf	___lmul@multiplier+1
 10568  0358  3000               	movlw	0
 10569  0359  0021               	movlb	1	; select bank1
 10570  035A  3D4B               	addwfc	(compensate_pressure@var1+2)^(0+128),w
 10571  035B  0020               	movlb	0	; select bank0
 10572  035C  00A2               	movwf	___lmul@multiplier+2
 10573  035D  3000               	movlw	0
 10574  035E  0021               	movlb	1	; select bank1
 10575  035F  3D4C               	addwfc	(compensate_pressure@var1+3)^(0+128),w
 10576  0360  0020               	movlb	0	; select bank0
 10577  0361  00A3               	movwf	___lmul@multiplier+3
 10578  0362  0836               	movf	compensate_pressure@calib_data,w
 10579  0363  3E06               	addlw	6
 10580  0364  0086               	movwf	6
 10581  0365  3001               	movlw	1	; select bank2/3
 10582  0366  0087               	movwf	7
 10583  0367  3F40               	moviw [0]fsr1
 10584  0368  00BA               	movwf	??_compensate_pressure
 10585  0369  3F41               	moviw [1]fsr1
 10586  036A  00BB               	movwf	??_compensate_pressure+1
 10587  036B  083A               	movf	??_compensate_pressure,w
 10588  036C  00A4               	movwf	___lmul@multiplicand
 10589  036D  083B               	movf	??_compensate_pressure+1,w
 10590  036E  00A5               	movwf	___lmul@multiplicand+1
 10591  036F  01A6               	clrf	___lmul@multiplicand+2
 10592  0370  01A7               	clrf	___lmul@multiplicand+3
 10593  0371  3191  2142  3180   	fcall	___lmul
 10594  0374  0823               	movf	?___lmul+3,w
 10595  0375  00AF               	movwf	___aldiv@dividend+3
 10596  0376  0822               	movf	?___lmul+2,w
 10597  0377  00AE               	movwf	___aldiv@dividend+2
 10598  0378  0821               	movf	?___lmul+1,w
 10599  0379  00AD               	movwf	___aldiv@dividend+1
 10600  037A  0820               	movf	?___lmul,w
 10601  037B  00AC               	movwf	___aldiv@dividend
 10602  037C  3197  277F  3180   	fcall	___aldiv
 10603  037F  082B               	movf	?___aldiv+3,w
 10604  0380  0021               	movlb	1	; select bank1
 10605  0381  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
 10606  0382  0020               	movlb	0	; select bank0
 10607  0383  082A               	movf	?___aldiv+2,w
 10608  0384  0021               	movlb	1	; select bank1
 10609  0385  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
 10610  0386  0020               	movlb	0	; select bank0
 10611  0387  0829               	movf	?___aldiv+1,w
 10612  0388  0021               	movlb	1	; select bank1
 10613  0389  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
 10614  038A  0020               	movlb	0	; select bank0
 10615  038B  0828               	movf	?___aldiv,w
 10616  038C  0021               	movlb	1	; select bank1
 10617  038D  00C9               	movwf	compensate_pressure@var1^(0+128)
 10618                           
 10619                           ;BME280_driver/bme280.c: 1229:     if (var1)
 10620  038E  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
 10621  038F  044B               	iorwf	(compensate_pressure@var1+2)^(0+128),w
 10622  0390  044A               	iorwf	(compensate_pressure@var1+1)^(0+128),w
 10623  0391  0449               	iorwf	compensate_pressure@var1^(0+128),w
 10624  0392  1903               	skipnz
 10625  0393  2DFA               	goto	l3073
 10626                           
 10627                           ;BME280_driver/bme280.c: 1230:     {;BME280_driver/bme280.c: 1231:         var5 = (uint3
      +                          2_t)((uint32_t)1048576) - uncomp_data->pressure;
 10628  0394  0834               	movf	compensate_pressure@uncomp_data^(0+128),w
 10629  0395  0086               	movwf	6
 10630  0396  0187               	clrf	7
 10631  0397  3F40               	moviw [0]fsr1
 10632  0398  0020               	movlb	0	; select bank0
 10633  0399  00BA               	movwf	??_compensate_pressure
 10634  039A  3F41               	moviw [1]fsr1
 10635  039B  00BB               	movwf	??_compensate_pressure+1
 10636  039C  3F42               	moviw [2]fsr1
 10637  039D  00BC               	movwf	??_compensate_pressure+2
 10638  039E  3F43               	moviw [3]fsr1
 10639  039F  00BD               	movwf	??_compensate_pressure+3
 10640  03A0  3000               	movlw	0
 10641  03A1  00BE               	movwf	??_compensate_pressure+4
 10642  03A2  3000               	movlw	0
 10643  03A3  00BF               	movwf	??_compensate_pressure+5
 10644  03A4  3010               	movlw	16
 10645  03A5  00C0               	movwf	??_compensate_pressure+6
 10646  03A6  3000               	movlw	0
 10647  03A7  00C1               	movwf	??_compensate_pressure+7
 10648  03A8  083A               	movf	??_compensate_pressure,w
 10649  03A9  02BE               	subwf	??_compensate_pressure+4,f
 10650  03AA  083B               	movf	??_compensate_pressure+1,w
 10651  03AB  3BBF               	subwfb	??_compensate_pressure+5,f
 10652  03AC  083C               	movf	??_compensate_pressure+2,w
 10653  03AD  3BC0               	subwfb	??_compensate_pressure+6,f
 10654  03AE  083D               	movf	??_compensate_pressure+3,w
 10655  03AF  3BC1               	subwfb	??_compensate_pressure+7,f
 10656  03B0  0841               	movf	??_compensate_pressure+7,w
 10657  03B1  0021               	movlb	1	; select bank1
 10658  03B2  00AB               	movwf	(compensate_pressure@var5+3)^(0+128)
 10659  03B3  0020               	movlb	0	; select bank0
 10660  03B4  0840               	movf	??_compensate_pressure+6,w
 10661  03B5  0021               	movlb	1	; select bank1
 10662  03B6  00AA               	movwf	(compensate_pressure@var5+2)^(0+128)
 10663  03B7  0020               	movlb	0	; select bank0
 10664  03B8  083F               	movf	??_compensate_pressure+5,w
 10665  03B9  0021               	movlb	1	; select bank1
 10666  03BA  00A9               	movwf	(compensate_pressure@var5+1)^(0+128)
 10667  03BB  0020               	movlb	0	; select bank0
 10668  03BC  083E               	movf	??_compensate_pressure+4,w
 10669  03BD  0021               	movlb	1	; select bank1
 10670  03BE  00A8               	movwf	compensate_pressure@var5^(0+128)
 10671                           
 10672                           ;BME280_driver/bme280.c: 1232:         pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4
      +                          096))) * 3125;
 10673  03BF  3000               	movlw	0
 10674  03C0  0020               	movlb	0	; select bank0
 10675  03C1  00AB               	movwf	___aldiv@divisor+3
 10676  03C2  3000               	movlw	0
 10677  03C3  00AA               	movwf	___aldiv@divisor+2
 10678  03C4  3010               	movlw	16
 10679  03C5  00A9               	movwf	___aldiv@divisor+1
 10680  03C6  3000               	movlw	0
 10681  03C7  00A8               	movwf	___aldiv@divisor
 10682  03C8  0021               	movlb	1	; select bank1
 10683  03C9  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
 10684  03CA  0020               	movlb	0	; select bank0
 10685  03CB  00AF               	movwf	___aldiv@dividend+3
 10686  03CC  0021               	movlb	1	; select bank1
 10687  03CD  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
 10688  03CE  0020               	movlb	0	; select bank0
 10689  03CF  00AE               	movwf	___aldiv@dividend+2
 10690  03D0  0021               	movlb	1	; select bank1
 10691  03D1  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
 10692  03D2  0020               	movlb	0	; select bank0
 10693  03D3  00AD               	movwf	___aldiv@dividend+1
 10694  03D4  0021               	movlb	1	; select bank1
 10695  03D5  0841               	movf	compensate_pressure@var2^(0+128),w
 10696  03D6  0020               	movlb	0	; select bank0
 10697  03D7  00AC               	movwf	___aldiv@dividend
 10698  03D8  3197  277F  3180   	fcall	___aldiv
 10699  03DB  0828               	movf	?___aldiv,w
 10700  03DC  0021               	movlb	1	; select bank1
 10701  03DD  0228               	subwf	compensate_pressure@var5^(0+128),w
 10702  03DE  0020               	movlb	0	; select bank0
 10703  03DF  00BA               	movwf	??_compensate_pressure
 10704  03E0  0829               	movf	?___aldiv+1,w
 10705  03E1  0021               	movlb	1	; select bank1
 10706  03E2  3B29               	subwfb	(compensate_pressure@var5+1)^(0+128),w
 10707  03E3  0020               	movlb	0	; select bank0
 10708  03E4  00BB               	movwf	??_compensate_pressure+1
 10709  03E5  082A               	movf	?___aldiv+2,w
 10710  03E6  0021               	movlb	1	; select bank1
 10711  03E7  3B2A               	subwfb	(compensate_pressure@var5+2)^(0+128),w
 10712  03E8  0020               	movlb	0	; select bank0
 10713  03E9  00BC               	movwf	??_compensate_pressure+2
 10714  03EA  082B               	movf	?___aldiv+3,w
 10715  03EB  0021               	movlb	1	; select bank1
 10716  03EC  3B2B               	subwfb	(compensate_pressure@var5+3)^(0+128),w
 10717  03ED  0020               	movlb	0	; select bank0
 10718  03EE  00BD               	movwf	??_compensate_pressure+3
 10719  03EF  083D               	movf	??_compensate_pressure+3,w
 10720  03F0  00A3               	movwf	___lmul@multiplier+3
 10721  03F1  083C               	movf	??_compensate_pressure+2,w
 10722  03F2  00A2               	movwf	___lmul@multiplier+2
 10723  03F3  083B               	movf	??_compensate_pressure+1,w
 10724  03F4  00A1               	movwf	___lmul@multiplier+1
 10725  03F5  083A               	movf	??_compensate_pressure,w
 10726  03F6  00A0               	movwf	___lmul@multiplier
 10727  03F7  3000               	movlw	0
 10728  03F8  00A7               	movwf	___lmul@multiplicand+3
 10729  03F9  3000               	movlw	0
 10730  03FA  00A6               	movwf	___lmul@multiplicand+2
 10731  03FB  300C               	movlw	12
 10732  03FC  00A5               	movwf	___lmul@multiplicand+1
 10733  03FD  3035               	movlw	53
 10734  03FE  00A4               	movwf	___lmul@multiplicand
 10735  03FF  3191  2142  3180   	fcall	___lmul
 10736  0402  0823               	movf	?___lmul+3,w
 10737  0403  0021               	movlb	1	; select bank1
 10738  0404  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
 10739  0405  0020               	movlb	0	; select bank0
 10740  0406  0822               	movf	?___lmul+2,w
 10741  0407  0021               	movlb	1	; select bank1
 10742  0408  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
 10743  0409  0020               	movlb	0	; select bank0
 10744  040A  0821               	movf	?___lmul+1,w
 10745  040B  0021               	movlb	1	; select bank1
 10746  040C  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
 10747  040D  0020               	movlb	0	; select bank0
 10748  040E  0820               	movf	?___lmul,w
 10749  040F  0021               	movlb	1	; select bank1
 10750  0410  00C5               	movwf	compensate_pressure@pressure^(0+128)
 10751                           
 10752                           ;BME280_driver/bme280.c: 1233:         if (pressure < 0x80000000)
 10753  0411  3080               	movlw	128
 10754  0412  0248               	subwf	(compensate_pressure@pressure+3)^(0+128),w
 10755  0413  1803               	btfsc	3,0
 10756  0414  2C47               	goto	l3063
 10757                           
 10758                           ;BME280_driver/bme280.c: 1234:         {;BME280_driver/bme280.c: 1235:             press
      +                          ure = (pressure << 1) / ((uint32_t)var1);
 10759  0415  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
 10760  0416  0020               	movlb	0	; select bank0
 10761  0417  00A3               	movwf	___lldiv@divisor+3
 10762  0418  0021               	movlb	1	; select bank1
 10763  0419  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
 10764  041A  0020               	movlb	0	; select bank0
 10765  041B  00A2               	movwf	___lldiv@divisor+2
 10766  041C  0021               	movlb	1	; select bank1
 10767  041D  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
 10768  041E  0020               	movlb	0	; select bank0
 10769  041F  00A1               	movwf	___lldiv@divisor+1
 10770  0420  0021               	movlb	1	; select bank1
 10771  0421  0849               	movf	compensate_pressure@var1^(0+128),w
 10772  0422  0020               	movlb	0	; select bank0
 10773  0423  00A0               	movwf	___lldiv@divisor
 10774  0424  0021               	movlb	1	; select bank1
 10775  0425  3545               	lslf	compensate_pressure@pressure^(0+128),w
 10776  0426  0020               	movlb	0	; select bank0
 10777  0427  00A4               	movwf	___lldiv@dividend
 10778  0428  0021               	movlb	1	; select bank1
 10779  0429  0D46               	rlf	(compensate_pressure@pressure+1)^(0+128),w
 10780  042A  0020               	movlb	0	; select bank0
 10781  042B  00A5               	movwf	___lldiv@dividend+1
 10782  042C  0021               	movlb	1	; select bank1
 10783  042D  0D47               	rlf	(compensate_pressure@pressure+2)^(0+128),w
 10784  042E  0020               	movlb	0	; select bank0
 10785  042F  00A6               	movwf	___lldiv@dividend+2
 10786  0430  0021               	movlb	1	; select bank1
 10787  0431  0D48               	rlf	(compensate_pressure@pressure+3)^(0+128),w
 10788  0432  0020               	movlb	0	; select bank0
 10789  0433  00A7               	movwf	___lldiv@dividend+3
 10790  0434  3193  23FC  3180   	fcall	___lldiv
 10791  0437  0823               	movf	?___lldiv+3,w
 10792  0438  0021               	movlb	1	; select bank1
 10793  0439  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
 10794  043A  0020               	movlb	0	; select bank0
 10795  043B  0822               	movf	?___lldiv+2,w
 10796  043C  0021               	movlb	1	; select bank1
 10797  043D  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
 10798  043E  0020               	movlb	0	; select bank0
 10799  043F  0821               	movf	?___lldiv+1,w
 10800  0440  0021               	movlb	1	; select bank1
 10801  0441  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
 10802  0442  0020               	movlb	0	; select bank0
 10803  0443  0820               	movf	?___lldiv,w
 10804  0444  0021               	movlb	1	; select bank1
 10805  0445  00C5               	movwf	compensate_pressure@pressure^(0+128)
 10806                           
 10807                           ;BME280_driver/bme280.c: 1236:         }
 10808  0446  2C78               	goto	l190
 10809  0447                     l3063:	
 10810                           
 10811                           ;BME280_driver/bme280.c: 1238:         {;BME280_driver/bme280.c: 1239:             press
      +                          ure = (pressure / (uint32_t)var1) * 2;
 10812  0447  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
 10813  0448  0020               	movlb	0	; select bank0
 10814  0449  00A3               	movwf	___lldiv@divisor+3
 10815  044A  0021               	movlb	1	; select bank1
 10816  044B  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
 10817  044C  0020               	movlb	0	; select bank0
 10818  044D  00A2               	movwf	___lldiv@divisor+2
 10819  044E  0021               	movlb	1	; select bank1
 10820  044F  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
 10821  0450  0020               	movlb	0	; select bank0
 10822  0451  00A1               	movwf	___lldiv@divisor+1
 10823  0452  0021               	movlb	1	; select bank1
 10824  0453  0849               	movf	compensate_pressure@var1^(0+128),w
 10825  0454  0020               	movlb	0	; select bank0
 10826  0455  00A0               	movwf	___lldiv@divisor
 10827  0456  0021               	movlb	1	; select bank1
 10828  0457  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
 10829  0458  0020               	movlb	0	; select bank0
 10830  0459  00A7               	movwf	___lldiv@dividend+3
 10831  045A  0021               	movlb	1	; select bank1
 10832  045B  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
 10833  045C  0020               	movlb	0	; select bank0
 10834  045D  00A6               	movwf	___lldiv@dividend+2
 10835  045E  0021               	movlb	1	; select bank1
 10836  045F  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
 10837  0460  0020               	movlb	0	; select bank0
 10838  0461  00A5               	movwf	___lldiv@dividend+1
 10839  0462  0021               	movlb	1	; select bank1
 10840  0463  0845               	movf	compensate_pressure@pressure^(0+128),w
 10841  0464  0020               	movlb	0	; select bank0
 10842  0465  00A4               	movwf	___lldiv@dividend
 10843  0466  3193  23FC  3180   	fcall	___lldiv
 10844  0469  3520               	lslf	?___lldiv,w
 10845  046A  0021               	movlb	1	; select bank1
 10846  046B  00C5               	movwf	compensate_pressure@pressure^(0+128)
 10847  046C  0020               	movlb	0	; select bank0
 10848  046D  0D21               	rlf	?___lldiv+1,w
 10849  046E  0021               	movlb	1	; select bank1
 10850  046F  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
 10851  0470  0020               	movlb	0	; select bank0
 10852  0471  0D22               	rlf	?___lldiv+2,w
 10853  0472  0021               	movlb	1	; select bank1
 10854  0473  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
 10855  0474  0020               	movlb	0	; select bank0
 10856  0475  0D23               	rlf	?___lldiv+3,w
 10857  0476  0021               	movlb	1	; select bank1
 10858  0477  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
 10859  0478                     l190:	
 10860                           ;BME280_driver/bme280.c: 1240:         }
 10861                           
 10862                           
 10863                           ;BME280_driver/bme280.c: 1241:         var1 = (((int32_t)calib_data->dig_P9) * ((int32_t
      +                          )(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 10864  0478  0845               	movf	compensate_pressure@pressure^(0+128),w
 10865  0479  0020               	movlb	0	; select bank0
 10866  047A  00BA               	movwf	??_compensate_pressure
 10867  047B  0021               	movlb	1	; select bank1
 10868  047C  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
 10869  047D  0020               	movlb	0	; select bank0
 10870  047E  00BB               	movwf	??_compensate_pressure+1
 10871  047F  0021               	movlb	1	; select bank1
 10872  0480  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
 10873  0481  0020               	movlb	0	; select bank0
 10874  0482  00BC               	movwf	??_compensate_pressure+2
 10875  0483  0021               	movlb	1	; select bank1
 10876  0484  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
 10877  0485  0020               	movlb	0	; select bank0
 10878  0486  00BD               	movwf	??_compensate_pressure+3
 10879  0487  3003               	movlw	3
 10880  0488                     u2485:	
 10881  0488  36BD               	lsrf	??_compensate_pressure+3,f
 10882  0489  0CBC               	rrf	??_compensate_pressure+2,f
 10883  048A  0CBB               	rrf	??_compensate_pressure+1,f
 10884  048B  0CBA               	rrf	??_compensate_pressure,f
 10885  048C  0B89               	decfsz	9,f
 10886  048D  2C88               	goto	u2485
 10887  048E  083D               	movf	??_compensate_pressure+3,w
 10888  048F  00A7               	movwf	___lmul@multiplicand+3
 10889  0490  083C               	movf	??_compensate_pressure+2,w
 10890  0491  00A6               	movwf	___lmul@multiplicand+2
 10891  0492  083B               	movf	??_compensate_pressure+1,w
 10892  0493  00A5               	movwf	___lmul@multiplicand+1
 10893  0494  083A               	movf	??_compensate_pressure,w
 10894  0495  00A4               	movwf	___lmul@multiplicand
 10895  0496  0021               	movlb	1	; select bank1
 10896  0497  0845               	movf	compensate_pressure@pressure^(0+128),w
 10897  0498  0020               	movlb	0	; select bank0
 10898  0499  00BE               	movwf	??_compensate_pressure+4
 10899  049A  0021               	movlb	1	; select bank1
 10900  049B  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
 10901  049C  0020               	movlb	0	; select bank0
 10902  049D  00BF               	movwf	??_compensate_pressure+5
 10903  049E  0021               	movlb	1	; select bank1
 10904  049F  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
 10905  04A0  0020               	movlb	0	; select bank0
 10906  04A1  00C0               	movwf	??_compensate_pressure+6
 10907  04A2  0021               	movlb	1	; select bank1
 10908  04A3  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
 10909  04A4  0020               	movlb	0	; select bank0
 10910  04A5  00C1               	movwf	??_compensate_pressure+7
 10911  04A6  3003               	movlw	3
 10912  04A7                     u2495:	
 10913  04A7  36C1               	lsrf	??_compensate_pressure+7,f
 10914  04A8  0CC0               	rrf	??_compensate_pressure+6,f
 10915  04A9  0CBF               	rrf	??_compensate_pressure+5,f
 10916  04AA  0CBE               	rrf	??_compensate_pressure+4,f
 10917  04AB  0B89               	decfsz	9,f
 10918  04AC  2CA7               	goto	u2495
 10919  04AD  0841               	movf	??_compensate_pressure+7,w
 10920  04AE  00A3               	movwf	___lmul@multiplier+3
 10921  04AF  0840               	movf	??_compensate_pressure+6,w
 10922  04B0  00A2               	movwf	___lmul@multiplier+2
 10923  04B1  083F               	movf	??_compensate_pressure+5,w
 10924  04B2  00A1               	movwf	___lmul@multiplier+1
 10925  04B3  083E               	movf	??_compensate_pressure+4,w
 10926  04B4  00A0               	movwf	___lmul@multiplier
 10927  04B5  3191  2142  3180   	fcall	___lmul
 10928  04B8  0820               	movf	?___lmul,w
 10929  04B9  00C2               	movwf	??_compensate_pressure+8
 10930  04BA  0821               	movf	?___lmul+1,w
 10931  04BB  00C3               	movwf	??_compensate_pressure+9
 10932  04BC  0822               	movf	?___lmul+2,w
 10933  04BD  00C4               	movwf	??_compensate_pressure+10
 10934  04BE  0823               	movf	?___lmul+3,w
 10935  04BF  00C5               	movwf	??_compensate_pressure+11
 10936  04C0  300D               	movlw	13
 10937  04C1                     u2505:	
 10938  04C1  36C5               	lsrf	??_compensate_pressure+11,f
 10939  04C2  0CC4               	rrf	??_compensate_pressure+10,f
 10940  04C3  0CC3               	rrf	??_compensate_pressure+9,f
 10941  04C4  0CC2               	rrf	??_compensate_pressure+8,f
 10942  04C5  0B89               	decfsz	9,f
 10943  04C6  2CC1               	goto	u2505
 10944  04C7  0845               	movf	??_compensate_pressure+11,w
 10945  04C8  0021               	movlb	1	; select bank1
 10946  04C9  00B3               	movwf	(_compensate_pressure$2555+3)^(0+128)
 10947  04CA  0020               	movlb	0	; select bank0
 10948  04CB  0844               	movf	??_compensate_pressure+10,w
 10949  04CC  0021               	movlb	1	; select bank1
 10950  04CD  00B2               	movwf	(_compensate_pressure$2555+2)^(0+128)
 10951  04CE  0020               	movlb	0	; select bank0
 10952  04CF  0843               	movf	??_compensate_pressure+9,w
 10953  04D0  0021               	movlb	1	; select bank1
 10954  04D1  00B1               	movwf	(_compensate_pressure$2555+1)^(0+128)
 10955  04D2  0020               	movlb	0	; select bank0
 10956  04D3  0842               	movf	??_compensate_pressure+8,w
 10957  04D4  0021               	movlb	1	; select bank1
 10958  04D5  00B0               	movwf	_compensate_pressure$2555^(0+128)
 10959                           
 10960                           ;BME280_driver/bme280.c: 1241:         var1 = (((int32_t)calib_data->dig_P9) * ((int32_t
      +                          )(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 10961  04D6  3000               	movlw	0
 10962  04D7  0020               	movlb	0	; select bank0
 10963  04D8  00AB               	movwf	___aldiv@divisor+3
 10964  04D9  3000               	movlw	0
 10965  04DA  00AA               	movwf	___aldiv@divisor+2
 10966  04DB  3010               	movlw	16
 10967  04DC  00A9               	movwf	___aldiv@divisor+1
 10968  04DD  3000               	movlw	0
 10969  04DE  00A8               	movwf	___aldiv@divisor
 10970  04DF  0836               	movf	compensate_pressure@calib_data,w
 10971  04E0  3E16               	addlw	22
 10972  04E1  0086               	movwf	6
 10973  04E2  3001               	movlw	1	; select bank2/3
 10974  04E3  0087               	movwf	7
 10975  04E4  3F40               	moviw [0]fsr1
 10976  04E5  00BA               	movwf	??_compensate_pressure
 10977  04E6  3F41               	moviw [1]fsr1
 10978  04E7  00BB               	movwf	??_compensate_pressure+1
 10979  04E8  083A               	movf	??_compensate_pressure,w
 10980  04E9  00A0               	movwf	___lmul@multiplier
 10981  04EA  083B               	movf	??_compensate_pressure+1,w
 10982  04EB  00A1               	movwf	___lmul@multiplier+1
 10983  04EC  0D89               	rlf	9,f
 10984  04ED  3B89               	subwfb	9,f
 10985  04EE  0989               	comf	9,f
 10986  04EF  00A2               	movwf	___lmul@multiplier+2
 10987  04F0  00A3               	movwf	___lmul@multiplier+3
 10988  04F1  0021               	movlb	1	; select bank1
 10989  04F2  0833               	movf	(_compensate_pressure$2555+3)^(0+128),w
 10990  04F3  0020               	movlb	0	; select bank0
 10991  04F4  00A7               	movwf	___lmul@multiplicand+3
 10992  04F5  0021               	movlb	1	; select bank1
 10993  04F6  0832               	movf	(_compensate_pressure$2555+2)^(0+128),w
 10994  04F7  0020               	movlb	0	; select bank0
 10995  04F8  00A6               	movwf	___lmul@multiplicand+2
 10996  04F9  0021               	movlb	1	; select bank1
 10997  04FA  0831               	movf	(_compensate_pressure$2555+1)^(0+128),w
 10998  04FB  0020               	movlb	0	; select bank0
 10999  04FC  00A5               	movwf	___lmul@multiplicand+1
 11000  04FD  0021               	movlb	1	; select bank1
 11001  04FE  0830               	movf	_compensate_pressure$2555^(0+128),w
 11002  04FF  0020               	movlb	0	; select bank0
 11003  0500  00A4               	movwf	___lmul@multiplicand
 11004  0501  3191  2142  3180   	fcall	___lmul
 11005  0504  0823               	movf	?___lmul+3,w
 11006  0505  00AF               	movwf	___aldiv@dividend+3
 11007  0506  0822               	movf	?___lmul+2,w
 11008  0507  00AE               	movwf	___aldiv@dividend+2
 11009  0508  0821               	movf	?___lmul+1,w
 11010  0509  00AD               	movwf	___aldiv@dividend+1
 11011  050A  0820               	movf	?___lmul,w
 11012  050B  00AC               	movwf	___aldiv@dividend
 11013  050C  3197  277F  3180   	fcall	___aldiv
 11014  050F  082B               	movf	?___aldiv+3,w
 11015  0510  0021               	movlb	1	; select bank1
 11016  0511  00CC               	movwf	(compensate_pressure@var1+3)^(0+128)
 11017  0512  0020               	movlb	0	; select bank0
 11018  0513  082A               	movf	?___aldiv+2,w
 11019  0514  0021               	movlb	1	; select bank1
 11020  0515  00CB               	movwf	(compensate_pressure@var1+2)^(0+128)
 11021  0516  0020               	movlb	0	; select bank0
 11022  0517  0829               	movf	?___aldiv+1,w
 11023  0518  0021               	movlb	1	; select bank1
 11024  0519  00CA               	movwf	(compensate_pressure@var1+1)^(0+128)
 11025  051A  0020               	movlb	0	; select bank0
 11026  051B  0828               	movf	?___aldiv,w
 11027  051C  0021               	movlb	1	; select bank1
 11028  051D  00C9               	movwf	compensate_pressure@var1^(0+128)
 11029                           
 11030                           ;BME280_driver/bme280.c: 1242:         var2 = (((int32_t)(pressure / 4)) * ((int32_t)cal
      +                          ib_data->dig_P8)) / 8192;
 11031  051E  3000               	movlw	0
 11032  051F  0020               	movlb	0	; select bank0
 11033  0520  00AB               	movwf	___aldiv@divisor+3
 11034  0521  3000               	movlw	0
 11035  0522  00AA               	movwf	___aldiv@divisor+2
 11036  0523  3020               	movlw	32
 11037  0524  00A9               	movwf	___aldiv@divisor+1
 11038  0525  3000               	movlw	0
 11039  0526  00A8               	movwf	___aldiv@divisor
 11040  0527  0021               	movlb	1	; select bank1
 11041  0528  0845               	movf	compensate_pressure@pressure^(0+128),w
 11042  0529  0020               	movlb	0	; select bank0
 11043  052A  00BA               	movwf	??_compensate_pressure
 11044  052B  0021               	movlb	1	; select bank1
 11045  052C  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
 11046  052D  0020               	movlb	0	; select bank0
 11047  052E  00BB               	movwf	??_compensate_pressure+1
 11048  052F  0021               	movlb	1	; select bank1
 11049  0530  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
 11050  0531  0020               	movlb	0	; select bank0
 11051  0532  00BC               	movwf	??_compensate_pressure+2
 11052  0533  0021               	movlb	1	; select bank1
 11053  0534  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
 11054  0535  0020               	movlb	0	; select bank0
 11055  0536  00BD               	movwf	??_compensate_pressure+3
 11056  0537  3002               	movlw	2
 11057  0538                     u2515:	
 11058  0538  36BD               	lsrf	??_compensate_pressure+3,f
 11059  0539  0CBC               	rrf	??_compensate_pressure+2,f
 11060  053A  0CBB               	rrf	??_compensate_pressure+1,f
 11061  053B  0CBA               	rrf	??_compensate_pressure,f
 11062  053C  0B89               	decfsz	9,f
 11063  053D  2D38               	goto	u2515
 11064  053E  083D               	movf	??_compensate_pressure+3,w
 11065  053F  00A3               	movwf	___lmul@multiplier+3
 11066  0540  083C               	movf	??_compensate_pressure+2,w
 11067  0541  00A2               	movwf	___lmul@multiplier+2
 11068  0542  083B               	movf	??_compensate_pressure+1,w
 11069  0543  00A1               	movwf	___lmul@multiplier+1
 11070  0544  083A               	movf	??_compensate_pressure,w
 11071  0545  00A0               	movwf	___lmul@multiplier
 11072  0546  0836               	movf	compensate_pressure@calib_data,w
 11073  0547  3E14               	addlw	20
 11074  0548  0086               	movwf	6
 11075  0549  3001               	movlw	1	; select bank2/3
 11076  054A  0087               	movwf	7
 11077  054B  3F40               	moviw [0]fsr1
 11078  054C  00BE               	movwf	??_compensate_pressure+4
 11079  054D  3F41               	moviw [1]fsr1
 11080  054E  00BF               	movwf	??_compensate_pressure+5
 11081  054F  083E               	movf	??_compensate_pressure+4,w
 11082  0550  00A4               	movwf	___lmul@multiplicand
 11083  0551  083F               	movf	??_compensate_pressure+5,w
 11084  0552  00A5               	movwf	___lmul@multiplicand+1
 11085  0553  0D89               	rlf	9,f
 11086  0554  3B89               	subwfb	9,f
 11087  0555  0989               	comf	9,f
 11088  0556  00A6               	movwf	___lmul@multiplicand+2
 11089  0557  00A7               	movwf	___lmul@multiplicand+3
 11090  0558  3191  2142  3180   	fcall	___lmul
 11091  055B  0823               	movf	?___lmul+3,w
 11092  055C  00AF               	movwf	___aldiv@dividend+3
 11093  055D  0822               	movf	?___lmul+2,w
 11094  055E  00AE               	movwf	___aldiv@dividend+2
 11095  055F  0821               	movf	?___lmul+1,w
 11096  0560  00AD               	movwf	___aldiv@dividend+1
 11097  0561  0820               	movf	?___lmul,w
 11098  0562  00AC               	movwf	___aldiv@dividend
 11099  0563  3197  277F  3180   	fcall	___aldiv
 11100  0566  082B               	movf	?___aldiv+3,w
 11101  0567  0021               	movlb	1	; select bank1
 11102  0568  00C4               	movwf	(compensate_pressure@var2+3)^(0+128)
 11103  0569  0020               	movlb	0	; select bank0
 11104  056A  082A               	movf	?___aldiv+2,w
 11105  056B  0021               	movlb	1	; select bank1
 11106  056C  00C3               	movwf	(compensate_pressure@var2+2)^(0+128)
 11107  056D  0020               	movlb	0	; select bank0
 11108  056E  0829               	movf	?___aldiv+1,w
 11109  056F  0021               	movlb	1	; select bank1
 11110  0570  00C2               	movwf	(compensate_pressure@var2+1)^(0+128)
 11111  0571  0020               	movlb	0	; select bank0
 11112  0572  0828               	movf	?___aldiv,w
 11113  0573  0021               	movlb	1	; select bank1
 11114  0574  00C1               	movwf	compensate_pressure@var2^(0+128)
 11115                           
 11116                           ;BME280_driver/bme280.c: 1243:         pressure = (uint32_t)((int32_t)pressure + ((var1 
      +                          + var2 + calib_data->dig_P7) / 16));
 11117  0575  3000               	movlw	0
 11118  0576  0020               	movlb	0	; select bank0
 11119  0577  00AB               	movwf	___aldiv@divisor+3
 11120  0578  3000               	movlw	0
 11121  0579  00AA               	movwf	___aldiv@divisor+2
 11122  057A  3000               	movlw	0
 11123  057B  00A9               	movwf	___aldiv@divisor+1
 11124  057C  3010               	movlw	16
 11125  057D  00A8               	movwf	___aldiv@divisor
 11126  057E  0021               	movlb	1	; select bank1
 11127  057F  0841               	movf	compensate_pressure@var2^(0+128),w
 11128  0580  0020               	movlb	0	; select bank0
 11129  0581  00BA               	movwf	??_compensate_pressure
 11130  0582  0021               	movlb	1	; select bank1
 11131  0583  0842               	movf	(compensate_pressure@var2+1)^(0+128),w
 11132  0584  0020               	movlb	0	; select bank0
 11133  0585  00BB               	movwf	??_compensate_pressure+1
 11134  0586  0021               	movlb	1	; select bank1
 11135  0587  0843               	movf	(compensate_pressure@var2+2)^(0+128),w
 11136  0588  0020               	movlb	0	; select bank0
 11137  0589  00BC               	movwf	??_compensate_pressure+2
 11138  058A  0021               	movlb	1	; select bank1
 11139  058B  0844               	movf	(compensate_pressure@var2+3)^(0+128),w
 11140  058C  0020               	movlb	0	; select bank0
 11141  058D  00BD               	movwf	??_compensate_pressure+3
 11142  058E  0021               	movlb	1	; select bank1
 11143  058F  0849               	movf	compensate_pressure@var1^(0+128),w
 11144  0590  0020               	movlb	0	; select bank0
 11145  0591  00BE               	movwf	??_compensate_pressure+4
 11146  0592  0021               	movlb	1	; select bank1
 11147  0593  084A               	movf	(compensate_pressure@var1+1)^(0+128),w
 11148  0594  0020               	movlb	0	; select bank0
 11149  0595  00BF               	movwf	??_compensate_pressure+5
 11150  0596  0021               	movlb	1	; select bank1
 11151  0597  084B               	movf	(compensate_pressure@var1+2)^(0+128),w
 11152  0598  0020               	movlb	0	; select bank0
 11153  0599  00C0               	movwf	??_compensate_pressure+6
 11154  059A  0021               	movlb	1	; select bank1
 11155  059B  084C               	movf	(compensate_pressure@var1+3)^(0+128),w
 11156  059C  0020               	movlb	0	; select bank0
 11157  059D  00C1               	movwf	??_compensate_pressure+7
 11158  059E  0836               	movf	compensate_pressure@calib_data,w
 11159  059F  3E12               	addlw	18
 11160  05A0  0086               	movwf	6
 11161  05A1  3001               	movlw	1	; select bank2/3
 11162  05A2  0087               	movwf	7
 11163  05A3  3F40               	moviw [0]fsr1
 11164  05A4  00C2               	movwf	??_compensate_pressure+8
 11165  05A5  3F41               	moviw [1]fsr1
 11166  05A6  00C3               	movwf	??_compensate_pressure+9
 11167  05A7  0842               	movf	??_compensate_pressure+8,w
 11168  05A8  00C4               	movwf	??_compensate_pressure+10
 11169  05A9  0843               	movf	??_compensate_pressure+9,w
 11170  05AA  00C5               	movwf	??_compensate_pressure+11
 11171  05AB  3000               	movlw	0
 11172  05AC  1BC5               	btfsc	??_compensate_pressure+11,7
 11173  05AD  30FF               	movlw	255
 11174  05AE  00C6               	movwf	??_compensate_pressure+12
 11175  05AF  00C7               	movwf	??_compensate_pressure+13
 11176  05B0  0844               	movf	??_compensate_pressure+10,w
 11177  05B1  07BE               	addwf	??_compensate_pressure+4,f
 11178  05B2  0845               	movf	??_compensate_pressure+11,w
 11179  05B3  3DBF               	addwfc	??_compensate_pressure+5,f
 11180  05B4  0846               	movf	??_compensate_pressure+12,w
 11181  05B5  3DC0               	addwfc	??_compensate_pressure+6,f
 11182  05B6  0847               	movf	??_compensate_pressure+13,w
 11183  05B7  3DC1               	addwfc	??_compensate_pressure+7,f
 11184  05B8  083E               	movf	??_compensate_pressure+4,w
 11185  05B9  07BA               	addwf	??_compensate_pressure,f
 11186  05BA  083F               	movf	??_compensate_pressure+5,w
 11187  05BB  3DBB               	addwfc	??_compensate_pressure+1,f
 11188  05BC  0840               	movf	??_compensate_pressure+6,w
 11189  05BD  3DBC               	addwfc	??_compensate_pressure+2,f
 11190  05BE  0841               	movf	??_compensate_pressure+7,w
 11191  05BF  3DBD               	addwfc	??_compensate_pressure+3,f
 11192  05C0  083D               	movf	??_compensate_pressure+3,w
 11193  05C1  00AF               	movwf	___aldiv@dividend+3
 11194  05C2  083C               	movf	??_compensate_pressure+2,w
 11195  05C3  00AE               	movwf	___aldiv@dividend+2
 11196  05C4  083B               	movf	??_compensate_pressure+1,w
 11197  05C5  00AD               	movwf	___aldiv@dividend+1
 11198  05C6  083A               	movf	??_compensate_pressure,w
 11199  05C7  00AC               	movwf	___aldiv@dividend
 11200  05C8  3197  277F  3180   	fcall	___aldiv
 11201  05CB  0828               	movf	?___aldiv,w
 11202  05CC  0021               	movlb	1	; select bank1
 11203  05CD  0745               	addwf	compensate_pressure@pressure^(0+128),w
 11204  05CE  0020               	movlb	0	; select bank0
 11205  05CF  00C8               	movwf	??_compensate_pressure+14
 11206  05D0  0829               	movf	?___aldiv+1,w
 11207  05D1  0021               	movlb	1	; select bank1
 11208  05D2  3D46               	addwfc	(compensate_pressure@pressure+1)^(0+128),w
 11209  05D3  0020               	movlb	0	; select bank0
 11210  05D4  00C9               	movwf	??_compensate_pressure+15
 11211  05D5  082A               	movf	?___aldiv+2,w
 11212  05D6  0021               	movlb	1	; select bank1
 11213  05D7  3D47               	addwfc	(compensate_pressure@pressure+2)^(0+128),w
 11214  05D8  0020               	movlb	0	; select bank0
 11215  05D9  00CA               	movwf	??_compensate_pressure+16
 11216  05DA  082B               	movf	?___aldiv+3,w
 11217  05DB  0021               	movlb	1	; select bank1
 11218  05DC  3D48               	addwfc	(compensate_pressure@pressure+3)^(0+128),w
 11219  05DD  0020               	movlb	0	; select bank0
 11220  05DE  00CB               	movwf	??_compensate_pressure+17
 11221  05DF  084B               	movf	??_compensate_pressure+17,w
 11222  05E0  0021               	movlb	1	; select bank1
 11223  05E1  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
 11224  05E2  0020               	movlb	0	; select bank0
 11225  05E3  084A               	movf	??_compensate_pressure+16,w
 11226  05E4  0021               	movlb	1	; select bank1
 11227  05E5  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
 11228  05E6  0020               	movlb	0	; select bank0
 11229  05E7  0849               	movf	??_compensate_pressure+15,w
 11230  05E8  0021               	movlb	1	; select bank1
 11231  05E9  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
 11232  05EA  0020               	movlb	0	; select bank0
 11233  05EB  0848               	movf	??_compensate_pressure+14,w
 11234  05EC  0021               	movlb	1	; select bank1
 11235  05ED  00C5               	movwf	compensate_pressure@pressure^(0+128)
 11236                           
 11237                           ;BME280_driver/bme280.c: 1244:         if (pressure < pressure_min)
 11238  05EE  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
 11239  05EF  1D03               	btfss	3,2
 11240  05F0  2E02               	goto	l3075
 11241  05F1  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
 11242  05F2  1D03               	btfss	3,2
 11243  05F3  2E02               	goto	l3075
 11244  05F4  3030               	movlw	48
 11245  05F5  0245               	subwf	compensate_pressure@pressure^(0+128),w
 11246  05F6  3075               	movlw	117
 11247  05F7  3B46               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
 11248  05F8  1803               	btfsc	3,0
 11249  05F9  2E02               	goto	l3075
 11250  05FA                     l3073:	
 11251                           
 11252                           ;BME280_driver/bme280.c: 1245:         {;BME280_driver/bme280.c: 1246:             press
      +                          ure = pressure_min;
 11253  05FA  3000               	movlw	0
 11254  05FB  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
 11255  05FC  3000               	movlw	0
 11256  05FD  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
 11257  05FE  3075               	movlw	117
 11258  05FF  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
 11259  0600  3030               	movlw	48
 11260  0601  2E14               	goto	L5
 11261  0602                     l3075:	
 11262                           ;BME280_driver/bme280.c: 1247:         }
 11263                           
 11264  0602  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
 11265  0603  1D03               	btfss	3,2
 11266  0604  2E0D               	goto	l3077
 11267  0605  30B1               	movlw	177
 11268  0606  0245               	subwf	compensate_pressure@pressure^(0+128),w
 11269  0607  30AD               	movlw	173
 11270  0608  3B46               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
 11271  0609  3001               	movlw	1
 11272  060A  3B47               	subwfb	(compensate_pressure@pressure+2)^(0+128),w
 11273  060B  1C03               	btfss	3,0
 11274  060C  2E15               	goto	l194
 11275  060D                     l3077:	
 11276                           
 11277                           ;BME280_driver/bme280.c: 1249:         {;BME280_driver/bme280.c: 1250:             press
      +                          ure = pressure_max;
 11278  060D  3000               	movlw	0
 11279  060E  00C8               	movwf	(compensate_pressure@pressure+3)^(0+128)
 11280  060F  3001               	movlw	1
 11281  0610  00C7               	movwf	(compensate_pressure@pressure+2)^(0+128)
 11282  0611  30AD               	movlw	173
 11283  0612  00C6               	movwf	(compensate_pressure@pressure+1)^(0+128)
 11284  0613  30B0               	movlw	176
 11285  0614                     L5:	
 11286  0614  00C5               	movwf	compensate_pressure@pressure^(0+128)
 11287  0615                     l194:	
 11288                           ;BME280_driver/bme280.c: 1256:     }
 11289                           
 11290                           
 11291                           ;BME280_driver/bme280.c: 1258:     return pressure;
 11292  0615  0848               	movf	(compensate_pressure@pressure+3)^(0+128),w
 11293  0616  0020               	movlb	0	; select bank0
 11294  0617  00B9               	movwf	?_compensate_pressure+3
 11295  0618  0021               	movlb	1	; select bank1
 11296  0619  0847               	movf	(compensate_pressure@pressure+2)^(0+128),w
 11297  061A  0020               	movlb	0	; select bank0
 11298  061B  00B8               	movwf	?_compensate_pressure+2
 11299  061C  0021               	movlb	1	; select bank1
 11300  061D  0846               	movf	(compensate_pressure@pressure+1)^(0+128),w
 11301  061E  0020               	movlb	0	; select bank0
 11302  061F  00B7               	movwf	?_compensate_pressure+1
 11303  0620  0021               	movlb	1	; select bank1
 11304  0621  0845               	movf	compensate_pressure@pressure^(0+128),w
 11305  0622  0020               	movlb	0	; select bank0
 11306  0623  00B6               	movwf	?_compensate_pressure
 11307  0624  0008               	return
 11308  0625                     __end_of_compensate_pressure:	
 11309                           
 11310                           	psect	text28
 11311  1142                     __ptext28:	
 11312 ;; *************** function ___lmul *****************
 11313 ;; Defined at:
 11314 ;;		line 15 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/Umul32.c"
 11315 ;; Parameters:    Size  Location     Type
 11316 ;;  multiplier      4    0[BANK0 ] unsigned long 
 11317 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;  product         4    4[COMMON] unsigned long 
 11320 ;; Return value:  Size  Location     Type
 11321 ;;                  4    0[BANK0 ] unsigned long 
 11322 ;; Registers used:
 11323 ;;		wreg, status,2, status,0
 11324 ;; Tracked objects:
 11325 ;;		On entry : 1F/0
 11326 ;;		On exit  : 1F/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11329 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;Total ram usage:       12 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; Hardware stack levels required when called:    3
 11336 ;; This function calls:
 11337 ;;		Nothing
 11338 ;; This function is called by:
 11339 ;;		_compensate_temperature
 11340 ;;		_compensate_pressure
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           
 11345                           ;psect for function ___lmul
 11346  1142                     ___lmul:	
 11347                           
 11348                           ;incstack = 0
 11349                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11350  1142  3000               	movlw	0
 11351  1143  00F7               	movwf	___lmul@product+3
 11352  1144  3000               	movlw	0
 11353  1145  00F6               	movwf	___lmul@product+2
 11354  1146  3000               	movlw	0
 11355  1147  00F5               	movwf	___lmul@product+1
 11356  1148  3000               	movlw	0
 11357  1149  00F4               	movwf	___lmul@product
 11358  114A                     l2865:	
 11359  114A  1C20               	btfss	___lmul@multiplier,0
 11360  114B  2954               	goto	l2869
 11361  114C  0824               	movf	___lmul@multiplicand,w
 11362  114D  07F4               	addwf	___lmul@product,f
 11363  114E  0825               	movf	___lmul@multiplicand+1,w
 11364  114F  3DF5               	addwfc	___lmul@product+1,f
 11365  1150  0826               	movf	___lmul@multiplicand+2,w
 11366  1151  3DF6               	addwfc	___lmul@product+2,f
 11367  1152  0827               	movf	___lmul@multiplicand+3,w
 11368  1153  3DF7               	addwfc	___lmul@product+3,f
 11369  1154                     l2869:	
 11370  1154  3001               	movlw	1
 11371  1155                     u2075:	
 11372  1155  35A4               	lslf	___lmul@multiplicand,f
 11373  1156  0DA5               	rlf	___lmul@multiplicand+1,f
 11374  1157  0DA6               	rlf	___lmul@multiplicand+2,f
 11375  1158  0DA7               	rlf	___lmul@multiplicand+3,f
 11376  1159  0B89               	decfsz	9,f
 11377  115A  2955               	goto	u2075
 11378  115B  3001               	movlw	1
 11379  115C                     u2085:	
 11380  115C  36A3               	lsrf	___lmul@multiplier+3,f
 11381  115D  0CA2               	rrf	___lmul@multiplier+2,f
 11382  115E  0CA1               	rrf	___lmul@multiplier+1,f
 11383  115F  0CA0               	rrf	___lmul@multiplier,f
 11384  1160  0B89               	decfsz	9,f
 11385  1161  295C               	goto	u2085
 11386  1162  0823               	movf	___lmul@multiplier+3,w
 11387  1163  0422               	iorwf	___lmul@multiplier+2,w
 11388  1164  0421               	iorwf	___lmul@multiplier+1,w
 11389  1165  0420               	iorwf	___lmul@multiplier,w
 11390  1166  1D03               	skipz
 11391  1167  294A               	goto	l2865
 11392  1168  0877               	movf	___lmul@product+3,w
 11393  1169  00A3               	movwf	?___lmul+3
 11394  116A  0876               	movf	___lmul@product+2,w
 11395  116B  00A2               	movwf	?___lmul+2
 11396  116C  0875               	movf	___lmul@product+1,w
 11397  116D  00A1               	movwf	?___lmul+1
 11398  116E  0874               	movf	___lmul@product,w
 11399  116F  00A0               	movwf	?___lmul
 11400  1170  0008               	return
 11401  1171                     __end_of___lmul:	
 11402                           
 11403                           	psect	text29
 11404  13FC                     __ptext29:	
 11405 ;; *************** function ___lldiv *****************
 11406 ;; Defined at:
 11407 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/__lldiv.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;  divisor         4    0[BANK0 ] unsigned long 
 11410 ;;  dividend        4    4[BANK0 ] unsigned long 
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;  quotient        4    5[COMMON] unsigned long 
 11413 ;;  counter         1    9[COMMON] unsigned char 
 11414 ;; Return value:  Size  Location     Type
 11415 ;;                  4    0[BANK0 ] unsigned long 
 11416 ;; Registers used:
 11417 ;;		wreg, status,2, status,0
 11418 ;; Tracked objects:
 11419 ;;		On entry : 1F/0
 11420 ;;		On exit  : 1F/0
 11421 ;;		Unchanged: 0/0
 11422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11423 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;Total ram usage:       14 bytes
 11428 ;; Hardware stack levels used:    1
 11429 ;; Hardware stack levels required when called:    3
 11430 ;; This function calls:
 11431 ;;		Nothing
 11432 ;; This function is called by:
 11433 ;;		_compensate_pressure
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           
 11438                           ;psect for function ___lldiv
 11439  13FC                     ___lldiv:	
 11440                           
 11441                           ;incstack = 0
 11442                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 11443  13FC  3000               	movlw	0
 11444  13FD  00F8               	movwf	___lldiv@quotient+3
 11445  13FE  3000               	movlw	0
 11446  13FF  00F7               	movwf	___lldiv@quotient+2
 11447  1400  3000               	movlw	0
 11448  1401  00F6               	movwf	___lldiv@quotient+1
 11449  1402  3000               	movlw	0
 11450  1403  00F5               	movwf	___lldiv@quotient
 11451  1404  0823               	movf	___lldiv@divisor+3,w
 11452  1405  0422               	iorwf	___lldiv@divisor+2,w
 11453  1406  0421               	iorwf	___lldiv@divisor+1,w
 11454  1407  0420               	iorwf	___lldiv@divisor,w
 11455  1408  1903               	skipnz
 11456  1409  2C45               	goto	l2897
 11457  140A  01F9               	clrf	___lldiv@counter
 11458  140B  0AF9               	incf	___lldiv@counter,f
 11459  140C                     l2883:	
 11460  140C  1BA3               	btfsc	___lldiv@divisor+3,7
 11461  140D  2C1A               	goto	l2885
 11462  140E  3001               	movlw	1
 11463  140F                     u2115:	
 11464  140F  35A0               	lslf	___lldiv@divisor,f
 11465  1410  0DA1               	rlf	___lldiv@divisor+1,f
 11466  1411  0DA2               	rlf	___lldiv@divisor+2,f
 11467  1412  0DA3               	rlf	___lldiv@divisor+3,f
 11468  1413  0B89               	decfsz	9,f
 11469  1414  2C0F               	goto	u2115
 11470  1415  3001               	movlw	1
 11471  1416  00F4               	movwf	??___lldiv
 11472  1417  0874               	movf	??___lldiv,w
 11473  1418  07F9               	addwf	___lldiv@counter,f
 11474  1419  2C0C               	goto	l2883
 11475  141A                     l2885:	
 11476  141A  3001               	movlw	1
 11477  141B                     u2135:	
 11478  141B  35F5               	lslf	___lldiv@quotient,f
 11479  141C  0DF6               	rlf	___lldiv@quotient+1,f
 11480  141D  0DF7               	rlf	___lldiv@quotient+2,f
 11481  141E  0DF8               	rlf	___lldiv@quotient+3,f
 11482  141F  0B89               	decfsz	9,f
 11483  1420  2C1B               	goto	u2135
 11484  1421  0823               	movf	___lldiv@divisor+3,w
 11485  1422  0227               	subwf	___lldiv@dividend+3,w
 11486  1423  1D03               	skipz
 11487  1424  2C2F               	goto	u2145
 11488  1425  0822               	movf	___lldiv@divisor+2,w
 11489  1426  0226               	subwf	___lldiv@dividend+2,w
 11490  1427  1D03               	skipz
 11491  1428  2C2F               	goto	u2145
 11492  1429  0821               	movf	___lldiv@divisor+1,w
 11493  142A  0225               	subwf	___lldiv@dividend+1,w
 11494  142B  1D03               	skipz
 11495  142C  2C2F               	goto	u2145
 11496  142D  0820               	movf	___lldiv@divisor,w
 11497  142E  0224               	subwf	___lldiv@dividend,w
 11498  142F                     u2145:	
 11499  142F  1C03               	skipc
 11500  1430  2C3A               	goto	l2893
 11501  1431  0820               	movf	___lldiv@divisor,w
 11502  1432  02A4               	subwf	___lldiv@dividend,f
 11503  1433  0821               	movf	___lldiv@divisor+1,w
 11504  1434  3BA5               	subwfb	___lldiv@dividend+1,f
 11505  1435  0822               	movf	___lldiv@divisor+2,w
 11506  1436  3BA6               	subwfb	___lldiv@dividend+2,f
 11507  1437  0823               	movf	___lldiv@divisor+3,w
 11508  1438  3BA7               	subwfb	___lldiv@dividend+3,f
 11509  1439  1475               	bsf	___lldiv@quotient,0
 11510  143A                     l2893:	
 11511  143A  3001               	movlw	1
 11512  143B                     u2155:	
 11513  143B  36A3               	lsrf	___lldiv@divisor+3,f
 11514  143C  0CA2               	rrf	___lldiv@divisor+2,f
 11515  143D  0CA1               	rrf	___lldiv@divisor+1,f
 11516  143E  0CA0               	rrf	___lldiv@divisor,f
 11517  143F  0B89               	decfsz	9,f
 11518  1440  2C3B               	goto	u2155
 11519  1441  3001               	movlw	1
 11520  1442  02F9               	subwf	___lldiv@counter,f
 11521  1443  1D03               	btfss	3,2
 11522  1444  2C1A               	goto	l2885
 11523  1445                     l2897:	
 11524  1445  0878               	movf	___lldiv@quotient+3,w
 11525  1446  00A3               	movwf	?___lldiv+3
 11526  1447  0877               	movf	___lldiv@quotient+2,w
 11527  1448  00A2               	movwf	?___lldiv+2
 11528  1449  0876               	movf	___lldiv@quotient+1,w
 11529  144A  00A1               	movwf	?___lldiv+1
 11530  144B  0875               	movf	___lldiv@quotient,w
 11531  144C  00A0               	movwf	?___lldiv
 11532  144D  0008               	return
 11533  144E                     __end_of___lldiv:	
 11534                           
 11535                           	psect	text30
 11536  177F                     __ptext30:	
 11537 ;; *************** function ___aldiv *****************
 11538 ;; Defined at:
 11539 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/aldiv.c"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;  divisor         4    8[BANK0 ] long 
 11542 ;;  dividend        4   12[BANK0 ] long 
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;  quotient        4   18[BANK0 ] long 
 11545 ;;  sign            1   17[BANK0 ] unsigned char 
 11546 ;;  counter         1   16[BANK0 ] unsigned char 
 11547 ;; Return value:  Size  Location     Type
 11548 ;;                  4    8[BANK0 ] long 
 11549 ;; Registers used:
 11550 ;;		wreg, status,2, status,0
 11551 ;; Tracked objects:
 11552 ;;		On entry : 1F/0
 11553 ;;		On exit  : 1F/0
 11554 ;;		Unchanged: 0/0
 11555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11556 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11558 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;Total ram usage:       15 bytes
 11561 ;; Hardware stack levels used:    1
 11562 ;; Hardware stack levels required when called:    3
 11563 ;; This function calls:
 11564 ;;		Nothing
 11565 ;; This function is called by:
 11566 ;;		_compensate_temperature
 11567 ;;		_compensate_pressure
 11568 ;; This function uses a non-reentrant model
 11569 ;;
 11570                           
 11571                           
 11572                           ;psect for function ___aldiv
 11573  177F                     ___aldiv:	
 11574                           
 11575                           ;incstack = 0
 11576                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11577  177F  01B1               	clrf	___aldiv@sign
 11578  1780  1FAB               	btfss	___aldiv@divisor+3,7
 11579  1781  2F8F               	goto	l1054
 11580  1782  09A8               	comf	___aldiv@divisor,f
 11581  1783  09A9               	comf	___aldiv@divisor+1,f
 11582  1784  09AA               	comf	___aldiv@divisor+2,f
 11583  1785  09AB               	comf	___aldiv@divisor+3,f
 11584  1786  0AA8               	incf	___aldiv@divisor,f
 11585  1787  1903               	skipnz
 11586  1788  0AA9               	incf	___aldiv@divisor+1,f
 11587  1789  1903               	skipnz
 11588  178A  0AAA               	incf	___aldiv@divisor+2,f
 11589  178B  1903               	skipnz
 11590  178C  0AAB               	incf	___aldiv@divisor+3,f
 11591  178D  01B1               	clrf	___aldiv@sign
 11592  178E  0AB1               	incf	___aldiv@sign,f
 11593  178F                     l1054:	
 11594  178F  1FAF               	btfss	___aldiv@dividend+3,7
 11595  1790  2FA0               	goto	l2911
 11596  1791  09AC               	comf	___aldiv@dividend,f
 11597  1792  09AD               	comf	___aldiv@dividend+1,f
 11598  1793  09AE               	comf	___aldiv@dividend+2,f
 11599  1794  09AF               	comf	___aldiv@dividend+3,f
 11600  1795  0AAC               	incf	___aldiv@dividend,f
 11601  1796  1903               	skipnz
 11602  1797  0AAD               	incf	___aldiv@dividend+1,f
 11603  1798  1903               	skipnz
 11604  1799  0AAE               	incf	___aldiv@dividend+2,f
 11605  179A  1903               	skipnz
 11606  179B  0AAF               	incf	___aldiv@dividend+3,f
 11607  179C  3001               	movlw	1
 11608  179D  00F8               	movwf	??___aldiv
 11609  179E  0878               	movf	??___aldiv,w
 11610  179F  06B1               	xorwf	___aldiv@sign,f
 11611  17A0                     l2911:	
 11612  17A0  3000               	movlw	0
 11613  17A1  00B5               	movwf	___aldiv@quotient+3
 11614  17A2  3000               	movlw	0
 11615  17A3  00B4               	movwf	___aldiv@quotient+2
 11616  17A4  3000               	movlw	0
 11617  17A5  00B3               	movwf	___aldiv@quotient+1
 11618  17A6  3000               	movlw	0
 11619  17A7  00B2               	movwf	___aldiv@quotient
 11620  17A8  082B               	movf	___aldiv@divisor+3,w
 11621  17A9  042A               	iorwf	___aldiv@divisor+2,w
 11622  17AA  0429               	iorwf	___aldiv@divisor+1,w
 11623  17AB  0428               	iorwf	___aldiv@divisor,w
 11624  17AC  1903               	skipnz
 11625  17AD  2FE9               	goto	l2933
 11626  17AE  01B0               	clrf	___aldiv@counter
 11627  17AF  0AB0               	incf	___aldiv@counter,f
 11628  17B0                     l2919:	
 11629  17B0  1BAB               	btfsc	___aldiv@divisor+3,7
 11630  17B1  2FBE               	goto	l2921
 11631  17B2  3001               	movlw	1
 11632  17B3                     u2205:	
 11633  17B3  35A8               	lslf	___aldiv@divisor,f
 11634  17B4  0DA9               	rlf	___aldiv@divisor+1,f
 11635  17B5  0DAA               	rlf	___aldiv@divisor+2,f
 11636  17B6  0DAB               	rlf	___aldiv@divisor+3,f
 11637  17B7  0B89               	decfsz	9,f
 11638  17B8  2FB3               	goto	u2205
 11639  17B9  3001               	movlw	1
 11640  17BA  00F8               	movwf	??___aldiv
 11641  17BB  0878               	movf	??___aldiv,w
 11642  17BC  07B0               	addwf	___aldiv@counter,f
 11643  17BD  2FB0               	goto	l2919
 11644  17BE                     l2921:	
 11645  17BE  3001               	movlw	1
 11646  17BF                     u2225:	
 11647  17BF  35B2               	lslf	___aldiv@quotient,f
 11648  17C0  0DB3               	rlf	___aldiv@quotient+1,f
 11649  17C1  0DB4               	rlf	___aldiv@quotient+2,f
 11650  17C2  0DB5               	rlf	___aldiv@quotient+3,f
 11651  17C3  0B89               	decfsz	9,f
 11652  17C4  2FBF               	goto	u2225
 11653  17C5  082B               	movf	___aldiv@divisor+3,w
 11654  17C6  022F               	subwf	___aldiv@dividend+3,w
 11655  17C7  1D03               	skipz
 11656  17C8  2FD3               	goto	u2235
 11657  17C9  082A               	movf	___aldiv@divisor+2,w
 11658  17CA  022E               	subwf	___aldiv@dividend+2,w
 11659  17CB  1D03               	skipz
 11660  17CC  2FD3               	goto	u2235
 11661  17CD  0829               	movf	___aldiv@divisor+1,w
 11662  17CE  022D               	subwf	___aldiv@dividend+1,w
 11663  17CF  1D03               	skipz
 11664  17D0  2FD3               	goto	u2235
 11665  17D1  0828               	movf	___aldiv@divisor,w
 11666  17D2  022C               	subwf	___aldiv@dividend,w
 11667  17D3                     u2235:	
 11668  17D3  1C03               	skipc
 11669  17D4  2FDE               	goto	l2929
 11670  17D5  0828               	movf	___aldiv@divisor,w
 11671  17D6  02AC               	subwf	___aldiv@dividend,f
 11672  17D7  0829               	movf	___aldiv@divisor+1,w
 11673  17D8  3BAD               	subwfb	___aldiv@dividend+1,f
 11674  17D9  082A               	movf	___aldiv@divisor+2,w
 11675  17DA  3BAE               	subwfb	___aldiv@dividend+2,f
 11676  17DB  082B               	movf	___aldiv@divisor+3,w
 11677  17DC  3BAF               	subwfb	___aldiv@dividend+3,f
 11678  17DD  1432               	bsf	___aldiv@quotient,0
 11679  17DE                     l2929:	
 11680  17DE  3001               	movlw	1
 11681  17DF                     u2245:	
 11682  17DF  36AB               	lsrf	___aldiv@divisor+3,f
 11683  17E0  0CAA               	rrf	___aldiv@divisor+2,f
 11684  17E1  0CA9               	rrf	___aldiv@divisor+1,f
 11685  17E2  0CA8               	rrf	___aldiv@divisor,f
 11686  17E3  0B89               	decfsz	9,f
 11687  17E4  2FDF               	goto	u2245
 11688  17E5  3001               	movlw	1
 11689  17E6  02B0               	subwf	___aldiv@counter,f
 11690  17E7  1D03               	btfss	3,2
 11691  17E8  2FBE               	goto	l2921
 11692  17E9                     l2933:	
 11693  17E9  0831               	movf	___aldiv@sign,w
 11694  17EA  1903               	btfsc	3,2
 11695  17EB  2FF7               	goto	l2937
 11696  17EC  09B2               	comf	___aldiv@quotient,f
 11697  17ED  09B3               	comf	___aldiv@quotient+1,f
 11698  17EE  09B4               	comf	___aldiv@quotient+2,f
 11699  17EF  09B5               	comf	___aldiv@quotient+3,f
 11700  17F0  0AB2               	incf	___aldiv@quotient,f
 11701  17F1  1903               	skipnz
 11702  17F2  0AB3               	incf	___aldiv@quotient+1,f
 11703  17F3  1903               	skipnz
 11704  17F4  0AB4               	incf	___aldiv@quotient+2,f
 11705  17F5  1903               	skipnz
 11706  17F6  0AB5               	incf	___aldiv@quotient+3,f
 11707  17F7                     l2937:	
 11708  17F7  0835               	movf	___aldiv@quotient+3,w
 11709  17F8  00AB               	movwf	?___aldiv+3
 11710  17F9  0834               	movf	___aldiv@quotient+2,w
 11711  17FA  00AA               	movwf	?___aldiv+2
 11712  17FB  0833               	movf	___aldiv@quotient+1,w
 11713  17FC  00A9               	movwf	?___aldiv+1
 11714  17FD  0832               	movf	___aldiv@quotient,w
 11715  17FE  00A8               	movwf	?___aldiv
 11716  17FF  0008               	return
 11717  1800                     __end_of___aldiv:	
 11718                           
 11719                           	psect	text31
 11720  1705                     __ptext31:	
 11721 ;; *************** function _UIntToHexString *****************
 11722 ;; Defined at:
 11723 ;;		line 123 in file "main.c"
 11724 ;; Parameters:    Size  Location     Type
 11725 ;;  n               4   19[BANK0 ] unsigned long 
 11726 ;;  dest            1   23[BANK0 ] PTR unsigned char 
 11727 ;;		 -> checksum(6), 
 11728 ;; Auto vars:     Size  Location     Type
 11729 ;;  remainder       4   30[BANK0 ] unsigned long 
 11730 ;;  i               4   34[BANK0 ] unsigned long 
 11731 ;; Return value:  Size  Location     Type
 11732 ;;                  1    wreg      void 
 11733 ;; Registers used:
 11734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11735 ;; Tracked objects:
 11736 ;;		On entry : 1F/0
 11737 ;;		On exit  : 1F/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11740 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;Total ram usage:       19 bytes
 11745 ;; Hardware stack levels used:    1
 11746 ;; Hardware stack levels required when called:    5
 11747 ;; This function calls:
 11748 ;;		_ReverseString
 11749 ;; This function is called by:
 11750 ;;		_main
 11751 ;; This function uses a non-reentrant model
 11752 ;;
 11753                           
 11754                           
 11755                           ;psect for function _UIntToHexString
 11756  1705                     _UIntToHexString:	
 11757                           
 11758                           ;main.c: 123: void UIntToHexString(uint32_t n, char* dest);main.c: 124: {;main.c: 125:  
      +                             uint32_t i = 0;
 11759                           
 11760                           ;incstack = 0
 11761                           ; Regs used in _UIntToHexString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11762  1705  3000               	movlw	0
 11763  1706  00C5               	movwf	UIntToHexString@i+3
 11764  1707  3000               	movlw	0
 11765  1708  00C4               	movwf	UIntToHexString@i+2
 11766  1709  3000               	movlw	0
 11767  170A  00C3               	movwf	UIntToHexString@i+1
 11768  170B  3000               	movlw	0
 11769  170C  00C2               	movwf	UIntToHexString@i
 11770  170D                     l670:	
 11771                           ;main.c: 126:     do {
 11772                           
 11773                           
 11774                           ;main.c: 129:         uint32_t remainder = n % 16;
 11775  170D  300F               	movlw	15
 11776  170E  0533               	andwf	UIntToHexString@n,w
 11777  170F  00BE               	movwf	UIntToHexString@remainder
 11778  1710  3000               	movlw	0
 11779  1711  0534               	andwf	UIntToHexString@n+1,w
 11780  1712  00BF               	movwf	UIntToHexString@remainder+1
 11781  1713  3000               	movlw	0
 11782  1714  0535               	andwf	UIntToHexString@n+2,w
 11783  1715  00C0               	movwf	UIntToHexString@remainder+2
 11784  1716  3000               	movlw	0
 11785  1717  0536               	andwf	UIntToHexString@n+3,w
 11786  1718  00C1               	movwf	UIntToHexString@remainder+3
 11787                           
 11788                           ;main.c: 131:         dest[i++] = remainder + (remainder >= 10 ? 55 : '0');
 11789  1719  0841               	movf	UIntToHexString@remainder+3,w
 11790  171A  1D03               	btfss	3,2
 11791  171B  2F2E               	goto	l3955
 11792  171C  0840               	movf	UIntToHexString@remainder+2,w
 11793  171D  1D03               	btfss	3,2
 11794  171E  2F2E               	goto	l3955
 11795  171F  083F               	movf	UIntToHexString@remainder+1,w
 11796  1720  1D03               	btfss	3,2
 11797  1721  2F2E               	goto	l3955
 11798  1722  300A               	movlw	10
 11799  1723  023E               	subwf	UIntToHexString@remainder,w
 11800  1724  1803               	btfsc	3,0
 11801  1725  2F2E               	goto	l3955
 11802  1726  3000               	movlw	0
 11803  1727  00BD               	movwf	_UIntToHexString$1797+3
 11804  1728  3000               	movlw	0
 11805  1729  00BC               	movwf	_UIntToHexString$1797+2
 11806  172A  3000               	movlw	0
 11807  172B  00BB               	movwf	_UIntToHexString$1797+1
 11808  172C  3030               	movlw	48
 11809  172D  2F35               	goto	L6
 11810  172E                     l3955:	
 11811  172E  3000               	movlw	0
 11812  172F  00BD               	movwf	_UIntToHexString$1797+3
 11813  1730  3000               	movlw	0
 11814  1731  00BC               	movwf	_UIntToHexString$1797+2
 11815  1732  3000               	movlw	0
 11816  1733  00BB               	movwf	_UIntToHexString$1797+1
 11817  1734  3037               	movlw	55
 11818  1735                     L6:	
 11819  1735  00BA               	movwf	_UIntToHexString$1797
 11820  1736  083A               	movf	_UIntToHexString$1797,w
 11821  1737  073E               	addwf	UIntToHexString@remainder,w
 11822  1738  00B8               	movwf	??_UIntToHexString
 11823  1739  0842               	movf	UIntToHexString@i,w
 11824  173A  0737               	addwf	UIntToHexString@dest,w
 11825  173B  00B9               	movwf	??_UIntToHexString+1
 11826  173C  0839               	movf	??_UIntToHexString+1,w
 11827  173D  0086               	movwf	6
 11828  173E  3001               	movlw	1	; select bank2/3
 11829  173F  0087               	movwf	7
 11830  1740  0838               	movf	??_UIntToHexString,w
 11831  1741  0081               	movwf	1
 11832  1742  3001               	movlw	1
 11833  1743  07C2               	addwf	UIntToHexString@i,f
 11834  1744  3000               	movlw	0
 11835  1745  3DC3               	addwfc	UIntToHexString@i+1,f
 11836  1746  3000               	movlw	0
 11837  1747  3DC4               	addwfc	UIntToHexString@i+2,f
 11838  1748  3000               	movlw	0
 11839  1749  3DC5               	addwfc	UIntToHexString@i+3,f
 11840                           
 11841                           ;main.c: 133:     } while ((n /= 16) > 0);
 11842  174A  3004               	movlw	4
 11843  174B                     u3585:	
 11844  174B  36B6               	lsrf	UIntToHexString@n+3,f
 11845  174C  0CB5               	rrf	UIntToHexString@n+2,f
 11846  174D  0CB4               	rrf	UIntToHexString@n+1,f
 11847  174E  0CB3               	rrf	UIntToHexString@n,f
 11848  174F  0B89               	decfsz	9,f
 11849  1750  2F4B               	goto	u3585
 11850  1751  0836               	movf	UIntToHexString@n+3,w
 11851  1752  0435               	iorwf	UIntToHexString@n+2,w
 11852  1753  0434               	iorwf	UIntToHexString@n+1,w
 11853  1754  0433               	iorwf	UIntToHexString@n,w
 11854  1755  1903               	btfsc	3,2
 11855  1756  2F6B               	goto	l3967
 11856  1757  2F0D               	goto	l670
 11857  1758                     l3963:	
 11858                           
 11859                           ;main.c: 135:     {;main.c: 136:         dest[i] = '0';
 11860  1758  3030               	movlw	48
 11861  1759  00B8               	movwf	??_UIntToHexString
 11862  175A  0842               	movf	UIntToHexString@i,w
 11863  175B  0737               	addwf	UIntToHexString@dest,w
 11864  175C  00B9               	movwf	??_UIntToHexString+1
 11865  175D  0839               	movf	??_UIntToHexString+1,w
 11866  175E  0086               	movwf	6
 11867  175F  3001               	movlw	1	; select bank2/3
 11868  1760  0087               	movwf	7
 11869  1761  0838               	movf	??_UIntToHexString,w
 11870  1762  0081               	movwf	1
 11871                           
 11872                           ;main.c: 137:         i++;
 11873  1763  3001               	movlw	1
 11874  1764  07C2               	addwf	UIntToHexString@i,f
 11875  1765  3000               	movlw	0
 11876  1766  3DC3               	addwfc	UIntToHexString@i+1,f
 11877  1767  3000               	movlw	0
 11878  1768  3DC4               	addwfc	UIntToHexString@i+2,f
 11879  1769  3000               	movlw	0
 11880  176A  3DC5               	addwfc	UIntToHexString@i+3,f
 11881  176B                     l3967:	
 11882                           
 11883                           ;main.c: 134:     while (i < 4)
 11884  176B  0845               	movf	UIntToHexString@i+3,w
 11885  176C  1D03               	btfss	3,2
 11886  176D  2F78               	goto	l3969
 11887  176E  0844               	movf	UIntToHexString@i+2,w
 11888  176F  1D03               	btfss	3,2
 11889  1770  2F78               	goto	l3969
 11890  1771  0843               	movf	UIntToHexString@i+1,w
 11891  1772  1D03               	btfss	3,2
 11892  1773  2F78               	goto	l3969
 11893  1774  3004               	movlw	4
 11894  1775  0242               	subwf	UIntToHexString@i,w
 11895  1776  1C03               	btfss	3,0
 11896  1777  2F58               	goto	l3963
 11897  1778                     l3969:	
 11898                           
 11899                           ;main.c: 139:     ReverseString(dest);
 11900  1778  0837               	movf	UIntToHexString@dest,w
 11901  1779  00A4               	movwf	ReverseString@str
 11902  177A  3001               	movlw	1
 11903  177B  00A5               	movwf	ReverseString@str+1
 11904  177C  3196  262C         	fcall	_ReverseString
 11905  177E  0008               	return
 11906  177F                     __end_of_UIntToHexString:	
 11907                           
 11908                           	psect	text32
 11909  1114                     __ptext32:	
 11910 ;; *************** function _TransmitString *****************
 11911 ;; Defined at:
 11912 ;;		line 367 in file "main.c"
 11913 ;; Parameters:    Size  Location     Type
 11914 ;;  message         1    wreg     PTR unsigned char 
 11915 ;;		 -> message_end(73), message_start(70), 
 11916 ;; Auto vars:     Size  Location     Type
 11917 ;;  message         1    5[BANK0 ] PTR unsigned char 
 11918 ;;		 -> message_end(73), message_start(70), 
 11919 ;;  i               2    3[BANK0 ] int 
 11920 ;;  counti          2    1[BANK0 ] int 
 11921 ;; Return value:  Size  Location     Type
 11922 ;;                  1    wreg      void 
 11923 ;; Registers used:
 11924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11925 ;; Tracked objects:
 11926 ;;		On entry : 1F/1
 11927 ;;		On exit  : 0/0
 11928 ;;		Unchanged: 0/0
 11929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;Total ram usage:        6 bytes
 11935 ;; Hardware stack levels used:    1
 11936 ;; Hardware stack levels required when called:    5
 11937 ;; This function calls:
 11938 ;;		_TransmitByte
 11939 ;;		_strlen
 11940 ;; This function is called by:
 11941 ;;		_main
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           
 11946                           ;psect for function _TransmitString
 11947  1114                     _TransmitString:	
 11948                           
 11949                           ;incstack = 0
 11950                           ; Regs used in _TransmitString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11951                           ;TransmitString@message stored from wreg
 11952  1114  0020               	movlb	0	; select bank0
 11953  1115  00A5               	movwf	TransmitString@message
 11954                           
 11955                           ;main.c: 367: void TransmitString(char* message);main.c: 368: {;main.c: 372:  for (int i
      +                           = 0, counti = strlen(message); i < counti; i++)
 11956  1116  01A3               	clrf	TransmitString@i
 11957  1117  01A4               	clrf	TransmitString@i+1
 11958  1118  0825               	movf	TransmitString@message,w
 11959  1119  00F4               	movwf	strlen@s
 11960  111A  3003               	movlw	3
 11961  111B  00F5               	movwf	strlen@s+1
 11962  111C  319F  270F  3191   	fcall	_strlen
 11963  111F  0875               	movf	?_strlen+1,w
 11964  1120  0020               	movlb	0	; select bank0
 11965  1121  00A2               	movwf	TransmitString@counti+1
 11966  1122  0874               	movf	?_strlen,w
 11967  1123  00A1               	movwf	TransmitString@counti
 11968  1124                     l3785:	
 11969  1124  0824               	movf	TransmitString@i+1,w
 11970  1125  3A80               	xorlw	128
 11971  1126  00A0               	movwf	??_TransmitString
 11972  1127  0822               	movf	TransmitString@counti+1,w
 11973  1128  3A80               	xorlw	128
 11974  1129  0220               	subwf	??_TransmitString,w
 11975  112A  1D03               	skipz
 11976  112B  292E               	goto	u3455
 11977  112C  0821               	movf	TransmitString@counti,w
 11978  112D  0223               	subwf	TransmitString@i,w
 11979  112E                     u3455:	
 11980  112E  1803               	btfsc	3,0
 11981  112F  0008               	return
 11982                           
 11983                           ;main.c: 373:  {;main.c: 374:   TransmitByte(message[i]);
 11984  1130  0020               	movlb	0	; select bank0
 11985  1131  0823               	movf	TransmitString@i,w
 11986  1132  0725               	addwf	TransmitString@message,w
 11987  1133  00A0               	movwf	??_TransmitString
 11988  1134  0820               	movf	??_TransmitString,w
 11989  1135  0086               	movwf	6
 11990  1136  3003               	movlw	3	; select bank6/7
 11991  1137  0087               	movwf	7
 11992  1138  0801               	movf	1,w
 11993  1139  3190  20BA  3191   	fcall	_TransmitByte
 11994                           
 11995                           ;main.c: 375:  }
 11996  113C  3001               	movlw	1
 11997  113D  0020               	movlb	0	; select bank0
 11998  113E  07A3               	addwf	TransmitString@i,f
 11999  113F  3000               	movlw	0
 12000  1140  3DA4               	addwfc	TransmitString@i+1,f
 12001  1141  2924               	goto	l3785
 12002  1142                     __end_of_TransmitString:	
 12003                           
 12004                           	psect	text33
 12005  10BA                     __ptext33:	
 12006 ;; *************** function _TransmitByte *****************
 12007 ;; Defined at:
 12008 ;;		line 345 in file "main.c"
 12009 ;; Parameters:    Size  Location     Type
 12010 ;;  byte            1    wreg     unsigned char 
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;  byte            1    7[COMMON] unsigned char 
 12013 ;;  i               2    8[COMMON] int 
 12014 ;; Return value:  Size  Location     Type
 12015 ;;                  1    wreg      void 
 12016 ;; Registers used:
 12017 ;;		wreg, status,2, status,0, pclath, cstack
 12018 ;; Tracked objects:
 12019 ;;		On entry : 1F/0
 12020 ;;		On exit  : 0/0
 12021 ;;		Unchanged: 0/0
 12022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;Total ram usage:        4 bytes
 12028 ;; Hardware stack levels used:    1
 12029 ;; Hardware stack levels required when called:    4
 12030 ;; This function calls:
 12031 ;;		_TransmitBit
 12032 ;; This function is called by:
 12033 ;;		_TransmitString
 12034 ;; This function uses a non-reentrant model
 12035 ;;
 12036                           
 12037                           
 12038                           ;psect for function _TransmitByte
 12039  10BA                     _TransmitByte:	
 12040                           
 12041                           ;incstack = 0
 12042                           ; Regs used in _TransmitByte: [wreg+status,2+status,0+pclath+cstack]
 12043                           ;TransmitByte@byte stored from wreg
 12044  10BA  00F7               	movwf	TransmitByte@byte
 12045                           
 12046                           ;main.c: 345: void TransmitByte(char byte);main.c: 346: {;main.c: 356:     TransmitBit(0
      +                          );
 12047  10BB  3000               	movlw	0
 12048  10BC  319F  2726  3190   	fcall	_TransmitBit
 12049                           
 12050                           ;main.c: 358:  for (int i = 0; i < 7; i++)
 12051  10BF  01F8               	clrf	TransmitByte@i
 12052  10C0  01F9               	clrf	TransmitByte@i+1
 12053  10C1                     l3435:	
 12054                           
 12055                           ;main.c: 359:  {;main.c: 360:   TransmitBit((byte >> i) & 1);
 12056  10C1  0877               	movf	TransmitByte@byte,w
 12057  10C2  00F6               	movwf	??_TransmitByte
 12058  10C3  0A78               	incf	TransmitByte@i,w
 12059  10C4  28C6               	goto	u2934
 12060  10C5                     u2935:	
 12061  10C5  36F6               	lsrf	??_TransmitByte,f
 12062  10C6                     u2934:	
 12063  10C6  0B89               	decfsz	9,f
 12064  10C7  28C5               	goto	u2935
 12065  10C8  1C76               	btfss	??_TransmitByte,0
 12066  10C9  28CC               	goto	u2940
 12067  10CA  3001               	movlw	1
 12068  10CB  28CD               	goto	u2950
 12069  10CC                     u2940:	
 12070  10CC  3000               	movlw	0
 12071  10CD                     u2950:	
 12072  10CD  319F  2726  3190   	fcall	_TransmitBit
 12073                           
 12074                           ;main.c: 361:  }
 12075  10D0  3001               	movlw	1
 12076  10D1  07F8               	addwf	TransmitByte@i,f
 12077  10D2  3000               	movlw	0
 12078  10D3  3DF9               	addwfc	TransmitByte@i+1,f
 12079  10D4  0879               	movf	TransmitByte@i+1,w
 12080  10D5  3A80               	xorlw	128
 12081  10D6  00F6               	movwf	??_TransmitByte
 12082  10D7  3080               	movlw	128
 12083  10D8  0276               	subwf	??_TransmitByte,w
 12084  10D9  1D03               	skipz
 12085  10DA  28DD               	goto	u2965
 12086  10DB  3007               	movlw	7
 12087  10DC  0278               	subwf	TransmitByte@i,w
 12088  10DD                     u2965:	
 12089  10DD  1C03               	skipc
 12090  10DE  28C1               	goto	l3435
 12091                           
 12092                           ;main.c: 363:  TransmitBit(1);
 12093  10DF  3001               	movlw	1
 12094  10E0  319F  2726  3190   	fcall	_TransmitBit
 12095                           
 12096                           ;main.c: 364:  TransmitBit(1);
 12097  10E3  3001               	movlw	1
 12098  10E4  319F  2726         	fcall	_TransmitBit
 12099  10E6  0008               	return
 12100  10E7                     __end_of_TransmitByte:	
 12101                           
 12102                           	psect	text34
 12103  1F26                     __ptext34:	
 12104 ;; *************** function _TransmitBit *****************
 12105 ;; Defined at:
 12106 ;;		line 325 in file "main.c"
 12107 ;; Parameters:    Size  Location     Type
 12108 ;;  b               1    wreg     _Bool 
 12109 ;; Auto vars:     Size  Location     Type
 12110 ;;  b               1    5[COMMON] _Bool 
 12111 ;; Return value:  Size  Location     Type
 12112 ;;                  1    wreg      void 
 12113 ;; Registers used:
 12114 ;;		wreg, status,2, status,0
 12115 ;; Tracked objects:
 12116 ;;		On entry : 0/0
 12117 ;;		On exit  : 0/0
 12118 ;;		Unchanged: 0/0
 12119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12123 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12124 ;;Total ram usage:        2 bytes
 12125 ;; Hardware stack levels used:    1
 12126 ;; Hardware stack levels required when called:    3
 12127 ;; This function calls:
 12128 ;;		Nothing
 12129 ;; This function is called by:
 12130 ;;		_TransmitByte
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           
 12135                           ;psect for function _TransmitBit
 12136  1F26                     _TransmitBit:	
 12137                           
 12138                           ;incstack = 0
 12139                           ; Regs used in _TransmitBit: [wreg+status,2+status,0]
 12140                           ;TransmitBit@b stored from wreg
 12141  1F26  00F5               	movwf	TransmitBit@b
 12142                           
 12143                           ;main.c: 325: void TransmitBit(_Bool b);main.c: 326: {;main.c: 327:  if (b)
 12144  1F27  0875               	movf	TransmitBit@b,w
 12145  1F28  1903               	btfsc	3,2
 12146  1F29  2F2D               	goto	l755
 12147                           
 12148                           ;main.c: 328:  {;main.c: 329:   do { LATAbits.LATA4 = 1; } while(0);
 12149  1F2A  0022               	movlb	2	; select bank2
 12150  1F2B  160C               	bsf	12,4	;volatile
 12151  1F2C  2F2F               	goto	l3149
 12152  1F2D                     l755:	
 12153                           ;main.c: 332:  {;main.c: 333:   do { LATAbits.LATA4 = 0; } while(0);
 12154                           
 12155  1F2D  0022               	movlb	2	; select bank2
 12156  1F2E  120C               	bcf	12,4	;volatile
 12157  1F2F                     l3149:	
 12158                           
 12159                           ;main.c: 340:  _delay((unsigned long)((((1000 / 50) / 2) * 1000)*(4000000/4000000.0)));
 12160  1F2F  300D               	movlw	13
 12161  1F30  00F4               	movwf	??_TransmitBit
 12162  1F31  30FC               	movlw	252
 12163  1F32                     u3727:	
 12164  1F32  0B89               	decfsz	9,f
 12165  1F33  2F32               	goto	u3727
 12166  1F34  0BF4               	decfsz	??_TransmitBit,f
 12167  1F35  2F32               	goto	u3727
 12168                           
 12169                           ;main.c: 341:  _delay((unsigned long)((((1000 / 50) / 2) * 1000)*(4000000/4000000.0)));
 12170  1F36  300D               	movlw	13
 12171  1F37  00F4               	movwf	??_TransmitBit
 12172  1F38  30FC               	movlw	252
 12173  1F39                     u3737:	
 12174  1F39  0B89               	decfsz	9,f
 12175  1F3A  2F39               	goto	u3737
 12176  1F3B  0BF4               	decfsz	??_TransmitBit,f
 12177  1F3C  2F39               	goto	u3737
 12178  1F3D  0008               	return
 12179  1F3E                     __end_of_TransmitBit:	
 12180                           
 12181                           	psect	text35
 12182  1ECA                     __ptext35:	
 12183 ;; *************** function _SYSTEM_Initialize *****************
 12184 ;; Defined at:
 12185 ;;		line 50 in file "mcc_generated_files/mcc.c"
 12186 ;; Parameters:    Size  Location     Type
 12187 ;;		None
 12188 ;; Auto vars:     Size  Location     Type
 12189 ;;		None
 12190 ;; Return value:  Size  Location     Type
 12191 ;;                  1    wreg      void 
 12192 ;; Registers used:
 12193 ;;		wreg, status,2, status,0, pclath, cstack
 12194 ;; Tracked objects:
 12195 ;;		On entry : B1F/0
 12196 ;;		On exit  : 1F/3
 12197 ;;		Unchanged: 0/0
 12198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;Total ram usage:        0 bytes
 12204 ;; Hardware stack levels used:    1
 12205 ;; Hardware stack levels required when called:    5
 12206 ;; This function calls:
 12207 ;;		_EUSART_Initialize
 12208 ;;		_I2C_Initialize
 12209 ;;		_OSCILLATOR_Initialize
 12210 ;;		_PIN_MANAGER_Initialize
 12211 ;;		_TMR0_Initialize
 12212 ;; This function is called by:
 12213 ;;		_main
 12214 ;; This function uses a non-reentrant model
 12215 ;;
 12216                           
 12217                           
 12218                           ;psect for function _SYSTEM_Initialize
 12219  1ECA                     _SYSTEM_Initialize:	
 12220                           
 12221                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
 12222                           
 12223                           ;incstack = 0
 12224                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12225  1ECA  3191  21A1  319E   	fcall	_PIN_MANAGER_Initialize
 12226                           
 12227                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
 12228  1ECD  3188  2001  319E   	fcall	_OSCILLATOR_Initialize
 12229                           
 12230                           ;mcc_generated_files/mcc.c: 54:     I2C_Initialize();
 12231  1ED0  319F  2758  319E   	fcall	_I2C_Initialize
 12232                           
 12233                           ;mcc_generated_files/mcc.c: 55:     TMR0_Initialize();
 12234  1ED3  319E  26FA  319E   	fcall	_TMR0_Initialize
 12235                           
 12236                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
 12237  1ED6  319E  26B4         	fcall	_EUSART_Initialize
 12238  1ED8  0008               	return
 12239  1ED9                     __end_of_SYSTEM_Initialize:	
 12240                           
 12241                           	psect	text36
 12242  1EFA                     __ptext36:	
 12243 ;; *************** function _TMR0_Initialize *****************
 12244 ;; Defined at:
 12245 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 12246 ;; Parameters:    Size  Location     Type
 12247 ;;		None
 12248 ;; Auto vars:     Size  Location     Type
 12249 ;;		None
 12250 ;; Return value:  Size  Location     Type
 12251 ;;                  1    wreg      void 
 12252 ;; Registers used:
 12253 ;;		wreg, status,2, status,0, pclath, cstack
 12254 ;; Tracked objects:
 12255 ;;		On entry : B1F/1
 12256 ;;		On exit  : 1F/3
 12257 ;;		Unchanged: 0/0
 12258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;Total ram usage:        1 bytes
 12264 ;; Hardware stack levels used:    1
 12265 ;; Hardware stack levels required when called:    4
 12266 ;; This function calls:
 12267 ;;		_TMR0_SetInterruptHandler
 12268 ;; This function is called by:
 12269 ;;		_SYSTEM_Initialize
 12270 ;; This function uses a non-reentrant model
 12271 ;;
 12272                           
 12273                           
 12274                           ;psect for function _TMR0_Initialize
 12275  1EFA                     _TMR0_Initialize:	
 12276                           
 12277                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
 12278                           
 12279                           ;incstack = 0
 12280                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12281  1EFA  0815               	movf	21,w	;volatile
 12282  1EFB  39C0               	andlw	192
 12283  1EFC  3812               	iorlw	18
 12284  1EFD  0095               	movwf	21	;volatile
 12285                           
 12286                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
 12287  1EFE  3083               	movlw	131
 12288  1EFF  0020               	movlb	0	; select bank0
 12289  1F00  0095               	movwf	21	;volatile
 12290                           
 12291                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
 12292  1F01  3083               	movlw	131
 12293  1F02  00F6               	movwf	??_TMR0_Initialize
 12294  1F03  0876               	movf	??_TMR0_Initialize,w
 12295  1F04  0023               	movlb	3	; select bank3
 12296  1F05  00E6               	movwf	_timer0ReloadVal^(0+384)	;volatile
 12297                           
 12298                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
 12299  1F06  110B               	bcf	11,2	;volatile
 12300                           
 12301                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
 12302  1F07  168B               	bsf	11,5	;volatile
 12303                           
 12304                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 12305  1F08  3000               	movlw	low _TMR0_DefaultInterruptHandler
 12306  1F09  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 12307  1F0A  3008               	movlw	high _TMR0_DefaultInterruptHandler
 12308  1F0B  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 12309  1F0C  319E  26A5         	fcall	_TMR0_SetInterruptHandler
 12310  1F0E  0008               	return
 12311  1F0F                     __end_of_TMR0_Initialize:	
 12312                           
 12313                           	psect	text37
 12314  1EA5                     __ptext37:	
 12315 ;; *************** function _TMR0_SetInterruptHandler *****************
 12316 ;; Defined at:
 12317 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 12318 ;; Parameters:    Size  Location     Type
 12319 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
 12320 ;;		 -> TimerISR(1), TMR0_DefaultInterruptHandler(1), 
 12321 ;; Auto vars:     Size  Location     Type
 12322 ;;		None
 12323 ;; Return value:  Size  Location     Type
 12324 ;;                  1    wreg      void 
 12325 ;; Registers used:
 12326 ;;		wreg
 12327 ;; Tracked objects:
 12328 ;;		On entry : 1F/3
 12329 ;;		On exit  : 1F/3
 12330 ;;		Unchanged: 0/0
 12331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;Total ram usage:        2 bytes
 12337 ;; Hardware stack levels used:    1
 12338 ;; Hardware stack levels required when called:    3
 12339 ;; This function calls:
 12340 ;;		Nothing
 12341 ;; This function is called by:
 12342 ;;		_TMR0_Initialize
 12343 ;;		_main
 12344 ;; This function uses a non-reentrant model
 12345 ;;
 12346                           
 12347                           
 12348                           ;psect for function _TMR0_SetInterruptHandler
 12349  1EA5                     _TMR0_SetInterruptHandler:	
 12350                           
 12351                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
 12352                           
 12353                           ;incstack = 0
 12354                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 12355  1EA5  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 12356  1EA6  00E5               	movwf	(_TMR0_InterruptHandler+1)^(0+384)
 12357  1EA7  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 12358  1EA8  00E4               	movwf	_TMR0_InterruptHandler^(0+384)
 12359  1EA9  0008               	return
 12360  1EAA                     __end_of_TMR0_SetInterruptHandler:	
 12361                           
 12362                           	psect	text38
 12363  11A1                     __ptext38:	
 12364 ;; *************** function _PIN_MANAGER_Initialize *****************
 12365 ;; Defined at:
 12366 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 12367 ;; Parameters:    Size  Location     Type
 12368 ;;		None
 12369 ;; Auto vars:     Size  Location     Type
 12370 ;;		None
 12371 ;; Return value:  Size  Location     Type
 12372 ;;                  1    wreg      void 
 12373 ;; Registers used:
 12374 ;;		wreg, status,2
 12375 ;; Tracked objects:
 12376 ;;		On entry : B1F/0
 12377 ;;		On exit  : B1F/1C
 12378 ;;		Unchanged: B00/0
 12379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;Total ram usage:        0 bytes
 12385 ;; Hardware stack levels used:    1
 12386 ;; Hardware stack levels required when called:    3
 12387 ;; This function calls:
 12388 ;;		Nothing
 12389 ;; This function is called by:
 12390 ;;		_SYSTEM_Initialize
 12391 ;; This function uses a non-reentrant model
 12392 ;;
 12393                           
 12394                           
 12395                           ;psect for function _PIN_MANAGER_Initialize
 12396  11A1                     _PIN_MANAGER_Initialize:	
 12397                           
 12398                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 12399                           
 12400                           ;incstack = 0
 12401                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12402  11A1  0022               	movlb	2	; select bank2
 12403  11A2  018C               	clrf	12	;volatile
 12404                           
 12405                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 12406  11A3  018D               	clrf	13	;volatile
 12407                           
 12408                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 12409  11A4  018E               	clrf	14	;volatile
 12410                           
 12411                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x03;
 12412  11A5  3003               	movlw	3
 12413  11A6  0021               	movlb	1	; select bank1
 12414  11A7  008C               	movwf	12	;volatile
 12415                           
 12416                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x70;
 12417  11A8  3070               	movlw	112
 12418  11A9  008D               	movwf	13	;volatile
 12419                           
 12420                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xDF;
 12421  11AA  30DF               	movlw	223
 12422  11AB  008E               	movwf	14	;volatile
 12423                           
 12424                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x4F;
 12425  11AC  304F               	movlw	79
 12426  11AD  0023               	movlb	3	; select bank3
 12427  11AE  008E               	movwf	14	;volatile
 12428                           
 12429                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x80;
 12430  11AF  3080               	movlw	128
 12431  11B0  008D               	movwf	13	;volatile
 12432                           
 12433                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x03;
 12434  11B1  3003               	movlw	3
 12435  11B2  008C               	movwf	12	;volatile
 12436                           
 12437                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 12438  11B3  0024               	movlb	4	; select bank4
 12439  11B4  018D               	clrf	13	;volatile
 12440                           
 12441                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 12442  11B5  018C               	clrf	12	;volatile
 12443                           
 12444                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
 12445  11B6  018E               	clrf	14	;volatile
 12446                           
 12447                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 1;
 12448  11B7  0021               	movlb	1	; select bank1
 12449  11B8  1795               	bsf	21,7	;volatile
 12450                           
 12451                           ;mcc_generated_files/pin_manager.c: 91:     ODCONA = 0x00;
 12452  11B9  0025               	movlb	5	; select bank5
 12453  11BA  018C               	clrf	12	;volatile
 12454                           
 12455                           ;mcc_generated_files/pin_manager.c: 92:     ODCONB = 0x00;
 12456  11BB  018D               	clrf	13	;volatile
 12457                           
 12458                           ;mcc_generated_files/pin_manager.c: 93:     ODCONC = 0x00;
 12459  11BC  018E               	clrf	14	;volatile
 12460                           
 12461                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONA = 0x37;
 12462  11BD  3037               	movlw	55
 12463  11BE  0026               	movlb	6	; select bank6
 12464  11BF  008C               	movwf	12	;volatile
 12465                           
 12466                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONB = 0xF0;
 12467  11C0  30F0               	movlw	240
 12468  11C1  008D               	movwf	13	;volatile
 12469                           
 12470                           ;mcc_generated_files/pin_manager.c: 100:     SLRCONC = 0xFF;
 12471  11C2  30FF               	movlw	255
 12472  11C3  008E               	movwf	14	;volatile
 12473                           
 12474                           ;mcc_generated_files/pin_manager.c: 109:     RXPPS = 0x0D;
 12475  11C4  300D               	movlw	13
 12476  11C5  003C               	movlb	28	; select bank28
 12477  11C6  00A4               	movwf	36	;volatile
 12478                           
 12479                           ;mcc_generated_files/pin_manager.c: 110:     SSPDATPPS = 0x0C;
 12480  11C7  300C               	movlw	12
 12481  11C8  00A1               	movwf	33	;volatile
 12482                           
 12483                           ;mcc_generated_files/pin_manager.c: 111:     RB6PPS = 0x10;
 12484  11C9  3010               	movlw	16
 12485  11CA  003D               	movlb	29	; select bank29
 12486  11CB  009E               	movwf	30	;volatile
 12487                           
 12488                           ;mcc_generated_files/pin_manager.c: 112:     RB7PPS = 0x12;
 12489  11CC  3012               	movlw	18
 12490  11CD  009F               	movwf	31	;volatile
 12491                           
 12492                           ;mcc_generated_files/pin_manager.c: 113:     RB4PPS = 0x11;
 12493  11CE  3011               	movlw	17
 12494  11CF  009C               	movwf	28	;volatile
 12495                           
 12496                           ;mcc_generated_files/pin_manager.c: 114:     SSPCLKPPS = 0x0E;
 12497  11D0  300E               	movlw	14
 12498  11D1  003C               	movlb	28	; select bank28
 12499  11D2  00A0               	movwf	32	;volatile
 12500  11D3  0008               	return
 12501  11D4                     __end_of_PIN_MANAGER_Initialize:	
 12502                           
 12503                           	psect	text39
 12504  0801                     __ptext39:	
 12505 ;; *************** function _OSCILLATOR_Initialize *****************
 12506 ;; Defined at:
 12507 ;;		line 59 in file "mcc_generated_files/mcc.c"
 12508 ;; Parameters:    Size  Location     Type
 12509 ;;		None
 12510 ;; Auto vars:     Size  Location     Type
 12511 ;;		None
 12512 ;; Return value:  Size  Location     Type
 12513 ;;                  1    wreg      void 
 12514 ;; Registers used:
 12515 ;;		wreg, status,2
 12516 ;; Tracked objects:
 12517 ;;		On entry : B1F/1C
 12518 ;;		On exit  : B1F/2
 12519 ;;		Unchanged: B00/0
 12520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;Total ram usage:        0 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; Hardware stack levels required when called:    3
 12528 ;; This function calls:
 12529 ;;		Nothing
 12530 ;; This function is called by:
 12531 ;;		_SYSTEM_Initialize
 12532 ;; This function uses a non-reentrant model
 12533 ;;
 12534                           
 12535                           
 12536                           ;psect for function _OSCILLATOR_Initialize
 12537  0801                     _OSCILLATOR_Initialize:	
 12538                           
 12539                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x68;
 12540                           
 12541                           ;incstack = 0
 12542                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12543  0801  3068               	movlw	104
 12544  0802  0021               	movlb	1	; select bank1
 12545  0803  0099               	movwf	25	;volatile
 12546                           
 12547                           ;mcc_generated_files/mcc.c: 64:     OSCTUNE = 0x00;
 12548  0804  0198               	clrf	24	;volatile
 12549                           
 12550                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
 12551  0805  0022               	movlb	2	; select bank2
 12552  0806  0196               	clrf	22	;volatile
 12553  0807  0008               	return
 12554  0808                     __end_of_OSCILLATOR_Initialize:	
 12555                           
 12556                           	psect	text40
 12557  1F58                     __ptext40:	
 12558 ;; *************** function _I2C_Initialize *****************
 12559 ;; Defined at:
 12560 ;;		line 198 in file "mcc_generated_files/i2c.c"
 12561 ;; Parameters:    Size  Location     Type
 12562 ;;		None
 12563 ;; Auto vars:     Size  Location     Type
 12564 ;;		None
 12565 ;; Return value:  Size  Location     Type
 12566 ;;                  1    wreg      void 
 12567 ;; Registers used:
 12568 ;;		wreg, status,2
 12569 ;; Tracked objects:
 12570 ;;		On entry : B1F/2
 12571 ;;		On exit  : B1F/1
 12572 ;;		Unchanged: B00/0
 12573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12578 ;;Total ram usage:        0 bytes
 12579 ;; Hardware stack levels used:    1
 12580 ;; Hardware stack levels required when called:    3
 12581 ;; This function calls:
 12582 ;;		Nothing
 12583 ;; This function is called by:
 12584 ;;		_SYSTEM_Initialize
 12585 ;; This function uses a non-reentrant model
 12586 ;;
 12587                           
 12588                           
 12589                           ;psect for function _I2C_Initialize
 12590  1F58                     _I2C_Initialize:	
 12591                           
 12592                           ;mcc_generated_files/i2c.c: 200:     i2c_object.pTrHead = i2c_tr_queue;
 12593                           
 12594                           ;incstack = 0
 12595                           ; Regs used in _I2C_Initialize: [wreg+status,2]
 12596  1F58  30DF               	movlw	low _i2c_tr_queue
 12597  1F59  0023               	movlb	3	; select bank3
 12598  1F5A  00BD               	movwf	(_i2c_object^(0+384)+2)
 12599  1F5B  3001               	movlw	high _i2c_tr_queue
 12600  1F5C  00BE               	movwf	(_i2c_object^(0+384)+3)
 12601                           
 12602                           ;mcc_generated_files/i2c.c: 201:     i2c_object.pTrTail = i2c_tr_queue;
 12603  1F5D  30DF               	movlw	low _i2c_tr_queue
 12604  1F5E  00BB               	movwf	_i2c_object^(0+384)
 12605  1F5F  3001               	movlw	high _i2c_tr_queue
 12606  1F60  00BC               	movwf	(_i2c_object^(0+384)+1)
 12607                           
 12608                           ;mcc_generated_files/i2c.c: 202:     i2c_object.trStatus.s.empty = 1;
 12609  1F61  14BF               	bsf	(_i2c_object^(0+384)+4),1
 12610                           
 12611                           ;mcc_generated_files/i2c.c: 203:     i2c_object.trStatus.s.full = 0;
 12612  1F62  103F               	bcf	(_i2c_object^(0+384)+4),0
 12613                           
 12614                           ;mcc_generated_files/i2c.c: 205:     i2c_object.i2cErrors = 0;
 12615  1F63  01C1               	clrf	(_i2c_object^(0+384)+6)
 12616                           
 12617                           ;mcc_generated_files/i2c.c: 208:     SSP1STAT = 0x00;
 12618  1F64  0024               	movlb	4	; select bank4
 12619  1F65  0194               	clrf	20	;volatile
 12620                           
 12621                           ;mcc_generated_files/i2c.c: 210:     SSP1CON1 = 0x28;
 12622  1F66  3028               	movlw	40
 12623  1F67  0095               	movwf	21	;volatile
 12624                           
 12625                           ;mcc_generated_files/i2c.c: 212:     SSP1CON3 = 0x00;
 12626  1F68  0197               	clrf	23	;volatile
 12627                           
 12628                           ;mcc_generated_files/i2c.c: 214:     SSP1ADD = 0x03;
 12629  1F69  3003               	movlw	3
 12630  1F6A  0092               	movwf	18	;volatile
 12631                           
 12632                           ;mcc_generated_files/i2c.c: 217:     PIR1bits.SSP1IF = 0;
 12633  1F6B  0020               	movlb	0	; select bank0
 12634  1F6C  1190               	bcf	16,3	;volatile
 12635                           
 12636                           ;mcc_generated_files/i2c.c: 218:     PIR2bits.BCL1IF = 0;
 12637  1F6D  1191               	bcf	17,3	;volatile
 12638                           
 12639                           ;mcc_generated_files/i2c.c: 221:     PIE1bits.SSP1IE = 1;
 12640  1F6E  0021               	movlb	1	; select bank1
 12641  1F6F  1590               	bsf	16,3	;volatile
 12642                           
 12643                           ;mcc_generated_files/i2c.c: 222:     PIE2bits.BCL1IE = 1;
 12644  1F70  1591               	bsf	17,3	;volatile
 12645  1F71  0008               	return
 12646  1F72                     __end_of_I2C_Initialize:	
 12647                           
 12648                           	psect	text41
 12649  1EB4                     __ptext41:	
 12650 ;; *************** function _EUSART_Initialize *****************
 12651 ;; Defined at:
 12652 ;;		line 56 in file "mcc_generated_files/eusart.c"
 12653 ;; Parameters:    Size  Location     Type
 12654 ;;		None
 12655 ;; Auto vars:     Size  Location     Type
 12656 ;;		None
 12657 ;; Return value:  Size  Location     Type
 12658 ;;                  1    wreg      void 
 12659 ;; Registers used:
 12660 ;;		wreg, status,2
 12661 ;; Tracked objects:
 12662 ;;		On entry : 1F/3
 12663 ;;		On exit  : 1F/3
 12664 ;;		Unchanged: 0/0
 12665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;Total ram usage:        0 bytes
 12671 ;; Hardware stack levels used:    1
 12672 ;; Hardware stack levels required when called:    3
 12673 ;; This function calls:
 12674 ;;		Nothing
 12675 ;; This function is called by:
 12676 ;;		_SYSTEM_Initialize
 12677 ;; This function uses a non-reentrant model
 12678 ;;
 12679                           
 12680                           
 12681                           ;psect for function _EUSART_Initialize
 12682  1EB4                     _EUSART_Initialize:	
 12683                           
 12684                           ;mcc_generated_files/eusart.c: 61:     BAUD1CON = 0x08;
 12685                           
 12686                           ;incstack = 0
 12687                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 12688  1EB4  3008               	movlw	8
 12689  1EB5  009F               	movwf	31	;volatile
 12690                           
 12691                           ;mcc_generated_files/eusart.c: 64:     RC1STA = 0x90;
 12692  1EB6  3090               	movlw	144
 12693  1EB7  009D               	movwf	29	;volatile
 12694                           
 12695                           ;mcc_generated_files/eusart.c: 67:     TX1STA = 0x24;
 12696  1EB8  3024               	movlw	36
 12697  1EB9  009E               	movwf	30	;volatile
 12698                           
 12699                           ;mcc_generated_files/eusart.c: 70:     SPBRGL = 0x67;
 12700  1EBA  3067               	movlw	103
 12701  1EBB  009B               	movwf	27	;volatile
 12702                           
 12703                           ;mcc_generated_files/eusart.c: 73:     SPBRGH = 0x00;
 12704  1EBC  019C               	clrf	28	;volatile
 12705  1EBD  0008               	return
 12706  1EBE                     __end_of_EUSART_Initialize:	
 12707                           
 12708                           	psect	text42
 12709  1698                     __ptext42:	
 12710 ;; *************** function _IntToString *****************
 12711 ;; Defined at:
 12712 ;;		line 165 in file "main.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;  n               2   19[BANK0 ] int 
 12715 ;;  dest            2   21[BANK0 ] PTR unsigned char 
 12716 ;;		 -> main@convertedNumber(16), GetNavData@strId(12), 
 12717 ;; Auto vars:     Size  Location     Type
 12718 ;;  i               2   27[BANK0 ] int 
 12719 ;;  sign            1   26[BANK0 ] _Bool 
 12720 ;; Return value:  Size  Location     Type
 12721 ;;                  1    wreg      void 
 12722 ;; Registers used:
 12723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12724 ;; Tracked objects:
 12725 ;;		On entry : 1F/0
 12726 ;;		On exit  : 1F/0
 12727 ;;		Unchanged: 0/0
 12728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12733 ;;Total ram usage:       10 bytes
 12734 ;; Hardware stack levels used:    1
 12735 ;; Hardware stack levels required when called:    5
 12736 ;; This function calls:
 12737 ;;		_ReverseString
 12738 ;;		___awdiv
 12739 ;;		___awmod
 12740 ;; This function is called by:
 12741 ;;		_main
 12742 ;; This function uses a non-reentrant model
 12743 ;;
 12744                           
 12745                           
 12746                           ;psect for function _IntToString
 12747  1698                     _IntToString:	
 12748                           
 12749                           ;main.c: 165: void IntToString(int n, char* dest);main.c: 166: {;main.c: 167:     int i 
      +                          = 0;
 12750                           
 12751                           ;incstack = 0
 12752                           ; Regs used in _IntToString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12753  1698  01BB               	clrf	IntToString@i
 12754  1699  01BC               	clrf	IntToString@i+1
 12755                           
 12756                           ;main.c: 168:     _Bool sign = n < 0;
 12757  169A  1FB4               	btfss	IntToString@n+1,7
 12758  169B  2E9E               	goto	u3610
 12759  169C  3001               	movlw	1
 12760  169D  2E9F               	goto	u3620
 12761  169E                     u3610:	
 12762  169E  3000               	movlw	0
 12763  169F                     u3620:	
 12764  169F  00B7               	movwf	??_IntToString
 12765  16A0  0837               	movf	??_IntToString,w
 12766  16A1  00BA               	movwf	IntToString@sign
 12767                           
 12768                           ;main.c: 169:     if (sign)
 12769  16A2  083A               	movf	IntToString@sign,w
 12770  16A3  1903               	btfsc	3,2
 12771  16A4  2EAA               	goto	l3979
 12772                           
 12773                           ;main.c: 170:     {;main.c: 172:         n = -n;
 12774  16A5  09B3               	comf	IntToString@n,f
 12775  16A6  09B4               	comf	IntToString@n+1,f
 12776  16A7  0AB3               	incf	IntToString@n,f
 12777  16A8  1903               	skipnz
 12778  16A9  0AB4               	incf	IntToString@n+1,f
 12779  16AA                     l3979:	
 12780                           
 12781                           ;main.c: 178:         dest[i++] = n % 10 + '0';
 12782  16AA  300A               	movlw	10
 12783  16AB  00F4               	movwf	___awmod@divisor
 12784  16AC  3000               	movlw	0
 12785  16AD  00F5               	movwf	___awmod@divisor+1
 12786  16AE  0020               	movlb	0	; select bank0
 12787  16AF  0834               	movf	IntToString@n+1,w
 12788  16B0  00F7               	movwf	___awmod@dividend+1
 12789  16B1  0833               	movf	IntToString@n,w
 12790  16B2  00F6               	movwf	___awmod@dividend
 12791  16B3  3192  22CE  3196   	fcall	___awmod
 12792  16B6  0874               	movf	?___awmod,w
 12793  16B7  3E30               	addlw	48
 12794  16B8  00B7               	movwf	??_IntToString
 12795  16B9  083B               	movf	IntToString@i,w
 12796  16BA  0735               	addwf	IntToString@dest,w
 12797  16BB  00B8               	movwf	??_IntToString+1
 12798  16BC  083C               	movf	IntToString@i+1,w
 12799  16BD  3D36               	addwfc	IntToString@dest+1,w
 12800  16BE  00B9               	movwf	??_IntToString+2
 12801  16BF  0838               	movf	??_IntToString+1,w
 12802  16C0  0086               	movwf	6
 12803  16C1  0839               	movf	??_IntToString+2,w
 12804  16C2  0087               	movwf	7
 12805  16C3  0837               	movf	??_IntToString,w
 12806  16C4  0081               	movwf	1
 12807  16C5  3001               	movlw	1
 12808  16C6  07BB               	addwf	IntToString@i,f
 12809  16C7  3000               	movlw	0
 12810  16C8  3DBC               	addwfc	IntToString@i+1,f
 12811                           
 12812                           ;main.c: 180:     } while ((n /= 10) > 0);
 12813  16C9  300A               	movlw	10
 12814  16CA  00F4               	movwf	___awdiv@divisor
 12815  16CB  3000               	movlw	0
 12816  16CC  00F5               	movwf	___awdiv@divisor+1
 12817  16CD  0834               	movf	IntToString@n+1,w
 12818  16CE  00F7               	movwf	___awdiv@dividend+1
 12819  16CF  0833               	movf	IntToString@n,w
 12820  16D0  00F6               	movwf	___awdiv@dividend
 12821  16D1  3193  23AB  3196   	fcall	___awdiv
 12822  16D4  0875               	movf	?___awdiv+1,w
 12823  16D5  00B4               	movwf	IntToString@n+1
 12824  16D6  0874               	movf	?___awdiv,w
 12825  16D7  00B3               	movwf	IntToString@n
 12826  16D8  0834               	movf	IntToString@n+1,w
 12827  16D9  3A80               	xorlw	128
 12828  16DA  00B7               	movwf	??_IntToString
 12829  16DB  3080               	movlw	128
 12830  16DC  0237               	subwf	??_IntToString,w
 12831  16DD  1D03               	skipz
 12832  16DE  2EE1               	goto	u3645
 12833  16DF  3001               	movlw	1
 12834  16E0  0233               	subwf	IntToString@n,w
 12835  16E1                     u3645:	
 12836  16E1  1803               	skipnc
 12837  16E2  2EAA               	goto	l3979
 12838                           
 12839                           ;main.c: 181:     if (sign)
 12840  16E3  0020               	movlb	0	; select bank0
 12841  16E4  083A               	movf	IntToString@sign,w
 12842  16E5  1903               	btfsc	3,2
 12843  16E6  2EF7               	goto	l3991
 12844                           
 12845                           ;main.c: 182:     {;main.c: 183:         dest[i++] = '-';
 12846  16E7  083B               	movf	IntToString@i,w
 12847  16E8  0735               	addwf	IntToString@dest,w
 12848  16E9  00B7               	movwf	??_IntToString
 12849  16EA  083C               	movf	IntToString@i+1,w
 12850  16EB  3D36               	addwfc	IntToString@dest+1,w
 12851  16EC  00B8               	movwf	??_IntToString+1
 12852  16ED  0837               	movf	??_IntToString,w
 12853  16EE  0086               	movwf	6
 12854  16EF  0838               	movf	??_IntToString+1,w
 12855  16F0  0087               	movwf	7
 12856  16F1  302D               	movlw	45
 12857  16F2  0081               	movwf	1
 12858  16F3  3001               	movlw	1
 12859  16F4  07BB               	addwf	IntToString@i,f
 12860  16F5  3000               	movlw	0
 12861  16F6  3DBC               	addwfc	IntToString@i+1,f
 12862  16F7                     l3991:	
 12863                           
 12864                           ;main.c: 185:     dest[i] = '\0';
 12865  16F7  083B               	movf	IntToString@i,w
 12866  16F8  0735               	addwf	IntToString@dest,w
 12867  16F9  0086               	movwf	6
 12868  16FA  083C               	movf	IntToString@i+1,w
 12869  16FB  3D36               	addwfc	IntToString@dest+1,w
 12870  16FC  0087               	movwf	7
 12871  16FD  0181               	clrf	1
 12872                           
 12873                           ;main.c: 187:     ReverseString(dest);
 12874  16FE  0836               	movf	IntToString@dest+1,w
 12875  16FF  00A5               	movwf	ReverseString@str+1
 12876  1700  0835               	movf	IntToString@dest,w
 12877  1701  00A4               	movwf	ReverseString@str
 12878  1702  3196  262C         	fcall	_ReverseString
 12879  1704  0008               	return
 12880  1705                     __end_of_IntToString:	
 12881                           
 12882                           	psect	text43
 12883  12CE                     __ptext43:	
 12884 ;; *************** function ___awmod *****************
 12885 ;; Defined at:
 12886 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
 12887 ;; Parameters:    Size  Location     Type
 12888 ;;  divisor         2    4[COMMON] int 
 12889 ;;  dividend        2    6[COMMON] int 
 12890 ;; Auto vars:     Size  Location     Type
 12891 ;;  sign            1    1[BANK0 ] unsigned char 
 12892 ;;  counter         1    0[BANK0 ] unsigned char 
 12893 ;; Return value:  Size  Location     Type
 12894 ;;                  2    4[COMMON] int 
 12895 ;; Registers used:
 12896 ;;		wreg, status,2, status,0
 12897 ;; Tracked objects:
 12898 ;;		On entry : 1F/0
 12899 ;;		On exit  : 1F/0
 12900 ;;		Unchanged: 0/0
 12901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12903 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12906 ;;Total ram usage:        7 bytes
 12907 ;; Hardware stack levels used:    1
 12908 ;; Hardware stack levels required when called:    3
 12909 ;; This function calls:
 12910 ;;		Nothing
 12911 ;; This function is called by:
 12912 ;;		_IntToString
 12913 ;; This function uses a non-reentrant model
 12914 ;;
 12915                           
 12916                           
 12917                           ;psect for function ___awmod
 12918  12CE                     ___awmod:	
 12919                           
 12920                           ;incstack = 0
 12921                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12922  12CE  01A1               	clrf	___awmod@sign
 12923  12CF  1FF7               	btfss	___awmod@dividend+1,7
 12924  12D0  2AD8               	goto	l3451
 12925  12D1  09F6               	comf	___awmod@dividend,f
 12926  12D2  09F7               	comf	___awmod@dividend+1,f
 12927  12D3  0AF6               	incf	___awmod@dividend,f
 12928  12D4  1903               	skipnz
 12929  12D5  0AF7               	incf	___awmod@dividend+1,f
 12930  12D6  01A1               	clrf	___awmod@sign
 12931  12D7  0AA1               	incf	___awmod@sign,f
 12932  12D8                     l3451:	
 12933  12D8  1FF5               	btfss	___awmod@divisor+1,7
 12934  12D9  2ADF               	goto	l3455
 12935  12DA  09F4               	comf	___awmod@divisor,f
 12936  12DB  09F5               	comf	___awmod@divisor+1,f
 12937  12DC  0AF4               	incf	___awmod@divisor,f
 12938  12DD  1903               	skipnz
 12939  12DE  0AF5               	incf	___awmod@divisor+1,f
 12940  12DF                     l3455:	
 12941  12DF  0874               	movf	___awmod@divisor,w
 12942  12E0  0475               	iorwf	___awmod@divisor+1,w
 12943  12E1  1903               	btfsc	3,2
 12944  12E2  2B06               	goto	l3473
 12945  12E3  01A0               	clrf	___awmod@counter
 12946  12E4  0AA0               	incf	___awmod@counter,f
 12947  12E5                     l3463:	
 12948  12E5  1BF5               	btfsc	___awmod@divisor+1,7
 12949  12E6  2AF1               	goto	l3465
 12950  12E7  3001               	movlw	1
 12951  12E8                     u3005:	
 12952  12E8  35F4               	lslf	___awmod@divisor,f
 12953  12E9  0DF5               	rlf	___awmod@divisor+1,f
 12954  12EA  0B89               	decfsz	9,f
 12955  12EB  2AE8               	goto	u3005
 12956  12EC  3001               	movlw	1
 12957  12ED  00F8               	movwf	??___awmod
 12958  12EE  0878               	movf	??___awmod,w
 12959  12EF  07A0               	addwf	___awmod@counter,f
 12960  12F0  2AE5               	goto	l3463
 12961  12F1                     l3465:	
 12962  12F1  0875               	movf	___awmod@divisor+1,w
 12963  12F2  0277               	subwf	___awmod@dividend+1,w
 12964  12F3  1D03               	skipz
 12965  12F4  2AF7               	goto	u3025
 12966  12F5  0874               	movf	___awmod@divisor,w
 12967  12F6  0276               	subwf	___awmod@dividend,w
 12968  12F7                     u3025:	
 12969  12F7  1C03               	skipc
 12970  12F8  2AFD               	goto	l3469
 12971  12F9  0874               	movf	___awmod@divisor,w
 12972  12FA  02F6               	subwf	___awmod@dividend,f
 12973  12FB  0875               	movf	___awmod@divisor+1,w
 12974  12FC  3BF7               	subwfb	___awmod@dividend+1,f
 12975  12FD                     l3469:	
 12976  12FD  3001               	movlw	1
 12977  12FE                     u3035:	
 12978  12FE  36F5               	lsrf	___awmod@divisor+1,f
 12979  12FF  0CF4               	rrf	___awmod@divisor,f
 12980  1300  0B89               	decfsz	9,f
 12981  1301  2AFE               	goto	u3035
 12982  1302  3001               	movlw	1
 12983  1303  02A0               	subwf	___awmod@counter,f
 12984  1304  1D03               	btfss	3,2
 12985  1305  2AF1               	goto	l3465
 12986  1306                     l3473:	
 12987  1306  0821               	movf	___awmod@sign,w
 12988  1307  1903               	btfsc	3,2
 12989  1308  2B0E               	goto	l3477
 12990  1309  09F6               	comf	___awmod@dividend,f
 12991  130A  09F7               	comf	___awmod@dividend+1,f
 12992  130B  0AF6               	incf	___awmod@dividend,f
 12993  130C  1903               	skipnz
 12994  130D  0AF7               	incf	___awmod@dividend+1,f
 12995  130E                     l3477:	
 12996  130E  0877               	movf	___awmod@dividend+1,w
 12997  130F  00F5               	movwf	?___awmod+1
 12998  1310  0876               	movf	___awmod@dividend,w
 12999  1311  00F4               	movwf	?___awmod
 13000  1312  0008               	return
 13001  1313                     __end_of___awmod:	
 13002                           
 13003                           	psect	text44
 13004  162C                     __ptext44:	
 13005 ;; *************** function _ReverseString *****************
 13006 ;; Defined at:
 13007 ;;		line 110 in file "main.c"
 13008 ;; Parameters:    Size  Location     Type
 13009 ;;  str             2    4[BANK0 ] PTR unsigned char 
 13010 ;;		 -> checksum(6), main@convertedNumber(16), GetNavData@strId(12), 
 13011 ;; Auto vars:     Size  Location     Type
 13012 ;;  opposite        2   13[BANK0 ] PTR unsigned char 
 13013 ;;		 -> checksum(6), main@convertedNumber(16), GetNavData@strId(12), 
 13014 ;;  temp            1   12[BANK0 ] unsigned char 
 13015 ;;  i               2   17[BANK0 ] int 
 13016 ;;  halfway         2   10[BANK0 ] int 
 13017 ;;  counti          2   15[BANK0 ] int 
 13018 ;; Return value:  Size  Location     Type
 13019 ;;                  1    wreg      void 
 13020 ;; Registers used:
 13021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13022 ;; Tracked objects:
 13023 ;;		On entry : 1F/0
 13024 ;;		On exit  : 1F/0
 13025 ;;		Unchanged: 0/0
 13026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13027 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13031 ;;Total ram usage:       15 bytes
 13032 ;; Hardware stack levels used:    1
 13033 ;; Hardware stack levels required when called:    4
 13034 ;; This function calls:
 13035 ;;		___awdiv
 13036 ;;		_strlen
 13037 ;; This function is called by:
 13038 ;;		_UIntToHexString
 13039 ;;		_IntToString
 13040 ;; This function uses a non-reentrant model
 13041 ;;
 13042                           
 13043                           
 13044                           ;psect for function _ReverseString
 13045  162C                     _ReverseString:	
 13046                           
 13047                           ;main.c: 110: void ReverseString(char* str);main.c: 111: {;main.c: 112:     int counti =
      +                           strlen(str);
 13048                           
 13049                           ;incstack = 0
 13050                           ; Regs used in _ReverseString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13051  162C  0825               	movf	ReverseString@str+1,w
 13052  162D  00F5               	movwf	strlen@s+1
 13053  162E  0824               	movf	ReverseString@str,w
 13054  162F  00F4               	movwf	strlen@s
 13055  1630  319F  270F  3196   	fcall	_strlen
 13056  1633  0875               	movf	?_strlen+1,w
 13057  1634  0020               	movlb	0	; select bank0
 13058  1635  00B0               	movwf	ReverseString@counti+1
 13059  1636  0874               	movf	?_strlen,w
 13060  1637  00AF               	movwf	ReverseString@counti
 13061                           
 13062                           ;main.c: 113:     for (int i = 0, halfway = counti / 2; i < halfway; i++)
 13063  1638  01B1               	clrf	ReverseString@i
 13064  1639  01B2               	clrf	ReverseString@i+1
 13065  163A  3002               	movlw	2
 13066  163B  00F4               	movwf	___awdiv@divisor
 13067  163C  3000               	movlw	0
 13068  163D  00F5               	movwf	___awdiv@divisor+1
 13069  163E  0830               	movf	ReverseString@counti+1,w
 13070  163F  00F7               	movwf	___awdiv@dividend+1
 13071  1640  082F               	movf	ReverseString@counti,w
 13072  1641  00F6               	movwf	___awdiv@dividend
 13073  1642  3193  23AB  3196   	fcall	___awdiv
 13074  1645  0875               	movf	?___awdiv+1,w
 13075  1646  00AB               	movwf	ReverseString@halfway+1
 13076  1647  0874               	movf	?___awdiv,w
 13077  1648  00AA               	movwf	ReverseString@halfway
 13078  1649                     l3935:	
 13079  1649  0832               	movf	ReverseString@i+1,w
 13080  164A  3A80               	xorlw	128
 13081  164B  00A6               	movwf	??_ReverseString
 13082  164C  082B               	movf	ReverseString@halfway+1,w
 13083  164D  3A80               	xorlw	128
 13084  164E  0226               	subwf	??_ReverseString,w
 13085  164F  1D03               	skipz
 13086  1650  2E53               	goto	u3555
 13087  1651  082A               	movf	ReverseString@halfway,w
 13088  1652  0231               	subwf	ReverseString@i,w
 13089  1653                     u3555:	
 13090  1653  1803               	btfsc	3,0
 13091  1654  2E8F               	goto	l3937
 13092                           
 13093                           ;main.c: 114:     {;main.c: 115:         char temp = str[i];
 13094  1655  0020               	movlb	0	; select bank0
 13095  1656  0831               	movf	ReverseString@i,w
 13096  1657  0724               	addwf	ReverseString@str,w
 13097  1658  0086               	movwf	6
 13098  1659  0832               	movf	ReverseString@i+1,w
 13099  165A  3D25               	addwfc	ReverseString@str+1,w
 13100  165B  0087               	movwf	7
 13101  165C  0801               	movf	1,w
 13102  165D  00A6               	movwf	??_ReverseString
 13103  165E  0826               	movf	??_ReverseString,w
 13104  165F  00AC               	movwf	ReverseString@temp
 13105                           
 13106                           ;main.c: 116:         char* opposite = str + (counti - 1 - i);
 13107  1660  0831               	movf	ReverseString@i,w
 13108  1661  0224               	subwf	ReverseString@str,w
 13109  1662  00A6               	movwf	??_ReverseString
 13110  1663  0832               	movf	ReverseString@i+1,w
 13111  1664  3B25               	subwfb	ReverseString@str+1,w
 13112  1665  00A7               	movwf	??_ReverseString+1
 13113  1666  082F               	movf	ReverseString@counti,w
 13114  1667  0726               	addwf	??_ReverseString,w
 13115  1668  00A8               	movwf	??_ReverseString+2
 13116  1669  0830               	movf	ReverseString@counti+1,w
 13117  166A  3D27               	addwfc	??_ReverseString+1,w
 13118  166B  00A9               	movwf	??_ReverseString+3
 13119  166C  0828               	movf	??_ReverseString+2,w
 13120  166D  3EFF               	addlw	255
 13121  166E  00AD               	movwf	ReverseString@opposite
 13122  166F  30FF               	movlw	255
 13123  1670  3D29               	addwfc	??_ReverseString+3,w
 13124  1671  00AE               	movwf	ReverseString@opposite+1
 13125                           
 13126                           ;main.c: 117:         str[i] = *opposite;
 13127  1672  082D               	movf	ReverseString@opposite,w
 13128  1673  0086               	movwf	6
 13129  1674  082E               	movf	ReverseString@opposite+1,w
 13130  1675  0087               	movwf	7
 13131  1676  0801               	movf	1,w
 13132  1677  00A6               	movwf	??_ReverseString
 13133  1678  0831               	movf	ReverseString@i,w
 13134  1679  0724               	addwf	ReverseString@str,w
 13135  167A  00A7               	movwf	??_ReverseString+1
 13136  167B  0832               	movf	ReverseString@i+1,w
 13137  167C  3D25               	addwfc	ReverseString@str+1,w
 13138  167D  00A8               	movwf	??_ReverseString+2
 13139  167E  0827               	movf	??_ReverseString+1,w
 13140  167F  0086               	movwf	6
 13141  1680  0828               	movf	??_ReverseString+2,w
 13142  1681  0087               	movwf	7
 13143  1682  0826               	movf	??_ReverseString,w
 13144  1683  0081               	movwf	1
 13145                           
 13146                           ;main.c: 118:         *opposite = temp;
 13147  1684  082D               	movf	ReverseString@opposite,w
 13148  1685  0086               	movwf	6
 13149  1686  082E               	movf	ReverseString@opposite+1,w
 13150  1687  0087               	movwf	7
 13151  1688  082C               	movf	ReverseString@temp,w
 13152  1689  0081               	movwf	1
 13153                           
 13154                           ;main.c: 119:     }
 13155  168A  3001               	movlw	1
 13156  168B  07B1               	addwf	ReverseString@i,f
 13157  168C  3000               	movlw	0
 13158  168D  3DB2               	addwfc	ReverseString@i+1,f
 13159  168E  2E49               	goto	l3935
 13160  168F                     l3937:	
 13161                           
 13162                           ;main.c: 120:     str[counti] = '\0';
 13163  168F  0020               	movlb	0	; select bank0
 13164  1690  082F               	movf	ReverseString@counti,w
 13165  1691  0724               	addwf	ReverseString@str,w
 13166  1692  0086               	movwf	6
 13167  1693  0830               	movf	ReverseString@counti+1,w
 13168  1694  3D25               	addwfc	ReverseString@str+1,w
 13169  1695  0087               	movwf	7
 13170  1696  0181               	clrf	1
 13171  1697  0008               	return
 13172  1698                     __end_of_ReverseString:	
 13173                           
 13174                           	psect	text45
 13175  13AB                     __ptext45:	
 13176 ;; *************** function ___awdiv *****************
 13177 ;; Defined at:
 13178 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
 13179 ;; Parameters:    Size  Location     Type
 13180 ;;  divisor         2    4[COMMON] int 
 13181 ;;  dividend        2    6[COMMON] int 
 13182 ;; Auto vars:     Size  Location     Type
 13183 ;;  quotient        2    2[BANK0 ] int 
 13184 ;;  sign            1    1[BANK0 ] unsigned char 
 13185 ;;  counter         1    0[BANK0 ] unsigned char 
 13186 ;; Return value:  Size  Location     Type
 13187 ;;                  2    4[COMMON] int 
 13188 ;; Registers used:
 13189 ;;		wreg, status,2, status,0
 13190 ;; Tracked objects:
 13191 ;;		On entry : 1F/0
 13192 ;;		On exit  : 1F/0
 13193 ;;		Unchanged: 0/0
 13194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;Total ram usage:        9 bytes
 13200 ;; Hardware stack levels used:    1
 13201 ;; Hardware stack levels required when called:    3
 13202 ;; This function calls:
 13203 ;;		Nothing
 13204 ;; This function is called by:
 13205 ;;		_ReverseString
 13206 ;;		_IntToString
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           
 13211                           ;psect for function ___awdiv
 13212  13AB                     ___awdiv:	
 13213                           
 13214                           ;incstack = 0
 13215                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13216  13AB  01A1               	clrf	___awdiv@sign
 13217  13AC  1FF5               	btfss	___awdiv@divisor+1,7
 13218  13AD  2BB5               	goto	l3159
 13219  13AE  09F4               	comf	___awdiv@divisor,f
 13220  13AF  09F5               	comf	___awdiv@divisor+1,f
 13221  13B0  0AF4               	incf	___awdiv@divisor,f
 13222  13B1  1903               	skipnz
 13223  13B2  0AF5               	incf	___awdiv@divisor+1,f
 13224  13B3  01A1               	clrf	___awdiv@sign
 13225  13B4  0AA1               	incf	___awdiv@sign,f
 13226  13B5                     l3159:	
 13227  13B5  1FF7               	btfss	___awdiv@dividend+1,7
 13228  13B6  2BC0               	goto	l3165
 13229  13B7  09F6               	comf	___awdiv@dividend,f
 13230  13B8  09F7               	comf	___awdiv@dividend+1,f
 13231  13B9  0AF6               	incf	___awdiv@dividend,f
 13232  13BA  1903               	skipnz
 13233  13BB  0AF7               	incf	___awdiv@dividend+1,f
 13234  13BC  3001               	movlw	1
 13235  13BD  00F8               	movwf	??___awdiv
 13236  13BE  0878               	movf	??___awdiv,w
 13237  13BF  06A1               	xorwf	___awdiv@sign,f
 13238  13C0                     l3165:	
 13239  13C0  01A2               	clrf	___awdiv@quotient
 13240  13C1  01A3               	clrf	___awdiv@quotient+1
 13241  13C2  0874               	movf	___awdiv@divisor,w
 13242  13C3  0475               	iorwf	___awdiv@divisor+1,w
 13243  13C4  1903               	btfsc	3,2
 13244  13C5  2BEF               	goto	l3187
 13245  13C6  01A0               	clrf	___awdiv@counter
 13246  13C7  0AA0               	incf	___awdiv@counter,f
 13247  13C8                     l3175:	
 13248  13C8  1BF5               	btfsc	___awdiv@divisor+1,7
 13249  13C9  2BD4               	goto	l3177
 13250  13CA  3001               	movlw	1
 13251  13CB                     u2615:	
 13252  13CB  35F4               	lslf	___awdiv@divisor,f
 13253  13CC  0DF5               	rlf	___awdiv@divisor+1,f
 13254  13CD  0B89               	decfsz	9,f
 13255  13CE  2BCB               	goto	u2615
 13256  13CF  3001               	movlw	1
 13257  13D0  00F8               	movwf	??___awdiv
 13258  13D1  0878               	movf	??___awdiv,w
 13259  13D2  07A0               	addwf	___awdiv@counter,f
 13260  13D3  2BC8               	goto	l3175
 13261  13D4                     l3177:	
 13262  13D4  3001               	movlw	1
 13263  13D5                     u2635:	
 13264  13D5  35A2               	lslf	___awdiv@quotient,f
 13265  13D6  0DA3               	rlf	___awdiv@quotient+1,f
 13266  13D7  0B89               	decfsz	9,f
 13267  13D8  2BD5               	goto	u2635
 13268  13D9  0875               	movf	___awdiv@divisor+1,w
 13269  13DA  0277               	subwf	___awdiv@dividend+1,w
 13270  13DB  1D03               	skipz
 13271  13DC  2BDF               	goto	u2645
 13272  13DD  0874               	movf	___awdiv@divisor,w
 13273  13DE  0276               	subwf	___awdiv@dividend,w
 13274  13DF                     u2645:	
 13275  13DF  1C03               	skipc
 13276  13E0  2BE6               	goto	l3183
 13277  13E1  0874               	movf	___awdiv@divisor,w
 13278  13E2  02F6               	subwf	___awdiv@dividend,f
 13279  13E3  0875               	movf	___awdiv@divisor+1,w
 13280  13E4  3BF7               	subwfb	___awdiv@dividend+1,f
 13281  13E5  1422               	bsf	___awdiv@quotient,0
 13282  13E6                     l3183:	
 13283  13E6  3001               	movlw	1
 13284  13E7                     u2655:	
 13285  13E7  36F5               	lsrf	___awdiv@divisor+1,f
 13286  13E8  0CF4               	rrf	___awdiv@divisor,f
 13287  13E9  0B89               	decfsz	9,f
 13288  13EA  2BE7               	goto	u2655
 13289  13EB  3001               	movlw	1
 13290  13EC  02A0               	subwf	___awdiv@counter,f
 13291  13ED  1D03               	btfss	3,2
 13292  13EE  2BD4               	goto	l3177
 13293  13EF                     l3187:	
 13294  13EF  0821               	movf	___awdiv@sign,w
 13295  13F0  1903               	btfsc	3,2
 13296  13F1  2BF7               	goto	l3191
 13297  13F2  09A2               	comf	___awdiv@quotient,f
 13298  13F3  09A3               	comf	___awdiv@quotient+1,f
 13299  13F4  0AA2               	incf	___awdiv@quotient,f
 13300  13F5  1903               	skipnz
 13301  13F6  0AA3               	incf	___awdiv@quotient+1,f
 13302  13F7                     l3191:	
 13303  13F7  0823               	movf	___awdiv@quotient+1,w
 13304  13F8  00F5               	movwf	?___awdiv+1
 13305  13F9  0822               	movf	___awdiv@quotient,w
 13306  13FA  00F4               	movwf	?___awdiv
 13307  13FB  0008               	return
 13308  13FC                     __end_of___awdiv:	
 13309                           
 13310                           	psect	text46
 13311  135B                     __ptext46:	
 13312 ;; *************** function _InsertString *****************
 13313 ;; Defined at:
 13314 ;;		line 97 in file "main.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;  dest            1    wreg     PTR unsigned char 
 13317 ;;		 -> message_end(73), message_start(70), 
 13318 ;;  src             2    5[BANK0 ] PTR unsigned char 
 13319 ;;		 -> STR_12(3), checksum(6), STR_11(6), main@convertedNumber(16), 
 13320 ;;		 -> GetNavData@strId(12), STR_10(5), 
 13321 ;;  index           2    7[BANK0 ] int 
 13322 ;;  destLimit       2    9[BANK0 ] int 
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;  dest            1   15[BANK0 ] PTR unsigned char 
 13325 ;;		 -> message_end(73), message_start(70), 
 13326 ;;  i               2   13[BANK0 ] int 
 13327 ;;  counti          2   11[BANK0 ] int 
 13328 ;; Return value:  Size  Location     Type
 13329 ;;                  2    5[BANK0 ] int 
 13330 ;; Registers used:
 13331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13332 ;; Tracked objects:
 13333 ;;		On entry : 1F/1
 13334 ;;		On exit  : 1F/0
 13335 ;;		Unchanged: 0/0
 13336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13337 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13339 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13340 ;;      Totals:         1      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;Total ram usage:       12 bytes
 13342 ;; Hardware stack levels used:    1
 13343 ;; Hardware stack levels required when called:    4
 13344 ;; This function calls:
 13345 ;;		_Insert
 13346 ;;		_strlen
 13347 ;; This function is called by:
 13348 ;;		_main
 13349 ;; This function uses a non-reentrant model
 13350 ;;
 13351                           
 13352                           
 13353                           ;psect for function _InsertString
 13354  135B                     _InsertString:	
 13355                           
 13356                           ;incstack = 0
 13357                           ; Regs used in _InsertString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13358                           ;InsertString@dest stored from wreg
 13359  135B  0020               	movlb	0	; select bank0
 13360  135C  00AF               	movwf	InsertString@dest
 13361                           
 13362                           ;main.c: 97: int InsertString(char* dest, char* src, int index, int destLimit);main.c: 9
      +                          8: {;main.c: 99:     for (int i = 0, counti = strlen(src); i < counti && index < destLim
      +                          it; i++)
 13363  135D  01AD               	clrf	InsertString@i
 13364  135E  01AE               	clrf	InsertString@i+1
 13365  135F  0826               	movf	InsertString@src+1,w
 13366  1360  00F5               	movwf	strlen@s+1
 13367  1361  0825               	movf	InsertString@src,w
 13368  1362  00F4               	movwf	strlen@s
 13369  1363  319F  270F  3193   	fcall	_strlen
 13370  1366  0875               	movf	?_strlen+1,w
 13371  1367  0020               	movlb	0	; select bank0
 13372  1368  00AC               	movwf	InsertString@counti+1
 13373  1369  0874               	movf	?_strlen,w
 13374  136A  00AB               	movwf	InsertString@counti
 13375  136B  2B99               	goto	l3709
 13376  136C                     l3711:	
 13377  136C  0020               	movlb	0	; select bank0
 13378  136D  0828               	movf	InsertString@index+1,w
 13379  136E  3A80               	xorlw	128
 13380  136F  00F9               	movwf	??_InsertString
 13381  1370  082A               	movf	InsertString@destLimit+1,w
 13382  1371  3A80               	xorlw	128
 13383  1372  0279               	subwf	??_InsertString,w
 13384  1373  1D03               	skipz
 13385  1374  2B77               	goto	u3345
 13386  1375  0829               	movf	InsertString@destLimit,w
 13387  1376  0227               	subwf	InsertString@index,w
 13388  1377                     u3345:	
 13389  1377  1803               	btfsc	3,0
 13390  1378  2BA5               	goto	l3713
 13391                           
 13392                           ;main.c: 100:     {;main.c: 102:         Insert(dest, src[i], index++, destLimit);
 13393  1379  0020               	movlb	0	; select bank0
 13394  137A  0825               	movf	InsertString@src,w
 13395  137B  072D               	addwf	InsertString@i,w
 13396  137C  0084               	movwf	4
 13397  137D  0826               	movf	InsertString@src+1,w
 13398  137E  3D2E               	addwfc	InsertString@i+1,w
 13399  137F  0085               	movwf	5
 13400  1380  0800               	movf	0,w	;code access
 13401  1381  00F9               	movwf	??_InsertString
 13402  1382  0879               	movf	??_InsertString,w
 13403  1383  00F4               	movwf	Insert@src
 13404  1384  0828               	movf	InsertString@index+1,w
 13405  1385  00F6               	movwf	Insert@index+1
 13406  1386  0827               	movf	InsertString@index,w
 13407  1387  00F5               	movwf	Insert@index
 13408  1388  082A               	movf	InsertString@destLimit+1,w
 13409  1389  00F8               	movwf	Insert@destLimit+1
 13410  138A  0829               	movf	InsertString@destLimit,w
 13411  138B  00F7               	movwf	Insert@destLimit
 13412  138C  082F               	movf	InsertString@dest,w
 13413  138D  3195  25C1  3193   	fcall	_Insert
 13414  1390  3001               	movlw	1
 13415  1391  0020               	movlb	0	; select bank0
 13416  1392  07A7               	addwf	InsertString@index,f
 13417  1393  3000               	movlw	0
 13418  1394  3DA8               	addwfc	InsertString@index+1,f
 13419                           
 13420                           ;main.c: 103:     }
 13421  1395  3001               	movlw	1
 13422  1396  07AD               	addwf	InsertString@i,f
 13423  1397  3000               	movlw	0
 13424  1398  3DAE               	addwfc	InsertString@i+1,f
 13425  1399                     l3709:	
 13426  1399  082E               	movf	InsertString@i+1,w
 13427  139A  3A80               	xorlw	128
 13428  139B  00F9               	movwf	??_InsertString
 13429  139C  082C               	movf	InsertString@counti+1,w
 13430  139D  3A80               	xorlw	128
 13431  139E  0279               	subwf	??_InsertString,w
 13432  139F  1D03               	skipz
 13433  13A0  2BA3               	goto	u3335
 13434  13A1  082B               	movf	InsertString@counti,w
 13435  13A2  022D               	subwf	InsertString@i,w
 13436  13A3                     u3335:	
 13437  13A3  1C03               	btfss	3,0
 13438  13A4  2B6C               	goto	l3711
 13439  13A5                     l3713:	
 13440                           
 13441                           ;main.c: 104:     return index;
 13442  13A5  0020               	movlb	0	; select bank0
 13443  13A6  0828               	movf	InsertString@index+1,w
 13444  13A7  00A6               	movwf	?_InsertString+1
 13445  13A8  0827               	movf	InsertString@index,w
 13446  13A9  00A5               	movwf	?_InsertString
 13447  13AA  0008               	return
 13448  13AB                     __end_of_InsertString:	
 13449                           
 13450                           	psect	text47
 13451  15C1                     __ptext47:	
 13452 ;; *************** function _Insert *****************
 13453 ;; Defined at:
 13454 ;;		line 72 in file "main.c"
 13455 ;; Parameters:    Size  Location     Type
 13456 ;;  dest            1    wreg     PTR unsigned char 
 13457 ;;		 -> message_end(73), message_start(70), 
 13458 ;;  src             1    4[COMMON] unsigned char 
 13459 ;;  index           2    5[COMMON] int 
 13460 ;;  destLimit       2    7[COMMON] int 
 13461 ;; Auto vars:     Size  Location     Type
 13462 ;;  dest            1    4[BANK0 ] PTR unsigned char 
 13463 ;;		 -> message_end(73), message_start(70), 
 13464 ;;  current         1    3[BANK0 ] unsigned char 
 13465 ;;  temp            1    2[BANK0 ] unsigned char 
 13466 ;; Return value:  Size  Location     Type
 13467 ;;                  2    4[COMMON] int 
 13468 ;; Registers used:
 13469 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13470 ;; Tracked objects:
 13471 ;;		On entry : 1E/1
 13472 ;;		On exit  : 0/0
 13473 ;;		Unchanged: 0/0
 13474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13475 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;      Totals:         5       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13479 ;;Total ram usage:       10 bytes
 13480 ;; Hardware stack levels used:    1
 13481 ;; Hardware stack levels required when called:    3
 13482 ;; This function calls:
 13483 ;;		Nothing
 13484 ;; This function is called by:
 13485 ;;		_InsertString
 13486 ;;		_main
 13487 ;; This function uses a non-reentrant model
 13488 ;;
 13489                           
 13490                           
 13491                           ;psect for function _Insert
 13492  15C1                     _Insert:	
 13493                           
 13494                           ;incstack = 0
 13495                           ; Regs used in _Insert: [wreg+fsr1l+fsr1h+status,2+status,0]
 13496                           ;Insert@dest stored from wreg
 13497  15C1  0020               	movlb	0	; select bank0
 13498  15C2  00A4               	movwf	Insert@dest
 13499                           
 13500                           ;main.c: 75:     temp = dest[index];
 13501  15C3  0875               	movf	Insert@index,w
 13502  15C4  0724               	addwf	Insert@dest,w
 13503  15C5  00A0               	movwf	??_Insert
 13504  15C6  0820               	movf	??_Insert,w
 13505  15C7  0086               	movwf	6
 13506  15C8  3003               	movlw	3	; select bank6/7
 13507  15C9  0087               	movwf	7
 13508  15CA  0801               	movf	1,w
 13509  15CB  00A1               	movwf	??_Insert+1
 13510  15CC  0821               	movf	??_Insert+1,w
 13511  15CD  00A2               	movwf	Insert@temp
 13512                           
 13513                           ;main.c: 76:     dest[index] = src;
 13514  15CE  0874               	movf	Insert@src,w
 13515  15CF  00A0               	movwf	??_Insert
 13516  15D0  0875               	movf	Insert@index,w
 13517  15D1  0724               	addwf	Insert@dest,w
 13518  15D2  00A1               	movwf	??_Insert+1
 13519  15D3  0821               	movf	??_Insert+1,w
 13520  15D4  0086               	movwf	6
 13521  15D5  3003               	movlw	3	; select bank6/7
 13522  15D6  0087               	movwf	7
 13523  15D7  0820               	movf	??_Insert,w
 13524  15D8  0081               	movwf	1
 13525                           
 13526                           ;main.c: 77:     if (dest[index + 1] == '\0')
 13527  15D9  0875               	movf	Insert@index,w
 13528  15DA  0724               	addwf	Insert@dest,w
 13529  15DB  00A0               	movwf	??_Insert
 13530  15DC  0A20               	incf	??_Insert,w
 13531  15DD  0086               	movwf	6
 13532  15DE  3003               	movlw	3	; select bank6/7
 13533  15DF  0087               	movwf	7
 13534  15E0  0801               	movf	1,w
 13535  15E1  1D03               	btfss	3,2
 13536  15E2  2DEA               	goto	l3365
 13537                           
 13538                           ;main.c: 78:     {;main.c: 79:         return index + 1;
 13539  15E3  0875               	movf	Insert@index,w
 13540  15E4  3E01               	addlw	1
 13541  15E5  00F4               	movwf	?_Insert
 13542  15E6  3000               	movlw	0
 13543  15E7  3D76               	addwfc	Insert@index+1,w
 13544  15E8  00F5               	movwf	?_Insert+1
 13545  15E9  0008               	return
 13546  15EA                     l3365:	
 13547                           
 13548                           ;main.c: 81:     index++;
 13549  15EA  3001               	movlw	1
 13550  15EB  07F5               	addwf	Insert@index,f
 13551  15EC  3000               	movlw	0
 13552  15ED  3DF6               	addwfc	Insert@index+1,f
 13553  15EE                     l3377:	
 13554                           ;main.c: 82:     while (index < destLimit)
 13555                           
 13556                           
 13557                           ;main.c: 82:     while (index < destLimit)
 13558  15EE  0876               	movf	Insert@index+1,w
 13559  15EF  3A80               	xorlw	128
 13560  15F0  00A0               	movwf	??_Insert
 13561  15F1  0878               	movf	Insert@destLimit+1,w
 13562  15F2  3A80               	xorlw	128
 13563  15F3  0220               	subwf	??_Insert,w
 13564  15F4  1D03               	skipz
 13565  15F5  2DF8               	goto	u2885
 13566  15F6  0877               	movf	Insert@destLimit,w
 13567  15F7  0275               	subwf	Insert@index,w
 13568  15F8                     u2885:	
 13569  15F8  1803               	btfsc	3,0
 13570  15F9  2E27               	goto	l3379
 13571                           
 13572                           ;main.c: 83:     {;main.c: 84:         char current = dest[index];
 13573  15FA  0875               	movf	Insert@index,w
 13574  15FB  0020               	movlb	0	; select bank0
 13575  15FC  0724               	addwf	Insert@dest,w
 13576  15FD  00A0               	movwf	??_Insert
 13577  15FE  0820               	movf	??_Insert,w
 13578  15FF  0086               	movwf	6
 13579  1600  3003               	movlw	3	; select bank6/7
 13580  1601  0087               	movwf	7
 13581  1602  0801               	movf	1,w
 13582  1603  00A1               	movwf	??_Insert+1
 13583  1604  0821               	movf	??_Insert+1,w
 13584  1605  00A3               	movwf	Insert@current
 13585                           
 13586                           ;main.c: 85:         dest[index] = temp;
 13587  1606  0822               	movf	Insert@temp,w
 13588  1607  00A0               	movwf	??_Insert
 13589  1608  0875               	movf	Insert@index,w
 13590  1609  0724               	addwf	Insert@dest,w
 13591  160A  00A1               	movwf	??_Insert+1
 13592  160B  0821               	movf	??_Insert+1,w
 13593  160C  0086               	movwf	6
 13594  160D  3003               	movlw	3	; select bank6/7
 13595  160E  0087               	movwf	7
 13596  160F  0820               	movf	??_Insert,w
 13597  1610  0081               	movwf	1
 13598                           
 13599                           ;main.c: 86:         temp = current;
 13600  1611  0823               	movf	Insert@current,w
 13601  1612  00A0               	movwf	??_Insert
 13602  1613  0820               	movf	??_Insert,w
 13603  1614  00A2               	movwf	Insert@temp
 13604                           
 13605                           ;main.c: 87:         index++;
 13606  1615  3001               	movlw	1
 13607  1616  07F5               	addwf	Insert@index,f
 13608  1617  3000               	movlw	0
 13609  1618  3DF6               	addwfc	Insert@index+1,f
 13610                           
 13611                           ;main.c: 88:         if (current == '\0')
 13612  1619  0823               	movf	Insert@current,w
 13613  161A  1D03               	btfss	3,2
 13614  161B  2DEE               	goto	l3377
 13615                           
 13616                           ;main.c: 89:         {;main.c: 90:             dest[index] = current;
 13617  161C  0823               	movf	Insert@current,w
 13618  161D  00A0               	movwf	??_Insert
 13619  161E  0875               	movf	Insert@index,w
 13620  161F  0724               	addwf	Insert@dest,w
 13621  1620  00A1               	movwf	??_Insert+1
 13622  1621  0821               	movf	??_Insert+1,w
 13623  1622  0086               	movwf	6
 13624  1623  3003               	movlw	3	; select bank6/7
 13625  1624  0087               	movwf	7
 13626  1625  0820               	movf	??_Insert,w
 13627  1626  0081               	movwf	1
 13628  1627                     l3379:	
 13629                           ;main.c: 91:             break;
 13630                           
 13631                           
 13632                           ;main.c: 94:     return index;
 13633  1627  0875               	movf	Insert@index,w
 13634  1628  00F4               	movwf	?_Insert
 13635  1629  0876               	movf	Insert@index+1,w
 13636  162A  00F5               	movwf	?_Insert+1
 13637  162B  0008               	return
 13638  162C                     __end_of_Insert:	
 13639                           
 13640                           	psect	text48
 13641  1FB2                     __ptext48:	
 13642 ;; *************** function _ClearString *****************
 13643 ;; Defined at:
 13644 ;;		line 42 in file "main.c"
 13645 ;; Parameters:    Size  Location     Type
 13646 ;;  str             2    0[BANK0 ] PTR unsigned char 
 13647 ;;		 -> main@convertedNumber(16), GetNavData@data_type(7), message_end(73), message_start(70), 
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;  i               2    4[BANK0 ] int 
 13650 ;;  counti          2    2[BANK0 ] int 
 13651 ;; Return value:  Size  Location     Type
 13652 ;;                  1    wreg      void 
 13653 ;; Registers used:
 13654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13655 ;; Tracked objects:
 13656 ;;		On entry : 1F/0
 13657 ;;		On exit  : 0/0
 13658 ;;		Unchanged: 0/0
 13659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13660 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13661 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13662 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;Total ram usage:        7 bytes
 13665 ;; Hardware stack levels used:    1
 13666 ;; Hardware stack levels required when called:    4
 13667 ;; This function calls:
 13668 ;;		_strlen
 13669 ;; This function is called by:
 13670 ;;		_main
 13671 ;; This function uses a non-reentrant model
 13672 ;;
 13673                           
 13674                           
 13675                           ;psect for function _ClearString
 13676  1FB2                     _ClearString:	
 13677                           
 13678                           ;main.c: 42: void ClearString(char* str);main.c: 43: {;main.c: 44:     for (int i = 0, c
      +                          ounti = strlen(str); i < counti; i++)
 13679                           
 13680                           ;incstack = 0
 13681                           ; Regs used in _ClearString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13682  1FB2  01A4               	clrf	ClearString@i
 13683  1FB3  01A5               	clrf	ClearString@i+1
 13684  1FB4  0821               	movf	ClearString@str+1,w
 13685  1FB5  00F5               	movwf	strlen@s+1
 13686  1FB6  0820               	movf	ClearString@str,w
 13687  1FB7  00F4               	movwf	strlen@s
 13688  1FB8  319F  270F  319F   	fcall	_strlen
 13689  1FBB  0875               	movf	?_strlen+1,w
 13690  1FBC  0020               	movlb	0	; select bank0
 13691  1FBD  00A3               	movwf	ClearString@counti+1
 13692  1FBE  0874               	movf	?_strlen,w
 13693  1FBF  00A2               	movwf	ClearString@counti
 13694  1FC0                     l3947:	
 13695  1FC0  0825               	movf	ClearString@i+1,w
 13696  1FC1  3A80               	xorlw	128
 13697  1FC2  00F9               	movwf	??_ClearString
 13698  1FC3  0823               	movf	ClearString@counti+1,w
 13699  1FC4  3A80               	xorlw	128
 13700  1FC5  0279               	subwf	??_ClearString,w
 13701  1FC6  1D03               	skipz
 13702  1FC7  2FCA               	goto	u3565
 13703  1FC8  0822               	movf	ClearString@counti,w
 13704  1FC9  0224               	subwf	ClearString@i,w
 13705  1FCA                     u3565:	
 13706  1FCA  1803               	btfsc	3,0
 13707  1FCB  0008               	return
 13708                           
 13709                           ;main.c: 45:     {;main.c: 46:         str[i] = '\0';
 13710  1FCC  0020               	movlb	0	; select bank0
 13711  1FCD  0824               	movf	ClearString@i,w
 13712  1FCE  0720               	addwf	ClearString@str,w
 13713  1FCF  0086               	movwf	6
 13714  1FD0  0825               	movf	ClearString@i+1,w
 13715  1FD1  3D21               	addwfc	ClearString@str+1,w
 13716  1FD2  0087               	movwf	7
 13717  1FD3  0181               	clrf	1
 13718                           
 13719                           ;main.c: 47:     }
 13720  1FD4  3001               	movlw	1
 13721  1FD5  07A4               	addwf	ClearString@i,f
 13722  1FD6  3000               	movlw	0
 13723  1FD7  3DA5               	addwfc	ClearString@i+1,f
 13724  1FD8  2FC0               	goto	l3947
 13725  1FD9                     __end_of_ClearString:	
 13726                           
 13727                           	psect	text49
 13728  1F0F                     __ptext49:	
 13729 ;; *************** function _strlen *****************
 13730 ;; Defined at:
 13731 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strlen.c"
 13732 ;; Parameters:    Size  Location     Type
 13733 ;;  s               2    4[COMMON] PTR const unsigned char 
 13734 ;;		 -> STR_12(3), checksum(6), STR_11(6), main@convertedNumber(16), 
 13735 ;;		 -> GetNavData@strId(12), STR_10(5), STR_7(14), GetNavData@data_type(7), 
 13736 ;;		 -> STR_6(26), STR_5(26), STR_4(26), STR_3(26), 
 13737 ;;		 -> STR_2(26), STR_1(26), message_end(73), message_start(70), 
 13738 ;; Auto vars:     Size  Location     Type
 13739 ;;  a               2    7[COMMON] PTR const unsigned char 
 13740 ;;		 -> STR_12(3), checksum(6), STR_11(6), main@convertedNumber(16), 
 13741 ;;		 -> GetNavData@strId(12), STR_10(5), STR_7(14), GetNavData@data_type(7), 
 13742 ;;		 -> STR_6(26), STR_5(26), STR_4(26), STR_3(26), 
 13743 ;;		 -> STR_2(26), STR_1(26), message_end(73), message_start(70), 
 13744 ;; Return value:  Size  Location     Type
 13745 ;;                  2    4[COMMON] unsigned int 
 13746 ;; Registers used:
 13747 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13748 ;; Tracked objects:
 13749 ;;		On entry : 1E/1
 13750 ;;		On exit  : 1E/0
 13751 ;;		Unchanged: 1E/0
 13752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13756 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13757 ;;Total ram usage:        5 bytes
 13758 ;; Hardware stack levels used:    1
 13759 ;; Hardware stack levels required when called:    3
 13760 ;; This function calls:
 13761 ;;		Nothing
 13762 ;; This function is called by:
 13763 ;;		_ClearString
 13764 ;;		_InsertString
 13765 ;;		_ReverseString
 13766 ;;		_crc16
 13767 ;;		_TransmitString
 13768 ;;		_main
 13769 ;; This function uses a non-reentrant model
 13770 ;;
 13771                           
 13772                           
 13773                           ;psect for function _strlen
 13774  1F0F                     _strlen:	
 13775                           
 13776                           ;incstack = 0
 13777                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 13778  1F0F  0875               	movf	strlen@s+1,w
 13779  1F10  00F8               	movwf	strlen@a+1
 13780  1F11  0874               	movf	strlen@s,w
 13781  1F12  00F7               	movwf	strlen@a
 13782  1F13                     l3137:	
 13783  1F13  0874               	movf	strlen@s,w
 13784  1F14  0084               	movwf	4
 13785  1F15  0875               	movf	strlen@s+1,w
 13786  1F16  0085               	movwf	5
 13787  1F17  0012               	moviw fsr0++
 13788  1F18  1903               	btfsc	3,2
 13789  1F19  2F1F               	goto	l3139
 13790  1F1A  3001               	movlw	1
 13791  1F1B  07F4               	addwf	strlen@s,f
 13792  1F1C  3000               	movlw	0
 13793  1F1D  3DF5               	addwfc	strlen@s+1,f
 13794  1F1E  2F13               	goto	l3137
 13795  1F1F                     l3139:	
 13796  1F1F  0877               	movf	strlen@a,w
 13797  1F20  0274               	subwf	strlen@s,w
 13798  1F21  00F4               	movwf	?_strlen
 13799  1F22  0878               	movf	strlen@a+1,w
 13800  1F23  3B75               	subwfb	strlen@s+1,w
 13801  1F24  00F5               	movwf	?_strlen+1
 13802  1F25  0008               	return
 13803  1F26                     __end_of_strlen:	
 13804                           
 13805                           	psect	intentry
 13806  0004                     __pintentry:	
 13807 ;; *************** function _INTERRUPT_InterruptManager *****************
 13808 ;; Defined at:
 13809 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13810 ;; Parameters:    Size  Location     Type
 13811 ;;		None
 13812 ;; Auto vars:     Size  Location     Type
 13813 ;;		None
 13814 ;; Return value:  Size  Location     Type
 13815 ;;                  1    wreg      void 
 13816 ;; Registers used:
 13817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13818 ;; Tracked objects:
 13819 ;;		On entry : 0/0
 13820 ;;		On exit  : 0/0
 13821 ;;		Unchanged: 0/0
 13822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;Total ram usage:        0 bytes
 13828 ;; Hardware stack levels used:    1
 13829 ;; Hardware stack levels required when called:    2
 13830 ;; This function calls:
 13831 ;;		_I2C_BusCollisionISR
 13832 ;;		_I2C_ISR
 13833 ;;		_TMR0_ISR
 13834 ;; This function is called by:
 13835 ;;		Interrupt level 1
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839  0004                     _INTERRUPT_InterruptManager:	
 13840                           
 13841                           ;incstack = 0
 13842  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13843                           
 13844                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13845  0005  3180               	pagesel	$
 13846                           
 13847                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 13848  0006  1A8B               	btfsc	11,5	;volatile
 13849  0007  1D0B               	btfss	11,2	;volatile
 13850  0008  280D               	goto	i1l384
 13851                           
 13852                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 13853  0009  319E  26D9  3180   	fcall	_TMR0_ISR
 13854                           
 13855                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 13856  000C  2821               	goto	i1l392
 13857  000D                     i1l384:	
 13858                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 13859                           
 13860  000D  1F0B               	btfss	11,6	;volatile
 13861  000E  2821               	goto	i1l392
 13862                           
 13863                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 13864  000F  0021               	movlb	1	; select bank1
 13865  0010  1D91               	btfss	17,3	;volatile
 13866  0011  2819               	goto	i1l387
 13867  0012  0020               	movlb	0	; select bank0
 13868  0013  1D91               	btfss	17,3	;volatile
 13869  0014  2819               	goto	i1l387
 13870                           
 13871                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             I2C_BusCollisionISR();
 13872  0015  3180  2002  3180   	fcall	_I2C_BusCollisionISR
 13873                           
 13874                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13875  0018  2821               	goto	i1l392
 13876  0019                     i1l387:	
 13877                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 13878                           
 13879  0019  0021               	movlb	1	; select bank1
 13880  001A  1D90               	btfss	16,3	;volatile
 13881  001B  2821               	goto	i1l392
 13882  001C  0020               	movlb	0	; select bank0
 13883  001D  1D90               	btfss	16,3	;volatile
 13884  001E  2821               	goto	i1l392
 13885                           
 13886                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             I2C_ISR();
 13887  001F  318C  24C5         	fcall	_I2C_ISR
 13888  0021                     i1l392:	
 13889                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 13890                           
 13891                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 13892                           
 13893  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13894  0022  0009               	retfie
 13895  0023                     __end_of_INTERRUPT_InterruptManager:	
 13896                           
 13897                           	psect	text51
 13898  1ED9                     __ptext51:	
 13899 ;; *************** function _TMR0_ISR *****************
 13900 ;; Defined at:
 13901 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 13902 ;; Parameters:    Size  Location     Type
 13903 ;;		None
 13904 ;; Auto vars:     Size  Location     Type
 13905 ;;		None
 13906 ;; Return value:  Size  Location     Type
 13907 ;;                  1    wreg      void 
 13908 ;; Registers used:
 13909 ;;		wreg, status,2, status,0, pclath, cstack
 13910 ;; Tracked objects:
 13911 ;;		On entry : 0/0
 13912 ;;		On exit  : 0/0
 13913 ;;		Unchanged: 0/0
 13914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;Total ram usage:        0 bytes
 13920 ;; Hardware stack levels used:    1
 13921 ;; Hardware stack levels required when called:    1
 13922 ;; This function calls:
 13923 ;;		Absolute function
 13924 ;;		_TMR0_DefaultInterruptHandler
 13925 ;;		_TimerISR
 13926 ;; This function is called by:
 13927 ;;		_INTERRUPT_InterruptManager
 13928 ;; This function uses a non-reentrant model
 13929 ;;
 13930                           
 13931                           
 13932                           ;psect for function _TMR0_ISR
 13933  1ED9                     _TMR0_ISR:	
 13934                           
 13935                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 13936                           
 13937                           ;incstack = 0
 13938                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 13939  1ED9  110B               	bcf	11,2	;volatile
 13940                           
 13941                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 13942  1EDA  0023               	movlb	3	; select bank3
 13943  1EDB  0866               	movf	_timer0ReloadVal^(0+384),w	;volatile
 13944  1EDC  0020               	movlb	0	; select bank0
 13945  1EDD  0095               	movwf	21	;volatile
 13946                           
 13947                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
 13948  1EDE  0023               	movlb	3	; select bank3
 13949  1EDF  0864               	movf	_TMR0_InterruptHandler^(0+384),w
 13950  1EE0  0465               	iorwf	(_TMR0_InterruptHandler+1)^(0+384),w
 13951  1EE1  1903               	btfsc	3,2
 13952  1EE2  0008               	return
 13953                           
 13954                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
 13955  1EE3  0865               	movf	(_TMR0_InterruptHandler+1)^(0+384),w
 13956  1EE4  008A               	movwf	10
 13957  1EE5  0864               	movf	_TMR0_InterruptHandler^(0+384),w
 13958  1EE6  000A               	callw
 13959  1EE7  319E               	pagesel	$
 13960  1EE8  0008               	return
 13961  1EE9                     __end_of_TMR0_ISR:	
 13962                           
 13963                           	psect	text52
 13964  0800                     __ptext52:	
 13965 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 13966 ;; Defined at:
 13967 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 13968 ;; Parameters:    Size  Location     Type
 13969 ;;		None
 13970 ;; Auto vars:     Size  Location     Type
 13971 ;;		None
 13972 ;; Return value:  Size  Location     Type
 13973 ;;                  1    wreg      void 
 13974 ;; Registers used:
 13975 ;;		None
 13976 ;; Tracked objects:
 13977 ;;		On entry : 1F/3
 13978 ;;		On exit  : 1F/3
 13979 ;;		Unchanged: 1E/0
 13980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;Total ram usage:        0 bytes
 13986 ;; Hardware stack levels used:    1
 13987 ;; This function calls:
 13988 ;;		Nothing
 13989 ;; This function is called by:
 13990 ;;		_TMR0_Initialize
 13991 ;;		_TMR0_ISR
 13992 ;; This function uses a non-reentrant model
 13993 ;;
 13994                           
 13995                           
 13996                           ;psect for function _TMR0_DefaultInterruptHandler
 13997  0800                     _TMR0_DefaultInterruptHandler:	
 13998                           
 13999                           ;incstack = 0
 14000                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 14001  0800  0008               	return
 14002  0801                     __end_of_TMR0_DefaultInterruptHandler:	
 14003                           
 14004                           	psect	text53
 14005  1EAA                     __ptext53:	
 14006 ;; *************** function _TimerISR *****************
 14007 ;; Defined at:
 14008 ;;		line 9 in file "main.c"
 14009 ;; Parameters:    Size  Location     Type
 14010 ;;		None
 14011 ;; Auto vars:     Size  Location     Type
 14012 ;;		None
 14013 ;; Return value:  Size  Location     Type
 14014 ;;                  1    wreg      void 
 14015 ;; Registers used:
 14016 ;;		wreg
 14017 ;; Tracked objects:
 14018 ;;		On entry : 1F/3
 14019 ;;		On exit  : 1F/1
 14020 ;;		Unchanged: 0/0
 14021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14026 ;;Total ram usage:        0 bytes
 14027 ;; Hardware stack levels used:    1
 14028 ;; This function calls:
 14029 ;;		Nothing
 14030 ;; This function is called by:
 14031 ;;		_main
 14032 ;;		_TMR0_ISR
 14033 ;; This function uses a non-reentrant model
 14034 ;;
 14035                           
 14036                           
 14037                           ;psect for function _TimerISR
 14038  1EAA                     _TimerISR:	
 14039                           
 14040                           ;main.c: 11:     ticks++;
 14041                           
 14042                           ;incstack = 0
 14043                           ; Regs used in _TimerISR: [wreg]
 14044  1EAA  3001               	movlw	1
 14045  1EAB  0021               	movlb	1	; select bank1
 14046  1EAC  07EA               	addwf	_ticks^(0+128),f
 14047  1EAD  3000               	movlw	0
 14048  1EAE  3DEB               	addwfc	(_ticks+1)^(0+128),f
 14049  1EAF  3000               	movlw	0
 14050  1EB0  3DEC               	addwfc	(_ticks+2)^(0+128),f
 14051  1EB1  3000               	movlw	0
 14052  1EB2  3DED               	addwfc	(_ticks+3)^(0+128),f
 14053  1EB3  0008               	return
 14054  1EB4                     __end_of_TimerISR:	
 14055                           
 14056                           	psect	text54
 14057  0CC5                     __ptext54:	
 14058 ;; *************** function _I2C_ISR *****************
 14059 ;; Defined at:
 14060 ;;		line 235 in file "mcc_generated_files/i2c.c"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;		None
 14063 ;; Auto vars:     Size  Location     Type
 14064 ;;		None
 14065 ;; Return value:  Size  Location     Type
 14066 ;;                  1    wreg      void 
 14067 ;; Registers used:
 14068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14069 ;; Tracked objects:
 14070 ;;		On entry : 1F/0
 14071 ;;		On exit  : 18/0
 14072 ;;		Unchanged: 0/0
 14073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14077 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14078 ;;Total ram usage:        2 bytes
 14079 ;; Hardware stack levels used:    1
 14080 ;; Hardware stack levels required when called:    1
 14081 ;; This function calls:
 14082 ;;		_I2C_FunctionComplete
 14083 ;;		_I2C_Stop
 14084 ;; This function is called by:
 14085 ;;		_INTERRUPT_InterruptManager
 14086 ;; This function uses a non-reentrant model
 14087 ;;
 14088                           
 14089                           
 14090                           ;psect for function _I2C_ISR
 14091  0CC5                     _I2C_ISR:	
 14092                           
 14093                           ;mcc_generated_files/i2c.c: 238:     static uint8_t *pi2c_buf_ptr;;mcc_generated_files/i
      +                          2c.c: 239:     static uint16_t i2c_address = 0;;mcc_generated_files/i2c.c: 240:     stat
      +                          ic uint8_t i2c_bytes_left = 0;;mcc_generated_files/i2c.c: 241:     static uint8_t i2c_10
      +                          bit_address_restart = 0;;mcc_generated_files/i2c.c: 243:     PIR1bits.SSP1IF = 0;
 14094                           
 14095                           ;incstack = 0
 14096                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14097  0CC5  1190               	bcf	16,3	;volatile
 14098                           
 14099                           ;mcc_generated_files/i2c.c: 247:     if(SSP1CON1bits.WCOL)
 14100  0CC6  0024               	movlb	4	; select bank4
 14101  0CC7  1F95               	btfss	21,7	;volatile
 14102  0CC8  2DE8               	goto	i1l3681
 14103                           
 14104                           ;mcc_generated_files/i2c.c: 248:     {;mcc_generated_files/i2c.c: 250:         SSP1CON1b
      +                          its.WCOL = 0;
 14105  0CC9  1395               	bcf	21,7	;volatile
 14106                           
 14107                           ;mcc_generated_files/i2c.c: 251:         i2c_state = S_MASTER_IDLE;
 14108  0CCA  01FB               	clrf	_i2c_state
 14109                           
 14110                           ;mcc_generated_files/i2c.c: 252:         *(p_i2c_current->pTrFlag) = I2C_MESSAGE_FAIL;
 14111  0CCB  0023               	movlb	3	; select bank3
 14112  0CCC  0848               	movf	_p_i2c_current^(0+384),w
 14113  0CCD  0086               	movwf	6
 14114  0CCE  0849               	movf	(_p_i2c_current+1)^(0+384),w
 14115  0CCF  0087               	movwf	7
 14116  0CD0  3143               	addfsr 1,3
 14117  0CD1  0801               	movf	1,w
 14118  0CD2  0086               	movwf	6
 14119  0CD3  0187               	clrf	7
 14120  0CD4  0181               	clrf	1
 14121  0CD5  0A81               	incf	1,f
 14122                           
 14123                           ;mcc_generated_files/i2c.c: 255:         p_i2c_current = ((void*)0);
 14124  0CD6  01C8               	clrf	_p_i2c_current^(0+384)
 14125  0CD7  01C9               	clrf	(_p_i2c_current+1)^(0+384)
 14126  0CD8  0008               	return
 14127  0CD9                     i1l492:	
 14128                           ;mcc_generated_files/i2c.c: 262:     {;mcc_generated_files/i2c.c: 263:         case S_MA
      +                          STER_IDLE:
 14129                           
 14130                           
 14131                           ;mcc_generated_files/i2c.c: 265:             if(i2c_object.trStatus.s.empty != 1)
 14132  0CD9  0023               	movlb	3	; select bank3
 14133  0CDA  18BF               	btfsc	(_i2c_object^(0+384)+4),1
 14134  0CDB  0008               	return
 14135                           
 14136                           ;mcc_generated_files/i2c.c: 266:             {;mcc_generated_files/i2c.c: 268:          
      +                                 p_i2c_current = i2c_object.pTrHead;
 14137  0CDC  083E               	movf	((_i2c_object+1)^(0+384)+2),w
 14138  0CDD  00C9               	movwf	(_p_i2c_current+1)^(0+384)
 14139  0CDE  083D               	movf	(_i2c_object^(0+384)+2),w
 14140  0CDF  00C8               	movwf	_p_i2c_current^(0+384)
 14141                           
 14142                           ;mcc_generated_files/i2c.c: 269:                 i2c_trb_count = i2c_object.pTrHead->cou
      +                          nt;
 14143  0CE0  083D               	movf	(_i2c_object^(0+384)+2),w
 14144  0CE1  0086               	movwf	6
 14145  0CE2  083E               	movf	((_i2c_object+1)^(0+384)+2),w
 14146  0CE3  0087               	movwf	7
 14147  0CE4  0801               	movf	1,w
 14148  0CE5  00F2               	movwf	??_I2C_ISR
 14149  0CE6  0872               	movf	??_I2C_ISR,w
 14150  0CE7  00FA               	movwf	_i2c_trb_count
 14151                           
 14152                           ;mcc_generated_files/i2c.c: 270:                 p_i2c_trb_current = i2c_object.pTrHead-
      +                          >ptrb_list;
 14153  0CE8  083D               	movf	(_i2c_object^(0+384)+2),w
 14154  0CE9  0086               	movwf	6
 14155  0CEA  083E               	movf	((_i2c_object+1)^(0+384)+2),w
 14156  0CEB  0087               	movwf	7
 14157  0CEC  3141               	addfsr 1,1
 14158  0CED  3F40               	moviw [0]fsr1
 14159  0CEE  00CA               	movwf	_p_i2c_trb_current^(0+384)
 14160  0CEF  3F41               	moviw [1]fsr1
 14161  0CF0  00CB               	movwf	(_p_i2c_trb_current+1)^(0+384)
 14162                           
 14163                           ;mcc_generated_files/i2c.c: 272:                 i2c_object.pTrHead++;
 14164  0CF1  3005               	movlw	5
 14165  0CF2  07BD               	addwf	(_i2c_object^(0+384)+2),f
 14166  0CF3  3000               	movlw	0
 14167  0CF4  3DBE               	addwfc	((_i2c_object+1)^(0+384)+2),f
 14168                           
 14169                           ;mcc_generated_files/i2c.c: 275:                 if(i2c_object.pTrHead == (i2c_tr_queue 
      +                          + 1))
 14170  0CF5  3001               	movlw	high (_i2c_tr_queue+5)
 14171  0CF6  063E               	xorwf	((_i2c_object+1)^(0+384)+2),w
 14172  0CF7  1D03               	skipz
 14173  0CF8  2CFB               	goto	u320_25
 14174  0CF9  30E4               	movlw	low (_i2c_tr_queue+5)
 14175  0CFA  063D               	xorwf	(_i2c_object^(0+384)+2),w
 14176  0CFB                     u320_25:	
 14177  0CFB  1D03               	skipz
 14178  0CFC  2D01               	goto	i1l3567
 14179                           
 14180                           ;mcc_generated_files/i2c.c: 276:                 {;mcc_generated_files/i2c.c: 278:      
      +                                         i2c_object.pTrHead = i2c_tr_queue;
 14181  0CFD  30DF               	movlw	low _i2c_tr_queue
 14182  0CFE  00BD               	movwf	(_i2c_object^(0+384)+2)
 14183  0CFF  3001               	movlw	high _i2c_tr_queue
 14184  0D00  00BE               	movwf	(_i2c_object^(0+384)+3)
 14185  0D01                     i1l3567:	
 14186                           
 14187                           ;mcc_generated_files/i2c.c: 283:                 i2c_object.trStatus.s.full = 0;
 14188  0D01  103F               	bcf	(_i2c_object^(0+384)+4),0
 14189                           
 14190                           ;mcc_generated_files/i2c.c: 286:                 if(i2c_object.pTrHead == i2c_object.pTr
      +                          Tail)
 14191  0D02  083C               	movf	(_i2c_object+1)^(0+384),w
 14192  0D03  063E               	xorwf	((_i2c_object+1)^(0+384)+2),w
 14193  0D04  1D03               	skipz
 14194  0D05  2D08               	goto	u321_25
 14195  0D06  083B               	movf	_i2c_object^(0+384),w
 14196  0D07  063D               	xorwf	(_i2c_object^(0+384)+2),w
 14197  0D08                     u321_25:	
 14198  0D08  1903               	btfsc	3,2
 14199                           
 14200                           ;mcc_generated_files/i2c.c: 287:                 {;mcc_generated_files/i2c.c: 289:      
      +                                         i2c_object.trStatus.s.empty = 1;
 14201  0D09  14BF               	bsf	(_i2c_object^(0+384)+4),1
 14202                           
 14203                           ;mcc_generated_files/i2c.c: 293:                 SSP1CON2bits.SEN = 1;
 14204                           
 14205                           ;mcc_generated_files/i2c.c: 290:                 }
 14206  0D0A  0024               	movlb	4	; select bank4
 14207  0D0B  1416               	bsf	22,0	;volatile
 14208  0D0C                     i1l3571:	
 14209                           
 14210                           ;mcc_generated_files/i2c.c: 296:                 i2c_state = S_MASTER_SEND_ADDR;
 14211  0D0C  3002               	movlw	2
 14212  0D0D  00F2               	movwf	??_I2C_ISR
 14213  0D0E  0872               	movf	??_I2C_ISR,w
 14214  0D0F  00FB               	movwf	_i2c_state
 14215  0D10  0008               	return
 14216  0D11                     i1l497:	
 14217                           ;mcc_generated_files/i2c.c: 301:         case S_MASTER_RESTART:
 14218                           
 14219  0D11  2D94               	goto	L7
 14220  0D12                     i1l498:	
 14221                           ;mcc_generated_files/i2c.c: 313:         case S_MASTER_SEND_ADDR_10BIT_LSB:
 14222                           
 14223                           ;mcc_generated_files/i2c.c: 306:             SSP1CON2bits.RSEN = 1;
 14224                           
 14225                           
 14226                           ;mcc_generated_files/i2c.c: 315:             if(SSP1CON2bits.ACKSTAT)
 14227  0D12  1F16               	btfss	22,6	;volatile
 14228  0D13  2D1D               	goto	i1l3579
 14229                           
 14230                           ;mcc_generated_files/i2c.c: 316:             {;mcc_generated_files/i2c.c: 317:          
      +                                 i2c_object.i2cErrors++;
 14231  0D14  3001               	movlw	1
 14232  0D15  00F2               	movwf	??_I2C_ISR
 14233  0D16  0872               	movf	??_I2C_ISR,w
 14234  0D17  0023               	movlb	3	; select bank3
 14235  0D18  07C1               	addwf	(_i2c_object^(0+384)+6),f
 14236                           
 14237                           ;mcc_generated_files/i2c.c: 318:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 14238  0D19  3004               	movlw	4
 14239  0D1A  319F  273E         	fcall	_I2C_Stop
 14240                           
 14241                           ;mcc_generated_files/i2c.c: 319:             }
 14242  0D1C  0008               	return
 14243  0D1D                     i1l3579:	
 14244                           
 14245                           ;mcc_generated_files/i2c.c: 321:             {;mcc_generated_files/i2c.c: 323:          
      +                                 SSP1BUF = (i2c_address >> 1) & 0x00FF;
 14246  0D1D  087D               	movf	I2C_ISR@i2c_address+1,w
 14247  0D1E  00F3               	movwf	??_I2C_ISR+1
 14248  0D1F  087C               	movf	I2C_ISR@i2c_address,w
 14249  0D20  00F2               	movwf	??_I2C_ISR
 14250  0D21  36F3               	lsrf	??_I2C_ISR+1,f
 14251  0D22  0CF2               	rrf	??_I2C_ISR,f
 14252  0D23  0872               	movf	??_I2C_ISR,w
 14253  0D24  0091               	movwf	17	;volatile
 14254                           
 14255                           ;mcc_generated_files/i2c.c: 326:                 if(i2c_address & 0x01)
 14256  0D25  1C7C               	btfss	I2C_ISR@i2c_address,0
 14257  0D26  2D2C               	goto	i1l3585
 14258                           
 14259                           ;mcc_generated_files/i2c.c: 327:                 {;mcc_generated_files/i2c.c: 330:      
      +                                         i2c_state = S_MASTER_10BIT_RESTART;
 14260  0D27  300B               	movlw	11
 14261  0D28  00F2               	movwf	??_I2C_ISR
 14262  0D29  0872               	movf	??_I2C_ISR,w
 14263  0D2A  00FB               	movwf	_i2c_state
 14264                           
 14265                           ;mcc_generated_files/i2c.c: 331:                 }
 14266  0D2B  0008               	return
 14267  0D2C                     i1l3585:	
 14268                           
 14269                           ;mcc_generated_files/i2c.c: 333:                 {;mcc_generated_files/i2c.c: 335:      
      +                                         i2c_state = S_MASTER_SEND_DATA;
 14270  0D2C  3003               	movlw	3
 14271  0D2D  00F2               	movwf	??_I2C_ISR
 14272  0D2E  0872               	movf	??_I2C_ISR,w
 14273  0D2F  00FB               	movwf	_i2c_state
 14274  0D30  0008               	return
 14275  0D31                     i1l503:	
 14276                           ;mcc_generated_files/i2c.c: 341:         case S_MASTER_10BIT_RESTART:
 14277                           
 14278                           
 14279                           ;mcc_generated_files/i2c.c: 343:             if(SSP1CON2bits.ACKSTAT)
 14280  0D31  1F16               	btfss	22,6	;volatile
 14281  0D32  2D3C               	goto	i1l504
 14282                           
 14283                           ;mcc_generated_files/i2c.c: 344:             {;mcc_generated_files/i2c.c: 345:          
      +                                 i2c_object.i2cErrors++;
 14284  0D33  3001               	movlw	1
 14285  0D34  00F2               	movwf	??_I2C_ISR
 14286  0D35  0872               	movf	??_I2C_ISR,w
 14287  0D36  0023               	movlb	3	; select bank3
 14288  0D37  07C1               	addwf	(_i2c_object^(0+384)+6),f
 14289                           
 14290                           ;mcc_generated_files/i2c.c: 346:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 14291  0D38  3004               	movlw	4
 14292  0D39  319F  273E         	fcall	_I2C_Stop
 14293                           
 14294                           ;mcc_generated_files/i2c.c: 347:             }
 14295  0D3B  0008               	return
 14296  0D3C                     i1l504:	
 14297                           ;mcc_generated_files/i2c.c: 348:             else
 14298                           
 14299                           
 14300                           ;mcc_generated_files/i2c.c: 349:             {;mcc_generated_files/i2c.c: 352:          
      +                                 SSP1CON2bits.RSEN = 1;
 14301  0D3C  1496               	bsf	22,1	;volatile
 14302                           
 14303                           ;mcc_generated_files/i2c.c: 356:                 i2c_address = 0x00F0 | ((i2c_address >>
      +                           8) & 0x0006);
 14304  0D3D  3006               	movlw	6
 14305  0D3E  057D               	andwf	I2C_ISR@i2c_address+1,w
 14306  0D3F  00F2               	movwf	??_I2C_ISR
 14307  0D40  30F0               	movlw	240
 14308  0D41  0472               	iorwf	??_I2C_ISR,w
 14309  0D42  00FC               	movwf	I2C_ISR@i2c_address
 14310  0D43  3000               	movlw	0
 14311  0D44  00FD               	movwf	I2C_ISR@i2c_address+1
 14312                           
 14313                           ;mcc_generated_files/i2c.c: 359:                 i2c_address |= 0x0001;
 14314  0D45  147C               	bsf	I2C_ISR@i2c_address,0
 14315                           
 14316                           ;mcc_generated_files/i2c.c: 362:                 i2c_10bit_address_restart = 1;
 14317  0D46  0023               	movlb	3	; select bank3
 14318  0D47  01CD               	clrf	I2C_ISR@i2c_10bit_address_restart^(0+384)
 14319  0D48  0ACD               	incf	I2C_ISR@i2c_10bit_address_restart^(0+384),f
 14320  0D49  2D0C               	goto	i1l3571
 14321  0D4A                     i1l3599:	
 14322                           
 14323                           ;mcc_generated_files/i2c.c: 383:             if(i2c_10bit_address_restart != 1)
 14324  0D4A  0023               	movlb	3	; select bank3
 14325  0D4B  034D               	decf	I2C_ISR@i2c_10bit_address_restart^(0+384),w
 14326  0D4C  1903               	btfsc	3,2
 14327  0D4D  2D6A               	goto	i1l3619
 14328                           
 14329                           ;mcc_generated_files/i2c.c: 384:             {;mcc_generated_files/i2c.c: 386:          
      +                                 i2c_address = p_i2c_trb_current->address;
 14330  0D4E  084A               	movf	_p_i2c_trb_current^(0+384),w
 14331  0D4F  0086               	movwf	6
 14332  0D50  084B               	movf	(_p_i2c_trb_current+1)^(0+384),w
 14333  0D51  0087               	movwf	7
 14334  0D52  3F40               	moviw [0]fsr1
 14335  0D53  00FC               	movwf	I2C_ISR@i2c_address
 14336  0D54  3F41               	moviw [1]fsr1
 14337  0D55  00FD               	movwf	I2C_ISR@i2c_address+1
 14338                           
 14339                           ;mcc_generated_files/i2c.c: 387:                 pi2c_buf_ptr = p_i2c_trb_current->pbuff
      +                          er;
 14340  0D56  084A               	movf	_p_i2c_trb_current^(0+384),w
 14341  0D57  0086               	movwf	6
 14342  0D58  084B               	movf	(_p_i2c_trb_current+1)^(0+384),w
 14343  0D59  0087               	movwf	7
 14344  0D5A  3143               	addfsr 1,3
 14345  0D5B  0801               	movf	1,w
 14346  0D5C  00F2               	movwf	??_I2C_ISR
 14347  0D5D  0872               	movf	??_I2C_ISR,w
 14348  0D5E  0022               	movlb	2	; select bank2
 14349  0D5F  00EF               	movwf	I2C_ISR@pi2c_buf_ptr^(0+256)
 14350                           
 14351                           ;mcc_generated_files/i2c.c: 388:                 i2c_bytes_left = p_i2c_trb_current->len
      +                          gth;
 14352  0D60  0023               	movlb	3	; select bank3
 14353  0D61  084A               	movf	_p_i2c_trb_current^(0+384),w
 14354  0D62  0086               	movwf	6
 14355  0D63  084B               	movf	(_p_i2c_trb_current+1)^(0+384),w
 14356  0D64  0087               	movwf	7
 14357  0D65  3142               	addfsr 1,2
 14358  0D66  0801               	movf	1,w
 14359  0D67  00F2               	movwf	??_I2C_ISR
 14360  0D68  0872               	movf	??_I2C_ISR,w
 14361  0D69  00CE               	movwf	I2C_ISR@i2c_bytes_left^(0+384)
 14362  0D6A                     i1l3619:	
 14363                           
 14364                           ;mcc_generated_files/i2c.c: 412:             {;mcc_generated_files/i2c.c: 414:          
      +                                 SSP1BUF = i2c_address;
 14365  0D6A  087C               	movf	I2C_ISR@i2c_address,w
 14366  0D6B  0024               	movlb	4	; select bank4
 14367  0D6C  0091               	movwf	17	;volatile
 14368                           
 14369                           ;mcc_generated_files/i2c.c: 415:                 if(i2c_address & 0x01)
 14370  0D6D  1C7C               	btfss	I2C_ISR@i2c_address,0
 14371  0D6E  2D2C               	goto	i1l3585
 14372                           
 14373                           ;mcc_generated_files/i2c.c: 416:                 {;mcc_generated_files/i2c.c: 418:      
      +                                         i2c_state = S_MASTER_ACK_ADDR;
 14374  0D6F  3005               	movlw	5
 14375  0D70  00F2               	movwf	??_I2C_ISR
 14376  0D71  0872               	movf	??_I2C_ISR,w
 14377  0D72  00FB               	movwf	_i2c_state
 14378                           
 14379                           ;mcc_generated_files/i2c.c: 419:                 }
 14380  0D73  0008               	return
 14381  0D74                     i1l514:	
 14382                           ;mcc_generated_files/i2c.c: 428:         case S_MASTER_SEND_DATA:
 14383                           
 14384                           
 14385                           ;mcc_generated_files/i2c.c: 431:             if(SSP1CON2bits.ACKSTAT)
 14386  0D74  1F16               	btfss	22,6	;volatile
 14387  0D75  2D81               	goto	i1l3633
 14388                           
 14389                           ;mcc_generated_files/i2c.c: 432:             {;mcc_generated_files/i2c.c: 434:          
      +                                 i2c_object.i2cErrors++;
 14390  0D76  3001               	movlw	1
 14391  0D77  00F2               	movwf	??_I2C_ISR
 14392  0D78  0872               	movf	??_I2C_ISR,w
 14393  0D79  0023               	movlb	3	; select bank3
 14394  0D7A  07C1               	addwf	(_i2c_object^(0+384)+6),f
 14395                           
 14396                           ;mcc_generated_files/i2c.c: 437:                 SSP1CON2bits.ACKSTAT = 0;
 14397  0D7B  0024               	movlb	4	; select bank4
 14398  0D7C  1316               	bcf	22,6	;volatile
 14399                           
 14400                           ;mcc_generated_files/i2c.c: 440:                 I2C_Stop(I2C_DATA_NO_ACK);
 14401  0D7D  3005               	movlw	5
 14402  0D7E  319F  273E         	fcall	_I2C_Stop
 14403                           
 14404                           ;mcc_generated_files/i2c.c: 442:             }
 14405  0D80  0008               	return
 14406  0D81                     i1l3633:	
 14407                           
 14408                           ;mcc_generated_files/i2c.c: 444:             {;mcc_generated_files/i2c.c: 446:          
      +                                 if(i2c_bytes_left-- == 0U)
 14409  0D81  3001               	movlw	1
 14410  0D82  0023               	movlb	3	; select bank3
 14411  0D83  02CE               	subwf	I2C_ISR@i2c_bytes_left^(0+384),f
 14412  0D84  0A4E               	incf	I2C_ISR@i2c_bytes_left^(0+384),w
 14413  0D85  1D03               	btfss	3,2
 14414  0D86  2D96               	goto	i1l3643
 14415                           
 14416                           ;mcc_generated_files/i2c.c: 447:                 {;mcc_generated_files/i2c.c: 451:      
      +                                         p_i2c_trb_current++;
 14417  0D87  3005               	movlw	5
 14418  0D88  07CA               	addwf	_p_i2c_trb_current^(0+384),f
 14419  0D89  3000               	movlw	0
 14420  0D8A  3DCB               	addwfc	(_p_i2c_trb_current+1)^(0+384),f
 14421                           
 14422                           ;mcc_generated_files/i2c.c: 454:                     if(--i2c_trb_count == 0)
 14423  0D8B  3001               	movlw	1
 14424  0D8C  02FA               	subwf	_i2c_trb_count,f
 14425  0D8D  1D03               	btfss	3,2
 14426  0D8E  2D93               	goto	i1l518
 14427                           
 14428                           ;mcc_generated_files/i2c.c: 455:                     {;mcc_generated_files/i2c.c: 456:  
      +                                                 I2C_Stop(I2C_MESSAGE_COMPLETE);
 14429  0D8F  3000               	movlw	0
 14430  0D90  319F  273E         	fcall	_I2C_Stop
 14431                           
 14432                           ;mcc_generated_files/i2c.c: 457:                     }
 14433  0D92  0008               	return
 14434  0D93                     i1l518:	
 14435                           ;mcc_generated_files/i2c.c: 458:                     else
 14436                           
 14437                           
 14438                           ;mcc_generated_files/i2c.c: 459:                     {;mcc_generated_files/i2c.c: 466:  
      +                                                 SSP1CON2bits.RSEN = 1;
 14439  0D93  0024               	movlb	4	; select bank4
 14440  0D94                     L7:	
 14441  0D94  1496               	bsf	22,1	;volatile
 14442  0D95  2D0C               	goto	i1l3571
 14443  0D96                     i1l3643:	
 14444                           
 14445                           ;mcc_generated_files/i2c.c: 474:                 {;mcc_generated_files/i2c.c: 476:      
      +                                         SSP1BUF = *pi2c_buf_ptr++;
 14446  0D96  0022               	movlb	2	; select bank2
 14447  0D97  086F               	movf	I2C_ISR@pi2c_buf_ptr^(0+256),w
 14448  0D98  0086               	movwf	6
 14449  0D99  0187               	clrf	7
 14450  0D9A  0801               	movf	1,w
 14451  0D9B  0024               	movlb	4	; select bank4
 14452  0D9C  0091               	movwf	17	;volatile
 14453  0D9D  3001               	movlw	1
 14454  0D9E  00F2               	movwf	??_I2C_ISR
 14455  0D9F  0872               	movf	??_I2C_ISR,w
 14456  0DA0  0022               	movlb	2	; select bank2
 14457  0DA1  07EF               	addwf	I2C_ISR@pi2c_buf_ptr^(0+256),f
 14458  0DA2  0008               	return
 14459  0DA3                     i1l521:	
 14460                           ;mcc_generated_files/i2c.c: 481:         case S_MASTER_ACK_ADDR:
 14461                           
 14462                           
 14463                           ;mcc_generated_files/i2c.c: 484:             if(SSP1CON2bits.ACKSTAT)
 14464  0DA3  1F16               	btfss	22,6	;volatile
 14465  0DA4  2DB0               	goto	i1l522
 14466                           
 14467                           ;mcc_generated_files/i2c.c: 485:             {;mcc_generated_files/i2c.c: 488:          
      +                                 i2c_object.i2cErrors++;
 14468  0DA5  3001               	movlw	1
 14469  0DA6  00F2               	movwf	??_I2C_ISR
 14470  0DA7  0872               	movf	??_I2C_ISR,w
 14471  0DA8  0023               	movlb	3	; select bank3
 14472  0DA9  07C1               	addwf	(_i2c_object^(0+384)+6),f
 14473                           
 14474                           ;mcc_generated_files/i2c.c: 491:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 14475  0DAA  3004               	movlw	4
 14476  0DAB  319F  273E         	fcall	_I2C_Stop
 14477                           
 14478                           ;mcc_generated_files/i2c.c: 494:                 SSP1CON2bits.ACKSTAT = 0;
 14479  0DAD  0024               	movlb	4	; select bank4
 14480  0DAE  1316               	bcf	22,6	;volatile
 14481                           
 14482                           ;mcc_generated_files/i2c.c: 495:             }
 14483  0DAF  0008               	return
 14484  0DB0                     i1l522:	
 14485                           ;mcc_generated_files/i2c.c: 496:             else
 14486                           
 14487                           
 14488                           ;mcc_generated_files/i2c.c: 497:             {;mcc_generated_files/i2c.c: 498:          
      +                                 SSP1CON2bits.RCEN = 1;
 14489  0DB0  1596               	bsf	22,3	;volatile
 14490                           
 14491                           ;mcc_generated_files/i2c.c: 499:                 i2c_state = S_MASTER_ACK_RCV_DATA;
 14492  0DB1  3008               	movlw	8
 14493  0DB2  00F2               	movwf	??_I2C_ISR
 14494  0DB3  0872               	movf	??_I2C_ISR,w
 14495  0DB4  00FB               	movwf	_i2c_state
 14496  0DB5  0008               	return
 14497  0DB6                     i1l3655:	
 14498                           
 14499                           ;mcc_generated_files/i2c.c: 508:             i2c_state = S_MASTER_ACK_RCV_DATA;
 14500  0DB6  3008               	movlw	8
 14501  0DB7  00F2               	movwf	??_I2C_ISR
 14502  0DB8  0872               	movf	??_I2C_ISR,w
 14503  0DB9  00FB               	movwf	_i2c_state
 14504                           
 14505                           ;mcc_generated_files/i2c.c: 511:             SSP1CON2bits.RCEN = 1;
 14506  0DBA  1596               	bsf	22,3	;volatile
 14507                           
 14508                           ;mcc_generated_files/i2c.c: 513:             break;
 14509  0DBB  0008               	return
 14510  0DBC                     i1l3659:	
 14511                           
 14512                           ;mcc_generated_files/i2c.c: 518:             *pi2c_buf_ptr++ = SSP1BUF;
 14513  0DBC  0811               	movf	17,w	;volatile
 14514  0DBD  00F2               	movwf	??_I2C_ISR
 14515  0DBE  0022               	movlb	2	; select bank2
 14516  0DBF  086F               	movf	I2C_ISR@pi2c_buf_ptr^(0+256),w
 14517  0DC0  0086               	movwf	6
 14518  0DC1  0187               	clrf	7
 14519  0DC2  0872               	movf	??_I2C_ISR,w
 14520  0DC3  0081               	movwf	1
 14521  0DC4  3001               	movlw	1
 14522  0DC5  00F2               	movwf	??_I2C_ISR
 14523  0DC6  0872               	movf	??_I2C_ISR,w
 14524  0DC7  07EF               	addwf	I2C_ISR@pi2c_buf_ptr^(0+256),f
 14525                           
 14526                           ;mcc_generated_files/i2c.c: 521:             if(--i2c_bytes_left)
 14527  0DC8  3001               	movlw	1
 14528  0DC9  0023               	movlb	3	; select bank3
 14529  0DCA  02CE               	subwf	I2C_ISR@i2c_bytes_left^(0+384),f
 14530  0DCB  1903               	btfsc	3,2
 14531  0DCC  2DD4               	goto	i1l526
 14532                           
 14533                           ;mcc_generated_files/i2c.c: 522:             {;mcc_generated_files/i2c.c: 528:          
      +                                 SSP1CON2bits.ACKDT = 0;
 14534  0DCD  0024               	movlb	4	; select bank4
 14535  0DCE  1296               	bcf	22,5	;volatile
 14536                           
 14537                           ;mcc_generated_files/i2c.c: 531:                 i2c_state = S_MASTER_RCV_DATA;
 14538  0DCF  3006               	movlw	6
 14539  0DD0  00F2               	movwf	??_I2C_ISR
 14540  0DD1  0872               	movf	??_I2C_ISR,w
 14541  0DD2  00FB               	movwf	_i2c_state
 14542                           
 14543                           ;mcc_generated_files/i2c.c: 532:             }
 14544  0DD3  2DD8               	goto	i1l3671
 14545  0DD4                     i1l526:	
 14546                           ;mcc_generated_files/i2c.c: 533:             else
 14547                           
 14548                           
 14549                           ;mcc_generated_files/i2c.c: 534:             {;mcc_generated_files/i2c.c: 538:          
      +                                 SSP1CON2bits.ACKDT = 1;
 14550  0DD4  0024               	movlb	4	; select bank4
 14551  0DD5  1696               	bsf	22,5	;volatile
 14552                           
 14553                           ;mcc_generated_files/i2c.c: 540:                 I2C_FunctionComplete();
 14554  0DD6  319E  26E9         	fcall	_I2C_FunctionComplete
 14555  0DD8                     i1l3671:	
 14556                           
 14557                           ;mcc_generated_files/i2c.c: 544:             SSP1CON2bits.ACKEN = 1;
 14558  0DD8  0024               	movlb	4	; select bank4
 14559  0DD9  1616               	bsf	22,4	;volatile
 14560                           
 14561                           ;mcc_generated_files/i2c.c: 545:             break;
 14562  0DDA  0008               	return
 14563  0DDB                     i1l3673:	
 14564                           
 14565                           ;mcc_generated_files/i2c.c: 551:             I2C_Stop(I2C_MESSAGE_COMPLETE);
 14566  0DDB  3000               	movlw	0
 14567  0DDC  319F  273E         	fcall	_I2C_Stop
 14568                           
 14569                           ;mcc_generated_files/i2c.c: 552:             break;
 14570  0DDE  0008               	return
 14571  0DDF                     i1l3675:	
 14572                           
 14573                           ;mcc_generated_files/i2c.c: 558:             i2c_object.i2cErrors++;
 14574  0DDF  3001               	movlw	1
 14575  0DE0  00F2               	movwf	??_I2C_ISR
 14576  0DE1  0872               	movf	??_I2C_ISR,w
 14577  0DE2  0023               	movlb	3	; select bank3
 14578  0DE3  07C1               	addwf	(_i2c_object^(0+384)+6),f
 14579                           
 14580                           ;mcc_generated_files/i2c.c: 559:             I2C_Stop(I2C_LOST_STATE);
 14581  0DE4  3006               	movlw	6
 14582  0DE5  319F  273E         	fcall	_I2C_Stop
 14583                           
 14584                           ;mcc_generated_files/i2c.c: 560:             break;
 14585  0DE7  0008               	return
 14586  0DE8                     i1l3681:	
 14587  0DE8  087B               	movf	_i2c_state,w
 14588  0DE9  00F2               	movwf	??_I2C_ISR
 14589  0DEA  01F3               	clrf	??_I2C_ISR+1
 14590                           
 14591                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14592                           ; Switch size 1, requested type "simple"
 14593                           ; Number of cases is 1, Range of values is 0 to 0
 14594                           ; switch strategies available:
 14595                           ; Name         Instructions Cycles
 14596                           ; simple_byte            4     3 (average)
 14597                           ; direct_byte            8     6 (fixed)
 14598                           ; jumptable            260     6 (fixed)
 14599                           ;	Chosen strategy is simple_byte
 14600  0DEB  0873               	movf	??_I2C_ISR+1,w
 14601  0DEC  3A00               	xorlw	0	; case 0
 14602  0DED  1903               	skipnz
 14603  0DEE  2DF0               	goto	i1l4111
 14604  0DEF  2DDF               	goto	i1l3675
 14605  0DF0                     i1l4111:	
 14606                           
 14607                           ; Switch size 1, requested type "simple"
 14608                           ; Number of cases is 11, Range of values is 0 to 11
 14609                           ; switch strategies available:
 14610                           ; Name         Instructions Cycles
 14611                           ; direct_byte           30     6 (fixed)
 14612                           ; simple_byte           34    18 (average)
 14613                           ; jumptable            260     6 (fixed)
 14614                           ;	Chosen strategy is simple_byte
 14615  0DF0  0872               	movf	??_I2C_ISR,w
 14616  0DF1  3A00               	xorlw	0	; case 0
 14617  0DF2  1903               	skipnz
 14618  0DF3  2CD9               	goto	i1l492
 14619  0DF4  3A01               	xorlw	1	; case 1
 14620  0DF5  1903               	skipnz
 14621  0DF6  2D11               	goto	i1l497
 14622  0DF7  3A03               	xorlw	3	; case 2
 14623  0DF8  1903               	skipnz
 14624  0DF9  2D4A               	goto	i1l3599
 14625  0DFA  3A01               	xorlw	1	; case 3
 14626  0DFB  1903               	skipnz
 14627  0DFC  2D74               	goto	i1l514
 14628  0DFD  3A07               	xorlw	7	; case 4
 14629  0DFE  1903               	skipnz
 14630  0DFF  2DDB               	goto	i1l3673
 14631  0E00  3A01               	xorlw	1	; case 5
 14632  0E01  1903               	skipnz
 14633  0E02  2DA3               	goto	i1l521
 14634  0E03  3A03               	xorlw	3	; case 6
 14635  0E04  1903               	skipnz
 14636  0E05  2DB6               	goto	i1l3655
 14637  0E06  3A01               	xorlw	1	; case 7
 14638  0E07  1903               	skipnz
 14639  0E08  2DDB               	goto	i1l3673
 14640  0E09  3A0F               	xorlw	15	; case 8
 14641  0E0A  1903               	skipnz
 14642  0E0B  2DBC               	goto	i1l3659
 14643  0E0C  3A02               	xorlw	2	; case 10
 14644  0E0D  1903               	skipnz
 14645  0E0E  2D12               	goto	i1l498
 14646  0E0F  3A01               	xorlw	1	; case 11
 14647  0E10  1903               	skipnz
 14648  0E11  2D31               	goto	i1l503
 14649  0E12  2DDF               	goto	i1l3675
 14650  0E13  0008               	return
 14651  0E14                     __end_of_I2C_ISR:	
 14652                           
 14653                           	psect	text55
 14654  1F3E                     __ptext55:	
 14655 ;; *************** function _I2C_Stop *****************
 14656 ;; Defined at:
 14657 ;;		line 583 in file "mcc_generated_files/i2c.c"
 14658 ;; Parameters:    Size  Location     Type
 14659 ;;  completion_c    1    wreg     enum E9633
 14660 ;; Auto vars:     Size  Location     Type
 14661 ;;  completion_c    1    1[COMMON] enum E9633
 14662 ;; Return value:  Size  Location     Type
 14663 ;;                  1    wreg      void 
 14664 ;; Registers used:
 14665 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14666 ;; Tracked objects:
 14667 ;;		On entry : 18/3
 14668 ;;		On exit  : 1F/3
 14669 ;;		Unchanged: 0/0
 14670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;Total ram usage:        2 bytes
 14676 ;; Hardware stack levels used:    1
 14677 ;; This function calls:
 14678 ;;		Nothing
 14679 ;; This function is called by:
 14680 ;;		_I2C_ISR
 14681 ;; This function uses a non-reentrant model
 14682 ;;
 14683                           
 14684                           
 14685                           ;psect for function _I2C_Stop
 14686  1F3E                     _I2C_Stop:	
 14687                           
 14688                           ;incstack = 0
 14689                           ; Regs used in _I2C_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 14690                           ;I2C_Stop@completion_code stored from wreg
 14691  1F3E  00F1               	movwf	I2C_Stop@completion_code
 14692                           
 14693                           ;mcc_generated_files/i2c.c: 583: void I2C_Stop(I2C_MESSAGE_STATUS completion_code);mcc_g
      +                          enerated_files/i2c.c: 584: {;mcc_generated_files/i2c.c: 586:     SSP1CON2bits.PEN = 1;
 14694  1F3F  0024               	movlb	4	; select bank4
 14695  1F40  1516               	bsf	22,2	;volatile
 14696                           
 14697                           ;mcc_generated_files/i2c.c: 589:     if (p_i2c_current->pTrFlag != ((void*)0))
 14698  1F41  0023               	movlb	3	; select bank3
 14699  1F42  0848               	movf	_p_i2c_current^(0+384),w
 14700  1F43  0086               	movwf	6
 14701  1F44  0849               	movf	(_p_i2c_current+1)^(0+384),w
 14702  1F45  0087               	movwf	7
 14703  1F46  3143               	addfsr 1,3
 14704  1F47  0801               	movf	1,w
 14705  1F48  1903               	btfsc	3,2
 14706  1F49  2F56               	goto	i1l3343
 14707                           
 14708                           ;mcc_generated_files/i2c.c: 590:     {;mcc_generated_files/i2c.c: 592:         *(p_i2c_c
      +                          urrent->pTrFlag) = completion_code;
 14709  1F4A  0871               	movf	I2C_Stop@completion_code,w
 14710  1F4B  00F0               	movwf	??_I2C_Stop
 14711  1F4C  0848               	movf	_p_i2c_current^(0+384),w
 14712  1F4D  0086               	movwf	6
 14713  1F4E  0849               	movf	(_p_i2c_current+1)^(0+384),w
 14714  1F4F  0087               	movwf	7
 14715  1F50  3143               	addfsr 1,3
 14716  1F51  0801               	movf	1,w
 14717  1F52  0086               	movwf	6
 14718  1F53  0187               	clrf	7
 14719  1F54  0870               	movf	??_I2C_Stop,w
 14720  1F55  0081               	movwf	1
 14721  1F56                     i1l3343:	
 14722                           
 14723                           ;mcc_generated_files/i2c.c: 596:     i2c_state = S_MASTER_IDLE;
 14724  1F56  01FB               	clrf	_i2c_state
 14725  1F57  0008               	return
 14726  1F58                     __end_of_I2C_Stop:	
 14727                           
 14728                           	psect	text56
 14729  1EE9                     __ptext56:	
 14730 ;; *************** function _I2C_FunctionComplete *****************
 14731 ;; Defined at:
 14732 ;;		line 565 in file "mcc_generated_files/i2c.c"
 14733 ;; Parameters:    Size  Location     Type
 14734 ;;		None
 14735 ;; Auto vars:     Size  Location     Type
 14736 ;;		None
 14737 ;; Return value:  Size  Location     Type
 14738 ;;                  1    wreg      void 
 14739 ;; Registers used:
 14740 ;;		wreg, status,2, status,0
 14741 ;; Tracked objects:
 14742 ;;		On entry : 1F/4
 14743 ;;		On exit  : 1F/3
 14744 ;;		Unchanged: 0/0
 14745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14748 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14750 ;;Total ram usage:        1 bytes
 14751 ;; Hardware stack levels used:    1
 14752 ;; This function calls:
 14753 ;;		Nothing
 14754 ;; This function is called by:
 14755 ;;		_I2C_ISR
 14756 ;; This function uses a non-reentrant model
 14757 ;;
 14758                           
 14759                           
 14760                           ;psect for function _I2C_FunctionComplete
 14761  1EE9                     _I2C_FunctionComplete:	
 14762                           
 14763                           ;mcc_generated_files/i2c.c: 569:     p_i2c_trb_current++;
 14764                           
 14765                           ;incstack = 0
 14766                           ; Regs used in _I2C_FunctionComplete: [wreg+status,2+status,0]
 14767  1EE9  3005               	movlw	5
 14768  1EEA  0023               	movlb	3	; select bank3
 14769  1EEB  07CA               	addwf	_p_i2c_trb_current^(0+384),f
 14770  1EEC  3000               	movlw	0
 14771  1EED  3DCB               	addwfc	(_p_i2c_trb_current+1)^(0+384),f
 14772                           
 14773                           ;mcc_generated_files/i2c.c: 572:     if(--i2c_trb_count == 0)
 14774  1EEE  3001               	movlw	1
 14775  1EEF  02FA               	subwf	_i2c_trb_count,f
 14776  1EF0  1D03               	btfss	3,2
 14777  1EF1  2EF7               	goto	i1l533
 14778                           
 14779                           ;mcc_generated_files/i2c.c: 573:     {;mcc_generated_files/i2c.c: 574:         i2c_state
      +                           = S_MASTER_SEND_STOP;
 14780  1EF2  3004               	movlw	4
 14781  1EF3  00F0               	movwf	??_I2C_FunctionComplete
 14782  1EF4  0870               	movf	??_I2C_FunctionComplete,w
 14783  1EF5  00FB               	movwf	_i2c_state
 14784                           
 14785                           ;mcc_generated_files/i2c.c: 575:     }
 14786  1EF6  0008               	return
 14787  1EF7                     i1l533:	
 14788                           ;mcc_generated_files/i2c.c: 576:     else
 14789                           
 14790                           
 14791                           ;mcc_generated_files/i2c.c: 577:     {;mcc_generated_files/i2c.c: 578:         i2c_state
      +                           = S_MASTER_RESTART;
 14792  1EF7  01FB               	clrf	_i2c_state
 14793  1EF8  0AFB               	incf	_i2c_state,f
 14794  1EF9  0008               	return
 14795  1EFA                     __end_of_I2C_FunctionComplete:	
 14796                           
 14797                           	psect	text57
 14798  0002                     __ptext57:	
 14799 ;; *************** function _I2C_BusCollisionISR *****************
 14800 ;; Defined at:
 14801 ;;		line 742 in file "mcc_generated_files/i2c.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;		None
 14804 ;; Auto vars:     Size  Location     Type
 14805 ;;		None
 14806 ;; Return value:  Size  Location     Type
 14807 ;;                  1    wreg      void 
 14808 ;; Registers used:
 14809 ;;		None
 14810 ;; Tracked objects:
 14811 ;;		On entry : 1F/0
 14812 ;;		On exit  : 1F/0
 14813 ;;		Unchanged: 0/0
 14814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;Total ram usage:        0 bytes
 14820 ;; Hardware stack levels used:    1
 14821 ;; This function calls:
 14822 ;;		Nothing
 14823 ;; This function is called by:
 14824 ;;		_INTERRUPT_InterruptManager
 14825 ;; This function uses a non-reentrant model
 14826 ;;
 14827                           
 14828                           
 14829                           ;psect for function _I2C_BusCollisionISR
 14830  0002                     _I2C_BusCollisionISR:	
 14831                           
 14832                           ;mcc_generated_files/i2c.c: 745:  PIR2bits.BCL1IF = 0;
 14833                           
 14834                           ;incstack = 0
 14835                           ; Regs used in _I2C_BusCollisionISR: []
 14836  0002  1191               	bcf	17,3	;volatile
 14837  0003  0008               	return
 14838  0004                     __end_of_I2C_BusCollisionISR:	
 14839  007E                     btemp	set	126	;btemp
 14840  007E                     int$flags	set	126
 14841  007E                     wtemp0	set	126


Data Sizes:
    Strings     189
    Constant    0
    Data        46
    BSS         274
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     80      80
    BANK1            80     74      80
    BANK2            80     79      80
    BANK3            80      0      71
    BANK4            80      0      54
    BANK5            80      0      44
    BANK6            80      0      70
    BANK7            80      0      73
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11            8      0       0
    BANK12            0      0       0

Pointer List with Targets:

    get_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 0
		 -> Sleep(), 

    get_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> WriteEnvSensor(), 

    get_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> ReadEnvSensor(), 

    i2c_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    WriteEnvSensor@trb.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_tr_queue.pTrFlag	PTR enum E9633 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 120
		 -> WriteEnvSensor@trb(BIGRAM[120]), I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    S54$4$2	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    S54$3$2	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 73
		 -> STR_12(CODE[3]), checksum(BANK3[6]), STR_11(CODE[6]), main@convertedNumber(BANK2[16]), 
		 -> GetNavData@strId(COMMON[12]), STR_10(CODE[5]), STR_7(CODE[14]), GetNavData@data_type(COMMON[7]), 
		 -> STR_6(CODE[26]), STR_5(CODE[26]), STR_4(CODE[26]), STR_3(CODE[26]), 
		 -> STR_2(CODE[26]), STR_1(CODE[26]), message_end(BANK7[73]), message_start(BANK6[70]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 73
		 -> STR_12(CODE[3]), checksum(BANK3[6]), STR_11(CODE[6]), main@convertedNumber(BANK2[16]), 
		 -> GetNavData@strId(COMMON[12]), STR_10(CODE[5]), STR_7(CODE[14]), GetNavData@data_type(COMMON[7]), 
		 -> STR_6(CODE[26]), STR_5(CODE[26]), STR_4(CODE[26]), STR_3(CODE[26]), 
		 -> STR_2(CODE[26]), STR_1(CODE[26]), message_end(BANK7[73]), message_start(BANK6[70]), 

    env_sensor.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    env_sensor.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    env_sensor.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    WriteEnvSensor@reg_data	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    ReadEnvSensor@data	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    TransmitString@message	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    crc16@data	PTR PTR unsigned char  size(1) Largest target is 2
		 -> messages(BANK1[2]), 

    crc16_update@pData	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    messages	PTR unsigned char [2] size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    IntToString@dest	PTR unsigned char  size(2) Largest target is 16
		 -> main@convertedNumber(BANK2[16]), GetNavData@strId(COMMON[12]), 

    UIntToHexString@dest	PTR unsigned char  size(1) Largest target is 6
		 -> checksum(BANK3[6]), 

    ReverseString@opposite	PTR unsigned char  size(2) Largest target is 16
		 -> checksum(BANK3[6]), main@convertedNumber(BANK2[16]), GetNavData@strId(COMMON[12]), 

    ReverseString@str	PTR unsigned char  size(2) Largest target is 16
		 -> checksum(BANK3[6]), main@convertedNumber(BANK2[16]), GetNavData@strId(COMMON[12]), 

    InsertString@dest	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    InsertString@src	PTR unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[3]), checksum(BANK3[6]), STR_11(CODE[6]), main@convertedNumber(BANK2[16]), 
		 -> GetNavData@strId(COMMON[12]), STR_10(CODE[5]), 

    Insert@dest	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    ClearString@str	PTR unsigned char  size(2) Largest target is 73
		 -> main@convertedNumber(BANK2[16]), GetNavData@data_type(COMMON[7]), message_end(BANK7[73]), message_start(BANK6[70]), 

    I2C_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 20
		 -> WriteEnvSensor@local_address(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), bme280_set_regs@temp_buff(BANK0[20]), 

    I2C_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterWriteTRBBuild@ptrb	PTR struct . size(2) Largest target is 120
		 -> WriteEnvSensor@trb(BIGRAM[120]), I2C_MasterWrite@trBlock(BANK3[5]), 

    I2C_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb	PTR struct . size(2) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), 

    i2c_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrTail.pTrFlag	PTR enum E9633 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 120
		 -> WriteEnvSensor@trb(BIGRAM[120]), I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    I2C_MasterTRBInsert@ptrb_list	PTR struct . size(2) Largest target is 120
		 -> WriteEnvSensor@trb(BIGRAM[120]), I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    I2C_MasterTRBInsert@pflag	PTR enum E9633 size(1) Largest target is 1
		 -> WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterRead@pflag	PTR enum E9633 size(1) Largest target is 1
		 -> ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterRead@pdata	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    F9744.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterWrite@pflag	PTR enum E9633 size(1) Largest target is 1
		 -> ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 1
		 -> ReadEnvSensor@reg_addr(BANK0[1]), 

    F9738.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), NULL(NULL[0]), 
		 -> bme280_init@chip_id(BANK0[1]), 

    p_i2c_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_trb_current	PTR struct . size(2) Largest target is 120
		 -> WriteEnvSensor@trb(BIGRAM[120]), I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), NULL(NULL[0]), 

    i2c_object.pTrHead.pTrFlag	PTR enum E9633 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 120
		 -> WriteEnvSensor@trb(BIGRAM[120]), I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    S1298$pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_current.pbuffer	PTR unsigned char  size(1) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    S1310$pTrFlag	PTR enum E9633 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_current.pTrFlag	PTR enum E9633 size(1) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    S1310$ptrb_list	PTR struct . size(2) Largest target is 120
		 -> WriteEnvSensor@trb(BIGRAM[120]), I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    p_i2c_current.ptrb_list	PTR struct . size(2) Largest target is 120
		 -> WriteEnvSensor@trb(BIGRAM[120]), I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    p_i2c_current	PTR volatile struct . size(2) Largest target is 5
		 -> i2c_tr_queue(BANK3[5]), NULL(NULL[0]), 

    S1321$pTrHead	PTR struct . size(2) Largest target is 5
		 -> i2c_tr_queue(BANK3[5]), 

    i2c_object.pTrHead	PTR struct . size(2) Largest target is 5
		 -> i2c_tr_queue(BANK3[5]), 

    S1321$pTrTail	PTR struct . size(2) Largest target is 5
		 -> i2c_tr_queue(BANK3[5]), 

    i2c_object.pTrTail	PTR struct . size(2) Largest target is 5
		 -> i2c_tr_queue(BANK3[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    null_ptr_check@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    null_ptr_check@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    null_ptr_check@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    null_ptr_check@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    parse_humidity_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_humidity_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_humidity_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_humidity_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_humidity_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    parse_humidity_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> env_sensor.calib_data(BANK0[37]), main@env_sensor(BANK2[51]), 

    parse_temp_press_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_temp_press_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_temp_press_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_temp_press_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_temp_press_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    parse_temp_press_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> env_sensor.calib_data(BANK0[37]), main@env_sensor(BANK2[51]), 

    interleave_reg_addr@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(COMMON[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    interleave_reg_addr@reg_addr	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(COMMON[1]), set_filter_standby_settings@reg_addr(COMMON[1]), set_osr_press_temp_settings@reg_addr(COMMON[1]), set_osr_humidity_settings@reg_addr(COMMON[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    interleave_reg_addr@temp_buff	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    get_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    compensate_pressure@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    compensate_pressure@calib_data	PTR const struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    compensate_temperature@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    compensate_temperature@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    bme280_compensate_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    bme280_compensate_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_compensate_data@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    bme280_parse_sensor_data@uncomp_data	PTR struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK1[12]), 

    bme280_parse_sensor_data@reg_data	PTR const unsigned char  size(1) Largest target is 8
		 -> bme280_get_sensor_data@reg_data(BANK1[8]), 

    bme280_get_sensor_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_sensor_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_get_sensor_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    bme280_soft_reset@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_soft_reset@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_soft_reset@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_soft_reset@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    bme280_get_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(COMMON[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    bme280_set_regs@reg_addr	PTR unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(COMMON[1]), set_filter_standby_settings@reg_addr(COMMON[1]), set_osr_press_temp_settings@reg_addr(COMMON[1]), set_osr_humidity_settings@reg_addr(COMMON[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    bme280_set_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    bme280_get_regs@reg_data	PTR unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK1[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    bme280_get_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 

    S54bme280_dev$delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_init@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    S54bme280_dev$write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_init@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    S54bme280_dev$read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK2[51]), 


Critical Paths under _main in COMMON

    _main->_ClearString
    _main->_InsertString
    _crc16->_strlen
    _crc16_update->_strlen
    _bme280_set_regs->_interleave_reg_addr
    _WriteEnvSensor->_I2C_MasterTRBInsert
    _WriteEnvSensor->___wmul
    _I2C_MasterWrite->_I2C_MasterTRBInsert
    _I2C_MasterWriteTRBBuild->___wmul
    _I2C_MasterRead->_I2C_MasterReadTRBBuild
    _I2C_MasterRead->_I2C_MasterTRBInsert
    _compensate_temperature->___aldiv
    _compensate_pressure->___lldiv
    ___aldiv->___lmul
    _TransmitString->_TransmitByte
    _TransmitByte->_TransmitBit
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _IntToString->___awdiv
    _IntToString->___awmod
    _ReverseString->___awdiv
    _ReverseString->_strlen
    _InsertString->_Insert
    _InsertString->_strlen
    _ClearString->_strlen

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_ISR->_I2C_Stop

Critical Paths under _main in BANK0

    _main->_bme280_init
    _crc16->_crc16_update
    _bme280_init->_get_calib_data
    _get_calib_data->_bme280_get_regs
    _bme280_soft_reset->_bme280_set_regs
    _bme280_set_regs->_WriteEnvSensor
    _WriteEnvSensor->_I2C_MasterWriteTRBBuild
    _bme280_get_sensor_data->_bme280_compensate_data
    _bme280_get_regs->_ReadEnvSensor
    _ReadEnvSensor->_I2C_MasterWrite
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2C_MasterRead->_I2C_MasterReadTRBBuild
    _bme280_compensate_data->_compensate_temperature
    _compensate_temperature->___aldiv
    _compensate_pressure->___aldiv
    ___aldiv->___lmul
    _UIntToHexString->_ReverseString
    _IntToString->_ReverseString
    _ReverseString->___awdiv
    _InsertString->_Insert

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_bme280_get_sensor_data
    _bme280_compensate_data->_compensate_pressure

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                91    91      0   71081
                                             75 BANK0      5     5      0
                                             67 BANK1      7     7      0
                                              0 BANK2     79    79      0
                        _ClearString
                         _FlashError
                             _Insert
                       _InsertString
                        _IntToString
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                     _TransmitString
                    _UIntToHexString
             _bme280_get_sensor_data
                        _bme280_init
                              _crc16
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _crc16                                                9     7      2    1454
                                              9 BANK0      9     7      2
                       _crc16_update
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _crc16_update                                         9     5      4     367
                                              0 BANK0      9     5      4
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _bme280_init                                          7     7      0   22880
                                             68 BANK0      7     7      0
                              _Sleep *
                    _bme280_get_regs
                  _bme280_soft_reset
                     _get_calib_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _get_calib_data                                      32    32      0    8663
                                             36 BANK0     32    32      0
                    _bme280_get_regs
          _parse_humidity_calib_data
        _parse_temp_press_calib_data
 ---------------------------------------------------------------------------------
 (3) _parse_temp_press_calib_data                          4     3      1     968
                                              4 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _parse_humidity_calib_data                           14    13      1     510
                                              4 COMMON     4     3      1
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (2) _bme280_soft_reset                                    7     7      0    6458
                                             55 BANK0      7     7      0
                              _Sleep *
                    _bme280_set_regs
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (3) _bme280_set_regs                                     31    28      3    5667
                                             24 BANK0     31    28      3
                     _WriteEnvSensor *
                _interleave_reg_addr
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (4) _interleave_reg_addr                                  8     5      3     483
                                              4 COMMON     6     3      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _WriteEnvSensor                                      16    11      5    2766
                                              8 BANK0     16    11      5
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     588
                                              4 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Sleep                                               12     8      4     151
                                              4 COMMON     4     0      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _bme280_get_sensor_data                              27    25      2   26995
                                             67 BANK0      5     3      2
                                             45 BANK1     22    22      0
             _bme280_compensate_data
                    _bme280_get_regs
           _bme280_parse_sensor_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _bme280_parse_sensor_data                            22    21      1     535
                                              4 COMMON     1     0      1
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 (3) _bme280_get_regs                                      9     5      4    6821
                                             27 BANK0      9     5      4
                      _ReadEnvSensor *
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _null_ptr_check                                       4     4      0     409
                                              4 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _ReadEnvSensor                                       12     7      5    3931
                                             15 BANK0     12     7      5
                         _FlashError
                     _I2C_MasterRead
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWrite                                      7     3      4    2003
                                              8 BANK0      7     3      4
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterWriteTRBBuild                              8     2      6    1044
                                              0 BANK0      8     2      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterRead                                       7     3      4    1402
                                              2 BANK0      7     3      4
             _I2C_MasterReadTRBBuild
                _I2C_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterTRBInsert                                  6     3      3     588
                                              4 COMMON     6     3      3
    _I2C_WaitForLastPacketToComplete
 ---------------------------------------------------------------------------------
 (7) _I2C_WaitForLastPacketToComplete                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterReadTRBBuild                               8     2      6     434
                                              4 COMMON     6     0      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _FlashError                                           4     4      0      46
                                              4 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _bme280_compensate_data                               6     3      3   18778
                                             61 BANK0      6     3      3
                _compensate_pressure
             _compensate_temperature
 ---------------------------------------------------------------------------------
 (3) _compensate_temperature                              39    35      4    8561
                                             22 BANK0     39    35      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _compensate_pressure                                 67    63      4    9635
                                             22 BANK0     22    18      4
                                              0 BANK1     45    45      0
                            ___aldiv
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    3380
                                              4 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     466
                                              4 COMMON     6     6      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8    4600
                                              8 COMMON     1     1      0
                                              8 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _UIntToHexString                                     19    14      5    2697
                                             19 BANK0     19    14      5
                      _ReverseString
                              _crc16 (ARG)
 ---------------------------------------------------------------------------------
 (1) _TransmitString                                       6     6      0    1089
                                              0 BANK0      6     6      0
                       _TransmitByte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _TransmitByte                                         4     4      0     112
                                              6 COMMON     4     4      0
                        _TransmitBit
 ---------------------------------------------------------------------------------
 (3) _TransmitBit                                          2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              6 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IntToString                                         10     6      4    4717
                                             19 BANK0     10     6      4
                      _ReverseString
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                              4 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReverseString                                       15    13      2    2158
                                              4 BANK0     15    13      2
                            ___awdiv
                             _strlen
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     730
                                              4 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _InsertString                                        12     6      6    5271
                                              9 COMMON     1     1      0
                                              5 BANK0     11     5      6
                             _Insert
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _Insert                                              10     5      5    2217
                                              4 COMMON     5     0      5
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _ClearString                                          7     5      2    1310
                                              9 COMMON     1     1      0
                                              0 BANK0      6     4      2
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               5     3      2     798
                                              4 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0      22
                _I2C_BusCollisionISR
                            _I2C_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                           _TimerISR *
 ---------------------------------------------------------------------------------
 (10) _TimerISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_ISR                                              2     2      0      22
                                              2 COMMON     2     2      0
               _I2C_FunctionComplete
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _I2C_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearString
     _strlen
   _FlashError
   _Insert
   _InsertString
     _Insert
     _strlen
   _IntToString
     _ReverseString
       ___awdiv
       _strlen
     ___awdiv
     ___awmod
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _TransmitString
     _TransmitByte
       _TransmitBit
     _strlen
   _UIntToHexString
     _ReverseString
       ___awdiv
       _strlen
     _crc16 (ARG)
       _crc16_update
         _strlen (ARG)
       _strlen
   _bme280_get_sensor_data
     _bme280_compensate_data
       _compensate_pressure
         ___aldiv
           ___lmul (ARG)
         ___lldiv
         ___lmul
       _compensate_temperature
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _bme280_get_regs
       _ReadEnvSensor *
         _FlashError
         _I2C_MasterRead
           _I2C_MasterReadTRBBuild
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
           _I2C_MasterWriteTRBBuild
             ___wmul (ARG)
       _null_ptr_check *
     _bme280_parse_sensor_data
     _null_ptr_check
   _bme280_init
     _Sleep *
     _bme280_get_regs *
       _ReadEnvSensor *
         _FlashError
         _I2C_MasterRead
           _I2C_MasterReadTRBBuild
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
           _I2C_MasterWriteTRBBuild
             ___wmul (ARG)
       _null_ptr_check *
     _bme280_soft_reset *
       _Sleep *
       _bme280_set_regs *
         _WriteEnvSensor *
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
           _I2C_MasterWriteTRBBuild
             ___wmul (ARG)
           ___wmul
         _interleave_reg_addr *
         _null_ptr_check *
       _null_ptr_check *
     _get_calib_data *
       _bme280_get_regs
         _ReadEnvSensor *
           _FlashError
           _I2C_MasterRead
             _I2C_MasterReadTRBBuild
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
             _I2C_MasterWriteTRBBuild
               ___wmul (ARG)
         _null_ptr_check *
       _parse_humidity_calib_data
       _parse_temp_press_calib_data
     _null_ptr_check *
   _crc16
     _crc16_update
       _strlen (ARG)
     _strlen
   _strlen

 _INTERRUPT_InterruptManager (ROOT)
   _I2C_BusCollisionISR
   _I2C_ISR
     _I2C_FunctionComplete
     _I2C_Stop
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _TimerISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4A      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4F      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      47      11       88.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      36      13       67.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      46      17       87.5%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      49      19       91.2%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     236      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11               8      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     236      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Sep  3 18:31:10 2019

                     __end_of_ClearString 1FD9                     I2C_ISR@i2c_bytes_left 01CE  
                             __CFG_CP$OFF 0000          bme280_parse_sensor_data@data_lsb 002C  
        bme280_parse_sensor_data@data_msb 0030                                        l53 15BF  
                                      l70 093A                                        l63 1289  
                            ___awdiv@sign 0021                                        _id 01C6  
                     ___wmul@multiplicand 0076                           _timer0ReloadVal 01E6  
                 ?_I2C_MasterReadTRBBuild 0074          __end_of_bme280_parse_sensor_data 0CC5  
                             __CFG_LVP$ON 0000                                       l124 1557  
                                     l236 1FAC                                       l190 0478  
                                     l183 07BB                                       l194 0615  
                                     l721 07D4                                       l626 1064  
                                     l670 170D                                       l735 1229  
                                     l755 1F2D                                       l891 09F6  
                                     l989 1F7A         bme280_parse_sensor_data@data_xlsb 0028  
                         __end_of_I2C_ISR 0E14                              ___awmod@sign 0021  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000          bme280_parse_sensor_data@reg_data 0034  
                          bme280_init@dev 006A           __size_of_compensate_temperature 019F  
                       ___g_timeout_start 01C2                            ReverseString@i 0031  
                            __CFG_ZCD$OFF 0000                                      l1054 178F  
                                    l3023 07A5                                      l3025 07B3  
                                    l3203 120A                                      l3063 0447  
                                    l3137 1F13                                      l3073 05FA  
                                    l3225 1359                                      l4017 0E49  
                                    l3139 1F1F                                      l3075 0602  
                                    l3165 13C0                                      l3149 1F2F  
                                    l3077 060D                                      l3421 120D  
                                    l3191 13F7                                      l3183 13E6  
                                    l3175 13C8                                      l3159 13B5  
                                    l3255 1559                                      l2711 1494  
                                    l3511 15B8                                      l3423 1244  
                   __size_of_crc16_update 003D                                      l3177 13D4  
                                    l3249 1540                                      l2705 1484  
                                    l3505 15A1                                      l3417 122F  
                                    l3187 13EF                                      l3451 12D8  
                                    l3435 10C1                                      l2723 105B  
                                    l3365 15EA                                      l2709 148F  
                                    l2805 09B8                                      l2813 09E6  
                                    l3509 15B5                                      l3711 136C  
                                    l3463 12E5                                      l3455 12DF  
                                    l2911 17A0                                      l2807 09E2  
                                    l2743 1F74                                      l4079 0FE5  
                                    l3377 15EE                                      l3713 13A5  
                                    l3465 12F1                                      l3473 1306  
                                    l2921 17BE                                      l2729 1030  
                                    l2841 0A66                                      l3379 1627  
                                    l2819 09EA                                      l2763 1FAF  
                                    l2851 0A82                                      l3491 156D  
                                    l3709 1399                                      l3477 130E  
                                    l3469 12FD                                      l2933 17E9  
                                    l2765 1FB0                                      l2853 0AAD  
                                    l2919 17B0                                      l2791 098E  
                                    l2847 0AAB                                      l2839 09FD  
                                    l2775 10EA                                      l2937 17F7  
                                    l2929 17DE                                      l2865 114A  
                                    l2689 1EA1                                      l2785 098C  
                                    l2961 08AA                                      l2883 140C  
                                    l3771 1292                                      l2893 143A  
                                    l2885 141A                                      l2869 1154  
                                    l2789 0963                                      l2949 1261  
                                    l2981 08CD                                      l3773 12C8  
                                    l3935 1649                                      l2983 08E7  
                                    l3937 168F                                      l3785 1124  
                                    l2897 1445                                      l3947 1FC0  
                                    l3963 1758                                      l3955 172E  
                                    l2989 0906                                      l2997 0935  
                                    l3991 16F7                                      l3967 176B  
                                    l2999 093C                                      l3969 1778  
                                    l3979 16AA                                      STR_1 184E  
                                    STR_2 1834                                      STR_3 1882  
                                    STR_4 181A                                      STR_5 1868  
                                    STR_6 1800                                      STR_7 189C  
                                    STR_8 18B5                                      u2025 0A06  
                                    u2115 140F                                      u3005 12E8  
                                    u2205 17B3                                      _LATA 010C  
                                    _LATB 010D                                      u2135 141B  
                                    _LATC 010E                                      u3120 14AA  
                                    u3025 12F7                                      u2225 17BF  
                                    u2145 142F                                      u3130 14B7  
                                    u3035 12FE                                      u2235 17D3  
                                    u2155 143B                                      u2075 1155  
                                    u2245 17DF                                      u2085 115C  
                                    u2405 0650                                      u2415 06B9  
                                    u2505 04C1                    ??_I2C_FunctionComplete 0070  
                                    u2515 0538                                      u2445 0194  
                                    u1805 147E                                      u3335 13A3  
                                    u2615 13CB                                      u2455 01C2  
                                    u1815 148B                                      u3345 1377  
                                    u2545 087A                                      u3610 169E  
                                    u2635 13D5                                      u2395 063D  
                                    u3620 169F                                      u2645 13DF  
                                    u2485 0488                                      u2725 0BB1  
                                    u2565 07F7                                      u3445 129C  
                                    u2655 13E7                                      u3455 112E  
                                    u2495 04A7                                      u1855 108B  
                                    u2735 0BC8                                      u2745 0BDD  
                                    u2690 131B                                      u3555 1653  
                                    u3707 106B                                      u2755 0C1E  
                                    u1875 1F7B                                      u2940 10CC  
                                    u3660 0E70                                      u3565 1FCA  
                                    u3645 16E1                                      u3717 1078  
                                    u2765 0C36                                      u1885 1F80  
                                    u2950 10CD                                      u2934 10C6  
                                    u3727 1F32                                      u2935 10C5  
                                    u2775 0C4B                                      u3737 1F39  
                                    u3585 174B                                      u2785 0C8D  
                                    u3675 0FFD                                      u2885 15F8  
                                    u2965 10DD                                      u3687 0FE9  
                                    u3697 07FA                                      _TMR0 0015  
                                    _WPUA 020C                                      _WPUB 020D  
                                    _WPUC 020E                    WriteEnvSensor@reg_addr 0029  
     bme280_parse_sensor_data@uncomp_data 0074                    WriteEnvSensor@reg_data 002A  
       bme280_get_sensor_data@uncomp_data 00D7                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                                      _main 0E14  
                            TransmitBit@b 0075                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                  interleave_reg_addr@len 0076                          __end_of_I2C_Stop 1F58  
                           __CFG_BOREN$ON 0000                                      start 0023  
                    bme280_soft_reset@dev 005D               __end_of_compensate_pressure 0625  
                           __CFG_MCLRE$ON 0000                             ??_IntToString 0037  
                           _ReadEnvSensor 093E            __end_of_I2C_MasterReadTRBBuild 11A1  
                         bme280_init@rslt 0069                   __end_of_TMR0_Initialize 1F0F  
          ??_TMR0_DefaultInterruptHandler 0070                I2C_MasterReadTRBBuild@ptrb 0074  
          __size_of_OSCILLATOR_Initialize 0007                          ?_I2C_MasterWrite 0028  
           __end_of_OSCILLATOR_Initialize 0808                           __end_of___aldiv 1800  
                   ReverseString@opposite 002D                                     ?_main 0070  
                         __end_of___awdiv 13FC                                     STR_10 18B0  
                                   STR_11 18AA                                     STR_12 18BA  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 1313  
                              _FlashError 1062                           __end_of___lldiv 144E  
                  _bme280_compensate_data 14FC                           ___awdiv@divisor 0074  
                           _i2c_trb_count 007A                                     i1l503 0D31  
                                   i1l504 0D3C                                     i1l521 0DA3  
                                   i1l522 0DB0                                     i1l514 0D74  
                                   i1l533 1EF7                                     i1l526 0DD4  
                                   i1l518 0D93                                     i1l392 0021  
                                   i1l384 000D                                     i1l387 0019  
                                   i1l492 0CD9                                     i1l497 0D11  
                                   i1l498 0D12                           ___awdiv@counter 0020  
                            _crc16_update 120C                                Insert@dest 0024  
                       _bme280_soft_reset 11D4                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _RXPPS 0E24                                Insert@temp 0022  
       __size_of_TMR0_SetInterruptHandler 0005                  __size_of_bme280_get_regs 0042  
                     ___lmul@multiplicand 0024                 ?_TMR0_SetInterruptHandler 0074  
                                   _Sleep 07C4                          __end_of_TMR0_ISR 1EE9  
          compensate_pressure@uncomp_data 00B4                bme280_compensate_data@rslt 0061  
                      ?_bme280_soft_reset 0070                  UIntToHexString@remainder 003E  
                                   _crc16 128B                          crc16_update@wCrc 0022  
                        ?_UIntToHexString 0033                                     _ticks 00EA  
                                   main@i 00E6                                     pclath 000A  
                           TransmitByte@i 0078                       ??_bme280_soft_reset 0057  
                                   status 0003                                     wtemp0 007E  
                             _ClearString 1FB2                  __size_of_bme280_set_regs 009D  
                        ??_get_calib_data 0044                     bme280_soft_reset@rslt 005B  
                I2C_MasterTRBInsert@count 0079                  I2C_MasterTRBInsert@pflag 0076  
                              _i2c_object 01BB                           __initialization 0025  
                  _compensate_temperature 0625         parse_humidity_calib_data@reg_data 0029  
                          ?_ReadEnvSensor 002F                              __end_of_main 1000  
                               ??_I2C_ISR 0072                            __CFG_LPBOR$OFF 0000  
             ?_INTERRUPT_InterruptManager 0070                   ?_bme280_get_sensor_data 0063  
               __end_of_bme280_soft_reset 120C                                    ??_main 006B  
                   __end_of_ReverseString 1698                       __end_of_IntToString 1705  
                 __size_of_WriteEnvSensor 00C6                       _I2C_MasterTRBInsert 144E  
                        ??_null_ptr_check 0074           bme280_compensate_data@comp_data 005E  
                        ReverseString@str 0024                            __CFG_PLLEN$OFF 0000  
             I2C_MasterReadTRBBuild@pdata 0076                          __end_of_TimerISR 1EB4  
         compensate_pressure@pressure_max 00B5                 bme280_get_sensor_data@dev 0064  
                   ReadEnvSensor@reg_addr 0030                             ?_InsertString 0025  
                                  ?_Sleep 0074                  ?_I2C_MasterWriteTRBBuild 0020  
                _bme280_parse_sensor_data 0BA7                                    ?_crc16 0029  
                              Sleep@start 0024                          ___awdiv@dividend 0076  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _RC1STA 019D                                    _RB4PPS 0E9C  
                                  _RB6PPS 0E9E                                    _RB7PPS 0E9F  
                                  _ODCONA 028C                                    _ODCONB 028D  
                                  _ODCONC 028E                                    i1l4111 0DF0  
                                  i1l3343 1F56                                    i1l3633 0D81  
                                  i1l3643 0D96                                    i1l3619 0D6A  
                                  i1l3571 0D0C                                    i1l3671 0DD8  
                                  i1l3655 0DB6                                    i1l3567 0D01  
                                  i1l3673 0DDB                                    i1l3585 0D2C  
                                  i1l3681 0DE8                                    i1l3675 0DDF  
                                  i1l3659 0DBC                                    i1l3579 0D1D  
                                  i1l3599 0D4A                                    u320_25 0CFB  
                                  u321_25 0D08                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                                  _TX1STA 019E                               Insert@index 0075  
                    ?_I2C_MasterTRBInsert 0074              __size_of_interleave_reg_addr 002D  
                          __CFG_PWRTE$OFF 0000                ?_parse_humidity_calib_data 0074  
                                  _Insert 15C1                                    ___lmul 1142  
                       crc16_update@pData 0027                                 ??___aldiv 0078  
                                  ___wmul 1F72                                 ??___awdiv 0078  
                                  crc16@i 0030                            __CFG_STVREN$ON 0000  
                               ??___awmod 0078                                 ??___lldiv 0074  
            parse_humidity_calib_data@dev 0074            __end_of_bme280_get_sensor_data 14FC  
           I2C_MasterReadTRBBuild@address 0078                          ?_TMR0_Initialize 0070  
             compensate_pressure@pressure 00C5                          ___awdiv@quotient 0022  
                         ___awmod@divisor 0074                   __size_of_I2C_MasterRead 002B  
                         ___awmod@counter 0020                   __size_of_I2C_Initialize 001A  
                             ?_FlashError 0070                                    _strlen 1F0F  
                interleave_reg_addr@index 0021                         get_calib_data@dev 0063  
                            IntToString@i 003B                              IntToString@n 0033  
                         InsertString@src 0025                   compensate_pressure@var1 00C9  
                 compensate_pressure@var2 00C1                   compensate_pressure@var3 00A0  
                 compensate_pressure@var4 00A4                   compensate_pressure@var5 00A8  
                          ??_InsertString 0079                                 ?_I2C_Stop 0070  
                        ??_TransmitString 0020  TMR0_SetInterruptHandler@InterruptHandler 0074  
                       ??_bme280_get_regs 003F          bme280_compensate_data@calib_data 005F  
            interleave_reg_addr@temp_buff 0074                         _SYSTEM_Initialize 1ECA  
                 __end_of__initialization 007C                     ??_I2C_MasterTRBInsert 0077  
                      ?_SYSTEM_Initialize 0070                       main@convertedNumber 0120  
                    _UIntToHexString$1797 003A          compensate_temperature@calib_data 0036  
                         ??_ReadEnvSensor 0034                       ReverseString@counti 002F  
                           ??_bme280_init 0064                  get_calib_data@calib_data 0047  
                          __pcstackCOMMON 0070                             __end_of_Sleep 07FE  
                            __pidataBANK1 07FE                              __pidataBANK5 108E  
                       ??_bme280_set_regs 003B                             __end_of_crc16 12CE  
                     ??_SYSTEM_Initialize 0077                               _IntToString 1698  
                               ?_TMR0_ISR 0070                             ??_TransmitBit 0074  
              __size_of_bme280_soft_reset 0038           __end_of_I2C_MasterWriteTRBBuild 2000  
                          _OPTION_REGbits 0095                                ??_I2C_Stop 0070  
                                 ??_Sleep 0020                                   ??_crc16 002B  
               __end_of_SYSTEM_Initialize 1ED9                                __pbssBANK1 00EA  
                              __pbssBANK2 016F                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                __pbssBANK6 0320  
                              __pbssBANK7 03A0               interleave_reg_addr@reg_addr 0020  
                       ReverseString@temp 002C               interleave_reg_addr@reg_data 0075  
                   InsertString@destLimit 0029              I2C_MasterReadTRBBuild@length 0077  
                     __size_of_FlashError 002C              __size_of_I2C_BusCollisionISR 0002  
                        _setNavFlightMode 02A0                                   ?_Insert 0074  
                              __pmaintext 0E14                                 ?_TimerISR 0070  
        __end_of_TMR0_SetInterruptHandler 1EAA                                   ?___lmul 0020  
                                 ?___wmul 0074                                ??_TMR0_ISR 0070  
                         __CFG_PPS1WAY$ON 0000                                __pintentry 0004  
                 ?_bme280_compensate_data 005D                                   _I2C_ISR 0CC5  
                          ___lmul@product 0074                          ReadEnvSensor@len 0032  
                     __end_of_bme280_init 15C1               I2C_MasterWriteTRBBuild@ptrb 0020  
                          _WriteEnvSensor 09EC                                   ?_strlen 0074  
                         __CFG_WDTCCS$SWC 0000                            main@env_sensor 013C  
                     __end_of_TransmitBit 1F3E                                   _OSCTUNE 0098  
                 I2C_Stop@completion_code 0071              ?_parse_temp_press_calib_data 0074  
                                 _SSP1ADD 0212                                   _SLRCONA 030C  
                                 _SLRCONB 030D                                   _SLRCONC 030E  
                                 _SSP1BUF 0211             __size_of_I2C_FunctionComplete 0011  
                            ?_ClearString 0020                   ?_compensate_temperature 0036  
           bme280_soft_reset@soft_rst_cmd 005A                                   Sleep@ms 0074  
                    __end_of_InsertString 13AB                           __size_of_Insert 006B  
                              ??_TimerISR 0070            __end_of_bme280_compensate_data 155B  
                                 ___aldiv 177F                                   ___awdiv 13AB  
                         __size_of___lmul 002F                                   ___awmod 12CE  
                                 ___lldiv 13FC                           __size_of___wmul 001B  
                  __end_of_WriteEnvSensor 0AB2              __size_of_compensate_pressure 05A5  
                          _I2C_MasterRead 100C                ??_bme280_parse_sensor_data 0020  
                          _I2C_Initialize 1F58                        crc16_update@length 0020  
                                 __ptext1 128B                                   __ptext2 120C  
                                 __ptext3 155B                                   __ptext4 1313  
                                 __ptext5 0AB2                                   __ptext6 0808  
                                 __ptext7 11D4                                   __ptext8 08A1  
                                 __ptext9 10E7       parse_humidity_calib_data@dig_H4_lsb 0020  
     parse_humidity_calib_data@dig_H4_msb 0022       parse_humidity_calib_data@dig_H5_lsb 0024  
     parse_humidity_calib_data@dig_H5_msb 0026       parse_humidity_calib_data@calib_data 0028  
                         __size_of_strlen 0017                       _interleave_reg_addr 10E7  
                   _OSCILLATOR_Initialize 0801                          ___awmod@dividend 0076  
                           _message_start 0320                          ___aldiv@dividend 002C  
                ??_PIN_MANAGER_Initialize 0074                        get_calib_data@F376 0220  
                __size_of_I2C_MasterWrite 002B                                   main@end 00E4  
              __size_of_SYSTEM_Initialize 000F                                   clrloop0 1EBF  
           ??_parse_temp_press_calib_data 0075                      end_of_initialization 007C  
         bme280_get_sensor_data@comp_data 0063                        get_calib_data@rslt 0062  
                        InsertString@dest 002F                                   init_ram 1000  
          __end_of_compensate_temperature 07C4                                   initloop 1001  
                    ?_interleave_reg_addr 0074                  __size_of_UIntToHexString 007A  
                    I2C_MasterRead@length 0022                         _EUSART_Initialize 1EB4  
                         ___lldiv@divisor 0020          __size_of_I2C_MasterWriteTRBBuild 0027  
                         ___lldiv@counter 0079               ??_parse_humidity_calib_data 0075  
                      ?_EUSART_Initialize 0070                               _bme280_init 155B  
                        ___aldiv@quotient 0032         compensate_temperature@temperature 0059  
                  __end_of_I2C_MasterRead 1037                    __end_of_I2C_Initialize 1F72  
                              main@F10178 023A                     I2C_MasterWrite@length 0028  
                          ClearString@str 0020                           ?_WriteEnvSensor 0028  
                             _TransmitBit 1F26                                   strlen@a 0077  
                                 strlen@s 0074                       ??_EUSART_Initialize 0074  
                _TMR0_SetInterruptHandler 1EA5                              ??_FlashError 0074  
                      I2C_ISR@i2c_address 007C                                 _SSPDATPPS 0E21  
                         _bme280_get_regs 1249                                 _SSPCLKPPS 0E20  
                      bme280_get_regs@dev 003E                           WriteEnvSensor@i 0034  
                      bme280_get_regs@len 003C                           WriteEnvSensor@j 0035  
                         TransmitString@i 0023                             ?_TransmitByte 0070  
                        __CFG_FOSC$INTOSC 0000                             crc16@segments 0029  
                       __size_of_I2C_Stop 001A          I2C_ISR@i2c_10bit_address_restart 01CD  
                         _bme280_set_regs 08A1                 __end_of_EUSART_Initialize 1EBE  
                    bme280_init@try_count 0067                     ??_interleave_reg_addr 0077  
               bme280_soft_reset@reg_addr 005C         compensate_temperature@uncomp_data 0054  
                          _gps_configured 01CC                      ReverseString@halfway 002A  
                  __size_of_ReverseString 006C                        __end_of_FlashError 108E  
                ??_I2C_MasterReadTRBBuild 0020                     TransmitString@message 0025  
                       _p_i2c_trb_current 01CA      __size_of_parse_temp_press_calib_data 00F5  
                          __end_of_Insert 162C                              ?_IntToString 0033  
                         ?_I2C_MasterRead 0022                           ?_I2C_Initialize 0070  
                          __end_of___lmul 1171                            __end_of___wmul 1F8D  
                 __size_of_get_calib_data 0048                                 Insert@src 0074  
                            _i2c_tr_queue 01DF                         __size_of_TMR0_ISR 0010  
                  ?_OSCILLATOR_Initialize 0070            parse_temp_press_calib_data@dev 0074  
                bme280_set_regs@temp_buff 003E                            ??_TransmitByte 0076  
                     _I2C_BusCollisionISR 0002                 _parse_humidity_calib_data 0808  
                          __end_of_strlen 1F26                       start_initialization 0025  
                     UIntToHexString@dest 0037                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0033                                 _i2c_state 007B  
   parse_temp_press_calib_data@calib_data 0076                          UIntToHexString@i 0042  
                        UIntToHexString@n 0033               __end_of_I2C_MasterTRBInsert 14A0  
                 __size_of_null_ptr_check 0025                     __size_of_InsertString 0050  
                       ??_I2C_MasterWrite 002C                      ?_I2C_BusCollisionISR 0070  
                    __size_of_ClearString 0027                                  ??_Insert 0020  
                      bme280_init@chip_id 0068                     __end_of_ReadEnvSensor 09EC  
                                ??___lmul 0074                                  ??___wmul 0078  
                 __end_of_bme280_get_regs 128B                         ??_UIntToHexString 0038  
                       __size_of_TimerISR 000A                               __pdataBANK1 00EE  
                             __pdataBANK5 02A0                        null_ptr_check@rslt 0076  
                                ?_I2C_ISR 0070                              ClearString@i 0024  
                                ??_strlen 0076                             ?_crc16_update 0020  
              compensate_temperature@var1 0050                compensate_temperature@var2 0055  
   compensate_temperature@temperature_max 004C                             _ReverseString 162C  
                             __pbssBIGRAM 2378                               __pbssCOMMON 007A  
                               ___latbits 0002                             __pcstackBANK0 0020  
                           __pcstackBANK1 00A0                             __pcstackBANK2 0120  
                 __end_of_bme280_set_regs 093E                              _InsertString 135B  
                           crc16_update@i 0028                  _compensate_pressure$2553 00B9  
                _compensate_pressure$2554 00AC                  _compensate_pressure$2555 00B0  
                     _compensate_pressure 0080                __size_of_EUSART_Initialize 000A  
                               crc16@data 002F                   __size_of_TransmitString 002E  
                 _I2C_MasterWriteTRBBuild 1FD9                     ??_I2C_BusCollisionISR 0070  
                   _TMR0_InterruptHandler 01E4                                 __pnvBANK3 01E4  
                ??_bme280_get_sensor_data 0065                    _PIN_MANAGER_Initialize 11A1  
         __size_of_I2C_MasterReadTRBBuild 0030                                  ?___aldiv 0028  
                                ?___awdiv 0074                                  ?___awmod 0074  
                                ?___lldiv 0020                      ?_compensate_pressure 0036  
            __end_of_I2C_FunctionComplete 1EFA              ??_INTERRUPT_InterruptManager 0074  
                          ??_crc16_update 0024                            ?_ReverseString 0024  
                                _BAUD1CON 019F                                  _I2C_Stop 1F3E  
                       ReadEnvSensor@data 0031                            __size_of_Sleep 003A  
                          __size_of_crc16 0043              I2C_MasterWriteTRBBuild@pdata 0022  
                           _p_i2c_current 01C8                           ___aldiv@divisor 0028  
                       ??_TMR0_Initialize 0076                           ___aldiv@counter 0030  
                          ___wmul@product 0078                                  _LATAbits 010C  
                                _LATCbits 010E                                 clear_ram0 1EBE  
                                _PIE1bits 0090                                  _PIE2bits 0091  
                    __end_of_TransmitByte 10E7                       I2C_MasterRead@pdata 0028  
                     I2C_MasterRead@pflag 0025       __size_of_INTERRUPT_InterruptManager 001F  
     parse_temp_press_calib_data@reg_data 0077                          ??_WriteEnvSensor 002D  
              ??_TMR0_SetInterruptHandler 0076                                  _PIR1bits 0010  
                                _PIR2bits 0011                              ?_bme280_init 0070  
          bme280_get_sensor_data@reg_data 00CD                      I2C_MasterWrite@pdata 002E  
                    I2C_MasterWrite@pflag 002B                      __CFG_WDTCPS$WDTCPS1F 0000  
                                _SSP1CON1 0215                                  _SSP1CON3 0217  
                                _TMR0_ISR 1ED9                       I2C_ISR@pi2c_buf_ptr 016F  
                   ??_compensate_pressure 003A                                  _SSP1STAT 0214  
                        ?_bme280_get_regs 003B                            _get_calib_data 1313  
                            ?_TransmitBit 0070                      __size_of_IntToString 006D  
                        __size_of_I2C_ISR 014F                             Insert@current 0023  
                       ___wmul@multiplier 0074                      WriteEnvSensor@dev_id 0028  
                               main@index 00E8                    _I2C_MasterReadTRBBuild 1171  
                    TransmitString@counti 0021                   bme280_get_regs@reg_addr 0042  
                 bme280_set_regs@reg_addr 0056                   bme280_get_regs@reg_data 003B  
                 bme280_set_regs@reg_data 0038                      WriteEnvSensor@status 0037  
                        ?_bme280_set_regs 0038                         ___lmul@multiplier 0020  
                 bme280_set_regs@temp_len 0052         __size_of_bme280_parse_sensor_data 011E  
               ??_I2C_MasterWriteTRBBuild 0026                 ?_bme280_parse_sensor_data 0074  
                          _null_ptr_check 1F8D        __size_of_parse_humidity_calib_data 0099  
                     ReadEnvSensor@dev_id 002F               bme280_set_regs@reg_addr_cnt 0054  
                        ??_I2C_MasterRead 0026                        InsertString@counti 002B  
                        ??_I2C_Initialize 0074                           IntToString@dest 0035  
                     ReadEnvSensor@status 003A                           IntToString@sign 003A  
         __size_of_bme280_get_sensor_data 005C                       bme280_set_regs@rslt 0055  
                                _TimerISR 1EAA                    __end_of_get_calib_data 135B  
                       null_ptr_check@dev 0077                             InsertString@i 002D  
                 ??_OSCILLATOR_Initialize 0074                          __size_of___aldiv 0081  
                        __size_of___awdiv 0051                          __size_of___awmod 0045  
                        __size_of___lldiv 0052                           ??_ReverseString 0026  
                       ClearString@counti 0022                                  crc16@crc 002D  
                                _checksum 01CF                           _I2C_MasterWrite 1037  
     __end_of_parse_temp_press_calib_data 0BA7               _parse_temp_press_calib_data 0AB2  
                                __ptext10 09EC                                  __ptext11 1F72  
                                __ptext20 100C                                  __ptext12 07C4  
                                __ptext21 144E                                  __ptext13 14A0  
                                __ptext30 177F                                  __ptext22 1EA1  
                                __ptext14 0BA7                                  __ptext31 1705  
                                __ptext23 1171                                  __ptext15 1249  
                                __ptext40 1F58                                  __ptext32 1114  
                                __ptext24 1062                                  __ptext16 1F8D  
                                __ptext41 1EB4                                  __ptext33 10BA  
                                __ptext25 14FC                                  __ptext17 093E  
                                __ptext42 1698                                  __ptext34 1F26  
                                __ptext26 0625                                  __ptext18 1037  
                                __ptext51 1ED9                                  __ptext43 12CE  
                                __ptext35 1ECA                                  __ptext27 0080  
                                __ptext19 1FD9                                  __ptext52 0800  
                                __ptext44 162C                                  __ptext36 1EFA  
                                __ptext28 1142                                  __ptext53 1EAA  
                                __ptext45 13AB                                  __ptext37 1EA5  
                                __ptext29 13FC                                  __ptext54 0CC5  
                                __ptext46 135B                                  __ptext38 11A1  
                                __ptext55 1F3E                                  __ptext47 15C1  
                                __ptext39 0801                                  __ptext56 1EE9  
                                __ptext48 1FB2                                  __ptext57 0002  
                                __ptext49 1F0F               __end_of_interleave_reg_addr 1114  
                            _SSP1CON1bits 0215                    __end_of_null_ptr_check 1FB2  
                            _SSP1CON2bits 0216              I2C_MasterTRBInsert@ptrb_list 0074  
           compensate_pressure@calib_data 0036                           _UIntToHexString 1705  
                          _TransmitString 1114                             __size_of_main 01EC  
                    _I2C_FunctionComplete 1EE9         bme280_compensate_data@sensor_comp 0062  
                ??_bme280_compensate_data 0060         __end_of_parse_humidity_calib_data 08A1  
                             _message_end 03A0                      __end_of_crc16_update 1249  
                                _messages 00EE      __end_of_TMR0_DefaultInterruptHandler 0801  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 0800  
                    __CFG_WDTCWS$WDTCWSSW 0000   __end_of_I2C_WaitForLastPacketToComplete 1EA5  
__size_of_I2C_WaitForLastPacketToComplete 0004         ??_I2C_WaitForLastPacketToComplete 0074  
        ?_I2C_WaitForLastPacketToComplete 0070           _I2C_WaitForLastPacketToComplete 1EA1  
                         ?_get_calib_data 0070               _compensate_temperature$2552 0044  
                                int$flags 007E        __end_of_INTERRUPT_InterruptManager 0023  
              _INTERRUPT_InterruptManager 0004                           main@sensor_data 0130  
                              _INTCONbits 000B                    _bme280_get_sensor_data 14A0  
                       InsertString@index 0027                        bme280_set_regs@dev 003A  
                      bme280_set_regs@len 0039                            __pstringtext10 18B5  
                          __pstringtext11 18BA                            __pstringtext12 0000  
                ??_compensate_temperature 003A                     I2C_MasterRead@address 0023  
       bme280_compensate_data@uncomp_data 005D                           ?_null_ptr_check 0070  
              bme280_get_sensor_data@F271 01AC                bme280_get_sensor_data@F273 01A0  
                  __end_of_TransmitString 1142                     __size_of_TransmitByte 002D  
                                intlevel1 0000                          TransmitByte@byte 0077  
                             FlashError@i 0076                     ?_I2C_FunctionComplete 0070  
                           ??_ClearString 0079                          ___lldiv@dividend 0024  
                 ?_PIN_MANAGER_Initialize 0070                     I2C_MasterRead@trBlock 01D5  
              bme280_get_sensor_data@rslt 00D6                         __CFG_CLKOUTEN$OFF 0000  
            __size_of_I2C_MasterTRBInsert 0052             ?_TMR0_DefaultInterruptHandler 0070  
                  I2C_MasterWrite@address 0029                      __size_of_bme280_init 0066  
                 __end_of_I2C_MasterWrite 1062                             __pstringtext1 1800  
                           __pstringtext2 181A                             __pstringtext3 1834  
                           __pstringtext4 184E                             __pstringtext5 1868  
                           __pstringtext6 1882                             __pstringtext7 189C  
                           __pstringtext8 18AA                             __pstringtext9 18B0  
                    __size_of_TransmitBit 0018                    I2C_MasterWrite@trBlock 01DA  
                              _OPTION_REG 0095                          ___lldiv@quotient 0075  
                            _TransmitByte 10BA                           _TMR0_Initialize 1EFA  
                            ___aldiv@sign 0031                   __end_of_UIntToHexString 177F  
                       WriteEnvSensor@len 002B                         WriteEnvSensor@trb 2378  
                        GetNavData@F10110 024A                          GetNavData@F10104 01B4  
             __end_of_I2C_BusCollisionISR 0004                    __size_of_ReadEnvSensor 00AE  
                         ?_TransmitString 0070            __end_of_PIN_MANAGER_Initialize 11D4  
                         Insert@destLimit 0077            I2C_MasterWriteTRBBuild@address 0024  
             WriteEnvSensor@local_address 0036                       bme280_get_regs@rslt 0043  
         __size_of_bme280_compensate_data 005F             I2C_MasterWriteTRBBuild@length 0023  
       bme280_get_sensor_data@sensor_comp 00D5  
