

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Sep 02 00:36:26 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK5,global,class=CODE,delta=2
     6                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    25                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    26                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    27                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    28                           	psect	inittext,global,class=CODE,delta=2
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    31                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    32                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    33                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    34                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    36                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text3,local,class=CODE,merge=1,delta=2
    39                           	psect	text4,local,class=CODE,merge=1,delta=2
    40                           	psect	text5,local,class=CODE,merge=1,delta=2
    41                           	psect	text6,local,class=CODE,merge=1,delta=2
    42                           	psect	text7,local,class=CODE,merge=1,delta=2
    43                           	psect	text8,local,class=CODE,merge=1,delta=2
    44                           	psect	text9,local,class=CODE,merge=1,delta=2
    45                           	psect	text10,local,class=CODE,merge=1,delta=2
    46                           	psect	text11,local,class=CODE,merge=1,delta=2
    47                           	psect	text12,local,class=CODE,merge=1,delta=2
    48                           	psect	text13,local,class=CODE,merge=1,delta=2
    49                           	psect	text14,local,class=CODE,merge=1,delta=2
    50                           	psect	text15,local,class=CODE,merge=1,delta=2
    51                           	psect	text16,local,class=CODE,merge=1,delta=2
    52                           	psect	text17,local,class=CODE,merge=1,delta=2
    53                           	psect	text18,local,class=CODE,merge=1,delta=2
    54                           	psect	text19,local,class=CODE,merge=1,delta=2
    55                           	psect	text20,local,class=CODE,merge=1,delta=2
    56                           	psect	text21,local,class=CODE,merge=1,delta=2
    57                           	psect	text22,local,class=CODE,merge=1,delta=2
    58                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text24,local,class=CODE,merge=1,delta=2
    60                           	psect	text25,local,class=CODE,merge=1,delta=2
    61                           	psect	text26,local,class=CODE,merge=1,delta=2
    62                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text29,local,class=CODE,merge=1,delta=2
    65                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text32,local,class=CODE,merge=1,delta=2
    68                           	psect	text33,local,class=CODE,merge=1,delta=2
    69                           	psect	text34,local,class=CODE,merge=1,delta=2
    70                           	psect	text35,local,class=CODE,merge=1,delta=2
    71                           	psect	text36,local,class=CODE,merge=1,delta=2
    72                           	psect	text37,local,class=CODE,merge=1,delta=2
    73                           	psect	text38,local,class=CODE,merge=1,delta=2
    74                           	psect	text39,local,class=CODE,merge=1,delta=2
    75                           	psect	text40,local,class=CODE,merge=1,delta=2
    76                           	psect	text41,local,class=CODE,merge=1,delta=2
    77                           	psect	text42,local,class=CODE,merge=1,delta=2
    78                           	psect	text43,local,class=CODE,merge=1,delta=2
    79                           	psect	text44,local,class=CODE,merge=1,delta=2
    80                           	psect	text45,local,class=CODE,merge=1,delta=2
    81                           	psect	text46,local,class=CODE,merge=1,delta=2
    82                           	psect	text47,local,class=CODE,merge=1,delta=2
    83                           	psect	text48,local,class=CODE,merge=1,delta=2
    84                           	psect	text49,local,class=CODE,merge=1,delta=2
    85                           	psect	text50,local,class=CODE,merge=1,delta=2
    86                           	psect	text51,local,class=CODE,merge=1,delta=2
    87                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    88                           	psect	text53,local,class=CODE,merge=1,delta=2
    89                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    90                           	psect	text55,local,class=CODE,merge=1,delta=2
    91                           	psect	text56,local,class=CODE,merge=1,delta=2
    92                           	psect	text57,local,class=CODE,merge=1,delta=2
    93                           	psect	text58,local,class=CODE,merge=1,delta=2
    94                           	psect	text59,local,class=CODE,merge=1,delta=2
    95                           	psect	text60,local,class=CODE,merge=1,delta=2
    96                           	psect	text61,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text62,local,class=CODE,merge=1,delta=2
    98                           	psect	intentry,global,class=CODE,delta=2
    99                           	psect	text64,local,class=CODE,merge=1,delta=2
   100                           	psect	text65,local,class=CODE,merge=1,delta=2
   101                           	psect	text66,local,class=CODE,merge=1,delta=2
   102                           	psect	text67,local,class=CODE,merge=1,delta=2
   103                           	psect	text68,local,class=CODE,merge=1,delta=2
   104                           	psect	text69,local,class=CODE,merge=1,delta=2
   105                           	psect	text70,local,class=CODE,merge=1,delta=2
   106                           	psect	text29_split_1,local,class=CODE,merge=1,delta=2
   107                           	dabs	1,0x7E,2
   108  0000                     
   109                           ; Version 2.05
   110                           ; Generated 20/12/2018 GMT
   111                           ; 
   112                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   113                           ; All rights reserved.
   114                           ; 
   115                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   116                           ; 
   117                           ; Redistribution and use in source and binary forms, with or without modification, are
   118                           ; permitted provided that the following conditions are met:
   119                           ; 
   120                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   121                           ;        conditions and the following disclaimer.
   122                           ; 
   123                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   124                           ;        of conditions and the following disclaimer in the documentation and/or other
   125                           ;        materials provided with the distribution.
   126                           ; 
   127                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   128                           ;        software without specific prior written permission.
   129                           ; 
   130                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   131                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   132                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   133                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   134                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   135                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   136                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   137                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   138                           ; 
   139                           ; 
   140                           ; Code-generator required, PIC16F1619 Definitions
   141                           ; 
   142                           ; SFR Addresses
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  0008                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0013                     	;# 
   162  0014                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  0111                     	;# 
   200  0112                     	;# 
   201  0113                     	;# 
   202  0114                     	;# 
   203  0115                     	;# 
   204  0116                     	;# 
   205  0117                     	;# 
   206  0118                     	;# 
   207  0119                     	;# 
   208  011C                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  018E                     	;# 
   212  0191                     	;# 
   213  0191                     	;# 
   214  0192                     	;# 
   215  0193                     	;# 
   216  0193                     	;# 
   217  0194                     	;# 
   218  0195                     	;# 
   219  0196                     	;# 
   220  0197                     	;# 
   221  0199                     	;# 
   222  0199                     	;# 
   223  0199                     	;# 
   224  019A                     	;# 
   225  019A                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019C                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019D                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019E                     	;# 
   240  019E                     	;# 
   241  019F                     	;# 
   242  019F                     	;# 
   243  019F                     	;# 
   244  019F                     	;# 
   245  019F                     	;# 
   246  020C                     	;# 
   247  020D                     	;# 
   248  020E                     	;# 
   249  0211                     	;# 
   250  0211                     	;# 
   251  0212                     	;# 
   252  0212                     	;# 
   253  0213                     	;# 
   254  0213                     	;# 
   255  0214                     	;# 
   256  0214                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0216                     	;# 
   262  0216                     	;# 
   263  0217                     	;# 
   264  0217                     	;# 
   265  028C                     	;# 
   266  028D                     	;# 
   267  028E                     	;# 
   268  0291                     	;# 
   269  0291                     	;# 
   270  0292                     	;# 
   271  0293                     	;# 
   272  0294                     	;# 
   273  0298                     	;# 
   274  0298                     	;# 
   275  0299                     	;# 
   276  029A                     	;# 
   277  029B                     	;# 
   278  029E                     	;# 
   279  030C                     	;# 
   280  030D                     	;# 
   281  030E                     	;# 
   282  038C                     	;# 
   283  038D                     	;# 
   284  038E                     	;# 
   285  0391                     	;# 
   286  0392                     	;# 
   287  0393                     	;# 
   288  0394                     	;# 
   289  0395                     	;# 
   290  0396                     	;# 
   291  0397                     	;# 
   292  0398                     	;# 
   293  0399                     	;# 
   294  040E                     	;# 
   295  0413                     	;# 
   296  0413                     	;# 
   297  0414                     	;# 
   298  0414                     	;# 
   299  0415                     	;# 
   300  0416                     	;# 
   301  0417                     	;# 
   302  0418                     	;# 
   303  041A                     	;# 
   304  041A                     	;# 
   305  041B                     	;# 
   306  041B                     	;# 
   307  041C                     	;# 
   308  041D                     	;# 
   309  041E                     	;# 
   310  041F                     	;# 
   311  0493                     	;# 
   312  0494                     	;# 
   313  0495                     	;# 
   314  0496                     	;# 
   315  049A                     	;# 
   316  049B                     	;# 
   317  049C                     	;# 
   318  049D                     	;# 
   319  058C                     	;# 
   320  058C                     	;# 
   321  058D                     	;# 
   322  058E                     	;# 
   323  058E                     	;# 
   324  058F                     	;# 
   325  0590                     	;# 
   326  0590                     	;# 
   327  0591                     	;# 
   328  0592                     	;# 
   329  0592                     	;# 
   330  0593                     	;# 
   331  0594                     	;# 
   332  0594                     	;# 
   333  0595                     	;# 
   334  0596                     	;# 
   335  0596                     	;# 
   336  0597                     	;# 
   337  0598                     	;# 
   338  0599                     	;# 
   339  059A                     	;# 
   340  059B                     	;# 
   341  059B                     	;# 
   342  059C                     	;# 
   343  059D                     	;# 
   344  060C                     	;# 
   345  060C                     	;# 
   346  060D                     	;# 
   347  060E                     	;# 
   348  060F                     	;# 
   349  060F                     	;# 
   350  0610                     	;# 
   351  0611                     	;# 
   352  0612                     	;# 
   353  0613                     	;# 
   354  0614                     	;# 
   355  0617                     	;# 
   356  0617                     	;# 
   357  0618                     	;# 
   358  0619                     	;# 
   359  061A                     	;# 
   360  061A                     	;# 
   361  061B                     	;# 
   362  061C                     	;# 
   363  0691                     	;# 
   364  0692                     	;# 
   365  0693                     	;# 
   366  0694                     	;# 
   367  0695                     	;# 
   368  0696                     	;# 
   369  0697                     	;# 
   370  0699                     	;# 
   371  069A                     	;# 
   372  0711                     	;# 
   373  0712                     	;# 
   374  0713                     	;# 
   375  0714                     	;# 
   376  0715                     	;# 
   377  0718                     	;# 
   378  0718                     	;# 
   379  0719                     	;# 
   380  071A                     	;# 
   381  071A                     	;# 
   382  071B                     	;# 
   383  071C                     	;# 
   384  071D                     	;# 
   385  0791                     	;# 
   386  0791                     	;# 
   387  0792                     	;# 
   388  0793                     	;# 
   389  0793                     	;# 
   390  0794                     	;# 
   391  0795                     	;# 
   392  0795                     	;# 
   393  0796                     	;# 
   394  0797                     	;# 
   395  0797                     	;# 
   396  0798                     	;# 
   397  0799                     	;# 
   398  079A                     	;# 
   399  080C                     	;# 
   400  080C                     	;# 
   401  080D                     	;# 
   402  080E                     	;# 
   403  080E                     	;# 
   404  080F                     	;# 
   405  0810                     	;# 
   406  0810                     	;# 
   407  0811                     	;# 
   408  0812                     	;# 
   409  0812                     	;# 
   410  0813                     	;# 
   411  0814                     	;# 
   412  0815                     	;# 
   413  0816                     	;# 
   414  0817                     	;# 
   415  0818                     	;# 
   416  0819                     	;# 
   417  081A                     	;# 
   418  081A                     	;# 
   419  081B                     	;# 
   420  081C                     	;# 
   421  081C                     	;# 
   422  081D                     	;# 
   423  088C                     	;# 
   424  088D                     	;# 
   425  088E                     	;# 
   426  088F                     	;# 
   427  088F                     	;# 
   428  0890                     	;# 
   429  0891                     	;# 
   430  0892                     	;# 
   431  0893                     	;# 
   432  0893                     	;# 
   433  0894                     	;# 
   434  0895                     	;# 
   435  0896                     	;# 
   436  0897                     	;# 
   437  0897                     	;# 
   438  0898                     	;# 
   439  0899                     	;# 
   440  0D8C                     	;# 
   441  0D8C                     	;# 
   442  0D8D                     	;# 
   443  0D8E                     	;# 
   444  0D8F                     	;# 
   445  0D8F                     	;# 
   446  0D90                     	;# 
   447  0D91                     	;# 
   448  0D92                     	;# 
   449  0D92                     	;# 
   450  0D93                     	;# 
   451  0D94                     	;# 
   452  0D95                     	;# 
   453  0D95                     	;# 
   454  0D96                     	;# 
   455  0D97                     	;# 
   456  0D98                     	;# 
   457  0D99                     	;# 
   458  0D9A                     	;# 
   459  0D9B                     	;# 
   460  0D9C                     	;# 
   461  0D9D                     	;# 
   462  0D9E                     	;# 
   463  0D9E                     	;# 
   464  0D9F                     	;# 
   465  0DA0                     	;# 
   466  0DA1                     	;# 
   467  0DA1                     	;# 
   468  0DA2                     	;# 
   469  0DA3                     	;# 
   470  0DA4                     	;# 
   471  0DA4                     	;# 
   472  0DA5                     	;# 
   473  0DA6                     	;# 
   474  0DA7                     	;# 
   475  0DA7                     	;# 
   476  0DA8                     	;# 
   477  0DA9                     	;# 
   478  0DAA                     	;# 
   479  0DAB                     	;# 
   480  0DAC                     	;# 
   481  0DAD                     	;# 
   482  0DAE                     	;# 
   483  0DAF                     	;# 
   484  0E0F                     	;# 
   485  0E10                     	;# 
   486  0E11                     	;# 
   487  0E12                     	;# 
   488  0E13                     	;# 
   489  0E14                     	;# 
   490  0E15                     	;# 
   491  0E16                     	;# 
   492  0E17                     	;# 
   493  0E18                     	;# 
   494  0E19                     	;# 
   495  0E1A                     	;# 
   496  0E1B                     	;# 
   497  0E1C                     	;# 
   498  0E1D                     	;# 
   499  0E1E                     	;# 
   500  0E1F                     	;# 
   501  0E20                     	;# 
   502  0E21                     	;# 
   503  0E22                     	;# 
   504  0E23                     	;# 
   505  0E24                     	;# 
   506  0E25                     	;# 
   507  0E26                     	;# 
   508  0E27                     	;# 
   509  0E28                     	;# 
   510  0E29                     	;# 
   511  0E2A                     	;# 
   512  0E2B                     	;# 
   513  0E2C                     	;# 
   514  0E2D                     	;# 
   515  0E2E                     	;# 
   516  0E90                     	;# 
   517  0E91                     	;# 
   518  0E92                     	;# 
   519  0E94                     	;# 
   520  0E95                     	;# 
   521  0E9C                     	;# 
   522  0E9D                     	;# 
   523  0E9E                     	;# 
   524  0E9F                     	;# 
   525  0EA0                     	;# 
   526  0EA1                     	;# 
   527  0EA2                     	;# 
   528  0EA3                     	;# 
   529  0EA4                     	;# 
   530  0EA5                     	;# 
   531  0EA6                     	;# 
   532  0EA7                     	;# 
   533  0F0F                     	;# 
   534  0F10                     	;# 
   535  0F11                     	;# 
   536  0F12                     	;# 
   537  0F13                     	;# 
   538  0F14                     	;# 
   539  0F15                     	;# 
   540  0F16                     	;# 
   541  0F17                     	;# 
   542  0F18                     	;# 
   543  0F19                     	;# 
   544  0F1A                     	;# 
   545  0F1B                     	;# 
   546  0F1C                     	;# 
   547  0F1D                     	;# 
   548  0F1E                     	;# 
   549  0F1F                     	;# 
   550  0F20                     	;# 
   551  0F21                     	;# 
   552  0F22                     	;# 
   553  0F23                     	;# 
   554  0F24                     	;# 
   555  0F25                     	;# 
   556  0F26                     	;# 
   557  0F27                     	;# 
   558  0F28                     	;# 
   559  0F29                     	;# 
   560  0F2A                     	;# 
   561  0F2B                     	;# 
   562  0F2C                     	;# 
   563  0F2D                     	;# 
   564  0F2E                     	;# 
   565  0F2F                     	;# 
   566  0F30                     	;# 
   567  0F31                     	;# 
   568  0F32                     	;# 
   569  0F33                     	;# 
   570  0F34                     	;# 
   571  0F35                     	;# 
   572  0F36                     	;# 
   573  0F37                     	;# 
   574  0FE4                     	;# 
   575  0FE5                     	;# 
   576  0FE6                     	;# 
   577  0FE7                     	;# 
   578  0FE8                     	;# 
   579  0FE9                     	;# 
   580  0FEA                     	;# 
   581  0FEB                     	;# 
   582  0FED                     	;# 
   583  0FEE                     	;# 
   584  0FEF                     	;# 
   585  0000                     	;# 
   586  0001                     	;# 
   587  0002                     	;# 
   588  0003                     	;# 
   589  0004                     	;# 
   590  0005                     	;# 
   591  0006                     	;# 
   592  0007                     	;# 
   593  0008                     	;# 
   594  0009                     	;# 
   595  000A                     	;# 
   596  000B                     	;# 
   597  000C                     	;# 
   598  000D                     	;# 
   599  000E                     	;# 
   600  0010                     	;# 
   601  0011                     	;# 
   602  0012                     	;# 
   603  0013                     	;# 
   604  0014                     	;# 
   605  0015                     	;# 
   606  0016                     	;# 
   607  0016                     	;# 
   608  0017                     	;# 
   609  0018                     	;# 
   610  0019                     	;# 
   611  001A                     	;# 
   612  001A                     	;# 
   613  001B                     	;# 
   614  001B                     	;# 
   615  001C                     	;# 
   616  001D                     	;# 
   617  001E                     	;# 
   618  001F                     	;# 
   619  008C                     	;# 
   620  008D                     	;# 
   621  008E                     	;# 
   622  0090                     	;# 
   623  0091                     	;# 
   624  0092                     	;# 
   625  0093                     	;# 
   626  0094                     	;# 
   627  0095                     	;# 
   628  0096                     	;# 
   629  0098                     	;# 
   630  0099                     	;# 
   631  009A                     	;# 
   632  009B                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  009F                     	;# 
   638  010C                     	;# 
   639  010D                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011C                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  018E                     	;# 
   654  0191                     	;# 
   655  0191                     	;# 
   656  0192                     	;# 
   657  0193                     	;# 
   658  0193                     	;# 
   659  0194                     	;# 
   660  0195                     	;# 
   661  0196                     	;# 
   662  0197                     	;# 
   663  0199                     	;# 
   664  0199                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019A                     	;# 
   668  019A                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019D                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019E                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  019F                     	;# 
   685  019F                     	;# 
   686  019F                     	;# 
   687  019F                     	;# 
   688  020C                     	;# 
   689  020D                     	;# 
   690  020E                     	;# 
   691  0211                     	;# 
   692  0211                     	;# 
   693  0212                     	;# 
   694  0212                     	;# 
   695  0213                     	;# 
   696  0213                     	;# 
   697  0214                     	;# 
   698  0214                     	;# 
   699  0215                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0216                     	;# 
   704  0216                     	;# 
   705  0217                     	;# 
   706  0217                     	;# 
   707  028C                     	;# 
   708  028D                     	;# 
   709  028E                     	;# 
   710  0291                     	;# 
   711  0291                     	;# 
   712  0292                     	;# 
   713  0293                     	;# 
   714  0294                     	;# 
   715  0298                     	;# 
   716  0298                     	;# 
   717  0299                     	;# 
   718  029A                     	;# 
   719  029B                     	;# 
   720  029E                     	;# 
   721  030C                     	;# 
   722  030D                     	;# 
   723  030E                     	;# 
   724  038C                     	;# 
   725  038D                     	;# 
   726  038E                     	;# 
   727  0391                     	;# 
   728  0392                     	;# 
   729  0393                     	;# 
   730  0394                     	;# 
   731  0395                     	;# 
   732  0396                     	;# 
   733  0397                     	;# 
   734  0398                     	;# 
   735  0399                     	;# 
   736  040E                     	;# 
   737  0413                     	;# 
   738  0413                     	;# 
   739  0414                     	;# 
   740  0414                     	;# 
   741  0415                     	;# 
   742  0416                     	;# 
   743  0417                     	;# 
   744  0418                     	;# 
   745  041A                     	;# 
   746  041A                     	;# 
   747  041B                     	;# 
   748  041B                     	;# 
   749  041C                     	;# 
   750  041D                     	;# 
   751  041E                     	;# 
   752  041F                     	;# 
   753  0493                     	;# 
   754  0494                     	;# 
   755  0495                     	;# 
   756  0496                     	;# 
   757  049A                     	;# 
   758  049B                     	;# 
   759  049C                     	;# 
   760  049D                     	;# 
   761  058C                     	;# 
   762  058C                     	;# 
   763  058D                     	;# 
   764  058E                     	;# 
   765  058E                     	;# 
   766  058F                     	;# 
   767  0590                     	;# 
   768  0590                     	;# 
   769  0591                     	;# 
   770  0592                     	;# 
   771  0592                     	;# 
   772  0593                     	;# 
   773  0594                     	;# 
   774  0594                     	;# 
   775  0595                     	;# 
   776  0596                     	;# 
   777  0596                     	;# 
   778  0597                     	;# 
   779  0598                     	;# 
   780  0599                     	;# 
   781  059A                     	;# 
   782  059B                     	;# 
   783  059B                     	;# 
   784  059C                     	;# 
   785  059D                     	;# 
   786  060C                     	;# 
   787  060C                     	;# 
   788  060D                     	;# 
   789  060E                     	;# 
   790  060F                     	;# 
   791  060F                     	;# 
   792  0610                     	;# 
   793  0611                     	;# 
   794  0612                     	;# 
   795  0613                     	;# 
   796  0614                     	;# 
   797  0617                     	;# 
   798  0617                     	;# 
   799  0618                     	;# 
   800  0619                     	;# 
   801  061A                     	;# 
   802  061A                     	;# 
   803  061B                     	;# 
   804  061C                     	;# 
   805  0691                     	;# 
   806  0692                     	;# 
   807  0693                     	;# 
   808  0694                     	;# 
   809  0695                     	;# 
   810  0696                     	;# 
   811  0697                     	;# 
   812  0699                     	;# 
   813  069A                     	;# 
   814  0711                     	;# 
   815  0712                     	;# 
   816  0713                     	;# 
   817  0714                     	;# 
   818  0715                     	;# 
   819  0718                     	;# 
   820  0718                     	;# 
   821  0719                     	;# 
   822  071A                     	;# 
   823  071A                     	;# 
   824  071B                     	;# 
   825  071C                     	;# 
   826  071D                     	;# 
   827  0791                     	;# 
   828  0791                     	;# 
   829  0792                     	;# 
   830  0793                     	;# 
   831  0793                     	;# 
   832  0794                     	;# 
   833  0795                     	;# 
   834  0795                     	;# 
   835  0796                     	;# 
   836  0797                     	;# 
   837  0797                     	;# 
   838  0798                     	;# 
   839  0799                     	;# 
   840  079A                     	;# 
   841  080C                     	;# 
   842  080C                     	;# 
   843  080D                     	;# 
   844  080E                     	;# 
   845  080E                     	;# 
   846  080F                     	;# 
   847  0810                     	;# 
   848  0810                     	;# 
   849  0811                     	;# 
   850  0812                     	;# 
   851  0812                     	;# 
   852  0813                     	;# 
   853  0814                     	;# 
   854  0815                     	;# 
   855  0816                     	;# 
   856  0817                     	;# 
   857  0818                     	;# 
   858  0819                     	;# 
   859  081A                     	;# 
   860  081A                     	;# 
   861  081B                     	;# 
   862  081C                     	;# 
   863  081C                     	;# 
   864  081D                     	;# 
   865  088C                     	;# 
   866  088D                     	;# 
   867  088E                     	;# 
   868  088F                     	;# 
   869  088F                     	;# 
   870  0890                     	;# 
   871  0891                     	;# 
   872  0892                     	;# 
   873  0893                     	;# 
   874  0893                     	;# 
   875  0894                     	;# 
   876  0895                     	;# 
   877  0896                     	;# 
   878  0897                     	;# 
   879  0897                     	;# 
   880  0898                     	;# 
   881  0899                     	;# 
   882  0D8C                     	;# 
   883  0D8C                     	;# 
   884  0D8D                     	;# 
   885  0D8E                     	;# 
   886  0D8F                     	;# 
   887  0D8F                     	;# 
   888  0D90                     	;# 
   889  0D91                     	;# 
   890  0D92                     	;# 
   891  0D92                     	;# 
   892  0D93                     	;# 
   893  0D94                     	;# 
   894  0D95                     	;# 
   895  0D95                     	;# 
   896  0D96                     	;# 
   897  0D97                     	;# 
   898  0D98                     	;# 
   899  0D99                     	;# 
   900  0D9A                     	;# 
   901  0D9B                     	;# 
   902  0D9C                     	;# 
   903  0D9D                     	;# 
   904  0D9E                     	;# 
   905  0D9E                     	;# 
   906  0D9F                     	;# 
   907  0DA0                     	;# 
   908  0DA1                     	;# 
   909  0DA1                     	;# 
   910  0DA2                     	;# 
   911  0DA3                     	;# 
   912  0DA4                     	;# 
   913  0DA4                     	;# 
   914  0DA5                     	;# 
   915  0DA6                     	;# 
   916  0DA7                     	;# 
   917  0DA7                     	;# 
   918  0DA8                     	;# 
   919  0DA9                     	;# 
   920  0DAA                     	;# 
   921  0DAB                     	;# 
   922  0DAC                     	;# 
   923  0DAD                     	;# 
   924  0DAE                     	;# 
   925  0DAF                     	;# 
   926  0E0F                     	;# 
   927  0E10                     	;# 
   928  0E11                     	;# 
   929  0E12                     	;# 
   930  0E13                     	;# 
   931  0E14                     	;# 
   932  0E15                     	;# 
   933  0E16                     	;# 
   934  0E17                     	;# 
   935  0E18                     	;# 
   936  0E19                     	;# 
   937  0E1A                     	;# 
   938  0E1B                     	;# 
   939  0E1C                     	;# 
   940  0E1D                     	;# 
   941  0E1E                     	;# 
   942  0E1F                     	;# 
   943  0E20                     	;# 
   944  0E21                     	;# 
   945  0E22                     	;# 
   946  0E23                     	;# 
   947  0E24                     	;# 
   948  0E25                     	;# 
   949  0E26                     	;# 
   950  0E27                     	;# 
   951  0E28                     	;# 
   952  0E29                     	;# 
   953  0E2A                     	;# 
   954  0E2B                     	;# 
   955  0E2C                     	;# 
   956  0E2D                     	;# 
   957  0E2E                     	;# 
   958  0E90                     	;# 
   959  0E91                     	;# 
   960  0E92                     	;# 
   961  0E94                     	;# 
   962  0E95                     	;# 
   963  0E9C                     	;# 
   964  0E9D                     	;# 
   965  0E9E                     	;# 
   966  0E9F                     	;# 
   967  0EA0                     	;# 
   968  0EA1                     	;# 
   969  0EA2                     	;# 
   970  0EA3                     	;# 
   971  0EA4                     	;# 
   972  0EA5                     	;# 
   973  0EA6                     	;# 
   974  0EA7                     	;# 
   975  0F0F                     	;# 
   976  0F10                     	;# 
   977  0F11                     	;# 
   978  0F12                     	;# 
   979  0F13                     	;# 
   980  0F14                     	;# 
   981  0F15                     	;# 
   982  0F16                     	;# 
   983  0F17                     	;# 
   984  0F18                     	;# 
   985  0F19                     	;# 
   986  0F1A                     	;# 
   987  0F1B                     	;# 
   988  0F1C                     	;# 
   989  0F1D                     	;# 
   990  0F1E                     	;# 
   991  0F1F                     	;# 
   992  0F20                     	;# 
   993  0F21                     	;# 
   994  0F22                     	;# 
   995  0F23                     	;# 
   996  0F24                     	;# 
   997  0F25                     	;# 
   998  0F26                     	;# 
   999  0F27                     	;# 
  1000  0F28                     	;# 
  1001  0F29                     	;# 
  1002  0F2A                     	;# 
  1003  0F2B                     	;# 
  1004  0F2C                     	;# 
  1005  0F2D                     	;# 
  1006  0F2E                     	;# 
  1007  0F2F                     	;# 
  1008  0F30                     	;# 
  1009  0F31                     	;# 
  1010  0F32                     	;# 
  1011  0F33                     	;# 
  1012  0F34                     	;# 
  1013  0F35                     	;# 
  1014  0F36                     	;# 
  1015  0F37                     	;# 
  1016  0FE4                     	;# 
  1017  0FE5                     	;# 
  1018  0FE6                     	;# 
  1019  0FE7                     	;# 
  1020  0FE8                     	;# 
  1021  0FE9                     	;# 
  1022  0FEA                     	;# 
  1023  0FEB                     	;# 
  1024  0FED                     	;# 
  1025  0FEE                     	;# 
  1026  0FEF                     	;# 
  1027  0000                     	;# 
  1028  0001                     	;# 
  1029  0002                     	;# 
  1030  0003                     	;# 
  1031  0004                     	;# 
  1032  0005                     	;# 
  1033  0006                     	;# 
  1034  0007                     	;# 
  1035  0008                     	;# 
  1036  0009                     	;# 
  1037  000A                     	;# 
  1038  000B                     	;# 
  1039  000C                     	;# 
  1040  000D                     	;# 
  1041  000E                     	;# 
  1042  0010                     	;# 
  1043  0011                     	;# 
  1044  0012                     	;# 
  1045  0013                     	;# 
  1046  0014                     	;# 
  1047  0015                     	;# 
  1048  0016                     	;# 
  1049  0016                     	;# 
  1050  0017                     	;# 
  1051  0018                     	;# 
  1052  0019                     	;# 
  1053  001A                     	;# 
  1054  001A                     	;# 
  1055  001B                     	;# 
  1056  001B                     	;# 
  1057  001C                     	;# 
  1058  001D                     	;# 
  1059  001E                     	;# 
  1060  001F                     	;# 
  1061  008C                     	;# 
  1062  008D                     	;# 
  1063  008E                     	;# 
  1064  0090                     	;# 
  1065  0091                     	;# 
  1066  0092                     	;# 
  1067  0093                     	;# 
  1068  0094                     	;# 
  1069  0095                     	;# 
  1070  0096                     	;# 
  1071  0098                     	;# 
  1072  0099                     	;# 
  1073  009A                     	;# 
  1074  009B                     	;# 
  1075  009B                     	;# 
  1076  009C                     	;# 
  1077  009D                     	;# 
  1078  009E                     	;# 
  1079  009F                     	;# 
  1080  010C                     	;# 
  1081  010D                     	;# 
  1082  010E                     	;# 
  1083  0111                     	;# 
  1084  0112                     	;# 
  1085  0113                     	;# 
  1086  0114                     	;# 
  1087  0115                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  0118                     	;# 
  1091  0119                     	;# 
  1092  011C                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0197                     	;# 
  1105  0199                     	;# 
  1106  0199                     	;# 
  1107  0199                     	;# 
  1108  019A                     	;# 
  1109  019A                     	;# 
  1110  019A                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019C                     	;# 
  1117  019C                     	;# 
  1118  019C                     	;# 
  1119  019D                     	;# 
  1120  019D                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019E                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  019F                     	;# 
  1128  019F                     	;# 
  1129  019F                     	;# 
  1130  020C                     	;# 
  1131  020D                     	;# 
  1132  020E                     	;# 
  1133  0211                     	;# 
  1134  0211                     	;# 
  1135  0212                     	;# 
  1136  0212                     	;# 
  1137  0213                     	;# 
  1138  0213                     	;# 
  1139  0214                     	;# 
  1140  0214                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0216                     	;# 
  1146  0216                     	;# 
  1147  0217                     	;# 
  1148  0217                     	;# 
  1149  028C                     	;# 
  1150  028D                     	;# 
  1151  028E                     	;# 
  1152  0291                     	;# 
  1153  0291                     	;# 
  1154  0292                     	;# 
  1155  0293                     	;# 
  1156  0294                     	;# 
  1157  0298                     	;# 
  1158  0298                     	;# 
  1159  0299                     	;# 
  1160  029A                     	;# 
  1161  029B                     	;# 
  1162  029E                     	;# 
  1163  030C                     	;# 
  1164  030D                     	;# 
  1165  030E                     	;# 
  1166  038C                     	;# 
  1167  038D                     	;# 
  1168  038E                     	;# 
  1169  0391                     	;# 
  1170  0392                     	;# 
  1171  0393                     	;# 
  1172  0394                     	;# 
  1173  0395                     	;# 
  1174  0396                     	;# 
  1175  0397                     	;# 
  1176  0398                     	;# 
  1177  0399                     	;# 
  1178  040E                     	;# 
  1179  0413                     	;# 
  1180  0413                     	;# 
  1181  0414                     	;# 
  1182  0414                     	;# 
  1183  0415                     	;# 
  1184  0416                     	;# 
  1185  0417                     	;# 
  1186  0418                     	;# 
  1187  041A                     	;# 
  1188  041A                     	;# 
  1189  041B                     	;# 
  1190  041B                     	;# 
  1191  041C                     	;# 
  1192  041D                     	;# 
  1193  041E                     	;# 
  1194  041F                     	;# 
  1195  0493                     	;# 
  1196  0494                     	;# 
  1197  0495                     	;# 
  1198  0496                     	;# 
  1199  049A                     	;# 
  1200  049B                     	;# 
  1201  049C                     	;# 
  1202  049D                     	;# 
  1203  058C                     	;# 
  1204  058C                     	;# 
  1205  058D                     	;# 
  1206  058E                     	;# 
  1207  058E                     	;# 
  1208  058F                     	;# 
  1209  0590                     	;# 
  1210  0590                     	;# 
  1211  0591                     	;# 
  1212  0592                     	;# 
  1213  0592                     	;# 
  1214  0593                     	;# 
  1215  0594                     	;# 
  1216  0594                     	;# 
  1217  0595                     	;# 
  1218  0596                     	;# 
  1219  0596                     	;# 
  1220  0597                     	;# 
  1221  0598                     	;# 
  1222  0599                     	;# 
  1223  059A                     	;# 
  1224  059B                     	;# 
  1225  059B                     	;# 
  1226  059C                     	;# 
  1227  059D                     	;# 
  1228  060C                     	;# 
  1229  060C                     	;# 
  1230  060D                     	;# 
  1231  060E                     	;# 
  1232  060F                     	;# 
  1233  060F                     	;# 
  1234  0610                     	;# 
  1235  0611                     	;# 
  1236  0612                     	;# 
  1237  0613                     	;# 
  1238  0614                     	;# 
  1239  0617                     	;# 
  1240  0617                     	;# 
  1241  0618                     	;# 
  1242  0619                     	;# 
  1243  061A                     	;# 
  1244  061A                     	;# 
  1245  061B                     	;# 
  1246  061C                     	;# 
  1247  0691                     	;# 
  1248  0692                     	;# 
  1249  0693                     	;# 
  1250  0694                     	;# 
  1251  0695                     	;# 
  1252  0696                     	;# 
  1253  0697                     	;# 
  1254  0699                     	;# 
  1255  069A                     	;# 
  1256  0711                     	;# 
  1257  0712                     	;# 
  1258  0713                     	;# 
  1259  0714                     	;# 
  1260  0715                     	;# 
  1261  0718                     	;# 
  1262  0718                     	;# 
  1263  0719                     	;# 
  1264  071A                     	;# 
  1265  071A                     	;# 
  1266  071B                     	;# 
  1267  071C                     	;# 
  1268  071D                     	;# 
  1269  0791                     	;# 
  1270  0791                     	;# 
  1271  0792                     	;# 
  1272  0793                     	;# 
  1273  0793                     	;# 
  1274  0794                     	;# 
  1275  0795                     	;# 
  1276  0795                     	;# 
  1277  0796                     	;# 
  1278  0797                     	;# 
  1279  0797                     	;# 
  1280  0798                     	;# 
  1281  0799                     	;# 
  1282  079A                     	;# 
  1283  080C                     	;# 
  1284  080C                     	;# 
  1285  080D                     	;# 
  1286  080E                     	;# 
  1287  080E                     	;# 
  1288  080F                     	;# 
  1289  0810                     	;# 
  1290  0810                     	;# 
  1291  0811                     	;# 
  1292  0812                     	;# 
  1293  0812                     	;# 
  1294  0813                     	;# 
  1295  0814                     	;# 
  1296  0815                     	;# 
  1297  0816                     	;# 
  1298  0817                     	;# 
  1299  0818                     	;# 
  1300  0819                     	;# 
  1301  081A                     	;# 
  1302  081A                     	;# 
  1303  081B                     	;# 
  1304  081C                     	;# 
  1305  081C                     	;# 
  1306  081D                     	;# 
  1307  088C                     	;# 
  1308  088D                     	;# 
  1309  088E                     	;# 
  1310  088F                     	;# 
  1311  088F                     	;# 
  1312  0890                     	;# 
  1313  0891                     	;# 
  1314  0892                     	;# 
  1315  0893                     	;# 
  1316  0893                     	;# 
  1317  0894                     	;# 
  1318  0895                     	;# 
  1319  0896                     	;# 
  1320  0897                     	;# 
  1321  0897                     	;# 
  1322  0898                     	;# 
  1323  0899                     	;# 
  1324  0D8C                     	;# 
  1325  0D8C                     	;# 
  1326  0D8D                     	;# 
  1327  0D8E                     	;# 
  1328  0D8F                     	;# 
  1329  0D8F                     	;# 
  1330  0D90                     	;# 
  1331  0D91                     	;# 
  1332  0D92                     	;# 
  1333  0D92                     	;# 
  1334  0D93                     	;# 
  1335  0D94                     	;# 
  1336  0D95                     	;# 
  1337  0D95                     	;# 
  1338  0D96                     	;# 
  1339  0D97                     	;# 
  1340  0D98                     	;# 
  1341  0D99                     	;# 
  1342  0D9A                     	;# 
  1343  0D9B                     	;# 
  1344  0D9C                     	;# 
  1345  0D9D                     	;# 
  1346  0D9E                     	;# 
  1347  0D9E                     	;# 
  1348  0D9F                     	;# 
  1349  0DA0                     	;# 
  1350  0DA1                     	;# 
  1351  0DA1                     	;# 
  1352  0DA2                     	;# 
  1353  0DA3                     	;# 
  1354  0DA4                     	;# 
  1355  0DA4                     	;# 
  1356  0DA5                     	;# 
  1357  0DA6                     	;# 
  1358  0DA7                     	;# 
  1359  0DA7                     	;# 
  1360  0DA8                     	;# 
  1361  0DA9                     	;# 
  1362  0DAA                     	;# 
  1363  0DAB                     	;# 
  1364  0DAC                     	;# 
  1365  0DAD                     	;# 
  1366  0DAE                     	;# 
  1367  0DAF                     	;# 
  1368  0E0F                     	;# 
  1369  0E10                     	;# 
  1370  0E11                     	;# 
  1371  0E12                     	;# 
  1372  0E13                     	;# 
  1373  0E14                     	;# 
  1374  0E15                     	;# 
  1375  0E16                     	;# 
  1376  0E17                     	;# 
  1377  0E18                     	;# 
  1378  0E19                     	;# 
  1379  0E1A                     	;# 
  1380  0E1B                     	;# 
  1381  0E1C                     	;# 
  1382  0E1D                     	;# 
  1383  0E1E                     	;# 
  1384  0E1F                     	;# 
  1385  0E20                     	;# 
  1386  0E21                     	;# 
  1387  0E22                     	;# 
  1388  0E23                     	;# 
  1389  0E24                     	;# 
  1390  0E25                     	;# 
  1391  0E26                     	;# 
  1392  0E27                     	;# 
  1393  0E28                     	;# 
  1394  0E29                     	;# 
  1395  0E2A                     	;# 
  1396  0E2B                     	;# 
  1397  0E2C                     	;# 
  1398  0E2D                     	;# 
  1399  0E2E                     	;# 
  1400  0E90                     	;# 
  1401  0E91                     	;# 
  1402  0E92                     	;# 
  1403  0E94                     	;# 
  1404  0E95                     	;# 
  1405  0E9C                     	;# 
  1406  0E9D                     	;# 
  1407  0E9E                     	;# 
  1408  0E9F                     	;# 
  1409  0EA0                     	;# 
  1410  0EA1                     	;# 
  1411  0EA2                     	;# 
  1412  0EA3                     	;# 
  1413  0EA4                     	;# 
  1414  0EA5                     	;# 
  1415  0EA6                     	;# 
  1416  0EA7                     	;# 
  1417  0F0F                     	;# 
  1418  0F10                     	;# 
  1419  0F11                     	;# 
  1420  0F12                     	;# 
  1421  0F13                     	;# 
  1422  0F14                     	;# 
  1423  0F15                     	;# 
  1424  0F16                     	;# 
  1425  0F17                     	;# 
  1426  0F18                     	;# 
  1427  0F19                     	;# 
  1428  0F1A                     	;# 
  1429  0F1B                     	;# 
  1430  0F1C                     	;# 
  1431  0F1D                     	;# 
  1432  0F1E                     	;# 
  1433  0F1F                     	;# 
  1434  0F20                     	;# 
  1435  0F21                     	;# 
  1436  0F22                     	;# 
  1437  0F23                     	;# 
  1438  0F24                     	;# 
  1439  0F25                     	;# 
  1440  0F26                     	;# 
  1441  0F27                     	;# 
  1442  0F28                     	;# 
  1443  0F29                     	;# 
  1444  0F2A                     	;# 
  1445  0F2B                     	;# 
  1446  0F2C                     	;# 
  1447  0F2D                     	;# 
  1448  0F2E                     	;# 
  1449  0F2F                     	;# 
  1450  0F30                     	;# 
  1451  0F31                     	;# 
  1452  0F32                     	;# 
  1453  0F33                     	;# 
  1454  0F34                     	;# 
  1455  0F35                     	;# 
  1456  0F36                     	;# 
  1457  0F37                     	;# 
  1458  0FE4                     	;# 
  1459  0FE5                     	;# 
  1460  0FE6                     	;# 
  1461  0FE7                     	;# 
  1462  0FE8                     	;# 
  1463  0FE9                     	;# 
  1464  0FEA                     	;# 
  1465  0FEB                     	;# 
  1466  0FED                     	;# 
  1467  0FEE                     	;# 
  1468  0FEF                     	;# 
  1469  0000                     	;# 
  1470  0001                     	;# 
  1471  0002                     	;# 
  1472  0003                     	;# 
  1473  0004                     	;# 
  1474  0005                     	;# 
  1475  0006                     	;# 
  1476  0007                     	;# 
  1477  0008                     	;# 
  1478  0009                     	;# 
  1479  000A                     	;# 
  1480  000B                     	;# 
  1481  000C                     	;# 
  1482  000D                     	;# 
  1483  000E                     	;# 
  1484  0010                     	;# 
  1485  0011                     	;# 
  1486  0012                     	;# 
  1487  0013                     	;# 
  1488  0014                     	;# 
  1489  0015                     	;# 
  1490  0016                     	;# 
  1491  0016                     	;# 
  1492  0017                     	;# 
  1493  0018                     	;# 
  1494  0019                     	;# 
  1495  001A                     	;# 
  1496  001A                     	;# 
  1497  001B                     	;# 
  1498  001B                     	;# 
  1499  001C                     	;# 
  1500  001D                     	;# 
  1501  001E                     	;# 
  1502  001F                     	;# 
  1503  008C                     	;# 
  1504  008D                     	;# 
  1505  008E                     	;# 
  1506  0090                     	;# 
  1507  0091                     	;# 
  1508  0092                     	;# 
  1509  0093                     	;# 
  1510  0094                     	;# 
  1511  0095                     	;# 
  1512  0096                     	;# 
  1513  0098                     	;# 
  1514  0099                     	;# 
  1515  009A                     	;# 
  1516  009B                     	;# 
  1517  009B                     	;# 
  1518  009C                     	;# 
  1519  009D                     	;# 
  1520  009E                     	;# 
  1521  009F                     	;# 
  1522  010C                     	;# 
  1523  010D                     	;# 
  1524  010E                     	;# 
  1525  0111                     	;# 
  1526  0112                     	;# 
  1527  0113                     	;# 
  1528  0114                     	;# 
  1529  0115                     	;# 
  1530  0116                     	;# 
  1531  0117                     	;# 
  1532  0118                     	;# 
  1533  0119                     	;# 
  1534  011C                     	;# 
  1535  018C                     	;# 
  1536  018D                     	;# 
  1537  018E                     	;# 
  1538  0191                     	;# 
  1539  0191                     	;# 
  1540  0192                     	;# 
  1541  0193                     	;# 
  1542  0193                     	;# 
  1543  0194                     	;# 
  1544  0195                     	;# 
  1545  0196                     	;# 
  1546  0197                     	;# 
  1547  0199                     	;# 
  1548  0199                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019A                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019C                     	;# 
  1561  019D                     	;# 
  1562  019D                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019E                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  019F                     	;# 
  1569  019F                     	;# 
  1570  019F                     	;# 
  1571  019F                     	;# 
  1572  020C                     	;# 
  1573  020D                     	;# 
  1574  020E                     	;# 
  1575  0211                     	;# 
  1576  0211                     	;# 
  1577  0212                     	;# 
  1578  0212                     	;# 
  1579  0213                     	;# 
  1580  0213                     	;# 
  1581  0214                     	;# 
  1582  0214                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0215                     	;# 
  1586  0215                     	;# 
  1587  0216                     	;# 
  1588  0216                     	;# 
  1589  0217                     	;# 
  1590  0217                     	;# 
  1591  028C                     	;# 
  1592  028D                     	;# 
  1593  028E                     	;# 
  1594  0291                     	;# 
  1595  0291                     	;# 
  1596  0292                     	;# 
  1597  0293                     	;# 
  1598  0294                     	;# 
  1599  0298                     	;# 
  1600  0298                     	;# 
  1601  0299                     	;# 
  1602  029A                     	;# 
  1603  029B                     	;# 
  1604  029E                     	;# 
  1605  030C                     	;# 
  1606  030D                     	;# 
  1607  030E                     	;# 
  1608  038C                     	;# 
  1609  038D                     	;# 
  1610  038E                     	;# 
  1611  0391                     	;# 
  1612  0392                     	;# 
  1613  0393                     	;# 
  1614  0394                     	;# 
  1615  0395                     	;# 
  1616  0396                     	;# 
  1617  0397                     	;# 
  1618  0398                     	;# 
  1619  0399                     	;# 
  1620  040E                     	;# 
  1621  0413                     	;# 
  1622  0413                     	;# 
  1623  0414                     	;# 
  1624  0414                     	;# 
  1625  0415                     	;# 
  1626  0416                     	;# 
  1627  0417                     	;# 
  1628  0418                     	;# 
  1629  041A                     	;# 
  1630  041A                     	;# 
  1631  041B                     	;# 
  1632  041B                     	;# 
  1633  041C                     	;# 
  1634  041D                     	;# 
  1635  041E                     	;# 
  1636  041F                     	;# 
  1637  0493                     	;# 
  1638  0494                     	;# 
  1639  0495                     	;# 
  1640  0496                     	;# 
  1641  049A                     	;# 
  1642  049B                     	;# 
  1643  049C                     	;# 
  1644  049D                     	;# 
  1645  058C                     	;# 
  1646  058C                     	;# 
  1647  058D                     	;# 
  1648  058E                     	;# 
  1649  058E                     	;# 
  1650  058F                     	;# 
  1651  0590                     	;# 
  1652  0590                     	;# 
  1653  0591                     	;# 
  1654  0592                     	;# 
  1655  0592                     	;# 
  1656  0593                     	;# 
  1657  0594                     	;# 
  1658  0594                     	;# 
  1659  0595                     	;# 
  1660  0596                     	;# 
  1661  0596                     	;# 
  1662  0597                     	;# 
  1663  0598                     	;# 
  1664  0599                     	;# 
  1665  059A                     	;# 
  1666  059B                     	;# 
  1667  059B                     	;# 
  1668  059C                     	;# 
  1669  059D                     	;# 
  1670  060C                     	;# 
  1671  060C                     	;# 
  1672  060D                     	;# 
  1673  060E                     	;# 
  1674  060F                     	;# 
  1675  060F                     	;# 
  1676  0610                     	;# 
  1677  0611                     	;# 
  1678  0612                     	;# 
  1679  0613                     	;# 
  1680  0614                     	;# 
  1681  0617                     	;# 
  1682  0617                     	;# 
  1683  0618                     	;# 
  1684  0619                     	;# 
  1685  061A                     	;# 
  1686  061A                     	;# 
  1687  061B                     	;# 
  1688  061C                     	;# 
  1689  0691                     	;# 
  1690  0692                     	;# 
  1691  0693                     	;# 
  1692  0694                     	;# 
  1693  0695                     	;# 
  1694  0696                     	;# 
  1695  0697                     	;# 
  1696  0699                     	;# 
  1697  069A                     	;# 
  1698  0711                     	;# 
  1699  0712                     	;# 
  1700  0713                     	;# 
  1701  0714                     	;# 
  1702  0715                     	;# 
  1703  0718                     	;# 
  1704  0718                     	;# 
  1705  0719                     	;# 
  1706  071A                     	;# 
  1707  071A                     	;# 
  1708  071B                     	;# 
  1709  071C                     	;# 
  1710  071D                     	;# 
  1711  0791                     	;# 
  1712  0791                     	;# 
  1713  0792                     	;# 
  1714  0793                     	;# 
  1715  0793                     	;# 
  1716  0794                     	;# 
  1717  0795                     	;# 
  1718  0795                     	;# 
  1719  0796                     	;# 
  1720  0797                     	;# 
  1721  0797                     	;# 
  1722  0798                     	;# 
  1723  0799                     	;# 
  1724  079A                     	;# 
  1725  080C                     	;# 
  1726  080C                     	;# 
  1727  080D                     	;# 
  1728  080E                     	;# 
  1729  080E                     	;# 
  1730  080F                     	;# 
  1731  0810                     	;# 
  1732  0810                     	;# 
  1733  0811                     	;# 
  1734  0812                     	;# 
  1735  0812                     	;# 
  1736  0813                     	;# 
  1737  0814                     	;# 
  1738  0815                     	;# 
  1739  0816                     	;# 
  1740  0817                     	;# 
  1741  0818                     	;# 
  1742  0819                     	;# 
  1743  081A                     	;# 
  1744  081A                     	;# 
  1745  081B                     	;# 
  1746  081C                     	;# 
  1747  081C                     	;# 
  1748  081D                     	;# 
  1749  088C                     	;# 
  1750  088D                     	;# 
  1751  088E                     	;# 
  1752  088F                     	;# 
  1753  088F                     	;# 
  1754  0890                     	;# 
  1755  0891                     	;# 
  1756  0892                     	;# 
  1757  0893                     	;# 
  1758  0893                     	;# 
  1759  0894                     	;# 
  1760  0895                     	;# 
  1761  0896                     	;# 
  1762  0897                     	;# 
  1763  0897                     	;# 
  1764  0898                     	;# 
  1765  0899                     	;# 
  1766  0D8C                     	;# 
  1767  0D8C                     	;# 
  1768  0D8D                     	;# 
  1769  0D8E                     	;# 
  1770  0D8F                     	;# 
  1771  0D8F                     	;# 
  1772  0D90                     	;# 
  1773  0D91                     	;# 
  1774  0D92                     	;# 
  1775  0D92                     	;# 
  1776  0D93                     	;# 
  1777  0D94                     	;# 
  1778  0D95                     	;# 
  1779  0D95                     	;# 
  1780  0D96                     	;# 
  1781  0D97                     	;# 
  1782  0D98                     	;# 
  1783  0D99                     	;# 
  1784  0D9A                     	;# 
  1785  0D9B                     	;# 
  1786  0D9C                     	;# 
  1787  0D9D                     	;# 
  1788  0D9E                     	;# 
  1789  0D9E                     	;# 
  1790  0D9F                     	;# 
  1791  0DA0                     	;# 
  1792  0DA1                     	;# 
  1793  0DA1                     	;# 
  1794  0DA2                     	;# 
  1795  0DA3                     	;# 
  1796  0DA4                     	;# 
  1797  0DA4                     	;# 
  1798  0DA5                     	;# 
  1799  0DA6                     	;# 
  1800  0DA7                     	;# 
  1801  0DA7                     	;# 
  1802  0DA8                     	;# 
  1803  0DA9                     	;# 
  1804  0DAA                     	;# 
  1805  0DAB                     	;# 
  1806  0DAC                     	;# 
  1807  0DAD                     	;# 
  1808  0DAE                     	;# 
  1809  0DAF                     	;# 
  1810  0E0F                     	;# 
  1811  0E10                     	;# 
  1812  0E11                     	;# 
  1813  0E12                     	;# 
  1814  0E13                     	;# 
  1815  0E14                     	;# 
  1816  0E15                     	;# 
  1817  0E16                     	;# 
  1818  0E17                     	;# 
  1819  0E18                     	;# 
  1820  0E19                     	;# 
  1821  0E1A                     	;# 
  1822  0E1B                     	;# 
  1823  0E1C                     	;# 
  1824  0E1D                     	;# 
  1825  0E1E                     	;# 
  1826  0E1F                     	;# 
  1827  0E20                     	;# 
  1828  0E21                     	;# 
  1829  0E22                     	;# 
  1830  0E23                     	;# 
  1831  0E24                     	;# 
  1832  0E25                     	;# 
  1833  0E26                     	;# 
  1834  0E27                     	;# 
  1835  0E28                     	;# 
  1836  0E29                     	;# 
  1837  0E2A                     	;# 
  1838  0E2B                     	;# 
  1839  0E2C                     	;# 
  1840  0E2D                     	;# 
  1841  0E2E                     	;# 
  1842  0E90                     	;# 
  1843  0E91                     	;# 
  1844  0E92                     	;# 
  1845  0E94                     	;# 
  1846  0E95                     	;# 
  1847  0E9C                     	;# 
  1848  0E9D                     	;# 
  1849  0E9E                     	;# 
  1850  0E9F                     	;# 
  1851  0EA0                     	;# 
  1852  0EA1                     	;# 
  1853  0EA2                     	;# 
  1854  0EA3                     	;# 
  1855  0EA4                     	;# 
  1856  0EA5                     	;# 
  1857  0EA6                     	;# 
  1858  0EA7                     	;# 
  1859  0F0F                     	;# 
  1860  0F10                     	;# 
  1861  0F11                     	;# 
  1862  0F12                     	;# 
  1863  0F13                     	;# 
  1864  0F14                     	;# 
  1865  0F15                     	;# 
  1866  0F16                     	;# 
  1867  0F17                     	;# 
  1868  0F18                     	;# 
  1869  0F19                     	;# 
  1870  0F1A                     	;# 
  1871  0F1B                     	;# 
  1872  0F1C                     	;# 
  1873  0F1D                     	;# 
  1874  0F1E                     	;# 
  1875  0F1F                     	;# 
  1876  0F20                     	;# 
  1877  0F21                     	;# 
  1878  0F22                     	;# 
  1879  0F23                     	;# 
  1880  0F24                     	;# 
  1881  0F25                     	;# 
  1882  0F26                     	;# 
  1883  0F27                     	;# 
  1884  0F28                     	;# 
  1885  0F29                     	;# 
  1886  0F2A                     	;# 
  1887  0F2B                     	;# 
  1888  0F2C                     	;# 
  1889  0F2D                     	;# 
  1890  0F2E                     	;# 
  1891  0F2F                     	;# 
  1892  0F30                     	;# 
  1893  0F31                     	;# 
  1894  0F32                     	;# 
  1895  0F33                     	;# 
  1896  0F34                     	;# 
  1897  0F35                     	;# 
  1898  0F36                     	;# 
  1899  0F37                     	;# 
  1900  0FE4                     	;# 
  1901  0FE5                     	;# 
  1902  0FE6                     	;# 
  1903  0FE7                     	;# 
  1904  0FE8                     	;# 
  1905  0FE9                     	;# 
  1906  0FEA                     	;# 
  1907  0FEB                     	;# 
  1908  0FED                     	;# 
  1909  0FEE                     	;# 
  1910  0FEF                     	;# 
  1911  0000                     	;# 
  1912  0001                     	;# 
  1913  0002                     	;# 
  1914  0003                     	;# 
  1915  0004                     	;# 
  1916  0005                     	;# 
  1917  0006                     	;# 
  1918  0007                     	;# 
  1919  0008                     	;# 
  1920  0009                     	;# 
  1921  000A                     	;# 
  1922  000B                     	;# 
  1923  000C                     	;# 
  1924  000D                     	;# 
  1925  000E                     	;# 
  1926  0010                     	;# 
  1927  0011                     	;# 
  1928  0012                     	;# 
  1929  0013                     	;# 
  1930  0014                     	;# 
  1931  0015                     	;# 
  1932  0016                     	;# 
  1933  0016                     	;# 
  1934  0017                     	;# 
  1935  0018                     	;# 
  1936  0019                     	;# 
  1937  001A                     	;# 
  1938  001A                     	;# 
  1939  001B                     	;# 
  1940  001B                     	;# 
  1941  001C                     	;# 
  1942  001D                     	;# 
  1943  001E                     	;# 
  1944  001F                     	;# 
  1945  008C                     	;# 
  1946  008D                     	;# 
  1947  008E                     	;# 
  1948  0090                     	;# 
  1949  0091                     	;# 
  1950  0092                     	;# 
  1951  0093                     	;# 
  1952  0094                     	;# 
  1953  0095                     	;# 
  1954  0096                     	;# 
  1955  0098                     	;# 
  1956  0099                     	;# 
  1957  009A                     	;# 
  1958  009B                     	;# 
  1959  009B                     	;# 
  1960  009C                     	;# 
  1961  009D                     	;# 
  1962  009E                     	;# 
  1963  009F                     	;# 
  1964  010C                     	;# 
  1965  010D                     	;# 
  1966  010E                     	;# 
  1967  0111                     	;# 
  1968  0112                     	;# 
  1969  0113                     	;# 
  1970  0114                     	;# 
  1971  0115                     	;# 
  1972  0116                     	;# 
  1973  0117                     	;# 
  1974  0118                     	;# 
  1975  0119                     	;# 
  1976  011C                     	;# 
  1977  018C                     	;# 
  1978  018D                     	;# 
  1979  018E                     	;# 
  1980  0191                     	;# 
  1981  0191                     	;# 
  1982  0192                     	;# 
  1983  0193                     	;# 
  1984  0193                     	;# 
  1985  0194                     	;# 
  1986  0195                     	;# 
  1987  0196                     	;# 
  1988  0197                     	;# 
  1989  0199                     	;# 
  1990  0199                     	;# 
  1991  0199                     	;# 
  1992  019A                     	;# 
  1993  019A                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019C                     	;# 
  2001  019C                     	;# 
  2002  019C                     	;# 
  2003  019D                     	;# 
  2004  019D                     	;# 
  2005  019D                     	;# 
  2006  019E                     	;# 
  2007  019E                     	;# 
  2008  019E                     	;# 
  2009  019F                     	;# 
  2010  019F                     	;# 
  2011  019F                     	;# 
  2012  019F                     	;# 
  2013  019F                     	;# 
  2014  020C                     	;# 
  2015  020D                     	;# 
  2016  020E                     	;# 
  2017  0211                     	;# 
  2018  0211                     	;# 
  2019  0212                     	;# 
  2020  0212                     	;# 
  2021  0213                     	;# 
  2022  0213                     	;# 
  2023  0214                     	;# 
  2024  0214                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  028C                     	;# 
  2034  028D                     	;# 
  2035  028E                     	;# 
  2036  0291                     	;# 
  2037  0291                     	;# 
  2038  0292                     	;# 
  2039  0293                     	;# 
  2040  0294                     	;# 
  2041  0298                     	;# 
  2042  0298                     	;# 
  2043  0299                     	;# 
  2044  029A                     	;# 
  2045  029B                     	;# 
  2046  029E                     	;# 
  2047  030C                     	;# 
  2048  030D                     	;# 
  2049  030E                     	;# 
  2050  038C                     	;# 
  2051  038D                     	;# 
  2052  038E                     	;# 
  2053  0391                     	;# 
  2054  0392                     	;# 
  2055  0393                     	;# 
  2056  0394                     	;# 
  2057  0395                     	;# 
  2058  0396                     	;# 
  2059  0397                     	;# 
  2060  0398                     	;# 
  2061  0399                     	;# 
  2062  040E                     	;# 
  2063  0413                     	;# 
  2064  0413                     	;# 
  2065  0414                     	;# 
  2066  0414                     	;# 
  2067  0415                     	;# 
  2068  0416                     	;# 
  2069  0417                     	;# 
  2070  0418                     	;# 
  2071  041A                     	;# 
  2072  041A                     	;# 
  2073  041B                     	;# 
  2074  041B                     	;# 
  2075  041C                     	;# 
  2076  041D                     	;# 
  2077  041E                     	;# 
  2078  041F                     	;# 
  2079  0493                     	;# 
  2080  0494                     	;# 
  2081  0495                     	;# 
  2082  0496                     	;# 
  2083  049A                     	;# 
  2084  049B                     	;# 
  2085  049C                     	;# 
  2086  049D                     	;# 
  2087  058C                     	;# 
  2088  058C                     	;# 
  2089  058D                     	;# 
  2090  058E                     	;# 
  2091  058E                     	;# 
  2092  058F                     	;# 
  2093  0590                     	;# 
  2094  0590                     	;# 
  2095  0591                     	;# 
  2096  0592                     	;# 
  2097  0592                     	;# 
  2098  0593                     	;# 
  2099  0594                     	;# 
  2100  0594                     	;# 
  2101  0595                     	;# 
  2102  0596                     	;# 
  2103  0596                     	;# 
  2104  0597                     	;# 
  2105  0598                     	;# 
  2106  0599                     	;# 
  2107  059A                     	;# 
  2108  059B                     	;# 
  2109  059B                     	;# 
  2110  059C                     	;# 
  2111  059D                     	;# 
  2112  060C                     	;# 
  2113  060C                     	;# 
  2114  060D                     	;# 
  2115  060E                     	;# 
  2116  060F                     	;# 
  2117  060F                     	;# 
  2118  0610                     	;# 
  2119  0611                     	;# 
  2120  0612                     	;# 
  2121  0613                     	;# 
  2122  0614                     	;# 
  2123  0617                     	;# 
  2124  0617                     	;# 
  2125  0618                     	;# 
  2126  0619                     	;# 
  2127  061A                     	;# 
  2128  061A                     	;# 
  2129  061B                     	;# 
  2130  061C                     	;# 
  2131  0691                     	;# 
  2132  0692                     	;# 
  2133  0693                     	;# 
  2134  0694                     	;# 
  2135  0695                     	;# 
  2136  0696                     	;# 
  2137  0697                     	;# 
  2138  0699                     	;# 
  2139  069A                     	;# 
  2140  0711                     	;# 
  2141  0712                     	;# 
  2142  0713                     	;# 
  2143  0714                     	;# 
  2144  0715                     	;# 
  2145  0718                     	;# 
  2146  0718                     	;# 
  2147  0719                     	;# 
  2148  071A                     	;# 
  2149  071A                     	;# 
  2150  071B                     	;# 
  2151  071C                     	;# 
  2152  071D                     	;# 
  2153  0791                     	;# 
  2154  0791                     	;# 
  2155  0792                     	;# 
  2156  0793                     	;# 
  2157  0793                     	;# 
  2158  0794                     	;# 
  2159  0795                     	;# 
  2160  0795                     	;# 
  2161  0796                     	;# 
  2162  0797                     	;# 
  2163  0797                     	;# 
  2164  0798                     	;# 
  2165  0799                     	;# 
  2166  079A                     	;# 
  2167  080C                     	;# 
  2168  080C                     	;# 
  2169  080D                     	;# 
  2170  080E                     	;# 
  2171  080E                     	;# 
  2172  080F                     	;# 
  2173  0810                     	;# 
  2174  0810                     	;# 
  2175  0811                     	;# 
  2176  0812                     	;# 
  2177  0812                     	;# 
  2178  0813                     	;# 
  2179  0814                     	;# 
  2180  0815                     	;# 
  2181  0816                     	;# 
  2182  0817                     	;# 
  2183  0818                     	;# 
  2184  0819                     	;# 
  2185  081A                     	;# 
  2186  081A                     	;# 
  2187  081B                     	;# 
  2188  081C                     	;# 
  2189  081C                     	;# 
  2190  081D                     	;# 
  2191  088C                     	;# 
  2192  088D                     	;# 
  2193  088E                     	;# 
  2194  088F                     	;# 
  2195  088F                     	;# 
  2196  0890                     	;# 
  2197  0891                     	;# 
  2198  0892                     	;# 
  2199  0893                     	;# 
  2200  0893                     	;# 
  2201  0894                     	;# 
  2202  0895                     	;# 
  2203  0896                     	;# 
  2204  0897                     	;# 
  2205  0897                     	;# 
  2206  0898                     	;# 
  2207  0899                     	;# 
  2208  0D8C                     	;# 
  2209  0D8C                     	;# 
  2210  0D8D                     	;# 
  2211  0D8E                     	;# 
  2212  0D8F                     	;# 
  2213  0D8F                     	;# 
  2214  0D90                     	;# 
  2215  0D91                     	;# 
  2216  0D92                     	;# 
  2217  0D92                     	;# 
  2218  0D93                     	;# 
  2219  0D94                     	;# 
  2220  0D95                     	;# 
  2221  0D95                     	;# 
  2222  0D96                     	;# 
  2223  0D97                     	;# 
  2224  0D98                     	;# 
  2225  0D99                     	;# 
  2226  0D9A                     	;# 
  2227  0D9B                     	;# 
  2228  0D9C                     	;# 
  2229  0D9D                     	;# 
  2230  0D9E                     	;# 
  2231  0D9E                     	;# 
  2232  0D9F                     	;# 
  2233  0DA0                     	;# 
  2234  0DA1                     	;# 
  2235  0DA1                     	;# 
  2236  0DA2                     	;# 
  2237  0DA3                     	;# 
  2238  0DA4                     	;# 
  2239  0DA4                     	;# 
  2240  0DA5                     	;# 
  2241  0DA6                     	;# 
  2242  0DA7                     	;# 
  2243  0DA7                     	;# 
  2244  0DA8                     	;# 
  2245  0DA9                     	;# 
  2246  0DAA                     	;# 
  2247  0DAB                     	;# 
  2248  0DAC                     	;# 
  2249  0DAD                     	;# 
  2250  0DAE                     	;# 
  2251  0DAF                     	;# 
  2252  0E0F                     	;# 
  2253  0E10                     	;# 
  2254  0E11                     	;# 
  2255  0E12                     	;# 
  2256  0E13                     	;# 
  2257  0E14                     	;# 
  2258  0E15                     	;# 
  2259  0E16                     	;# 
  2260  0E17                     	;# 
  2261  0E18                     	;# 
  2262  0E19                     	;# 
  2263  0E1A                     	;# 
  2264  0E1B                     	;# 
  2265  0E1C                     	;# 
  2266  0E1D                     	;# 
  2267  0E1E                     	;# 
  2268  0E1F                     	;# 
  2269  0E20                     	;# 
  2270  0E21                     	;# 
  2271  0E22                     	;# 
  2272  0E23                     	;# 
  2273  0E24                     	;# 
  2274  0E25                     	;# 
  2275  0E26                     	;# 
  2276  0E27                     	;# 
  2277  0E28                     	;# 
  2278  0E29                     	;# 
  2279  0E2A                     	;# 
  2280  0E2B                     	;# 
  2281  0E2C                     	;# 
  2282  0E2D                     	;# 
  2283  0E2E                     	;# 
  2284  0E90                     	;# 
  2285  0E91                     	;# 
  2286  0E92                     	;# 
  2287  0E94                     	;# 
  2288  0E95                     	;# 
  2289  0E9C                     	;# 
  2290  0E9D                     	;# 
  2291  0E9E                     	;# 
  2292  0E9F                     	;# 
  2293  0EA0                     	;# 
  2294  0EA1                     	;# 
  2295  0EA2                     	;# 
  2296  0EA3                     	;# 
  2297  0EA4                     	;# 
  2298  0EA5                     	;# 
  2299  0EA6                     	;# 
  2300  0EA7                     	;# 
  2301  0F0F                     	;# 
  2302  0F10                     	;# 
  2303  0F11                     	;# 
  2304  0F12                     	;# 
  2305  0F13                     	;# 
  2306  0F14                     	;# 
  2307  0F15                     	;# 
  2308  0F16                     	;# 
  2309  0F17                     	;# 
  2310  0F18                     	;# 
  2311  0F19                     	;# 
  2312  0F1A                     	;# 
  2313  0F1B                     	;# 
  2314  0F1C                     	;# 
  2315  0F1D                     	;# 
  2316  0F1E                     	;# 
  2317  0F1F                     	;# 
  2318  0F20                     	;# 
  2319  0F21                     	;# 
  2320  0F22                     	;# 
  2321  0F23                     	;# 
  2322  0F24                     	;# 
  2323  0F25                     	;# 
  2324  0F26                     	;# 
  2325  0F27                     	;# 
  2326  0F28                     	;# 
  2327  0F29                     	;# 
  2328  0F2A                     	;# 
  2329  0F2B                     	;# 
  2330  0F2C                     	;# 
  2331  0F2D                     	;# 
  2332  0F2E                     	;# 
  2333  0F2F                     	;# 
  2334  0F30                     	;# 
  2335  0F31                     	;# 
  2336  0F32                     	;# 
  2337  0F33                     	;# 
  2338  0F34                     	;# 
  2339  0F35                     	;# 
  2340  0F36                     	;# 
  2341  0F37                     	;# 
  2342  0FE4                     	;# 
  2343  0FE5                     	;# 
  2344  0FE6                     	;# 
  2345  0FE7                     	;# 
  2346  0FE8                     	;# 
  2347  0FE9                     	;# 
  2348  0FEA                     	;# 
  2349  0FEB                     	;# 
  2350  0FED                     	;# 
  2351  0FEE                     	;# 
  2352  0FEF                     	;# 
  2353  0000                     	;# 
  2354  0001                     	;# 
  2355  0002                     	;# 
  2356  0003                     	;# 
  2357  0004                     	;# 
  2358  0005                     	;# 
  2359  0006                     	;# 
  2360  0007                     	;# 
  2361  0008                     	;# 
  2362  0009                     	;# 
  2363  000A                     	;# 
  2364  000B                     	;# 
  2365  000C                     	;# 
  2366  000D                     	;# 
  2367  000E                     	;# 
  2368  0010                     	;# 
  2369  0011                     	;# 
  2370  0012                     	;# 
  2371  0013                     	;# 
  2372  0014                     	;# 
  2373  0015                     	;# 
  2374  0016                     	;# 
  2375  0016                     	;# 
  2376  0017                     	;# 
  2377  0018                     	;# 
  2378  0019                     	;# 
  2379  001A                     	;# 
  2380  001A                     	;# 
  2381  001B                     	;# 
  2382  001B                     	;# 
  2383  001C                     	;# 
  2384  001D                     	;# 
  2385  001E                     	;# 
  2386  001F                     	;# 
  2387  008C                     	;# 
  2388  008D                     	;# 
  2389  008E                     	;# 
  2390  0090                     	;# 
  2391  0091                     	;# 
  2392  0092                     	;# 
  2393  0093                     	;# 
  2394  0094                     	;# 
  2395  0095                     	;# 
  2396  0096                     	;# 
  2397  0098                     	;# 
  2398  0099                     	;# 
  2399  009A                     	;# 
  2400  009B                     	;# 
  2401  009B                     	;# 
  2402  009C                     	;# 
  2403  009D                     	;# 
  2404  009E                     	;# 
  2405  009F                     	;# 
  2406  010C                     	;# 
  2407  010D                     	;# 
  2408  010E                     	;# 
  2409  0111                     	;# 
  2410  0112                     	;# 
  2411  0113                     	;# 
  2412  0114                     	;# 
  2413  0115                     	;# 
  2414  0116                     	;# 
  2415  0117                     	;# 
  2416  0118                     	;# 
  2417  0119                     	;# 
  2418  011C                     	;# 
  2419  018C                     	;# 
  2420  018D                     	;# 
  2421  018E                     	;# 
  2422  0191                     	;# 
  2423  0191                     	;# 
  2424  0192                     	;# 
  2425  0193                     	;# 
  2426  0193                     	;# 
  2427  0194                     	;# 
  2428  0195                     	;# 
  2429  0196                     	;# 
  2430  0197                     	;# 
  2431  0199                     	;# 
  2432  0199                     	;# 
  2433  0199                     	;# 
  2434  019A                     	;# 
  2435  019A                     	;# 
  2436  019A                     	;# 
  2437  019B                     	;# 
  2438  019B                     	;# 
  2439  019B                     	;# 
  2440  019B                     	;# 
  2441  019B                     	;# 
  2442  019C                     	;# 
  2443  019C                     	;# 
  2444  019C                     	;# 
  2445  019D                     	;# 
  2446  019D                     	;# 
  2447  019D                     	;# 
  2448  019E                     	;# 
  2449  019E                     	;# 
  2450  019E                     	;# 
  2451  019F                     	;# 
  2452  019F                     	;# 
  2453  019F                     	;# 
  2454  019F                     	;# 
  2455  019F                     	;# 
  2456  020C                     	;# 
  2457  020D                     	;# 
  2458  020E                     	;# 
  2459  0211                     	;# 
  2460  0211                     	;# 
  2461  0212                     	;# 
  2462  0212                     	;# 
  2463  0213                     	;# 
  2464  0213                     	;# 
  2465  0214                     	;# 
  2466  0214                     	;# 
  2467  0215                     	;# 
  2468  0215                     	;# 
  2469  0215                     	;# 
  2470  0215                     	;# 
  2471  0216                     	;# 
  2472  0216                     	;# 
  2473  0217                     	;# 
  2474  0217                     	;# 
  2475  028C                     	;# 
  2476  028D                     	;# 
  2477  028E                     	;# 
  2478  0291                     	;# 
  2479  0291                     	;# 
  2480  0292                     	;# 
  2481  0293                     	;# 
  2482  0294                     	;# 
  2483  0298                     	;# 
  2484  0298                     	;# 
  2485  0299                     	;# 
  2486  029A                     	;# 
  2487  029B                     	;# 
  2488  029E                     	;# 
  2489  030C                     	;# 
  2490  030D                     	;# 
  2491  030E                     	;# 
  2492  038C                     	;# 
  2493  038D                     	;# 
  2494  038E                     	;# 
  2495  0391                     	;# 
  2496  0392                     	;# 
  2497  0393                     	;# 
  2498  0394                     	;# 
  2499  0395                     	;# 
  2500  0396                     	;# 
  2501  0397                     	;# 
  2502  0398                     	;# 
  2503  0399                     	;# 
  2504  040E                     	;# 
  2505  0413                     	;# 
  2506  0413                     	;# 
  2507  0414                     	;# 
  2508  0414                     	;# 
  2509  0415                     	;# 
  2510  0416                     	;# 
  2511  0417                     	;# 
  2512  0418                     	;# 
  2513  041A                     	;# 
  2514  041A                     	;# 
  2515  041B                     	;# 
  2516  041B                     	;# 
  2517  041C                     	;# 
  2518  041D                     	;# 
  2519  041E                     	;# 
  2520  041F                     	;# 
  2521  0493                     	;# 
  2522  0494                     	;# 
  2523  0495                     	;# 
  2524  0496                     	;# 
  2525  049A                     	;# 
  2526  049B                     	;# 
  2527  049C                     	;# 
  2528  049D                     	;# 
  2529  058C                     	;# 
  2530  058C                     	;# 
  2531  058D                     	;# 
  2532  058E                     	;# 
  2533  058E                     	;# 
  2534  058F                     	;# 
  2535  0590                     	;# 
  2536  0590                     	;# 
  2537  0591                     	;# 
  2538  0592                     	;# 
  2539  0592                     	;# 
  2540  0593                     	;# 
  2541  0594                     	;# 
  2542  0594                     	;# 
  2543  0595                     	;# 
  2544  0596                     	;# 
  2545  0596                     	;# 
  2546  0597                     	;# 
  2547  0598                     	;# 
  2548  0599                     	;# 
  2549  059A                     	;# 
  2550  059B                     	;# 
  2551  059B                     	;# 
  2552  059C                     	;# 
  2553  059D                     	;# 
  2554  060C                     	;# 
  2555  060C                     	;# 
  2556  060D                     	;# 
  2557  060E                     	;# 
  2558  060F                     	;# 
  2559  060F                     	;# 
  2560  0610                     	;# 
  2561  0611                     	;# 
  2562  0612                     	;# 
  2563  0613                     	;# 
  2564  0614                     	;# 
  2565  0617                     	;# 
  2566  0617                     	;# 
  2567  0618                     	;# 
  2568  0619                     	;# 
  2569  061A                     	;# 
  2570  061A                     	;# 
  2571  061B                     	;# 
  2572  061C                     	;# 
  2573  0691                     	;# 
  2574  0692                     	;# 
  2575  0693                     	;# 
  2576  0694                     	;# 
  2577  0695                     	;# 
  2578  0696                     	;# 
  2579  0697                     	;# 
  2580  0699                     	;# 
  2581  069A                     	;# 
  2582  0711                     	;# 
  2583  0712                     	;# 
  2584  0713                     	;# 
  2585  0714                     	;# 
  2586  0715                     	;# 
  2587  0718                     	;# 
  2588  0718                     	;# 
  2589  0719                     	;# 
  2590  071A                     	;# 
  2591  071A                     	;# 
  2592  071B                     	;# 
  2593  071C                     	;# 
  2594  071D                     	;# 
  2595  0791                     	;# 
  2596  0791                     	;# 
  2597  0792                     	;# 
  2598  0793                     	;# 
  2599  0793                     	;# 
  2600  0794                     	;# 
  2601  0795                     	;# 
  2602  0795                     	;# 
  2603  0796                     	;# 
  2604  0797                     	;# 
  2605  0797                     	;# 
  2606  0798                     	;# 
  2607  0799                     	;# 
  2608  079A                     	;# 
  2609  080C                     	;# 
  2610  080C                     	;# 
  2611  080D                     	;# 
  2612  080E                     	;# 
  2613  080E                     	;# 
  2614  080F                     	;# 
  2615  0810                     	;# 
  2616  0810                     	;# 
  2617  0811                     	;# 
  2618  0812                     	;# 
  2619  0812                     	;# 
  2620  0813                     	;# 
  2621  0814                     	;# 
  2622  0815                     	;# 
  2623  0816                     	;# 
  2624  0817                     	;# 
  2625  0818                     	;# 
  2626  0819                     	;# 
  2627  081A                     	;# 
  2628  081A                     	;# 
  2629  081B                     	;# 
  2630  081C                     	;# 
  2631  081C                     	;# 
  2632  081D                     	;# 
  2633  088C                     	;# 
  2634  088D                     	;# 
  2635  088E                     	;# 
  2636  088F                     	;# 
  2637  088F                     	;# 
  2638  0890                     	;# 
  2639  0891                     	;# 
  2640  0892                     	;# 
  2641  0893                     	;# 
  2642  0893                     	;# 
  2643  0894                     	;# 
  2644  0895                     	;# 
  2645  0896                     	;# 
  2646  0897                     	;# 
  2647  0897                     	;# 
  2648  0898                     	;# 
  2649  0899                     	;# 
  2650  0D8C                     	;# 
  2651  0D8C                     	;# 
  2652  0D8D                     	;# 
  2653  0D8E                     	;# 
  2654  0D8F                     	;# 
  2655  0D8F                     	;# 
  2656  0D90                     	;# 
  2657  0D91                     	;# 
  2658  0D92                     	;# 
  2659  0D92                     	;# 
  2660  0D93                     	;# 
  2661  0D94                     	;# 
  2662  0D95                     	;# 
  2663  0D95                     	;# 
  2664  0D96                     	;# 
  2665  0D97                     	;# 
  2666  0D98                     	;# 
  2667  0D99                     	;# 
  2668  0D9A                     	;# 
  2669  0D9B                     	;# 
  2670  0D9C                     	;# 
  2671  0D9D                     	;# 
  2672  0D9E                     	;# 
  2673  0D9E                     	;# 
  2674  0D9F                     	;# 
  2675  0DA0                     	;# 
  2676  0DA1                     	;# 
  2677  0DA1                     	;# 
  2678  0DA2                     	;# 
  2679  0DA3                     	;# 
  2680  0DA4                     	;# 
  2681  0DA4                     	;# 
  2682  0DA5                     	;# 
  2683  0DA6                     	;# 
  2684  0DA7                     	;# 
  2685  0DA7                     	;# 
  2686  0DA8                     	;# 
  2687  0DA9                     	;# 
  2688  0DAA                     	;# 
  2689  0DAB                     	;# 
  2690  0DAC                     	;# 
  2691  0DAD                     	;# 
  2692  0DAE                     	;# 
  2693  0DAF                     	;# 
  2694  0E0F                     	;# 
  2695  0E10                     	;# 
  2696  0E11                     	;# 
  2697  0E12                     	;# 
  2698  0E13                     	;# 
  2699  0E14                     	;# 
  2700  0E15                     	;# 
  2701  0E16                     	;# 
  2702  0E17                     	;# 
  2703  0E18                     	;# 
  2704  0E19                     	;# 
  2705  0E1A                     	;# 
  2706  0E1B                     	;# 
  2707  0E1C                     	;# 
  2708  0E1D                     	;# 
  2709  0E1E                     	;# 
  2710  0E1F                     	;# 
  2711  0E20                     	;# 
  2712  0E21                     	;# 
  2713  0E22                     	;# 
  2714  0E23                     	;# 
  2715  0E24                     	;# 
  2716  0E25                     	;# 
  2717  0E26                     	;# 
  2718  0E27                     	;# 
  2719  0E28                     	;# 
  2720  0E29                     	;# 
  2721  0E2A                     	;# 
  2722  0E2B                     	;# 
  2723  0E2C                     	;# 
  2724  0E2D                     	;# 
  2725  0E2E                     	;# 
  2726  0E90                     	;# 
  2727  0E91                     	;# 
  2728  0E92                     	;# 
  2729  0E94                     	;# 
  2730  0E95                     	;# 
  2731  0E9C                     	;# 
  2732  0E9D                     	;# 
  2733  0E9E                     	;# 
  2734  0E9F                     	;# 
  2735  0EA0                     	;# 
  2736  0EA1                     	;# 
  2737  0EA2                     	;# 
  2738  0EA3                     	;# 
  2739  0EA4                     	;# 
  2740  0EA5                     	;# 
  2741  0EA6                     	;# 
  2742  0EA7                     	;# 
  2743  0F0F                     	;# 
  2744  0F10                     	;# 
  2745  0F11                     	;# 
  2746  0F12                     	;# 
  2747  0F13                     	;# 
  2748  0F14                     	;# 
  2749  0F15                     	;# 
  2750  0F16                     	;# 
  2751  0F17                     	;# 
  2752  0F18                     	;# 
  2753  0F19                     	;# 
  2754  0F1A                     	;# 
  2755  0F1B                     	;# 
  2756  0F1C                     	;# 
  2757  0F1D                     	;# 
  2758  0F1E                     	;# 
  2759  0F1F                     	;# 
  2760  0F20                     	;# 
  2761  0F21                     	;# 
  2762  0F22                     	;# 
  2763  0F23                     	;# 
  2764  0F24                     	;# 
  2765  0F25                     	;# 
  2766  0F26                     	;# 
  2767  0F27                     	;# 
  2768  0F28                     	;# 
  2769  0F29                     	;# 
  2770  0F2A                     	;# 
  2771  0F2B                     	;# 
  2772  0F2C                     	;# 
  2773  0F2D                     	;# 
  2774  0F2E                     	;# 
  2775  0F2F                     	;# 
  2776  0F30                     	;# 
  2777  0F31                     	;# 
  2778  0F32                     	;# 
  2779  0F33                     	;# 
  2780  0F34                     	;# 
  2781  0F35                     	;# 
  2782  0F36                     	;# 
  2783  0F37                     	;# 
  2784  0FE4                     	;# 
  2785  0FE5                     	;# 
  2786  0FE6                     	;# 
  2787  0FE7                     	;# 
  2788  0FE8                     	;# 
  2789  0FE9                     	;# 
  2790  0FEA                     	;# 
  2791  0FEB                     	;# 
  2792  0FED                     	;# 
  2793  0FEE                     	;# 
  2794  0FEF                     	;# 
  2795  0000                     	;# 
  2796  0001                     	;# 
  2797  0002                     	;# 
  2798  0003                     	;# 
  2799  0004                     	;# 
  2800  0005                     	;# 
  2801  0006                     	;# 
  2802  0007                     	;# 
  2803  0008                     	;# 
  2804  0009                     	;# 
  2805  000A                     	;# 
  2806  000B                     	;# 
  2807  000C                     	;# 
  2808  000D                     	;# 
  2809  000E                     	;# 
  2810  0010                     	;# 
  2811  0011                     	;# 
  2812  0012                     	;# 
  2813  0013                     	;# 
  2814  0014                     	;# 
  2815  0015                     	;# 
  2816  0016                     	;# 
  2817  0016                     	;# 
  2818  0017                     	;# 
  2819  0018                     	;# 
  2820  0019                     	;# 
  2821  001A                     	;# 
  2822  001A                     	;# 
  2823  001B                     	;# 
  2824  001B                     	;# 
  2825  001C                     	;# 
  2826  001D                     	;# 
  2827  001E                     	;# 
  2828  001F                     	;# 
  2829  008C                     	;# 
  2830  008D                     	;# 
  2831  008E                     	;# 
  2832  0090                     	;# 
  2833  0091                     	;# 
  2834  0092                     	;# 
  2835  0093                     	;# 
  2836  0094                     	;# 
  2837  0095                     	;# 
  2838  0096                     	;# 
  2839  0098                     	;# 
  2840  0099                     	;# 
  2841  009A                     	;# 
  2842  009B                     	;# 
  2843  009B                     	;# 
  2844  009C                     	;# 
  2845  009D                     	;# 
  2846  009E                     	;# 
  2847  009F                     	;# 
  2848  010C                     	;# 
  2849  010D                     	;# 
  2850  010E                     	;# 
  2851  0111                     	;# 
  2852  0112                     	;# 
  2853  0113                     	;# 
  2854  0114                     	;# 
  2855  0115                     	;# 
  2856  0116                     	;# 
  2857  0117                     	;# 
  2858  0118                     	;# 
  2859  0119                     	;# 
  2860  011C                     	;# 
  2861  018C                     	;# 
  2862  018D                     	;# 
  2863  018E                     	;# 
  2864  0191                     	;# 
  2865  0191                     	;# 
  2866  0192                     	;# 
  2867  0193                     	;# 
  2868  0193                     	;# 
  2869  0194                     	;# 
  2870  0195                     	;# 
  2871  0196                     	;# 
  2872  0197                     	;# 
  2873  0199                     	;# 
  2874  0199                     	;# 
  2875  0199                     	;# 
  2876  019A                     	;# 
  2877  019A                     	;# 
  2878  019A                     	;# 
  2879  019B                     	;# 
  2880  019B                     	;# 
  2881  019B                     	;# 
  2882  019B                     	;# 
  2883  019B                     	;# 
  2884  019C                     	;# 
  2885  019C                     	;# 
  2886  019C                     	;# 
  2887  019D                     	;# 
  2888  019D                     	;# 
  2889  019D                     	;# 
  2890  019E                     	;# 
  2891  019E                     	;# 
  2892  019E                     	;# 
  2893  019F                     	;# 
  2894  019F                     	;# 
  2895  019F                     	;# 
  2896  019F                     	;# 
  2897  019F                     	;# 
  2898  020C                     	;# 
  2899  020D                     	;# 
  2900  020E                     	;# 
  2901  0211                     	;# 
  2902  0211                     	;# 
  2903  0212                     	;# 
  2904  0212                     	;# 
  2905  0213                     	;# 
  2906  0213                     	;# 
  2907  0214                     	;# 
  2908  0214                     	;# 
  2909  0215                     	;# 
  2910  0215                     	;# 
  2911  0215                     	;# 
  2912  0215                     	;# 
  2913  0216                     	;# 
  2914  0216                     	;# 
  2915  0217                     	;# 
  2916  0217                     	;# 
  2917  028C                     	;# 
  2918  028D                     	;# 
  2919  028E                     	;# 
  2920  0291                     	;# 
  2921  0291                     	;# 
  2922  0292                     	;# 
  2923  0293                     	;# 
  2924  0294                     	;# 
  2925  0298                     	;# 
  2926  0298                     	;# 
  2927  0299                     	;# 
  2928  029A                     	;# 
  2929  029B                     	;# 
  2930  029E                     	;# 
  2931  030C                     	;# 
  2932  030D                     	;# 
  2933  030E                     	;# 
  2934  038C                     	;# 
  2935  038D                     	;# 
  2936  038E                     	;# 
  2937  0391                     	;# 
  2938  0392                     	;# 
  2939  0393                     	;# 
  2940  0394                     	;# 
  2941  0395                     	;# 
  2942  0396                     	;# 
  2943  0397                     	;# 
  2944  0398                     	;# 
  2945  0399                     	;# 
  2946  040E                     	;# 
  2947  0413                     	;# 
  2948  0413                     	;# 
  2949  0414                     	;# 
  2950  0414                     	;# 
  2951  0415                     	;# 
  2952  0416                     	;# 
  2953  0417                     	;# 
  2954  0418                     	;# 
  2955  041A                     	;# 
  2956  041A                     	;# 
  2957  041B                     	;# 
  2958  041B                     	;# 
  2959  041C                     	;# 
  2960  041D                     	;# 
  2961  041E                     	;# 
  2962  041F                     	;# 
  2963  0493                     	;# 
  2964  0494                     	;# 
  2965  0495                     	;# 
  2966  0496                     	;# 
  2967  049A                     	;# 
  2968  049B                     	;# 
  2969  049C                     	;# 
  2970  049D                     	;# 
  2971  058C                     	;# 
  2972  058C                     	;# 
  2973  058D                     	;# 
  2974  058E                     	;# 
  2975  058E                     	;# 
  2976  058F                     	;# 
  2977  0590                     	;# 
  2978  0590                     	;# 
  2979  0591                     	;# 
  2980  0592                     	;# 
  2981  0592                     	;# 
  2982  0593                     	;# 
  2983  0594                     	;# 
  2984  0594                     	;# 
  2985  0595                     	;# 
  2986  0596                     	;# 
  2987  0596                     	;# 
  2988  0597                     	;# 
  2989  0598                     	;# 
  2990  0599                     	;# 
  2991  059A                     	;# 
  2992  059B                     	;# 
  2993  059B                     	;# 
  2994  059C                     	;# 
  2995  059D                     	;# 
  2996  060C                     	;# 
  2997  060C                     	;# 
  2998  060D                     	;# 
  2999  060E                     	;# 
  3000  060F                     	;# 
  3001  060F                     	;# 
  3002  0610                     	;# 
  3003  0611                     	;# 
  3004  0612                     	;# 
  3005  0613                     	;# 
  3006  0614                     	;# 
  3007  0617                     	;# 
  3008  0617                     	;# 
  3009  0618                     	;# 
  3010  0619                     	;# 
  3011  061A                     	;# 
  3012  061A                     	;# 
  3013  061B                     	;# 
  3014  061C                     	;# 
  3015  0691                     	;# 
  3016  0692                     	;# 
  3017  0693                     	;# 
  3018  0694                     	;# 
  3019  0695                     	;# 
  3020  0696                     	;# 
  3021  0697                     	;# 
  3022  0699                     	;# 
  3023  069A                     	;# 
  3024  0711                     	;# 
  3025  0712                     	;# 
  3026  0713                     	;# 
  3027  0714                     	;# 
  3028  0715                     	;# 
  3029  0718                     	;# 
  3030  0718                     	;# 
  3031  0719                     	;# 
  3032  071A                     	;# 
  3033  071A                     	;# 
  3034  071B                     	;# 
  3035  071C                     	;# 
  3036  071D                     	;# 
  3037  0791                     	;# 
  3038  0791                     	;# 
  3039  0792                     	;# 
  3040  0793                     	;# 
  3041  0793                     	;# 
  3042  0794                     	;# 
  3043  0795                     	;# 
  3044  0795                     	;# 
  3045  0796                     	;# 
  3046  0797                     	;# 
  3047  0797                     	;# 
  3048  0798                     	;# 
  3049  0799                     	;# 
  3050  079A                     	;# 
  3051  080C                     	;# 
  3052  080C                     	;# 
  3053  080D                     	;# 
  3054  080E                     	;# 
  3055  080E                     	;# 
  3056  080F                     	;# 
  3057  0810                     	;# 
  3058  0810                     	;# 
  3059  0811                     	;# 
  3060  0812                     	;# 
  3061  0812                     	;# 
  3062  0813                     	;# 
  3063  0814                     	;# 
  3064  0815                     	;# 
  3065  0816                     	;# 
  3066  0817                     	;# 
  3067  0818                     	;# 
  3068  0819                     	;# 
  3069  081A                     	;# 
  3070  081A                     	;# 
  3071  081B                     	;# 
  3072  081C                     	;# 
  3073  081C                     	;# 
  3074  081D                     	;# 
  3075  088C                     	;# 
  3076  088D                     	;# 
  3077  088E                     	;# 
  3078  088F                     	;# 
  3079  088F                     	;# 
  3080  0890                     	;# 
  3081  0891                     	;# 
  3082  0892                     	;# 
  3083  0893                     	;# 
  3084  0893                     	;# 
  3085  0894                     	;# 
  3086  0895                     	;# 
  3087  0896                     	;# 
  3088  0897                     	;# 
  3089  0897                     	;# 
  3090  0898                     	;# 
  3091  0899                     	;# 
  3092  0D8C                     	;# 
  3093  0D8C                     	;# 
  3094  0D8D                     	;# 
  3095  0D8E                     	;# 
  3096  0D8F                     	;# 
  3097  0D8F                     	;# 
  3098  0D90                     	;# 
  3099  0D91                     	;# 
  3100  0D92                     	;# 
  3101  0D92                     	;# 
  3102  0D93                     	;# 
  3103  0D94                     	;# 
  3104  0D95                     	;# 
  3105  0D95                     	;# 
  3106  0D96                     	;# 
  3107  0D97                     	;# 
  3108  0D98                     	;# 
  3109  0D99                     	;# 
  3110  0D9A                     	;# 
  3111  0D9B                     	;# 
  3112  0D9C                     	;# 
  3113  0D9D                     	;# 
  3114  0D9E                     	;# 
  3115  0D9E                     	;# 
  3116  0D9F                     	;# 
  3117  0DA0                     	;# 
  3118  0DA1                     	;# 
  3119  0DA1                     	;# 
  3120  0DA2                     	;# 
  3121  0DA3                     	;# 
  3122  0DA4                     	;# 
  3123  0DA4                     	;# 
  3124  0DA5                     	;# 
  3125  0DA6                     	;# 
  3126  0DA7                     	;# 
  3127  0DA7                     	;# 
  3128  0DA8                     	;# 
  3129  0DA9                     	;# 
  3130  0DAA                     	;# 
  3131  0DAB                     	;# 
  3132  0DAC                     	;# 
  3133  0DAD                     	;# 
  3134  0DAE                     	;# 
  3135  0DAF                     	;# 
  3136  0E0F                     	;# 
  3137  0E10                     	;# 
  3138  0E11                     	;# 
  3139  0E12                     	;# 
  3140  0E13                     	;# 
  3141  0E14                     	;# 
  3142  0E15                     	;# 
  3143  0E16                     	;# 
  3144  0E17                     	;# 
  3145  0E18                     	;# 
  3146  0E19                     	;# 
  3147  0E1A                     	;# 
  3148  0E1B                     	;# 
  3149  0E1C                     	;# 
  3150  0E1D                     	;# 
  3151  0E1E                     	;# 
  3152  0E1F                     	;# 
  3153  0E20                     	;# 
  3154  0E21                     	;# 
  3155  0E22                     	;# 
  3156  0E23                     	;# 
  3157  0E24                     	;# 
  3158  0E25                     	;# 
  3159  0E26                     	;# 
  3160  0E27                     	;# 
  3161  0E28                     	;# 
  3162  0E29                     	;# 
  3163  0E2A                     	;# 
  3164  0E2B                     	;# 
  3165  0E2C                     	;# 
  3166  0E2D                     	;# 
  3167  0E2E                     	;# 
  3168  0E90                     	;# 
  3169  0E91                     	;# 
  3170  0E92                     	;# 
  3171  0E94                     	;# 
  3172  0E95                     	;# 
  3173  0E9C                     	;# 
  3174  0E9D                     	;# 
  3175  0E9E                     	;# 
  3176  0E9F                     	;# 
  3177  0EA0                     	;# 
  3178  0EA1                     	;# 
  3179  0EA2                     	;# 
  3180  0EA3                     	;# 
  3181  0EA4                     	;# 
  3182  0EA5                     	;# 
  3183  0EA6                     	;# 
  3184  0EA7                     	;# 
  3185  0F0F                     	;# 
  3186  0F10                     	;# 
  3187  0F11                     	;# 
  3188  0F12                     	;# 
  3189  0F13                     	;# 
  3190  0F14                     	;# 
  3191  0F15                     	;# 
  3192  0F16                     	;# 
  3193  0F17                     	;# 
  3194  0F18                     	;# 
  3195  0F19                     	;# 
  3196  0F1A                     	;# 
  3197  0F1B                     	;# 
  3198  0F1C                     	;# 
  3199  0F1D                     	;# 
  3200  0F1E                     	;# 
  3201  0F1F                     	;# 
  3202  0F20                     	;# 
  3203  0F21                     	;# 
  3204  0F22                     	;# 
  3205  0F23                     	;# 
  3206  0F24                     	;# 
  3207  0F25                     	;# 
  3208  0F26                     	;# 
  3209  0F27                     	;# 
  3210  0F28                     	;# 
  3211  0F29                     	;# 
  3212  0F2A                     	;# 
  3213  0F2B                     	;# 
  3214  0F2C                     	;# 
  3215  0F2D                     	;# 
  3216  0F2E                     	;# 
  3217  0F2F                     	;# 
  3218  0F30                     	;# 
  3219  0F31                     	;# 
  3220  0F32                     	;# 
  3221  0F33                     	;# 
  3222  0F34                     	;# 
  3223  0F35                     	;# 
  3224  0F36                     	;# 
  3225  0F37                     	;# 
  3226  0FE4                     	;# 
  3227  0FE5                     	;# 
  3228  0FE6                     	;# 
  3229  0FE7                     	;# 
  3230  0FE8                     	;# 
  3231  0FE9                     	;# 
  3232  0FEA                     	;# 
  3233  0FEB                     	;# 
  3234  0FED                     	;# 
  3235  0FEE                     	;# 
  3236  0FEF                     	;# 
  3237                           
  3238                           	psect	idataCOMMON
  3239  0002                     __pidataCOMMON:	
  3240                           
  3241                           ;initializer for _messages
  3242  0002  3420               	retlw	low (_message_start| (0+768))
  3243  0003  34A0               	retlw	low (_message_end| (0+768))
  3244                           
  3245                           	psect	idataBANK5
  3246  1C00                     __pidataBANK5:	
  3247                           
  3248                           ;initializer for _setNavFlightMode
  3249  1C00  34B5               	retlw	181
  3250  1C01  3462               	retlw	98
  3251  1C02  3406               	retlw	6
  3252  1C03  3424               	retlw	36
  3253  1C04  3424               	retlw	36
  3254  1C05  3400               	retlw	0
  3255  1C06  34FF               	retlw	255
  3256  1C07  34FF               	retlw	255
  3257  1C08  3406               	retlw	6
  3258  1C09  3403               	retlw	3
  3259  1C0A  3400               	retlw	0
  3260  1C0B  3400               	retlw	0
  3261  1C0C  3400               	retlw	0
  3262  1C0D  3400               	retlw	0
  3263  1C0E  3410               	retlw	16
  3264  1C0F  3427               	retlw	39
  3265  1C10  3400               	retlw	0
  3266  1C11  3400               	retlw	0
  3267  1C12  3405               	retlw	5
  3268  1C13  3400               	retlw	0
  3269  1C14  34FA               	retlw	250
  3270  1C15  3400               	retlw	0
  3271  1C16  34FA               	retlw	250
  3272  1C17  3400               	retlw	0
  3273  1C18  3464               	retlw	100
  3274  1C19  3400               	retlw	0
  3275  1C1A  342C               	retlw	44
  3276  1C1B  3401               	retlw	1
  3277  1C1C  3400               	retlw	0
  3278  1C1D  3400               	retlw	0
  3279  1C1E  3400               	retlw	0
  3280  1C1F  3400               	retlw	0
  3281  1C20  3400               	retlw	0
  3282  1C21  3400               	retlw	0
  3283  1C22  3400               	retlw	0
  3284  1C23  3400               	retlw	0
  3285  1C24  3400               	retlw	0
  3286  1C25  3400               	retlw	0
  3287  1C26  3400               	retlw	0
  3288  1C27  3400               	retlw	0
  3289  1C28  3400               	retlw	0
  3290  1C29  3400               	retlw	0
  3291  1C2A  3416               	retlw	22
  3292  1C2B  34DC               	retlw	220
  3293                           
  3294                           	psect	nvBANK2
  3295  016D                     __pnvBANK2:	
  3296  016D                     _TMR0_InterruptHandler:	
  3297  016D                     	ds	2
  3298  016F                     _timer0ReloadVal:	
  3299  016F                     	ds	1
  3300  0015                     _TMR0	set	21
  3301  0011                     _PIR2bits	set	17
  3302  000B                     _INTCONbits	set	11
  3303  0010                     _PIR1bits	set	16
  3304  0095                     _OPTION_REG	set	149
  3305  0090                     _PIE1bits	set	144
  3306  0091                     _PIE2bits	set	145
  3307  0095                     _OPTION_REGbits	set	149
  3308  008E                     _TRISC	set	142
  3309  008D                     _TRISB	set	141
  3310  008C                     _TRISA	set	140
  3311  0098                     _OSCTUNE	set	152
  3312  0099                     _OSCCON	set	153
  3313  010C                     _LATAbits	set	268
  3314  010E                     _LATCbits	set	270
  3315  010E                     _LATC	set	270
  3316  010D                     _LATB	set	269
  3317  010C                     _LATA	set	268
  3318  0116                     _BORCON	set	278
  3319  019A                     _TX1REG	set	410
  3320  0199                     _RC1REG	set	409
  3321  019D                     _RC1STAbits	set	413
  3322  019C                     _SPBRGH	set	412
  3323  019B                     _SPBRGL	set	411
  3324  019E                     _TX1STA	set	414
  3325  019D                     _RC1STA	set	413
  3326  019F                     _BAUD1CON	set	415
  3327  018C                     _ANSELA	set	396
  3328  018D                     _ANSELB	set	397
  3329  018E                     _ANSELC	set	398
  3330  0211                     _SSP1BUF	set	529
  3331  0216                     _SSP1CON2bits	set	534
  3332  0215                     _SSP1CON1bits	set	533
  3333  0212                     _SSP1ADD	set	530
  3334  0217                     _SSP1CON3	set	535
  3335  0215                     _SSP1CON1	set	533
  3336  0214                     _SSP1STAT	set	532
  3337  020E                     _WPUC	set	526
  3338  020C                     _WPUA	set	524
  3339  020D                     _WPUB	set	525
  3340  028E                     _ODCONC	set	654
  3341  028D                     _ODCONB	set	653
  3342  028C                     _ODCONA	set	652
  3343  030E                     _SLRCONC	set	782
  3344  030D                     _SLRCONB	set	781
  3345  030C                     _SLRCONA	set	780
  3346  0E20                     _SSPCLKPPS	set	3616
  3347  0E21                     _SSPDATPPS	set	3617
  3348  0E24                     _RXPPS	set	3620
  3349  0E9C                     _RB4PPS	set	3740
  3350  0E9F                     _RB7PPS	set	3743
  3351  0E9E                     _RB6PPS	set	3742
  3352                           
  3353                           	psect	stringtext1
  3354  1800                     __pstringtext1:	
  3355  1800                     STR_6:	
  3356  1800  3424               	retlw	36	;'$'
  3357  1801  3450               	retlw	80	;'P'
  3358  1802  3455               	retlw	85	;'U'
  3359  1803  3442               	retlw	66	;'B'
  3360  1804  3458               	retlw	88	;'X'
  3361  1805  342C               	retlw	44	;','
  3362  1806  3434               	retlw	52	;'4'
  3363  1807  3430               	retlw	48	;'0'
  3364  1808  342C               	retlw	44	;','
  3365  1809  3452               	retlw	82	;'R'
  3366  180A  344D               	retlw	77	;'M'
  3367  180B  3443               	retlw	67	;'C'
  3368  180C  342C               	retlw	44	;','
  3369  180D  3430               	retlw	48	;'0'
  3370  180E  342C               	retlw	44	;','
  3371  180F  3430               	retlw	48	;'0'
  3372  1810  342C               	retlw	44	;','
  3373  1811  3430               	retlw	48	;'0'
  3374  1812  342C               	retlw	44	;','
  3375  1813  3430               	retlw	48	;'0'
  3376  1814  342A               	retlw	42	;'*'
  3377  1815  3434               	retlw	52	;'4'
  3378  1816  3437               	retlw	55	;'7'
  3379  1817  340D               	retlw	13
  3380  1818  340A               	retlw	10
  3381  1819  3400               	retlw	0
  3382                           
  3383                           	psect	stringtext2
  3384  181A                     __pstringtext2:	
  3385  181A                     STR_4:	
  3386  181A  3424               	retlw	36	;'$'
  3387  181B  3450               	retlw	80	;'P'
  3388  181C  3455               	retlw	85	;'U'
  3389  181D  3442               	retlw	66	;'B'
  3390  181E  3458               	retlw	88	;'X'
  3391  181F  342C               	retlw	44	;','
  3392  1820  3434               	retlw	52	;'4'
  3393  1821  3430               	retlw	48	;'0'
  3394  1822  342C               	retlw	44	;','
  3395  1823  3447               	retlw	71	;'G'
  3396  1824  3453               	retlw	83	;'S'
  3397  1825  3456               	retlw	86	;'V'
  3398  1826  342C               	retlw	44	;','
  3399  1827  3430               	retlw	48	;'0'
  3400  1828  342C               	retlw	44	;','
  3401  1829  3430               	retlw	48	;'0'
  3402  182A  342C               	retlw	44	;','
  3403  182B  3430               	retlw	48	;'0'
  3404  182C  342C               	retlw	44	;','
  3405  182D  3430               	retlw	48	;'0'
  3406  182E  342A               	retlw	42	;'*'
  3407  182F  3435               	retlw	53	;'5'
  3408  1830  3439               	retlw	57	;'9'
  3409  1831  340D               	retlw	13
  3410  1832  340A               	retlw	10
  3411  1833  3400               	retlw	0
  3412                           
  3413                           	psect	stringtext3
  3414  1834                     __pstringtext3:	
  3415  1834                     STR_2:	
  3416  1834  3424               	retlw	36	;'$'
  3417  1835  3450               	retlw	80	;'P'
  3418  1836  3455               	retlw	85	;'U'
  3419  1837  3442               	retlw	66	;'B'
  3420  1838  3458               	retlw	88	;'X'
  3421  1839  342C               	retlw	44	;','
  3422  183A  3434               	retlw	52	;'4'
  3423  183B  3430               	retlw	48	;'0'
  3424  183C  342C               	retlw	44	;','
  3425  183D  3447               	retlw	71	;'G'
  3426  183E  3447               	retlw	71	;'G'
  3427  183F  3441               	retlw	65	;'A'
  3428  1840  342C               	retlw	44	;','
  3429  1841  3430               	retlw	48	;'0'
  3430  1842  342C               	retlw	44	;','
  3431  1843  3430               	retlw	48	;'0'
  3432  1844  342C               	retlw	44	;','
  3433  1845  3430               	retlw	48	;'0'
  3434  1846  342C               	retlw	44	;','
  3435  1847  3430               	retlw	48	;'0'
  3436  1848  342A               	retlw	42	;'*'
  3437  1849  3435               	retlw	53	;'5'
  3438  184A  3441               	retlw	65	;'A'
  3439  184B  340D               	retlw	13
  3440  184C  340A               	retlw	10
  3441  184D  3400               	retlw	0
  3442                           
  3443                           	psect	stringtext4
  3444  184E                     __pstringtext4:	
  3445  184E                     STR_1:	
  3446  184E  3424               	retlw	36	;'$'
  3447  184F  3450               	retlw	80	;'P'
  3448  1850  3455               	retlw	85	;'U'
  3449  1851  3442               	retlw	66	;'B'
  3450  1852  3458               	retlw	88	;'X'
  3451  1853  342C               	retlw	44	;','
  3452  1854  3434               	retlw	52	;'4'
  3453  1855  3430               	retlw	48	;'0'
  3454  1856  342C               	retlw	44	;','
  3455  1857  3447               	retlw	71	;'G'
  3456  1858  344C               	retlw	76	;'L'
  3457  1859  344C               	retlw	76	;'L'
  3458  185A  342C               	retlw	44	;','
  3459  185B  3430               	retlw	48	;'0'
  3460  185C  342C               	retlw	44	;','
  3461  185D  3430               	retlw	48	;'0'
  3462  185E  342C               	retlw	44	;','
  3463  185F  3430               	retlw	48	;'0'
  3464  1860  342C               	retlw	44	;','
  3465  1861  3430               	retlw	48	;'0'
  3466  1862  342A               	retlw	42	;'*'
  3467  1863  3435               	retlw	53	;'5'
  3468  1864  3443               	retlw	67	;'C'
  3469  1865  340D               	retlw	13
  3470  1866  340A               	retlw	10
  3471  1867  3400               	retlw	0
  3472                           
  3473                           	psect	stringtext5
  3474  1868                     __pstringtext5:	
  3475  1868                     STR_5:	
  3476  1868  3424               	retlw	36	;'$'
  3477  1869  3450               	retlw	80	;'P'
  3478  186A  3455               	retlw	85	;'U'
  3479  186B  3442               	retlw	66	;'B'
  3480  186C  3458               	retlw	88	;'X'
  3481  186D  342C               	retlw	44	;','
  3482  186E  3434               	retlw	52	;'4'
  3483  186F  3430               	retlw	48	;'0'
  3484  1870  342C               	retlw	44	;','
  3485  1871  3447               	retlw	71	;'G'
  3486  1872  3453               	retlw	83	;'S'
  3487  1873  3441               	retlw	65	;'A'
  3488  1874  342C               	retlw	44	;','
  3489  1875  3430               	retlw	48	;'0'
  3490  1876  342C               	retlw	44	;','
  3491  1877  3430               	retlw	48	;'0'
  3492  1878  342C               	retlw	44	;','
  3493  1879  3430               	retlw	48	;'0'
  3494  187A  342C               	retlw	44	;','
  3495  187B  3430               	retlw	48	;'0'
  3496  187C  342A               	retlw	42	;'*'
  3497  187D  3434               	retlw	52	;'4'
  3498  187E  3445               	retlw	69	;'E'
  3499  187F  340D               	retlw	13
  3500  1880  340A               	retlw	10
  3501  1881  3400               	retlw	0
  3502                           
  3503                           	psect	stringtext6
  3504  1882                     __pstringtext6:	
  3505  1882                     STR_3:	
  3506  1882  3424               	retlw	36	;'$'
  3507  1883  3450               	retlw	80	;'P'
  3508  1884  3455               	retlw	85	;'U'
  3509  1885  3442               	retlw	66	;'B'
  3510  1886  3458               	retlw	88	;'X'
  3511  1887  342C               	retlw	44	;','
  3512  1888  3434               	retlw	52	;'4'
  3513  1889  3430               	retlw	48	;'0'
  3514  188A  342C               	retlw	44	;','
  3515  188B  3456               	retlw	86	;'V'
  3516  188C  3454               	retlw	84	;'T'
  3517  188D  3447               	retlw	71	;'G'
  3518  188E  342C               	retlw	44	;','
  3519  188F  3430               	retlw	48	;'0'
  3520  1890  342C               	retlw	44	;','
  3521  1891  3430               	retlw	48	;'0'
  3522  1892  342C               	retlw	44	;','
  3523  1893  3430               	retlw	48	;'0'
  3524  1894  342C               	retlw	44	;','
  3525  1895  3430               	retlw	48	;'0'
  3526  1896  342A               	retlw	42	;'*'
  3527  1897  3435               	retlw	53	;'5'
  3528  1898  3445               	retlw	69	;'E'
  3529  1899  340D               	retlw	13
  3530  189A  340A               	retlw	10
  3531  189B  3400               	retlw	0
  3532                           
  3533                           	psect	stringtext7
  3534  189C                     __pstringtext7:	
  3535  189C                     STR_7:	
  3536  189C  3424               	retlw	36	;'$'
  3537  189D  3450               	retlw	80	;'P'
  3538  189E  3455               	retlw	85	;'U'
  3539  189F  3442               	retlw	66	;'B'
  3540  18A0  3458               	retlw	88	;'X'
  3541  18A1  342C               	retlw	44	;','
  3542  18A2  3430               	retlw	48	;'0'
  3543  18A3  3430               	retlw	48	;'0'
  3544  18A4  342A               	retlw	42	;'*'
  3545  18A5  3433               	retlw	51	;'3'
  3546  18A6  3433               	retlw	51	;'3'
  3547  18A7  340D               	retlw	13
  3548  18A8  340A               	retlw	10
  3549  18A9  3400               	retlw	0
  3550                           
  3551                           	psect	stringtext8
  3552  18AA                     __pstringtext8:	
  3553  18AA                     STR_10:	
  3554  18AA  3454               	retlw	84	;'T'
  3555  18AB  3445               	retlw	69	;'E'
  3556  18AC  3453               	retlw	83	;'S'
  3557  18AD  3454               	retlw	84	;'T'
  3558  18AE  3400               	retlw	0
  3559                           
  3560                           	psect	stringtext9
  3561  18AF                     __pstringtext9:	
  3562  18AF                     STR_8:	
  3563  18AF  3450               	retlw	80	;'P'
  3564  18B0  3455               	retlw	85	;'U'
  3565  18B1  3442               	retlw	66	;'B'
  3566  18B2  3458               	retlw	88	;'X'
  3567  18B3  3400               	retlw	0
  3568                           
  3569                           	psect	stringtext10
  3570  18B4                     __pstringtext10:	
  3571  18B4                     STR_11:	
  3572  18B4  342C               	retlw	44	;','
  3573  18B5  3400               	retlw	0
  3574                           
  3575                           	psect	stringtext11
  3576  0000                     __pstringtext11:	
  3577  18AF                     
  3578                           ; #config settings
  3579  0000                     
  3580                           	psect	cinit
  3581  0025                     start_initialization:	
  3582  0025                     __initialization:	
  3583                           
  3584                           ; Initialize objects allocated to COMMON
  3585  0025  3180  2002  3180   	fcall	__pidataCOMMON	;fetch initializer
  3586  0028  00FB               	movwf	__pdataCOMMON& (0+127)
  3587  0029  3180  2003  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  3588  002C  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
  3589                           
  3590                           ; Initialize objects allocated to BANK5
  3591  002D  3000               	movlw	low __pidataBANK5
  3592  002E  0084               	movwf	4
  3593  002F  309C               	movlw	(high __pidataBANK5)| (0+128)
  3594  0030  0085               	movwf	5
  3595  0031  30A0               	movlw	low __pdataBANK5
  3596  0032  0086               	movwf	6
  3597  0033  3002               	movlw	high __pdataBANK5
  3598  0034  0087               	movwf	7
  3599  0035  302C               	movlw	44
  3600  0036  3199  2159  3180   	fcall	init_ram
  3601                           
  3602                           ; Clear objects allocated to COMMON
  3603  0039  01F9               	clrf	__pbssCOMMON& (0+127)
  3604  003A  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  3605                           
  3606                           ; Clear objects allocated to BANK2
  3607  003B  3057               	movlw	low __pbssBANK2
  3608  003C  0084               	movwf	4
  3609  003D  3001               	movlw	high __pbssBANK2
  3610  003E  0085               	movwf	5
  3611  003F  3016               	movlw	22
  3612  0040  3199  2153  3180   	fcall	clear_ram0
  3613                           
  3614                           ; Clear objects allocated to BANK3
  3615  0043  30D3               	movlw	low __pbssBANK3
  3616  0044  0084               	movwf	4
  3617  0045  3001               	movlw	high __pbssBANK3
  3618  0046  0085               	movwf	5
  3619  0047  3012               	movlw	18
  3620  0048  3199  2153  3180   	fcall	clear_ram0
  3621                           
  3622                           ; Clear objects allocated to BANK4
  3623  004B  3020               	movlw	low __pbssBANK4
  3624  004C  0084               	movwf	4
  3625  004D  3002               	movlw	high __pbssBANK4
  3626  004E  0085               	movwf	5
  3627  004F  3037               	movlw	55
  3628  0050  3199  2153  3180   	fcall	clear_ram0
  3629                           
  3630                           ; Clear objects allocated to BANK5
  3631  0053  30CC               	movlw	low __pbssBANK5
  3632  0054  0084               	movwf	4
  3633  0055  3002               	movlw	high __pbssBANK5
  3634  0056  0085               	movwf	5
  3635  0057  301A               	movlw	26
  3636  0058  3199  2153  3180   	fcall	clear_ram0
  3637                           
  3638                           ; Clear objects allocated to BANK6
  3639  005B  3020               	movlw	low __pbssBANK6
  3640  005C  0084               	movwf	4
  3641  005D  3003               	movlw	high __pbssBANK6
  3642  005E  0085               	movwf	5
  3643  005F  3046               	movlw	70
  3644  0060  3199  2153  3180   	fcall	clear_ram0
  3645                           
  3646                           ; Clear objects allocated to BANK7
  3647  0063  30A0               	movlw	low __pbssBANK7
  3648  0064  0084               	movwf	4
  3649  0065  3003               	movlw	high __pbssBANK7
  3650  0066  0085               	movwf	5
  3651  0067  3049               	movlw	73
  3652  0068  3199  2153         	fcall	clear_ram0
  3653  006A                     end_of_initialization:	
  3654                           ;End of C runtime variable initialization code
  3655                           
  3656  006A                     __end_of__initialization:	
  3657  006A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3658  006B  0020               	movlb	0
  3659  006C  3196  2E42         	ljmp	_main	;jump to C main() function
  3660                           
  3661                           	psect	bssCOMMON
  3662  0079                     __pbssCOMMON:	
  3663  0079                     I2C_ISR@i2c_address:	
  3664  0079                     	ds	2
  3665                           
  3666                           	psect	dataCOMMON
  3667  007B                     __pdataCOMMON:	
  3668  007B                     _messages:	
  3669  007B                     	ds	2
  3670                           
  3671                           	psect	bssBANK2
  3672  0157                     __pbssBANK2:	
  3673  0157                     _i2c_object:	
  3674  0157                     	ds	5
  3675  015C                     _ticks:	
  3676  015C                     	ds	4
  3677  0160                     I2C_ISR@pi2c_buf_ptr:	
  3678  0160                     	ds	2
  3679  0162                     _gps_configured:	
  3680  0162                     	ds	1
  3681  0163                     I2C_ISR@i2c_10bit_address_restart:	
  3682  0163                     	ds	1
  3683  0164                     I2C_ISR@i2c_bytes_left:	
  3684  0164                     	ds	1
  3685  0165                     _p_i2c_current:	
  3686  0165                     	ds	1
  3687  0166                     _p_i2c_trb_current:	
  3688  0166                     	ds	1
  3689  0167                     _i2c_trb_count:	
  3690  0167                     	ds	1
  3691  0168                     _i2c_state:	
  3692  0168                     	ds	1
  3693  0169                     _i2c_tr_queue:	
  3694  0169                     	ds	4
  3695                           
  3696                           	psect	bssBANK3
  3697  01D3                     __pbssBANK3:	
  3698  01D3                     _id:	
  3699  01D3                     	ds	2
  3700  01D5                     _checksum:	
  3701  01D5                     	ds	6
  3702  01DB                     I2C_MasterRead@trBlock:	
  3703  01DB                     	ds	5
  3704  01E0                     I2C_MasterWrite@trBlock:	
  3705  01E0                     	ds	5
  3706                           
  3707                           	psect	bssBANK4
  3708  0220                     __pbssBANK4:	
  3709  0220                     main@F10164:	
  3710  0220                     	ds	16
  3711  0230                     GetNavData@F10106:	
  3712  0230                     	ds	12
  3713  023C                     bme280_get_sensor_data@F273:	
  3714  023C                     	ds	12
  3715  0248                     bme280_get_sensor_data@F271:	
  3716  0248                     	ds	8
  3717  0250                     GetNavData@F10100:	
  3718  0250                     	ds	7
  3719                           
  3720                           	psect	bssBANK5
  3721  02CC                     __pbssBANK5:	
  3722  02CC                     get_calib_data@F375:	
  3723  02CC                     	ds	26
  3724                           
  3725                           	psect	dataBANK5
  3726  02A0                     __pdataBANK5:	
  3727  02A0                     _setNavFlightMode:	
  3728  02A0                     	ds	44
  3729                           
  3730                           	psect	bssBANK6
  3731  0320                     __pbssBANK6:	
  3732  0320                     _message_start:	
  3733  0320                     	ds	70
  3734                           
  3735                           	psect	bssBANK7
  3736  03A0                     __pbssBANK7:	
  3737  03A0                     _message_end:	
  3738  03A0                     	ds	73
  3739                           
  3740                           	psect	inittext
  3741  1959                     init_ram:	
  3742  1959  00FE               	movwf	126
  3743  195A                     initloop:	
  3744  195A  0012               	moviw fsr0++
  3745  195B  001E               	movwi fsr1++
  3746  195C  0BFE               	decfsz	126,f
  3747  195D  295A               	goto	initloop
  3748  195E  3400               	retlw	0
  3749                           
  3750                           	psect	clrtext
  3751  1953                     clear_ram0:	
  3752                           ;	Called with FSR0 containing the base address, and
  3753                           ;	WREG with the size to clear
  3754                           
  3755  1953  0064               	clrwdt	;clear the watchdog before getting into this loop
  3756  1954                     clrloop0:	
  3757  1954  0180               	clrf	0	;clear RAM location pointed to by FSR
  3758  1955  3101               	addfsr 0,1
  3759  1956  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3760  1957  2954               	goto	clrloop0	;have we reached the end yet?
  3761  1958  3400               	retlw	0	;all done for this memory range, return
  3762                           
  3763                           	psect	cstackBANK3
  3764  01A0                     __pcstackBANK3:	
  3765  01A0                     main@env_sensor:	
  3766                           
  3767                           ; 51 bytes @ 0x0
  3768  01A0                     	ds	51
  3769                           
  3770                           	psect	cstackBANK2
  3771  0120                     __pcstackBANK2:	
  3772  0120                     bme280_get_sensor_data@reg_data:	
  3773                           
  3774                           ; 8 bytes @ 0x0
  3775  0120                     	ds	8
  3776  0128                     bme280_get_sensor_data@sensor_comp:	
  3777                           
  3778                           ; 1 bytes @ 0x8
  3779  0128                     	ds	1
  3780  0129                     bme280_get_sensor_data@rslt:	
  3781                           
  3782                           ; 1 bytes @ 0x9
  3783  0129                     	ds	1
  3784  012A                     bme280_get_sensor_data@uncomp_data:	
  3785                           
  3786                           ; 12 bytes @ 0xA
  3787  012A                     	ds	12
  3788  0136                     ??_main:	
  3789                           
  3790                           ; 1 bytes @ 0x16
  3791  0136                     	ds	2
  3792  0138                     main@convertedSensorData:	
  3793                           
  3794                           ; 16 bytes @ 0x18
  3795  0138                     	ds	17
  3796  0149                     main@i:	
  3797                           
  3798                           ; 2 bytes @ 0x29
  3799  0149                     	ds	2
  3800  014B                     main@sensor_data:	
  3801                           
  3802                           ; 12 bytes @ 0x2B
  3803  014B                     	ds	12
  3804                           
  3805                           	psect	cstackBANK1
  3806  00A0                     __pcstackBANK1:	
  3807  00A0                     	ds	8
  3808  00A8                     _compensate_pressure$2550:	
  3809                           
  3810                           ; 8 bytes @ 0x8
  3811  00A8                     	ds	8
  3812  00B0                     _compensate_pressure$2551:	
  3813                           
  3814                           ; 8 bytes @ 0x10
  3815  00B0                     	ds	8
  3816  00B8                     compensate_pressure@uncomp_data:	
  3817                           
  3818                           ; 1 bytes @ 0x18
  3819  00B8                     	ds	1
  3820  00B9                     compensate_pressure@pressure_max:	
  3821                           
  3822                           ; 4 bytes @ 0x19
  3823  00B9                     	ds	8
  3824  00C1                     _compensate_pressure$2549:	
  3825                           
  3826                           ; 8 bytes @ 0x21
  3827  00C1                     	ds	8
  3828  00C9                     compensate_pressure@pressure:	
  3829                           
  3830                           ; 4 bytes @ 0x29
  3831  00C9                     	ds	4
  3832  00CD                     compensate_pressure@var2:	
  3833                           
  3834                           ; 8 bytes @ 0x2D
  3835  00CD                     	ds	8
  3836  00D5                     compensate_pressure@var4:	
  3837                           
  3838                           ; 8 bytes @ 0x35
  3839  00D5                     	ds	8
  3840  00DD                     compensate_pressure@var1:	
  3841                           
  3842                           ; 8 bytes @ 0x3D
  3843  00DD                     	ds	8
  3844  00E5                     ?_bme280_compensate_data:	
  3845  00E5                     bme280_compensate_data@uncomp_data:	
  3846                           ; 1 bytes @ 0x45
  3847                           
  3848                           
  3849                           ; 1 bytes @ 0x45
  3850  00E5                     	ds	1
  3851  00E6                     bme280_compensate_data@comp_data:	
  3852                           
  3853                           ; 1 bytes @ 0x46
  3854  00E6                     	ds	1
  3855  00E7                     bme280_compensate_data@calib_data:	
  3856                           
  3857                           ; 1 bytes @ 0x47
  3858  00E7                     	ds	1
  3859  00E8                     ??_bme280_compensate_data:	
  3860                           
  3861                           ; 1 bytes @ 0x48
  3862  00E8                     	ds	1
  3863  00E9                     bme280_compensate_data@rslt:	
  3864                           
  3865                           ; 1 bytes @ 0x49
  3866  00E9                     	ds	1
  3867  00EA                     bme280_compensate_data@sensor_comp:	
  3868                           
  3869                           ; 1 bytes @ 0x4A
  3870  00EA                     	ds	1
  3871  00EB                     ?_bme280_get_sensor_data:	
  3872  00EB                     bme280_get_sensor_data@comp_data:	
  3873                           ; 1 bytes @ 0x4B
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x4B
  3877  00EB                     	ds	1
  3878  00EC                     bme280_get_sensor_data@dev:	
  3879                           
  3880                           ; 1 bytes @ 0x4C
  3881  00EC                     	ds	1
  3882  00ED                     ??_bme280_get_sensor_data:	
  3883                           
  3884                           ; 1 bytes @ 0x4D
  3885  00ED                     	ds	3
  3886                           
  3887                           	psect	cstackCOMMON
  3888  0070                     __pcstackCOMMON:	
  3889  0070                     ?_null_ptr_check:	
  3890  0070                     ?_bme280_soft_reset:	
  3891                           ; 1 bytes @ 0x0
  3892                           
  3893  0070                     ?_get_calib_data:	
  3894                           ; 1 bytes @ 0x0
  3895                           
  3896  0070                     ?_PIN_MANAGER_Initialize:	
  3897                           ; 1 bytes @ 0x0
  3898                           
  3899  0070                     ?_OSCILLATOR_Initialize:	
  3900                           ; 1 bytes @ 0x0
  3901                           
  3902  0070                     ?_I2C_Initialize:	
  3903                           ; 1 bytes @ 0x0
  3904                           
  3905  0070                     ?_TMR0_Initialize:	
  3906                           ; 1 bytes @ 0x0
  3907                           
  3908  0070                     ?_EUSART_Initialize:	
  3909                           ; 1 bytes @ 0x0
  3910                           
  3911  0070                     ?_TMR0_ISR:	
  3912                           ; 1 bytes @ 0x0
  3913                           
  3914  0070                     ??_TMR0_ISR:	
  3915                           ; 1 bytes @ 0x0
  3916                           
  3917  0070                     ?_I2C_BusCollisionISR:	
  3918                           ; 1 bytes @ 0x0
  3919                           
  3920  0070                     ??_I2C_BusCollisionISR:	
  3921                           ; 1 bytes @ 0x0
  3922                           
  3923  0070                     ?_I2C_ISR:	
  3924                           ; 1 bytes @ 0x0
  3925                           
  3926  0070                     ?_TMR0_DefaultInterruptHandler:	
  3927                           ; 1 bytes @ 0x0
  3928                           
  3929  0070                     ??_TMR0_DefaultInterruptHandler:	
  3930                           ; 1 bytes @ 0x0
  3931                           
  3932  0070                     ?_I2C_Stop:	
  3933                           ; 1 bytes @ 0x0
  3934                           
  3935  0070                     ??_I2C_Stop:	
  3936                           ; 1 bytes @ 0x0
  3937                           
  3938  0070                     ?_I2C_FunctionComplete:	
  3939                           ; 1 bytes @ 0x0
  3940                           
  3941  0070                     ??_I2C_FunctionComplete:	
  3942                           ; 1 bytes @ 0x0
  3943                           
  3944  0070                     ?_bme280_init:	
  3945                           ; 1 bytes @ 0x0
  3946                           
  3947  0070                     ?_SYSTEM_Initialize:	
  3948                           ; 1 bytes @ 0x0
  3949                           
  3950  0070                     ?_EUSART_is_rx_ready:	
  3951                           ; 1 bytes @ 0x0
  3952                           
  3953  0070                     ?_EUSART_Read:	
  3954                           ; 1 bytes @ 0x0
  3955                           
  3956  0070                     ?_EUSART_Write:	
  3957                           ; 1 bytes @ 0x0
  3958                           
  3959  0070                     ?_INTERRUPT_InterruptManager:	
  3960                           ; 1 bytes @ 0x0
  3961                           
  3962  0070                     ?_I2C_WaitForLastPacketToComplete:	
  3963                           ; 1 bytes @ 0x0
  3964                           
  3965  0070                     ?_TimerISR:	
  3966                           ; 1 bytes @ 0x0
  3967                           
  3968  0070                     ??_TimerISR:	
  3969                           ; 1 bytes @ 0x0
  3970                           
  3971  0070                     ?_FlashError:	
  3972                           ; 1 bytes @ 0x0
  3973                           
  3974  0070                     ?_TransmitBit:	
  3975                           ; 1 bytes @ 0x0
  3976                           
  3977  0070                     ?_TransmitByte:	
  3978                           ; 1 bytes @ 0x0
  3979                           
  3980  0070                     ?_TransmitString:	
  3981                           ; 1 bytes @ 0x0
  3982                           
  3983  0070                     ?_GPS_SendUBX:	
  3984                           ; 1 bytes @ 0x0
  3985                           
  3986  0070                     ?_GPS_HasAcknowledged:	
  3987                           ; 1 bytes @ 0x0
  3988                           
  3989  0070                     ?_SetupGPS:	
  3990                           ; 1 bytes @ 0x0
  3991                           
  3992  0070                     ?_GetNavData:	
  3993                           ; 1 bytes @ 0x0
  3994                           
  3995  0070                     ?_main:	
  3996                           ; 1 bytes @ 0x0
  3997                           
  3998                           
  3999                           ; 1 bytes @ 0x0
  4000  0070                     	ds	2
  4001  0072                     I2C_Stop@completion_code:	
  4002                           
  4003                           ; 1 bytes @ 0x2
  4004  0072                     	ds	1
  4005  0073                     ??_I2C_ISR:	
  4006                           
  4007                           ; 1 bytes @ 0x3
  4008  0073                     	ds	2
  4009  0075                     ??_null_ptr_check:	
  4010  0075                     ?_interleave_reg_addr:	
  4011                           ; 1 bytes @ 0x5
  4012                           
  4013  0075                     ?_bme280_parse_sensor_data:	
  4014                           ; 1 bytes @ 0x5
  4015                           
  4016  0075                     ?_parse_temp_press_calib_data:	
  4017                           ; 1 bytes @ 0x5
  4018                           
  4019  0075                     ?_parse_humidity_calib_data:	
  4020                           ; 1 bytes @ 0x5
  4021                           
  4022  0075                     ??_PIN_MANAGER_Initialize:	
  4023                           ; 1 bytes @ 0x5
  4024                           
  4025  0075                     ??_OSCILLATOR_Initialize:	
  4026                           ; 1 bytes @ 0x5
  4027                           
  4028  0075                     ??_I2C_Initialize:	
  4029                           ; 1 bytes @ 0x5
  4030                           
  4031  0075                     ??_EUSART_Initialize:	
  4032                           ; 1 bytes @ 0x5
  4033                           
  4034  0075                     ?_TMR0_SetInterruptHandler:	
  4035                           ; 1 bytes @ 0x5
  4036                           
  4037  0075                     ?_I2C_MasterWriteTRBBuild:	
  4038                           ; 1 bytes @ 0x5
  4039                           
  4040  0075                     ?_I2C_MasterTRBInsert:	
  4041                           ; 1 bytes @ 0x5
  4042                           
  4043  0075                     ??_I2C_MasterReadTRBBuild:	
  4044                           ; 1 bytes @ 0x5
  4045                           
  4046  0075                     ??_EUSART_is_rx_ready:	
  4047                           ; 1 bytes @ 0x5
  4048                           
  4049  0075                     ??_EUSART_Read:	
  4050                           ; 1 bytes @ 0x5
  4051                           
  4052  0075                     ??_EUSART_Write:	
  4053                           ; 1 bytes @ 0x5
  4054                           
  4055  0075                     ??_INTERRUPT_InterruptManager:	
  4056                           ; 1 bytes @ 0x5
  4057                           
  4058  0075                     ??_I2C_WaitForLastPacketToComplete:	
  4059                           ; 1 bytes @ 0x5
  4060                           
  4061  0075                     ??_FlashError:	
  4062                           ; 1 bytes @ 0x5
  4063                           
  4064  0075                     ??_Insert:	
  4065                           ; 1 bytes @ 0x5
  4066                           
  4067  0075                     ?_Sleep:	
  4068                           ; 1 bytes @ 0x5
  4069                           
  4070  0075                     ??_TransmitBit:	
  4071                           ; 1 bytes @ 0x5
  4072                           
  4073  0075                     ??_GPS_HasAcknowledged:	
  4074                           ; 1 bytes @ 0x5
  4075                           
  4076  0075                     ??_SafeSetByte:	
  4077                           ; 1 bytes @ 0x5
  4078                           
  4079  0075                     ??___lmul:	
  4080                           ; 1 bytes @ 0x5
  4081                           
  4082  0075                     ??___omul:	
  4083                           ; 1 bytes @ 0x5
  4084                           
  4085  0075                     ?_strlen:	
  4086                           ; 1 bytes @ 0x5
  4087                           
  4088  0075                     ?_crc_append_byte:	
  4089                           ; 2 bytes @ 0x5
  4090                           
  4091  0075                     ?_GetLengthUBX:	
  4092                           ; 2 bytes @ 0x5
  4093                           
  4094  0075                     ?___awdiv:	
  4095                           ; 2 bytes @ 0x5
  4096                           
  4097  0075                     ?___awmod:	
  4098                           ; 2 bytes @ 0x5
  4099                           
  4100  0075                     bme280_parse_sensor_data@uncomp_data:	
  4101                           ; 2 bytes @ 0x5
  4102                           
  4103  0075                     interleave_reg_addr@temp_buff:	
  4104                           ; 1 bytes @ 0x5
  4105                           
  4106  0075                     parse_temp_press_calib_data@dev:	
  4107                           ; 1 bytes @ 0x5
  4108                           
  4109  0075                     parse_humidity_calib_data@dev:	
  4110                           ; 1 bytes @ 0x5
  4111                           
  4112  0075                     EUSART_Write@txData:	
  4113                           ; 1 bytes @ 0x5
  4114                           
  4115  0075                     I2C_MasterTRBInsert@ptrb_list:	
  4116                           ; 1 bytes @ 0x5
  4117                           
  4118  0075                     I2C_MasterWriteTRBBuild@pdata:	
  4119                           ; 1 bytes @ 0x5
  4120                           
  4121  0075                     TMR0_SetInterruptHandler@InterruptHandler:	
  4122                           ; 1 bytes @ 0x5
  4123                           
  4124  0075                     crc_append_byte@crc:	
  4125                           ; 2 bytes @ 0x5
  4126                           
  4127  0075                     ___awdiv@divisor:	
  4128                           ; 2 bytes @ 0x5
  4129                           
  4130  0075                     ___awmod@divisor:	
  4131                           ; 2 bytes @ 0x5
  4132                           
  4133  0075                     strlen@s:	
  4134                           ; 2 bytes @ 0x5
  4135                           
  4136  0075                     Sleep@ms:	
  4137                           ; 2 bytes @ 0x5
  4138                           
  4139  0075                     ___lmul@product:	
  4140                           ; 4 bytes @ 0x5
  4141                           
  4142                           
  4143                           ; 4 bytes @ 0x5
  4144  0075                     	ds	1
  4145  0076                     ??_parse_temp_press_calib_data:	
  4146  0076                     ??_parse_humidity_calib_data:	
  4147                           ; 1 bytes @ 0x6
  4148                           
  4149  0076                     ??___aodiv:	
  4150                           ; 1 bytes @ 0x6
  4151                           
  4152  0076                     interleave_reg_addr@reg_data:	
  4153                           ; 1 bytes @ 0x6
  4154                           
  4155  0076                     I2C_MasterTRBInsert@pflag:	
  4156                           ; 1 bytes @ 0x6
  4157                           
  4158  0076                     I2C_MasterWriteTRBBuild@length:	
  4159                           ; 1 bytes @ 0x6
  4160                           
  4161  0076                     TransmitBit@b:	
  4162                           ; 1 bytes @ 0x6
  4163                           
  4164                           
  4165                           ; 1 bytes @ 0x6
  4166  0076                     	ds	1
  4167  0077                     ??_TMR0_Initialize:	
  4168  0077                     ??_TMR0_SetInterruptHandler:	
  4169                           ; 1 bytes @ 0x7
  4170                           
  4171  0077                     ??_I2C_MasterTRBInsert:	
  4172                           ; 1 bytes @ 0x7
  4173                           
  4174  0077                     ??_strlen:	
  4175                           ; 1 bytes @ 0x7
  4176                           
  4177  0077                     ??_TransmitByte:	
  4178                           ; 1 bytes @ 0x7
  4179                           
  4180  0077                     interleave_reg_addr@len:	
  4181                           ; 1 bytes @ 0x7
  4182                           
  4183  0077                     parse_temp_press_calib_data@calib_data:	
  4184                           ; 1 bytes @ 0x7
  4185                           
  4186  0077                     null_ptr_check@rslt:	
  4187                           ; 1 bytes @ 0x7
  4188                           
  4189  0077                     I2C_MasterReadTRBBuild@ptrb:	
  4190                           ; 1 bytes @ 0x7
  4191                           
  4192  0077                     crc_append_byte@data:	
  4193                           ; 1 bytes @ 0x7
  4194                           
  4195  0077                     SafeSetByte@dest:	
  4196                           ; 1 bytes @ 0x7
  4197                           
  4198  0077                     I2C_MasterWriteTRBBuild@address:	
  4199                           ; 1 bytes @ 0x7
  4200                           
  4201  0077                     FlashError@i:	
  4202                           ; 2 bytes @ 0x7
  4203                           
  4204  0077                     ___awdiv@dividend:	
  4205                           ; 2 bytes @ 0x7
  4206                           
  4207  0077                     ___awmod@dividend:	
  4208                           ; 2 bytes @ 0x7
  4209                           
  4210                           
  4211                           ; 2 bytes @ 0x7
  4212  0077                     	ds	1
  4213  0078                     ??_SYSTEM_Initialize:	
  4214  0078                     ??_ClearString:	
  4215                           ; 1 bytes @ 0x8
  4216                           
  4217  0078                     ??_InsertString:	
  4218                           ; 1 bytes @ 0x8
  4219                           
  4220  0078                     ??_TransmitString:	
  4221                           ; 1 bytes @ 0x8
  4222                           
  4223  0078                     ??_WriteGPS:	
  4224                           ; 1 bytes @ 0x8
  4225                           
  4226  0078                     ??_GetLengthUBX:	
  4227                           ; 1 bytes @ 0x8
  4228                           
  4229  0078                     parse_temp_press_calib_data@reg_data:	
  4230                           ; 1 bytes @ 0x8
  4231                           
  4232  0078                     null_ptr_check@dev:	
  4233                           ; 1 bytes @ 0x8
  4234                           
  4235  0078                     I2C_MasterTRBInsert@count:	
  4236                           ; 1 bytes @ 0x8
  4237                           
  4238  0078                     GetLengthUBX@data:	
  4239                           ; 1 bytes @ 0x8
  4240                           
  4241  0078                     strcat@dest:	
  4242                           ; 1 bytes @ 0x8
  4243                           
  4244                           
  4245                           ; 1 bytes @ 0x8
  4246  0078                     	ds	1
  4247                           
  4248                           	psect	cstackBANK0
  4249  0020                     __pcstackBANK0:	
  4250  0020                     ??_interleave_reg_addr:	
  4251  0020                     ??_bme280_parse_sensor_data:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0020                     ??_I2C_MasterWriteTRBBuild:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0020                     ?_I2C_MasterReadTRBBuild:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0020                     ?_Insert:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0020                     ??_Sleep:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0020                     ??_crc_append_byte:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0020                     ??_GPS_SendUBX:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0020                     ?_SafeSetByte:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0020                     ??___awdiv:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0020                     ??___awmod:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0020                     ?___lmul:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0020                     ?___omul:	
  4285                           ; 4 bytes @ 0x0
  4286                           
  4287  0020                     Insert@src:	
  4288                           ; 8 bytes @ 0x0
  4289                           
  4290  0020                     TransmitByte@byte:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0020                     parse_humidity_calib_data@dig_H4_lsb:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0020                     I2C_MasterReadTRBBuild@pdata:	
  4297                           ; 2 bytes @ 0x0
  4298                           
  4299  0020                     SafeSetByte@length:	
  4300                           ; 2 bytes @ 0x0
  4301                           
  4302  0020                     strlen@a:	
  4303                           ; 2 bytes @ 0x0
  4304                           
  4305  0020                     GPS_HasAcknowledged@startTime:	
  4306                           ; 2 bytes @ 0x0
  4307                           
  4308  0020                     ___lmul@multiplier:	
  4309                           ; 4 bytes @ 0x0
  4310                           
  4311  0020                     ___omul@multiplier:	
  4312                           ; 4 bytes @ 0x0
  4313                           
  4314                           
  4315                           ; 8 bytes @ 0x0
  4316  0020                     	ds	1
  4317  0021                     ___awdiv@counter:	
  4318  0021                     ___awmod@counter:	
  4319                           ; 1 bytes @ 0x1
  4320                           
  4321  0021                     Insert@index:	
  4322                           ; 1 bytes @ 0x1
  4323                           
  4324  0021                     TransmitByte@i:	
  4325                           ; 2 bytes @ 0x1
  4326                           
  4327  0021                     GPS_SendUBX@length:	
  4328                           ; 2 bytes @ 0x1
  4329                           
  4330                           
  4331                           ; 2 bytes @ 0x1
  4332  0021                     	ds	1
  4333  0022                     ?_strcpy:	
  4334  0022                     ?_ClearString:	
  4335                           ; 1 bytes @ 0x2
  4336                           
  4337  0022                     ?_FindString:	
  4338                           ; 1 bytes @ 0x2
  4339                           
  4340  0022                     ?_WriteGPS:	
  4341                           ; 1 bytes @ 0x2
  4342                           
  4343  0022                     I2C_MasterReadTRBBuild@length:	
  4344                           ; 1 bytes @ 0x2
  4345                           
  4346  0022                     I2C_MasterWriteTRBBuild@ptrb:	
  4347                           ; 1 bytes @ 0x2
  4348                           
  4349  0022                     ___awdiv@sign:	
  4350                           ; 1 bytes @ 0x2
  4351                           
  4352  0022                     ___awmod@sign:	
  4353                           ; 1 bytes @ 0x2
  4354                           
  4355  0022                     parse_humidity_calib_data@dig_H4_msb:	
  4356                           ; 1 bytes @ 0x2
  4357                           
  4358  0022                     ClearString@str:	
  4359                           ; 2 bytes @ 0x2
  4360                           
  4361  0022                     FindString@srcLen:	
  4362                           ; 2 bytes @ 0x2
  4363                           
  4364  0022                     WriteGPS@message:	
  4365                           ; 2 bytes @ 0x2
  4366                           
  4367  0022                     SafeSetByte@index:	
  4368                           ; 2 bytes @ 0x2
  4369                           
  4370  0022                     strcpy@src:	
  4371                           ; 2 bytes @ 0x2
  4372                           
  4373                           
  4374                           ; 2 bytes @ 0x2
  4375  0022                     	ds	1
  4376  0023                     ?_I2C_MasterWrite:	
  4377  0023                     interleave_reg_addr@reg_addr:	
  4378                           ; 1 bytes @ 0x3
  4379                           
  4380  0023                     I2C_MasterWrite@length:	
  4381                           ; 1 bytes @ 0x3
  4382                           
  4383  0023                     GPS_SendUBX@data:	
  4384                           ; 1 bytes @ 0x3
  4385                           
  4386  0023                     I2C_MasterReadTRBBuild@address:	
  4387                           ; 1 bytes @ 0x3
  4388                           
  4389  0023                     Insert@destLimit:	
  4390                           ; 2 bytes @ 0x3
  4391                           
  4392  0023                     crc_append_byte@i:	
  4393                           ; 2 bytes @ 0x3
  4394                           
  4395  0023                     TransmitString@counti:	
  4396                           ; 2 bytes @ 0x3
  4397                           
  4398  0023                     ___awdiv@quotient:	
  4399                           ; 2 bytes @ 0x3
  4400                           
  4401                           
  4402                           ; 2 bytes @ 0x3
  4403  0023                     	ds	1
  4404  0024                     ??_strcpy:	
  4405  0024                     interleave_reg_addr@index:	
  4406                           ; 1 bytes @ 0x4
  4407                           
  4408  0024                     GPS_HasAcknowledged@ackByte:	
  4409                           ; 1 bytes @ 0x4
  4410                           
  4411  0024                     SafeSetByte@data:	
  4412                           ; 1 bytes @ 0x4
  4413                           
  4414  0024                     parse_humidity_calib_data@dig_H5_lsb:	
  4415                           ; 1 bytes @ 0x4
  4416                           
  4417  0024                     I2C_MasterWrite@address:	
  4418                           ; 2 bytes @ 0x4
  4419                           
  4420  0024                     ClearString@counti:	
  4421                           ; 2 bytes @ 0x4
  4422                           
  4423  0024                     FindString@target:	
  4424                           ; 2 bytes @ 0x4
  4425                           
  4426  0024                     WriteGPS@counti:	
  4427                           ; 2 bytes @ 0x4
  4428                           
  4429  0024                     GPS_SendUBX@i:	
  4430                           ; 2 bytes @ 0x4
  4431                           
  4432  0024                     Sleep@start:	
  4433                           ; 2 bytes @ 0x4
  4434                           
  4435  0024                     ___lmul@multiplicand:	
  4436                           ; 4 bytes @ 0x4
  4437                           
  4438                           
  4439                           ; 4 bytes @ 0x4
  4440  0024                     	ds	1
  4441  0025                     ?_I2C_MasterRead:	
  4442  0025                     ?_ReverseString:	
  4443                           ; 1 bytes @ 0x5
  4444                           
  4445  0025                     ?_crc16:	
  4446                           ; 1 bytes @ 0x5
  4447                           
  4448  0025                     Insert@temp:	
  4449                           ; 2 bytes @ 0x5
  4450                           
  4451  0025                     I2C_MasterRead@pdata:	
  4452                           ; 1 bytes @ 0x5
  4453                           
  4454  0025                     ReverseString@str:	
  4455                           ; 2 bytes @ 0x5
  4456                           
  4457  0025                     crc16@segments:	
  4458                           ; 2 bytes @ 0x5
  4459                           
  4460  0025                     TransmitString@i:	
  4461                           ; 2 bytes @ 0x5
  4462                           
  4463  0025                     GPS_HasAcknowledged@ackPacket:	
  4464                           ; 2 bytes @ 0x5
  4465                           
  4466                           
  4467                           ; 10 bytes @ 0x5
  4468  0025                     	ds	1
  4469  0026                     I2C_MasterWrite@pflag:	
  4470  0026                     Insert@current:	
  4471                           ; 1 bytes @ 0x6
  4472                           
  4473  0026                     parse_humidity_calib_data@dig_H5_msb:	
  4474                           ; 1 bytes @ 0x6
  4475                           
  4476  0026                     ClearString@i:	
  4477                           ; 2 bytes @ 0x6
  4478                           
  4479  0026                     FindString@targetLen:	
  4480                           ; 2 bytes @ 0x6
  4481                           
  4482  0026                     WriteGPS@i:	
  4483                           ; 2 bytes @ 0x6
  4484                           
  4485  0026                     strcpy@s:	
  4486                           ; 2 bytes @ 0x6
  4487                           
  4488                           
  4489                           ; 2 bytes @ 0x6
  4490  0026                     	ds	1
  4491  0027                     ??_I2C_MasterWrite:	
  4492  0027                     ??_ReverseString:	
  4493                           ; 1 bytes @ 0x7
  4494                           
  4495  0027                     ??_crc16:	
  4496                           ; 1 bytes @ 0x7
  4497                           
  4498  0027                     I2C_MasterRead@length:	
  4499                           ; 1 bytes @ 0x7
  4500                           
  4501  0027                     Insert@dest:	
  4502                           ; 1 bytes @ 0x7
  4503                           
  4504  0027                     TransmitString@message:	
  4505                           ; 1 bytes @ 0x7
  4506                           
  4507                           
  4508                           ; 1 bytes @ 0x7
  4509  0027                     	ds	1
  4510  0028                     ??_FindString:	
  4511  0028                     ?_InsertString:	
  4512                           ; 1 bytes @ 0x8
  4513                           
  4514  0028                     ?___aldiv:	
  4515                           ; 1 bytes @ 0x8
  4516                           
  4517  0028                     parse_humidity_calib_data@calib_data:	
  4518                           ; 4 bytes @ 0x8
  4519                           
  4520  0028                     strcpy@d:	
  4521                           ; 1 bytes @ 0x8
  4522                           
  4523  0028                     I2C_MasterRead@address:	
  4524                           ; 1 bytes @ 0x8
  4525                           
  4526  0028                     InsertString@src:	
  4527                           ; 2 bytes @ 0x8
  4528                           
  4529  0028                     bme280_parse_sensor_data@data_xlsb:	
  4530                           ; 2 bytes @ 0x8
  4531                           
  4532  0028                     ___aldiv@divisor:	
  4533                           ; 4 bytes @ 0x8
  4534                           
  4535  0028                     ___omul@multiplicand:	
  4536                           ; 4 bytes @ 0x8
  4537                           
  4538                           
  4539                           ; 8 bytes @ 0x8
  4540  0028                     	ds	1
  4541  0029                     parse_humidity_calib_data@reg_data:	
  4542  0029                     I2C_MasterWrite@pdata:	
  4543                           ; 1 bytes @ 0x9
  4544                           
  4545  0029                     strcpy@dest:	
  4546                           ; 1 bytes @ 0x9
  4547                           
  4548  0029                     crc16@len:	
  4549                           ; 1 bytes @ 0x9
  4550                           
  4551                           
  4552                           ; 2 bytes @ 0x9
  4553  0029                     	ds	1
  4554  002A                     ?_strcat:	
  4555  002A                     ?_WriteEnvSensor:	
  4556                           ; 1 bytes @ 0xA
  4557                           
  4558  002A                     I2C_MasterRead@pflag:	
  4559                           ; 1 bytes @ 0xA
  4560                           
  4561  002A                     FindString@src:	
  4562                           ; 1 bytes @ 0xA
  4563                           
  4564  002A                     WriteEnvSensor@dev_id:	
  4565                           ; 1 bytes @ 0xA
  4566                           
  4567  002A                     InsertString@index:	
  4568                           ; 1 bytes @ 0xA
  4569                           
  4570  002A                     strcat@src:	
  4571                           ; 2 bytes @ 0xA
  4572                           
  4573                           
  4574                           ; 2 bytes @ 0xA
  4575  002A                     	ds	1
  4576  002B                     ??_I2C_MasterRead:	
  4577  002B                     crc16@data:	
  4578                           ; 1 bytes @ 0xB
  4579                           
  4580  002B                     WriteEnvSensor@reg_addr:	
  4581                           ; 1 bytes @ 0xB
  4582                           
  4583  002B                     FindString@i:	
  4584                           ; 1 bytes @ 0xB
  4585                           
  4586  002B                     ReverseString@halfway:	
  4587                           ; 2 bytes @ 0xB
  4588                           
  4589                           
  4590                           ; 2 bytes @ 0xB
  4591  002B                     	ds	1
  4592  002C                     ??_strcat:	
  4593  002C                     crc16@c:	
  4594                           ; 1 bytes @ 0xC
  4595                           
  4596  002C                     WriteEnvSensor@reg_data:	
  4597                           ; 1 bytes @ 0xC
  4598                           
  4599  002C                     InsertString@destLimit:	
  4600                           ; 1 bytes @ 0xC
  4601                           
  4602  002C                     bme280_parse_sensor_data@data_lsb:	
  4603                           ; 2 bytes @ 0xC
  4604                           
  4605  002C                     ___aldiv@dividend:	
  4606                           ; 4 bytes @ 0xC
  4607                           
  4608                           
  4609                           ; 4 bytes @ 0xC
  4610  002C                     	ds	1
  4611  002D                     ?_ReadEnvSensor:	
  4612  002D                     ReverseString@temp:	
  4613                           ; 1 bytes @ 0xD
  4614                           
  4615  002D                     ReadEnvSensor@dev_id:	
  4616                           ; 1 bytes @ 0xD
  4617                           
  4618  002D                     FindString@matching:	
  4619                           ; 1 bytes @ 0xD
  4620                           
  4621  002D                     crc16@crc:	
  4622                           ; 2 bytes @ 0xD
  4623                           
  4624  002D                     WriteEnvSensor@len:	
  4625                           ; 2 bytes @ 0xD
  4626                           
  4627                           
  4628                           ; 2 bytes @ 0xD
  4629  002D                     	ds	1
  4630  002E                     ReadEnvSensor@reg_addr:	
  4631  002E                     InsertString@counti:	
  4632                           ; 1 bytes @ 0xE
  4633                           
  4634  002E                     ReverseString@opposite:	
  4635                           ; 2 bytes @ 0xE
  4636                           
  4637                           
  4638                           ; 2 bytes @ 0xE
  4639  002E                     	ds	1
  4640  002F                     ??_WriteEnvSensor:	
  4641  002F                     GPS_HasAcknowledged@data:	
  4642                           ; 1 bytes @ 0xF
  4643                           
  4644  002F                     crc16@str:	
  4645                           ; 1 bytes @ 0xF
  4646                           
  4647  002F                     ReadEnvSensor@data:	
  4648                           ; 2 bytes @ 0xF
  4649                           
  4650                           
  4651                           ; 2 bytes @ 0xF
  4652  002F                     	ds	1
  4653  0030                     ??___aldiv:	
  4654  0030                     InsertString@dest:	
  4655                           ; 1 bytes @ 0x10
  4656                           
  4657  0030                     GPS_HasAcknowledged@ackByteID:	
  4658                           ; 1 bytes @ 0x10
  4659                           
  4660  0030                     ReverseString@counti:	
  4661                           ; 1 bytes @ 0x10
  4662                           
  4663  0030                     bme280_parse_sensor_data@data_msb:	
  4664                           ; 2 bytes @ 0x10
  4665                           
  4666  0030                     ___omul@product:	
  4667                           ; 4 bytes @ 0x10
  4668                           
  4669                           
  4670                           ; 8 bytes @ 0x10
  4671  0030                     	ds	1
  4672  0031                     crc16@string:	
  4673  0031                     GPS_HasAcknowledged@i:	
  4674                           ; 1 bytes @ 0x11
  4675                           
  4676  0031                     ___aldiv@counter:	
  4677                           ; 1 bytes @ 0x11
  4678                           
  4679  0031                     InsertString@i:	
  4680                           ; 1 bytes @ 0x11
  4681                           
  4682  0031                     ReadEnvSensor@len:	
  4683                           ; 2 bytes @ 0x11
  4684                           
  4685                           
  4686                           ; 2 bytes @ 0x11
  4687  0031                     	ds	1
  4688  0032                     ??_SetupGPS:	
  4689  0032                     ___aldiv@sign:	
  4690                           ; 1 bytes @ 0x12
  4691                           
  4692  0032                     ReverseString@i:	
  4693                           ; 1 bytes @ 0x12
  4694                           
  4695  0032                     crc16@i:	
  4696                           ; 2 bytes @ 0x12
  4697                           
  4698                           
  4699                           ; 2 bytes @ 0x12
  4700  0032                     	ds	1
  4701  0033                     ??_ReadEnvSensor:	
  4702  0033                     WriteEnvSensor@local_address:	
  4703                           ; 1 bytes @ 0x13
  4704                           
  4705  0033                     ___aldiv@quotient:	
  4706                           ; 1 bytes @ 0x13
  4707                           
  4708                           
  4709                           ; 4 bytes @ 0x13
  4710  0033                     	ds	1
  4711  0034                     ?_IntToHexString:	
  4712  0034                     ?_IntToString:	
  4713                           ; 1 bytes @ 0x14
  4714                           
  4715  0034                     bme280_parse_sensor_data@reg_data:	
  4716                           ; 1 bytes @ 0x14
  4717                           
  4718  0034                     WriteEnvSensor@status:	
  4719                           ; 1 bytes @ 0x14
  4720                           
  4721  0034                     IntToHexString@n:	
  4722                           ; 1 bytes @ 0x14
  4723                           
  4724  0034                     IntToString@n:	
  4725                           ; 2 bytes @ 0x14
  4726                           
  4727                           
  4728                           ; 2 bytes @ 0x14
  4729  0034                     	ds	1
  4730  0035                     ?_bme280_set_regs:	
  4731  0035                     bme280_set_regs@reg_data:	
  4732                           ; 1 bytes @ 0x15
  4733                           
  4734                           
  4735                           ; 1 bytes @ 0x15
  4736  0035                     	ds	1
  4737  0036                     bme280_set_regs@len:	
  4738  0036                     IntToHexString@dest:	
  4739                           ; 1 bytes @ 0x16
  4740                           
  4741  0036                     IntToString@dest:	
  4742                           ; 1 bytes @ 0x16
  4743                           
  4744                           
  4745                           ; 2 bytes @ 0x16
  4746  0036                     	ds	1
  4747  0037                     ??_IntToHexString:	
  4748  0037                     ?_compensate_temperature:	
  4749                           ; 1 bytes @ 0x17
  4750                           
  4751  0037                     bme280_set_regs@dev:	
  4752                           ; 4 bytes @ 0x17
  4753                           
  4754  0037                     compensate_temperature@calib_data:	
  4755                           ; 1 bytes @ 0x17
  4756                           
  4757  0037                     ReadEnvSensor@status:	
  4758                           ; 1 bytes @ 0x17
  4759                           
  4760                           
  4761                           ; 1 bytes @ 0x17
  4762  0037                     	ds	1
  4763  0038                     ?_bme280_get_regs:	
  4764  0038                     ??_bme280_set_regs:	
  4765                           ; 1 bytes @ 0x18
  4766                           
  4767  0038                     ??_IntToString:	
  4768                           ; 1 bytes @ 0x18
  4769                           
  4770  0038                     ?___aodiv:	
  4771                           ; 1 bytes @ 0x18
  4772                           
  4773  0038                     bme280_get_regs@reg_data:	
  4774                           ; 8 bytes @ 0x18
  4775                           
  4776  0038                     ___aodiv@divisor:	
  4777                           ; 2 bytes @ 0x18
  4778                           
  4779                           
  4780                           ; 8 bytes @ 0x18
  4781  0038                     	ds	1
  4782  0039                     _IntToHexString$1796:	
  4783                           
  4784                           ; 2 bytes @ 0x19
  4785  0039                     	ds	1
  4786  003A                     bme280_get_regs@len:	
  4787                           
  4788                           ; 2 bytes @ 0x1A
  4789  003A                     	ds	1
  4790  003B                     ??_compensate_temperature:	
  4791  003B                     IntToString@sign:	
  4792                           ; 1 bytes @ 0x1B
  4793                           
  4794  003B                     IntToHexString@remainder:	
  4795                           ; 1 bytes @ 0x1B
  4796                           
  4797  003B                     bme280_set_regs@temp_buff:	
  4798                           ; 2 bytes @ 0x1B
  4799                           
  4800                           
  4801                           ; 20 bytes @ 0x1B
  4802  003B                     	ds	1
  4803  003C                     bme280_get_regs@dev:	
  4804  003C                     IntToString@i:	
  4805                           ; 1 bytes @ 0x1C
  4806                           
  4807                           
  4808                           ; 2 bytes @ 0x1C
  4809  003C                     	ds	1
  4810  003D                     ??_bme280_get_regs:	
  4811  003D                     IntToHexString@i:	
  4812                           ; 1 bytes @ 0x1D
  4813                           
  4814                           
  4815                           ; 2 bytes @ 0x1D
  4816  003D                     	ds	1
  4817  003E                     ??_GetNavData:	
  4818                           
  4819                           ; 1 bytes @ 0x1E
  4820  003E                     	ds	1
  4821  003F                     bme280_get_regs@reg_addr:	
  4822                           
  4823                           ; 1 bytes @ 0x1F
  4824  003F                     	ds	1
  4825  0040                     bme280_get_regs@rslt:	
  4826  0040                     ___aodiv@dividend:	
  4827                           ; 1 bytes @ 0x20
  4828                           
  4829                           
  4830                           ; 8 bytes @ 0x20
  4831  0040                     	ds	1
  4832  0041                     ??_get_calib_data:	
  4833                           
  4834                           ; 1 bytes @ 0x21
  4835  0041                     	ds	1
  4836  0042                     GetNavData@strId:	
  4837                           
  4838                           ; 12 bytes @ 0x22
  4839  0042                     	ds	1
  4840  0043                     get_calib_data@calib_data:	
  4841                           
  4842                           ; 26 bytes @ 0x23
  4843  0043                     	ds	2
  4844  0045                     _compensate_temperature$2548:	
  4845                           
  4846                           ; 4 bytes @ 0x25
  4847  0045                     	ds	3
  4848  0048                     ___aodiv@counter:	
  4849                           
  4850                           ; 1 bytes @ 0x28
  4851  0048                     	ds	1
  4852  0049                     ___aodiv@sign:	
  4853                           
  4854                           ; 1 bytes @ 0x29
  4855  0049                     	ds	1
  4856  004A                     ___aodiv@quotient:	
  4857                           
  4858                           ; 8 bytes @ 0x2A
  4859  004A                     	ds	3
  4860  004D                     compensate_temperature@temperature_max:	
  4861                           
  4862                           ; 4 bytes @ 0x2D
  4863  004D                     	ds	1
  4864  004E                     GetNavData@data_type:	
  4865                           
  4866                           ; 7 bytes @ 0x2E
  4867  004E                     	ds	1
  4868  004F                     bme280_set_regs@temp_len:	
  4869                           
  4870                           ; 2 bytes @ 0x2F
  4871  004F                     	ds	2
  4872  0051                     bme280_set_regs@reg_addr_cnt:	
  4873  0051                     compensate_temperature@var1:	
  4874                           ; 1 bytes @ 0x31
  4875                           
  4876                           
  4877                           ; 4 bytes @ 0x31
  4878  0051                     	ds	1
  4879  0052                     ?_compensate_pressure:	
  4880  0052                     bme280_set_regs@rslt:	
  4881                           ; 4 bytes @ 0x32
  4882                           
  4883  0052                     compensate_pressure@calib_data:	
  4884                           ; 1 bytes @ 0x32
  4885                           
  4886                           
  4887                           ; 1 bytes @ 0x32
  4888  0052                     	ds	1
  4889  0053                     bme280_set_regs@reg_addr:	
  4890                           
  4891                           ; 1 bytes @ 0x33
  4892  0053                     	ds	1
  4893  0054                     ??_bme280_soft_reset:	
  4894                           
  4895                           ; 1 bytes @ 0x34
  4896  0054                     	ds	1
  4897  0055                     compensate_temperature@uncomp_data:	
  4898  0055                     GetNavData@startTime:	
  4899                           ; 1 bytes @ 0x35
  4900                           
  4901                           
  4902                           ; 4 bytes @ 0x35
  4903  0055                     	ds	1
  4904  0056                     ??_compensate_pressure:	
  4905  0056                     compensate_temperature@var2:	
  4906                           ; 1 bytes @ 0x36
  4907                           
  4908                           
  4909                           ; 4 bytes @ 0x36
  4910  0056                     	ds	1
  4911  0057                     bme280_soft_reset@soft_rst_cmd:	
  4912                           
  4913                           ; 1 bytes @ 0x37
  4914  0057                     	ds	1
  4915  0058                     bme280_soft_reset@rslt:	
  4916                           
  4917                           ; 1 bytes @ 0x38
  4918  0058                     	ds	1
  4919  0059                     bme280_soft_reset@reg_addr:	
  4920  0059                     GetNavData@skip:	
  4921                           ; 1 bytes @ 0x39
  4922                           
  4923                           
  4924                           ; 1 bytes @ 0x39
  4925  0059                     	ds	1
  4926  005A                     bme280_soft_reset@dev:	
  4927  005A                     GetNavData@success:	
  4928                           ; 1 bytes @ 0x3A
  4929                           
  4930  005A                     compensate_temperature@temperature:	
  4931                           ; 1 bytes @ 0x3A
  4932                           
  4933                           
  4934                           ; 4 bytes @ 0x3A
  4935  005A                     	ds	1
  4936  005B                     GetNavData@signInsertIndex:	
  4937                           
  4938                           ; 2 bytes @ 0x3B
  4939  005B                     	ds	2
  4940  005D                     GetNavData@doParse:	
  4941                           
  4942                           ; 1 bytes @ 0x3D
  4943  005D                     	ds	1
  4944  005E                     get_calib_data@rslt:	
  4945  005E                     GetNavData@dataFieldType:	
  4946                           ; 1 bytes @ 0x3E
  4947                           
  4948                           
  4949                           ; 2 bytes @ 0x3E
  4950  005E                     	ds	1
  4951  005F                     get_calib_data@dev:	
  4952                           
  4953                           ; 1 bytes @ 0x3F
  4954  005F                     	ds	1
  4955  0060                     ??_bme280_init:	
  4956  0060                     GetNavData@dataIndex:	
  4957                           ; 1 bytes @ 0x40
  4958                           
  4959                           
  4960                           ; 2 bytes @ 0x40
  4961  0060                     	ds	2
  4962  0062                     bme280_init@try_count:	
  4963  0062                     GetNavData@byte:	
  4964                           ; 1 bytes @ 0x42
  4965                           
  4966                           
  4967                           ; 1 bytes @ 0x42
  4968  0062                     	ds	1
  4969  0063                     bme280_init@chip_id:	
  4970  0063                     GetNavData@index:	
  4971                           ; 1 bytes @ 0x43
  4972                           
  4973                           
  4974                           ; 2 bytes @ 0x43
  4975  0063                     	ds	1
  4976  0064                     bme280_init@rslt:	
  4977                           
  4978                           ; 1 bytes @ 0x44
  4979  0064                     	ds	1
  4980  0065                     bme280_init@dev:	
  4981                           
  4982                           ; 1 bytes @ 0x45
  4983  0065                     	ds	11
  4984                           
  4985                           	psect	maintext
  4986  1642                     __pmaintext:	
  4987 ;;
  4988 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4989 ;;
  4990 ;; *************** function _main *****************
  4991 ;; Defined at:
  4992 ;;		line 800 in file "main.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;		None
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  i               2   41[BANK2 ] int 
  4997 ;;  convertedSen   16   24[BANK2 ] unsigned char [16]
  4998 ;;  sensor_data    12   43[BANK2 ] struct bme280_data
  4999 ;;  env_sensor     51    0[BANK3 ] struct bme280_dev
  5000 ;;  env_sensor_s    1    0        char 
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      void 
  5003 ;; Registers used:
  5004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : B1F/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Locals:         0       0       0      31      51       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Totals:         0       0       0      33      51       0       0       0       0       0       0       0       
      +0       0
  5014 ;;Total ram usage:       84 bytes
  5015 ;; Hardware stack levels required when called:   10
  5016 ;; This function calls:
  5017 ;;		_FlashError
  5018 ;;		_GetNavData
  5019 ;;		_IntToHexString
  5020 ;;		_IntToString
  5021 ;;		_SYSTEM_Initialize
  5022 ;;		_SetupGPS
  5023 ;;		_TMR0_SetInterruptHandler
  5024 ;;		_TransmitString
  5025 ;;		_bme280_get_sensor_data
  5026 ;;		_bme280_init
  5027 ;;		_crc16
  5028 ;;		_strcat
  5029 ;; This function is called by:
  5030 ;;		Startup code after reset
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function _main
  5036  1642                     _main:	
  5037                           
  5038                           ;main.c: 803:     SYSTEM_Initialize();
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5042  1642  3199  218A  3196   	fcall	_SYSTEM_Initialize
  5043                           
  5044                           ;main.c: 804:     (INTCONbits.GIE = 1);
  5045  1645  178B               	bsf	11,7	;volatile
  5046                           
  5047                           ;main.c: 805:     TMR0_SetInterruptHandler(TimerISR);
  5048  1646  306D               	movlw	low _TimerISR
  5049  1647  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  5050  1648  3019               	movlw	high _TimerISR
  5051  1649  00F6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  5052  164A  3199  214D  3196   	fcall	_TMR0_SetInterruptHandler
  5053                           
  5054                           ;main.c: 811:     env_sensor.dev_id = 0x76;
  5055  164D  3076               	movlw	118
  5056  164E  00B6               	movwf	??_main^(0+256)
  5057  164F  0836               	movf	??_main^(0+256),w
  5058  1650  0023               	movlb	3	; select bank3
  5059  1651  00A1               	movwf	(main@env_sensor^(0+384)+1)
  5060                           
  5061                           ;main.c: 812:     env_sensor.intf = BME280_I2C_INTF;
  5062  1652  01A2               	clrf	(main@env_sensor^(0+384)+2)
  5063  1653  0AA2               	incf	(main@env_sensor^(0+384)+2),f
  5064                           
  5065                           ;main.c: 813:     env_sensor.read = ReadEnvSensor;
  5066  1654  30E8               	movlw	low _ReadEnvSensor
  5067  1655  00A3               	movwf	(low ((main@env_sensor| (0+256)+3)))^(0+128)
  5068  1656  301C               	movlw	high _ReadEnvSensor
  5069  1657  00A4               	movwf	((low ((main@env_sensor| (0+256)+3)))^(0+128)+1)
  5070                           
  5071                           ;main.c: 814:     env_sensor.write = WriteEnvSensor;
  5072  1658  30B6               	movlw	low _WriteEnvSensor
  5073  1659  00A5               	movwf	(low ((main@env_sensor| (0+256)+5)))^(0+128)
  5074  165A  301F               	movlw	high _WriteEnvSensor
  5075  165B  00A6               	movwf	((low ((main@env_sensor| (0+256)+5)))^(0+128)+1)
  5076                           
  5077                           ;main.c: 815:     env_sensor.delay_ms = Sleep;
  5078  165C  3057               	movlw	low _Sleep
  5079  165D  00A7               	movwf	(low ((main@env_sensor| (0+256)+7)))^(0+128)
  5080  165E  301D               	movlw	high _Sleep
  5081  165F  00A8               	movwf	((low ((main@env_sensor| (0+256)+7)))^(0+128)+1)
  5082  1660  30A0               	movlw	(low (main@env_sensor| (0+256)))& (0+255)
  5083  1661  3191  219E  3196   	fcall	_bme280_init
  5084                           
  5085                           ;main.c: 820:     SetupGPS();
  5086  1664  3190  2083  3196   	fcall	_SetupGPS
  5087  1667                     l5818:	
  5088                           
  5089                           ;main.c: 824:     {;main.c: 825:         if (
  5090  1667  3180  206E  3196   	fcall	_GetNavData
  5091  166A  3A00               	xorlw	0
  5092  166B  1903               	skipnz
  5093  166C  2EEC               	goto	l5848
  5094                           
  5095                           ;main.c: 832:         {;main.c: 834:             struct bme280_data sensor_data;;main.c:
      +                           835:             bme280_get_sensor_data(0x07, &sensor_data, &env_sensor);
  5096  166D  304B               	movlw	(low (main@sensor_data| (0+256)))& (0+255)
  5097  166E  0022               	movlb	2	; select bank2
  5098  166F  00B6               	movwf	??_main^(0+256)
  5099  1670  0836               	movf	??_main^(0+256),w
  5100  1671  0021               	movlb	1	; select bank1
  5101  1672  00EB               	movwf	bme280_get_sensor_data@comp_data^(0+128)
  5102  1673  30A0               	movlw	(low (main@env_sensor| (0+256)))& (0+255)
  5103  1674  0022               	movlb	2	; select bank2
  5104  1675  00B7               	movwf	(??_main+1)^(0+256)
  5105  1676  0837               	movf	(??_main+1)^(0+256),w
  5106  1677  0021               	movlb	1	; select bank1
  5107  1678  00EC               	movwf	bme280_get_sensor_data@dev^(0+128)
  5108  1679  3007               	movlw	7
  5109  167A  3190  20D5  3196   	fcall	_bme280_get_sensor_data
  5110                           
  5111                           ;main.c: 839:             char convertedSensorData[16] = {'\0'};
  5112  167D  3038               	movlw	low main@convertedSensorData
  5113  167E  0086               	movwf	6
  5114  167F  3001               	movlw	high main@convertedSensorData
  5115  1680  0087               	movwf	7
  5116  1681  3010               	movlw	16
  5117  1682  0022               	movlb	2	; select bank2
  5118  1683  00B6               	movwf	??_main^(0+256)
  5119  1684  3000               	movlw	0
  5120  1685                     u6340:	
  5121  1685  001E               	movwi fsr1++
  5122  1686  0BB6               	decfsz	??_main^(0+256),f
  5123  1687  2E85               	goto	u6340
  5124                           
  5125                           ;main.c: 840:             IntToString(sensor_data.temperature, convertedSensorData);
  5126  1688  0850               	movf	((main@sensor_data+1)^(0+256)+4),w
  5127  1689  0020               	movlb	0	; select bank0
  5128  168A  00B5               	movwf	IntToString@n+1
  5129  168B  0022               	movlb	2	; select bank2
  5130  168C  084F               	movf	(main@sensor_data^(0+256)+4),w
  5131  168D  0020               	movlb	0	; select bank0
  5132  168E  00B4               	movwf	IntToString@n
  5133  168F  3038               	movlw	low main@convertedSensorData
  5134  1690  00B6               	movwf	IntToString@dest
  5135  1691  3001               	movlw	high main@convertedSensorData
  5136  1692  00B7               	movwf	IntToString@dest+1
  5137  1693  3192  2205  3196   	fcall	_IntToString
  5138                           
  5139                           ;main.c: 841:             strcat(messages[1], convertedSensorData);
  5140  1696  3038               	movlw	low main@convertedSensorData
  5141  1697  00AA               	movwf	strcat@src
  5142  1698  3001               	movlw	high main@convertedSensorData
  5143  1699  00AB               	movwf	strcat@src+1
  5144  169A  087C               	movf	_messages+1,w
  5145  169B  3199  21F2  3196   	fcall	_strcat
  5146                           
  5147                           ;main.c: 842:             strcat(messages[1], ",");
  5148  169E  30B4               	movlw	low (STR_11| (0+32768))
  5149  169F  00AA               	movwf	strcat@src
  5150  16A0  3098               	movlw	high (STR_11| (0+32768))
  5151  16A1  00AB               	movwf	strcat@src+1
  5152  16A2  087C               	movf	_messages+1,w
  5153  16A3  3199  21F2  3196   	fcall	_strcat
  5154                           
  5155                           ;main.c: 843:             IntToString(sensor_data.pressure, convertedSensorData);
  5156  16A6  0022               	movlb	2	; select bank2
  5157  16A7  084C               	movf	(main@sensor_data+1)^(0+256),w
  5158  16A8  0020               	movlb	0	; select bank0
  5159  16A9  00B5               	movwf	IntToString@n+1
  5160  16AA  0022               	movlb	2	; select bank2
  5161  16AB  084B               	movf	main@sensor_data^(0+256),w
  5162  16AC  0020               	movlb	0	; select bank0
  5163  16AD  00B4               	movwf	IntToString@n
  5164  16AE  3038               	movlw	low main@convertedSensorData
  5165  16AF  00B6               	movwf	IntToString@dest
  5166  16B0  3001               	movlw	high main@convertedSensorData
  5167  16B1  00B7               	movwf	IntToString@dest+1
  5168  16B2  3192  2205  3196   	fcall	_IntToString
  5169                           
  5170                           ;main.c: 844:             strcat(messages[1], convertedSensorData);
  5171  16B5  3038               	movlw	low main@convertedSensorData
  5172  16B6  00AA               	movwf	strcat@src
  5173  16B7  3001               	movlw	high main@convertedSensorData
  5174  16B8  00AB               	movwf	strcat@src+1
  5175  16B9  087C               	movf	_messages+1,w
  5176  16BA  3199  21F2  3196   	fcall	_strcat
  5177                           
  5178                           ;main.c: 846:             IntToHexString(crc16(messages, 2), checksum);
  5179  16BD  3002               	movlw	2
  5180  16BE  00A5               	movwf	crc16@segments
  5181  16BF  3000               	movlw	0
  5182  16C0  00A6               	movwf	crc16@segments+1
  5183  16C1  307B               	movlw	(low (_messages| 0))& (0+255)
  5184  16C2  3192  2272  3196   	fcall	_crc16
  5185  16C5  0826               	movf	?_crc16+1,w
  5186  16C6  00B5               	movwf	IntToHexString@n+1
  5187  16C7  0825               	movf	?_crc16,w
  5188  16C8  00B4               	movwf	IntToHexString@n
  5189  16C9  30D5               	movlw	(low (_checksum| (0+256)))& (0+255)
  5190  16CA  0022               	movlb	2	; select bank2
  5191  16CB  00B6               	movwf	??_main^(0+256)
  5192  16CC  0836               	movf	??_main^(0+256),w
  5193  16CD  0020               	movlb	0	; select bank0
  5194  16CE  00B6               	movwf	IntToHexString@dest
  5195  16CF  3191  2137  3196   	fcall	_IntToHexString
  5196                           
  5197                           ;main.c: 847:             strcat(messages[1], checksum);
  5198  16D2  30D5               	movlw	low _checksum
  5199  16D3  00AA               	movwf	strcat@src
  5200  16D4  3001               	movlw	high _checksum
  5201  16D5  00AB               	movwf	strcat@src+1
  5202  16D6  087C               	movf	_messages+1,w
  5203  16D7  3199  21F2  3196   	fcall	_strcat
  5204                           
  5205                           ;main.c: 849:             id++;
  5206  16DA  3001               	movlw	1
  5207  16DB  0023               	movlb	3	; select bank3
  5208  16DC  07D3               	addwf	_id^(0+384),f
  5209  16DD  3000               	movlw	0
  5210  16DE  3DD4               	addwfc	(_id+1)^(0+384),f
  5211  16DF  0022               	movlb	2	; select bank2
  5212  16E0  150C               	bsf	12,2	;volatile
  5213                           
  5214                           ;main.c: 852:             TransmitString(messages[0]);
  5215  16E1  087B               	movf	_messages,w
  5216  16E2  319C  242C  3196   	fcall	_TransmitString
  5217                           
  5218                           ;main.c: 853:             TransmitString(messages[1]);
  5219  16E5  087C               	movf	_messages+1,w
  5220  16E6  319C  242C  3196   	fcall	_TransmitString
  5221  16E9  0022               	movlb	2	; select bank2
  5222  16EA  110C               	bcf	12,2	;volatile
  5223  16EB  2EEF               	goto	l5850
  5224  16EC                     l5848:	
  5225                           
  5226                           ;main.c: 859:         {;main.c: 861:             FlashError();
  5227  16EC  319B  23D4  3196   	fcall	_FlashError
  5228  16EF                     l5850:	
  5229                           
  5230                           ;main.c: 864:         for (int i = 0; i < 1000; i++)
  5231  16EF  0022               	movlb	2	; select bank2
  5232  16F0  01C9               	clrf	main@i^(0+256)
  5233  16F1  01CA               	clrf	(main@i+1)^(0+256)
  5234  16F2                     l5856:	
  5235                           
  5236                           ;main.c: 865:         {;main.c: 866:             _delay((unsigned long)((5)*(4000000/400
      +                          0.0)));
  5237  16F2  3007               	movlw	7
  5238  16F3  0022               	movlb	2	; select bank2
  5239  16F4  00B6               	movwf	??_main^(0+256)
  5240  16F5  307D               	movlw	125
  5241  16F6                     u6367:	
  5242  16F6  0B89               	decfsz	9,f
  5243  16F7  2EF6               	goto	u6367
  5244  16F8  0BB6               	decfsz	??_main^(0+256),f
  5245  16F9  2EF6               	goto	u6367
  5246                           
  5247                           ;main.c: 867:         }
  5248  16FA  3001               	movlw	1
  5249  16FB  0022               	movlb	2	; select bank2
  5250  16FC  07C9               	addwf	main@i^(0+256),f
  5251  16FD  3000               	movlw	0
  5252  16FE  3DCA               	addwfc	(main@i+1)^(0+256),f
  5253  16FF  084A               	movf	(main@i+1)^(0+256),w
  5254  1700  3A80               	xorlw	128
  5255  1701  00B6               	movwf	??_main^(0+256)
  5256  1702  3083               	movlw	131
  5257  1703  0236               	subwf	??_main^(0+256),w
  5258  1704  1D03               	skipz
  5259  1705  2F08               	goto	u6355
  5260  1706  30E8               	movlw	232
  5261  1707  0249               	subwf	main@i^(0+256),w
  5262  1708                     u6355:	
  5263  1708  1803               	btfsc	3,0
  5264  1709  2E67               	goto	l5818
  5265  170A  2EF2               	goto	l5856
  5266  170B                     __end_of_main:	
  5267                           
  5268                           	psect	text1
  5269  19F2                     __ptext1:	
  5270 ;; *************** function _strcat *****************
  5271 ;; Defined at:
  5272 ;;		line 3 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strcat.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  dest            1    wreg     PTR unsigned char 
  5275 ;;		 -> message_end(73), message_start(70), 
  5276 ;;  src             2   10[BANK0 ] PTR const unsigned char 
  5277 ;;		 -> checksum(6), STR_11(2), main@convertedSensorData(16), 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  dest            1    8[COMMON] PTR unsigned char 
  5280 ;;		 -> message_end(73), message_start(70), 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      PTR unsigned char 
  5283 ;; Registers used:
  5284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 1F/0
  5287 ;;		On exit  : 1F/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5290 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;Total ram usage:        5 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    4
  5297 ;; This function calls:
  5298 ;;		_strcpy
  5299 ;;		_strlen
  5300 ;; This function is called by:
  5301 ;;		_main
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function _strcat
  5307  19F2                     _strcat:	
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5311                           ;strcat@dest stored from wreg
  5312  19F2  00F8               	movwf	strcat@dest
  5313  19F3  082B               	movf	strcat@src+1,w
  5314  19F4  00A3               	movwf	strcpy@src+1
  5315  19F5  082A               	movf	strcat@src,w
  5316  19F6  00A2               	movwf	strcpy@src
  5317  19F7  0878               	movf	strcat@dest,w
  5318  19F8  00F5               	movwf	strlen@s
  5319  19F9  3003               	movlw	3
  5320  19FA  00F6               	movwf	strlen@s+1
  5321  19FB  319A  2207  3199   	fcall	_strlen
  5322  19FE  0875               	movf	?_strlen,w
  5323  19FF  00AC               	movwf	??_strcat
  5324  1A00  0876               	movf	?_strlen+1,w
  5325  1A01  00AD               	movwf	??_strcat+1
  5326  1A02  0878               	movf	strcat@dest,w
  5327  1A03  072C               	addwf	??_strcat,w
  5328  1A04  319A  2257         	fcall	_strcpy
  5329  1A06  0008               	return
  5330  1A07                     __end_of_strcat:	
  5331                           
  5332                           	psect	text2
  5333  1A57                     __ptext2:	
  5334 ;; *************** function _strcpy *****************
  5335 ;; Defined at:
  5336 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strcpy.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  dest            1    wreg     PTR unsigned char 
  5339 ;;		 -> message_end(73), message_start(70), 
  5340 ;;  src             2    2[BANK0 ] PTR const unsigned char 
  5341 ;;		 -> checksum(6), STR_11(2), main@convertedSensorData(16), 
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;  dest            1    9[BANK0 ] PTR unsigned char 
  5344 ;;		 -> message_end(73), message_start(70), 
  5345 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  5346 ;;		 -> checksum(6), STR_11(2), main@convertedSensorData(16), 
  5347 ;;  d               1    8[BANK0 ] PTR unsigned char 
  5348 ;;		 -> message_end(73), message_start(70), 
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      PTR unsigned char 
  5351 ;; Registers used:
  5352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5353 ;; Tracked objects:
  5354 ;;		On entry : 1F/0
  5355 ;;		On exit  : 1F/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5358 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;Total ram usage:        8 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    3
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_strcat
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           
  5373                           ;psect for function _strcpy
  5374  1A57                     _strcpy:	
  5375                           
  5376                           ;incstack = 0
  5377                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  5378                           ;strcpy@dest stored from wreg
  5379  1A57  00A9               	movwf	strcpy@dest
  5380  1A58  0823               	movf	strcpy@src+1,w
  5381  1A59  00A7               	movwf	strcpy@s+1
  5382  1A5A  0822               	movf	strcpy@src,w
  5383  1A5B  00A6               	movwf	strcpy@s
  5384  1A5C  0829               	movf	strcpy@dest,w
  5385  1A5D  00A4               	movwf	??_strcpy
  5386  1A5E  0824               	movf	??_strcpy,w
  5387  1A5F  00A8               	movwf	strcpy@d
  5388  1A60                     l5338:	
  5389  1A60  0828               	movf	strcpy@d,w
  5390  1A61  0086               	movwf	6
  5391  1A62  3003               	movlw	3	; select bank6/7
  5392  1A63  0087               	movwf	7
  5393  1A64  0AA8               	incf	strcpy@d,f
  5394  1A65  0827               	movf	strcpy@s+1,w
  5395  1A66  00A5               	movwf	??_strcpy+1
  5396  1A67  0826               	movf	strcpy@s,w
  5397  1A68  00A4               	movwf	??_strcpy
  5398  1A69  0AA6               	incf	strcpy@s,f
  5399  1A6A  1903               	skipnz
  5400  1A6B  0AA7               	incf	strcpy@s+1,f
  5401  1A6C  0824               	movf	??_strcpy,w
  5402  1A6D  0084               	movwf	4
  5403  1A6E  0825               	movf	??_strcpy+1,w
  5404  1A6F  0085               	movwf	5
  5405  1A70  0800               	movf	0,w	;code access
  5406  1A71  3FC0               	movwi [0]fsr1
  5407  1A72  0889               	movf	9,f
  5408  1A73  1903               	btfsc	3,2
  5409  1A74  0008               	return
  5410  1A75  2A60               	goto	l5338
  5411  1A76                     __end_of_strcpy:	
  5412                           
  5413                           	psect	text3
  5414  1272                     __ptext3:	
  5415 ;; *************** function _crc16 *****************
  5416 ;; Defined at:
  5417 ;;		line 295 in file "main.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;  data            1    wreg     PTR PTR unsigned char 
  5420 ;;		 -> messages(2), 
  5421 ;;  segments        2    5[BANK0 ] int 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  data            1   11[BANK0 ] PTR PTR unsigned char 
  5424 ;;		 -> messages(2), 
  5425 ;;  len             2    9[BANK0 ] unsigned int 
  5426 ;;  string          1   17[BANK0 ] PTR unsigned char 
  5427 ;;		 -> message_end(73), message_start(70), 
  5428 ;;  str             2   15[BANK0 ] int 
  5429 ;;  i               2   18[BANK0 ] unsigned int 
  5430 ;;  crc             2   13[BANK0 ] unsigned short 
  5431 ;;  c               1   12[BANK0 ] unsigned char 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  2    5[BANK0 ] unsigned short 
  5434 ;; Registers used:
  5435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5436 ;; Tracked objects:
  5437 ;;		On entry : 1F/0
  5438 ;;		On exit  : 1F/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5441 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;Total ram usage:       15 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    4
  5448 ;; This function calls:
  5449 ;;		_crc_append_byte
  5450 ;;		_strlen
  5451 ;; This function is called by:
  5452 ;;		_main
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           
  5457                           ;psect for function _crc16
  5458  1272                     _crc16:	
  5459                           
  5460                           ;incstack = 0
  5461                           ; Regs used in _crc16: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5462                           ;crc16@data stored from wreg
  5463  1272  00AB               	movwf	crc16@data
  5464                           
  5465                           ;main.c: 295: unsigned short crc16(char** data, int segments);main.c: 296: {;main.c: 297
      +                          :     size_t i;;main.c: 298:  uint16_t crc;;main.c: 299:  uint8_t c;;main.c: 301:  crc =
      +                           0xFFFF;
  5466  1273  30FF               	movlw	255
  5467  1274  00AD               	movwf	crc16@crc
  5468  1275  30FF               	movlw	255
  5469  1276  00AE               	movwf	crc16@crc+1
  5470                           
  5471                           ;main.c: 303:     for (int str = 0; str < segments; str++)
  5472  1277  01AF               	clrf	crc16@str
  5473  1278  01B0               	clrf	crc16@str+1
  5474  1279                     l723:	
  5475  1279  0830               	movf	crc16@str+1,w
  5476  127A  3A80               	xorlw	128
  5477  127B  00A7               	movwf	??_crc16
  5478  127C  0826               	movf	crc16@segments+1,w
  5479  127D  3A80               	xorlw	128
  5480  127E  0227               	subwf	??_crc16,w
  5481  127F  1D03               	skipz
  5482  1280  2A83               	goto	u6015
  5483  1281  0825               	movf	crc16@segments,w
  5484  1282  022F               	subwf	crc16@str,w
  5485  1283                     u6015:	
  5486  1283  1803               	btfsc	3,0
  5487  1284  2ADA               	goto	l5592
  5488                           
  5489                           ;main.c: 304:     {;main.c: 305:         char* string = data[str];
  5490  1285  0020               	movlb	0	; select bank0
  5491  1286  082F               	movf	crc16@str,w
  5492  1287  072B               	addwf	crc16@data,w
  5493  1288  00A7               	movwf	??_crc16
  5494  1289  0827               	movf	??_crc16,w
  5495  128A  0086               	movwf	6
  5496  128B  0187               	clrf	7
  5497  128C  0801               	movf	1,w
  5498  128D  00A8               	movwf	??_crc16+1
  5499  128E  0828               	movf	??_crc16+1,w
  5500  128F  00B1               	movwf	crc16@string
  5501                           
  5502                           ;main.c: 306:         size_t len = strlen(string);
  5503  1290  0831               	movf	crc16@string,w
  5504  1291  00F5               	movwf	strlen@s
  5505  1292  3003               	movlw	3
  5506  1293  00F6               	movwf	strlen@s+1
  5507  1294  319A  2207  3192   	fcall	_strlen
  5508  1297  0876               	movf	?_strlen+1,w
  5509  1298  00AA               	movwf	crc16@len+1
  5510  1299  0875               	movf	?_strlen,w
  5511  129A  00A9               	movwf	crc16@len
  5512                           
  5513                           ;main.c: 308:         for (i = (string[i] == '$' ? 2 : 0); i < len; i++)
  5514  129B  0832               	movf	crc16@i,w
  5515  129C  0731               	addwf	crc16@string,w
  5516  129D  00A7               	movwf	??_crc16
  5517  129E  0827               	movf	??_crc16,w
  5518  129F  0086               	movwf	6
  5519  12A0  3003               	movlw	3	; select bank6/7
  5520  12A1  0087               	movwf	7
  5521  12A2  3024               	movlw	36
  5522  12A3  0601               	xorwf	1,w
  5523  12A4  1903               	btfsc	3,2
  5524  12A5  2AA9               	goto	l5580
  5525  12A6  01B2               	clrf	crc16@i
  5526  12A7  01B3               	clrf	crc16@i+1
  5527  12A8  2AAD               	goto	l5588
  5528  12A9                     l5580:	
  5529  12A9  3002               	movlw	2
  5530  12AA  00B2               	movwf	crc16@i
  5531  12AB  3000               	movlw	0
  5532  12AC  00B3               	movwf	crc16@i+1
  5533  12AD                     l5588:	
  5534  12AD  082A               	movf	crc16@len+1,w
  5535  12AE  0233               	subwf	crc16@i+1,w
  5536  12AF  1D03               	skipz
  5537  12B0  2AB3               	goto	u6005
  5538  12B1  0829               	movf	crc16@len,w
  5539  12B2  0232               	subwf	crc16@i,w
  5540  12B3                     u6005:	
  5541  12B3  1803               	btfsc	3,0
  5542  12B4  2AD5               	goto	l5590
  5543                           
  5544                           ;main.c: 309:         {;main.c: 310:             c = string[i];
  5545  12B5  0832               	movf	crc16@i,w
  5546  12B6  0731               	addwf	crc16@string,w
  5547  12B7  00A7               	movwf	??_crc16
  5548  12B8  0827               	movf	??_crc16,w
  5549  12B9  0086               	movwf	6
  5550  12BA  3003               	movlw	3	; select bank6/7
  5551  12BB  0087               	movwf	7
  5552  12BC  0801               	movf	1,w
  5553  12BD  00A8               	movwf	??_crc16+1
  5554  12BE  0828               	movf	??_crc16+1,w
  5555  12BF  00AC               	movwf	crc16@c
  5556                           
  5557                           ;main.c: 311:             crc = crc_append_byte(crc, c);
  5558  12C0  082E               	movf	crc16@crc+1,w
  5559  12C1  00F6               	movwf	crc_append_byte@crc+1
  5560  12C2  082D               	movf	crc16@crc,w
  5561  12C3  00F5               	movwf	crc_append_byte@crc
  5562  12C4  082C               	movf	crc16@c,w
  5563  12C5  00A7               	movwf	??_crc16
  5564  12C6  0827               	movf	??_crc16,w
  5565  12C7  00F7               	movwf	crc_append_byte@data
  5566  12C8  3188  2000  3192   	fcall	_crc_append_byte
  5567  12CB  0876               	movf	?_crc_append_byte+1,w
  5568  12CC  0020               	movlb	0	; select bank0
  5569  12CD  00AE               	movwf	crc16@crc+1
  5570  12CE  0875               	movf	?_crc_append_byte,w
  5571  12CF  00AD               	movwf	crc16@crc
  5572                           
  5573                           ;main.c: 312:         }
  5574  12D0  3001               	movlw	1
  5575  12D1  07B2               	addwf	crc16@i,f
  5576  12D2  3000               	movlw	0
  5577  12D3  3DB3               	addwfc	crc16@i+1,f
  5578  12D4  2AAD               	goto	l5588
  5579  12D5                     l5590:	
  5580                           
  5581                           ;main.c: 313:     }
  5582  12D5  3001               	movlw	1
  5583  12D6  07AF               	addwf	crc16@str,f
  5584  12D7  3000               	movlw	0
  5585  12D8  3DB0               	addwfc	crc16@str+1,f
  5586  12D9  2A79               	goto	l723
  5587  12DA                     l5592:	
  5588                           
  5589                           ;main.c: 314:  return crc;
  5590  12DA  0020               	movlb	0	; select bank0
  5591  12DB  082E               	movf	crc16@crc+1,w
  5592  12DC  00A6               	movwf	?_crc16+1
  5593  12DD  082D               	movf	crc16@crc,w
  5594  12DE  00A5               	movwf	?_crc16
  5595  12DF  0008               	return
  5596  12E0                     __end_of_crc16:	
  5597                           
  5598                           	psect	text4
  5599  0800                     __ptext4:	
  5600 ;; *************** function _crc_append_byte *****************
  5601 ;; Defined at:
  5602 ;;		line 275 in file "main.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  crc             2    5[COMMON] unsigned short 
  5605 ;;  data            1    7[COMMON] unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  i               2    3[BANK0 ] int 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  2    5[COMMON] unsigned short 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0
  5612 ;; Tracked objects:
  5613 ;;		On entry : 1F/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5617 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5621 ;;Total ram usage:        8 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    3
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_crc16
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _crc_append_byte
  5633  0800                     _crc_append_byte:	
  5634                           
  5635                           ;main.c: 275: unsigned short crc_append_byte(uint16_t crc, uint8_t data);main.c: 276: {;
      +                          main.c: 277:     int i;;main.c: 278:     crc = crc ^ ((uint16_t)data << 8);
  5636                           
  5637                           ;incstack = 0
  5638                           ; Regs used in _crc_append_byte: [wreg+status,2+status,0]
  5639  0800  0877               	movf	crc_append_byte@data,w
  5640  0801  00A0               	movwf	??_crc_append_byte
  5641  0802  01A1               	clrf	??_crc_append_byte+1
  5642  0803  0820               	movf	??_crc_append_byte,w
  5643  0804  00A1               	movwf	??_crc_append_byte+1
  5644  0805  01A0               	clrf	??_crc_append_byte
  5645  0806  0875               	movf	crc_append_byte@crc,w
  5646  0807  0620               	xorwf	??_crc_append_byte,w
  5647  0808  00F5               	movwf	crc_append_byte@crc
  5648  0809  0876               	movf	crc_append_byte@crc+1,w
  5649  080A  0621               	xorwf	??_crc_append_byte+1,w
  5650  080B  00F6               	movwf	crc_append_byte@crc+1
  5651                           
  5652                           ;main.c: 279:     for (i = 0; i < 8; i++)
  5653  080C  01A3               	clrf	crc_append_byte@i
  5654  080D  01A4               	clrf	crc_append_byte@i+1
  5655  080E                     l716:	
  5656                           
  5657                           ;main.c: 280:     {;main.c: 281:         if (crc & 0x8000)
  5658  080E  1FF6               	btfss	crc_append_byte@crc+1,7
  5659  080F  281E               	goto	l5236
  5660                           
  5661                           ;main.c: 282:         {;main.c: 283:             crc = (crc << 1) ^ 0x1021;
  5662  0810  0876               	movf	crc_append_byte@crc+1,w
  5663  0811  0020               	movlb	0	; select bank0
  5664  0812  00A1               	movwf	??_crc_append_byte+1
  5665  0813  0875               	movf	crc_append_byte@crc,w
  5666  0814  00A0               	movwf	??_crc_append_byte
  5667  0815  35A0               	lslf	??_crc_append_byte,f
  5668  0816  0DA1               	rlf	??_crc_append_byte+1,f
  5669  0817  3021               	movlw	33
  5670  0818  0620               	xorwf	??_crc_append_byte,w
  5671  0819  00F5               	movwf	crc_append_byte@crc
  5672  081A  3010               	movlw	16
  5673  081B  0621               	xorwf	??_crc_append_byte+1,w
  5674  081C  00F6               	movwf	crc_append_byte@crc+1
  5675                           
  5676                           ;main.c: 284:         }
  5677  081D  2823               	goto	l719
  5678  081E                     l5236:	
  5679                           
  5680                           ;main.c: 286:         {;main.c: 287:             crc <<= 1;
  5681  081E  3001               	movlw	1
  5682  081F                     u5555:	
  5683  081F  35F5               	lslf	crc_append_byte@crc,f
  5684  0820  0DF6               	rlf	crc_append_byte@crc+1,f
  5685  0821  0B89               	decfsz	9,f
  5686  0822  281F               	goto	u5555
  5687  0823                     l719:	
  5688                           ;main.c: 288:         }
  5689                           
  5690                           
  5691                           ;main.c: 289:     }
  5692  0823  3001               	movlw	1
  5693  0824  0020               	movlb	0	; select bank0
  5694  0825  07A3               	addwf	crc_append_byte@i,f
  5695  0826  3000               	movlw	0
  5696  0827  3DA4               	addwfc	crc_append_byte@i+1,f
  5697  0828  0824               	movf	crc_append_byte@i+1,w
  5698  0829  3A80               	xorlw	128
  5699  082A  00A0               	movwf	??_crc_append_byte
  5700  082B  3080               	movlw	128
  5701  082C  0220               	subwf	??_crc_append_byte,w
  5702  082D  3008               	movlw	8
  5703  082E  1903               	btfsc	3,2
  5704  082F  0223               	subwf	crc_append_byte@i,w
  5705  0830  1803               	btfsc	3,0
  5706  0831  0008               	return
  5707  0832  280E               	goto	l716
  5708  0833                     __end_of_crc_append_byte:	
  5709                           ;main.c: 291:     return crc;
  5710                           
  5711                           
  5712                           	psect	text5
  5713  119E                     __ptext5:	
  5714 ;; *************** function _bme280_init *****************
  5715 ;; Defined at:
  5716 ;;		line 357 in file "BME280_driver/bme280.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;  dev             1    wreg     PTR struct bme280_dev
  5719 ;;		 -> main@env_sensor(51), 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  dev             1   69[BANK0 ] PTR struct bme280_dev
  5722 ;;		 -> main@env_sensor(51), 
  5723 ;;  rslt            1   68[BANK0 ] char 
  5724 ;;  chip_id         1   67[BANK0 ] unsigned char 
  5725 ;;  try_count       1   66[BANK0 ] unsigned char 
  5726 ;; Return value:  Size  Location     Type
  5727 ;;                  1    wreg      char 
  5728 ;; Registers used:
  5729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5730 ;; Tracked objects:
  5731 ;;		On entry : 1F/3
  5732 ;;		On exit  : 1F/0
  5733 ;;		Unchanged: 0/0
  5734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5736 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;Total ram usage:        6 bytes
  5740 ;; Hardware stack levels used:    1
  5741 ;; Hardware stack levels required when called:    9
  5742 ;; This function calls:
  5743 ;;		_Sleep
  5744 ;;		_bme280_get_regs
  5745 ;;		_bme280_soft_reset
  5746 ;;		_get_calib_data
  5747 ;;		_null_ptr_check
  5748 ;; This function is called by:
  5749 ;;		_main
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           
  5754                           ;psect for function _bme280_init
  5755  119E                     _bme280_init:	
  5756                           
  5757                           ;incstack = 0
  5758                           ; Regs used in _bme280_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5759                           ;bme280_init@dev stored from wreg
  5760  119E  0020               	movlb	0	; select bank0
  5761  119F  00E5               	movwf	bme280_init@dev
  5762                           
  5763                           ;BME280_driver/bme280.c: 357: int8_t bme280_init(struct bme280_dev *dev);BME280_driver/b
      +                          me280.c: 358: {;BME280_driver/bme280.c: 359:     int8_t rslt;;BME280_driver/bme280.c: 36
      +                          2:     uint8_t try_count = 5;
  5764  11A0  3005               	movlw	5
  5765  11A1  00E0               	movwf	??_bme280_init
  5766  11A2  0860               	movf	??_bme280_init,w
  5767  11A3  00E2               	movwf	bme280_init@try_count
  5768                           
  5769                           ;BME280_driver/bme280.c: 363:     uint8_t chip_id = 0;
  5770  11A4  01E3               	clrf	bme280_init@chip_id
  5771                           
  5772                           ;BME280_driver/bme280.c: 366:     rslt = null_ptr_check(dev);
  5773  11A5  0865               	movf	bme280_init@dev,w
  5774  11A6  319A  22BB  3191   	fcall	_null_ptr_check
  5775  11A9  0020               	movlb	0	; select bank0
  5776  11AA  00E0               	movwf	??_bme280_init
  5777  11AB  0860               	movf	??_bme280_init,w
  5778  11AC  00E4               	movwf	bme280_init@rslt
  5779                           
  5780                           ;BME280_driver/bme280.c: 369:     if (rslt == 0)
  5781  11AD  0864               	movf	bme280_init@rslt,w
  5782  11AE  1903               	btfsc	3,2
  5783  11AF  29F9               	goto	l5368
  5784  11B0  2A03               	goto	l53
  5785  11B1                     l5350:	
  5786                           
  5787                           ;BME280_driver/bme280.c: 372:         {;BME280_driver/bme280.c: 374:             rslt = 
      +                          bme280_get_regs(0xD0, &chip_id, 1, dev);
  5788  11B1  3063               	movlw	low bme280_init@chip_id
  5789  11B2  00B8               	movwf	bme280_get_regs@reg_data
  5790  11B3  3000               	movlw	high bme280_init@chip_id
  5791  11B4  00B9               	movwf	bme280_get_regs@reg_data+1
  5792  11B5  3001               	movlw	1
  5793  11B6  00BA               	movwf	bme280_get_regs@len
  5794  11B7  3000               	movlw	0
  5795  11B8  00BB               	movwf	bme280_get_regs@len+1
  5796  11B9  0865               	movf	bme280_init@dev,w
  5797  11BA  00E0               	movwf	??_bme280_init
  5798  11BB  0860               	movf	??_bme280_init,w
  5799  11BC  00BC               	movwf	bme280_get_regs@dev
  5800  11BD  30D0               	movlw	208
  5801  11BE  319D  25CC  3191   	fcall	_bme280_get_regs
  5802  11C1  00E1               	movwf	??_bme280_init+1
  5803  11C2  0861               	movf	??_bme280_init+1,w
  5804  11C3  00E4               	movwf	bme280_init@rslt
  5805                           
  5806                           ;BME280_driver/bme280.c: 377:             if ((rslt == 0) && (chip_id == 0x60))
  5807  11C4  0864               	movf	bme280_init@rslt,w
  5808  11C5  1D03               	btfss	3,2
  5809  11C6  29E5               	goto	l5364
  5810  11C7  3060               	movlw	96
  5811  11C8  0663               	xorwf	bme280_init@chip_id,w
  5812  11C9  1D03               	btfss	3,2
  5813  11CA  29E5               	goto	l5364
  5814                           
  5815                           ;BME280_driver/bme280.c: 378:             {;BME280_driver/bme280.c: 379:                
      +                           dev->chip_id = chip_id;
  5816  11CB  0863               	movf	bme280_init@chip_id,w
  5817  11CC  00E0               	movwf	??_bme280_init
  5818  11CD  0865               	movf	bme280_init@dev,w
  5819  11CE  0086               	movwf	6
  5820  11CF  3001               	movlw	1	; select bank2/3
  5821  11D0  0087               	movwf	7
  5822  11D1  0860               	movf	??_bme280_init,w
  5823  11D2  0081               	movwf	1
  5824                           
  5825                           ;BME280_driver/bme280.c: 382:                 rslt = bme280_soft_reset(dev);
  5826  11D3  0865               	movf	bme280_init@dev,w
  5827  11D4  319D  251E  3191   	fcall	_bme280_soft_reset
  5828  11D7  00E0               	movwf	??_bme280_init
  5829  11D8  0860               	movf	??_bme280_init,w
  5830  11D9  00E4               	movwf	bme280_init@rslt
  5831                           
  5832                           ;BME280_driver/bme280.c: 383:                 if (rslt == 0)
  5833  11DA  0864               	movf	bme280_init@rslt,w
  5834  11DB  1D03               	btfss	3,2
  5835  11DC  29FC               	goto	l5370
  5836                           
  5837                           ;BME280_driver/bme280.c: 384:                 {;BME280_driver/bme280.c: 386:            
      +                                   rslt = get_calib_data(dev);
  5838  11DD  0865               	movf	bme280_init@dev,w
  5839  11DE  319F  276E  3191   	fcall	_get_calib_data
  5840  11E1  00E0               	movwf	??_bme280_init
  5841  11E2  0860               	movf	??_bme280_init,w
  5842  11E3  00E4               	movwf	bme280_init@rslt
  5843  11E4  29FC               	goto	l5370
  5844  11E5                     l5364:	
  5845                           
  5846                           ;BME280_driver/bme280.c: 392:             dev->delay_ms(1);
  5847  11E5  3000               	movlw	0
  5848  11E6  00F8               	movwf	Sleep@ms+3
  5849  11E7  3000               	movlw	0
  5850  11E8  00F7               	movwf	Sleep@ms+2
  5851  11E9  3000               	movlw	0
  5852  11EA  00F6               	movwf	Sleep@ms+1
  5853  11EB  3001               	movlw	1
  5854  11EC  00F5               	movwf	Sleep@ms
  5855  11ED  0865               	movf	bme280_init@dev,w
  5856  11EE  3E07               	addlw	7
  5857  11EF  0086               	movwf	6
  5858  11F0  3001               	movlw	1	; select bank2/3
  5859  11F1  0087               	movwf	7
  5860  11F2  3F41               	moviw [1]fsr1
  5861  11F3  008A               	movwf	10
  5862  11F4  3F40               	moviw [0]fsr1
  5863  11F5  000A               	callw
  5864  11F6  3191               	pagesel	$
  5865                           
  5866                           ;BME280_driver/bme280.c: 393:             --try_count;
  5867  11F7  3001               	movlw	1
  5868  11F8  02E2               	subwf	bme280_init@try_count,f
  5869  11F9                     l5368:	
  5870                           
  5871                           ;BME280_driver/bme280.c: 371:         while (try_count)
  5872  11F9  0862               	movf	bme280_init@try_count,w
  5873  11FA  1D03               	btfss	3,2
  5874  11FB  29B1               	goto	l5350
  5875  11FC                     l5370:	
  5876                           
  5877                           ;BME280_driver/bme280.c: 397:         if (!try_count)
  5878  11FC  0862               	movf	bme280_init@try_count,w
  5879  11FD  1D03               	btfss	3,2
  5880  11FE  2A03               	goto	l53
  5881                           
  5882                           ;BME280_driver/bme280.c: 398:         {;BME280_driver/bme280.c: 399:             rslt = 
      +                          -2;
  5883  11FF  30FE               	movlw	254
  5884  1200  00E0               	movwf	??_bme280_init
  5885  1201  0860               	movf	??_bme280_init,w
  5886  1202  00E4               	movwf	bme280_init@rslt
  5887  1203                     l53:	
  5888                           ;BME280_driver/bme280.c: 401:     }
  5889                           
  5890                           
  5891                           ;BME280_driver/bme280.c: 403:     return rslt;
  5892  1203  0864               	movf	bme280_init@rslt,w
  5893  1204  0008               	return
  5894  1205                     __end_of_bme280_init:	
  5895                           
  5896                           	psect	text6
  5897  1F6E                     __ptext6:	
  5898 ;; *************** function _get_calib_data *****************
  5899 ;; Defined at:
  5900 ;;		line 1307 in file "BME280_driver/bme280.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;  dev             1    wreg     PTR struct bme280_dev
  5903 ;;		 -> main@env_sensor(51), 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  dev             1   63[BANK0 ] PTR struct bme280_dev
  5906 ;;		 -> main@env_sensor(51), 
  5907 ;;  calib_data     26   35[BANK0 ] unsigned char [26]
  5908 ;;  rslt            1   62[BANK0 ] char 
  5909 ;;  reg_addr        1    0        unsigned char 
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      char 
  5912 ;; Registers used:
  5913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 1F/0
  5916 ;;		On exit  : 1F/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5923 ;;Total ram usage:       31 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    8
  5926 ;; This function calls:
  5927 ;;		_bme280_get_regs
  5928 ;;		_parse_humidity_calib_data
  5929 ;;		_parse_temp_press_calib_data
  5930 ;; This function is called by:
  5931 ;;		_bme280_init
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           
  5936                           ;psect for function _get_calib_data
  5937  1F6E                     _get_calib_data:	
  5938                           
  5939                           ;incstack = 0
  5940                           ; Regs used in _get_calib_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5941                           ;get_calib_data@dev stored from wreg
  5942  1F6E  00DF               	movwf	get_calib_data@dev
  5943                           
  5944                           ;BME280_driver/bme280.c: 1313:     uint8_t calib_data[26] = { 0 };
  5945  1F6F  3043               	movlw	low get_calib_data@calib_data
  5946  1F70  0086               	movwf	6
  5947  1F71  3000               	movlw	high get_calib_data@calib_data
  5948  1F72  0087               	movwf	7
  5949  1F73  301A               	movlw	26
  5950  1F74  00C1               	movwf	??_get_calib_data
  5951  1F75  3000               	movlw	0
  5952  1F76                     u5250:	
  5953  1F76  001E               	movwi fsr1++
  5954  1F77  0BC1               	decfsz	??_get_calib_data,f
  5955  1F78  2F76               	goto	u5250
  5956                           
  5957                           ;BME280_driver/bme280.c: 1316:     rslt = bme280_get_regs(reg_addr, calib_data, 26, dev)
      +                          ;
  5958  1F79  3043               	movlw	low get_calib_data@calib_data
  5959  1F7A  00B8               	movwf	bme280_get_regs@reg_data
  5960  1F7B  3000               	movlw	high get_calib_data@calib_data
  5961  1F7C  00B9               	movwf	bme280_get_regs@reg_data+1
  5962  1F7D  301A               	movlw	26
  5963  1F7E  00BA               	movwf	bme280_get_regs@len
  5964  1F7F  3000               	movlw	0
  5965  1F80  00BB               	movwf	bme280_get_regs@len+1
  5966  1F81  085F               	movf	get_calib_data@dev,w
  5967  1F82  00C1               	movwf	??_get_calib_data
  5968  1F83  0841               	movf	??_get_calib_data,w
  5969  1F84  00BC               	movwf	bme280_get_regs@dev
  5970  1F85  3088               	movlw	136
  5971  1F86  319D  25CC  319F   	fcall	_bme280_get_regs
  5972  1F89  00C2               	movwf	??_get_calib_data+1
  5973  1F8A  0842               	movf	??_get_calib_data+1,w
  5974  1F8B  00DE               	movwf	get_calib_data@rslt
  5975                           
  5976                           ;BME280_driver/bme280.c: 1317:     if (rslt == 0)
  5977  1F8C  085E               	movf	get_calib_data@rslt,w
  5978  1F8D  1D03               	btfss	3,2
  5979  1F8E  2FB4               	goto	l5034
  5980                           
  5981                           ;BME280_driver/bme280.c: 1318:     {;BME280_driver/bme280.c: 1322:         parse_temp_pr
      +                          ess_calib_data(calib_data, dev);
  5982  1F8F  085F               	movf	get_calib_data@dev,w
  5983  1F90  00C1               	movwf	??_get_calib_data
  5984  1F91  0841               	movf	??_get_calib_data,w
  5985  1F92  00F5               	movwf	parse_temp_press_calib_data@dev
  5986  1F93  3043               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  5987  1F94  3186  26A0  319F   	fcall	_parse_temp_press_calib_data
  5988                           
  5989                           ;BME280_driver/bme280.c: 1326:         rslt = bme280_get_regs(reg_addr, calib_data, 7, d
      +                          ev);
  5990  1F97  3043               	movlw	low get_calib_data@calib_data
  5991  1F98  00B8               	movwf	bme280_get_regs@reg_data
  5992  1F99  3000               	movlw	high get_calib_data@calib_data
  5993  1F9A  00B9               	movwf	bme280_get_regs@reg_data+1
  5994  1F9B  3007               	movlw	7
  5995  1F9C  00BA               	movwf	bme280_get_regs@len
  5996  1F9D  3000               	movlw	0
  5997  1F9E  00BB               	movwf	bme280_get_regs@len+1
  5998  1F9F  085F               	movf	get_calib_data@dev,w
  5999  1FA0  00C1               	movwf	??_get_calib_data
  6000  1FA1  0841               	movf	??_get_calib_data,w
  6001  1FA2  00BC               	movwf	bme280_get_regs@dev
  6002  1FA3  30E1               	movlw	225
  6003  1FA4  319D  25CC  319F   	fcall	_bme280_get_regs
  6004  1FA7  00C2               	movwf	??_get_calib_data+1
  6005  1FA8  0842               	movf	??_get_calib_data+1,w
  6006  1FA9  00DE               	movwf	get_calib_data@rslt
  6007                           
  6008                           ;BME280_driver/bme280.c: 1327:         if (rslt == 0)
  6009  1FAA  085E               	movf	get_calib_data@rslt,w
  6010  1FAB  1D03               	btfss	3,2
  6011  1FAC  2FB4               	goto	l5034
  6012                           
  6013                           ;BME280_driver/bme280.c: 1328:         {;BME280_driver/bme280.c: 1332:             parse
      +                          _humidity_calib_data(calib_data, dev);
  6014  1FAD  085F               	movf	get_calib_data@dev,w
  6015  1FAE  00C1               	movwf	??_get_calib_data
  6016  1FAF  0841               	movf	??_get_calib_data,w
  6017  1FB0  00F5               	movwf	parse_humidity_calib_data@dev
  6018  1FB1  3043               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  6019  1FB2  3194  246A         	fcall	_parse_humidity_calib_data
  6020  1FB4                     l5034:	
  6021                           
  6022                           ;BME280_driver/bme280.c: 1336:     return rslt;
  6023  1FB4  085E               	movf	get_calib_data@rslt,w
  6024  1FB5  0008               	return
  6025  1FB6                     __end_of_get_calib_data:	
  6026                           
  6027                           	psect	text7
  6028  06A0                     __ptext7:	
  6029 ;; *************** function _parse_temp_press_calib_data *****************
  6030 ;; Defined at:
  6031 ;;		line 1358 in file "BME280_driver/bme280.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  reg_data        1    wreg     PTR const unsigned char 
  6034 ;;		 -> get_calib_data@calib_data(26), 
  6035 ;;  dev             1    5[COMMON] PTR struct bme280_dev
  6036 ;;		 -> main@env_sensor(51), 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;  reg_data        1    8[COMMON] PTR const unsigned char 
  6039 ;;		 -> get_calib_data@calib_data(26), 
  6040 ;;  calib_data      1    7[COMMON] PTR struct bme280_calib_
  6041 ;;		 -> env_sensor.calib_data(37), main@env_sensor(51), 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      void 
  6044 ;; Registers used:
  6045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6046 ;; Tracked objects:
  6047 ;;		On entry : 1F/0
  6048 ;;		On exit  : 1F/0
  6049 ;;		Unchanged: 1F/0
  6050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6051 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6055 ;;Total ram usage:        4 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    3
  6058 ;; This function calls:
  6059 ;;		Nothing
  6060 ;; This function is called by:
  6061 ;;		_get_calib_data
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _parse_temp_press_calib_data
  6067  06A0                     _parse_temp_press_calib_data:	
  6068                           
  6069                           ;incstack = 0
  6070                           ; Regs used in _parse_temp_press_calib_data: [wreg-fsr1h+status,2+status,0]
  6071                           ;parse_temp_press_calib_data@reg_data stored from wreg
  6072  06A0  00F8               	movwf	parse_temp_press_calib_data@reg_data
  6073                           
  6074                           ;BME280_driver/bme280.c: 1358: static void parse_temp_press_calib_data(const uint8_t *re
      +                          g_data, struct bme280_dev *dev);BME280_driver/bme280.c: 1359: {;BME280_driver/bme280.c: 
      +                          1360:     struct bme280_calib_data *calib_data = &dev->calib_data;
  6075  06A1  0875               	movf	parse_temp_press_calib_data@dev,w
  6076  06A2  3E09               	addlw	9
  6077  06A3  00F6               	movwf	??_parse_temp_press_calib_data
  6078  06A4  0876               	movf	??_parse_temp_press_calib_data,w
  6079  06A5  00F7               	movwf	parse_temp_press_calib_data@calib_data
  6080                           
  6081                           ;BME280_driver/bme280.c: 1362:     calib_data->dig_T1 = (((uint16_t)reg_data[1] << 8) | 
      +                          (uint16_t)reg_data[0]);
  6082  06A6  0A78               	incf	parse_temp_press_calib_data@reg_data,w
  6083  06A7  0084               	movwf	4
  6084  06A8  0185               	clrf	5
  6085  06A9  0800               	movf	0,w
  6086  06AA  00F6               	movwf	??_parse_temp_press_calib_data
  6087  06AB  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6088  06AC  0084               	movwf	4
  6089  06AD  0185               	clrf	5
  6090  06AE  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6091  06AF  0086               	movwf	6
  6092  06B0  3001               	movlw	1	; select bank2/3
  6093  06B1  0087               	movwf	7
  6094  06B2  0800               	movf	0,w
  6095  06B3  3FC0               	movwi [0]fsr1
  6096  06B4  0876               	movf	??_parse_temp_press_calib_data,w
  6097  06B5  3FC1               	movwi [1]fsr1
  6098                           
  6099                           ;BME280_driver/bme280.c: 1363:     calib_data->dig_T2 = (int16_t)(((uint16_t)reg_data[3]
      +                           << 8) | (uint16_t)reg_data[2]);
  6100  06B6  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6101  06B7  3E03               	addlw	3
  6102  06B8  0084               	movwf	4
  6103  06B9  0185               	clrf	5
  6104  06BA  0800               	movf	0,w
  6105  06BB  00F6               	movwf	??_parse_temp_press_calib_data
  6106  06BC  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6107  06BD  3E02               	addlw	2
  6108  06BE  0084               	movwf	4
  6109  06BF  0185               	clrf	5
  6110  06C0  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6111  06C1  3E02               	addlw	2
  6112  06C2  0086               	movwf	6
  6113  06C3  3001               	movlw	1	; select bank2/3
  6114  06C4  0087               	movwf	7
  6115  06C5  0800               	movf	0,w
  6116  06C6  3FC0               	movwi [0]fsr1
  6117  06C7  0876               	movf	??_parse_temp_press_calib_data,w
  6118  06C8  3FC1               	movwi [1]fsr1
  6119                           
  6120                           ;BME280_driver/bme280.c: 1364:     calib_data->dig_T3 = (int16_t)(((uint16_t)reg_data[5]
      +                           << 8) | (uint16_t)reg_data[4]);
  6121  06C9  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6122  06CA  3E05               	addlw	5
  6123  06CB  0084               	movwf	4
  6124  06CC  0185               	clrf	5
  6125  06CD  0800               	movf	0,w
  6126  06CE  00F6               	movwf	??_parse_temp_press_calib_data
  6127  06CF  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6128  06D0  3E04               	addlw	4
  6129  06D1  0084               	movwf	4
  6130  06D2  0185               	clrf	5
  6131  06D3  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6132  06D4  3E04               	addlw	4
  6133  06D5  0086               	movwf	6
  6134  06D6  3001               	movlw	1	; select bank2/3
  6135  06D7  0087               	movwf	7
  6136  06D8  0800               	movf	0,w
  6137  06D9  3FC0               	movwi [0]fsr1
  6138  06DA  0876               	movf	??_parse_temp_press_calib_data,w
  6139  06DB  3FC1               	movwi [1]fsr1
  6140                           
  6141                           ;BME280_driver/bme280.c: 1365:     calib_data->dig_P1 = (((uint16_t)reg_data[7] << 8) | 
      +                          (uint16_t)reg_data[6]);
  6142  06DC  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6143  06DD  3E07               	addlw	7
  6144  06DE  0084               	movwf	4
  6145  06DF  0185               	clrf	5
  6146  06E0  0800               	movf	0,w
  6147  06E1  00F6               	movwf	??_parse_temp_press_calib_data
  6148  06E2  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6149  06E3  3E06               	addlw	6
  6150  06E4  0084               	movwf	4
  6151  06E5  0185               	clrf	5
  6152  06E6  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6153  06E7  3E06               	addlw	6
  6154  06E8  0086               	movwf	6
  6155  06E9  3001               	movlw	1	; select bank2/3
  6156  06EA  0087               	movwf	7
  6157  06EB  0800               	movf	0,w
  6158  06EC  3FC0               	movwi [0]fsr1
  6159  06ED  0876               	movf	??_parse_temp_press_calib_data,w
  6160  06EE  3FC1               	movwi [1]fsr1
  6161                           
  6162                           ;BME280_driver/bme280.c: 1366:     calib_data->dig_P2 = (int16_t)(((uint16_t)reg_data[9]
      +                           << 8) | (uint16_t)reg_data[8]);
  6163  06EF  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6164  06F0  3E09               	addlw	9
  6165  06F1  0084               	movwf	4
  6166  06F2  0185               	clrf	5
  6167  06F3  0800               	movf	0,w
  6168  06F4  00F6               	movwf	??_parse_temp_press_calib_data
  6169  06F5  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6170  06F6  3E08               	addlw	8
  6171  06F7  0084               	movwf	4
  6172  06F8  0185               	clrf	5
  6173  06F9  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6174  06FA  3E08               	addlw	8
  6175  06FB  0086               	movwf	6
  6176  06FC  3001               	movlw	1	; select bank2/3
  6177  06FD  0087               	movwf	7
  6178  06FE  0800               	movf	0,w
  6179  06FF  3FC0               	movwi [0]fsr1
  6180  0700  0876               	movf	??_parse_temp_press_calib_data,w
  6181  0701  3FC1               	movwi [1]fsr1
  6182                           
  6183                           ;BME280_driver/bme280.c: 1367:     calib_data->dig_P3 = (int16_t)(((uint16_t)reg_data[11
      +                          ] << 8) | (uint16_t)reg_data[10]);
  6184  0702  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6185  0703  3E0B               	addlw	11
  6186  0704  0084               	movwf	4
  6187  0705  0185               	clrf	5
  6188  0706  0800               	movf	0,w
  6189  0707  00F6               	movwf	??_parse_temp_press_calib_data
  6190  0708  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6191  0709  3E0A               	addlw	10
  6192  070A  0084               	movwf	4
  6193  070B  0185               	clrf	5
  6194  070C  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6195  070D  3E0A               	addlw	10
  6196  070E  0086               	movwf	6
  6197  070F  3001               	movlw	1	; select bank2/3
  6198  0710  0087               	movwf	7
  6199  0711  0800               	movf	0,w
  6200  0712  3FC0               	movwi [0]fsr1
  6201  0713  0876               	movf	??_parse_temp_press_calib_data,w
  6202  0714  3FC1               	movwi [1]fsr1
  6203                           
  6204                           ;BME280_driver/bme280.c: 1368:     calib_data->dig_P4 = (int16_t)(((uint16_t)reg_data[13
      +                          ] << 8) | (uint16_t)reg_data[12]);
  6205  0715  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6206  0716  3E0D               	addlw	13
  6207  0717  0084               	movwf	4
  6208  0718  0185               	clrf	5
  6209  0719  0800               	movf	0,w
  6210  071A  00F6               	movwf	??_parse_temp_press_calib_data
  6211  071B  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6212  071C  3E0C               	addlw	12
  6213  071D  0084               	movwf	4
  6214  071E  0185               	clrf	5
  6215  071F  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6216  0720  3E0C               	addlw	12
  6217  0721  0086               	movwf	6
  6218  0722  3001               	movlw	1	; select bank2/3
  6219  0723  0087               	movwf	7
  6220  0724  0800               	movf	0,w
  6221  0725  3FC0               	movwi [0]fsr1
  6222  0726  0876               	movf	??_parse_temp_press_calib_data,w
  6223  0727  3FC1               	movwi [1]fsr1
  6224                           
  6225                           ;BME280_driver/bme280.c: 1369:     calib_data->dig_P5 = (int16_t)(((uint16_t)reg_data[15
      +                          ] << 8) | (uint16_t)reg_data[14]);
  6226  0728  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6227  0729  3E0F               	addlw	15
  6228  072A  0084               	movwf	4
  6229  072B  0185               	clrf	5
  6230  072C  0800               	movf	0,w
  6231  072D  00F6               	movwf	??_parse_temp_press_calib_data
  6232  072E  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6233  072F  3E0E               	addlw	14
  6234  0730  0084               	movwf	4
  6235  0731  0185               	clrf	5
  6236  0732  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6237  0733  3E0E               	addlw	14
  6238  0734  0086               	movwf	6
  6239  0735  3001               	movlw	1	; select bank2/3
  6240  0736  0087               	movwf	7
  6241  0737  0800               	movf	0,w
  6242  0738  3FC0               	movwi [0]fsr1
  6243  0739  0876               	movf	??_parse_temp_press_calib_data,w
  6244  073A  3FC1               	movwi [1]fsr1
  6245                           
  6246                           ;BME280_driver/bme280.c: 1370:     calib_data->dig_P6 = (int16_t)(((uint16_t)reg_data[17
      +                          ] << 8) | (uint16_t)reg_data[16]);
  6247  073B  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6248  073C  3E11               	addlw	17
  6249  073D  0084               	movwf	4
  6250  073E  0185               	clrf	5
  6251  073F  0800               	movf	0,w
  6252  0740  00F6               	movwf	??_parse_temp_press_calib_data
  6253  0741  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6254  0742  3E10               	addlw	16
  6255  0743  0084               	movwf	4
  6256  0744  0185               	clrf	5
  6257  0745  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6258  0746  3E10               	addlw	16
  6259  0747  0086               	movwf	6
  6260  0748  3001               	movlw	1	; select bank2/3
  6261  0749  0087               	movwf	7
  6262  074A  0800               	movf	0,w
  6263  074B  3FC0               	movwi [0]fsr1
  6264  074C  0876               	movf	??_parse_temp_press_calib_data,w
  6265  074D  3FC1               	movwi [1]fsr1
  6266                           
  6267                           ;BME280_driver/bme280.c: 1371:     calib_data->dig_P7 = (int16_t)(((uint16_t)reg_data[19
      +                          ] << 8) | (uint16_t)reg_data[18]);
  6268  074E  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6269  074F  3E13               	addlw	19
  6270  0750  0084               	movwf	4
  6271  0751  0185               	clrf	5
  6272  0752  0800               	movf	0,w
  6273  0753  00F6               	movwf	??_parse_temp_press_calib_data
  6274  0754  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6275  0755  3E12               	addlw	18
  6276  0756  0084               	movwf	4
  6277  0757  0185               	clrf	5
  6278  0758  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6279  0759  3E12               	addlw	18
  6280  075A  0086               	movwf	6
  6281  075B  3001               	movlw	1	; select bank2/3
  6282  075C  0087               	movwf	7
  6283  075D  0800               	movf	0,w
  6284  075E  3FC0               	movwi [0]fsr1
  6285  075F  0876               	movf	??_parse_temp_press_calib_data,w
  6286  0760  3FC1               	movwi [1]fsr1
  6287                           
  6288                           ;BME280_driver/bme280.c: 1372:     calib_data->dig_P8 = (int16_t)(((uint16_t)reg_data[21
      +                          ] << 8) | (uint16_t)reg_data[20]);
  6289  0761  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6290  0762  3E15               	addlw	21
  6291  0763  0084               	movwf	4
  6292  0764  0185               	clrf	5
  6293  0765  0800               	movf	0,w
  6294  0766  00F6               	movwf	??_parse_temp_press_calib_data
  6295  0767  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6296  0768  3E14               	addlw	20
  6297  0769  0084               	movwf	4
  6298  076A  0185               	clrf	5
  6299  076B  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6300  076C  3E14               	addlw	20
  6301  076D  0086               	movwf	6
  6302  076E  3001               	movlw	1	; select bank2/3
  6303  076F  0087               	movwf	7
  6304  0770  0800               	movf	0,w
  6305  0771  3FC0               	movwi [0]fsr1
  6306  0772  0876               	movf	??_parse_temp_press_calib_data,w
  6307  0773  3FC1               	movwi [1]fsr1
  6308                           
  6309                           ;BME280_driver/bme280.c: 1373:     calib_data->dig_P9 = (int16_t)(((uint16_t)reg_data[23
      +                          ] << 8) | (uint16_t)reg_data[22]);
  6310  0774  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6311  0775  3E17               	addlw	23
  6312  0776  0084               	movwf	4
  6313  0777  0185               	clrf	5
  6314  0778  0800               	movf	0,w
  6315  0779  00F6               	movwf	??_parse_temp_press_calib_data
  6316  077A  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6317  077B  3E16               	addlw	22
  6318  077C  0084               	movwf	4
  6319  077D  0185               	clrf	5
  6320  077E  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6321  077F  3E16               	addlw	22
  6322  0780  0086               	movwf	6
  6323  0781  3001               	movlw	1	; select bank2/3
  6324  0782  0087               	movwf	7
  6325  0783  0800               	movf	0,w
  6326  0784  3FC0               	movwi [0]fsr1
  6327  0785  0876               	movf	??_parse_temp_press_calib_data,w
  6328  0786  3FC1               	movwi [1]fsr1
  6329                           
  6330                           ;BME280_driver/bme280.c: 1374:     calib_data->dig_H1 = reg_data[25];
  6331  0787  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6332  0788  3E19               	addlw	25
  6333  0789  0086               	movwf	6
  6334  078A  0187               	clrf	7
  6335  078B  0801               	movf	1,w
  6336  078C  00F6               	movwf	??_parse_temp_press_calib_data
  6337  078D  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6338  078E  3E18               	addlw	24
  6339  078F  0086               	movwf	6
  6340  0790  3001               	movlw	1	; select bank2/3
  6341  0791  0087               	movwf	7
  6342  0792  0876               	movf	??_parse_temp_press_calib_data,w
  6343  0793  0081               	movwf	1
  6344  0794  0008               	return
  6345  0795                     __end_of_parse_temp_press_calib_data:	
  6346                           
  6347                           	psect	text8
  6348  146A                     __ptext8:	
  6349 ;; *************** function _parse_humidity_calib_data *****************
  6350 ;; Defined at:
  6351 ;;		line 1381 in file "BME280_driver/bme280.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;  reg_data        1    wreg     PTR const unsigned char 
  6354 ;;		 -> get_calib_data@calib_data(26), 
  6355 ;;  dev             1    5[COMMON] PTR struct bme280_dev
  6356 ;;		 -> main@env_sensor(51), 
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;  reg_data        1    9[BANK0 ] PTR const unsigned char 
  6359 ;;		 -> get_calib_data@calib_data(26), 
  6360 ;;  dig_H5_msb      2    6[BANK0 ] short 
  6361 ;;  dig_H5_lsb      2    4[BANK0 ] short 
  6362 ;;  dig_H4_msb      2    2[BANK0 ] short 
  6363 ;;  dig_H4_lsb      2    0[BANK0 ] short 
  6364 ;;  calib_data      1    8[BANK0 ] PTR struct bme280_calib_
  6365 ;;		 -> env_sensor.calib_data(37), main@env_sensor(51), 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  1    wreg      void 
  6368 ;; Registers used:
  6369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6370 ;; Tracked objects:
  6371 ;;		On entry : 1F/0
  6372 ;;		On exit  : 1F/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6375 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;Total ram usage:       14 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    3
  6382 ;; This function calls:
  6383 ;;		Nothing
  6384 ;; This function is called by:
  6385 ;;		_get_calib_data
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           
  6390                           ;psect for function _parse_humidity_calib_data
  6391  146A                     _parse_humidity_calib_data:	
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _parse_humidity_calib_data: [wreg-fsr1h+status,2+status,0]
  6395                           ;parse_humidity_calib_data@reg_data stored from wreg
  6396  146A  00A9               	movwf	parse_humidity_calib_data@reg_data
  6397                           
  6398                           ;BME280_driver/bme280.c: 1381: static void parse_humidity_calib_data(const uint8_t *reg_
      +                          data, struct bme280_dev *dev);BME280_driver/bme280.c: 1382: {;BME280_driver/bme280.c: 13
      +                          83:     struct bme280_calib_data *calib_data = &dev->calib_data;
  6399  146B  0875               	movf	parse_humidity_calib_data@dev,w
  6400  146C  3E09               	addlw	9
  6401  146D  00F6               	movwf	??_parse_humidity_calib_data
  6402  146E  0876               	movf	??_parse_humidity_calib_data,w
  6403  146F  00A8               	movwf	parse_humidity_calib_data@calib_data
  6404                           
  6405                           ;BME280_driver/bme280.c: 1384:     int16_t dig_H4_lsb;;BME280_driver/bme280.c: 1385:    
      +                           int16_t dig_H4_msb;;BME280_driver/bme280.c: 1386:     int16_t dig_H5_lsb;;BME280_driver
      +                          /bme280.c: 1387:     int16_t dig_H5_msb;;BME280_driver/bme280.c: 1389:     calib_data->d
      +                          ig_H2 = (int16_t)(((uint16_t)reg_data[1] << 8) | (uint16_t)reg_data[0]);
  6406  1470  0A29               	incf	parse_humidity_calib_data@reg_data,w
  6407  1471  0084               	movwf	4
  6408  1472  0185               	clrf	5
  6409  1473  0800               	movf	0,w
  6410  1474  00F6               	movwf	??_parse_humidity_calib_data
  6411  1475  0829               	movf	parse_humidity_calib_data@reg_data,w
  6412  1476  0084               	movwf	4
  6413  1477  0185               	clrf	5
  6414  1478  0828               	movf	parse_humidity_calib_data@calib_data,w
  6415  1479  3E19               	addlw	25
  6416  147A  0086               	movwf	6
  6417  147B  3001               	movlw	1	; select bank2/3
  6418  147C  0087               	movwf	7
  6419  147D  0800               	movf	0,w
  6420  147E  3FC0               	movwi [0]fsr1
  6421  147F  0876               	movf	??_parse_humidity_calib_data,w
  6422  1480  3FC1               	movwi [1]fsr1
  6423                           
  6424                           ;BME280_driver/bme280.c: 1390:     calib_data->dig_H3 = reg_data[2];
  6425  1481  0829               	movf	parse_humidity_calib_data@reg_data,w
  6426  1482  3E02               	addlw	2
  6427  1483  0086               	movwf	6
  6428  1484  0187               	clrf	7
  6429  1485  0801               	movf	1,w
  6430  1486  00F6               	movwf	??_parse_humidity_calib_data
  6431  1487  0828               	movf	parse_humidity_calib_data@calib_data,w
  6432  1488  3E1B               	addlw	27
  6433  1489  0086               	movwf	6
  6434  148A  3001               	movlw	1	; select bank2/3
  6435  148B  0087               	movwf	7
  6436  148C  0876               	movf	??_parse_humidity_calib_data,w
  6437  148D  0081               	movwf	1
  6438                           
  6439                           ;BME280_driver/bme280.c: 1391:     dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
  6440  148E  0829               	movf	parse_humidity_calib_data@reg_data,w
  6441  148F  3E03               	addlw	3
  6442  1490  0086               	movwf	6
  6443  1491  0187               	clrf	7
  6444  1492  0801               	movf	1,w
  6445  1493  00F6               	movwf	??_parse_humidity_calib_data
  6446  1494  01F7               	clrf	??_parse_humidity_calib_data+1
  6447  1495  1BF6               	btfsc	??_parse_humidity_calib_data,7
  6448  1496  03F7               	decf	??_parse_humidity_calib_data+1,f
  6449  1497  0EF6               	swapf	??_parse_humidity_calib_data,f
  6450  1498  0EF7               	swapf	??_parse_humidity_calib_data+1,f
  6451  1499  30F0               	movlw	240
  6452  149A  05F7               	andwf	??_parse_humidity_calib_data+1,f
  6453  149B  0876               	movf	??_parse_humidity_calib_data,w
  6454  149C  390F               	andlw	15
  6455  149D  04F7               	iorwf	??_parse_humidity_calib_data+1,f
  6456  149E  30F0               	movlw	240
  6457  149F  05F6               	andwf	??_parse_humidity_calib_data,f
  6458  14A0  0876               	movf	??_parse_humidity_calib_data,w
  6459  14A1  00A2               	movwf	parse_humidity_calib_data@dig_H4_msb
  6460  14A2  0877               	movf	??_parse_humidity_calib_data+1,w
  6461  14A3  00A3               	movwf	parse_humidity_calib_data@dig_H4_msb+1
  6462                           
  6463                           ;BME280_driver/bme280.c: 1392:     dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
  6464  14A4  0829               	movf	parse_humidity_calib_data@reg_data,w
  6465  14A5  3E04               	addlw	4
  6466  14A6  0086               	movwf	6
  6467  14A7  0187               	clrf	7
  6468  14A8  0801               	movf	1,w
  6469  14A9  390F               	andlw	15
  6470  14AA  00F6               	movwf	??_parse_humidity_calib_data
  6471  14AB  01F7               	clrf	??_parse_humidity_calib_data+1
  6472  14AC  0876               	movf	??_parse_humidity_calib_data,w
  6473  14AD  00A0               	movwf	parse_humidity_calib_data@dig_H4_lsb
  6474  14AE  0877               	movf	??_parse_humidity_calib_data+1,w
  6475  14AF  00A1               	movwf	parse_humidity_calib_data@dig_H4_lsb+1
  6476                           
  6477                           ;BME280_driver/bme280.c: 1393:     calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
  6478  14B0  0820               	movf	parse_humidity_calib_data@dig_H4_lsb,w
  6479  14B1  0422               	iorwf	parse_humidity_calib_data@dig_H4_msb,w
  6480  14B2  00F6               	movwf	??_parse_humidity_calib_data
  6481  14B3  0821               	movf	parse_humidity_calib_data@dig_H4_lsb+1,w
  6482  14B4  0423               	iorwf	parse_humidity_calib_data@dig_H4_msb+1,w
  6483  14B5  00F7               	movwf	??_parse_humidity_calib_data+1
  6484  14B6  0828               	movf	parse_humidity_calib_data@calib_data,w
  6485  14B7  3E1C               	addlw	28
  6486  14B8  0086               	movwf	6
  6487  14B9  3001               	movlw	1	; select bank2/3
  6488  14BA  0087               	movwf	7
  6489  14BB  0876               	movf	??_parse_humidity_calib_data,w
  6490  14BC  3FC0               	movwi [0]fsr1
  6491  14BD  0877               	movf	??_parse_humidity_calib_data+1,w
  6492  14BE  3FC1               	movwi [1]fsr1
  6493                           
  6494                           ;BME280_driver/bme280.c: 1394:     dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
  6495  14BF  0829               	movf	parse_humidity_calib_data@reg_data,w
  6496  14C0  3E05               	addlw	5
  6497  14C1  0086               	movwf	6
  6498  14C2  0187               	clrf	7
  6499  14C3  0801               	movf	1,w
  6500  14C4  00F6               	movwf	??_parse_humidity_calib_data
  6501  14C5  01F7               	clrf	??_parse_humidity_calib_data+1
  6502  14C6  1BF6               	btfsc	??_parse_humidity_calib_data,7
  6503  14C7  03F7               	decf	??_parse_humidity_calib_data+1,f
  6504  14C8  0EF6               	swapf	??_parse_humidity_calib_data,f
  6505  14C9  0EF7               	swapf	??_parse_humidity_calib_data+1,f
  6506  14CA  30F0               	movlw	240
  6507  14CB  05F7               	andwf	??_parse_humidity_calib_data+1,f
  6508  14CC  0876               	movf	??_parse_humidity_calib_data,w
  6509  14CD  390F               	andlw	15
  6510  14CE  04F7               	iorwf	??_parse_humidity_calib_data+1,f
  6511  14CF  30F0               	movlw	240
  6512  14D0  05F6               	andwf	??_parse_humidity_calib_data,f
  6513  14D1  0876               	movf	??_parse_humidity_calib_data,w
  6514  14D2  00A6               	movwf	parse_humidity_calib_data@dig_H5_msb
  6515  14D3  0877               	movf	??_parse_humidity_calib_data+1,w
  6516  14D4  00A7               	movwf	parse_humidity_calib_data@dig_H5_msb+1
  6517                           
  6518                           ;BME280_driver/bme280.c: 1395:     dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
  6519  14D5  0829               	movf	parse_humidity_calib_data@reg_data,w
  6520  14D6  3E04               	addlw	4
  6521  14D7  0086               	movwf	6
  6522  14D8  0187               	clrf	7
  6523  14D9  0801               	movf	1,w
  6524  14DA  00F6               	movwf	??_parse_humidity_calib_data
  6525  14DB  3004               	movlw	4
  6526  14DC                     u5065:	
  6527  14DC  36F6               	lsrf	??_parse_humidity_calib_data,f
  6528  14DD  0B89               	decfsz	9,f
  6529  14DE  2CDC               	goto	u5065
  6530  14DF  0876               	movf	??_parse_humidity_calib_data,w
  6531  14E0  00F7               	movwf	??_parse_humidity_calib_data+1
  6532  14E1  01F8               	clrf	??_parse_humidity_calib_data+2
  6533  14E2  0877               	movf	??_parse_humidity_calib_data+1,w
  6534  14E3  00A4               	movwf	parse_humidity_calib_data@dig_H5_lsb
  6535  14E4  0878               	movf	??_parse_humidity_calib_data+2,w
  6536  14E5  00A5               	movwf	parse_humidity_calib_data@dig_H5_lsb+1
  6537                           
  6538                           ;BME280_driver/bme280.c: 1396:     calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
  6539  14E6  0824               	movf	parse_humidity_calib_data@dig_H5_lsb,w
  6540  14E7  0426               	iorwf	parse_humidity_calib_data@dig_H5_msb,w
  6541  14E8  00F6               	movwf	??_parse_humidity_calib_data
  6542  14E9  0825               	movf	parse_humidity_calib_data@dig_H5_lsb+1,w
  6543  14EA  0427               	iorwf	parse_humidity_calib_data@dig_H5_msb+1,w
  6544  14EB  00F7               	movwf	??_parse_humidity_calib_data+1
  6545  14EC  0828               	movf	parse_humidity_calib_data@calib_data,w
  6546  14ED  3E1E               	addlw	30
  6547  14EE  0086               	movwf	6
  6548  14EF  3001               	movlw	1	; select bank2/3
  6549  14F0  0087               	movwf	7
  6550  14F1  0876               	movf	??_parse_humidity_calib_data,w
  6551  14F2  3FC0               	movwi [0]fsr1
  6552  14F3  0877               	movf	??_parse_humidity_calib_data+1,w
  6553  14F4  3FC1               	movwi [1]fsr1
  6554                           
  6555                           ;BME280_driver/bme280.c: 1397:     calib_data->dig_H6 = (int8_t)reg_data[6];
  6556  14F5  0829               	movf	parse_humidity_calib_data@reg_data,w
  6557  14F6  3E06               	addlw	6
  6558  14F7  0086               	movwf	6
  6559  14F8  0187               	clrf	7
  6560  14F9  0801               	movf	1,w
  6561  14FA  00F6               	movwf	??_parse_humidity_calib_data
  6562  14FB  0828               	movf	parse_humidity_calib_data@calib_data,w
  6563  14FC  3E20               	addlw	32
  6564  14FD  0086               	movwf	6
  6565  14FE  3001               	movlw	1	; select bank2/3
  6566  14FF  0087               	movwf	7
  6567  1500  0876               	movf	??_parse_humidity_calib_data,w
  6568  1501  0081               	movwf	1
  6569  1502  0008               	return
  6570  1503                     __end_of_parse_humidity_calib_data:	
  6571                           
  6572                           	psect	text9
  6573  1D1E                     __ptext9:	
  6574 ;; *************** function _bme280_soft_reset *****************
  6575 ;; Defined at:
  6576 ;;		line 631 in file "BME280_driver/bme280.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  dev             1    wreg     PTR const struct bme280_
  6579 ;;		 -> main@env_sensor(51), 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  dev             1   58[BANK0 ] PTR const struct bme280_
  6582 ;;		 -> main@env_sensor(51), 
  6583 ;;  reg_addr        1   57[BANK0 ] unsigned char 
  6584 ;;  rslt            1   56[BANK0 ] char 
  6585 ;;  soft_rst_cmd    1   55[BANK0 ] unsigned char 
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  1    wreg      char 
  6588 ;; Registers used:
  6589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 1F/0
  6592 ;;		On exit  : 1F/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;Total ram usage:        7 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    8
  6602 ;; This function calls:
  6603 ;;		_Sleep
  6604 ;;		_bme280_set_regs
  6605 ;;		_null_ptr_check
  6606 ;; This function is called by:
  6607 ;;		_bme280_init
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           
  6612                           ;psect for function _bme280_soft_reset
  6613  1D1E                     _bme280_soft_reset:	
  6614                           
  6615                           ;incstack = 0
  6616                           ; Regs used in _bme280_soft_reset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6617                           ;bme280_soft_reset@dev stored from wreg
  6618  1D1E  00DA               	movwf	bme280_soft_reset@dev
  6619                           
  6620                           ;BME280_driver/bme280.c: 631: int8_t bme280_soft_reset(const struct bme280_dev *dev);BME
      +                          280_driver/bme280.c: 632: {;BME280_driver/bme280.c: 633:     int8_t rslt;;BME280_driver/
      +                          bme280.c: 634:     uint8_t reg_addr = 0xE0;
  6621  1D1F  30E0               	movlw	224
  6622  1D20  00D4               	movwf	??_bme280_soft_reset
  6623  1D21  0854               	movf	??_bme280_soft_reset,w
  6624  1D22  00D9               	movwf	bme280_soft_reset@reg_addr
  6625                           
  6626                           ;BME280_driver/bme280.c: 637:     uint8_t soft_rst_cmd = 0xB6;
  6627  1D23  30B6               	movlw	182
  6628  1D24  00D4               	movwf	??_bme280_soft_reset
  6629  1D25  0854               	movf	??_bme280_soft_reset,w
  6630  1D26  00D7               	movwf	bme280_soft_reset@soft_rst_cmd
  6631                           
  6632                           ;BME280_driver/bme280.c: 640:     rslt = null_ptr_check(dev);
  6633  1D27  085A               	movf	bme280_soft_reset@dev,w
  6634  1D28  319A  22BB  319D   	fcall	_null_ptr_check
  6635  1D2B  0020               	movlb	0	; select bank0
  6636  1D2C  00D4               	movwf	??_bme280_soft_reset
  6637  1D2D  0854               	movf	??_bme280_soft_reset,w
  6638  1D2E  00D8               	movwf	bme280_soft_reset@rslt
  6639                           
  6640                           ;BME280_driver/bme280.c: 643:     if (rslt == 0)
  6641  1D2F  0858               	movf	bme280_soft_reset@rslt,w
  6642  1D30  1D03               	btfss	3,2
  6643  1D31  2D55               	goto	l5012
  6644                           
  6645                           ;BME280_driver/bme280.c: 644:     {;BME280_driver/bme280.c: 646:         rslt = bme280_s
      +                          et_regs(&reg_addr, &soft_rst_cmd, 1, dev);
  6646  1D32  3057               	movlw	(low (bme280_soft_reset@soft_rst_cmd| 0))& (0+255)
  6647  1D33  00D4               	movwf	??_bme280_soft_reset
  6648  1D34  0854               	movf	??_bme280_soft_reset,w
  6649  1D35  00B5               	movwf	bme280_set_regs@reg_data
  6650  1D36  01B6               	clrf	bme280_set_regs@len
  6651  1D37  0AB6               	incf	bme280_set_regs@len,f
  6652  1D38  085A               	movf	bme280_soft_reset@dev,w
  6653  1D39  00D5               	movwf	??_bme280_soft_reset+1
  6654  1D3A  0855               	movf	??_bme280_soft_reset+1,w
  6655  1D3B  00B7               	movwf	bme280_set_regs@dev
  6656  1D3C  3059               	movlw	(low (bme280_soft_reset@reg_addr| 0))& (0+255)
  6657  1D3D  3195  2503  319D   	fcall	_bme280_set_regs
  6658  1D40  00D6               	movwf	??_bme280_soft_reset+2
  6659  1D41  0856               	movf	??_bme280_soft_reset+2,w
  6660  1D42  00D8               	movwf	bme280_soft_reset@rslt
  6661                           
  6662                           ;BME280_driver/bme280.c: 649:         dev->delay_ms(2);
  6663  1D43  3000               	movlw	0
  6664  1D44  00F8               	movwf	Sleep@ms+3
  6665  1D45  3000               	movlw	0
  6666  1D46  00F7               	movwf	Sleep@ms+2
  6667  1D47  3000               	movlw	0
  6668  1D48  00F6               	movwf	Sleep@ms+1
  6669  1D49  3002               	movlw	2
  6670  1D4A  00F5               	movwf	Sleep@ms
  6671  1D4B  085A               	movf	bme280_soft_reset@dev,w
  6672  1D4C  3E07               	addlw	7
  6673  1D4D  0086               	movwf	6
  6674  1D4E  3001               	movlw	1	; select bank2/3
  6675  1D4F  0087               	movwf	7
  6676  1D50  3F41               	moviw [1]fsr1
  6677  1D51  008A               	movwf	10
  6678  1D52  3F40               	moviw [0]fsr1
  6679  1D53  000A               	callw
  6680  1D54  319D               	pagesel	$
  6681  1D55                     l5012:	
  6682                           
  6683                           ;BME280_driver/bme280.c: 652:     return rslt;
  6684  1D55  0858               	movf	bme280_soft_reset@rslt,w
  6685  1D56  0008               	return
  6686  1D57                     __end_of_bme280_soft_reset:	
  6687                           
  6688                           	psect	text10
  6689  1503                     __ptext10:	
  6690 ;; *************** function _bme280_set_regs *****************
  6691 ;; Defined at:
  6692 ;;		line 442 in file "BME280_driver/bme280.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;  reg_addr        1    wreg     PTR unsigned char 
  6695 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6696 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6697 ;;  reg_data        1   21[BANK0 ] PTR const unsigned char 
  6698 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
  6699 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
  6700 ;;  len             1   22[BANK0 ] unsigned char 
  6701 ;;  dev             1   23[BANK0 ] PTR const struct bme280_
  6702 ;;		 -> main@env_sensor(51), 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;  reg_addr        1   51[BANK0 ] PTR unsigned char 
  6705 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6706 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6707 ;;  temp_buff      20   27[BANK0 ] unsigned char [20]
  6708 ;;  temp_len        2   47[BANK0 ] unsigned short 
  6709 ;;  rslt            1   50[BANK0 ] char 
  6710 ;;  reg_addr_cnt    1   49[BANK0 ] unsigned char 
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  1    wreg      char 
  6713 ;; Registers used:
  6714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6715 ;; Tracked objects:
  6716 ;;		On entry : 1F/0
  6717 ;;		On exit  : 1F/0
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6720 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6721 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6722 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6723 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;Total ram usage:       31 bytes
  6725 ;; Hardware stack levels used:    1
  6726 ;; Hardware stack levels required when called:    7
  6727 ;; This function calls:
  6728 ;;		_WriteEnvSensor
  6729 ;;		_interleave_reg_addr
  6730 ;;		_null_ptr_check
  6731 ;; This function is called by:
  6732 ;;		_bme280_soft_reset
  6733 ;; This function uses a non-reentrant model
  6734 ;;
  6735                           
  6736                           
  6737                           ;psect for function _bme280_set_regs
  6738  1503                     _bme280_set_regs:	
  6739                           
  6740                           ;incstack = 0
  6741                           ; Regs used in _bme280_set_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6742                           ;bme280_set_regs@reg_addr stored from wreg
  6743  1503  00D3               	movwf	bme280_set_regs@reg_addr
  6744                           
  6745                           ;BME280_driver/bme280.c: 442: int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *r
      +                          eg_data, uint8_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 443: {;BME28
      +                          0_driver/bme280.c: 444:     int8_t rslt;;BME280_driver/bme280.c: 445:     uint8_t temp_b
      +                          uff[20];;BME280_driver/bme280.c: 447:     if (len > 10)
  6746  1504  300B               	movlw	11
  6747  1505  0236               	subwf	bme280_set_regs@len,w
  6748  1506  1C03               	skipc
  6749  1507  2D0C               	goto	l4732
  6750                           
  6751                           ;BME280_driver/bme280.c: 448:     {;BME280_driver/bme280.c: 449:         len = 10;
  6752  1508  300A               	movlw	10
  6753  1509  00B8               	movwf	??_bme280_set_regs
  6754  150A  0838               	movf	??_bme280_set_regs,w
  6755  150B  00B6               	movwf	bme280_set_regs@len
  6756  150C                     l4732:	
  6757                           
  6758                           ;BME280_driver/bme280.c: 451:     uint16_t temp_len;;BME280_driver/bme280.c: 452:     ui
      +                          nt8_t reg_addr_cnt;;BME280_driver/bme280.c: 455:     rslt = null_ptr_check(dev);
  6759  150C  0837               	movf	bme280_set_regs@dev,w
  6760  150D  319A  22BB  3195   	fcall	_null_ptr_check
  6761  1510  0020               	movlb	0	; select bank0
  6762  1511  00B8               	movwf	??_bme280_set_regs
  6763  1512  0838               	movf	??_bme280_set_regs,w
  6764  1513  00D2               	movwf	bme280_set_regs@rslt
  6765                           
  6766                           ;BME280_driver/bme280.c: 458:     if ((rslt == 0) && (reg_addr != ((void*)0)) && (reg_da
      +                          ta != ((void*)0)))
  6767  1514  0852               	movf	bme280_set_regs@rslt,w
  6768  1515  1D03               	btfss	3,2
  6769  1516  2D9D               	goto	l70
  6770  1517  0853               	movf	bme280_set_regs@reg_addr,w
  6771  1518  1903               	btfsc	3,2
  6772  1519  2D9D               	goto	l70
  6773  151A  0835               	movf	bme280_set_regs@reg_data,w
  6774  151B  1903               	btfsc	3,2
  6775  151C  2D9D               	goto	l70
  6776                           
  6777                           ;BME280_driver/bme280.c: 459:     {;BME280_driver/bme280.c: 460:         if (len != 0)
  6778  151D  0836               	movf	bme280_set_regs@len,w
  6779  151E  1903               	btfsc	3,2
  6780  151F  2D98               	goto	l4768
  6781                           
  6782                           ;BME280_driver/bme280.c: 461:         {;BME280_driver/bme280.c: 462:             temp_bu
      +                          ff[0] = reg_data[0];
  6783  1520  0835               	movf	bme280_set_regs@reg_data,w
  6784  1521  0086               	movwf	6
  6785  1522  0187               	clrf	7
  6786  1523  0801               	movf	1,w
  6787  1524  00B8               	movwf	??_bme280_set_regs
  6788  1525  0838               	movf	??_bme280_set_regs,w
  6789  1526  00BB               	movwf	bme280_set_regs@temp_buff
  6790                           
  6791                           ;BME280_driver/bme280.c: 465:             if (dev->intf != BME280_I2C_INTF)
  6792  1527  0837               	movf	bme280_set_regs@dev,w
  6793  1528  3E02               	addlw	2
  6794  1529  0086               	movwf	6
  6795  152A  3001               	movlw	1	; select bank2/3
  6796  152B  0087               	movwf	7
  6797  152C  0301               	decf	1,w
  6798  152D  1903               	btfsc	3,2
  6799  152E  2D4A               	goto	l4754
  6800                           
  6801                           ;BME280_driver/bme280.c: 466:             {;BME280_driver/bme280.c: 467:                
      +                           for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
  6802  152F  01D1               	clrf	bme280_set_regs@reg_addr_cnt
  6803  1530                     l4752:	
  6804  1530  0836               	movf	bme280_set_regs@len,w
  6805  1531  0251               	subwf	bme280_set_regs@reg_addr_cnt,w
  6806  1532  1803               	btfsc	3,0
  6807  1533  2D4A               	goto	l4754
  6808                           
  6809                           ;BME280_driver/bme280.c: 468:                 {;BME280_driver/bme280.c: 469:            
      +                                   reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
  6810  1534  0851               	movf	bme280_set_regs@reg_addr_cnt,w
  6811  1535  0753               	addwf	bme280_set_regs@reg_addr,w
  6812  1536  00B8               	movwf	??_bme280_set_regs
  6813  1537  0838               	movf	??_bme280_set_regs,w
  6814  1538  0086               	movwf	6
  6815  1539  0187               	clrf	7
  6816  153A  0801               	movf	1,w
  6817  153B  397F               	andlw	127
  6818  153C  00B9               	movwf	??_bme280_set_regs+1
  6819  153D  0851               	movf	bme280_set_regs@reg_addr_cnt,w
  6820  153E  0753               	addwf	bme280_set_regs@reg_addr,w
  6821  153F  00BA               	movwf	??_bme280_set_regs+2
  6822  1540  083A               	movf	??_bme280_set_regs+2,w
  6823  1541  0086               	movwf	6
  6824  1542  0187               	clrf	7
  6825  1543  0839               	movf	??_bme280_set_regs+1,w
  6826  1544  0081               	movwf	1
  6827                           
  6828                           ;BME280_driver/bme280.c: 470:                 }
  6829  1545  3001               	movlw	1
  6830  1546  00B8               	movwf	??_bme280_set_regs
  6831  1547  0838               	movf	??_bme280_set_regs,w
  6832  1548  07D1               	addwf	bme280_set_regs@reg_addr_cnt,f
  6833  1549  2D30               	goto	l4752
  6834  154A                     l4754:	
  6835                           
  6836                           ;BME280_driver/bme280.c: 474:             if (len > 1)
  6837  154A  3002               	movlw	2
  6838  154B  0236               	subwf	bme280_set_regs@len,w
  6839  154C  1C03               	skipc
  6840  154D  2D69               	goto	l4760
  6841                           
  6842                           ;BME280_driver/bme280.c: 475:             {;BME280_driver/bme280.c: 479:                
      +                           interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
  6843  154E  303B               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
  6844  154F  00B8               	movwf	??_bme280_set_regs
  6845  1550  0838               	movf	??_bme280_set_regs,w
  6846  1551  00F5               	movwf	interleave_reg_addr@temp_buff
  6847  1552  0835               	movf	bme280_set_regs@reg_data,w
  6848  1553  00B9               	movwf	??_bme280_set_regs+1
  6849  1554  0839               	movf	??_bme280_set_regs+1,w
  6850  1555  00F6               	movwf	interleave_reg_addr@reg_data
  6851  1556  0836               	movf	bme280_set_regs@len,w
  6852  1557  00BA               	movwf	??_bme280_set_regs+2
  6853  1558  083A               	movf	??_bme280_set_regs+2,w
  6854  1559  00F7               	movwf	interleave_reg_addr@len
  6855  155A  0853               	movf	bme280_set_regs@reg_addr,w
  6856  155B  319C  2459  3195   	fcall	_interleave_reg_addr
  6857                           
  6858                           ;BME280_driver/bme280.c: 480:                 temp_len = ((len * 2) - 1);
  6859  155E  0836               	movf	bme280_set_regs@len,w
  6860  155F  00B8               	movwf	??_bme280_set_regs
  6861  1560  01B9               	clrf	??_bme280_set_regs+1
  6862  1561  35B8               	lslf	??_bme280_set_regs,f
  6863  1562  0DB9               	rlf	??_bme280_set_regs+1,f
  6864  1563  0838               	movf	??_bme280_set_regs,w
  6865  1564  3EFF               	addlw	255
  6866  1565  00CF               	movwf	bme280_set_regs@temp_len
  6867  1566  30FF               	movlw	255
  6868  1567  3D39               	addwfc	??_bme280_set_regs+1,w
  6869  1568  2D6F               	goto	L1
  6870  1569                     l4760:	
  6871                           ;BME280_driver/bme280.c: 481:             }
  6872                           
  6873                           
  6874                           ;BME280_driver/bme280.c: 483:             {;BME280_driver/bme280.c: 484:                
      +                           temp_len = len;
  6875  1569  0836               	movf	bme280_set_regs@len,w
  6876  156A  00B8               	movwf	??_bme280_set_regs
  6877  156B  01B9               	clrf	??_bme280_set_regs+1
  6878  156C  0838               	movf	??_bme280_set_regs,w
  6879  156D  00CF               	movwf	bme280_set_regs@temp_len
  6880  156E  0839               	movf	??_bme280_set_regs+1,w
  6881  156F                     L1:	
  6882  156F  00D0               	movwf	bme280_set_regs@temp_len+1
  6883                           
  6884                           ;BME280_driver/bme280.c: 486:             rslt = dev->write(dev->dev_id, reg_addr[0], te
      +                          mp_buff, temp_len);
  6885  1570  0837               	movf	bme280_set_regs@dev,w
  6886  1571  0086               	movwf	6
  6887  1572  3001               	movlw	1	; select bank2/3
  6888  1573  0087               	movwf	7
  6889  1574  3001               	movlw	1	; select bank2/3
  6890  1575  3F41               	moviw [1]fsr1
  6891  1576  00AA               	movwf	WriteEnvSensor@dev_id
  6892  1577  0853               	movf	bme280_set_regs@reg_addr,w
  6893  1578  0086               	movwf	6
  6894  1579  0187               	clrf	7
  6895  157A  0801               	movf	1,w
  6896  157B  00B8               	movwf	??_bme280_set_regs
  6897  157C  0838               	movf	??_bme280_set_regs,w
  6898  157D  00AB               	movwf	WriteEnvSensor@reg_addr
  6899  157E  303B               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
  6900  157F  00B9               	movwf	??_bme280_set_regs+1
  6901  1580  0839               	movf	??_bme280_set_regs+1,w
  6902  1581  00AC               	movwf	WriteEnvSensor@reg_data
  6903  1582  0850               	movf	bme280_set_regs@temp_len+1,w
  6904  1583  00AE               	movwf	WriteEnvSensor@len+1
  6905  1584  084F               	movf	bme280_set_regs@temp_len,w
  6906  1585  00AD               	movwf	WriteEnvSensor@len
  6907  1586  0837               	movf	bme280_set_regs@dev,w
  6908  1587  3E05               	addlw	5
  6909  1588  0086               	movwf	6
  6910  1589  3001               	movlw	1	; select bank2/3
  6911  158A  0087               	movwf	7
  6912  158B  3F41               	moviw [1]fsr1
  6913  158C  008A               	movwf	10
  6914  158D  3F40               	moviw [0]fsr1
  6915  158E  000A               	callw
  6916  158F  3195               	pagesel	$
  6917  1590  00BA               	movwf	??_bme280_set_regs+2
  6918  1591  083A               	movf	??_bme280_set_regs+2,w
  6919  1592  00D2               	movwf	bme280_set_regs@rslt
  6920                           
  6921                           ;BME280_driver/bme280.c: 489:             if (rslt != 0)
  6922  1593  0852               	movf	bme280_set_regs@rslt,w
  6923  1594  1903               	btfsc	3,2
  6924  1595  2D9F               	goto	l4770
  6925                           
  6926                           ;BME280_driver/bme280.c: 490:             {;BME280_driver/bme280.c: 491:                
      +                           rslt = -4;
  6927  1596  30FC               	movlw	252
  6928  1597  2D99               	goto	L2
  6929  1598                     l4768:	
  6930                           
  6931                           ;BME280_driver/bme280.c: 495:         {;BME280_driver/bme280.c: 496:             rslt = 
      +                          -3;
  6932  1598  30FD               	movlw	253
  6933  1599                     L2:	
  6934  1599  00B8               	movwf	??_bme280_set_regs
  6935  159A  0838               	movf	??_bme280_set_regs,w
  6936  159B  00D2               	movwf	bme280_set_regs@rslt
  6937  159C  2D9F               	goto	l4770
  6938  159D                     l70:	
  6939                           ;BME280_driver/bme280.c: 499:     else
  6940                           
  6941                           
  6942                           ;BME280_driver/bme280.c: 500:     {;BME280_driver/bme280.c: 501:         rslt = -1;
  6943  159D  01D2               	clrf	bme280_set_regs@rslt
  6944  159E  03D2               	decf	bme280_set_regs@rslt,f
  6945  159F                     l4770:	
  6946                           
  6947                           ;BME280_driver/bme280.c: 504:     return rslt;
  6948  159F  0852               	movf	bme280_set_regs@rslt,w
  6949  15A0  0008               	return
  6950  15A1                     __end_of_bme280_set_regs:	
  6951                           
  6952                           	psect	text11
  6953  1C59                     __ptext11:	
  6954 ;; *************** function _interleave_reg_addr *****************
  6955 ;; Defined at:
  6956 ;;		line 1343 in file "BME280_driver/bme280.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  reg_addr        1    wreg     PTR const unsigned char 
  6959 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6960 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6961 ;;  temp_buff       1    5[COMMON] PTR unsigned char 
  6962 ;;		 -> bme280_set_regs@temp_buff(20), 
  6963 ;;  reg_data        1    6[COMMON] PTR const unsigned char 
  6964 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
  6965 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
  6966 ;;  len             1    7[COMMON] unsigned char 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  reg_addr        1    3[BANK0 ] PTR const unsigned char 
  6969 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6970 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6971 ;;  index           1    4[BANK0 ] unsigned char 
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1    wreg      void 
  6974 ;; Registers used:
  6975 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6976 ;; Tracked objects:
  6977 ;;		On entry : 1F/0
  6978 ;;		On exit  : 1F/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6981 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6983 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;Total ram usage:        8 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:    3
  6988 ;; This function calls:
  6989 ;;		Nothing
  6990 ;; This function is called by:
  6991 ;;		_bme280_set_regs
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           
  6996                           ;psect for function _interleave_reg_addr
  6997  1C59                     _interleave_reg_addr:	
  6998                           
  6999                           ;incstack = 0
  7000                           ; Regs used in _interleave_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0]
  7001                           ;interleave_reg_addr@reg_addr stored from wreg
  7002  1C59  00A3               	movwf	interleave_reg_addr@reg_addr
  7003                           
  7004                           ;BME280_driver/bme280.c: 1343: static void interleave_reg_addr(const uint8_t *reg_addr, 
      +                          uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len);BME280_driver/bme280.c: 1344: 
      +                          {;BME280_driver/bme280.c: 1345:     uint8_t index;;BME280_driver/bme280.c: 1347:     for
      +                           (index = 1; index < len; index++)
  7005  1C5A  01A4               	clrf	interleave_reg_addr@index
  7006  1C5B  0AA4               	incf	interleave_reg_addr@index,f
  7007  1C5C                     l4512:	
  7008  1C5C  0877               	movf	interleave_reg_addr@len,w
  7009  1C5D  0224               	subwf	interleave_reg_addr@index,w
  7010  1C5E  1803               	btfsc	3,0
  7011  1C5F  0008               	return
  7012                           
  7013                           ;BME280_driver/bme280.c: 1348:     {;BME280_driver/bme280.c: 1349:         temp_buff[(in
      +                          dex * 2) - 1] = reg_addr[index];
  7014  1C60  0824               	movf	interleave_reg_addr@index,w
  7015  1C61  0723               	addwf	interleave_reg_addr@reg_addr,w
  7016  1C62  00A0               	movwf	??_interleave_reg_addr
  7017  1C63  0820               	movf	??_interleave_reg_addr,w
  7018  1C64  0086               	movwf	6
  7019  1C65  0187               	clrf	7
  7020  1C66  0801               	movf	1,w
  7021  1C67  00A1               	movwf	??_interleave_reg_addr+1
  7022  1C68  3524               	lslf	interleave_reg_addr@index,w
  7023  1C69  0775               	addwf	interleave_reg_addr@temp_buff,w
  7024  1C6A  00A2               	movwf	??_interleave_reg_addr+2
  7025  1C6B  0822               	movf	??_interleave_reg_addr+2,w
  7026  1C6C  3EFF               	addlw	-1
  7027  1C6D  0086               	movwf	6
  7028  1C6E  0187               	clrf	7
  7029  1C6F  0821               	movf	??_interleave_reg_addr+1,w
  7030  1C70  0081               	movwf	1
  7031                           
  7032                           ;BME280_driver/bme280.c: 1350:         temp_buff[index * 2] = reg_data[index];
  7033  1C71  0824               	movf	interleave_reg_addr@index,w
  7034  1C72  0776               	addwf	interleave_reg_addr@reg_data,w
  7035  1C73  00A0               	movwf	??_interleave_reg_addr
  7036  1C74  0820               	movf	??_interleave_reg_addr,w
  7037  1C75  0086               	movwf	6
  7038  1C76  0187               	clrf	7
  7039  1C77  0801               	movf	1,w
  7040  1C78  00A1               	movwf	??_interleave_reg_addr+1
  7041  1C79  3524               	lslf	interleave_reg_addr@index,w
  7042  1C7A  0775               	addwf	interleave_reg_addr@temp_buff,w
  7043  1C7B  00A2               	movwf	??_interleave_reg_addr+2
  7044  1C7C  0822               	movf	??_interleave_reg_addr+2,w
  7045  1C7D  0086               	movwf	6
  7046  1C7E  0187               	clrf	7
  7047  1C7F  0821               	movf	??_interleave_reg_addr+1,w
  7048  1C80  0081               	movwf	1
  7049                           
  7050                           ;BME280_driver/bme280.c: 1351:     }
  7051  1C81  3001               	movlw	1
  7052  1C82  00A0               	movwf	??_interleave_reg_addr
  7053  1C83  0820               	movf	??_interleave_reg_addr,w
  7054  1C84  07A4               	addwf	interleave_reg_addr@index,f
  7055  1C85  2C5C               	goto	l4512
  7056  1C86                     __end_of_interleave_reg_addr:	
  7057                           
  7058                           	psect	text12
  7059  1FB6                     __ptext12:	
  7060 ;; *************** function _WriteEnvSensor *****************
  7061 ;; Defined at:
  7062 ;;		line 773 in file "main.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  dev_id          1   10[BANK0 ] unsigned char 
  7065 ;;  reg_addr        1   11[BANK0 ] unsigned char 
  7066 ;;  reg_data        1   12[BANK0 ] PTR unsigned char 
  7067 ;;		 -> bme280_set_regs@temp_buff(20), 
  7068 ;;  len             2   13[BANK0 ] unsigned short 
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;  status          1   20[BANK0 ] enum E9633
  7071 ;;  local_addres    1   19[BANK0 ] unsigned char 
  7072 ;; Return value:  Size  Location     Type
  7073 ;;                  1    wreg      char 
  7074 ;; Registers used:
  7075 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7076 ;; Tracked objects:
  7077 ;;		On entry : 1F/0
  7078 ;;		On exit  : 1F/0
  7079 ;;		Unchanged: 0/0
  7080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7081 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;Total ram usage:       11 bytes
  7086 ;; Hardware stack levels used:    1
  7087 ;; Hardware stack levels required when called:    6
  7088 ;; This function calls:
  7089 ;;		_I2C_MasterWrite
  7090 ;; This function is called by:
  7091 ;;		_main
  7092 ;;		_bme280_set_regs
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           
  7097                           ;psect for function _WriteEnvSensor
  7098  1FB6                     _WriteEnvSensor:	
  7099                           
  7100                           ;main.c: 773: int8_t WriteEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
      +                           uint16_t len);main.c: 774: {;main.c: 775:     I2C_MESSAGE_STATUS status = 0;
  7101                           
  7102                           ;incstack = 0
  7103                           ; Regs used in _WriteEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7104  1FB6  01B4               	clrf	WriteEnvSensor@status
  7105                           
  7106                           ;main.c: 776:     uint8_t local_address = reg_addr;
  7107  1FB7  082B               	movf	WriteEnvSensor@reg_addr,w
  7108  1FB8  00AF               	movwf	??_WriteEnvSensor
  7109  1FB9  082F               	movf	??_WriteEnvSensor,w
  7110  1FBA  00B3               	movwf	WriteEnvSensor@local_address
  7111  1FBB                     l859:	
  7112                           ;main.c: 793:     }
  7113                           
  7114                           ;main.c: 777:     while (local_address - reg_addr < len)
  7115                           
  7116                           
  7117                           ;main.c: 777:     while (local_address - reg_addr < len)
  7118  1FBB  0833               	movf	WriteEnvSensor@local_address,w
  7119  1FBC  00AF               	movwf	??_WriteEnvSensor
  7120  1FBD  01B0               	clrf	??_WriteEnvSensor+1
  7121  1FBE  0830               	movf	??_WriteEnvSensor+1,w
  7122  1FBF  00B2               	movwf	??_WriteEnvSensor+3
  7123  1FC0  082B               	movf	WriteEnvSensor@reg_addr,w
  7124  1FC1  022F               	subwf	??_WriteEnvSensor,w
  7125  1FC2  00B1               	movwf	??_WriteEnvSensor+2
  7126  1FC3  1C03               	skipc
  7127  1FC4  03B2               	decf	??_WriteEnvSensor+3,f
  7128  1FC5  082E               	movf	WriteEnvSensor@len+1,w
  7129  1FC6  0232               	subwf	??_WriteEnvSensor+3,w
  7130  1FC7  1D03               	skipz
  7131  1FC8  2FCB               	goto	u4425
  7132  1FC9  082D               	movf	WriteEnvSensor@len,w
  7133  1FCA  0231               	subwf	??_WriteEnvSensor+2,w
  7134  1FCB                     u4425:	
  7135  1FCB  1803               	btfsc	3,0
  7136  1FCC  2FFE               	goto	l4562
  7137                           
  7138                           ;main.c: 778:     {;main.c: 779:         I2C_MasterWrite(&local_address, 1, dev_id, &sta
      +                          tus);
  7139  1FCD  01A3               	clrf	I2C_MasterWrite@length
  7140  1FCE  0AA3               	incf	I2C_MasterWrite@length,f
  7141  1FCF  082A               	movf	WriteEnvSensor@dev_id,w
  7142  1FD0  00AF               	movwf	??_WriteEnvSensor
  7143  1FD1  01B0               	clrf	??_WriteEnvSensor+1
  7144  1FD2  082F               	movf	??_WriteEnvSensor,w
  7145  1FD3  00A4               	movwf	I2C_MasterWrite@address
  7146  1FD4  0830               	movf	??_WriteEnvSensor+1,w
  7147  1FD5  00A5               	movwf	I2C_MasterWrite@address+1
  7148  1FD6  3034               	movlw	(low (WriteEnvSensor@status| 0))& (0+255)
  7149  1FD7  00B1               	movwf	??_WriteEnvSensor+2
  7150  1FD8  0831               	movf	??_WriteEnvSensor+2,w
  7151  1FD9  00A6               	movwf	I2C_MasterWrite@pflag
  7152  1FDA  3033               	movlw	(low (WriteEnvSensor@local_address| 0))& (0+255)
  7153  1FDB  319B  232D  319F   	fcall	_I2C_MasterWrite
  7154                           
  7155                           ;main.c: 780:         if (status == 0)
  7156  1FDE  0020               	movlb	0	; select bank0
  7157  1FDF  0834               	movf	WriteEnvSensor@status,w
  7158  1FE0  1D03               	btfss	3,2
  7159  1FE1  2FF7               	goto	l4552
  7160                           
  7161                           ;main.c: 781:         {;main.c: 782:             I2C_MasterWrite(reg_data, 1, dev_id, &s
      +                          tatus);
  7162  1FE2  01A3               	clrf	I2C_MasterWrite@length
  7163  1FE3  0AA3               	incf	I2C_MasterWrite@length,f
  7164  1FE4  082A               	movf	WriteEnvSensor@dev_id,w
  7165  1FE5  00AF               	movwf	??_WriteEnvSensor
  7166  1FE6  01B0               	clrf	??_WriteEnvSensor+1
  7167  1FE7  082F               	movf	??_WriteEnvSensor,w
  7168  1FE8  00A4               	movwf	I2C_MasterWrite@address
  7169  1FE9  0830               	movf	??_WriteEnvSensor+1,w
  7170  1FEA  00A5               	movwf	I2C_MasterWrite@address+1
  7171  1FEB  3034               	movlw	(low (WriteEnvSensor@status| 0))& (0+255)
  7172  1FEC  00B1               	movwf	??_WriteEnvSensor+2
  7173  1FED  0831               	movf	??_WriteEnvSensor+2,w
  7174  1FEE  00A6               	movwf	I2C_MasterWrite@pflag
  7175  1FEF  082C               	movf	WriteEnvSensor@reg_data,w
  7176  1FF0  319B  232D  319F   	fcall	_I2C_MasterWrite
  7177                           
  7178                           ;main.c: 783:             if (status != 0)
  7179  1FF3  0020               	movlb	0	; select bank0
  7180  1FF4  0834               	movf	WriteEnvSensor@status,w
  7181  1FF5  1903               	btfsc	3,2
  7182  1FF6  2FF9               	goto	l4560
  7183  1FF7                     l4552:	
  7184                           
  7185                           ;main.c: 784:             {;main.c: 785:                 return -4;
  7186  1FF7  30FC               	movlw	252
  7187  1FF8  0008               	return
  7188  1FF9                     l4560:	
  7189                           
  7190                           ;main.c: 792:         local_address++;
  7191  1FF9  3001               	movlw	1
  7192  1FFA  00AF               	movwf	??_WriteEnvSensor
  7193  1FFB  082F               	movf	??_WriteEnvSensor,w
  7194  1FFC  07B3               	addwf	WriteEnvSensor@local_address,f
  7195  1FFD  2FBB               	goto	l859
  7196  1FFE                     l4562:	
  7197                           
  7198                           ;main.c: 794:     return 0;
  7199  1FFE  3000               	movlw	0
  7200  1FFF  0008               	return
  7201  2000                     __end_of_WriteEnvSensor:	
  7202                           
  7203                           	psect	text13
  7204  1D57                     __ptext13:	
  7205 ;; *************** function _Sleep *****************
  7206 ;; Defined at:
  7207 ;;		line 231 in file "main.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  ms              4    5[COMMON] unsigned long 
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  start           4    4[BANK0 ] unsigned long 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      void 
  7214 ;; Registers used:
  7215 ;;		wreg
  7216 ;; Tracked objects:
  7217 ;;		On entry : 1F/0
  7218 ;;		On exit  : 1F/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7221 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;Total ram usage:       12 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    3
  7228 ;; This function calls:
  7229 ;;		Nothing
  7230 ;; This function is called by:
  7231 ;;		_main
  7232 ;;		_bme280_soft_reset
  7233 ;;		_bme280_init
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           
  7238                           ;psect for function _Sleep
  7239  1D57                     _Sleep:	
  7240                           
  7241                           ;main.c: 231: void Sleep(uint32_t ms);main.c: 232: {;main.c: 233:     unsigned long star
      +                          t = ticks;
  7242                           
  7243                           ;incstack = 0
  7244                           ; Regs used in _Sleep: [wreg]
  7245  1D57  0022               	movlb	2	; select bank2
  7246  1D58  085F               	movf	(_ticks+3)^(0+256),w
  7247  1D59  0020               	movlb	0	; select bank0
  7248  1D5A  00A7               	movwf	Sleep@start+3
  7249  1D5B  0022               	movlb	2	; select bank2
  7250  1D5C  085E               	movf	(_ticks+2)^(0+256),w
  7251  1D5D  0020               	movlb	0	; select bank0
  7252  1D5E  00A6               	movwf	Sleep@start+2
  7253  1D5F  0022               	movlb	2	; select bank2
  7254  1D60  085D               	movf	(_ticks+1)^(0+256),w
  7255  1D61  0020               	movlb	0	; select bank0
  7256  1D62  00A5               	movwf	Sleep@start+1
  7257  1D63  0022               	movlb	2	; select bank2
  7258  1D64  085C               	movf	_ticks^(0+256),w
  7259  1D65  0020               	movlb	0	; select bank0
  7260  1D66  00A4               	movwf	Sleep@start
  7261  1D67                     l704:	
  7262                           ;main.c: 237:     }
  7263                           
  7264                           ;main.c: 234:     while (ticks - start < ms)
  7265                           
  7266                           
  7267                           ;main.c: 234:     while (ticks - start < ms)
  7268  1D67  0020               	movlb	0	; select bank0
  7269  1D68  0824               	movf	Sleep@start,w
  7270  1D69  0022               	movlb	2	; select bank2
  7271  1D6A  025C               	subwf	_ticks^(0+256),w
  7272  1D6B  0020               	movlb	0	; select bank0
  7273  1D6C  00A0               	movwf	??_Sleep
  7274  1D6D  0825               	movf	Sleep@start+1,w
  7275  1D6E  0022               	movlb	2	; select bank2
  7276  1D6F  3B5D               	subwfb	(_ticks+1)^(0+256),w
  7277  1D70  0020               	movlb	0	; select bank0
  7278  1D71  00A1               	movwf	??_Sleep+1
  7279  1D72  0826               	movf	Sleep@start+2,w
  7280  1D73  0022               	movlb	2	; select bank2
  7281  1D74  3B5E               	subwfb	(_ticks+2)^(0+256),w
  7282  1D75  0020               	movlb	0	; select bank0
  7283  1D76  00A2               	movwf	??_Sleep+2
  7284  1D77  0827               	movf	Sleep@start+3,w
  7285  1D78  0022               	movlb	2	; select bank2
  7286  1D79  3B5F               	subwfb	(_ticks+3)^(0+256),w
  7287  1D7A  0020               	movlb	0	; select bank0
  7288  1D7B  00A3               	movwf	??_Sleep+3
  7289  1D7C  0878               	movf	Sleep@ms+3,w
  7290  1D7D  0223               	subwf	??_Sleep+3,w
  7291  1D7E  1D03               	skipz
  7292  1D7F  2D8A               	goto	u5135
  7293  1D80  0877               	movf	Sleep@ms+2,w
  7294  1D81  0222               	subwf	??_Sleep+2,w
  7295  1D82  1D03               	skipz
  7296  1D83  2D8A               	goto	u5135
  7297  1D84  0876               	movf	Sleep@ms+1,w
  7298  1D85  0221               	subwf	??_Sleep+1,w
  7299  1D86  1D03               	skipz
  7300  1D87  2D8A               	goto	u5135
  7301  1D88  0875               	movf	Sleep@ms,w
  7302  1D89  0220               	subwf	??_Sleep,w
  7303  1D8A                     u5135:	
  7304  1D8A  1803               	btfsc	3,0
  7305  1D8B  0008               	return
  7306                           
  7307                           ;main.c: 235:     {;main.c: 236:         _delay((unsigned long)((1)*(4000000/4000.0)));
  7308  1D8C  30C8               	movlw	200
  7309  1D8D                     u6377:	
  7310  1D8D  3200               	nop2
  7311  1D8E  0B89               	decfsz	9,f
  7312  1D8F  2D8D               	goto	u6377
  7313  1D90  2D67               	goto	l704
  7314  1D91                     __end_of_Sleep:	
  7315                           
  7316                           	psect	text14
  7317  10D5                     __ptext14:	
  7318 ;; *************** function _bme280_get_sensor_data *****************
  7319 ;; Defined at:
  7320 ;;		line 660 in file "BME280_driver/bme280.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;  sensor_comp     1    wreg     unsigned char 
  7323 ;;  comp_data       1   75[BANK1 ] PTR struct bme280_data
  7324 ;;		 -> main@sensor_data(12), 
  7325 ;;  dev             1   76[BANK1 ] PTR struct bme280_dev
  7326 ;;		 -> main@env_sensor(51), 
  7327 ;; Auto vars:     Size  Location     Type
  7328 ;;  sensor_comp     1    8[BANK2 ] unsigned char 
  7329 ;;  uncomp_data    12   10[BANK2 ] struct bme280_uncomp_dat
  7330 ;;  reg_data        8    0[BANK2 ] unsigned char [8]
  7331 ;;  rslt            1    9[BANK2 ] char 
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      char 
  7334 ;; Registers used:
  7335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 1F/1
  7338 ;;		On exit  : 1C/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7341 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;      Locals:         0       0       0      22       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Totals:         0       0       5      22       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;Total ram usage:       27 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    8
  7348 ;; This function calls:
  7349 ;;		_bme280_compensate_data
  7350 ;;		_bme280_get_regs
  7351 ;;		_bme280_parse_sensor_data
  7352 ;;		_null_ptr_check
  7353 ;; This function is called by:
  7354 ;;		_main
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           
  7359                           ;psect for function _bme280_get_sensor_data
  7360  10D5                     _bme280_get_sensor_data:	
  7361                           
  7362                           ;incstack = 0
  7363                           ; Regs used in _bme280_get_sensor_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7364                           ;bme280_get_sensor_data@sensor_comp stored from wreg
  7365  10D5  0022               	movlb	2	; select bank2
  7366  10D6  00A8               	movwf	bme280_get_sensor_data@sensor_comp^(0+256)
  7367                           
  7368                           ;BME280_driver/bme280.c: 660: int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct 
      +                          bme280_data *comp_data, struct bme280_dev *dev);BME280_driver/bme280.c: 661: {;BME280_dr
      +                          iver/bme280.c: 662:     int8_t rslt;;BME280_driver/bme280.c: 667:     uint8_t reg_data[8
      +                          ] = { 0 };
  7369  10D7  3020               	movlw	low bme280_get_sensor_data@reg_data
  7370  10D8  0086               	movwf	6
  7371  10D9  3001               	movlw	high bme280_get_sensor_data@reg_data
  7372  10DA  0087               	movwf	7
  7373  10DB  3008               	movlw	8
  7374  10DC  0021               	movlb	1	; select bank1
  7375  10DD  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7376  10DE  3000               	movlw	0
  7377  10DF                     u5760:	
  7378  10DF  001E               	movwi fsr1++
  7379  10E0  0BED               	decfsz	??_bme280_get_sensor_data^(0+128),f
  7380  10E1  28DF               	goto	u5760
  7381                           
  7382                           ;BME280_driver/bme280.c: 668:     struct bme280_uncomp_data uncomp_data = { 0 };
  7383  10E2  303C               	movlw	low bme280_get_sensor_data@F273
  7384  10E3  0086               	movwf	6
  7385  10E4  3002               	movlw	high bme280_get_sensor_data@F273
  7386  10E5  0087               	movwf	7
  7387  10E6  302A               	movlw	low bme280_get_sensor_data@uncomp_data
  7388  10E7  0084               	movwf	4
  7389  10E8  3001               	movlw	high bme280_get_sensor_data@uncomp_data
  7390  10E9  0085               	movwf	5
  7391  10EA  300C               	movlw	12
  7392  10EB  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7393  10EC                     u5770:	
  7394  10EC  0016               	moviw fsr1++
  7395  10ED  001A               	movwi fsr0++
  7396  10EE  0BED               	decfsz	??_bme280_get_sensor_data^(0+128),f
  7397  10EF  28EC               	goto	u5770
  7398                           
  7399                           ;BME280_driver/bme280.c: 671:     rslt = null_ptr_check(dev);
  7400  10F0  086C               	movf	bme280_get_sensor_data@dev^(0+128),w
  7401  10F1  319A  22BB  3190   	fcall	_null_ptr_check
  7402  10F4  0021               	movlb	1	; select bank1
  7403  10F5  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7404  10F6  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  7405  10F7  0022               	movlb	2	; select bank2
  7406  10F8  00A9               	movwf	bme280_get_sensor_data@rslt^(0+256)
  7407                           
  7408                           ;BME280_driver/bme280.c: 672:     if ((rslt == 0) && (comp_data != ((void*)0)))
  7409  10F9  0829               	movf	bme280_get_sensor_data@rslt^(0+256),w
  7410  10FA  1D03               	btfss	3,2
  7411  10FB  0008               	return
  7412  10FC  0021               	movlb	1	; select bank1
  7413  10FD  086B               	movf	bme280_get_sensor_data@comp_data^(0+128),w
  7414  10FE  1903               	btfsc	3,2
  7415  10FF  0008               	return
  7416                           
  7417                           ;BME280_driver/bme280.c: 673:     {;BME280_driver/bme280.c: 675:         rslt = bme280_g
      +                          et_regs(0xF7, reg_data, 8, dev);
  7418  1100  3020               	movlw	low bme280_get_sensor_data@reg_data
  7419  1101  0020               	movlb	0	; select bank0
  7420  1102  00B8               	movwf	bme280_get_regs@reg_data
  7421  1103  3001               	movlw	high bme280_get_sensor_data@reg_data
  7422  1104  00B9               	movwf	bme280_get_regs@reg_data+1
  7423  1105  3008               	movlw	8
  7424  1106  00BA               	movwf	bme280_get_regs@len
  7425  1107  3000               	movlw	0
  7426  1108  00BB               	movwf	bme280_get_regs@len+1
  7427  1109  0021               	movlb	1	; select bank1
  7428  110A  086C               	movf	bme280_get_sensor_data@dev^(0+128),w
  7429  110B  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7430  110C  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  7431  110D  0020               	movlb	0	; select bank0
  7432  110E  00BC               	movwf	bme280_get_regs@dev
  7433  110F  30F7               	movlw	247
  7434  1110  319D  25CC  3190   	fcall	_bme280_get_regs
  7435  1113  0021               	movlb	1	; select bank1
  7436  1114  00EE               	movwf	(??_bme280_get_sensor_data+1)^(0+128)
  7437  1115  086E               	movf	(??_bme280_get_sensor_data+1)^(0+128),w
  7438  1116  0022               	movlb	2	; select bank2
  7439  1117  00A9               	movwf	bme280_get_sensor_data@rslt^(0+256)
  7440                           
  7441                           ;BME280_driver/bme280.c: 676:         if (rslt == 0)
  7442  1118  0829               	movf	bme280_get_sensor_data@rslt^(0+256),w
  7443  1119  1D03               	btfss	3,2
  7444  111A  0008               	return
  7445                           
  7446                           ;BME280_driver/bme280.c: 677:         {;BME280_driver/bme280.c: 679:             bme280_
      +                          parse_sensor_data(reg_data, &uncomp_data);
  7447  111B  302A               	movlw	(low (bme280_get_sensor_data@uncomp_data| (0+256)))& (0+255)
  7448  111C  0021               	movlb	1	; select bank1
  7449  111D  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7450  111E  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  7451  111F  00F5               	movwf	bme280_parse_sensor_data@uncomp_data
  7452  1120  3020               	movlw	(low (bme280_get_sensor_data@reg_data| (0+256)))& (0+255)
  7453  1121  3185  2576  3190   	fcall	_bme280_parse_sensor_data
  7454  1124  302A               	movlw	(low (bme280_get_sensor_data@uncomp_data| (0+256)))& (0+255)
  7455  1125  0021               	movlb	1	; select bank1
  7456  1126  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7457  1127  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  7458  1128  00E5               	movwf	bme280_compensate_data@uncomp_data^(0+128)
  7459  1129  086B               	movf	bme280_get_sensor_data@comp_data^(0+128),w
  7460  112A  00EE               	movwf	(??_bme280_get_sensor_data+1)^(0+128)
  7461  112B  086E               	movf	(??_bme280_get_sensor_data+1)^(0+128),w
  7462  112C  00E6               	movwf	bme280_compensate_data@comp_data^(0+128)
  7463  112D  086C               	movf	bme280_get_sensor_data@dev^(0+128),w
  7464  112E  3E09               	addlw	9
  7465  112F  00EF               	movwf	(??_bme280_get_sensor_data+2)^(0+128)
  7466  1130  086F               	movf	(??_bme280_get_sensor_data+2)^(0+128),w
  7467  1131  00E7               	movwf	bme280_compensate_data@calib_data^(0+128)
  7468  1132  0022               	movlb	2	; select bank2
  7469  1133  0828               	movf	bme280_get_sensor_data@sensor_comp^(0+256),w
  7470  1134  3192  22E0         	fcall	_bme280_compensate_data
  7471  1136  0008               	return
  7472  1137                     __end_of_bme280_get_sensor_data:	
  7473                           ;BME280_driver/bme280.c: 687:     else
  7474                           
  7475                           
  7476                           	psect	text15
  7477  0576                     __ptext15:	
  7478 ;; *************** function _bme280_parse_sensor_data *****************
  7479 ;; Defined at:
  7480 ;;		line 699 in file "BME280_driver/bme280.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  reg_data        1    wreg     PTR const unsigned char 
  7483 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7484 ;;  uncomp_data     1    5[COMMON] PTR struct bme280_uncomp
  7485 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;  reg_data        1   20[BANK0 ] PTR const unsigned char 
  7488 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7489 ;;  data_msb        4   16[BANK0 ] unsigned long 
  7490 ;;  data_lsb        4   12[BANK0 ] unsigned long 
  7491 ;;  data_xlsb       4    8[BANK0 ] unsigned long 
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  1    wreg      void 
  7494 ;; Registers used:
  7495 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7496 ;; Tracked objects:
  7497 ;;		On entry : 1F/1
  7498 ;;		On exit  : 1F/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7501 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7502 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7503 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;      Totals:         1      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;Total ram usage:       22 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:    3
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_bme280_get_sensor_data
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           
  7516                           ;psect for function _bme280_parse_sensor_data
  7517  0576                     _bme280_parse_sensor_data:	
  7518                           
  7519                           ;incstack = 0
  7520                           ; Regs used in _bme280_parse_sensor_data: [wreg+fsr1l+fsr1h+status,2+status,0]
  7521                           ;bme280_parse_sensor_data@reg_data stored from wreg
  7522  0576  0020               	movlb	0	; select bank0
  7523  0577  00B4               	movwf	bme280_parse_sensor_data@reg_data
  7524                           
  7525                           ;BME280_driver/bme280.c: 699: void bme280_parse_sensor_data(const uint8_t *reg_data, str
      +                          uct bme280_uncomp_data *uncomp_data);BME280_driver/bme280.c: 700: {;BME280_driver/bme280
      +                          .c: 702:     uint32_t data_xlsb;;BME280_driver/bme280.c: 703:     uint32_t data_lsb;;BME
      +                          280_driver/bme280.c: 704:     uint32_t data_msb;;BME280_driver/bme280.c: 707:     data_m
      +                          sb = (uint32_t)reg_data[0] << 12;
  7526  0578  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7527  0579  0086               	movwf	6
  7528  057A  3001               	movlw	1	; select bank2/3
  7529  057B  0087               	movwf	7
  7530  057C  0801               	movf	1,w
  7531  057D  00A0               	movwf	??_bme280_parse_sensor_data
  7532  057E  01A1               	clrf	??_bme280_parse_sensor_data+1
  7533  057F  01A2               	clrf	??_bme280_parse_sensor_data+2
  7534  0580  01A3               	clrf	??_bme280_parse_sensor_data+3
  7535  0581  300C               	movlw	12
  7536  0582                     u5285:	
  7537  0582  35A0               	lslf	??_bme280_parse_sensor_data,f
  7538  0583  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7539  0584  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7540  0585  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7541  0586  0B89               	decfsz	9,f
  7542  0587  2D82               	goto	u5285
  7543  0588  0823               	movf	??_bme280_parse_sensor_data+3,w
  7544  0589  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  7545  058A  0822               	movf	??_bme280_parse_sensor_data+2,w
  7546  058B  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  7547  058C  0821               	movf	??_bme280_parse_sensor_data+1,w
  7548  058D  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  7549  058E  0820               	movf	??_bme280_parse_sensor_data,w
  7550  058F  00B0               	movwf	bme280_parse_sensor_data@data_msb
  7551                           
  7552                           ;BME280_driver/bme280.c: 708:     data_lsb = (uint32_t)reg_data[1] << 4;
  7553  0590  0A34               	incf	bme280_parse_sensor_data@reg_data,w
  7554  0591  0086               	movwf	6
  7555  0592  3001               	movlw	1	; select bank2/3
  7556  0593  0087               	movwf	7
  7557  0594  0801               	movf	1,w
  7558  0595  00A0               	movwf	??_bme280_parse_sensor_data
  7559  0596  01A1               	clrf	??_bme280_parse_sensor_data+1
  7560  0597  01A2               	clrf	??_bme280_parse_sensor_data+2
  7561  0598  01A3               	clrf	??_bme280_parse_sensor_data+3
  7562  0599  3004               	movlw	4
  7563  059A                     u5295:	
  7564  059A  35A0               	lslf	??_bme280_parse_sensor_data,f
  7565  059B  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7566  059C  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7567  059D  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7568  059E  0B89               	decfsz	9,f
  7569  059F  2D9A               	goto	u5295
  7570  05A0  0823               	movf	??_bme280_parse_sensor_data+3,w
  7571  05A1  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  7572  05A2  0822               	movf	??_bme280_parse_sensor_data+2,w
  7573  05A3  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  7574  05A4  0821               	movf	??_bme280_parse_sensor_data+1,w
  7575  05A5  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  7576  05A6  0820               	movf	??_bme280_parse_sensor_data,w
  7577  05A7  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  7578                           
  7579                           ;BME280_driver/bme280.c: 709:     data_xlsb = (uint32_t)reg_data[2] >> 4;
  7580  05A8  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7581  05A9  3E02               	addlw	2
  7582  05AA  0086               	movwf	6
  7583  05AB  3001               	movlw	1	; select bank2/3
  7584  05AC  0087               	movwf	7
  7585  05AD  0801               	movf	1,w
  7586  05AE  00A0               	movwf	??_bme280_parse_sensor_data
  7587  05AF  3004               	movlw	4
  7588  05B0                     u5305:	
  7589  05B0  36A0               	lsrf	??_bme280_parse_sensor_data,f
  7590  05B1  0B89               	decfsz	9,f
  7591  05B2  2DB0               	goto	u5305
  7592  05B3  0820               	movf	??_bme280_parse_sensor_data,w
  7593  05B4  00A1               	movwf	??_bme280_parse_sensor_data+1
  7594  05B5  01A2               	clrf	??_bme280_parse_sensor_data+2
  7595  05B6  01A3               	clrf	??_bme280_parse_sensor_data+3
  7596  05B7  01A4               	clrf	??_bme280_parse_sensor_data+4
  7597  05B8  0824               	movf	??_bme280_parse_sensor_data+4,w
  7598  05B9  00AB               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7599  05BA  0823               	movf	??_bme280_parse_sensor_data+3,w
  7600  05BB  00AA               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7601  05BC  0822               	movf	??_bme280_parse_sensor_data+2,w
  7602  05BD  00A9               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7603  05BE  0821               	movf	??_bme280_parse_sensor_data+1,w
  7604  05BF  00A8               	movwf	bme280_parse_sensor_data@data_xlsb
  7605                           
  7606                           ;BME280_driver/bme280.c: 710:     uncomp_data->pressure = data_msb | data_lsb | data_xls
      +                          b;
  7607  05C0  0828               	movf	bme280_parse_sensor_data@data_xlsb,w
  7608  05C1  00A0               	movwf	??_bme280_parse_sensor_data
  7609  05C2  0829               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7610  05C3  00A1               	movwf	??_bme280_parse_sensor_data+1
  7611  05C4  082A               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7612  05C5  00A2               	movwf	??_bme280_parse_sensor_data+2
  7613  05C6  082B               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7614  05C7  00A3               	movwf	??_bme280_parse_sensor_data+3
  7615  05C8  0830               	movf	bme280_parse_sensor_data@data_msb,w
  7616  05C9  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7617  05CA  00A4               	movwf	??_bme280_parse_sensor_data+4
  7618  05CB  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  7619  05CC  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7620  05CD  00A5               	movwf	??_bme280_parse_sensor_data+5
  7621  05CE  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  7622  05CF  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7623  05D0  00A6               	movwf	??_bme280_parse_sensor_data+6
  7624  05D1  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  7625  05D2  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7626  05D3  00A7               	movwf	??_bme280_parse_sensor_data+7
  7627  05D4  0824               	movf	??_bme280_parse_sensor_data+4,w
  7628  05D5  04A0               	iorwf	??_bme280_parse_sensor_data,f
  7629  05D6  0825               	movf	??_bme280_parse_sensor_data+5,w
  7630  05D7  04A1               	iorwf	??_bme280_parse_sensor_data+1,f
  7631  05D8  0826               	movf	??_bme280_parse_sensor_data+6,w
  7632  05D9  04A2               	iorwf	??_bme280_parse_sensor_data+2,f
  7633  05DA  0827               	movf	??_bme280_parse_sensor_data+7,w
  7634  05DB  04A3               	iorwf	??_bme280_parse_sensor_data+3,f
  7635  05DC  0875               	movf	bme280_parse_sensor_data@uncomp_data,w
  7636  05DD  0086               	movwf	6
  7637  05DE  3001               	movlw	1	; select bank2/3
  7638  05DF  0087               	movwf	7
  7639  05E0  0820               	movf	??_bme280_parse_sensor_data,w
  7640  05E1  3FC0               	movwi [0]fsr1
  7641  05E2  0821               	movf	??_bme280_parse_sensor_data+1,w
  7642  05E3  3FC1               	movwi [1]fsr1
  7643  05E4  0822               	movf	??_bme280_parse_sensor_data+2,w
  7644  05E5  3FC2               	movwi [2]fsr1
  7645  05E6  0823               	movf	??_bme280_parse_sensor_data+3,w
  7646  05E7  3FC3               	movwi [3]fsr1
  7647                           
  7648                           ;BME280_driver/bme280.c: 713:     data_msb = (uint32_t)reg_data[3] << 12;
  7649  05E8  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7650  05E9  3E03               	addlw	3
  7651  05EA  0086               	movwf	6
  7652  05EB  3001               	movlw	1	; select bank2/3
  7653  05EC  0087               	movwf	7
  7654  05ED  0801               	movf	1,w
  7655  05EE  00A0               	movwf	??_bme280_parse_sensor_data
  7656  05EF  01A1               	clrf	??_bme280_parse_sensor_data+1
  7657  05F0  01A2               	clrf	??_bme280_parse_sensor_data+2
  7658  05F1  01A3               	clrf	??_bme280_parse_sensor_data+3
  7659  05F2  300C               	movlw	12
  7660  05F3                     u5315:	
  7661  05F3  35A0               	lslf	??_bme280_parse_sensor_data,f
  7662  05F4  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7663  05F5  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7664  05F6  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7665  05F7  0B89               	decfsz	9,f
  7666  05F8  2DF3               	goto	u5315
  7667  05F9  0823               	movf	??_bme280_parse_sensor_data+3,w
  7668  05FA  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  7669  05FB  0822               	movf	??_bme280_parse_sensor_data+2,w
  7670  05FC  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  7671  05FD  0821               	movf	??_bme280_parse_sensor_data+1,w
  7672  05FE  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  7673  05FF  0820               	movf	??_bme280_parse_sensor_data,w
  7674  0600  00B0               	movwf	bme280_parse_sensor_data@data_msb
  7675                           
  7676                           ;BME280_driver/bme280.c: 714:     data_lsb = (uint32_t)reg_data[4] << 4;
  7677  0601  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7678  0602  3E04               	addlw	4
  7679  0603  0086               	movwf	6
  7680  0604  3001               	movlw	1	; select bank2/3
  7681  0605  0087               	movwf	7
  7682  0606  0801               	movf	1,w
  7683  0607  00A0               	movwf	??_bme280_parse_sensor_data
  7684  0608  01A1               	clrf	??_bme280_parse_sensor_data+1
  7685  0609  01A2               	clrf	??_bme280_parse_sensor_data+2
  7686  060A  01A3               	clrf	??_bme280_parse_sensor_data+3
  7687  060B  3004               	movlw	4
  7688  060C                     u5325:	
  7689  060C  35A0               	lslf	??_bme280_parse_sensor_data,f
  7690  060D  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7691  060E  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7692  060F  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7693  0610  0B89               	decfsz	9,f
  7694  0611  2E0C               	goto	u5325
  7695  0612  0823               	movf	??_bme280_parse_sensor_data+3,w
  7696  0613  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  7697  0614  0822               	movf	??_bme280_parse_sensor_data+2,w
  7698  0615  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  7699  0616  0821               	movf	??_bme280_parse_sensor_data+1,w
  7700  0617  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  7701  0618  0820               	movf	??_bme280_parse_sensor_data,w
  7702  0619  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  7703                           
  7704                           ;BME280_driver/bme280.c: 715:     data_xlsb = (uint32_t)reg_data[5] >> 4;
  7705  061A  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7706  061B  3E05               	addlw	5
  7707  061C  0086               	movwf	6
  7708  061D  3001               	movlw	1	; select bank2/3
  7709  061E  0087               	movwf	7
  7710  061F  0801               	movf	1,w
  7711  0620  00A0               	movwf	??_bme280_parse_sensor_data
  7712  0621  3004               	movlw	4
  7713  0622                     u5335:	
  7714  0622  36A0               	lsrf	??_bme280_parse_sensor_data,f
  7715  0623  0B89               	decfsz	9,f
  7716  0624  2E22               	goto	u5335
  7717  0625  0820               	movf	??_bme280_parse_sensor_data,w
  7718  0626  00A1               	movwf	??_bme280_parse_sensor_data+1
  7719  0627  01A2               	clrf	??_bme280_parse_sensor_data+2
  7720  0628  01A3               	clrf	??_bme280_parse_sensor_data+3
  7721  0629  01A4               	clrf	??_bme280_parse_sensor_data+4
  7722  062A  0824               	movf	??_bme280_parse_sensor_data+4,w
  7723  062B  00AB               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7724  062C  0823               	movf	??_bme280_parse_sensor_data+3,w
  7725  062D  00AA               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7726  062E  0822               	movf	??_bme280_parse_sensor_data+2,w
  7727  062F  00A9               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7728  0630  0821               	movf	??_bme280_parse_sensor_data+1,w
  7729  0631  00A8               	movwf	bme280_parse_sensor_data@data_xlsb
  7730                           
  7731                           ;BME280_driver/bme280.c: 716:     uncomp_data->temperature = data_msb | data_lsb | data_
      +                          xlsb;
  7732  0632  0828               	movf	bme280_parse_sensor_data@data_xlsb,w
  7733  0633  00A0               	movwf	??_bme280_parse_sensor_data
  7734  0634  0829               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7735  0635  00A1               	movwf	??_bme280_parse_sensor_data+1
  7736  0636  082A               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7737  0637  00A2               	movwf	??_bme280_parse_sensor_data+2
  7738  0638  082B               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7739  0639  00A3               	movwf	??_bme280_parse_sensor_data+3
  7740  063A  0830               	movf	bme280_parse_sensor_data@data_msb,w
  7741  063B  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7742  063C  00A4               	movwf	??_bme280_parse_sensor_data+4
  7743  063D  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  7744  063E  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7745  063F  00A5               	movwf	??_bme280_parse_sensor_data+5
  7746  0640  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  7747  0641  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7748  0642  00A6               	movwf	??_bme280_parse_sensor_data+6
  7749  0643  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  7750  0644  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7751  0645  00A7               	movwf	??_bme280_parse_sensor_data+7
  7752  0646  0824               	movf	??_bme280_parse_sensor_data+4,w
  7753  0647  04A0               	iorwf	??_bme280_parse_sensor_data,f
  7754  0648  0825               	movf	??_bme280_parse_sensor_data+5,w
  7755  0649  04A1               	iorwf	??_bme280_parse_sensor_data+1,f
  7756  064A  0826               	movf	??_bme280_parse_sensor_data+6,w
  7757  064B  04A2               	iorwf	??_bme280_parse_sensor_data+2,f
  7758  064C  0827               	movf	??_bme280_parse_sensor_data+7,w
  7759  064D  04A3               	iorwf	??_bme280_parse_sensor_data+3,f
  7760  064E  0875               	movf	bme280_parse_sensor_data@uncomp_data,w
  7761  064F  3E04               	addlw	4
  7762  0650  0086               	movwf	6
  7763  0651  3001               	movlw	1	; select bank2/3
  7764  0652  0087               	movwf	7
  7765  0653  0820               	movf	??_bme280_parse_sensor_data,w
  7766  0654  3FC0               	movwi [0]fsr1
  7767  0655  0821               	movf	??_bme280_parse_sensor_data+1,w
  7768  0656  3FC1               	movwi [1]fsr1
  7769  0657  0822               	movf	??_bme280_parse_sensor_data+2,w
  7770  0658  3FC2               	movwi [2]fsr1
  7771  0659  0823               	movf	??_bme280_parse_sensor_data+3,w
  7772  065A  3FC3               	movwi [3]fsr1
  7773                           
  7774                           ;BME280_driver/bme280.c: 719:     data_lsb = (uint32_t)reg_data[6] << 8;
  7775  065B  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7776  065C  3E06               	addlw	6
  7777  065D  0086               	movwf	6
  7778  065E  3001               	movlw	1	; select bank2/3
  7779  065F  0087               	movwf	7
  7780  0660  0801               	movf	1,w
  7781  0661  00A0               	movwf	??_bme280_parse_sensor_data
  7782  0662  01A1               	clrf	??_bme280_parse_sensor_data+1
  7783  0663  01A2               	clrf	??_bme280_parse_sensor_data+2
  7784  0664  01A3               	clrf	??_bme280_parse_sensor_data+3
  7785  0665  3008               	movlw	8
  7786  0666                     u5345:	
  7787  0666  35A0               	lslf	??_bme280_parse_sensor_data,f
  7788  0667  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7789  0668  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7790  0669  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7791  066A  0B89               	decfsz	9,f
  7792  066B  2E66               	goto	u5345
  7793  066C  0823               	movf	??_bme280_parse_sensor_data+3,w
  7794  066D  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  7795  066E  0822               	movf	??_bme280_parse_sensor_data+2,w
  7796  066F  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  7797  0670  0821               	movf	??_bme280_parse_sensor_data+1,w
  7798  0671  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  7799  0672  0820               	movf	??_bme280_parse_sensor_data,w
  7800  0673  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  7801                           
  7802                           ;BME280_driver/bme280.c: 720:     data_msb = (uint32_t)reg_data[7];
  7803  0674  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7804  0675  3E07               	addlw	7
  7805  0676  0086               	movwf	6
  7806  0677  3001               	movlw	1	; select bank2/3
  7807  0678  0087               	movwf	7
  7808  0679  0801               	movf	1,w
  7809  067A  00A0               	movwf	??_bme280_parse_sensor_data
  7810  067B  01A1               	clrf	??_bme280_parse_sensor_data+1
  7811  067C  01A2               	clrf	??_bme280_parse_sensor_data+2
  7812  067D  01A3               	clrf	??_bme280_parse_sensor_data+3
  7813  067E  0823               	movf	??_bme280_parse_sensor_data+3,w
  7814  067F  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  7815  0680  0822               	movf	??_bme280_parse_sensor_data+2,w
  7816  0681  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  7817  0682  0821               	movf	??_bme280_parse_sensor_data+1,w
  7818  0683  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  7819  0684  0820               	movf	??_bme280_parse_sensor_data,w
  7820  0685  00B0               	movwf	bme280_parse_sensor_data@data_msb
  7821                           
  7822                           ;BME280_driver/bme280.c: 721:     uncomp_data->humidity = data_msb | data_lsb;
  7823  0686  0830               	movf	bme280_parse_sensor_data@data_msb,w
  7824  0687  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7825  0688  00A0               	movwf	??_bme280_parse_sensor_data
  7826  0689  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  7827  068A  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7828  068B  00A1               	movwf	??_bme280_parse_sensor_data+1
  7829  068C  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  7830  068D  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7831  068E  00A2               	movwf	??_bme280_parse_sensor_data+2
  7832  068F  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  7833  0690  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7834  0691  00A3               	movwf	??_bme280_parse_sensor_data+3
  7835  0692  0875               	movf	bme280_parse_sensor_data@uncomp_data,w
  7836  0693  3E08               	addlw	8
  7837  0694  0086               	movwf	6
  7838  0695  3001               	movlw	1	; select bank2/3
  7839  0696  0087               	movwf	7
  7840  0697  0820               	movf	??_bme280_parse_sensor_data,w
  7841  0698  3FC0               	movwi [0]fsr1
  7842  0699  0821               	movf	??_bme280_parse_sensor_data+1,w
  7843  069A  3FC1               	movwi [1]fsr1
  7844  069B  0822               	movf	??_bme280_parse_sensor_data+2,w
  7845  069C  3FC2               	movwi [2]fsr1
  7846  069D  0823               	movf	??_bme280_parse_sensor_data+3,w
  7847  069E  3FC3               	movwi [3]fsr1
  7848  069F  0008               	return
  7849  06A0                     __end_of_bme280_parse_sensor_data:	
  7850                           
  7851                           	psect	text16
  7852  1DCC                     __ptext16:	
  7853 ;; *************** function _bme280_get_regs *****************
  7854 ;; Defined at:
  7855 ;;		line 409 in file "BME280_driver/bme280.c"
  7856 ;; Parameters:    Size  Location     Type
  7857 ;;  reg_addr        1    wreg     unsigned char 
  7858 ;;  reg_data        2   24[BANK0 ] PTR unsigned char 
  7859 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  7860 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  7861 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  7862 ;;  len             2   26[BANK0 ] unsigned short 
  7863 ;;  dev             1   28[BANK0 ] PTR const struct bme280_
  7864 ;;		 -> main@env_sensor(51), 
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;  reg_addr        1   31[BANK0 ] unsigned char 
  7867 ;;  rslt            1   32[BANK0 ] char 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      char 
  7870 ;; Registers used:
  7871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 1F/0
  7874 ;;		On exit  : 1F/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7877 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;Total ram usage:        9 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    7
  7884 ;; This function calls:
  7885 ;;		_ReadEnvSensor
  7886 ;;		_null_ptr_check
  7887 ;; This function is called by:
  7888 ;;		_bme280_init
  7889 ;;		_bme280_get_sensor_data
  7890 ;;		_get_calib_data
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           
  7895                           ;psect for function _bme280_get_regs
  7896  1DCC                     _bme280_get_regs:	
  7897                           
  7898                           ;incstack = 0
  7899                           ; Regs used in _bme280_get_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7900                           ;bme280_get_regs@reg_addr stored from wreg
  7901  1DCC  00BF               	movwf	bme280_get_regs@reg_addr
  7902                           
  7903                           ;BME280_driver/bme280.c: 409: int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data
      +                          , uint16_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 410: {;BME280_driv
      +                          er/bme280.c: 411:     int8_t rslt;;BME280_driver/bme280.c: 414:     rslt = null_ptr_chec
      +                          k(dev);
  7904  1DCD  083C               	movf	bme280_get_regs@dev,w
  7905  1DCE  319A  22BB  319D   	fcall	_null_ptr_check
  7906  1DD1  0020               	movlb	0	; select bank0
  7907  1DD2  00BD               	movwf	??_bme280_get_regs
  7908  1DD3  083D               	movf	??_bme280_get_regs,w
  7909  1DD4  00C0               	movwf	bme280_get_regs@rslt
  7910                           
  7911                           ;BME280_driver/bme280.c: 417:     if (rslt == 0)
  7912  1DD5  0840               	movf	bme280_get_regs@rslt,w
  7913  1DD6  1D03               	btfss	3,2
  7914  1DD7  2E0C               	goto	l63
  7915                           
  7916                           ;BME280_driver/bme280.c: 418:     {;BME280_driver/bme280.c: 420:         if (dev->intf !
      +                          = BME280_I2C_INTF)
  7917  1DD8  083C               	movf	bme280_get_regs@dev,w
  7918  1DD9  3E02               	addlw	2
  7919  1DDA  0086               	movwf	6
  7920  1DDB  3001               	movlw	1	; select bank2/3
  7921  1DDC  0087               	movwf	7
  7922  1DDD  0301               	decf	1,w
  7923  1DDE  1903               	btfsc	3,2
  7924  1DDF  2DE5               	goto	l4720
  7925                           
  7926                           ;BME280_driver/bme280.c: 421:         {;BME280_driver/bme280.c: 422:             reg_add
      +                          r = reg_addr | 0x80;
  7927  1DE0  083F               	movf	bme280_get_regs@reg_addr,w
  7928  1DE1  3880               	iorlw	128
  7929  1DE2  00BD               	movwf	??_bme280_get_regs
  7930  1DE3  083D               	movf	??_bme280_get_regs,w
  7931  1DE4  00BF               	movwf	bme280_get_regs@reg_addr
  7932  1DE5                     l4720:	
  7933                           
  7934                           ;BME280_driver/bme280.c: 426:         rslt = dev->read(dev->dev_id, reg_addr, reg_data, 
      +                          len);
  7935  1DE5  083C               	movf	bme280_get_regs@dev,w
  7936  1DE6  0086               	movwf	6
  7937  1DE7  3001               	movlw	1	; select bank2/3
  7938  1DE8  0087               	movwf	7
  7939  1DE9  3001               	movlw	1	; select bank2/3
  7940  1DEA  3F41               	moviw [1]fsr1
  7941  1DEB  00AD               	movwf	ReadEnvSensor@dev_id
  7942  1DEC  083F               	movf	bme280_get_regs@reg_addr,w
  7943  1DED  00BD               	movwf	??_bme280_get_regs
  7944  1DEE  083D               	movf	??_bme280_get_regs,w
  7945  1DEF  00AE               	movwf	ReadEnvSensor@reg_addr
  7946  1DF0  0839               	movf	bme280_get_regs@reg_data+1,w
  7947  1DF1  00B0               	movwf	ReadEnvSensor@data+1
  7948  1DF2  0838               	movf	bme280_get_regs@reg_data,w
  7949  1DF3  00AF               	movwf	ReadEnvSensor@data
  7950  1DF4  083B               	movf	bme280_get_regs@len+1,w
  7951  1DF5  00B2               	movwf	ReadEnvSensor@len+1
  7952  1DF6  083A               	movf	bme280_get_regs@len,w
  7953  1DF7  00B1               	movwf	ReadEnvSensor@len
  7954  1DF8  083C               	movf	bme280_get_regs@dev,w
  7955  1DF9  3E03               	addlw	3
  7956  1DFA  0086               	movwf	6
  7957  1DFB  3001               	movlw	1	; select bank2/3
  7958  1DFC  0087               	movwf	7
  7959  1DFD  3F41               	moviw [1]fsr1
  7960  1DFE  008A               	movwf	10
  7961  1DFF  3F40               	moviw [0]fsr1
  7962  1E00  000A               	callw
  7963  1E01  319D               	pagesel	$
  7964  1E02  00BE               	movwf	??_bme280_get_regs+1
  7965  1E03  083E               	movf	??_bme280_get_regs+1,w
  7966  1E04  00C0               	movwf	bme280_get_regs@rslt
  7967                           
  7968                           ;BME280_driver/bme280.c: 429:         if (rslt != 0)
  7969  1E05  0840               	movf	bme280_get_regs@rslt,w
  7970  1E06  1903               	btfsc	3,2
  7971  1E07  2E0C               	goto	l63
  7972                           
  7973                           ;BME280_driver/bme280.c: 430:         {;BME280_driver/bme280.c: 431:             rslt = 
      +                          -4;
  7974  1E08  30FC               	movlw	252
  7975  1E09  00BD               	movwf	??_bme280_get_regs
  7976  1E0A  083D               	movf	??_bme280_get_regs,w
  7977  1E0B  00C0               	movwf	bme280_get_regs@rslt
  7978  1E0C                     l63:	
  7979                           ;BME280_driver/bme280.c: 433:     }
  7980                           
  7981                           
  7982                           ;BME280_driver/bme280.c: 435:     return rslt;
  7983  1E0C  0840               	movf	bme280_get_regs@rslt,w
  7984  1E0D  0008               	return
  7985  1E0E                     __end_of_bme280_get_regs:	
  7986                           
  7987                           	psect	text17
  7988  1ABB                     __ptext17:	
  7989 ;; *************** function _null_ptr_check *****************
  7990 ;; Defined at:
  7991 ;;		line 1426 in file "BME280_driver/bme280.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;  dev             1    wreg     PTR const struct bme280_
  7994 ;;		 -> main@env_sensor(51), 
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;  dev             1    8[COMMON] PTR const struct bme280_
  7997 ;;		 -> main@env_sensor(51), 
  7998 ;;  rslt            1    7[COMMON] char 
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  1    wreg      char 
  8001 ;; Registers used:
  8002 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8003 ;; Tracked objects:
  8004 ;;		On entry : 1E/0
  8005 ;;		On exit  : 1E/0
  8006 ;;		Unchanged: 1E/0
  8007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;Total ram usage:        4 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:    3
  8015 ;; This function calls:
  8016 ;;		Nothing
  8017 ;; This function is called by:
  8018 ;;		_bme280_init
  8019 ;;		_bme280_get_regs
  8020 ;;		_bme280_set_regs
  8021 ;;		_bme280_soft_reset
  8022 ;;		_bme280_get_sensor_data
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           
  8027                           ;psect for function _null_ptr_check
  8028  1ABB                     _null_ptr_check:	
  8029                           
  8030                           ;incstack = 0
  8031                           ; Regs used in _null_ptr_check: [wreg+fsr1l+fsr1h+status,2+status,0]
  8032                           ;null_ptr_check@dev stored from wreg
  8033  1ABB  00F8               	movwf	null_ptr_check@dev
  8034                           
  8035                           ;BME280_driver/bme280.c: 1426: static int8_t null_ptr_check(const struct bme280_dev *dev
      +                          );BME280_driver/bme280.c: 1427: {;BME280_driver/bme280.c: 1428:     int8_t rslt;;BME280_
      +                          driver/bme280.c: 1430:     if ((dev == ((void*)0)) || (dev->read == ((void*)0)) || (dev-
      +                          >write == ((void*)0)) || (dev->delay_ms == ((void*)0)))
  8036  1ABC  0878               	movf	null_ptr_check@dev,w
  8037  1ABD  1903               	btfsc	3,2
  8038  1ABE  2ADA               	goto	l234
  8039  1ABF  0878               	movf	null_ptr_check@dev,w
  8040  1AC0  3E03               	addlw	3
  8041  1AC1  0086               	movwf	6
  8042  1AC2  3001               	movlw	1	; select bank2/3
  8043  1AC3  0087               	movwf	7
  8044  1AC4  0016               	moviw fsr1++
  8045  1AC5  0401               	iorwf	1,w
  8046  1AC6  1903               	btfsc	3,2
  8047  1AC7  2ADA               	goto	l234
  8048  1AC8  0878               	movf	null_ptr_check@dev,w
  8049  1AC9  3E05               	addlw	5
  8050  1ACA  0086               	movwf	6
  8051  1ACB  3001               	movlw	1	; select bank2/3
  8052  1ACC  0087               	movwf	7
  8053  1ACD  0016               	moviw fsr1++
  8054  1ACE  0401               	iorwf	1,w
  8055  1ACF  1903               	btfsc	3,2
  8056  1AD0  2ADA               	goto	l234
  8057  1AD1  0878               	movf	null_ptr_check@dev,w
  8058  1AD2  3E07               	addlw	7
  8059  1AD3  0086               	movwf	6
  8060  1AD4  3001               	movlw	1	; select bank2/3
  8061  1AD5  0087               	movwf	7
  8062  1AD6  0016               	moviw fsr1++
  8063  1AD7  0401               	iorwf	1,w
  8064  1AD8  1D03               	btfss	3,2
  8065  1AD9  2ADD               	goto	l4500
  8066  1ADA                     l234:	
  8067                           
  8068                           ;BME280_driver/bme280.c: 1431:     {;BME280_driver/bme280.c: 1433:         rslt = -1;
  8069  1ADA  01F7               	clrf	null_ptr_check@rslt
  8070  1ADB  03F7               	decf	null_ptr_check@rslt,f
  8071                           
  8072                           ;BME280_driver/bme280.c: 1434:     }
  8073  1ADC  2ADE               	goto	l4502
  8074  1ADD                     l4500:	
  8075                           
  8076                           ;BME280_driver/bme280.c: 1436:     {;BME280_driver/bme280.c: 1438:         rslt = 0;
  8077  1ADD  01F7               	clrf	null_ptr_check@rslt
  8078  1ADE                     l4502:	
  8079                           
  8080                           ;BME280_driver/bme280.c: 1441:     return rslt;
  8081  1ADE  0877               	movf	null_ptr_check@rslt,w
  8082  1ADF  0008               	return
  8083  1AE0                     __end_of_null_ptr_check:	
  8084                           
  8085                           	psect	text18
  8086  1CE8                     __ptext18:	
  8087 ;; *************** function _ReadEnvSensor *****************
  8088 ;; Defined at:
  8089 ;;		line 755 in file "main.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  dev_id          1   13[BANK0 ] unsigned char 
  8092 ;;  reg_addr        1   14[BANK0 ] unsigned char 
  8093 ;;  data            2   15[BANK0 ] PTR unsigned char 
  8094 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8095 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8096 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8097 ;;  len             2   17[BANK0 ] unsigned short 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  status          1   23[BANK0 ] enum E9633
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      char 
  8102 ;; Registers used:
  8103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 1F/0
  8106 ;;		On exit  : 1F/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8109 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;Total ram usage:       11 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    6
  8116 ;; This function calls:
  8117 ;;		_I2C_MasterRead
  8118 ;;		_I2C_MasterWrite
  8119 ;; This function is called by:
  8120 ;;		_main
  8121 ;;		_bme280_get_regs
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           
  8126                           ;psect for function _ReadEnvSensor
  8127  1CE8                     _ReadEnvSensor:	
  8128                           
  8129                           ;main.c: 755: int8_t ReadEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint
      +                          16_t len);main.c: 756: {;main.c: 757:     I2C_MESSAGE_STATUS status = 0;
  8130                           
  8131                           ;incstack = 0
  8132                           ; Regs used in _ReadEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8133  1CE8  01B7               	clrf	ReadEnvSensor@status
  8134                           
  8135                           ;main.c: 758:     I2C_MasterWrite(&reg_addr, 1, dev_id, &status);
  8136  1CE9  01A3               	clrf	I2C_MasterWrite@length
  8137  1CEA  0AA3               	incf	I2C_MasterWrite@length,f
  8138  1CEB  082D               	movf	ReadEnvSensor@dev_id,w
  8139  1CEC  00B3               	movwf	??_ReadEnvSensor
  8140  1CED  01B4               	clrf	??_ReadEnvSensor+1
  8141  1CEE  0833               	movf	??_ReadEnvSensor,w
  8142  1CEF  00A4               	movwf	I2C_MasterWrite@address
  8143  1CF0  0834               	movf	??_ReadEnvSensor+1,w
  8144  1CF1  00A5               	movwf	I2C_MasterWrite@address+1
  8145  1CF2  3037               	movlw	(low (ReadEnvSensor@status| 0))& (0+255)
  8146  1CF3  00B5               	movwf	??_ReadEnvSensor+2
  8147  1CF4  0835               	movf	??_ReadEnvSensor+2,w
  8148  1CF5  00A6               	movwf	I2C_MasterWrite@pflag
  8149  1CF6  302E               	movlw	(low (ReadEnvSensor@reg_addr| 0))& (0+255)
  8150  1CF7  319B  232D  319C   	fcall	_I2C_MasterWrite
  8151                           
  8152                           ;main.c: 759:     if (status == 0)
  8153  1CFA  0020               	movlb	0	; select bank0
  8154  1CFB  0837               	movf	ReadEnvSensor@status,w
  8155  1CFC  1D03               	btfss	3,2
  8156  1CFD  2D18               	goto	l4534
  8157                           
  8158                           ;main.c: 760:     {;main.c: 761:         I2C_MasterRead(data, len, dev_id, &status);
  8159  1CFE  0830               	movf	ReadEnvSensor@data+1,w
  8160  1CFF  00A6               	movwf	I2C_MasterRead@pdata+1
  8161  1D00  082F               	movf	ReadEnvSensor@data,w
  8162  1D01  00A5               	movwf	I2C_MasterRead@pdata
  8163  1D02  0831               	movf	ReadEnvSensor@len,w
  8164  1D03  00B3               	movwf	??_ReadEnvSensor
  8165  1D04  0833               	movf	??_ReadEnvSensor,w
  8166  1D05  00A7               	movwf	I2C_MasterRead@length
  8167  1D06  082D               	movf	ReadEnvSensor@dev_id,w
  8168  1D07  00B4               	movwf	??_ReadEnvSensor+1
  8169  1D08  01B5               	clrf	??_ReadEnvSensor+2
  8170  1D09  0834               	movf	??_ReadEnvSensor+1,w
  8171  1D0A  00A8               	movwf	I2C_MasterRead@address
  8172  1D0B  0835               	movf	??_ReadEnvSensor+2,w
  8173  1D0C  00A9               	movwf	I2C_MasterRead@address+1
  8174  1D0D  3037               	movlw	(low (ReadEnvSensor@status| 0))& (0+255)
  8175  1D0E  00B6               	movwf	??_ReadEnvSensor+3
  8176  1D0F  0836               	movf	??_ReadEnvSensor+3,w
  8177  1D10  00AA               	movwf	I2C_MasterRead@pflag
  8178  1D11  319B  2306  319C   	fcall	_I2C_MasterRead
  8179                           
  8180                           ;main.c: 762:         if (status != 0)
  8181  1D14  0020               	movlb	0	; select bank0
  8182  1D15  0837               	movf	ReadEnvSensor@status,w
  8183  1D16  1903               	btfsc	3,2
  8184  1D17  2D1C               	goto	l855
  8185  1D18                     l4534:	
  8186                           
  8187                           ;main.c: 763:         {;main.c: 764:             status = -4;
  8188  1D18  30FC               	movlw	252
  8189  1D19  00B3               	movwf	??_ReadEnvSensor
  8190  1D1A  0833               	movf	??_ReadEnvSensor,w
  8191  1D1B  00B7               	movwf	ReadEnvSensor@status
  8192  1D1C                     l855:	
  8193                           ;main.c: 770:     }
  8194                           
  8195                           
  8196                           ;main.c: 771:     return status;
  8197  1D1C  0837               	movf	ReadEnvSensor@status,w
  8198  1D1D  0008               	return
  8199  1D1E                     __end_of_ReadEnvSensor:	
  8200                           
  8201                           	psect	text19
  8202  1B2D                     __ptext19:	
  8203 ;; *************** function _I2C_MasterWrite *****************
  8204 ;; Defined at:
  8205 ;;		line 600 in file "mcc_generated_files/i2c.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  pdata           1    wreg     PTR unsigned char 
  8208 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  8209 ;;  length          1    3[BANK0 ] unsigned char 
  8210 ;;  address         2    4[BANK0 ] unsigned short 
  8211 ;;  pflag           1    6[BANK0 ] PTR enum E9631
  8212 ;;		 -> WriteEnvSensor@status(1), ReadEnvSensor@status(1), 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  pdata           1    9[BANK0 ] PTR unsigned char 
  8215 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  1    wreg      void 
  8218 ;; Registers used:
  8219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 1F/0
  8222 ;;		On exit  : 1D/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:        7 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    5
  8232 ;; This function calls:
  8233 ;;		_I2C_MasterTRBInsert
  8234 ;;		_I2C_MasterWriteTRBBuild
  8235 ;; This function is called by:
  8236 ;;		_ReadEnvSensor
  8237 ;;		_WriteEnvSensor
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           
  8242                           ;psect for function _I2C_MasterWrite
  8243  1B2D                     _I2C_MasterWrite:	
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _I2C_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8247                           ;I2C_MasterWrite@pdata stored from wreg
  8248  1B2D  00A9               	movwf	I2C_MasterWrite@pdata
  8249                           
  8250                           ;mcc_generated_files/i2c.c: 601:                                 uint8_t *pdata,;mcc_gen
      +                          erated_files/i2c.c: 602:                                 uint8_t length,;mcc_generated_f
      +                          iles/i2c.c: 603:                                 uint16_t address,;mcc_generated_files/i
      +                          2c.c: 604:                                 I2C_MESSAGE_STATUS *pflag);mcc_generated_file
      +                          s/i2c.c: 605: {;mcc_generated_files/i2c.c: 606:     static I2C_TRANSACTION_REQUEST_BLOCK
      +                           trBlock;;mcc_generated_files/i2c.c: 609:     if (i2c_object.trStatus.s.full != 1)
  8251  1B2E  0022               	movlb	2	; select bank2
  8252  1B2F  1859               	btfsc	(_i2c_object^(0+256)+2),0
  8253  1B30  2B4E               	goto	l4484
  8254                           
  8255                           ;mcc_generated_files/i2c.c: 610:     {;mcc_generated_files/i2c.c: 611:         I2C_Maste
      +                          rWriteTRBBuild(&trBlock, pdata, length, address);
  8256  1B31  0020               	movlb	0	; select bank0
  8257  1B32  0829               	movf	I2C_MasterWrite@pdata,w
  8258  1B33  00A7               	movwf	??_I2C_MasterWrite
  8259  1B34  0827               	movf	??_I2C_MasterWrite,w
  8260  1B35  00F5               	movwf	I2C_MasterWriteTRBBuild@pdata
  8261  1B36  0823               	movf	I2C_MasterWrite@length,w
  8262  1B37  00A8               	movwf	??_I2C_MasterWrite+1
  8263  1B38  0828               	movf	??_I2C_MasterWrite+1,w
  8264  1B39  00F6               	movwf	I2C_MasterWriteTRBBuild@length
  8265  1B3A  0825               	movf	I2C_MasterWrite@address+1,w
  8266  1B3B  00F8               	movwf	I2C_MasterWriteTRBBuild@address+1
  8267  1B3C  0824               	movf	I2C_MasterWrite@address,w
  8268  1B3D  00F7               	movwf	I2C_MasterWriteTRBBuild@address
  8269  1B3E  30E0               	movlw	(low (I2C_MasterWrite@trBlock| (0+256)))& (0+255)
  8270  1B3F  319A  2276  319B   	fcall	_I2C_MasterWriteTRBBuild
  8271                           
  8272                           ;mcc_generated_files/i2c.c: 612:         I2C_MasterTRBInsert(1, &trBlock, pflag);
  8273  1B42  30E0               	movlw	(low (I2C_MasterWrite@trBlock| (0+256)))& (0+255)
  8274  1B43  00A7               	movwf	??_I2C_MasterWrite
  8275  1B44  0827               	movf	??_I2C_MasterWrite,w
  8276  1B45  00F5               	movwf	I2C_MasterTRBInsert@ptrb_list
  8277  1B46  0826               	movf	I2C_MasterWrite@pflag,w
  8278  1B47  00A8               	movwf	??_I2C_MasterWrite+1
  8279  1B48  0828               	movf	??_I2C_MasterWrite+1,w
  8280  1B49  00F6               	movwf	I2C_MasterTRBInsert@pflag
  8281  1B4A  3001               	movlw	1
  8282  1B4B  319F  2726         	fcall	_I2C_MasterTRBInsert
  8283                           
  8284                           ;mcc_generated_files/i2c.c: 613:     }
  8285  1B4D  0008               	return
  8286  1B4E                     l4484:	
  8287                           
  8288                           ;mcc_generated_files/i2c.c: 615:     {;mcc_generated_files/i2c.c: 616:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  8289  1B4E  0020               	movlb	0	; select bank0
  8290  1B4F  0826               	movf	I2C_MasterWrite@pflag,w
  8291  1B50  0086               	movwf	6
  8292  1B51  0187               	clrf	7
  8293  1B52  0181               	clrf	1
  8294  1B53  0A81               	incf	1,f
  8295  1B54  0008               	return
  8296  1B55                     __end_of_I2C_MasterWrite:	
  8297                           
  8298                           	psect	text20
  8299  1A76                     __ptext20:	
  8300 ;; *************** function _I2C_MasterWriteTRBBuild *****************
  8301 ;; Defined at:
  8302 ;;		line 721 in file "mcc_generated_files/i2c.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;  ptrb            1    wreg     PTR struct .
  8305 ;;		 -> I2C_MasterWrite@trBlock(5), 
  8306 ;;  pdata           1    5[COMMON] PTR unsigned char 
  8307 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  8308 ;;  length          1    6[COMMON] unsigned char 
  8309 ;;  address         2    7[COMMON] unsigned short 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;  ptrb            1    2[BANK0 ] PTR struct .
  8312 ;;		 -> I2C_MasterWrite@trBlock(5), 
  8313 ;; Return value:  Size  Location     Type
  8314 ;;                  1    wreg      void 
  8315 ;; Registers used:
  8316 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8317 ;; Tracked objects:
  8318 ;;		On entry : 1F/0
  8319 ;;		On exit  : 1F/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;Total ram usage:        7 bytes
  8327 ;; Hardware stack levels used:    1
  8328 ;; Hardware stack levels required when called:    3
  8329 ;; This function calls:
  8330 ;;		Nothing
  8331 ;; This function is called by:
  8332 ;;		_I2C_MasterWrite
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           
  8337                           ;psect for function _I2C_MasterWriteTRBBuild
  8338  1A76                     _I2C_MasterWriteTRBBuild:	
  8339                           
  8340                           ;incstack = 0
  8341                           ; Regs used in _I2C_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  8342                           ;I2C_MasterWriteTRBBuild@ptrb stored from wreg
  8343  1A76  00A2               	movwf	I2C_MasterWriteTRBBuild@ptrb
  8344                           
  8345                           ;mcc_generated_files/i2c.c: 722:                                 I2C_TRANSACTION_REQUEST
      +                          _BLOCK *ptrb,;mcc_generated_files/i2c.c: 723:                                 uint8_t *p
      +                          data,;mcc_generated_files/i2c.c: 724:                                 uint8_t length,;mc
      +                          c_generated_files/i2c.c: 725:                                 uint16_t address);mcc_gene
      +                          rated_files/i2c.c: 726: {;mcc_generated_files/i2c.c: 727:     ptrb->address = address <<
      +                           1;
  8346  1A77  0878               	movf	I2C_MasterWriteTRBBuild@address+1,w
  8347  1A78  00A1               	movwf	??_I2C_MasterWriteTRBBuild+1
  8348  1A79  0877               	movf	I2C_MasterWriteTRBBuild@address,w
  8349  1A7A  00A0               	movwf	??_I2C_MasterWriteTRBBuild
  8350  1A7B  35A0               	lslf	??_I2C_MasterWriteTRBBuild,f
  8351  1A7C  0DA1               	rlf	??_I2C_MasterWriteTRBBuild+1,f
  8352  1A7D  0822               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8353  1A7E  0086               	movwf	6
  8354  1A7F  3001               	movlw	1	; select bank2/3
  8355  1A80  0087               	movwf	7
  8356  1A81  0820               	movf	??_I2C_MasterWriteTRBBuild,w
  8357  1A82  3FC0               	movwi [0]fsr1
  8358  1A83  0821               	movf	??_I2C_MasterWriteTRBBuild+1,w
  8359  1A84  3FC1               	movwi [1]fsr1
  8360                           
  8361                           ;mcc_generated_files/i2c.c: 728:     ptrb->length = length;
  8362  1A85  0876               	movf	I2C_MasterWriteTRBBuild@length,w
  8363  1A86  00A0               	movwf	??_I2C_MasterWriteTRBBuild
  8364  1A87  0822               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8365  1A88  3E02               	addlw	2
  8366  1A89  0086               	movwf	6
  8367  1A8A  3001               	movlw	1	; select bank2/3
  8368  1A8B  0087               	movwf	7
  8369  1A8C  0820               	movf	??_I2C_MasterWriteTRBBuild,w
  8370  1A8D  0081               	movwf	1
  8371                           
  8372                           ;mcc_generated_files/i2c.c: 729:     ptrb->pbuffer = pdata;
  8373  1A8E  0822               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8374  1A8F  3E03               	addlw	3
  8375  1A90  0086               	movwf	6
  8376  1A91  3001               	movlw	1	; select bank2/3
  8377  1A92  0087               	movwf	7
  8378  1A93  0875               	movf	I2C_MasterWriteTRBBuild@pdata,w
  8379  1A94  3FC0               	movwi [0]fsr1
  8380  1A95  3000               	movlw	0
  8381  1A96  3FC1               	movwi [1]fsr1
  8382  1A97  0008               	return
  8383  1A98                     __end_of_I2C_MasterWriteTRBBuild:	
  8384                           
  8385                           	psect	text21
  8386  1B06                     __ptext21:	
  8387 ;; *************** function _I2C_MasterRead *****************
  8388 ;; Defined at:
  8389 ;;		line 621 in file "mcc_generated_files/i2c.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;  pdata           2    5[BANK0 ] PTR unsigned char 
  8392 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8393 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8394 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8395 ;;  length          1    7[BANK0 ] unsigned char 
  8396 ;;  address         2    8[BANK0 ] unsigned short 
  8397 ;;  pflag           1   10[BANK0 ] PTR enum E9631
  8398 ;;		 -> ReadEnvSensor@status(1), 
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  1    wreg      void 
  8403 ;; Registers used:
  8404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 1F/0
  8407 ;;		On exit  : 1D/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8410 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;Total ram usage:        8 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; Hardware stack levels required when called:    5
  8417 ;; This function calls:
  8418 ;;		_I2C_MasterReadTRBBuild
  8419 ;;		_I2C_MasterTRBInsert
  8420 ;; This function is called by:
  8421 ;;		_ReadEnvSensor
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           
  8426                           ;psect for function _I2C_MasterRead
  8427  1B06                     _I2C_MasterRead:	
  8428                           
  8429                           ;mcc_generated_files/i2c.c: 622:                                 uint8_t *pdata,;mcc_gen
      +                          erated_files/i2c.c: 623:                                 uint8_t length,;mcc_generated_f
      +                          iles/i2c.c: 624:                                 uint16_t address,;mcc_generated_files/i
      +                          2c.c: 625:                                 I2C_MESSAGE_STATUS *pflag);mcc_generated_file
      +                          s/i2c.c: 626: {;mcc_generated_files/i2c.c: 627:     static I2C_TRANSACTION_REQUEST_BLOCK
      +                           trBlock;;mcc_generated_files/i2c.c: 631:     if (i2c_object.trStatus.s.full != 1)
  8430                           
  8431                           ;incstack = 0
  8432                           ; Regs used in _I2C_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8433  1B06  0022               	movlb	2	; select bank2
  8434  1B07  1859               	btfsc	(_i2c_object^(0+256)+2),0
  8435  1B08  2B26               	goto	l4490
  8436                           
  8437                           ;mcc_generated_files/i2c.c: 632:     {;mcc_generated_files/i2c.c: 633:         I2C_Maste
      +                          rReadTRBBuild(&trBlock, pdata, length, address);
  8438  1B09  0020               	movlb	0	; select bank0
  8439  1B0A  0826               	movf	I2C_MasterRead@pdata+1,w
  8440  1B0B  00A1               	movwf	I2C_MasterReadTRBBuild@pdata+1
  8441  1B0C  0825               	movf	I2C_MasterRead@pdata,w
  8442  1B0D  00A0               	movwf	I2C_MasterReadTRBBuild@pdata
  8443  1B0E  0827               	movf	I2C_MasterRead@length,w
  8444  1B0F  00AB               	movwf	??_I2C_MasterRead
  8445  1B10  082B               	movf	??_I2C_MasterRead,w
  8446  1B11  00A2               	movwf	I2C_MasterReadTRBBuild@length
  8447  1B12  0829               	movf	I2C_MasterRead@address+1,w
  8448  1B13  00A4               	movwf	I2C_MasterReadTRBBuild@address+1
  8449  1B14  0828               	movf	I2C_MasterRead@address,w
  8450  1B15  00A3               	movwf	I2C_MasterReadTRBBuild@address
  8451  1B16  30DB               	movlw	(low (I2C_MasterRead@trBlock| (0+256)))& (0+255)
  8452  1B17  319B  23A9  319B   	fcall	_I2C_MasterReadTRBBuild
  8453                           
  8454                           ;mcc_generated_files/i2c.c: 634:         I2C_MasterTRBInsert(1, &trBlock, pflag);
  8455  1B1A  30DB               	movlw	(low (I2C_MasterRead@trBlock| (0+256)))& (0+255)
  8456  1B1B  00AB               	movwf	??_I2C_MasterRead
  8457  1B1C  082B               	movf	??_I2C_MasterRead,w
  8458  1B1D  00F5               	movwf	I2C_MasterTRBInsert@ptrb_list
  8459  1B1E  082A               	movf	I2C_MasterRead@pflag,w
  8460  1B1F  00AC               	movwf	??_I2C_MasterRead+1
  8461  1B20  082C               	movf	??_I2C_MasterRead+1,w
  8462  1B21  00F6               	movwf	I2C_MasterTRBInsert@pflag
  8463  1B22  3001               	movlw	1
  8464  1B23  319F  2726         	fcall	_I2C_MasterTRBInsert
  8465                           
  8466                           ;mcc_generated_files/i2c.c: 635:     }
  8467  1B25  0008               	return
  8468  1B26                     l4490:	
  8469                           
  8470                           ;mcc_generated_files/i2c.c: 637:     {;mcc_generated_files/i2c.c: 638:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  8471  1B26  0020               	movlb	0	; select bank0
  8472  1B27  082A               	movf	I2C_MasterRead@pflag,w
  8473  1B28  0086               	movwf	6
  8474  1B29  0187               	clrf	7
  8475  1B2A  0181               	clrf	1
  8476  1B2B  0A81               	incf	1,f
  8477  1B2C  0008               	return
  8478  1B2D                     __end_of_I2C_MasterRead:	
  8479                           
  8480                           	psect	text22
  8481  1F26                     __ptext22:	
  8482 ;; *************** function _I2C_MasterTRBInsert *****************
  8483 ;; Defined at:
  8484 ;;		line 654 in file "mcc_generated_files/i2c.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  count           1    wreg     unsigned char 
  8487 ;;  ptrb_list       1    5[COMMON] PTR struct .
  8488 ;;		 -> I2C_MasterRead@trBlock(5), I2C_MasterWrite@trBlock(5), 
  8489 ;;  pflag           1    6[COMMON] PTR enum E9631
  8490 ;;		 -> WriteEnvSensor@status(1), ReadEnvSensor@status(1), 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  count           1    8[COMMON] unsigned char 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  1    wreg      void 
  8495 ;; Registers used:
  8496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8497 ;; Tracked objects:
  8498 ;;		On entry : 1F/0
  8499 ;;		On exit  : 1D/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8502 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8504 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8505 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8506 ;;Total ram usage:        4 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    4
  8509 ;; This function calls:
  8510 ;;		_I2C_WaitForLastPacketToComplete
  8511 ;; This function is called by:
  8512 ;;		_I2C_MasterWrite
  8513 ;;		_I2C_MasterRead
  8514 ;; This function uses a non-reentrant model
  8515 ;;
  8516                           
  8517                           
  8518                           ;psect for function _I2C_MasterTRBInsert
  8519  1F26                     _I2C_MasterTRBInsert:	
  8520                           
  8521                           ;incstack = 0
  8522                           ; Regs used in _I2C_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8523                           ;I2C_MasterTRBInsert@count stored from wreg
  8524  1F26  00F8               	movwf	I2C_MasterTRBInsert@count
  8525                           
  8526                           ;mcc_generated_files/i2c.c: 655:                                 uint8_t count,;mcc_gene
      +                          rated_files/i2c.c: 656:                                 I2C_TRANSACTION_REQUEST_BLOCK *p
      +                          trb_list,;mcc_generated_files/i2c.c: 657:                                 I2C_MESSAGE_ST
      +                          ATUS *pflag);mcc_generated_files/i2c.c: 658: {;mcc_generated_files/i2c.c: 661:     if (i
      +                          2c_object.trStatus.s.full != 1)
  8527  1F27  0022               	movlb	2	; select bank2
  8528  1F28  1859               	btfsc	(_i2c_object^(0+256)+2),0
  8529  1F29  2F5D               	goto	l4470
  8530                           
  8531                           ;mcc_generated_files/i2c.c: 662:     {;mcc_generated_files/i2c.c: 663:         *pflag = 
      +                          I2C_MESSAGE_PENDING;
  8532  1F2A  3002               	movlw	2
  8533  1F2B  00F7               	movwf	??_I2C_MasterTRBInsert
  8534  1F2C  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8535  1F2D  0086               	movwf	6
  8536  1F2E  0187               	clrf	7
  8537  1F2F  0877               	movf	??_I2C_MasterTRBInsert,w
  8538  1F30  0081               	movwf	1
  8539                           
  8540                           ;mcc_generated_files/i2c.c: 665:         i2c_object.pTrTail->ptrb_list = ptrb_list;
  8541  1F31  0875               	movf	I2C_MasterTRBInsert@ptrb_list,w
  8542  1F32  00F7               	movwf	??_I2C_MasterTRBInsert
  8543  1F33  0A57               	incf	_i2c_object^(0+256),w
  8544  1F34  0086               	movwf	6
  8545  1F35  3001               	movlw	1	; select bank2/3
  8546  1F36  0087               	movwf	7
  8547  1F37  0877               	movf	??_I2C_MasterTRBInsert,w
  8548  1F38  0081               	movwf	1
  8549                           
  8550                           ;mcc_generated_files/i2c.c: 666:         i2c_object.pTrTail->count = count;
  8551  1F39  0878               	movf	I2C_MasterTRBInsert@count,w
  8552  1F3A  00F7               	movwf	??_I2C_MasterTRBInsert
  8553  1F3B  0857               	movf	_i2c_object^(0+256),w
  8554  1F3C  0086               	movwf	6
  8555  1F3D  3001               	movlw	1	; select bank2/3
  8556  1F3E  0087               	movwf	7
  8557  1F3F  0877               	movf	??_I2C_MasterTRBInsert,w
  8558  1F40  0081               	movwf	1
  8559                           
  8560                           ;mcc_generated_files/i2c.c: 667:         i2c_object.pTrTail->pTrFlag = pflag;
  8561  1F41  0857               	movf	_i2c_object^(0+256),w
  8562  1F42  3E02               	addlw	2
  8563  1F43  0086               	movwf	6
  8564  1F44  3001               	movlw	1	; select bank2/3
  8565  1F45  0087               	movwf	7
  8566  1F46  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8567  1F47  3FC0               	movwi [0]fsr1
  8568  1F48  3000               	movlw	0
  8569  1F49  3FC1               	movwi [1]fsr1
  8570                           
  8571                           ;mcc_generated_files/i2c.c: 668:         i2c_object.pTrTail++;
  8572  1F4A  3004               	movlw	4
  8573  1F4B  00F7               	movwf	??_I2C_MasterTRBInsert
  8574  1F4C  0877               	movf	??_I2C_MasterTRBInsert,w
  8575  1F4D  07D7               	addwf	_i2c_object^(0+256),f
  8576                           
  8577                           ;mcc_generated_files/i2c.c: 671:         if (i2c_object.pTrTail == (i2c_tr_queue + 1))
  8578  1F4E  0857               	movf	_i2c_object^(0+256),w
  8579  1F4F  3A6D               	xorlw	(low ((_i2c_tr_queue| (0+256)+4)))& (0+255)
  8580  1F50  1D03               	skipz
  8581  1F51  2F56               	goto	l4466
  8582                           
  8583                           ;mcc_generated_files/i2c.c: 672:         {;mcc_generated_files/i2c.c: 674:             i
      +                          2c_object.pTrTail = i2c_tr_queue;
  8584  1F52  3069               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
  8585  1F53  00F7               	movwf	??_I2C_MasterTRBInsert
  8586  1F54  0877               	movf	??_I2C_MasterTRBInsert,w
  8587  1F55  00D7               	movwf	_i2c_object^(0+256)
  8588  1F56                     l4466:	
  8589                           
  8590                           ;mcc_generated_files/i2c.c: 679:         i2c_object.trStatus.s.empty = 0;
  8591  1F56  10D9               	bcf	(_i2c_object^(0+256)+2),1
  8592                           
  8593                           ;mcc_generated_files/i2c.c: 682:         if (i2c_object.pTrHead == i2c_object.pTrTail)
  8594  1F57  0858               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
  8595  1F58  0657               	xorwf	_i2c_object^(0+256),w
  8596  1F59  1D03               	skipz
  8597  1F5A  2F62               	goto	l4472
  8598                           
  8599                           ;mcc_generated_files/i2c.c: 683:         {;mcc_generated_files/i2c.c: 685:             i
      +                          2c_object.trStatus.s.full = 1;
  8600  1F5B  1459               	bsf	(_i2c_object^(0+256)+2),0
  8601  1F5C  2F62               	goto	l4472
  8602  1F5D                     l4470:	
  8603                           
  8604                           ;mcc_generated_files/i2c.c: 690:     {;mcc_generated_files/i2c.c: 691:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  8605  1F5D  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8606  1F5E  0086               	movwf	6
  8607  1F5F  0187               	clrf	7
  8608  1F60  0181               	clrf	1
  8609  1F61  0A81               	incf	1,f
  8610  1F62                     l4472:	
  8611                           
  8612                           ;mcc_generated_files/i2c.c: 695:     if (*pflag == I2C_MESSAGE_PENDING)
  8613  1F62  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8614  1F63  0086               	movwf	6
  8615  1F64  0187               	clrf	7
  8616  1F65  3002               	movlw	2
  8617  1F66  0601               	xorwf	1,w
  8618  1F67  1D03               	btfss	3,2
  8619  1F68  0008               	return
  8620                           
  8621                           ;mcc_generated_files/i2c.c: 696:     {;mcc_generated_files/i2c.c: 697:         I2C_WaitF
      +                          orLastPacketToComplete();
  8622  1F69  3199  2144         	fcall	_I2C_WaitForLastPacketToComplete
  8623                           
  8624                           ;mcc_generated_files/i2c.c: 702:         PIR1bits.SSP1IF = 1;
  8625  1F6B  0020               	movlb	0	; select bank0
  8626  1F6C  1590               	bsf	16,3	;volatile
  8627  1F6D  0008               	return
  8628  1F6E                     __end_of_I2C_MasterTRBInsert:	
  8629                           
  8630                           	psect	text23
  8631  1944                     __ptext23:	
  8632 ;; *************** function _I2C_WaitForLastPacketToComplete *****************
  8633 ;; Defined at:
  8634 ;;		line 644 in file "mcc_generated_files/i2c.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;		None
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;		None
  8639 ;; Return value:  Size  Location     Type
  8640 ;;                  1    wreg      void 
  8641 ;; Registers used:
  8642 ;;		wreg, status,2, status,0
  8643 ;; Tracked objects:
  8644 ;;		On entry : 1F/2
  8645 ;;		On exit  : 1F/2
  8646 ;;		Unchanged: 0/0
  8647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8652 ;;Total ram usage:        0 bytes
  8653 ;; Hardware stack levels used:    1
  8654 ;; Hardware stack levels required when called:    3
  8655 ;; This function calls:
  8656 ;;		Nothing
  8657 ;; This function is called by:
  8658 ;;		_I2C_MasterTRBInsert
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           
  8663                           ;psect for function _I2C_WaitForLastPacketToComplete
  8664  1944                     _I2C_WaitForLastPacketToComplete:	
  8665  1944                     l4452:	
  8666                           ;mcc_generated_files/i2c.c: 646:     while(i2c_state != S_MASTER_IDLE)
  8667                           
  8668                           ;incstack = 0
  8669                           ; Regs used in _I2C_WaitForLastPacketToComplete: [wreg+status,2+status,0]
  8670                           
  8671                           
  8672                           ;mcc_generated_files/i2c.c: 646:     while(i2c_state != S_MASTER_IDLE)
  8673  1944  0868               	movf	_i2c_state^(0+256),w
  8674  1945  1903               	btfsc	3,2
  8675  1946  0008               	return
  8676  1947  2944               	goto	l4452
  8677  1948                     __end_of_I2C_WaitForLastPacketToComplete:	
  8678                           
  8679                           	psect	text24
  8680  1BA9                     __ptext24:	
  8681 ;; *************** function _I2C_MasterReadTRBBuild *****************
  8682 ;; Defined at:
  8683 ;;		line 708 in file "mcc_generated_files/i2c.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;  ptrb            1    wreg     PTR struct .
  8686 ;;		 -> I2C_MasterRead@trBlock(5), 
  8687 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
  8688 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8689 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8690 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8691 ;;  length          1    2[BANK0 ] unsigned char 
  8692 ;;  address         2    3[BANK0 ] unsigned short 
  8693 ;; Auto vars:     Size  Location     Type
  8694 ;;  ptrb            1    7[COMMON] PTR struct .
  8695 ;;		 -> I2C_MasterRead@trBlock(5), 
  8696 ;; Return value:  Size  Location     Type
  8697 ;;                  1    wreg      void 
  8698 ;; Registers used:
  8699 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8700 ;; Tracked objects:
  8701 ;;		On entry : 1F/0
  8702 ;;		On exit  : 1F/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8705 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;Total ram usage:        8 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    3
  8712 ;; This function calls:
  8713 ;;		Nothing
  8714 ;; This function is called by:
  8715 ;;		_I2C_MasterRead
  8716 ;; This function uses a non-reentrant model
  8717 ;;
  8718                           
  8719                           
  8720                           ;psect for function _I2C_MasterReadTRBBuild
  8721  1BA9                     _I2C_MasterReadTRBBuild:	
  8722                           
  8723                           ;incstack = 0
  8724                           ; Regs used in _I2C_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  8725                           ;I2C_MasterReadTRBBuild@ptrb stored from wreg
  8726  1BA9  00F7               	movwf	I2C_MasterReadTRBBuild@ptrb
  8727                           
  8728                           ;mcc_generated_files/i2c.c: 709:                                 I2C_TRANSACTION_REQUEST
      +                          _BLOCK *ptrb,;mcc_generated_files/i2c.c: 710:                                 uint8_t *p
      +                          data,;mcc_generated_files/i2c.c: 711:                                 uint8_t length,;mc
      +                          c_generated_files/i2c.c: 712:                                 uint16_t address);mcc_gene
      +                          rated_files/i2c.c: 713: {;mcc_generated_files/i2c.c: 714:     ptrb->address = address <<
      +                           1;
  8729  1BAA  0824               	movf	I2C_MasterReadTRBBuild@address+1,w
  8730  1BAB  00F6               	movwf	??_I2C_MasterReadTRBBuild+1
  8731  1BAC  0823               	movf	I2C_MasterReadTRBBuild@address,w
  8732  1BAD  00F5               	movwf	??_I2C_MasterReadTRBBuild
  8733  1BAE  35F5               	lslf	??_I2C_MasterReadTRBBuild,f
  8734  1BAF  0DF6               	rlf	??_I2C_MasterReadTRBBuild+1,f
  8735  1BB0  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  8736  1BB1  0086               	movwf	6
  8737  1BB2  3001               	movlw	1	; select bank2/3
  8738  1BB3  0087               	movwf	7
  8739  1BB4  0875               	movf	??_I2C_MasterReadTRBBuild,w
  8740  1BB5  3FC0               	movwi [0]fsr1
  8741  1BB6  0876               	movf	??_I2C_MasterReadTRBBuild+1,w
  8742  1BB7  3FC1               	movwi [1]fsr1
  8743                           
  8744                           ;mcc_generated_files/i2c.c: 716:     ptrb->address |= 0x01;
  8745  1BB8  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  8746  1BB9  0086               	movwf	6
  8747  1BBA  3001               	movlw	1	; select bank2/3
  8748  1BBB  0087               	movwf	7
  8749  1BBC  3001               	movlw	1
  8750  1BBD  0481               	iorwf	1,f
  8751  1BBE  3141               	addfsr 1,1
  8752  1BBF  3000               	movlw	0
  8753  1BC0  0481               	iorwf	1,f
  8754                           
  8755                           ;mcc_generated_files/i2c.c: 717:     ptrb->length = length;
  8756  1BC1  0822               	movf	I2C_MasterReadTRBBuild@length,w
  8757  1BC2  00F5               	movwf	??_I2C_MasterReadTRBBuild
  8758  1BC3  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  8759  1BC4  3E02               	addlw	2
  8760  1BC5  0086               	movwf	6
  8761  1BC6  3001               	movlw	1	; select bank2/3
  8762  1BC7  0087               	movwf	7
  8763  1BC8  0875               	movf	??_I2C_MasterReadTRBBuild,w
  8764  1BC9  0081               	movwf	1
  8765                           
  8766                           ;mcc_generated_files/i2c.c: 718:     ptrb->pbuffer = pdata;
  8767  1BCA  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  8768  1BCB  3E03               	addlw	3
  8769  1BCC  0086               	movwf	6
  8770  1BCD  3001               	movlw	1	; select bank2/3
  8771  1BCE  0087               	movwf	7
  8772  1BCF  0820               	movf	I2C_MasterReadTRBBuild@pdata,w
  8773  1BD0  3FC0               	movwi [0]fsr1
  8774  1BD1  0821               	movf	I2C_MasterReadTRBBuild@pdata+1,w
  8775  1BD2  3FC1               	movwi [1]fsr1
  8776  1BD3  0008               	return
  8777  1BD4                     __end_of_I2C_MasterReadTRBBuild:	
  8778                           
  8779                           	psect	text25
  8780  12E0                     __ptext25:	
  8781 ;; *************** function _bme280_compensate_data *****************
  8782 ;; Defined at:
  8783 ;;		line 729 in file "BME280_driver/bme280.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  sensor_comp     1    wreg     unsigned char 
  8786 ;;  uncomp_data     1   69[BANK1 ] PTR const struct bme280_
  8787 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8788 ;;  comp_data       1   70[BANK1 ] PTR struct bme280_data
  8789 ;;		 -> main@sensor_data(12), 
  8790 ;;  calib_data      1   71[BANK1 ] PTR struct bme280_calib_
  8791 ;;		 -> main@env_sensor(51), 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  sensor_comp     1   74[BANK1 ] unsigned char 
  8794 ;;  rslt            1   73[BANK1 ] char 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      char 
  8797 ;; Registers used:
  8798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 1F/2
  8801 ;;		On exit  : 1F/1
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8804 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;Total ram usage:        6 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    5
  8811 ;; This function calls:
  8812 ;;		_compensate_pressure
  8813 ;;		_compensate_temperature
  8814 ;; This function is called by:
  8815 ;;		_bme280_get_sensor_data
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           
  8820                           ;psect for function _bme280_compensate_data
  8821  12E0                     _bme280_compensate_data:	
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _bme280_compensate_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8825                           ;bme280_compensate_data@sensor_comp stored from wreg
  8826  12E0  0021               	movlb	1	; select bank1
  8827  12E1  00EA               	movwf	bme280_compensate_data@sensor_comp^(0+128)
  8828                           
  8829                           ;BME280_driver/bme280.c: 729: int8_t bme280_compensate_data(uint8_t sensor_comp,;BME280_
      +                          driver/bme280.c: 730:                               const struct bme280_uncomp_data *unc
      +                          omp_data,;BME280_driver/bme280.c: 731:                               struct bme280_data 
      +                          *comp_data,;BME280_driver/bme280.c: 732:                               struct bme280_cal
      +                          ib_data *calib_data);BME280_driver/bme280.c: 733: {;BME280_driver/bme280.c: 734:     int
      +                          8_t rslt = 0;
  8830  12E2  01E9               	clrf	bme280_compensate_data@rslt^(0+128)
  8831                           
  8832                           ;BME280_driver/bme280.c: 736:     if ((uncomp_data != ((void*)0)) && (comp_data != ((voi
      +                          d*)0)) && (calib_data != ((void*)0)))
  8833  12E3  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  8834  12E4  1903               	btfsc	3,2
  8835  12E5  2B54               	goto	l124
  8836  12E6  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8837  12E7  1903               	btfsc	3,2
  8838  12E8  2B54               	goto	l124
  8839  12E9  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  8840  12EA  1903               	btfsc	3,2
  8841  12EB  2B54               	goto	l124
  8842                           
  8843                           ;BME280_driver/bme280.c: 737:     {;BME280_driver/bme280.c: 739:         comp_data->temp
      +                          erature = 0;
  8844  12EC  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8845  12ED  3E04               	addlw	4
  8846  12EE  0086               	movwf	6
  8847  12EF  3001               	movlw	1	; select bank2/3
  8848  12F0  0087               	movwf	7
  8849  12F1  3000               	movlw	0
  8850  12F2  3FC0               	movwi [0]fsr1
  8851  12F3  3000               	movlw	0
  8852  12F4  3FC1               	movwi [1]fsr1
  8853  12F5  3FC2               	movwi [2]fsr1
  8854  12F6  3FC3               	movwi [3]fsr1
  8855                           
  8856                           ;BME280_driver/bme280.c: 740:         comp_data->pressure = 0;
  8857  12F7  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8858  12F8  0086               	movwf	6
  8859  12F9  3001               	movlw	1	; select bank2/3
  8860  12FA  0087               	movwf	7
  8861  12FB  3000               	movlw	0
  8862  12FC  3FC0               	movwi [0]fsr1
  8863  12FD  3FC1               	movwi [1]fsr1
  8864  12FE  3FC2               	movwi [2]fsr1
  8865  12FF  3FC3               	movwi [3]fsr1
  8866                           
  8867                           ;BME280_driver/bme280.c: 741:         comp_data->humidity = 0;
  8868  1300  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8869  1301  3E08               	addlw	8
  8870  1302  0086               	movwf	6
  8871  1303  3001               	movlw	1	; select bank2/3
  8872  1304  0087               	movwf	7
  8873  1305  3000               	movlw	0
  8874  1306  3FC0               	movwi [0]fsr1
  8875  1307  3000               	movlw	0
  8876  1308  3FC1               	movwi [1]fsr1
  8877  1309  3FC2               	movwi [2]fsr1
  8878  130A  3FC3               	movwi [3]fsr1
  8879                           
  8880                           ;BME280_driver/bme280.c: 744:         if (sensor_comp & (1 | 1 << 1 | 1 << 2))
  8881  130B  086A               	movf	bme280_compensate_data@sensor_comp^(0+128),w
  8882  130C  3907               	andlw	7
  8883  130D  1903               	btfsc	3,2
  8884  130E  2B28               	goto	l5058
  8885                           
  8886                           ;BME280_driver/bme280.c: 745:         {;BME280_driver/bme280.c: 747:             comp_da
      +                          ta->temperature = compensate_temperature(uncomp_data, calib_data);
  8887  130F  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  8888  1310  00E8               	movwf	??_bme280_compensate_data^(0+128)
  8889  1311  0868               	movf	??_bme280_compensate_data^(0+128),w
  8890  1312  0020               	movlb	0	; select bank0
  8891  1313  00B7               	movwf	compensate_temperature@calib_data
  8892  1314  0021               	movlb	1	; select bank1
  8893  1315  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  8894  1316  3182  2287  3192   	fcall	_compensate_temperature
  8895  1319  0021               	movlb	1	; select bank1
  8896  131A  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8897  131B  3E04               	addlw	4
  8898  131C  0086               	movwf	6
  8899  131D  3001               	movlw	1	; select bank2/3
  8900  131E  0087               	movwf	7
  8901  131F  0020               	movlb	0	; select bank0
  8902  1320  0837               	movf	?_compensate_temperature,w
  8903  1321  3FC0               	movwi [0]fsr1
  8904  1322  0838               	movf	?_compensate_temperature+1,w
  8905  1323  3FC1               	movwi [1]fsr1
  8906  1324  0839               	movf	?_compensate_temperature+2,w
  8907  1325  3FC2               	movwi [2]fsr1
  8908  1326  083A               	movf	?_compensate_temperature+3,w
  8909  1327  3FC3               	movwi [3]fsr1
  8910  1328                     l5058:	
  8911                           
  8912                           ;BME280_driver/bme280.c: 749:         if (sensor_comp & 1)
  8913  1328  0021               	movlb	1	; select bank1
  8914  1329  1C6A               	btfss	bme280_compensate_data@sensor_comp^(0+128),0
  8915  132A  2B43               	goto	l5062
  8916                           
  8917                           ;BME280_driver/bme280.c: 750:         {;BME280_driver/bme280.c: 752:             comp_da
      +                          ta->pressure = compensate_pressure(uncomp_data, calib_data);
  8918  132B  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  8919  132C  00E8               	movwf	??_bme280_compensate_data^(0+128)
  8920  132D  0868               	movf	??_bme280_compensate_data^(0+128),w
  8921  132E  0020               	movlb	0	; select bank0
  8922  132F  00D2               	movwf	compensate_pressure@calib_data
  8923  1330  0021               	movlb	1	; select bank1
  8924  1331  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  8925  1332  3195  25A1  3192   	fcall	_compensate_pressure
  8926  1335  0021               	movlb	1	; select bank1
  8927  1336  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8928  1337  0086               	movwf	6
  8929  1338  3001               	movlw	1	; select bank2/3
  8930  1339  0087               	movwf	7
  8931  133A  0020               	movlb	0	; select bank0
  8932  133B  0852               	movf	?_compensate_pressure,w
  8933  133C  3FC0               	movwi [0]fsr1
  8934  133D  0853               	movf	?_compensate_pressure+1,w
  8935  133E  3FC1               	movwi [1]fsr1
  8936  133F  0854               	movf	?_compensate_pressure+2,w
  8937  1340  3FC2               	movwi [2]fsr1
  8938  1341  0855               	movf	?_compensate_pressure+3,w
  8939  1342  3FC3               	movwi [3]fsr1
  8940  1343                     l5062:	
  8941                           
  8942                           ;BME280_driver/bme280.c: 754:         if (sensor_comp & 1 << 2)
  8943  1343  0021               	movlb	1	; select bank1
  8944  1344  1D6A               	btfss	bme280_compensate_data@sensor_comp^(0+128),2
  8945  1345  2B56               	goto	l5066
  8946                           
  8947                           ;BME280_driver/bme280.c: 755:         {;BME280_driver/bme280.c: 761:             comp_da
      +                          ta->humidity = 0xFFFF;
  8948  1346  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8949  1347  3E08               	addlw	8
  8950  1348  0086               	movwf	6
  8951  1349  3001               	movlw	1	; select bank2/3
  8952  134A  0087               	movwf	7
  8953  134B  30FF               	movlw	255
  8954  134C  3FC0               	movwi [0]fsr1
  8955  134D  30FF               	movlw	255
  8956  134E  3FC1               	movwi [1]fsr1
  8957  134F  3000               	movlw	0
  8958  1350  3FC2               	movwi [2]fsr1
  8959  1351  3000               	movlw	0
  8960  1352  3FC3               	movwi [3]fsr1
  8961  1353  2B56               	goto	l5066
  8962  1354                     l124:	
  8963                           ;BME280_driver/bme280.c: 765:     else
  8964                           
  8965                           
  8966                           ;BME280_driver/bme280.c: 766:     {;BME280_driver/bme280.c: 767:         rslt = -1;
  8967  1354  01E9               	clrf	bme280_compensate_data@rslt^(0+128)
  8968  1355  03E9               	decf	bme280_compensate_data@rslt^(0+128),f
  8969  1356                     l5066:	
  8970                           
  8971                           ;BME280_driver/bme280.c: 770:     return rslt;
  8972  1356  0869               	movf	bme280_compensate_data@rslt^(0+128),w
  8973  1357  0008               	return
  8974  1358                     __end_of_bme280_compensate_data:	
  8975                           
  8976                           	psect	text26
  8977  0287                     __ptext26:	
  8978 ;; *************** function _compensate_temperature *****************
  8979 ;; Defined at:
  8980 ;;		line 1126 in file "BME280_driver/bme280.c"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  8983 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8984 ;;  calib_data      1   23[BANK0 ] PTR struct bme280_calib_
  8985 ;;		 -> main@env_sensor(51), 
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  uncomp_data     1   53[BANK0 ] PTR const struct bme280_
  8988 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8989 ;;  temperature     4   58[BANK0 ] long 
  8990 ;;  var2            4   54[BANK0 ] long 
  8991 ;;  var1            4   49[BANK0 ] long 
  8992 ;;  temperature_    4   45[BANK0 ] long 
  8993 ;;  temperature_    4    0        long 
  8994 ;; Return value:  Size  Location     Type
  8995 ;;                  4   23[BANK0 ] long 
  8996 ;; Registers used:
  8997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8998 ;; Tracked objects:
  8999 ;;		On entry : 1F/1
  9000 ;;		On exit  : 1F/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9003 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;Total ram usage:       39 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; Hardware stack levels required when called:    4
  9010 ;; This function calls:
  9011 ;;		___aldiv
  9012 ;;		___lmul
  9013 ;; This function is called by:
  9014 ;;		_bme280_compensate_data
  9015 ;; This function uses a non-reentrant model
  9016 ;;
  9017                           
  9018                           
  9019                           ;psect for function _compensate_temperature
  9020  0287                     _compensate_temperature:	
  9021                           
  9022                           ;incstack = 0
  9023                           ; Regs used in _compensate_temperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9024                           ;compensate_temperature@uncomp_data stored from wreg
  9025  0287  0020               	movlb	0	; select bank0
  9026  0288  00D5               	movwf	compensate_temperature@uncomp_data
  9027                           
  9028                           ;BME280_driver/bme280.c: 1133:     int32_t temperature_max = 8500;
  9029  0289  3000               	movlw	0
  9030  028A  00D0               	movwf	compensate_temperature@temperature_max+3
  9031  028B  3000               	movlw	0
  9032  028C  00CF               	movwf	compensate_temperature@temperature_max+2
  9033  028D  3021               	movlw	33
  9034  028E  00CE               	movwf	compensate_temperature@temperature_max+1
  9035  028F  3034               	movlw	52
  9036  0290  00CD               	movwf	compensate_temperature@temperature_max
  9037                           
  9038                           ;BME280_driver/bme280.c: 1135:     var1 = (int32_t)((uncomp_data->temperature / 8) - ((i
      +                          nt32_t)calib_data->dig_T1 * 2));
  9039  0291  0837               	movf	compensate_temperature@calib_data,w
  9040  0292  0086               	movwf	6
  9041  0293  3001               	movlw	1	; select bank2/3
  9042  0294  0087               	movwf	7
  9043  0295  3F40               	moviw [0]fsr1
  9044  0296  00BB               	movwf	??_compensate_temperature
  9045  0297  3F41               	moviw [1]fsr1
  9046  0298  00BC               	movwf	??_compensate_temperature+1
  9047  0299  083B               	movf	??_compensate_temperature,w
  9048  029A  00BD               	movwf	??_compensate_temperature+2
  9049  029B  083C               	movf	??_compensate_temperature+1,w
  9050  029C  00BE               	movwf	??_compensate_temperature+3
  9051  029D  01BF               	clrf	??_compensate_temperature+4
  9052  029E  01C0               	clrf	??_compensate_temperature+5
  9053  029F  3001               	movlw	1
  9054  02A0                     u4935:	
  9055  02A0  35BD               	lslf	??_compensate_temperature+2,f
  9056  02A1  0DBE               	rlf	??_compensate_temperature+3,f
  9057  02A2  0DBF               	rlf	??_compensate_temperature+4,f
  9058  02A3  0DC0               	rlf	??_compensate_temperature+5,f
  9059  02A4  0B89               	decfsz	9,f
  9060  02A5  2AA0               	goto	u4935
  9061  02A6  0855               	movf	compensate_temperature@uncomp_data,w
  9062  02A7  3E04               	addlw	4
  9063  02A8  0086               	movwf	6
  9064  02A9  3001               	movlw	1	; select bank2/3
  9065  02AA  0087               	movwf	7
  9066  02AB  3F40               	moviw [0]fsr1
  9067  02AC  00C1               	movwf	??_compensate_temperature+6
  9068  02AD  3F41               	moviw [1]fsr1
  9069  02AE  00C2               	movwf	??_compensate_temperature+7
  9070  02AF  3F42               	moviw [2]fsr1
  9071  02B0  00C3               	movwf	??_compensate_temperature+8
  9072  02B1  3F43               	moviw [3]fsr1
  9073  02B2  00C4               	movwf	??_compensate_temperature+9
  9074  02B3  3003               	movlw	3
  9075  02B4                     u4945:	
  9076  02B4  36C4               	lsrf	??_compensate_temperature+9,f
  9077  02B5  0CC3               	rrf	??_compensate_temperature+8,f
  9078  02B6  0CC2               	rrf	??_compensate_temperature+7,f
  9079  02B7  0CC1               	rrf	??_compensate_temperature+6,f
  9080  02B8  0B89               	decfsz	9,f
  9081  02B9  2AB4               	goto	u4945
  9082  02BA  083D               	movf	??_compensate_temperature+2,w
  9083  02BB  02C1               	subwf	??_compensate_temperature+6,f
  9084  02BC  083E               	movf	??_compensate_temperature+3,w
  9085  02BD  3BC2               	subwfb	??_compensate_temperature+7,f
  9086  02BE  083F               	movf	??_compensate_temperature+4,w
  9087  02BF  3BC3               	subwfb	??_compensate_temperature+8,f
  9088  02C0  0840               	movf	??_compensate_temperature+5,w
  9089  02C1  3BC4               	subwfb	??_compensate_temperature+9,f
  9090  02C2  0844               	movf	??_compensate_temperature+9,w
  9091  02C3  00D4               	movwf	compensate_temperature@var1+3
  9092  02C4  0843               	movf	??_compensate_temperature+8,w
  9093  02C5  00D3               	movwf	compensate_temperature@var1+2
  9094  02C6  0842               	movf	??_compensate_temperature+7,w
  9095  02C7  00D2               	movwf	compensate_temperature@var1+1
  9096  02C8  0841               	movf	??_compensate_temperature+6,w
  9097  02C9  00D1               	movwf	compensate_temperature@var1
  9098                           
  9099                           ;BME280_driver/bme280.c: 1136:     var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
  9100  02CA  3000               	movlw	0
  9101  02CB  00AB               	movwf	___aldiv@divisor+3
  9102  02CC  3000               	movlw	0
  9103  02CD  00AA               	movwf	___aldiv@divisor+2
  9104  02CE  3008               	movlw	8
  9105  02CF  00A9               	movwf	___aldiv@divisor+1
  9106  02D0  3000               	movlw	0
  9107  02D1  00A8               	movwf	___aldiv@divisor
  9108  02D2  0837               	movf	compensate_temperature@calib_data,w
  9109  02D3  3E02               	addlw	2
  9110  02D4  0086               	movwf	6
  9111  02D5  3001               	movlw	1	; select bank2/3
  9112  02D6  0087               	movwf	7
  9113  02D7  3F40               	moviw [0]fsr1
  9114  02D8  00BB               	movwf	??_compensate_temperature
  9115  02D9  3F41               	moviw [1]fsr1
  9116  02DA  00BC               	movwf	??_compensate_temperature+1
  9117  02DB  083B               	movf	??_compensate_temperature,w
  9118  02DC  00A0               	movwf	___lmul@multiplier
  9119  02DD  083C               	movf	??_compensate_temperature+1,w
  9120  02DE  00A1               	movwf	___lmul@multiplier+1
  9121  02DF  0D89               	rlf	9,f
  9122  02E0  3B89               	subwfb	9,f
  9123  02E1  0989               	comf	9,f
  9124  02E2  00A2               	movwf	___lmul@multiplier+2
  9125  02E3  00A3               	movwf	___lmul@multiplier+3
  9126  02E4  0854               	movf	compensate_temperature@var1+3,w
  9127  02E5  00A7               	movwf	___lmul@multiplicand+3
  9128  02E6  0853               	movf	compensate_temperature@var1+2,w
  9129  02E7  00A6               	movwf	___lmul@multiplicand+2
  9130  02E8  0852               	movf	compensate_temperature@var1+1,w
  9131  02E9  00A5               	movwf	___lmul@multiplicand+1
  9132  02EA  0851               	movf	compensate_temperature@var1,w
  9133  02EB  00A4               	movwf	___lmul@multiplicand
  9134  02EC  319C  2486  3182   	fcall	___lmul
  9135  02EF  0823               	movf	?___lmul+3,w
  9136  02F0  00AF               	movwf	___aldiv@dividend+3
  9137  02F1  0822               	movf	?___lmul+2,w
  9138  02F2  00AE               	movwf	___aldiv@dividend+2
  9139  02F3  0821               	movf	?___lmul+1,w
  9140  02F4  00AD               	movwf	___aldiv@dividend+1
  9141  02F5  0820               	movf	?___lmul,w
  9142  02F6  00AC               	movwf	___aldiv@dividend
  9143  02F7  3193  2358  3182   	fcall	___aldiv
  9144  02FA  082B               	movf	?___aldiv+3,w
  9145  02FB  00D4               	movwf	compensate_temperature@var1+3
  9146  02FC  082A               	movf	?___aldiv+2,w
  9147  02FD  00D3               	movwf	compensate_temperature@var1+2
  9148  02FE  0829               	movf	?___aldiv+1,w
  9149  02FF  00D2               	movwf	compensate_temperature@var1+1
  9150  0300  0828               	movf	?___aldiv,w
  9151  0301  00D1               	movwf	compensate_temperature@var1
  9152                           
  9153                           ;BME280_driver/bme280.c: 1137:     var2 = (int32_t)((uncomp_data->temperature / 16) - ((
      +                          int32_t)calib_data->dig_T1));
  9154  0302  0837               	movf	compensate_temperature@calib_data,w
  9155  0303  0086               	movwf	6
  9156  0304  3001               	movlw	1	; select bank2/3
  9157  0305  0087               	movwf	7
  9158  0306  3F40               	moviw [0]fsr1
  9159  0307  00BB               	movwf	??_compensate_temperature
  9160  0308  3F41               	moviw [1]fsr1
  9161  0309  00BC               	movwf	??_compensate_temperature+1
  9162  030A  083B               	movf	??_compensate_temperature,w
  9163  030B  00BD               	movwf	??_compensate_temperature+2
  9164  030C  083C               	movf	??_compensate_temperature+1,w
  9165  030D  00BE               	movwf	??_compensate_temperature+3
  9166  030E  01BF               	clrf	??_compensate_temperature+4
  9167  030F  01C0               	clrf	??_compensate_temperature+5
  9168  0310  0855               	movf	compensate_temperature@uncomp_data,w
  9169  0311  3E04               	addlw	4
  9170  0312  0086               	movwf	6
  9171  0313  3001               	movlw	1	; select bank2/3
  9172  0314  0087               	movwf	7
  9173  0315  3F40               	moviw [0]fsr1
  9174  0316  00C1               	movwf	??_compensate_temperature+6
  9175  0317  3F41               	moviw [1]fsr1
  9176  0318  00C2               	movwf	??_compensate_temperature+7
  9177  0319  3F42               	moviw [2]fsr1
  9178  031A  00C3               	movwf	??_compensate_temperature+8
  9179  031B  3F43               	moviw [3]fsr1
  9180  031C  00C4               	movwf	??_compensate_temperature+9
  9181  031D  3004               	movlw	4
  9182  031E                     u4955:	
  9183  031E  36C4               	lsrf	??_compensate_temperature+9,f
  9184  031F  0CC3               	rrf	??_compensate_temperature+8,f
  9185  0320  0CC2               	rrf	??_compensate_temperature+7,f
  9186  0321  0CC1               	rrf	??_compensate_temperature+6,f
  9187  0322  0B89               	decfsz	9,f
  9188  0323  2B1E               	goto	u4955
  9189  0324  083D               	movf	??_compensate_temperature+2,w
  9190  0325  02C1               	subwf	??_compensate_temperature+6,f
  9191  0326  083E               	movf	??_compensate_temperature+3,w
  9192  0327  3BC2               	subwfb	??_compensate_temperature+7,f
  9193  0328  083F               	movf	??_compensate_temperature+4,w
  9194  0329  3BC3               	subwfb	??_compensate_temperature+8,f
  9195  032A  0840               	movf	??_compensate_temperature+5,w
  9196  032B  3BC4               	subwfb	??_compensate_temperature+9,f
  9197  032C  0844               	movf	??_compensate_temperature+9,w
  9198  032D  00D9               	movwf	compensate_temperature@var2+3
  9199  032E  0843               	movf	??_compensate_temperature+8,w
  9200  032F  00D8               	movwf	compensate_temperature@var2+2
  9201  0330  0842               	movf	??_compensate_temperature+7,w
  9202  0331  00D7               	movwf	compensate_temperature@var2+1
  9203  0332  0841               	movf	??_compensate_temperature+6,w
  9204  0333  00D6               	movwf	compensate_temperature@var2
  9205                           
  9206                           ;BME280_driver/bme280.c: 1138:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  9207  0334  3000               	movlw	0
  9208  0335  00AB               	movwf	___aldiv@divisor+3
  9209  0336  3000               	movlw	0
  9210  0337  00AA               	movwf	___aldiv@divisor+2
  9211  0338  3010               	movlw	16
  9212  0339  00A9               	movwf	___aldiv@divisor+1
  9213  033A  3000               	movlw	0
  9214  033B  00A8               	movwf	___aldiv@divisor
  9215  033C  0859               	movf	compensate_temperature@var2+3,w
  9216  033D  00A3               	movwf	___lmul@multiplier+3
  9217  033E  0858               	movf	compensate_temperature@var2+2,w
  9218  033F  00A2               	movwf	___lmul@multiplier+2
  9219  0340  0857               	movf	compensate_temperature@var2+1,w
  9220  0341  00A1               	movwf	___lmul@multiplier+1
  9221  0342  0856               	movf	compensate_temperature@var2,w
  9222  0343  00A0               	movwf	___lmul@multiplier
  9223  0344  0859               	movf	compensate_temperature@var2+3,w
  9224  0345  00A7               	movwf	___lmul@multiplicand+3
  9225  0346  0858               	movf	compensate_temperature@var2+2,w
  9226  0347  00A6               	movwf	___lmul@multiplicand+2
  9227  0348  0857               	movf	compensate_temperature@var2+1,w
  9228  0349  00A5               	movwf	___lmul@multiplicand+1
  9229  034A  0856               	movf	compensate_temperature@var2,w
  9230  034B  00A4               	movwf	___lmul@multiplicand
  9231  034C  319C  2486  3182   	fcall	___lmul
  9232  034F  0823               	movf	?___lmul+3,w
  9233  0350  00AF               	movwf	___aldiv@dividend+3
  9234  0351  0822               	movf	?___lmul+2,w
  9235  0352  00AE               	movwf	___aldiv@dividend+2
  9236  0353  0821               	movf	?___lmul+1,w
  9237  0354  00AD               	movwf	___aldiv@dividend+1
  9238  0355  0820               	movf	?___lmul,w
  9239  0356  00AC               	movwf	___aldiv@dividend
  9240  0357  3193  2358  3182   	fcall	___aldiv
  9241  035A  082B               	movf	?___aldiv+3,w
  9242  035B  00C8               	movwf	_compensate_temperature$2548+3
  9243  035C  082A               	movf	?___aldiv+2,w
  9244  035D  00C7               	movwf	_compensate_temperature$2548+2
  9245  035E  0829               	movf	?___aldiv+1,w
  9246  035F  00C6               	movwf	_compensate_temperature$2548+1
  9247  0360  0828               	movf	?___aldiv,w
  9248  0361  00C5               	movwf	_compensate_temperature$2548
  9249                           
  9250                           ;BME280_driver/bme280.c: 1138:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  9251  0362  3000               	movlw	0
  9252  0363  00AB               	movwf	___aldiv@divisor+3
  9253  0364  3000               	movlw	0
  9254  0365  00AA               	movwf	___aldiv@divisor+2
  9255  0366  3040               	movlw	64
  9256  0367  00A9               	movwf	___aldiv@divisor+1
  9257  0368  3000               	movlw	0
  9258  0369  00A8               	movwf	___aldiv@divisor
  9259  036A  0848               	movf	_compensate_temperature$2548+3,w
  9260  036B  00A3               	movwf	___lmul@multiplier+3
  9261  036C  0847               	movf	_compensate_temperature$2548+2,w
  9262  036D  00A2               	movwf	___lmul@multiplier+2
  9263  036E  0846               	movf	_compensate_temperature$2548+1,w
  9264  036F  00A1               	movwf	___lmul@multiplier+1
  9265  0370  0845               	movf	_compensate_temperature$2548,w
  9266  0371  00A0               	movwf	___lmul@multiplier
  9267  0372  0837               	movf	compensate_temperature@calib_data,w
  9268  0373  3E04               	addlw	4
  9269  0374  0086               	movwf	6
  9270  0375  3001               	movlw	1	; select bank2/3
  9271  0376  0087               	movwf	7
  9272  0377  3F40               	moviw [0]fsr1
  9273  0378  00BB               	movwf	??_compensate_temperature
  9274  0379  3F41               	moviw [1]fsr1
  9275  037A  00BC               	movwf	??_compensate_temperature+1
  9276  037B  083B               	movf	??_compensate_temperature,w
  9277  037C  00A4               	movwf	___lmul@multiplicand
  9278  037D  083C               	movf	??_compensate_temperature+1,w
  9279  037E  00A5               	movwf	___lmul@multiplicand+1
  9280  037F  0D89               	rlf	9,f
  9281  0380  3B89               	subwfb	9,f
  9282  0381  0989               	comf	9,f
  9283  0382  00A6               	movwf	___lmul@multiplicand+2
  9284  0383  00A7               	movwf	___lmul@multiplicand+3
  9285  0384  319C  2486  3182   	fcall	___lmul
  9286  0387  0823               	movf	?___lmul+3,w
  9287  0388  00AF               	movwf	___aldiv@dividend+3
  9288  0389  0822               	movf	?___lmul+2,w
  9289  038A  00AE               	movwf	___aldiv@dividend+2
  9290  038B  0821               	movf	?___lmul+1,w
  9291  038C  00AD               	movwf	___aldiv@dividend+1
  9292  038D  0820               	movf	?___lmul,w
  9293  038E  00AC               	movwf	___aldiv@dividend
  9294  038F  3193  2358  3182   	fcall	___aldiv
  9295  0392  082B               	movf	?___aldiv+3,w
  9296  0393  00D9               	movwf	compensate_temperature@var2+3
  9297  0394  082A               	movf	?___aldiv+2,w
  9298  0395  00D8               	movwf	compensate_temperature@var2+2
  9299  0396  0829               	movf	?___aldiv+1,w
  9300  0397  00D7               	movwf	compensate_temperature@var2+1
  9301  0398  0828               	movf	?___aldiv,w
  9302  0399  00D6               	movwf	compensate_temperature@var2
  9303                           
  9304                           ;BME280_driver/bme280.c: 1139:     calib_data->t_fine = var1 + var2;
  9305  039A  0851               	movf	compensate_temperature@var1,w
  9306  039B  0756               	addwf	compensate_temperature@var2,w
  9307  039C  00BB               	movwf	??_compensate_temperature
  9308  039D  0852               	movf	compensate_temperature@var1+1,w
  9309  039E  3D57               	addwfc	compensate_temperature@var2+1,w
  9310  039F  00BC               	movwf	??_compensate_temperature+1
  9311  03A0  0853               	movf	compensate_temperature@var1+2,w
  9312  03A1  3D58               	addwfc	compensate_temperature@var2+2,w
  9313  03A2  00BD               	movwf	??_compensate_temperature+2
  9314  03A3  0854               	movf	compensate_temperature@var1+3,w
  9315  03A4  3D59               	addwfc	compensate_temperature@var2+3,w
  9316  03A5  00BE               	movwf	??_compensate_temperature+3
  9317  03A6  0837               	movf	compensate_temperature@calib_data,w
  9318  03A7  3E21               	addlw	33
  9319  03A8  0086               	movwf	6
  9320  03A9  3001               	movlw	1	; select bank2/3
  9321  03AA  0087               	movwf	7
  9322  03AB  083B               	movf	??_compensate_temperature,w
  9323  03AC  3FC0               	movwi [0]fsr1
  9324  03AD  083C               	movf	??_compensate_temperature+1,w
  9325  03AE  3FC1               	movwi [1]fsr1
  9326  03AF  083D               	movf	??_compensate_temperature+2,w
  9327  03B0  3FC2               	movwi [2]fsr1
  9328  03B1  083E               	movf	??_compensate_temperature+3,w
  9329  03B2  3FC3               	movwi [3]fsr1
  9330                           
  9331                           ;BME280_driver/bme280.c: 1140:     temperature = (calib_data->t_fine * 5 + 128) / 256;
  9332  03B3  3000               	movlw	0
  9333  03B4  00AB               	movwf	___aldiv@divisor+3
  9334  03B5  3000               	movlw	0
  9335  03B6  00AA               	movwf	___aldiv@divisor+2
  9336  03B7  3001               	movlw	1
  9337  03B8  00A9               	movwf	___aldiv@divisor+1
  9338  03B9  3000               	movlw	0
  9339  03BA  00A8               	movwf	___aldiv@divisor
  9340  03BB  3080               	movlw	128
  9341  03BC  00BB               	movwf	??_compensate_temperature
  9342  03BD  3000               	movlw	0
  9343  03BE  00BC               	movwf	??_compensate_temperature+1
  9344  03BF  3000               	movlw	0
  9345  03C0  00BD               	movwf	??_compensate_temperature+2
  9346  03C1  3000               	movlw	0
  9347  03C2  00BE               	movwf	??_compensate_temperature+3
  9348  03C3  0837               	movf	compensate_temperature@calib_data,w
  9349  03C4  3E21               	addlw	33
  9350  03C5  0086               	movwf	6
  9351  03C6  3001               	movlw	1	; select bank2/3
  9352  03C7  0087               	movwf	7
  9353  03C8  3F40               	moviw [0]fsr1
  9354  03C9  00A0               	movwf	___lmul@multiplier
  9355  03CA  3F41               	moviw [1]fsr1
  9356  03CB  00A1               	movwf	___lmul@multiplier+1
  9357  03CC  3F42               	moviw [2]fsr1
  9358  03CD  00A2               	movwf	___lmul@multiplier+2
  9359  03CE  3F43               	moviw [3]fsr1
  9360  03CF  00A3               	movwf	___lmul@multiplier+3
  9361  03D0  3000               	movlw	0
  9362  03D1  00A7               	movwf	___lmul@multiplicand+3
  9363  03D2  3000               	movlw	0
  9364  03D3  00A6               	movwf	___lmul@multiplicand+2
  9365  03D4  3000               	movlw	0
  9366  03D5  00A5               	movwf	___lmul@multiplicand+1
  9367  03D6  3005               	movlw	5
  9368  03D7  00A4               	movwf	___lmul@multiplicand
  9369  03D8  319C  2486  3182   	fcall	___lmul
  9370  03DB  0820               	movf	?___lmul,w
  9371  03DC  07BB               	addwf	??_compensate_temperature,f
  9372  03DD  0821               	movf	?___lmul+1,w
  9373  03DE  3DBC               	addwfc	??_compensate_temperature+1,f
  9374  03DF  0822               	movf	?___lmul+2,w
  9375  03E0  3DBD               	addwfc	??_compensate_temperature+2,f
  9376  03E1  0823               	movf	?___lmul+3,w
  9377  03E2  3DBE               	addwfc	??_compensate_temperature+3,f
  9378  03E3  083E               	movf	??_compensate_temperature+3,w
  9379  03E4  00AF               	movwf	___aldiv@dividend+3
  9380  03E5  083D               	movf	??_compensate_temperature+2,w
  9381  03E6  00AE               	movwf	___aldiv@dividend+2
  9382  03E7  083C               	movf	??_compensate_temperature+1,w
  9383  03E8  00AD               	movwf	___aldiv@dividend+1
  9384  03E9  083B               	movf	??_compensate_temperature,w
  9385  03EA  00AC               	movwf	___aldiv@dividend
  9386  03EB  3193  2358  3182   	fcall	___aldiv
  9387  03EE  082B               	movf	?___aldiv+3,w
  9388  03EF  00DD               	movwf	compensate_temperature@temperature+3
  9389  03F0  082A               	movf	?___aldiv+2,w
  9390  03F1  00DC               	movwf	compensate_temperature@temperature+2
  9391  03F2  0829               	movf	?___aldiv+1,w
  9392  03F3  00DB               	movwf	compensate_temperature@temperature+1
  9393  03F4  0828               	movf	?___aldiv,w
  9394  03F5  00DA               	movwf	compensate_temperature@temperature
  9395                           
  9396                           ;BME280_driver/bme280.c: 1141:     if (temperature < temperature_min)
  9397  03F6  1FDD               	btfss	compensate_temperature@temperature+3,7
  9398  03F7  2C0A               	goto	l4794
  9399  03F8  3060               	movlw	96
  9400  03F9  025A               	subwf	compensate_temperature@temperature,w
  9401  03FA  30F0               	movlw	240
  9402  03FB  3B5B               	subwfb	compensate_temperature@temperature+1,w
  9403  03FC  30FF               	movlw	255
  9404  03FD  3B5C               	subwfb	compensate_temperature@temperature+2,w
  9405  03FE  30FF               	movlw	255
  9406  03FF  3B5D               	subwfb	compensate_temperature@temperature+3,w
  9407  0400  1803               	btfsc	3,0
  9408  0401  2C0A               	goto	l4794
  9409                           
  9410                           ;BME280_driver/bme280.c: 1142:     {;BME280_driver/bme280.c: 1143:         temperature =
      +                           temperature_min;
  9411  0402  30FF               	movlw	255
  9412  0403  00DD               	movwf	compensate_temperature@temperature+3
  9413  0404  30FF               	movlw	255
  9414  0405  00DC               	movwf	compensate_temperature@temperature+2
  9415  0406  30F0               	movlw	240
  9416  0407  00DB               	movwf	compensate_temperature@temperature+1
  9417  0408  3060               	movlw	96
  9418  0409  2C1F               	goto	L3
  9419  040A                     l4794:	
  9420                           ;BME280_driver/bme280.c: 1144:     }
  9421                           
  9422  040A  1BDD               	btfsc	compensate_temperature@temperature+3,7
  9423  040B  2C20               	goto	l183
  9424  040C  085D               	movf	compensate_temperature@temperature+3,w
  9425  040D  1D03               	btfss	3,2
  9426  040E  2C18               	goto	l4796
  9427  040F  085C               	movf	compensate_temperature@temperature+2,w
  9428  0410  1D03               	btfss	3,2
  9429  0411  2C18               	goto	l4796
  9430  0412  3035               	movlw	53
  9431  0413  025A               	subwf	compensate_temperature@temperature,w
  9432  0414  3021               	movlw	33
  9433  0415  3B5B               	subwfb	compensate_temperature@temperature+1,w
  9434  0416  1C03               	btfss	3,0
  9435  0417  2C20               	goto	l183
  9436  0418                     l4796:	
  9437                           
  9438                           ;BME280_driver/bme280.c: 1146:     {;BME280_driver/bme280.c: 1147:         temperature =
      +                           temperature_max;
  9439  0418  3000               	movlw	0
  9440  0419  00DD               	movwf	compensate_temperature@temperature+3
  9441  041A  3000               	movlw	0
  9442  041B  00DC               	movwf	compensate_temperature@temperature+2
  9443  041C  3021               	movlw	33
  9444  041D  00DB               	movwf	compensate_temperature@temperature+1
  9445  041E  3034               	movlw	52
  9446  041F                     L3:	
  9447  041F  00DA               	movwf	compensate_temperature@temperature
  9448  0420                     l183:	
  9449                           
  9450                           ;BME280_driver/bme280.c: 1150:     return temperature;
  9451  0420  085D               	movf	compensate_temperature@temperature+3,w
  9452  0421  00BA               	movwf	?_compensate_temperature+3
  9453  0422  085C               	movf	compensate_temperature@temperature+2,w
  9454  0423  00B9               	movwf	?_compensate_temperature+2
  9455  0424  085B               	movf	compensate_temperature@temperature+1,w
  9456  0425  00B8               	movwf	?_compensate_temperature+1
  9457  0426  085A               	movf	compensate_temperature@temperature,w
  9458  0427  00B7               	movwf	?_compensate_temperature
  9459  0428  0008               	return
  9460  0429                     __end_of_compensate_temperature:	
  9461                           
  9462                           	psect	text27
  9463  1C86                     __ptext27:	
  9464 ;; *************** function ___lmul *****************
  9465 ;; Defined at:
  9466 ;;		line 15 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\Umul32.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;  multiplier      4    0[BANK0 ] unsigned long 
  9469 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;  product         4    5[COMMON] unsigned long 
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  4    0[BANK0 ] unsigned long 
  9474 ;; Registers used:
  9475 ;;		wreg, status,2, status,0
  9476 ;; Tracked objects:
  9477 ;;		On entry : 1F/0
  9478 ;;		On exit  : 1F/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9481 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;Total ram usage:       12 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    3
  9488 ;; This function calls:
  9489 ;;		Nothing
  9490 ;; This function is called by:
  9491 ;;		_compensate_temperature
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           
  9496                           ;psect for function ___lmul
  9497  1C86                     ___lmul:	
  9498                           
  9499                           ;incstack = 0
  9500                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9501  1C86  3000               	movlw	0
  9502  1C87  00F8               	movwf	___lmul@product+3
  9503  1C88  3000               	movlw	0
  9504  1C89  00F7               	movwf	___lmul@product+2
  9505  1C8A  3000               	movlw	0
  9506  1C8B  00F6               	movwf	___lmul@product+1
  9507  1C8C  3000               	movlw	0
  9508  1C8D  00F5               	movwf	___lmul@product
  9509  1C8E                     l4568:	
  9510  1C8E  1C20               	btfss	___lmul@multiplier,0
  9511  1C8F  2C98               	goto	l4572
  9512  1C90  0824               	movf	___lmul@multiplicand,w
  9513  1C91  07F5               	addwf	___lmul@product,f
  9514  1C92  0825               	movf	___lmul@multiplicand+1,w
  9515  1C93  3DF6               	addwfc	___lmul@product+1,f
  9516  1C94  0826               	movf	___lmul@multiplicand+2,w
  9517  1C95  3DF7               	addwfc	___lmul@product+2,f
  9518  1C96  0827               	movf	___lmul@multiplicand+3,w
  9519  1C97  3DF8               	addwfc	___lmul@product+3,f
  9520  1C98                     l4572:	
  9521  1C98  3001               	movlw	1
  9522  1C99                     u4445:	
  9523  1C99  35A4               	lslf	___lmul@multiplicand,f
  9524  1C9A  0DA5               	rlf	___lmul@multiplicand+1,f
  9525  1C9B  0DA6               	rlf	___lmul@multiplicand+2,f
  9526  1C9C  0DA7               	rlf	___lmul@multiplicand+3,f
  9527  1C9D  0B89               	decfsz	9,f
  9528  1C9E  2C99               	goto	u4445
  9529  1C9F  3001               	movlw	1
  9530  1CA0                     u4455:	
  9531  1CA0  36A3               	lsrf	___lmul@multiplier+3,f
  9532  1CA1  0CA2               	rrf	___lmul@multiplier+2,f
  9533  1CA2  0CA1               	rrf	___lmul@multiplier+1,f
  9534  1CA3  0CA0               	rrf	___lmul@multiplier,f
  9535  1CA4  0B89               	decfsz	9,f
  9536  1CA5  2CA0               	goto	u4455
  9537  1CA6  0823               	movf	___lmul@multiplier+3,w
  9538  1CA7  0422               	iorwf	___lmul@multiplier+2,w
  9539  1CA8  0421               	iorwf	___lmul@multiplier+1,w
  9540  1CA9  0420               	iorwf	___lmul@multiplier,w
  9541  1CAA  1D03               	skipz
  9542  1CAB  2C8E               	goto	l4568
  9543  1CAC  0878               	movf	___lmul@product+3,w
  9544  1CAD  00A3               	movwf	?___lmul+3
  9545  1CAE  0877               	movf	___lmul@product+2,w
  9546  1CAF  00A2               	movwf	?___lmul+2
  9547  1CB0  0876               	movf	___lmul@product+1,w
  9548  1CB1  00A1               	movwf	?___lmul+1
  9549  1CB2  0875               	movf	___lmul@product,w
  9550  1CB3  00A0               	movwf	?___lmul
  9551  1CB4  0008               	return
  9552  1CB5                     __end_of___lmul:	
  9553                           
  9554                           	psect	text28
  9555  1358                     __ptext28:	
  9556 ;; *************** function ___aldiv *****************
  9557 ;; Defined at:
  9558 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aldiv.c"
  9559 ;; Parameters:    Size  Location     Type
  9560 ;;  divisor         4    8[BANK0 ] long 
  9561 ;;  dividend        4   12[BANK0 ] long 
  9562 ;; Auto vars:     Size  Location     Type
  9563 ;;  quotient        4   19[BANK0 ] long 
  9564 ;;  sign            1   18[BANK0 ] unsigned char 
  9565 ;;  counter         1   17[BANK0 ] unsigned char 
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  4    8[BANK0 ] long 
  9568 ;; Registers used:
  9569 ;;		wreg, status,2, status,0
  9570 ;; Tracked objects:
  9571 ;;		On entry : 1F/0
  9572 ;;		On exit  : 1F/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9575 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;Total ram usage:       15 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    3
  9582 ;; This function calls:
  9583 ;;		Nothing
  9584 ;; This function is called by:
  9585 ;;		_compensate_temperature
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           
  9590                           ;psect for function ___aldiv
  9591  1358                     ___aldiv:	
  9592                           
  9593                           ;incstack = 0
  9594                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9595  1358  01B2               	clrf	___aldiv@sign
  9596  1359  1FAB               	btfss	___aldiv@divisor+3,7
  9597  135A  2B68               	goto	l1018
  9598  135B  09A8               	comf	___aldiv@divisor,f
  9599  135C  09A9               	comf	___aldiv@divisor+1,f
  9600  135D  09AA               	comf	___aldiv@divisor+2,f
  9601  135E  09AB               	comf	___aldiv@divisor+3,f
  9602  135F  0AA8               	incf	___aldiv@divisor,f
  9603  1360  1903               	skipnz
  9604  1361  0AA9               	incf	___aldiv@divisor+1,f
  9605  1362  1903               	skipnz
  9606  1363  0AAA               	incf	___aldiv@divisor+2,f
  9607  1364  1903               	skipnz
  9608  1365  0AAB               	incf	___aldiv@divisor+3,f
  9609  1366  01B2               	clrf	___aldiv@sign
  9610  1367  0AB2               	incf	___aldiv@sign,f
  9611  1368                     l1018:	
  9612  1368  1FAF               	btfss	___aldiv@dividend+3,7
  9613  1369  2B79               	goto	l4600
  9614  136A  09AC               	comf	___aldiv@dividend,f
  9615  136B  09AD               	comf	___aldiv@dividend+1,f
  9616  136C  09AE               	comf	___aldiv@dividend+2,f
  9617  136D  09AF               	comf	___aldiv@dividend+3,f
  9618  136E  0AAC               	incf	___aldiv@dividend,f
  9619  136F  1903               	skipnz
  9620  1370  0AAD               	incf	___aldiv@dividend+1,f
  9621  1371  1903               	skipnz
  9622  1372  0AAE               	incf	___aldiv@dividend+2,f
  9623  1373  1903               	skipnz
  9624  1374  0AAF               	incf	___aldiv@dividend+3,f
  9625  1375  3001               	movlw	1
  9626  1376  00B0               	movwf	??___aldiv
  9627  1377  0830               	movf	??___aldiv,w
  9628  1378  06B2               	xorwf	___aldiv@sign,f
  9629  1379                     l4600:	
  9630  1379  3000               	movlw	0
  9631  137A  00B6               	movwf	___aldiv@quotient+3
  9632  137B  3000               	movlw	0
  9633  137C  00B5               	movwf	___aldiv@quotient+2
  9634  137D  3000               	movlw	0
  9635  137E  00B4               	movwf	___aldiv@quotient+1
  9636  137F  3000               	movlw	0
  9637  1380  00B3               	movwf	___aldiv@quotient
  9638  1381  082B               	movf	___aldiv@divisor+3,w
  9639  1382  042A               	iorwf	___aldiv@divisor+2,w
  9640  1383  0429               	iorwf	___aldiv@divisor+1,w
  9641  1384  0428               	iorwf	___aldiv@divisor,w
  9642  1385  1903               	skipnz
  9643  1386  2BC2               	goto	l4622
  9644  1387  01B1               	clrf	___aldiv@counter
  9645  1388  0AB1               	incf	___aldiv@counter,f
  9646  1389                     l4608:	
  9647  1389  1BAB               	btfsc	___aldiv@divisor+3,7
  9648  138A  2B97               	goto	l4610
  9649  138B  3001               	movlw	1
  9650  138C                     u4535:	
  9651  138C  35A8               	lslf	___aldiv@divisor,f
  9652  138D  0DA9               	rlf	___aldiv@divisor+1,f
  9653  138E  0DAA               	rlf	___aldiv@divisor+2,f
  9654  138F  0DAB               	rlf	___aldiv@divisor+3,f
  9655  1390  0B89               	decfsz	9,f
  9656  1391  2B8C               	goto	u4535
  9657  1392  3001               	movlw	1
  9658  1393  00B0               	movwf	??___aldiv
  9659  1394  0830               	movf	??___aldiv,w
  9660  1395  07B1               	addwf	___aldiv@counter,f
  9661  1396  2B89               	goto	l4608
  9662  1397                     l4610:	
  9663  1397  3001               	movlw	1
  9664  1398                     u4555:	
  9665  1398  35B3               	lslf	___aldiv@quotient,f
  9666  1399  0DB4               	rlf	___aldiv@quotient+1,f
  9667  139A  0DB5               	rlf	___aldiv@quotient+2,f
  9668  139B  0DB6               	rlf	___aldiv@quotient+3,f
  9669  139C  0B89               	decfsz	9,f
  9670  139D  2B98               	goto	u4555
  9671  139E  082B               	movf	___aldiv@divisor+3,w
  9672  139F  022F               	subwf	___aldiv@dividend+3,w
  9673  13A0  1D03               	skipz
  9674  13A1  2BAC               	goto	u4565
  9675  13A2  082A               	movf	___aldiv@divisor+2,w
  9676  13A3  022E               	subwf	___aldiv@dividend+2,w
  9677  13A4  1D03               	skipz
  9678  13A5  2BAC               	goto	u4565
  9679  13A6  0829               	movf	___aldiv@divisor+1,w
  9680  13A7  022D               	subwf	___aldiv@dividend+1,w
  9681  13A8  1D03               	skipz
  9682  13A9  2BAC               	goto	u4565
  9683  13AA  0828               	movf	___aldiv@divisor,w
  9684  13AB  022C               	subwf	___aldiv@dividend,w
  9685  13AC                     u4565:	
  9686  13AC  1C03               	skipc
  9687  13AD  2BB7               	goto	l4618
  9688  13AE  0828               	movf	___aldiv@divisor,w
  9689  13AF  02AC               	subwf	___aldiv@dividend,f
  9690  13B0  0829               	movf	___aldiv@divisor+1,w
  9691  13B1  3BAD               	subwfb	___aldiv@dividend+1,f
  9692  13B2  082A               	movf	___aldiv@divisor+2,w
  9693  13B3  3BAE               	subwfb	___aldiv@dividend+2,f
  9694  13B4  082B               	movf	___aldiv@divisor+3,w
  9695  13B5  3BAF               	subwfb	___aldiv@dividend+3,f
  9696  13B6  1433               	bsf	___aldiv@quotient,0
  9697  13B7                     l4618:	
  9698  13B7  3001               	movlw	1
  9699  13B8                     u4575:	
  9700  13B8  36AB               	lsrf	___aldiv@divisor+3,f
  9701  13B9  0CAA               	rrf	___aldiv@divisor+2,f
  9702  13BA  0CA9               	rrf	___aldiv@divisor+1,f
  9703  13BB  0CA8               	rrf	___aldiv@divisor,f
  9704  13BC  0B89               	decfsz	9,f
  9705  13BD  2BB8               	goto	u4575
  9706  13BE  3001               	movlw	1
  9707  13BF  02B1               	subwf	___aldiv@counter,f
  9708  13C0  1D03               	btfss	3,2
  9709  13C1  2B97               	goto	l4610
  9710  13C2                     l4622:	
  9711  13C2  0832               	movf	___aldiv@sign,w
  9712  13C3  1903               	btfsc	3,2
  9713  13C4  2BD0               	goto	l4626
  9714  13C5  09B3               	comf	___aldiv@quotient,f
  9715  13C6  09B4               	comf	___aldiv@quotient+1,f
  9716  13C7  09B5               	comf	___aldiv@quotient+2,f
  9717  13C8  09B6               	comf	___aldiv@quotient+3,f
  9718  13C9  0AB3               	incf	___aldiv@quotient,f
  9719  13CA  1903               	skipnz
  9720  13CB  0AB4               	incf	___aldiv@quotient+1,f
  9721  13CC  1903               	skipnz
  9722  13CD  0AB5               	incf	___aldiv@quotient+2,f
  9723  13CE  1903               	skipnz
  9724  13CF  0AB6               	incf	___aldiv@quotient+3,f
  9725  13D0                     l4626:	
  9726  13D0  0836               	movf	___aldiv@quotient+3,w
  9727  13D1  00AB               	movwf	?___aldiv+3
  9728  13D2  0835               	movf	___aldiv@quotient+2,w
  9729  13D3  00AA               	movwf	?___aldiv+2
  9730  13D4  0834               	movf	___aldiv@quotient+1,w
  9731  13D5  00A9               	movwf	?___aldiv+1
  9732  13D6  0833               	movf	___aldiv@quotient,w
  9733  13D7  00A8               	movwf	?___aldiv
  9734  13D8  0008               	return
  9735  13D9                     __end_of___aldiv:	
  9736                           
  9737                           	psect	text29
  9738  15A1                     __ptext29:	
  9739 ;; *************** function _compensate_pressure *****************
  9740 ;; Defined at:
  9741 ;;		line 1159 in file "BME280_driver/bme280.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  9744 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9745 ;;  calib_data      1   50[BANK0 ] PTR const struct bme280_
  9746 ;;		 -> main@env_sensor(51), 
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;  uncomp_data     1   24[BANK1 ] PTR const struct bme280_
  9749 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9750 ;;  var1            8   61[BANK1 ] long long 
  9751 ;;  var4            8   53[BANK1 ] long long 
  9752 ;;  var2            8   45[BANK1 ] long long 
  9753 ;;  var3            8    0        long long 
  9754 ;;  pressure        4   41[BANK1 ] unsigned long 
  9755 ;;  pressure_min    4    0        unsigned long 
  9756 ;;  pressure_max    4   25[BANK1 ] unsigned long 
  9757 ;; Return value:  Size  Location     Type
  9758 ;;                  4   50[BANK0 ] unsigned long 
  9759 ;; Registers used:
  9760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9761 ;; Tracked objects:
  9762 ;;		On entry : 1F/1
  9763 ;;		On exit  : 1F/0
  9764 ;;		Unchanged: 0/0
  9765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9766 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;      Temps:          0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Totals:         0      30      69       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;Total ram usage:       99 bytes
  9771 ;; Hardware stack levels used:    1
  9772 ;; Hardware stack levels required when called:    4
  9773 ;; This function calls:
  9774 ;;		___aodiv
  9775 ;;		___omul
  9776 ;; This function is called by:
  9777 ;;		_bme280_compensate_data
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           
  9782                           ;psect for function _compensate_pressure
  9783  15A1                     _compensate_pressure:	
  9784                           
  9785                           ;incstack = 0
  9786                           ; Regs used in _compensate_pressure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9787                           ;compensate_pressure@uncomp_data stored from wreg
  9788  15A1  00B8               	movwf	compensate_pressure@uncomp_data^(0+128)
  9789                           
  9790                           ;BME280_driver/bme280.c: 1168:     uint32_t pressure_max = 11000000;
  9791  15A2  3000               	movlw	0
  9792  15A3  00BC               	movwf	(compensate_pressure@pressure_max+3)^(0+128)
  9793  15A4  30A7               	movlw	167
  9794  15A5  00BB               	movwf	(compensate_pressure@pressure_max+2)^(0+128)
  9795  15A6  30D8               	movlw	216
  9796  15A7  00BA               	movwf	(compensate_pressure@pressure_max+1)^(0+128)
  9797  15A8  30C0               	movlw	192
  9798  15A9  00B9               	movwf	compensate_pressure@pressure_max^(0+128)
  9799                           
  9800                           ;BME280_driver/bme280.c: 1170:     var1 = ((int64_t)calib_data->t_fine) - 128000;
  9801  15AA  3000               	movlw	0
  9802  15AB  0020               	movlb	0	; select bank0
  9803  15AC  00D6               	movwf	??_compensate_pressure
  9804  15AD  300C               	movlw	12
  9805  15AE  00D7               	movwf	??_compensate_pressure+1
  9806  15AF  30FE               	movlw	254
  9807  15B0  00D8               	movwf	??_compensate_pressure+2
  9808  15B1  30FF               	movlw	255
  9809  15B2  00D9               	movwf	??_compensate_pressure+3
  9810  15B3  30FF               	movlw	255
  9811  15B4  00DA               	movwf	??_compensate_pressure+4
  9812  15B5  30FF               	movlw	255
  9813  15B6  00DB               	movwf	??_compensate_pressure+5
  9814  15B7  30FF               	movlw	255
  9815  15B8  00DC               	movwf	??_compensate_pressure+6
  9816  15B9  30FF               	movlw	255
  9817  15BA  00DD               	movwf	??_compensate_pressure+7
  9818  15BB  0852               	movf	compensate_pressure@calib_data,w
  9819  15BC  3E21               	addlw	33
  9820  15BD  0086               	movwf	6
  9821  15BE  3001               	movlw	1	; select bank2/3
  9822  15BF  0087               	movwf	7
  9823  15C0  3F40               	moviw [0]fsr1
  9824  15C1  00DE               	movwf	??_compensate_pressure+8
  9825  15C2  3F41               	moviw [1]fsr1
  9826  15C3  00DF               	movwf	??_compensate_pressure+9
  9827  15C4  3F42               	moviw [2]fsr1
  9828  15C5  00E0               	movwf	??_compensate_pressure+10
  9829  15C6  3F43               	moviw [3]fsr1
  9830  15C7  00E1               	movwf	??_compensate_pressure+11
  9831  15C8  085E               	movf	??_compensate_pressure+8,w
  9832  15C9  00E2               	movwf	??_compensate_pressure+12
  9833  15CA  085F               	movf	??_compensate_pressure+9,w
  9834  15CB  00E3               	movwf	??_compensate_pressure+13
  9835  15CC  0860               	movf	??_compensate_pressure+10,w
  9836  15CD  00E4               	movwf	??_compensate_pressure+14
  9837  15CE  0861               	movf	??_compensate_pressure+11,w
  9838  15CF  00E5               	movwf	??_compensate_pressure+15
  9839  15D0  3000               	movlw	0
  9840  15D1  1BE5               	btfsc	??_compensate_pressure+15,7
  9841  15D2  30FF               	movlw	255
  9842  15D3  00E6               	movwf	??_compensate_pressure+16
  9843  15D4  00E7               	movwf	??_compensate_pressure+17
  9844  15D5  00E8               	movwf	??_compensate_pressure+18
  9845  15D6  00E9               	movwf	??_compensate_pressure+19
  9846  15D7  0862               	movf	??_compensate_pressure+12,w
  9847  15D8  07D6               	addwf	??_compensate_pressure,f
  9848  15D9  0863               	movf	??_compensate_pressure+13,w
  9849  15DA  3DD7               	addwfc	??_compensate_pressure+1,f
  9850  15DB  0864               	movf	??_compensate_pressure+14,w
  9851  15DC  3DD8               	addwfc	??_compensate_pressure+2,f
  9852  15DD  0865               	movf	??_compensate_pressure+15,w
  9853  15DE  3DD9               	addwfc	??_compensate_pressure+3,f
  9854  15DF  0866               	movf	??_compensate_pressure+16,w
  9855  15E0  3DDA               	addwfc	??_compensate_pressure+4,f
  9856  15E1  0867               	movf	??_compensate_pressure+17,w
  9857  15E2  3DDB               	addwfc	??_compensate_pressure+5,f
  9858  15E3  0868               	movf	??_compensate_pressure+18,w
  9859  15E4  3DDC               	addwfc	??_compensate_pressure+6,f
  9860  15E5  0869               	movf	??_compensate_pressure+19,w
  9861  15E6  3DDD               	addwfc	??_compensate_pressure+7,f
  9862  15E7  085D               	movf	??_compensate_pressure+7,w
  9863  15E8  0021               	movlb	1	; select bank1
  9864  15E9  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
  9865  15EA  0020               	movlb	0	; select bank0
  9866  15EB  085C               	movf	??_compensate_pressure+6,w
  9867  15EC  0021               	movlb	1	; select bank1
  9868  15ED  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
  9869  15EE  0020               	movlb	0	; select bank0
  9870  15EF  085B               	movf	??_compensate_pressure+5,w
  9871  15F0  0021               	movlb	1	; select bank1
  9872  15F1  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
  9873  15F2  0020               	movlb	0	; select bank0
  9874  15F3  085A               	movf	??_compensate_pressure+4,w
  9875  15F4  0021               	movlb	1	; select bank1
  9876  15F5  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
  9877  15F6  0020               	movlb	0	; select bank0
  9878  15F7  0859               	movf	??_compensate_pressure+3,w
  9879  15F8  0021               	movlb	1	; select bank1
  9880  15F9  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
  9881  15FA  0020               	movlb	0	; select bank0
  9882  15FB  0858               	movf	??_compensate_pressure+2,w
  9883  15FC  0021               	movlb	1	; select bank1
  9884  15FD  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
  9885  15FE  0020               	movlb	0	; select bank0
  9886  15FF  0857               	movf	??_compensate_pressure+1,w
  9887  1600  0021               	movlb	1	; select bank1
  9888  1601  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
  9889  1602  0020               	movlb	0	; select bank0
  9890  1603  0856               	movf	??_compensate_pressure,w
  9891  1604  0021               	movlb	1	; select bank1
  9892  1605  00DD               	movwf	compensate_pressure@var1^(0+128)
  9893                           
  9894                           ;BME280_driver/bme280.c: 1171:     var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
  9895  1606  0020               	movlb	0	; select bank0
  9896  1607  0852               	movf	compensate_pressure@calib_data,w
  9897  1608  3E10               	addlw	16
  9898  1609  0086               	movwf	6
  9899  160A  3001               	movlw	1	; select bank2/3
  9900  160B  0087               	movwf	7
  9901  160C  3F40               	moviw [0]fsr1
  9902  160D  00D6               	movwf	??_compensate_pressure
  9903  160E  3F41               	moviw [1]fsr1
  9904  160F  00D7               	movwf	??_compensate_pressure+1
  9905  1610  0856               	movf	??_compensate_pressure,w
  9906  1611  00A0               	movwf	___omul@multiplier
  9907  1612  0857               	movf	??_compensate_pressure+1,w
  9908  1613  00A1               	movwf	___omul@multiplier+1
  9909  1614  0D89               	rlf	9,f
  9910  1615  3B89               	subwfb	9,f
  9911  1616  0989               	comf	9,f
  9912  1617  00A2               	movwf	___omul@multiplier+2
  9913  1618  00A3               	movwf	___omul@multiplier+3
  9914  1619  00A4               	movwf	___omul@multiplier+4
  9915  161A  00A5               	movwf	___omul@multiplier+5
  9916  161B  00A6               	movwf	___omul@multiplier+6
  9917  161C  00A7               	movwf	___omul@multiplier+7
  9918  161D  0021               	movlb	1	; select bank1
  9919  161E  085D               	movf	compensate_pressure@var1^(0+128),w
  9920  161F  0020               	movlb	0	; select bank0
  9921  1620  00A8               	movwf	___omul@multiplicand
  9922  1621  0021               	movlb	1	; select bank1
  9923  1622  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
  9924  1623  0020               	movlb	0	; select bank0
  9925  1624  00A9               	movwf	___omul@multiplicand+1
  9926  1625  0021               	movlb	1	; select bank1
  9927  1626  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
  9928  1627  0020               	movlb	0	; select bank0
  9929  1628  00AA               	movwf	___omul@multiplicand+2
  9930  1629  0021               	movlb	1	; select bank1
  9931  162A  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
  9932  162B  0020               	movlb	0	; select bank0
  9933  162C  00AB               	movwf	___omul@multiplicand+3
  9934  162D  0021               	movlb	1	; select bank1
  9935  162E  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
  9936  162F  0020               	movlb	0	; select bank0
  9937  1630  00AC               	movwf	___omul@multiplicand+4
  9938  1631  0021               	movlb	1	; select bank1
  9939  1632  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
  9940  1633  0020               	movlb	0	; select bank0
  9941  1634  00AD               	movwf	___omul@multiplicand+5
  9942  1635  0021               	movlb	1	; select bank1
  9943  1636  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
  9944  1637  0020               	movlb	0	; select bank0
  9945  1638  00AE               	movwf	___omul@multiplicand+6
  9946  1639  0021               	movlb	1	; select bank1
  9947  163A  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
  9948  163B  0020               	movlb	0	; select bank0
  9949  163C  00AF               	movwf	___omul@multiplicand+7
  9950  163D  319E  26DF         	fcall	___omul
  9951  163F  0820               	movf	?___omul,w
  9952  1640  3188  2833         	ljmp	L7
  9953                           
  9954                           	psect	text30
  9955  1EDF                     __ptext30:	
  9956 ;; *************** function ___omul *****************
  9957 ;; Defined at:
  9958 ;;		line 91 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\Umul64.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  9961 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;  product         8   16[BANK0 ] unsigned long long 
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  8    0[BANK0 ] unsigned long long 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9968 ;; Tracked objects:
  9969 ;;		On entry : 1F/0
  9970 ;;		On exit  : 1F/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         1      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:       25 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:    3
  9980 ;; This function calls:
  9981 ;;		Nothing
  9982 ;; This function is called by:
  9983 ;;		_compensate_pressure
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           
  9988                           ;psect for function ___omul
  9989  1EDF                     ___omul:	
  9990                           
  9991                           ;incstack = 0
  9992                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  9993  1EDF  3030               	movlw	low ___omul@product
  9994  1EE0  0086               	movwf	6
  9995  1EE1  3000               	movlw	high ___omul@product
  9996  1EE2  0087               	movwf	7
  9997  1EE3  3008               	movlw	8
  9998  1EE4  00F5               	movwf	??___omul
  9999  1EE5  3000               	movlw	0
 10000  1EE6                     u4470:	
 10001  1EE6  001E               	movwi fsr1++
 10002  1EE7  0BF5               	decfsz	??___omul,f
 10003  1EE8  2EE6               	goto	u4470
 10004  1EE9                     l4582:	
 10005  1EE9  1C20               	btfss	___omul@multiplier,0
 10006  1EEA  2EFB               	goto	l4586
 10007  1EEB  0828               	movf	___omul@multiplicand,w
 10008  1EEC  07B0               	addwf	___omul@product,f
 10009  1EED  0829               	movf	___omul@multiplicand+1,w
 10010  1EEE  3DB1               	addwfc	___omul@product+1,f
 10011  1EEF  082A               	movf	___omul@multiplicand+2,w
 10012  1EF0  3DB2               	addwfc	___omul@product+2,f
 10013  1EF1  082B               	movf	___omul@multiplicand+3,w
 10014  1EF2  3DB3               	addwfc	___omul@product+3,f
 10015  1EF3  082C               	movf	___omul@multiplicand+4,w
 10016  1EF4  3DB4               	addwfc	___omul@product+4,f
 10017  1EF5  082D               	movf	___omul@multiplicand+5,w
 10018  1EF6  3DB5               	addwfc	___omul@product+5,f
 10019  1EF7  082E               	movf	___omul@multiplicand+6,w
 10020  1EF8  3DB6               	addwfc	___omul@product+6,f
 10021  1EF9  082F               	movf	___omul@multiplicand+7,w
 10022  1EFA  3DB7               	addwfc	___omul@product+7,f
 10023  1EFB                     l4586:	
 10024  1EFB  35A8               	lslf	___omul@multiplicand,f
 10025  1EFC  0DA9               	rlf	___omul@multiplicand+1,f
 10026  1EFD  0DAA               	rlf	___omul@multiplicand+2,f
 10027  1EFE  0DAB               	rlf	___omul@multiplicand+3,f
 10028  1EFF  0DAC               	rlf	___omul@multiplicand+4,f
 10029  1F00  0DAD               	rlf	___omul@multiplicand+5,f
 10030  1F01  0DAE               	rlf	___omul@multiplicand+6,f
 10031  1F02  0DAF               	rlf	___omul@multiplicand+7,f
 10032  1F03  36A7               	lsrf	___omul@multiplier+7,f
 10033  1F04  0CA6               	rrf	___omul@multiplier+6,f
 10034  1F05  0CA5               	rrf	___omul@multiplier+5,f
 10035  1F06  0CA4               	rrf	___omul@multiplier+4,f
 10036  1F07  0CA3               	rrf	___omul@multiplier+3,f
 10037  1F08  0CA2               	rrf	___omul@multiplier+2,f
 10038  1F09  0CA1               	rrf	___omul@multiplier+1,f
 10039  1F0A  0CA0               	rrf	___omul@multiplier,f
 10040  1F0B  0820               	movf	___omul@multiplier,w
 10041  1F0C  0421               	iorwf	___omul@multiplier+1,w
 10042  1F0D  0422               	iorwf	___omul@multiplier+2,w
 10043  1F0E  0423               	iorwf	___omul@multiplier+3,w
 10044  1F0F  0424               	iorwf	___omul@multiplier+4,w
 10045  1F10  0425               	iorwf	___omul@multiplier+5,w
 10046  1F11  0426               	iorwf	___omul@multiplier+6,w
 10047  1F12  0427               	iorwf	___omul@multiplier+7,w
 10048  1F13  1D03               	skipz
 10049  1F14  2EE9               	goto	l4582
 10050  1F15  0830               	movf	___omul@product,w
 10051  1F16  00A0               	movwf	?___omul
 10052  1F17  0831               	movf	___omul@product+1,w
 10053  1F18  00A1               	movwf	?___omul+1
 10054  1F19  0832               	movf	___omul@product+2,w
 10055  1F1A  00A2               	movwf	?___omul+2
 10056  1F1B  0833               	movf	___omul@product+3,w
 10057  1F1C  00A3               	movwf	?___omul+3
 10058  1F1D  0834               	movf	___omul@product+4,w
 10059  1F1E  00A4               	movwf	?___omul+4
 10060  1F1F  0835               	movf	___omul@product+5,w
 10061  1F20  00A5               	movwf	?___omul+5
 10062  1F21  0836               	movf	___omul@product+6,w
 10063  1F22  00A6               	movwf	?___omul+6
 10064  1F23  0837               	movf	___omul@product+7,w
 10065  1F24  00A7               	movwf	?___omul+7
 10066  1F25  0008               	return
 10067  1F26                     __end_of___omul:	
 10068                           
 10069                           	psect	text31
 10070  170B                     __ptext31:	
 10071 ;; *************** function ___aodiv *****************
 10072 ;; Defined at:
 10073 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aodiv.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;  divisor         8   24[BANK0 ] long long 
 10076 ;;  dividend        8   32[BANK0 ] long long 
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;  quotient        8   42[BANK0 ] long long 
 10079 ;;  sign            1   41[BANK0 ] unsigned char 
 10080 ;;  counter         1   40[BANK0 ] unsigned char 
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  8   24[BANK0 ] long long 
 10083 ;; Registers used:
 10084 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10085 ;; Tracked objects:
 10086 ;;		On entry : 1F/0
 10087 ;;		On exit  : 1F/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10090 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Totals:         1      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;Total ram usage:       27 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:    3
 10097 ;; This function calls:
 10098 ;;		Nothing
 10099 ;; This function is called by:
 10100 ;;		_compensate_pressure
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           
 10105                           ;psect for function ___aodiv
 10106  170B                     ___aodiv:	
 10107                           
 10108                           ;incstack = 0
 10109                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 10110  170B  01C9               	clrf	___aodiv@sign
 10111  170C  3038               	movlw	low ___aodiv@divisor
 10112  170D  0086               	movwf	6
 10113  170E  3000               	movlw	high ___aodiv@divisor
 10114  170F  0087               	movwf	7
 10115  1710  3F47               	moviw [7]fsr1
 10116  1711  00F6               	movwf	??___aodiv
 10117  1712  1FF6               	btfss	??___aodiv,7
 10118  1713  2F36               	goto	l4636
 10119  1714  0020               	movlb	0	; select bank0
 10120  1715  09B8               	comf	___aodiv@divisor,f
 10121  1716  09B9               	comf	___aodiv@divisor+1,f
 10122  1717  09BA               	comf	___aodiv@divisor+2,f
 10123  1718  09BB               	comf	___aodiv@divisor+3,f
 10124  1719  09BC               	comf	___aodiv@divisor+4,f
 10125  171A  09BD               	comf	___aodiv@divisor+5,f
 10126  171B  09BE               	comf	___aodiv@divisor+6,f
 10127  171C  09BF               	comf	___aodiv@divisor+7,f
 10128  171D  0AB8               	incf	___aodiv@divisor,f
 10129  171E  1D03               	skipz
 10130  171F  2F33               	goto	u461lld
 10131  1720  0AB9               	incf	___aodiv@divisor+1,f
 10132  1721  1D03               	skipz
 10133  1722  2F33               	goto	u461lld
 10134  1723  0ABA               	incf	___aodiv@divisor+2,f
 10135  1724  1D03               	skipz
 10136  1725  2F33               	goto	u461lld
 10137  1726  0ABB               	incf	___aodiv@divisor+3,f
 10138  1727  1D03               	skipz
 10139  1728  2F33               	goto	u461lld
 10140  1729  0ABC               	incf	___aodiv@divisor+4,f
 10141  172A  1D03               	skipz
 10142  172B  2F33               	goto	u461lld
 10143  172C  0ABD               	incf	___aodiv@divisor+5,f
 10144  172D  1D03               	skipz
 10145  172E  2F33               	goto	u461lld
 10146  172F  0ABE               	incf	___aodiv@divisor+6,f
 10147  1730  1D03               	skipz
 10148  1731  2F33               	goto	u461lld
 10149  1732  0ABF               	incf	___aodiv@divisor+7,f
 10150  1733                     u461lld:	
 10151  1733  0020               	movlb	0	; select bank0
 10152  1734  01C9               	clrf	___aodiv@sign
 10153  1735  0AC9               	incf	___aodiv@sign,f
 10154  1736                     l4636:	
 10155  1736  3040               	movlw	low ___aodiv@dividend
 10156  1737  0086               	movwf	6
 10157  1738  3000               	movlw	high ___aodiv@dividend
 10158  1739  0087               	movwf	7
 10159  173A  3F47               	moviw [7]fsr1
 10160  173B  00F6               	movwf	??___aodiv
 10161  173C  1FF6               	btfss	??___aodiv,7
 10162  173D  2F62               	goto	l4642
 10163  173E  0020               	movlb	0	; select bank0
 10164  173F  09C0               	comf	___aodiv@dividend,f
 10165  1740  09C1               	comf	___aodiv@dividend+1,f
 10166  1741  09C2               	comf	___aodiv@dividend+2,f
 10167  1742  09C3               	comf	___aodiv@dividend+3,f
 10168  1743  09C4               	comf	___aodiv@dividend+4,f
 10169  1744  09C5               	comf	___aodiv@dividend+5,f
 10170  1745  09C6               	comf	___aodiv@dividend+6,f
 10171  1746  09C7               	comf	___aodiv@dividend+7,f
 10172  1747  0AC0               	incf	___aodiv@dividend,f
 10173  1748  1D03               	skipz
 10174  1749  2F5D               	goto	l4640
 10175  174A  0AC1               	incf	___aodiv@dividend+1,f
 10176  174B  1D03               	skipz
 10177  174C  2F5D               	goto	l4640
 10178  174D  0AC2               	incf	___aodiv@dividend+2,f
 10179  174E  1D03               	skipz
 10180  174F  2F5D               	goto	l4640
 10181  1750  0AC3               	incf	___aodiv@dividend+3,f
 10182  1751  1D03               	skipz
 10183  1752  2F5D               	goto	l4640
 10184  1753  0AC4               	incf	___aodiv@dividend+4,f
 10185  1754  1D03               	skipz
 10186  1755  2F5D               	goto	l4640
 10187  1756  0AC5               	incf	___aodiv@dividend+5,f
 10188  1757  1D03               	skipz
 10189  1758  2F5D               	goto	l4640
 10190  1759  0AC6               	incf	___aodiv@dividend+6,f
 10191  175A  1D03               	skipz
 10192  175B  2F5D               	goto	l4640
 10193  175C  0AC7               	incf	___aodiv@dividend+7,f
 10194  175D                     l4640:	
 10195  175D  3001               	movlw	1
 10196  175E  00F6               	movwf	??___aodiv
 10197  175F  0876               	movf	??___aodiv,w
 10198  1760  0020               	movlb	0	; select bank0
 10199  1761  06C9               	xorwf	___aodiv@sign,f
 10200  1762                     l4642:	
 10201  1762  304A               	movlw	low ___aodiv@quotient
 10202  1763  0086               	movwf	6
 10203  1764  3000               	movlw	high ___aodiv@quotient
 10204  1765  0087               	movwf	7
 10205  1766  3008               	movlw	8
 10206  1767  00F6               	movwf	??___aodiv
 10207  1768  3000               	movlw	0
 10208  1769                     u4640:	
 10209  1769  001E               	movwi fsr1++
 10210  176A  0BF6               	decfsz	??___aodiv,f
 10211  176B  2F69               	goto	u4640
 10212  176C  0020               	movlb	0	; select bank0
 10213  176D  0838               	movf	___aodiv@divisor,w
 10214  176E  0439               	iorwf	___aodiv@divisor+1,w
 10215  176F  043A               	iorwf	___aodiv@divisor+2,w
 10216  1770  043B               	iorwf	___aodiv@divisor+3,w
 10217  1771  043C               	iorwf	___aodiv@divisor+4,w
 10218  1772  043D               	iorwf	___aodiv@divisor+5,w
 10219  1773  043E               	iorwf	___aodiv@divisor+6,w
 10220  1774  043F               	iorwf	___aodiv@divisor+7,w
 10221  1775  1903               	skipnz
 10222  1776  2FCD               	goto	l4664
 10223  1777  01C8               	clrf	___aodiv@counter
 10224  1778  0AC8               	incf	___aodiv@counter,f
 10225  1779                     l4652:	
 10226  1779  1BBF               	btfsc	___aodiv@divisor+7,7
 10227  177A  2F88               	goto	l4654
 10228  177B  35B8               	lslf	___aodiv@divisor,f
 10229  177C  0DB9               	rlf	___aodiv@divisor+1,f
 10230  177D  0DBA               	rlf	___aodiv@divisor+2,f
 10231  177E  0DBB               	rlf	___aodiv@divisor+3,f
 10232  177F  0DBC               	rlf	___aodiv@divisor+4,f
 10233  1780  0DBD               	rlf	___aodiv@divisor+5,f
 10234  1781  0DBE               	rlf	___aodiv@divisor+6,f
 10235  1782  0DBF               	rlf	___aodiv@divisor+7,f
 10236  1783  3001               	movlw	1
 10237  1784  00F6               	movwf	??___aodiv
 10238  1785  0876               	movf	??___aodiv,w
 10239  1786  07C8               	addwf	___aodiv@counter,f
 10240  1787  2F79               	goto	l4652
 10241  1788                     l4654:	
 10242  1788  35CA               	lslf	___aodiv@quotient,f
 10243  1789  0DCB               	rlf	___aodiv@quotient+1,f
 10244  178A  0DCC               	rlf	___aodiv@quotient+2,f
 10245  178B  0DCD               	rlf	___aodiv@quotient+3,f
 10246  178C  0DCE               	rlf	___aodiv@quotient+4,f
 10247  178D  0DCF               	rlf	___aodiv@quotient+5,f
 10248  178E  0DD0               	rlf	___aodiv@quotient+6,f
 10249  178F  0DD1               	rlf	___aodiv@quotient+7,f
 10250  1790  083F               	movf	___aodiv@divisor+7,w
 10251  1791  0247               	subwf	___aodiv@dividend+7,w
 10252  1792  1D03               	skipz
 10253  1793  2FAE               	goto	u4675
 10254  1794  083E               	movf	___aodiv@divisor+6,w
 10255  1795  0246               	subwf	___aodiv@dividend+6,w
 10256  1796  1D03               	skipz
 10257  1797  2FAE               	goto	u4675
 10258  1798  083D               	movf	___aodiv@divisor+5,w
 10259  1799  0245               	subwf	___aodiv@dividend+5,w
 10260  179A  1D03               	skipz
 10261  179B  2FAE               	goto	u4675
 10262  179C  083C               	movf	___aodiv@divisor+4,w
 10263  179D  0244               	subwf	___aodiv@dividend+4,w
 10264  179E  1D03               	skipz
 10265  179F  2FAE               	goto	u4675
 10266  17A0  083B               	movf	___aodiv@divisor+3,w
 10267  17A1  0243               	subwf	___aodiv@dividend+3,w
 10268  17A2  1D03               	skipz
 10269  17A3  2FAE               	goto	u4675
 10270  17A4  083A               	movf	___aodiv@divisor+2,w
 10271  17A5  0242               	subwf	___aodiv@dividend+2,w
 10272  17A6  1D03               	skipz
 10273  17A7  2FAE               	goto	u4675
 10274  17A8  0839               	movf	___aodiv@divisor+1,w
 10275  17A9  0241               	subwf	___aodiv@dividend+1,w
 10276  17AA  1D03               	skipz
 10277  17AB  2FAE               	goto	u4675
 10278  17AC  0838               	movf	___aodiv@divisor,w
 10279  17AD  0240               	subwf	___aodiv@dividend,w
 10280  17AE                     u4675:	
 10281  17AE  1C03               	skipc
 10282  17AF  2FC1               	goto	l4662
 10283  17B0  0838               	movf	___aodiv@divisor,w
 10284  17B1  02C0               	subwf	___aodiv@dividend,f
 10285  17B2  0839               	movf	___aodiv@divisor+1,w
 10286  17B3  3BC1               	subwfb	___aodiv@dividend+1,f
 10287  17B4  083A               	movf	___aodiv@divisor+2,w
 10288  17B5  3BC2               	subwfb	___aodiv@dividend+2,f
 10289  17B6  083B               	movf	___aodiv@divisor+3,w
 10290  17B7  3BC3               	subwfb	___aodiv@dividend+3,f
 10291  17B8  083C               	movf	___aodiv@divisor+4,w
 10292  17B9  3BC4               	subwfb	___aodiv@dividend+4,f
 10293  17BA  083D               	movf	___aodiv@divisor+5,w
 10294  17BB  3BC5               	subwfb	___aodiv@dividend+5,f
 10295  17BC  083E               	movf	___aodiv@divisor+6,w
 10296  17BD  3BC6               	subwfb	___aodiv@dividend+6,f
 10297  17BE  083F               	movf	___aodiv@divisor+7,w
 10298  17BF  3BC7               	subwfb	___aodiv@dividend+7,f
 10299  17C0  144A               	bsf	___aodiv@quotient,0
 10300  17C1                     l4662:	
 10301  17C1  36BF               	lsrf	___aodiv@divisor+7,f
 10302  17C2  0CBE               	rrf	___aodiv@divisor+6,f
 10303  17C3  0CBD               	rrf	___aodiv@divisor+5,f
 10304  17C4  0CBC               	rrf	___aodiv@divisor+4,f
 10305  17C5  0CBB               	rrf	___aodiv@divisor+3,f
 10306  17C6  0CBA               	rrf	___aodiv@divisor+2,f
 10307  17C7  0CB9               	rrf	___aodiv@divisor+1,f
 10308  17C8  0CB8               	rrf	___aodiv@divisor,f
 10309  17C9  3001               	movlw	1
 10310  17CA  02C8               	subwf	___aodiv@counter,f
 10311  17CB  1D03               	btfss	3,2
 10312  17CC  2F88               	goto	l4654
 10313  17CD                     l4664:	
 10314  17CD  0849               	movf	___aodiv@sign,w
 10315  17CE  1903               	btfsc	3,2
 10316  17CF  2FEE               	goto	l1053
 10317  17D0  09CA               	comf	___aodiv@quotient,f
 10318  17D1  09CB               	comf	___aodiv@quotient+1,f
 10319  17D2  09CC               	comf	___aodiv@quotient+2,f
 10320  17D3  09CD               	comf	___aodiv@quotient+3,f
 10321  17D4  09CE               	comf	___aodiv@quotient+4,f
 10322  17D5  09CF               	comf	___aodiv@quotient+5,f
 10323  17D6  09D0               	comf	___aodiv@quotient+6,f
 10324  17D7  09D1               	comf	___aodiv@quotient+7,f
 10325  17D8  0ACA               	incf	___aodiv@quotient,f
 10326  17D9  1D03               	skipz
 10327  17DA  2FEE               	goto	l1053
 10328  17DB  0ACB               	incf	___aodiv@quotient+1,f
 10329  17DC  1D03               	skipz
 10330  17DD  2FEE               	goto	l1053
 10331  17DE  0ACC               	incf	___aodiv@quotient+2,f
 10332  17DF  1D03               	skipz
 10333  17E0  2FEE               	goto	l1053
 10334  17E1  0ACD               	incf	___aodiv@quotient+3,f
 10335  17E2  1D03               	skipz
 10336  17E3  2FEE               	goto	l1053
 10337  17E4  0ACE               	incf	___aodiv@quotient+4,f
 10338  17E5  1D03               	skipz
 10339  17E6  2FEE               	goto	l1053
 10340  17E7  0ACF               	incf	___aodiv@quotient+5,f
 10341  17E8  1D03               	skipz
 10342  17E9  2FEE               	goto	l1053
 10343  17EA  0AD0               	incf	___aodiv@quotient+6,f
 10344  17EB  1D03               	skipz
 10345  17EC  2FEE               	goto	l1053
 10346  17ED  0AD1               	incf	___aodiv@quotient+7,f
 10347  17EE                     l1053:	
 10348  17EE  0020               	movlb	0	; select bank0
 10349  17EF  084A               	movf	___aodiv@quotient,w
 10350  17F0  00B8               	movwf	?___aodiv
 10351  17F1  084B               	movf	___aodiv@quotient+1,w
 10352  17F2  00B9               	movwf	?___aodiv+1
 10353  17F3  084C               	movf	___aodiv@quotient+2,w
 10354  17F4  00BA               	movwf	?___aodiv+2
 10355  17F5  084D               	movf	___aodiv@quotient+3,w
 10356  17F6  00BB               	movwf	?___aodiv+3
 10357  17F7  084E               	movf	___aodiv@quotient+4,w
 10358  17F8  00BC               	movwf	?___aodiv+4
 10359  17F9  084F               	movf	___aodiv@quotient+5,w
 10360  17FA  00BD               	movwf	?___aodiv+5
 10361  17FB  0850               	movf	___aodiv@quotient+6,w
 10362  17FC  00BE               	movwf	?___aodiv+6
 10363  17FD  0851               	movf	___aodiv@quotient+7,w
 10364  17FE  00BF               	movwf	?___aodiv+7
 10365  17FF  0008               	return
 10366  1800                     __end_of___aodiv:	
 10367                           
 10368                           	psect	text32
 10369  1C2C                     __ptext32:	
 10370 ;; *************** function _TransmitString *****************
 10371 ;; Defined at:
 10372 ;;		line 359 in file "main.c"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;  message         1    wreg     PTR unsigned char 
 10375 ;;		 -> message_end(73), message_start(70), 
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;  message         1    7[BANK0 ] PTR unsigned char 
 10378 ;;		 -> message_end(73), message_start(70), 
 10379 ;;  i               2    5[BANK0 ] int 
 10380 ;;  counti          2    3[BANK0 ] int 
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  1    wreg      void 
 10383 ;; Registers used:
 10384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10385 ;; Tracked objects:
 10386 ;;		On entry : 0/2
 10387 ;;		On exit  : 0/0
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;Total ram usage:        6 bytes
 10395 ;; Hardware stack levels used:    1
 10396 ;; Hardware stack levels required when called:    5
 10397 ;; This function calls:
 10398 ;;		_TransmitByte
 10399 ;;		_strlen
 10400 ;; This function is called by:
 10401 ;;		_main
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           
 10406                           ;psect for function _TransmitString
 10407  1C2C                     _TransmitString:	
 10408                           
 10409                           ;incstack = 0
 10410                           ; Regs used in _TransmitString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10411                           ;TransmitString@message stored from wreg
 10412  1C2C  0020               	movlb	0	; select bank0
 10413  1C2D  00A7               	movwf	TransmitString@message
 10414                           
 10415                           ;main.c: 359: void TransmitString(char* message);main.c: 360: {;main.c: 364:  for (int i
      +                           = 0, counti = strlen(message); i < counti; i++)
 10416  1C2E  01A5               	clrf	TransmitString@i
 10417  1C2F  01A6               	clrf	TransmitString@i+1
 10418  1C30  0827               	movf	TransmitString@message,w
 10419  1C31  00F5               	movwf	strlen@s
 10420  1C32  3003               	movlw	3
 10421  1C33  00F6               	movwf	strlen@s+1
 10422  1C34  319A  2207  319C   	fcall	_strlen
 10423  1C37  0876               	movf	?_strlen+1,w
 10424  1C38  00A4               	movwf	TransmitString@counti+1
 10425  1C39  0875               	movf	?_strlen,w
 10426  1C3A  00A3               	movwf	TransmitString@counti
 10427  1C3B                     l5604:	
 10428  1C3B  0826               	movf	TransmitString@i+1,w
 10429  1C3C  3A80               	xorlw	128
 10430  1C3D  00F8               	movwf	??_TransmitString
 10431  1C3E  0824               	movf	TransmitString@counti+1,w
 10432  1C3F  3A80               	xorlw	128
 10433  1C40  0278               	subwf	??_TransmitString,w
 10434  1C41  1D03               	skipz
 10435  1C42  2C45               	goto	u6025
 10436  1C43  0823               	movf	TransmitString@counti,w
 10437  1C44  0225               	subwf	TransmitString@i,w
 10438  1C45                     u6025:	
 10439  1C45  1803               	btfsc	3,0
 10440  1C46  0008               	return
 10441                           
 10442                           ;main.c: 365:  {;main.c: 366:   TransmitByte(message[i]);
 10443  1C47  0020               	movlb	0	; select bank0
 10444  1C48  0825               	movf	TransmitString@i,w
 10445  1C49  0727               	addwf	TransmitString@message,w
 10446  1C4A  00F8               	movwf	??_TransmitString
 10447  1C4B  0878               	movf	??_TransmitString,w
 10448  1C4C  0086               	movwf	6
 10449  1C4D  3003               	movlw	3	; select bank6/7
 10450  1C4E  0087               	movwf	7
 10451  1C4F  0801               	movf	1,w
 10452  1C50  3190  2002  319C   	fcall	_TransmitByte
 10453                           
 10454                           ;main.c: 367:  }
 10455  1C53  3001               	movlw	1
 10456  1C54  0020               	movlb	0	; select bank0
 10457  1C55  07A5               	addwf	TransmitString@i,f
 10458  1C56  3000               	movlw	0
 10459  1C57  3DA6               	addwfc	TransmitString@i+1,f
 10460  1C58  2C3B               	goto	l5604
 10461  1C59                     __end_of_TransmitString:	
 10462                           
 10463                           	psect	text33
 10464  1002                     __ptext33:	
 10465 ;; *************** function _TransmitByte *****************
 10466 ;; Defined at:
 10467 ;;		line 337 in file "main.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;  byte            1    wreg     unsigned char 
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;  byte            1    0[BANK0 ] unsigned char 
 10472 ;;  i               2    1[BANK0 ] int 
 10473 ;; Return value:  Size  Location     Type
 10474 ;;                  1    wreg      void 
 10475 ;; Registers used:
 10476 ;;		wreg, status,2, status,0, pclath, cstack
 10477 ;; Tracked objects:
 10478 ;;		On entry : 1F/0
 10479 ;;		On exit  : 0/0
 10480 ;;		Unchanged: 0/0
 10481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;Total ram usage:        4 bytes
 10487 ;; Hardware stack levels used:    1
 10488 ;; Hardware stack levels required when called:    4
 10489 ;; This function calls:
 10490 ;;		_TransmitBit
 10491 ;; This function is called by:
 10492 ;;		_TransmitString
 10493 ;; This function uses a non-reentrant model
 10494 ;;
 10495                           
 10496                           
 10497                           ;psect for function _TransmitByte
 10498  1002                     _TransmitByte:	
 10499                           
 10500                           ;incstack = 0
 10501                           ; Regs used in _TransmitByte: [wreg+status,2+status,0+pclath+cstack]
 10502                           ;TransmitByte@byte stored from wreg
 10503  1002  00A0               	movwf	TransmitByte@byte
 10504                           
 10505                           ;main.c: 337: void TransmitByte(char byte);main.c: 338: {;main.c: 348:     TransmitBit(0
      +                          );
 10506  1003  3000               	movlw	0
 10507  1004  3199  21BA  3190   	fcall	_TransmitBit
 10508                           
 10509                           ;main.c: 350:  for (int i = 0; i < 7; i++)
 10510  1007  0020               	movlb	0	; select bank0
 10511  1008  01A1               	clrf	TransmitByte@i
 10512  1009  01A2               	clrf	TransmitByte@i+1
 10513  100A                     l5246:	
 10514                           
 10515                           ;main.c: 351:  {;main.c: 352:   TransmitBit((byte >> i) & 1);
 10516  100A  0020               	movlb	0	; select bank0
 10517  100B  0820               	movf	TransmitByte@byte,w
 10518  100C  00F7               	movwf	??_TransmitByte
 10519  100D  0A21               	incf	TransmitByte@i,w
 10520  100E  2810               	goto	u5574
 10521  100F                     u5575:	
 10522  100F  36F7               	lsrf	??_TransmitByte,f
 10523  1010                     u5574:	
 10524  1010  0B89               	decfsz	9,f
 10525  1011  280F               	goto	u5575
 10526  1012  1C77               	btfss	??_TransmitByte,0
 10527  1013  2816               	goto	u5580
 10528  1014  3001               	movlw	1
 10529  1015  2817               	goto	u5590
 10530  1016                     u5580:	
 10531  1016  3000               	movlw	0
 10532  1017                     u5590:	
 10533  1017  3199  21BA  3190   	fcall	_TransmitBit
 10534                           
 10535                           ;main.c: 353:  }
 10536  101A  3001               	movlw	1
 10537  101B  0020               	movlb	0	; select bank0
 10538  101C  07A1               	addwf	TransmitByte@i,f
 10539  101D  3000               	movlw	0
 10540  101E  3DA2               	addwfc	TransmitByte@i+1,f
 10541  101F  0822               	movf	TransmitByte@i+1,w
 10542  1020  3A80               	xorlw	128
 10543  1021  00F7               	movwf	??_TransmitByte
 10544  1022  3080               	movlw	128
 10545  1023  0277               	subwf	??_TransmitByte,w
 10546  1024  1D03               	skipz
 10547  1025  2828               	goto	u5605
 10548  1026  3007               	movlw	7
 10549  1027  0221               	subwf	TransmitByte@i,w
 10550  1028                     u5605:	
 10551  1028  1C03               	skipc
 10552  1029  280A               	goto	l5246
 10553                           
 10554                           ;main.c: 355:  TransmitBit(1);
 10555  102A  3001               	movlw	1
 10556  102B  3199  21BA  3190   	fcall	_TransmitBit
 10557                           
 10558                           ;main.c: 356:  TransmitBit(1);
 10559  102E  3001               	movlw	1
 10560  102F  3199  21BA         	fcall	_TransmitBit
 10561  1031  0008               	return
 10562  1032                     __end_of_TransmitByte:	
 10563                           
 10564                           	psect	text34
 10565  19BA                     __ptext34:	
 10566 ;; *************** function _TransmitBit *****************
 10567 ;; Defined at:
 10568 ;;		line 317 in file "main.c"
 10569 ;; Parameters:    Size  Location     Type
 10570 ;;  b               1    wreg     _Bool 
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;  b               1    6[COMMON] _Bool 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      void 
 10575 ;; Registers used:
 10576 ;;		wreg, status,2, status,0
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;Total ram usage:        2 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    3
 10589 ;; This function calls:
 10590 ;;		Nothing
 10591 ;; This function is called by:
 10592 ;;		_TransmitByte
 10593 ;; This function uses a non-reentrant model
 10594 ;;
 10595                           
 10596                           
 10597                           ;psect for function _TransmitBit
 10598  19BA                     _TransmitBit:	
 10599                           
 10600                           ;incstack = 0
 10601                           ; Regs used in _TransmitBit: [wreg+status,2+status,0]
 10602                           ;TransmitBit@b stored from wreg
 10603  19BA  00F6               	movwf	TransmitBit@b
 10604                           
 10605                           ;main.c: 317: void TransmitBit(_Bool b);main.c: 318: {;main.c: 319:  if (b)
 10606  19BB  0876               	movf	TransmitBit@b,w
 10607  19BC  1903               	btfsc	3,2
 10608  19BD  29C1               	goto	l740
 10609                           
 10610                           ;main.c: 320:  {;main.c: 321:   do { LATAbits.LATA4 = 1; } while(0);
 10611  19BE  0022               	movlb	2	; select bank2
 10612  19BF  160C               	bsf	12,4	;volatile
 10613  19C0  29C3               	goto	l4960
 10614  19C1                     l740:	
 10615                           ;main.c: 324:  {;main.c: 325:   do { LATAbits.LATA4 = 0; } while(0);
 10616                           
 10617  19C1  0022               	movlb	2	; select bank2
 10618  19C2  120C               	bcf	12,4	;volatile
 10619  19C3                     l4960:	
 10620                           
 10621                           ;main.c: 329:     _delay((unsigned long)((((1000 / 50) / 2) * 1000)*(4000000/4000000.0))
      +                          );
 10622  19C3  300D               	movlw	13
 10623  19C4  00F5               	movwf	??_TransmitBit
 10624  19C5  30FC               	movlw	252
 10625  19C6                     u6387:	
 10626  19C6  0B89               	decfsz	9,f
 10627  19C7  29C6               	goto	u6387
 10628  19C8  0BF5               	decfsz	??_TransmitBit,f
 10629  19C9  29C6               	goto	u6387
 10630  19CA  0008               	return
 10631  19CB                     __end_of_TransmitBit:	
 10632                           
 10633                           	psect	text35
 10634  1083                     __ptext35:	
 10635 ;; *************** function _SetupGPS *****************
 10636 ;; Defined at:
 10637 ;;		line 497 in file "main.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  1    wreg      void 
 10644 ;; Registers used:
 10645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10646 ;; Tracked objects:
 10647 ;;		On entry : 1F/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;Total ram usage:        2 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    5
 10658 ;; This function calls:
 10659 ;;		_GPS_HasAcknowledged
 10660 ;;		_GPS_SendUBX
 10661 ;;		_WriteGPS
 10662 ;; This function is called by:
 10663 ;;		_main
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           
 10668                           ;psect for function _SetupGPS
 10669  1083                     _SetupGPS:	
 10670  1083                     l5616:	
 10671                           ;main.c: 499:     while (!gps_configured)
 10672                           
 10673                           ;incstack = 0
 10674                           ; Regs used in _SetupGPS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10675                           
 10676                           
 10677                           ;main.c: 499:     while (!gps_configured)
 10678  1083  0022               	movlb	2	; select bank2
 10679  1084  0862               	movf	_gps_configured^(0+256),w
 10680  1085  1D03               	btfss	3,2
 10681  1086  28A4               	goto	l5618
 10682                           
 10683                           ;main.c: 500:     {;main.c: 501:         do { LATAbits.LATA5 = 0; } while(0);
 10684  1087  128C               	bcf	12,5	;volatile
 10685                           
 10686                           ;main.c: 502:         GPS_SendUBX(setNavFlightMode);
 10687  1088  30A0               	movlw	(low (_setNavFlightMode| (0+512)))& (0+255)
 10688  1089  319B  237F  3190   	fcall	_GPS_SendUBX
 10689                           
 10690                           ;main.c: 503:         gps_configured = GPS_HasAcknowledged(setNavFlightMode);
 10691  108C  30A0               	movlw	(low (_setNavFlightMode| (0+512)))& (0+255)
 10692  108D  3193  23D9  3190   	fcall	_GPS_HasAcknowledged
 10693  1090  0020               	movlb	0	; select bank0
 10694  1091  00B2               	movwf	??_SetupGPS
 10695  1092  0832               	movf	??_SetupGPS,w
 10696  1093  0022               	movlb	2	; select bank2
 10697  1094  00E2               	movwf	_gps_configured^(0+256)
 10698  1095  168C               	bsf	12,5	;volatile
 10699                           
 10700                           ;main.c: 506:         _delay((unsigned long)((500)*(4000000/4000.0)));
 10701  1096  3003               	movlw	3
 10702  1097  0020               	movlb	0	; select bank0
 10703  1098  00B3               	movwf	??_SetupGPS+1
 10704  1099  308A               	movlw	138
 10705  109A  00B2               	movwf	??_SetupGPS
 10706  109B  3055               	movlw	85
 10707  109C                     u6397:	
 10708  109C  0B89               	decfsz	9,f
 10709  109D  289C               	goto	u6397
 10710  109E  0BB2               	decfsz	??_SetupGPS,f
 10711  109F  289C               	goto	u6397
 10712  10A0  0BB3               	decfsz	??_SetupGPS+1,f
 10713  10A1  289C               	goto	u6397
 10714  10A2  3200               	nop2
 10715  10A3  2883               	goto	l5616
 10716  10A4                     l5618:	
 10717                           
 10718                           ;main.c: 508:     gps_configured = 0;
 10719  10A4  01E2               	clrf	_gps_configured^(0+256)
 10720                           
 10721                           ;main.c: 511:     WriteGPS("$PUBX,40,GLL,0,0,0,0*5C\r\n");
 10722  10A5  304E               	movlw	low (STR_1| (0+32768))
 10723  10A6  0020               	movlb	0	; select bank0
 10724  10A7  00A2               	movwf	WriteGPS@message
 10725  10A8  3098               	movlw	high (STR_1| (0+32768))
 10726  10A9  00A3               	movwf	WriteGPS@message+1
 10727  10AA  319B  2355  3190   	fcall	_WriteGPS
 10728                           
 10729                           ;main.c: 512:     WriteGPS("$PUBX,40,GGA,0,0,0,0*5A\r\n");
 10730  10AD  3034               	movlw	low (STR_2| (0+32768))
 10731  10AE  0020               	movlb	0	; select bank0
 10732  10AF  00A2               	movwf	WriteGPS@message
 10733  10B0  3098               	movlw	high (STR_2| (0+32768))
 10734  10B1  00A3               	movwf	WriteGPS@message+1
 10735  10B2  319B  2355  3190   	fcall	_WriteGPS
 10736                           
 10737                           ;main.c: 513:     WriteGPS("$PUBX,40,VTG,0,0,0,0*5E\r\n");
 10738  10B5  3082               	movlw	low (STR_3| (0+32768))
 10739  10B6  0020               	movlb	0	; select bank0
 10740  10B7  00A2               	movwf	WriteGPS@message
 10741  10B8  3098               	movlw	high (STR_3| (0+32768))
 10742  10B9  00A3               	movwf	WriteGPS@message+1
 10743  10BA  319B  2355  3190   	fcall	_WriteGPS
 10744                           
 10745                           ;main.c: 514:     WriteGPS("$PUBX,40,GSV,0,0,0,0*59\r\n");
 10746  10BD  301A               	movlw	low (STR_4| (0+32768))
 10747  10BE  0020               	movlb	0	; select bank0
 10748  10BF  00A2               	movwf	WriteGPS@message
 10749  10C0  3098               	movlw	high (STR_4| (0+32768))
 10750  10C1  00A3               	movwf	WriteGPS@message+1
 10751  10C2  319B  2355  3190   	fcall	_WriteGPS
 10752                           
 10753                           ;main.c: 515:     WriteGPS("$PUBX,40,GSA,0,0,0,0*4E\r\n");
 10754  10C5  3068               	movlw	low (STR_5| (0+32768))
 10755  10C6  0020               	movlb	0	; select bank0
 10756  10C7  00A2               	movwf	WriteGPS@message
 10757  10C8  3098               	movlw	high (STR_5| (0+32768))
 10758  10C9  00A3               	movwf	WriteGPS@message+1
 10759  10CA  319B  2355  3190   	fcall	_WriteGPS
 10760                           
 10761                           ;main.c: 516:     WriteGPS("$PUBX,40,RMC,0,0,0,0*47\r\n");
 10762  10CD  3000               	movlw	low (STR_6| (0+32768))
 10763  10CE  0020               	movlb	0	; select bank0
 10764  10CF  00A2               	movwf	WriteGPS@message
 10765  10D0  3098               	movlw	high (STR_6| (0+32768))
 10766  10D1  00A3               	movwf	WriteGPS@message+1
 10767  10D2  319B  2355         	fcall	_WriteGPS
 10768  10D4  0008               	return
 10769  10D5                     __end_of_SetupGPS:	
 10770                           
 10771                           	psect	text36
 10772  1B7F                     __ptext36:	
 10773 ;; *************** function _GPS_SendUBX *****************
 10774 ;; Defined at:
 10775 ;;		line 413 in file "main.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;  data            1    wreg     PTR unsigned char 
 10778 ;;		 -> setNavFlightMode(44), 
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;  data            1    3[BANK0 ] PTR unsigned char 
 10781 ;;		 -> setNavFlightMode(44), 
 10782 ;;  i               2    4[BANK0 ] int 
 10783 ;;  length          2    1[BANK0 ] int 
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      void 
 10786 ;; Registers used:
 10787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10788 ;; Tracked objects:
 10789 ;;		On entry : 1F/2
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;Total ram usage:        6 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    4
 10800 ;; This function calls:
 10801 ;;		_EUSART_Write
 10802 ;;		_GetLengthUBX
 10803 ;; This function is called by:
 10804 ;;		_SetupGPS
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           
 10809                           ;psect for function _GPS_SendUBX
 10810  1B7F                     _GPS_SendUBX:	
 10811                           
 10812                           ;incstack = 0
 10813                           ; Regs used in _GPS_SendUBX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10814                           ;GPS_SendUBX@data stored from wreg
 10815  1B7F  0020               	movlb	0	; select bank0
 10816  1B80  00A3               	movwf	GPS_SendUBX@data
 10817                           
 10818                           ;main.c: 413: void GPS_SendUBX(uint8_t* data);main.c: 414: {;main.c: 415:     for (int i
      +                           = 0, length = GetLengthUBX(data); i < length; i++)
 10819  1B81  01A4               	clrf	GPS_SendUBX@i
 10820  1B82  01A5               	clrf	GPS_SendUBX@i+1
 10821  1B83  0823               	movf	GPS_SendUBX@data,w
 10822  1B84  3199  21CB  319B   	fcall	_GetLengthUBX
 10823  1B87  0876               	movf	?_GetLengthUBX+1,w
 10824  1B88  00A2               	movwf	GPS_SendUBX@length+1
 10825  1B89  0875               	movf	?_GetLengthUBX,w
 10826  1B8A  00A1               	movwf	GPS_SendUBX@length
 10827  1B8B                     l5272:	
 10828  1B8B  0825               	movf	GPS_SendUBX@i+1,w
 10829  1B8C  3A80               	xorlw	128
 10830  1B8D  00A0               	movwf	??_GPS_SendUBX
 10831  1B8E  0822               	movf	GPS_SendUBX@length+1,w
 10832  1B8F  3A80               	xorlw	128
 10833  1B90  0220               	subwf	??_GPS_SendUBX,w
 10834  1B91  1D03               	skipz
 10835  1B92  2B95               	goto	u5625
 10836  1B93  0821               	movf	GPS_SendUBX@length,w
 10837  1B94  0224               	subwf	GPS_SendUBX@i,w
 10838  1B95                     u5625:	
 10839  1B95  1803               	btfsc	3,0
 10840  1B96  0008               	return
 10841                           
 10842                           ;main.c: 416:     {;main.c: 417:         EUSART_Write(data[i]);
 10843  1B97  0020               	movlb	0	; select bank0
 10844  1B98  0824               	movf	GPS_SendUBX@i,w
 10845  1B99  0723               	addwf	GPS_SendUBX@data,w
 10846  1B9A  00A0               	movwf	??_GPS_SendUBX
 10847  1B9B  0820               	movf	??_GPS_SendUBX,w
 10848  1B9C  0086               	movwf	6
 10849  1B9D  3002               	movlw	2	; select bank4/5
 10850  1B9E  0087               	movwf	7
 10851  1B9F  0801               	movf	1,w
 10852  1BA0  3199  215F  319B   	fcall	_EUSART_Write
 10853                           
 10854                           ;main.c: 418:     }
 10855  1BA3  3001               	movlw	1
 10856  1BA4  0020               	movlb	0	; select bank0
 10857  1BA5  07A4               	addwf	GPS_SendUBX@i,f
 10858  1BA6  3000               	movlw	0
 10859  1BA7  3DA5               	addwfc	GPS_SendUBX@i+1,f
 10860  1BA8  2B8B               	goto	l5272
 10861  1BA9                     __end_of_GPS_SendUBX:	
 10862                           
 10863                           	psect	text37
 10864  19CB                     __ptext37:	
 10865 ;; *************** function _GetLengthUBX *****************
 10866 ;; Defined at:
 10867 ;;		line 407 in file "main.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;  data            1    wreg     PTR unsigned char 
 10870 ;;		 -> setNavFlightMode(44), 
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;  data            1    8[COMMON] PTR unsigned char 
 10873 ;;		 -> setNavFlightMode(44), 
 10874 ;; Return value:  Size  Location     Type
 10875 ;;                  2    5[COMMON] unsigned int 
 10876 ;; Registers used:
 10877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10878 ;; Tracked objects:
 10879 ;;		On entry : 1F/0
 10880 ;;		On exit  : 1F/0
 10881 ;;		Unchanged: 1F/0
 10882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10883 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;Total ram usage:        4 bytes
 10888 ;; Hardware stack levels used:    1
 10889 ;; Hardware stack levels required when called:    3
 10890 ;; This function calls:
 10891 ;;		Nothing
 10892 ;; This function is called by:
 10893 ;;		_GPS_SendUBX
 10894 ;; This function uses a non-reentrant model
 10895 ;;
 10896                           
 10897                           
 10898                           ;psect for function _GetLengthUBX
 10899  19CB                     _GetLengthUBX:	
 10900                           
 10901                           ;incstack = 0
 10902                           ; Regs used in _GetLengthUBX: [wreg-fsr1h+status,2+status,0]
 10903                           ;GetLengthUBX@data stored from wreg
 10904  19CB  00F8               	movwf	GetLengthUBX@data
 10905                           
 10906                           ;main.c: 407: size_t GetLengthUBX(uint8_t* data);main.c: 408: {;main.c: 409:     return 
      +                          (short)(8 + (short)((short)data[4] + (short)(data[5] << 8)));
 10907  19CC  0878               	movf	GetLengthUBX@data,w
 10908  19CD  3E05               	addlw	5
 10909  19CE  0086               	movwf	6
 10910  19CF  3002               	movlw	2	; select bank4/5
 10911  19D0  0087               	movwf	7
 10912  19D1  0878               	movf	GetLengthUBX@data,w
 10913  19D2  3E04               	addlw	4
 10914  19D3  0084               	movwf	4
 10915  19D4  3002               	movlw	2	; select bank4/5
 10916  19D5  0085               	movwf	5
 10917  19D6  0800               	movf	0,w
 10918  19D7  3E08               	addlw	8
 10919  19D8  00F5               	movwf	?_GetLengthUBX
 10920  19D9  3000               	movlw	0
 10921  19DA  3D01               	addwfc	1,w
 10922  19DB  00F6               	movwf	?_GetLengthUBX+1
 10923  19DC  0008               	return
 10924  19DD                     __end_of_GetLengthUBX:	
 10925                           
 10926                           	psect	text38
 10927  13D9                     __ptext38:	
 10928 ;; *************** function _GPS_HasAcknowledged *****************
 10929 ;; Defined at:
 10930 ;;		line 425 in file "main.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;  data            1    wreg     PTR unsigned char 
 10933 ;;		 -> setNavFlightMode(44), 
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;  data            1   15[BANK0 ] PTR unsigned char 
 10936 ;;		 -> setNavFlightMode(44), 
 10937 ;;  i               1   17[BANK0 ] unsigned char 
 10938 ;;  ackPacket      10    5[BANK0 ] unsigned char [10]
 10939 ;;  startTime       4    0[BANK0 ] unsigned long 
 10940 ;;  ackByteID       1   16[BANK0 ] unsigned char 
 10941 ;;  ackByte         1    4[BANK0 ] unsigned char 
 10942 ;; Return value:  Size  Location     Type
 10943 ;;                  1    wreg      _Bool 
 10944 ;; Registers used:
 10945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10946 ;; Tracked objects:
 10947 ;;		On entry : 0/2
 10948 ;;		On exit  : 1D/0
 10949 ;;		Unchanged: 0/0
 10950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Totals:         4      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;Total ram usage:       22 bytes
 10956 ;; Hardware stack levels used:    1
 10957 ;; Hardware stack levels required when called:    4
 10958 ;; This function calls:
 10959 ;;		_EUSART_Read
 10960 ;;		_EUSART_is_rx_ready
 10961 ;; This function is called by:
 10962 ;;		_SetupGPS
 10963 ;; This function uses a non-reentrant model
 10964 ;;
 10965                           
 10966                           
 10967                           ;psect for function _GPS_HasAcknowledged
 10968  13D9                     _GPS_HasAcknowledged:	
 10969                           
 10970                           ;incstack = 0
 10971                           ; Regs used in _GPS_HasAcknowledged: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10972                           ;GPS_HasAcknowledged@data stored from wreg
 10973  13D9  0020               	movlb	0	; select bank0
 10974  13DA  00AF               	movwf	GPS_HasAcknowledged@data
 10975                           
 10976                           ;main.c: 425: _Bool GPS_HasAcknowledged(uint8_t* data);main.c: 426: {;main.c: 427:     u
      +                          int8_t ackPacket[10];;main.c: 428:     unsigned long startTime = ticks;
 10977  13DB  0022               	movlb	2	; select bank2
 10978  13DC  085F               	movf	(_ticks+3)^(0+256),w
 10979  13DD  0020               	movlb	0	; select bank0
 10980  13DE  00A3               	movwf	GPS_HasAcknowledged@startTime+3
 10981  13DF  0022               	movlb	2	; select bank2
 10982  13E0  085E               	movf	(_ticks+2)^(0+256),w
 10983  13E1  0020               	movlb	0	; select bank0
 10984  13E2  00A2               	movwf	GPS_HasAcknowledged@startTime+2
 10985  13E3  0022               	movlb	2	; select bank2
 10986  13E4  085D               	movf	(_ticks+1)^(0+256),w
 10987  13E5  0020               	movlb	0	; select bank0
 10988  13E6  00A1               	movwf	GPS_HasAcknowledged@startTime+1
 10989  13E7  0022               	movlb	2	; select bank2
 10990  13E8  085C               	movf	_ticks^(0+256),w
 10991  13E9  0020               	movlb	0	; select bank0
 10992  13EA  00A0               	movwf	GPS_HasAcknowledged@startTime
 10993                           
 10994                           ;main.c: 431:     ackPacket[0] = 0xB5;
 10995  13EB  30B5               	movlw	181
 10996  13EC  00F5               	movwf	??_GPS_HasAcknowledged
 10997  13ED  0875               	movf	??_GPS_HasAcknowledged,w
 10998  13EE  00A5               	movwf	GPS_HasAcknowledged@ackPacket
 10999                           
 11000                           ;main.c: 432:     ackPacket[1] = 0x62;
 11001  13EF  3062               	movlw	98
 11002  13F0  00F5               	movwf	??_GPS_HasAcknowledged
 11003  13F1  0875               	movf	??_GPS_HasAcknowledged,w
 11004  13F2  00A6               	movwf	GPS_HasAcknowledged@ackPacket+1
 11005                           
 11006                           ;main.c: 433:     ackPacket[2] = 0x05;
 11007  13F3  3005               	movlw	5
 11008  13F4  00F5               	movwf	??_GPS_HasAcknowledged
 11009  13F5  0875               	movf	??_GPS_HasAcknowledged,w
 11010  13F6  00A7               	movwf	GPS_HasAcknowledged@ackPacket+2
 11011                           
 11012                           ;main.c: 434:     ackPacket[3] = 0x01;
 11013  13F7  01A8               	clrf	GPS_HasAcknowledged@ackPacket+3
 11014  13F8  0AA8               	incf	GPS_HasAcknowledged@ackPacket+3,f
 11015                           
 11016                           ;main.c: 435:     ackPacket[4] = 0x02;
 11017  13F9  3002               	movlw	2
 11018  13FA  00F5               	movwf	??_GPS_HasAcknowledged
 11019  13FB  0875               	movf	??_GPS_HasAcknowledged,w
 11020  13FC  00A9               	movwf	GPS_HasAcknowledged@ackPacket+4
 11021                           
 11022                           ;main.c: 436:     ackPacket[5] = 0x00;
 11023  13FD  01AA               	clrf	GPS_HasAcknowledged@ackPacket+5
 11024                           
 11025                           ;main.c: 437:     ackPacket[6] = data[2];
 11026  13FE  082F               	movf	GPS_HasAcknowledged@data,w
 11027  13FF  0086               	movwf	6
 11028  1400  3002               	movlw	2	; select bank4/5
 11029  1401  0087               	movwf	7
 11030  1402  3002               	movlw	2	; select bank4/5
 11031  1403  3F42               	moviw [2]fsr1
 11032  1404  00AB               	movwf	GPS_HasAcknowledged@ackPacket+6
 11033                           
 11034                           ;main.c: 438:     ackPacket[7] = data[3];
 11035  1405  082F               	movf	GPS_HasAcknowledged@data,w
 11036  1406  0086               	movwf	6
 11037  1407  3002               	movlw	2	; select bank4/5
 11038  1408  0087               	movwf	7
 11039  1409  3002               	movlw	2	; select bank4/5
 11040  140A  3F43               	moviw [3]fsr1
 11041  140B  00AC               	movwf	GPS_HasAcknowledged@ackPacket+7
 11042                           
 11043                           ;main.c: 439:     ackPacket[8] = 0;
 11044  140C  01AD               	clrf	GPS_HasAcknowledged@ackPacket+8
 11045                           
 11046                           ;main.c: 440:     ackPacket[9] = 0;
 11047  140D  01AE               	clrf	GPS_HasAcknowledged@ackPacket+9
 11048                           
 11049                           ;main.c: 443:     for (uint8_t i = 2; i < 8; i++)
 11050  140E  3002               	movlw	2
 11051  140F  00F5               	movwf	??_GPS_HasAcknowledged
 11052  1410  0875               	movf	??_GPS_HasAcknowledged,w
 11053  1411  00B1               	movwf	GPS_HasAcknowledged@i
 11054  1412                     l5294:	
 11055                           
 11056                           ;main.c: 444:     {;main.c: 445:         ackPacket[8] = ackPacket[8] + ackPacket[i];
 11057  1412  0831               	movf	GPS_HasAcknowledged@i,w
 11058  1413  3E25               	addlw	(low (GPS_HasAcknowledged@ackPacket| 0))& (0+255)
 11059  1414  0086               	movwf	6
 11060  1415  0187               	clrf	7
 11061  1416  082D               	movf	GPS_HasAcknowledged@ackPacket+8,w
 11062  1417  0701               	addwf	1,w
 11063  1418  00F5               	movwf	??_GPS_HasAcknowledged
 11064  1419  0875               	movf	??_GPS_HasAcknowledged,w
 11065  141A  00AD               	movwf	GPS_HasAcknowledged@ackPacket+8
 11066                           
 11067                           ;main.c: 446:         ackPacket[9] = ackPacket[9] + ackPacket[8];
 11068  141B  082E               	movf	GPS_HasAcknowledged@ackPacket+9,w
 11069  141C  072D               	addwf	GPS_HasAcknowledged@ackPacket+8,w
 11070  141D  00F5               	movwf	??_GPS_HasAcknowledged
 11071  141E  0875               	movf	??_GPS_HasAcknowledged,w
 11072  141F  00AE               	movwf	GPS_HasAcknowledged@ackPacket+9
 11073                           
 11074                           ;main.c: 447:     }
 11075  1420  3001               	movlw	1
 11076  1421  00F5               	movwf	??_GPS_HasAcknowledged
 11077  1422  0875               	movf	??_GPS_HasAcknowledged,w
 11078  1423  07B1               	addwf	GPS_HasAcknowledged@i,f
 11079  1424  3008               	movlw	8
 11080  1425  0231               	subwf	GPS_HasAcknowledged@i,w
 11081  1426  1C03               	skipc
 11082  1427  2C12               	goto	l5294
 11083  1428                     l5302:	
 11084                           
 11085                           ;main.c: 450:     uint8_t ackByte;;main.c: 453:     uint8_t ackByteID = 0;
 11086  1428  01B0               	clrf	GPS_HasAcknowledged@ackByteID
 11087  1429                     l5304:	
 11088                           
 11089                           ;main.c: 457:     {;main.c: 460:         if (ackByteID > 9)
 11090  1429  300A               	movlw	10
 11091  142A  0230               	subwf	GPS_HasAcknowledged@ackByteID,w
 11092  142B  1C03               	skipc
 11093  142C  2C2F               	goto	l5310
 11094                           
 11095                           ;main.c: 461:         {;main.c: 464:             return 1;
 11096  142D  3001               	movlw	1
 11097  142E  0008               	return
 11098  142F                     l5310:	
 11099                           
 11100                           ;main.c: 468:         if (ticks - startTime > 3000)
 11101  142F  0820               	movf	GPS_HasAcknowledged@startTime,w
 11102  1430  0022               	movlb	2	; select bank2
 11103  1431  025C               	subwf	_ticks^(0+256),w
 11104  1432  00F5               	movwf	??_GPS_HasAcknowledged
 11105  1433  0020               	movlb	0	; select bank0
 11106  1434  0821               	movf	GPS_HasAcknowledged@startTime+1,w
 11107  1435  0022               	movlb	2	; select bank2
 11108  1436  3B5D               	subwfb	(_ticks+1)^(0+256),w
 11109  1437  00F6               	movwf	??_GPS_HasAcknowledged+1
 11110  1438  0020               	movlb	0	; select bank0
 11111  1439  0822               	movf	GPS_HasAcknowledged@startTime+2,w
 11112  143A  0022               	movlb	2	; select bank2
 11113  143B  3B5E               	subwfb	(_ticks+2)^(0+256),w
 11114  143C  00F7               	movwf	??_GPS_HasAcknowledged+2
 11115  143D  0020               	movlb	0	; select bank0
 11116  143E  0823               	movf	GPS_HasAcknowledged@startTime+3,w
 11117  143F  0022               	movlb	2	; select bank2
 11118  1440  3B5F               	subwfb	(_ticks+3)^(0+256),w
 11119  1441  00F8               	movwf	??_GPS_HasAcknowledged+3
 11120  1442  0878               	movf	??_GPS_HasAcknowledged+3,w
 11121  1443  1D03               	btfss	3,2
 11122  1444  2C4E               	goto	l5312
 11123  1445  0877               	movf	??_GPS_HasAcknowledged+2,w
 11124  1446  1D03               	btfss	3,2
 11125  1447  2C4E               	goto	l5312
 11126  1448  30B9               	movlw	185
 11127  1449  0275               	subwf	??_GPS_HasAcknowledged,w
 11128  144A  300B               	movlw	11
 11129  144B  3B76               	subwfb	??_GPS_HasAcknowledged+1,w
 11130  144C  1C03               	btfss	3,0
 11131  144D  2C50               	goto	l5316
 11132  144E                     l5312:	
 11133                           
 11134                           ;main.c: 469:         {;main.c: 470:             return 0;
 11135  144E  3000               	movlw	0
 11136  144F  0008               	return
 11137  1450                     l5316:	
 11138                           
 11139                           ;main.c: 474:         if (EUSART_is_rx_ready())
 11140  1450  3199  2148  3193   	fcall	_EUSART_is_rx_ready
 11141  1453  3A00               	xorlw	0
 11142  1454  1903               	skipnz
 11143  1455  2C29               	goto	l5304
 11144                           
 11145                           ;main.c: 475:         {;main.c: 476:             ackByte = EUSART_Read();
 11146  1456  3199  2176  3193   	fcall	_EUSART_Read
 11147  1459  00F5               	movwf	??_GPS_HasAcknowledged
 11148  145A  0875               	movf	??_GPS_HasAcknowledged,w
 11149  145B  0020               	movlb	0	; select bank0
 11150  145C  00A4               	movwf	GPS_HasAcknowledged@ackByte
 11151                           
 11152                           ;main.c: 479:             if (ackByte == ackPacket[ackByteID]) {
 11153  145D  0830               	movf	GPS_HasAcknowledged@ackByteID,w
 11154  145E  3E25               	addlw	(low (GPS_HasAcknowledged@ackPacket| 0))& (0+255)
 11155  145F  0086               	movwf	6
 11156  1460  0187               	clrf	7
 11157  1461  0801               	movf	1,w
 11158  1462  0624               	xorwf	GPS_HasAcknowledged@ackByte,w
 11159  1463  1D03               	skipz
 11160  1464  2C28               	goto	l5302
 11161                           
 11162                           ;main.c: 480:                 ackByteID++;
 11163  1465  3001               	movlw	1
 11164  1466  00F5               	movwf	??_GPS_HasAcknowledged
 11165  1467  0875               	movf	??_GPS_HasAcknowledged,w
 11166  1468  07B0               	addwf	GPS_HasAcknowledged@ackByteID,f
 11167                           
 11168                           ;main.c: 481:             }
 11169  1469  2C29               	goto	l5304
 11170  146A                     __end_of_GPS_HasAcknowledged:	
 11171                           
 11172                           	psect	text39
 11173  198A                     __ptext39:	
 11174 ;; *************** function _SYSTEM_Initialize *****************
 11175 ;; Defined at:
 11176 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11177 ;; Parameters:    Size  Location     Type
 11178 ;;		None
 11179 ;; Auto vars:     Size  Location     Type
 11180 ;;		None
 11181 ;; Return value:  Size  Location     Type
 11182 ;;                  1    wreg      void 
 11183 ;; Registers used:
 11184 ;;		wreg, status,2, status,0, pclath, cstack
 11185 ;; Tracked objects:
 11186 ;;		On entry : B1F/0
 11187 ;;		On exit  : 1F/3
 11188 ;;		Unchanged: 0/0
 11189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11194 ;;Total ram usage:        0 bytes
 11195 ;; Hardware stack levels used:    1
 11196 ;; Hardware stack levels required when called:    5
 11197 ;; This function calls:
 11198 ;;		_EUSART_Initialize
 11199 ;;		_I2C_Initialize
 11200 ;;		_OSCILLATOR_Initialize
 11201 ;;		_PIN_MANAGER_Initialize
 11202 ;;		_TMR0_Initialize
 11203 ;; This function is called by:
 11204 ;;		_main
 11205 ;; This function uses a non-reentrant model
 11206 ;;
 11207                           
 11208                           
 11209                           ;psect for function _SYSTEM_Initialize
 11210  198A                     _SYSTEM_Initialize:	
 11211                           
 11212                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
 11213                           
 11214                           ;incstack = 0
 11215                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11216  198A  319C  24B5  3199   	fcall	_PIN_MANAGER_Initialize
 11217                           
 11218                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
 11219  198D  3199  2166  3199   	fcall	_OSCILLATOR_Initialize
 11220                           
 11221                           ;mcc_generated_files/mcc.c: 54:     I2C_Initialize();
 11222  1990  319A  2220  3199   	fcall	_I2C_Initialize
 11223                           
 11224                           ;mcc_generated_files/mcc.c: 55:     TMR0_Initialize();
 11225  1993  3199  21DD  3199   	fcall	_TMR0_Initialize
 11226                           
 11227                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
 11228  1996  3199  217F         	fcall	_EUSART_Initialize
 11229  1998  0008               	return
 11230  1999                     __end_of_SYSTEM_Initialize:	
 11231                           
 11232                           	psect	text40
 11233  19DD                     __ptext40:	
 11234 ;; *************** function _TMR0_Initialize *****************
 11235 ;; Defined at:
 11236 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 11237 ;; Parameters:    Size  Location     Type
 11238 ;;		None
 11239 ;; Auto vars:     Size  Location     Type
 11240 ;;		None
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      void 
 11243 ;; Registers used:
 11244 ;;		wreg, status,2, status,0, pclath, cstack
 11245 ;; Tracked objects:
 11246 ;;		On entry : B1F/1
 11247 ;;		On exit  : 1F/2
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;Total ram usage:        1 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    4
 11257 ;; This function calls:
 11258 ;;		_TMR0_SetInterruptHandler
 11259 ;; This function is called by:
 11260 ;;		_SYSTEM_Initialize
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264                           
 11265                           ;psect for function _TMR0_Initialize
 11266  19DD                     _TMR0_Initialize:	
 11267                           
 11268                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
 11269                           
 11270                           ;incstack = 0
 11271                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11272  19DD  0815               	movf	21,w	;volatile
 11273  19DE  39C0               	andlw	192
 11274  19DF  3812               	iorlw	18
 11275  19E0  0095               	movwf	21	;volatile
 11276                           
 11277                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
 11278  19E1  3083               	movlw	131
 11279  19E2  0020               	movlb	0	; select bank0
 11280  19E3  0095               	movwf	21	;volatile
 11281                           
 11282                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
 11283  19E4  3083               	movlw	131
 11284  19E5  00F7               	movwf	??_TMR0_Initialize
 11285  19E6  0877               	movf	??_TMR0_Initialize,w
 11286  19E7  0022               	movlb	2	; select bank2
 11287  19E8  00EF               	movwf	_timer0ReloadVal^(0+256)	;volatile
 11288                           
 11289                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
 11290  19E9  110B               	bcf	11,2	;volatile
 11291                           
 11292                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
 11293  19EA  168B               	bsf	11,5	;volatile
 11294                           
 11295                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11296  19EB  3043               	movlw	low _TMR0_DefaultInterruptHandler
 11297  19EC  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 11298  19ED  3019               	movlw	high _TMR0_DefaultInterruptHandler
 11299  19EE  00F6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 11300  19EF  3199  214D         	fcall	_TMR0_SetInterruptHandler
 11301  19F1  0008               	return
 11302  19F2                     __end_of_TMR0_Initialize:	
 11303                           
 11304                           	psect	text41
 11305  194D                     __ptext41:	
 11306 ;; *************** function _TMR0_SetInterruptHandler *****************
 11307 ;; Defined at:
 11308 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;  InterruptHan    2    5[COMMON] PTR FTN()void 
 11311 ;;		 -> TimerISR(1), TMR0_DefaultInterruptHandler(1), 
 11312 ;; Auto vars:     Size  Location     Type
 11313 ;;		None
 11314 ;; Return value:  Size  Location     Type
 11315 ;;                  1    wreg      void 
 11316 ;; Registers used:
 11317 ;;		wreg
 11318 ;; Tracked objects:
 11319 ;;		On entry : 1E/3
 11320 ;;		On exit  : 1F/2
 11321 ;;		Unchanged: 0/0
 11322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11323 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11327 ;;Total ram usage:        2 bytes
 11328 ;; Hardware stack levels used:    1
 11329 ;; Hardware stack levels required when called:    3
 11330 ;; This function calls:
 11331 ;;		Nothing
 11332 ;; This function is called by:
 11333 ;;		_TMR0_Initialize
 11334 ;;		_main
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           
 11339                           ;psect for function _TMR0_SetInterruptHandler
 11340  194D                     _TMR0_SetInterruptHandler:	
 11341                           
 11342                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
 11343                           
 11344                           ;incstack = 0
 11345                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 11346  194D  0876               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 11347  194E  0022               	movlb	2	; select bank2
 11348  194F  00EE               	movwf	(_TMR0_InterruptHandler+1)^(0+256)
 11349  1950  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 11350  1951  00ED               	movwf	_TMR0_InterruptHandler^(0+256)
 11351  1952  0008               	return
 11352  1953                     __end_of_TMR0_SetInterruptHandler:	
 11353                           
 11354                           	psect	text42
 11355  1CB5                     __ptext42:	
 11356 ;; *************** function _PIN_MANAGER_Initialize *****************
 11357 ;; Defined at:
 11358 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;		None
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;		None
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      void 
 11365 ;; Registers used:
 11366 ;;		wreg, status,2
 11367 ;; Tracked objects:
 11368 ;;		On entry : B1F/0
 11369 ;;		On exit  : B1F/1C
 11370 ;;		Unchanged: B00/0
 11371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;Total ram usage:        0 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; Hardware stack levels required when called:    3
 11379 ;; This function calls:
 11380 ;;		Nothing
 11381 ;; This function is called by:
 11382 ;;		_SYSTEM_Initialize
 11383 ;; This function uses a non-reentrant model
 11384 ;;
 11385                           
 11386                           
 11387                           ;psect for function _PIN_MANAGER_Initialize
 11388  1CB5                     _PIN_MANAGER_Initialize:	
 11389                           
 11390                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 11391                           
 11392                           ;incstack = 0
 11393                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11394  1CB5  0022               	movlb	2	; select bank2
 11395  1CB6  018C               	clrf	12	;volatile
 11396                           
 11397                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 11398  1CB7  018D               	clrf	13	;volatile
 11399                           
 11400                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 11401  1CB8  018E               	clrf	14	;volatile
 11402                           
 11403                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x03;
 11404  1CB9  3003               	movlw	3
 11405  1CBA  0021               	movlb	1	; select bank1
 11406  1CBB  008C               	movwf	12	;volatile
 11407                           
 11408                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x70;
 11409  1CBC  3070               	movlw	112
 11410  1CBD  008D               	movwf	13	;volatile
 11411                           
 11412                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xDF;
 11413  1CBE  30DF               	movlw	223
 11414  1CBF  008E               	movwf	14	;volatile
 11415                           
 11416                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x4F;
 11417  1CC0  304F               	movlw	79
 11418  1CC1  0023               	movlb	3	; select bank3
 11419  1CC2  008E               	movwf	14	;volatile
 11420                           
 11421                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x80;
 11422  1CC3  3080               	movlw	128
 11423  1CC4  008D               	movwf	13	;volatile
 11424                           
 11425                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x03;
 11426  1CC5  3003               	movlw	3
 11427  1CC6  008C               	movwf	12	;volatile
 11428                           
 11429                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 11430  1CC7  0024               	movlb	4	; select bank4
 11431  1CC8  018D               	clrf	13	;volatile
 11432                           
 11433                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 11434  1CC9  018C               	clrf	12	;volatile
 11435                           
 11436                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
 11437  1CCA  018E               	clrf	14	;volatile
 11438                           
 11439                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 1;
 11440  1CCB  0021               	movlb	1	; select bank1
 11441  1CCC  1795               	bsf	21,7	;volatile
 11442                           
 11443                           ;mcc_generated_files/pin_manager.c: 91:     ODCONA = 0x00;
 11444  1CCD  0025               	movlb	5	; select bank5
 11445  1CCE  018C               	clrf	12	;volatile
 11446                           
 11447                           ;mcc_generated_files/pin_manager.c: 92:     ODCONB = 0x00;
 11448  1CCF  018D               	clrf	13	;volatile
 11449                           
 11450                           ;mcc_generated_files/pin_manager.c: 93:     ODCONC = 0x00;
 11451  1CD0  018E               	clrf	14	;volatile
 11452                           
 11453                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONA = 0x37;
 11454  1CD1  3037               	movlw	55
 11455  1CD2  0026               	movlb	6	; select bank6
 11456  1CD3  008C               	movwf	12	;volatile
 11457                           
 11458                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONB = 0xF0;
 11459  1CD4  30F0               	movlw	240
 11460  1CD5  008D               	movwf	13	;volatile
 11461                           
 11462                           ;mcc_generated_files/pin_manager.c: 100:     SLRCONC = 0xFF;
 11463  1CD6  30FF               	movlw	255
 11464  1CD7  008E               	movwf	14	;volatile
 11465                           
 11466                           ;mcc_generated_files/pin_manager.c: 109:     RXPPS = 0x0D;
 11467  1CD8  300D               	movlw	13
 11468  1CD9  003C               	movlb	28	; select bank28
 11469  1CDA  00A4               	movwf	36	;volatile
 11470                           
 11471                           ;mcc_generated_files/pin_manager.c: 110:     SSPDATPPS = 0x0C;
 11472  1CDB  300C               	movlw	12
 11473  1CDC  00A1               	movwf	33	;volatile
 11474                           
 11475                           ;mcc_generated_files/pin_manager.c: 111:     RB6PPS = 0x10;
 11476  1CDD  3010               	movlw	16
 11477  1CDE  003D               	movlb	29	; select bank29
 11478  1CDF  009E               	movwf	30	;volatile
 11479                           
 11480                           ;mcc_generated_files/pin_manager.c: 112:     RB7PPS = 0x12;
 11481  1CE0  3012               	movlw	18
 11482  1CE1  009F               	movwf	31	;volatile
 11483                           
 11484                           ;mcc_generated_files/pin_manager.c: 113:     RB4PPS = 0x11;
 11485  1CE2  3011               	movlw	17
 11486  1CE3  009C               	movwf	28	;volatile
 11487                           
 11488                           ;mcc_generated_files/pin_manager.c: 114:     SSPCLKPPS = 0x0E;
 11489  1CE4  300E               	movlw	14
 11490  1CE5  003C               	movlb	28	; select bank28
 11491  1CE6  00A0               	movwf	32	;volatile
 11492  1CE7  0008               	return
 11493  1CE8                     __end_of_PIN_MANAGER_Initialize:	
 11494                           
 11495                           	psect	text43
 11496  1966                     __ptext43:	
 11497 ;; *************** function _OSCILLATOR_Initialize *****************
 11498 ;; Defined at:
 11499 ;;		line 59 in file "mcc_generated_files/mcc.c"
 11500 ;; Parameters:    Size  Location     Type
 11501 ;;		None
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;		None
 11504 ;; Return value:  Size  Location     Type
 11505 ;;                  1    wreg      void 
 11506 ;; Registers used:
 11507 ;;		wreg, status,2
 11508 ;; Tracked objects:
 11509 ;;		On entry : B1F/1C
 11510 ;;		On exit  : B1F/2
 11511 ;;		Unchanged: B00/0
 11512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11517 ;;Total ram usage:        0 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    3
 11520 ;; This function calls:
 11521 ;;		Nothing
 11522 ;; This function is called by:
 11523 ;;		_SYSTEM_Initialize
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           
 11528                           ;psect for function _OSCILLATOR_Initialize
 11529  1966                     _OSCILLATOR_Initialize:	
 11530                           
 11531                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x68;
 11532                           
 11533                           ;incstack = 0
 11534                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11535  1966  3068               	movlw	104
 11536  1967  0021               	movlb	1	; select bank1
 11537  1968  0099               	movwf	25	;volatile
 11538                           
 11539                           ;mcc_generated_files/mcc.c: 64:     OSCTUNE = 0x00;
 11540  1969  0198               	clrf	24	;volatile
 11541                           
 11542                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
 11543  196A  0022               	movlb	2	; select bank2
 11544  196B  0196               	clrf	22	;volatile
 11545  196C  0008               	return
 11546  196D                     __end_of_OSCILLATOR_Initialize:	
 11547                           
 11548                           	psect	text44
 11549  1A20                     __ptext44:	
 11550 ;; *************** function _I2C_Initialize *****************
 11551 ;; Defined at:
 11552 ;;		line 198 in file "mcc_generated_files/i2c.c"
 11553 ;; Parameters:    Size  Location     Type
 11554 ;;		None
 11555 ;; Auto vars:     Size  Location     Type
 11556 ;;		None
 11557 ;; Return value:  Size  Location     Type
 11558 ;;                  1    wreg      void 
 11559 ;; Registers used:
 11560 ;;		wreg, status,2
 11561 ;; Tracked objects:
 11562 ;;		On entry : B1F/2
 11563 ;;		On exit  : B1F/1
 11564 ;;		Unchanged: B00/0
 11565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;Total ram usage:        1 bytes
 11571 ;; Hardware stack levels used:    1
 11572 ;; Hardware stack levels required when called:    3
 11573 ;; This function calls:
 11574 ;;		Nothing
 11575 ;; This function is called by:
 11576 ;;		_SYSTEM_Initialize
 11577 ;; This function uses a non-reentrant model
 11578 ;;
 11579                           
 11580                           
 11581                           ;psect for function _I2C_Initialize
 11582  1A20                     _I2C_Initialize:	
 11583                           
 11584                           ;mcc_generated_files/i2c.c: 200:     i2c_object.pTrHead = i2c_tr_queue;
 11585                           
 11586                           ;incstack = 0
 11587                           ; Regs used in _I2C_Initialize: [wreg+status,2]
 11588  1A20  3069               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
 11589  1A21  00F5               	movwf	??_I2C_Initialize
 11590  1A22  0875               	movf	??_I2C_Initialize,w
 11591  1A23  00D8               	movwf	(low ((_i2c_object| (0+256)+1)))^0
 11592                           
 11593                           ;mcc_generated_files/i2c.c: 201:     i2c_object.pTrTail = i2c_tr_queue;
 11594  1A24  3069               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
 11595  1A25  00F5               	movwf	??_I2C_Initialize
 11596  1A26  0875               	movf	??_I2C_Initialize,w
 11597  1A27  00D7               	movwf	_i2c_object^(0+256)
 11598                           
 11599                           ;mcc_generated_files/i2c.c: 202:     i2c_object.trStatus.s.empty = 1;
 11600  1A28  14D9               	bsf	(_i2c_object^(0+256)+2),1
 11601                           
 11602                           ;mcc_generated_files/i2c.c: 203:     i2c_object.trStatus.s.full = 0;
 11603  1A29  1059               	bcf	(_i2c_object^(0+256)+2),0
 11604                           
 11605                           ;mcc_generated_files/i2c.c: 205:     i2c_object.i2cErrors = 0;
 11606  1A2A  01DB               	clrf	(_i2c_object^(0+256)+4)
 11607                           
 11608                           ;mcc_generated_files/i2c.c: 208:     SSP1STAT = 0x00;
 11609  1A2B  0024               	movlb	4	; select bank4
 11610  1A2C  0194               	clrf	20	;volatile
 11611                           
 11612                           ;mcc_generated_files/i2c.c: 210:     SSP1CON1 = 0x28;
 11613  1A2D  3028               	movlw	40
 11614  1A2E  0095               	movwf	21	;volatile
 11615                           
 11616                           ;mcc_generated_files/i2c.c: 212:     SSP1CON3 = 0x00;
 11617  1A2F  0197               	clrf	23	;volatile
 11618                           
 11619                           ;mcc_generated_files/i2c.c: 214:     SSP1ADD = 0x03;
 11620  1A30  3003               	movlw	3
 11621  1A31  0092               	movwf	18	;volatile
 11622                           
 11623                           ;mcc_generated_files/i2c.c: 217:     PIR1bits.SSP1IF = 0;
 11624  1A32  0020               	movlb	0	; select bank0
 11625  1A33  1190               	bcf	16,3	;volatile
 11626                           
 11627                           ;mcc_generated_files/i2c.c: 218:     PIR2bits.BCL1IF = 0;
 11628  1A34  1191               	bcf	17,3	;volatile
 11629                           
 11630                           ;mcc_generated_files/i2c.c: 221:     PIE1bits.SSP1IE = 1;
 11631  1A35  0021               	movlb	1	; select bank1
 11632  1A36  1590               	bsf	16,3	;volatile
 11633                           
 11634                           ;mcc_generated_files/i2c.c: 222:     PIE2bits.BCL1IE = 1;
 11635  1A37  1591               	bsf	17,3	;volatile
 11636  1A38  0008               	return
 11637  1A39                     __end_of_I2C_Initialize:	
 11638                           
 11639                           	psect	text45
 11640  197F                     __ptext45:	
 11641 ;; *************** function _EUSART_Initialize *****************
 11642 ;; Defined at:
 11643 ;;		line 56 in file "mcc_generated_files/eusart.c"
 11644 ;; Parameters:    Size  Location     Type
 11645 ;;		None
 11646 ;; Auto vars:     Size  Location     Type
 11647 ;;		None
 11648 ;; Return value:  Size  Location     Type
 11649 ;;                  1    wreg      void 
 11650 ;; Registers used:
 11651 ;;		wreg, status,2
 11652 ;; Tracked objects:
 11653 ;;		On entry : 1F/2
 11654 ;;		On exit  : 1F/3
 11655 ;;		Unchanged: 0/0
 11656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;Total ram usage:        0 bytes
 11662 ;; Hardware stack levels used:    1
 11663 ;; Hardware stack levels required when called:    3
 11664 ;; This function calls:
 11665 ;;		Nothing
 11666 ;; This function is called by:
 11667 ;;		_SYSTEM_Initialize
 11668 ;; This function uses a non-reentrant model
 11669 ;;
 11670                           
 11671                           
 11672                           ;psect for function _EUSART_Initialize
 11673  197F                     _EUSART_Initialize:	
 11674                           
 11675                           ;mcc_generated_files/eusart.c: 61:     BAUD1CON = 0x08;
 11676                           
 11677                           ;incstack = 0
 11678                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 11679  197F  3008               	movlw	8
 11680  1980  0023               	movlb	3	; select bank3
 11681  1981  009F               	movwf	31	;volatile
 11682                           
 11683                           ;mcc_generated_files/eusart.c: 64:     RC1STA = 0x90;
 11684  1982  3090               	movlw	144
 11685  1983  009D               	movwf	29	;volatile
 11686                           
 11687                           ;mcc_generated_files/eusart.c: 67:     TX1STA = 0x24;
 11688  1984  3024               	movlw	36
 11689  1985  009E               	movwf	30	;volatile
 11690                           
 11691                           ;mcc_generated_files/eusart.c: 70:     SPBRGL = 0x67;
 11692  1986  3067               	movlw	103
 11693  1987  009B               	movwf	27	;volatile
 11694                           
 11695                           ;mcc_generated_files/eusart.c: 73:     SPBRGH = 0x00;
 11696  1988  019C               	clrf	28	;volatile
 11697  1989  0008               	return
 11698  198A                     __end_of_EUSART_Initialize:	
 11699                           
 11700                           	psect	text46
 11701  1137                     __ptext46:	
 11702 ;; *************** function _IntToHexString *****************
 11703 ;; Defined at:
 11704 ;;		line 118 in file "main.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;  n               2   20[BANK0 ] int 
 11707 ;;  dest            1   22[BANK0 ] PTR unsigned char 
 11708 ;;		 -> checksum(6), 
 11709 ;; Auto vars:     Size  Location     Type
 11710 ;;  remainder       2   27[BANK0 ] int 
 11711 ;;  i               2   29[BANK0 ] int 
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      void 
 11714 ;; Registers used:
 11715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11716 ;; Tracked objects:
 11717 ;;		On entry : 1F/0
 11718 ;;		On exit  : 1F/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:       11 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    5
 11728 ;; This function calls:
 11729 ;;		_ReverseString
 11730 ;;		___awdiv
 11731 ;; This function is called by:
 11732 ;;		_main
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736                           
 11737                           ;psect for function _IntToHexString
 11738  1137                     _IntToHexString:	
 11739                           
 11740                           ;main.c: 118: void IntToHexString(int n, char* dest);main.c: 119: {;main.c: 120:     int
      +                           i = 0;
 11741                           
 11742                           ;incstack = 0
 11743                           ; Regs used in _IntToHexString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11744  1137  01BD               	clrf	IntToHexString@i
 11745  1138  01BE               	clrf	IntToHexString@i+1
 11746  1139                     l5546:	
 11747                           
 11748                           ;main.c: 124:         int remainder = n % 16;
 11749  1139  300F               	movlw	15
 11750  113A  0020               	movlb	0	; select bank0
 11751  113B  0534               	andwf	IntToHexString@n,w
 11752  113C  00BB               	movwf	IntToHexString@remainder
 11753  113D  3000               	movlw	0
 11754  113E  0535               	andwf	IntToHexString@n+1,w
 11755  113F  00BC               	movwf	IntToHexString@remainder+1
 11756                           
 11757                           ;main.c: 126:         dest[i++] = remainder + (remainder >= 10 ? 55 : '0');
 11758  1140  083C               	movf	IntToHexString@remainder+1,w
 11759  1141  3A80               	xorlw	128
 11760  1142  00B7               	movwf	??_IntToHexString
 11761  1143  3080               	movlw	128
 11762  1144  0237               	subwf	??_IntToHexString,w
 11763  1145  1D03               	skipz
 11764  1146  2949               	goto	u5965
 11765  1147  300A               	movlw	10
 11766  1148  023B               	subwf	IntToHexString@remainder,w
 11767  1149                     u5965:	
 11768  1149  1803               	skipnc
 11769  114A  294D               	goto	l5552
 11770  114B  3030               	movlw	48
 11771  114C  294E               	goto	L5
 11772  114D                     l5552:	
 11773  114D  3037               	movlw	55
 11774  114E                     L5:	
 11775  114E  0020               	movlb	0	; select bank0
 11776  114F  00B9               	movwf	_IntToHexString$1796
 11777  1150  3000               	movlw	0
 11778  1151  00BA               	movwf	_IntToHexString$1796+1
 11779  1152  0839               	movf	_IntToHexString$1796,w
 11780  1153  073B               	addwf	IntToHexString@remainder,w
 11781  1154  00B7               	movwf	??_IntToHexString
 11782  1155  083D               	movf	IntToHexString@i,w
 11783  1156  0736               	addwf	IntToHexString@dest,w
 11784  1157  00B8               	movwf	??_IntToHexString+1
 11785  1158  0838               	movf	??_IntToHexString+1,w
 11786  1159  0086               	movwf	6
 11787  115A  3001               	movlw	1	; select bank2/3
 11788  115B  0087               	movwf	7
 11789  115C  0837               	movf	??_IntToHexString,w
 11790  115D  0081               	movwf	1
 11791  115E  3001               	movlw	1
 11792  115F  07BD               	addwf	IntToHexString@i,f
 11793  1160  3000               	movlw	0
 11794  1161  3DBE               	addwfc	IntToHexString@i+1,f
 11795                           
 11796                           ;main.c: 128:     } while ((n /= 16) > 0);
 11797  1162  3010               	movlw	16
 11798  1163  00F5               	movwf	___awdiv@divisor
 11799  1164  3000               	movlw	0
 11800  1165  00F6               	movwf	___awdiv@divisor+1
 11801  1166  0835               	movf	IntToHexString@n+1,w
 11802  1167  00F8               	movwf	___awdiv@dividend+1
 11803  1168  0834               	movf	IntToHexString@n,w
 11804  1169  00F7               	movwf	___awdiv@dividend
 11805  116A  3190  2032  3191   	fcall	___awdiv
 11806  116D  0876               	movf	?___awdiv+1,w
 11807  116E  00B5               	movwf	IntToHexString@n+1
 11808  116F  0875               	movf	?___awdiv,w
 11809  1170  00B4               	movwf	IntToHexString@n
 11810  1171  0835               	movf	IntToHexString@n+1,w
 11811  1172  3A80               	xorlw	128
 11812  1173  00B7               	movwf	??_IntToHexString
 11813  1174  3080               	movlw	128
 11814  1175  0237               	subwf	??_IntToHexString,w
 11815  1176  1D03               	skipz
 11816  1177  297A               	goto	u5975
 11817  1178  3001               	movlw	1
 11818  1179  0234               	subwf	IntToHexString@n,w
 11819  117A                     u5975:	
 11820  117A  1C03               	btfss	3,0
 11821  117B  298A               	goto	l5564
 11822  117C  2939               	goto	l5546
 11823  117D                     l5560:	
 11824                           
 11825                           ;main.c: 130:     {;main.c: 131:         dest[i] = 0;
 11826  117D  0020               	movlb	0	; select bank0
 11827  117E  083D               	movf	IntToHexString@i,w
 11828  117F  0736               	addwf	IntToHexString@dest,w
 11829  1180  00B7               	movwf	??_IntToHexString
 11830  1181  0837               	movf	??_IntToHexString,w
 11831  1182  0086               	movwf	6
 11832  1183  3001               	movlw	1	; select bank2/3
 11833  1184  0087               	movwf	7
 11834  1185  0181               	clrf	1
 11835                           
 11836                           ;main.c: 132:         i++;
 11837  1186  3001               	movlw	1
 11838  1187  07BD               	addwf	IntToHexString@i,f
 11839  1188  3000               	movlw	0
 11840  1189  3DBE               	addwfc	IntToHexString@i+1,f
 11841  118A                     l5564:	
 11842                           
 11843                           ;main.c: 129:     while (i < 4)
 11844  118A  0020               	movlb	0	; select bank0
 11845  118B  083E               	movf	IntToHexString@i+1,w
 11846  118C  3A80               	xorlw	128
 11847  118D  00B7               	movwf	??_IntToHexString
 11848  118E  3080               	movlw	128
 11849  118F  0237               	subwf	??_IntToHexString,w
 11850  1190  1D03               	skipz
 11851  1191  2994               	goto	u5985
 11852  1192  3004               	movlw	4
 11853  1193  023D               	subwf	IntToHexString@i,w
 11854  1194                     u5985:	
 11855  1194  1C03               	skipc
 11856  1195  297D               	goto	l5560
 11857                           
 11858                           ;main.c: 134:     ReverseString(dest);
 11859  1196  0020               	movlb	0	; select bank0
 11860  1197  0836               	movf	IntToHexString@dest,w
 11861  1198  00A5               	movwf	ReverseString@str
 11862  1199  3001               	movlw	1
 11863  119A  00A6               	movwf	ReverseString@str+1
 11864  119B  3187  2795         	fcall	_ReverseString
 11865  119D  0008               	return
 11866  119E                     __end_of_IntToHexString:	
 11867                           
 11868                           	psect	text47
 11869  006E                     __ptext47:	
 11870 ;; *************** function _GetNavData *****************
 11871 ;; Defined at:
 11872 ;;		line 572 in file "main.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;		None
 11875 ;; Auto vars:     Size  Location     Type
 11876 ;;  strId          12   34[BANK0 ] unsigned char [12]
 11877 ;;  skip            1   57[BANK0 ] _Bool 
 11878 ;;  data_type       7   46[BANK0 ] unsigned char [7]
 11879 ;;  startTime       4   53[BANK0 ] unsigned long 
 11880 ;;  index           2   67[BANK0 ] int 
 11881 ;;  dataIndex       2   64[BANK0 ] int 
 11882 ;;  dataFieldTyp    2   62[BANK0 ] int 
 11883 ;;  signInsertIn    2   59[BANK0 ] int 
 11884 ;;  byte            1   66[BANK0 ] unsigned char 
 11885 ;;  doParse         1   61[BANK0 ] _Bool 
 11886 ;;  success         1   58[BANK0 ] _Bool 
 11887 ;; Return value:  Size  Location     Type
 11888 ;;                  1    wreg      _Bool 
 11889 ;; Registers used:
 11890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11891 ;; Tracked objects:
 11892 ;;		On entry : 0/0
 11893 ;;		On exit  : 1F/0
 11894 ;;		Unchanged: 0/0
 11895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;      Locals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11898 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;Total ram usage:       39 bytes
 11901 ;; Hardware stack levels used:    1
 11902 ;; Hardware stack levels required when called:    6
 11903 ;; This function calls:
 11904 ;;		_ClearString
 11905 ;;		_EUSART_Read
 11906 ;;		_EUSART_is_rx_ready
 11907 ;;		_FindString
 11908 ;;		_Insert
 11909 ;;		_InsertString
 11910 ;;		_IntToString
 11911 ;;		_SafeSetByte
 11912 ;;		_WriteGPS
 11913 ;;		_strlen
 11914 ;; This function is called by:
 11915 ;;		_main
 11916 ;; This function uses a non-reentrant model
 11917 ;;
 11918                           
 11919                           
 11920                           ;psect for function _GetNavData
 11921  006E                     _GetNavData:	
 11922                           
 11923                           ;main.c: 574:     _Bool success = 0;
 11924                           
 11925                           ;incstack = 0
 11926                           ; Regs used in _GetNavData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11927  006E  0020               	movlb	0	; select bank0
 11928  006F  01DA               	clrf	GetNavData@success
 11929  0070  0022               	movlb	2	; select bank2
 11930  0071  168E               	bsf	14,5	;volatile
 11931                           
 11932                           ;main.c: 581:     unsigned long startTime = ticks;
 11933  0072  085F               	movf	(_ticks+3)^(0+256),w
 11934  0073  0020               	movlb	0	; select bank0
 11935  0074  00D8               	movwf	GetNavData@startTime+3
 11936  0075  0022               	movlb	2	; select bank2
 11937  0076  085E               	movf	(_ticks+2)^(0+256),w
 11938  0077  0020               	movlb	0	; select bank0
 11939  0078  00D7               	movwf	GetNavData@startTime+2
 11940  0079  0022               	movlb	2	; select bank2
 11941  007A  085D               	movf	(_ticks+1)^(0+256),w
 11942  007B  0020               	movlb	0	; select bank0
 11943  007C  00D6               	movwf	GetNavData@startTime+1
 11944  007D  0022               	movlb	2	; select bank2
 11945  007E  085C               	movf	_ticks^(0+256),w
 11946  007F  0020               	movlb	0	; select bank0
 11947  0080  00D5               	movwf	GetNavData@startTime
 11948                           
 11949                           ;main.c: 584:     int dataIndex = 0;
 11950  0081  01E0               	clrf	GetNavData@dataIndex
 11951  0082  01E1               	clrf	GetNavData@dataIndex+1
 11952                           
 11953                           ;main.c: 586:     int dataFieldType = 0;
 11954  0083  01DE               	clrf	GetNavData@dataFieldType
 11955  0084  01DF               	clrf	GetNavData@dataFieldType+1
 11956                           
 11957                           ;main.c: 588:     char byte;;main.c: 590:     char data_type[7] = {'\0'};
 11958  0085  304E               	movlw	low GetNavData@data_type
 11959  0086  0086               	movwf	6
 11960  0087  3000               	movlw	high GetNavData@data_type
 11961  0088  0087               	movwf	7
 11962  0089  3007               	movlw	7
 11963  008A  00BE               	movwf	??_GetNavData
 11964  008B  3000               	movlw	0
 11965  008C                     u6040:	
 11966  008C  001E               	movwi fsr1++
 11967  008D  0BBE               	decfsz	??_GetNavData,f
 11968  008E  288C               	goto	u6040
 11969                           
 11970                           ;main.c: 592:     _Bool doParse = 0;
 11971  008F  01DD               	clrf	GetNavData@doParse
 11972                           
 11973                           ;main.c: 594:     ClearString(messages[0]);
 11974  0090  087B               	movf	_messages,w
 11975  0091  00A2               	movwf	ClearString@str
 11976  0092  3003               	movlw	3
 11977  0093  00A3               	movwf	ClearString@str+1
 11978  0094  319A  22E0  3180   	fcall	_ClearString
 11979                           
 11980                           ;main.c: 595:     ClearString(messages[1]);
 11981  0097  087C               	movf	_messages+1,w
 11982  0098  0020               	movlb	0	; select bank0
 11983  0099  00A2               	movwf	ClearString@str
 11984  009A  3003               	movlw	3
 11985  009B  00A3               	movwf	ClearString@str+1
 11986  009C  319A  22E0  3180   	fcall	_ClearString
 11987                           
 11988                           ;main.c: 597:     int index = 0;
 11989  009F  0020               	movlb	0	; select bank0
 11990  00A0  01E3               	clrf	GetNavData@index
 11991  00A1  01E4               	clrf	GetNavData@index+1
 11992                           
 11993                           ;main.c: 599:     int signInsertIndex = -1;
 11994  00A2  30FF               	movlw	255
 11995  00A3  00DB               	movwf	GetNavData@signInsertIndex
 11996  00A4  30FF               	movlw	255
 11997  00A5  00DC               	movwf	GetNavData@signInsertIndex+1
 11998                           
 11999                           ;main.c: 602:     WriteGPS("$PUBX,00*33\r\n");
 12000  00A6  309C               	movlw	low (STR_7| (0+32768))
 12001  00A7  00A2               	movwf	WriteGPS@message
 12002  00A8  3098               	movlw	high (STR_7| (0+32768))
 12003  00A9  00A3               	movwf	WriteGPS@message+1
 12004  00AA  319B  2355  3180   	fcall	_WriteGPS
 12005  00AD                     l5764:	
 12006                           ;main.c: 604:     while (!success)
 12007                           
 12008                           
 12009                           ;main.c: 604:     while (!success)
 12010  00AD  0020               	movlb	0	; select bank0
 12011  00AE  085A               	movf	GetNavData@success,w
 12012  00AF  1D03               	btfss	3,2
 12013  00B0  2A85               	goto	l5766
 12014                           
 12015                           ;main.c: 605:     {;main.c: 607:         if (ticks - startTime > 3000)
 12016  00B1  0855               	movf	GetNavData@startTime,w
 12017  00B2  0022               	movlb	2	; select bank2
 12018  00B3  025C               	subwf	_ticks^(0+256),w
 12019  00B4  0020               	movlb	0	; select bank0
 12020  00B5  00BE               	movwf	??_GetNavData
 12021  00B6  0856               	movf	GetNavData@startTime+1,w
 12022  00B7  0022               	movlb	2	; select bank2
 12023  00B8  3B5D               	subwfb	(_ticks+1)^(0+256),w
 12024  00B9  0020               	movlb	0	; select bank0
 12025  00BA  00BF               	movwf	??_GetNavData+1
 12026  00BB  0857               	movf	GetNavData@startTime+2,w
 12027  00BC  0022               	movlb	2	; select bank2
 12028  00BD  3B5E               	subwfb	(_ticks+2)^(0+256),w
 12029  00BE  0020               	movlb	0	; select bank0
 12030  00BF  00C0               	movwf	??_GetNavData+2
 12031  00C0  0858               	movf	GetNavData@startTime+3,w
 12032  00C1  0022               	movlb	2	; select bank2
 12033  00C2  3B5F               	subwfb	(_ticks+3)^(0+256),w
 12034  00C3  0020               	movlb	0	; select bank0
 12035  00C4  00C1               	movwf	??_GetNavData+3
 12036  00C5  0841               	movf	??_GetNavData+3,w
 12037  00C6  1D03               	btfss	3,2
 12038  00C7  2A85               	goto	l5766
 12039  00C8  0840               	movf	??_GetNavData+2,w
 12040  00C9  1D03               	btfss	3,2
 12041  00CA  2A85               	goto	l5766
 12042  00CB  30B9               	movlw	185
 12043  00CC  023E               	subwf	??_GetNavData,w
 12044  00CD  300B               	movlw	11
 12045  00CE  3B3F               	subwfb	??_GetNavData+1,w
 12046  00CF  1803               	btfsc	3,0
 12047  00D0  2A85               	goto	l5766
 12048                           
 12049                           ;main.c: 613:         if (EUSART_is_rx_ready())
 12050  00D1  3199  2148  3180   	fcall	_EUSART_is_rx_ready
 12051  00D4  3A00               	xorlw	0
 12052  00D5  1903               	skipnz
 12053  00D6  28AD               	goto	l5764
 12054                           
 12055                           ;main.c: 614:         {;main.c: 615:             byte = EUSART_Read();
 12056  00D7  3199  2176  3180   	fcall	_EUSART_Read
 12057  00DA  0020               	movlb	0	; select bank0
 12058  00DB  00BE               	movwf	??_GetNavData
 12059  00DC  083E               	movf	??_GetNavData,w
 12060  00DD  00E2               	movwf	GetNavData@byte
 12061                           
 12062                           ;main.c: 635:             _Bool skip = 1;
 12063  00DE  01D9               	clrf	GetNavData@skip
 12064  00DF  0AD9               	incf	GetNavData@skip,f
 12065                           
 12066                           ;main.c: 636:             switch (byte)
 12067  00E0  29AD               	goto	l5706
 12068  00E1                     l813:	
 12069                           ;main.c: 637:             {;main.c: 638:             case '$':
 12070                           
 12071                           
 12072                           ;main.c: 639:                 doParse = 1;
 12073  00E1  01DD               	clrf	GetNavData@doParse
 12074  00E2  0ADD               	incf	GetNavData@doParse,f
 12075                           
 12076                           ;main.c: 640:                 skip = 0;
 12077  00E3  01D9               	clrf	GetNavData@skip
 12078  00E4  2995               	goto	l5698
 12079  00E5                     l5668:	
 12080                           ;main.c: 642:                 break;
 12081                           
 12082                           ;main.c: 641:                 dataIndex = 0;
 12083                           
 12084                           
 12085                           ;main.c: 644:                 if (dataFieldType == PUBX_DATA_TYPE)
 12086  00E5  085E               	movf	GetNavData@dataFieldType,w
 12087  00E6  045F               	iorwf	GetNavData@dataFieldType+1,w
 12088  00E7  1D03               	btfss	3,2
 12089  00E8  296D               	goto	l5690
 12090                           
 12091                           ;main.c: 645:                 {;main.c: 646:                     if (!FindString(data_ty
      +                          pe, strlen(data_type), "PUBX", 4))
 12092  00E9  304E               	movlw	low GetNavData@data_type
 12093  00EA  00F5               	movwf	strlen@s
 12094  00EB  3000               	movlw	high GetNavData@data_type
 12095  00EC  00F6               	movwf	strlen@s+1
 12096  00ED  319A  2207  3180   	fcall	_strlen
 12097  00F0  0876               	movf	?_strlen+1,w
 12098  00F1  00A3               	movwf	FindString@srcLen+1
 12099  00F2  0875               	movf	?_strlen,w
 12100  00F3  00A2               	movwf	FindString@srcLen
 12101  00F4  30AF               	movlw	low (STR_8| (0+32768))
 12102  00F5  00A4               	movwf	FindString@target
 12103  00F6  3098               	movlw	high (STR_8| (0+32768))
 12104  00F7  00A5               	movwf	FindString@target+1
 12105  00F8  3004               	movlw	4
 12106  00F9  00A6               	movwf	FindString@targetLen
 12107  00FA  3000               	movlw	0
 12108  00FB  00A7               	movwf	FindString@targetLen+1
 12109  00FC  304E               	movlw	(low (GetNavData@data_type| 0))& (0+255)
 12110  00FD  319D  2591  3180   	fcall	_FindString
 12111  0100  3A00               	xorlw	0
 12112  0101  1D03               	skipz
 12113  0102  290D               	goto	l5676
 12114                           
 12115                           ;main.c: 647:                     {;main.c: 648:                         doParse = 0;
 12116  0103  0020               	movlb	0	; select bank0
 12117  0104  01DD               	clrf	GetNavData@doParse
 12118                           
 12119                           ;main.c: 649:                         ClearString(data_type);
 12120  0105  304E               	movlw	low GetNavData@data_type
 12121  0106  00A2               	movwf	ClearString@str
 12122  0107  3000               	movlw	high GetNavData@data_type
 12123  0108  00A3               	movwf	ClearString@str+1
 12124  0109  319A  22E0  3180   	fcall	_ClearString
 12125                           
 12126                           ;main.c: 650:                     }
 12127  010C  296D               	goto	l5690
 12128  010D                     l5676:	
 12129                           
 12130                           ;main.c: 652:                     {;main.c: 653:                         messages[0][0] 
      +                          = '$';
 12131  010D  3024               	movlw	36
 12132  010E  0020               	movlb	0	; select bank0
 12133  010F  00BE               	movwf	??_GetNavData
 12134  0110  087B               	movf	_messages,w
 12135  0111  0086               	movwf	6
 12136  0112  3003               	movlw	3	; select bank6/7
 12137  0113  0087               	movwf	7
 12138  0114  083E               	movf	??_GetNavData,w
 12139  0115  0081               	movwf	1
 12140                           
 12141                           ;main.c: 654:                         messages[0][1] = '$';
 12142  0116  3024               	movlw	36
 12143  0117  00BE               	movwf	??_GetNavData
 12144  0118  0A7B               	incf	_messages,w
 12145  0119  0086               	movwf	6
 12146  011A  3003               	movlw	3	; select bank6/7
 12147  011B  0087               	movwf	7
 12148  011C  083E               	movf	??_GetNavData,w
 12149  011D  0081               	movwf	1
 12150                           
 12151                           ;main.c: 655:                         InsertString(messages[0], "TEST", 2, 70);
 12152  011E  30AA               	movlw	low (STR_10| (0+32768))
 12153  011F  00A8               	movwf	InsertString@src
 12154  0120  3098               	movlw	high (STR_10| (0+32768))
 12155  0121  00A9               	movwf	InsertString@src+1
 12156  0122  3002               	movlw	2
 12157  0123  00AA               	movwf	InsertString@index
 12158  0124  3000               	movlw	0
 12159  0125  00AB               	movwf	InsertString@index+1
 12160  0126  3046               	movlw	70
 12161  0127  00AC               	movwf	InsertString@destLimit
 12162  0128  3000               	movlw	0
 12163  0129  00AD               	movwf	InsertString@destLimit+1
 12164  012A  087B               	movf	_messages,w
 12165  012B  319E  2699  3180   	fcall	_InsertString
 12166                           
 12167                           ;main.c: 656:                         index = strlen(messages[0]);
 12168  012E  087B               	movf	_messages,w
 12169  012F  00F5               	movwf	strlen@s
 12170  0130  3003               	movlw	3
 12171  0131  00F6               	movwf	strlen@s+1
 12172  0132  319A  2207  3180   	fcall	_strlen
 12173  0135  0876               	movf	?_strlen+1,w
 12174  0136  00E4               	movwf	GetNavData@index+1
 12175  0137  0875               	movf	?_strlen,w
 12176  0138  00E3               	movwf	GetNavData@index
 12177                           
 12178                           ;main.c: 657:                         char strId[12] = {'\0'};
 12179  0139  3042               	movlw	low GetNavData@strId
 12180  013A  0086               	movwf	6
 12181  013B  3000               	movlw	high GetNavData@strId
 12182  013C  0087               	movwf	7
 12183  013D  300C               	movlw	12
 12184  013E  00BE               	movwf	??_GetNavData
 12185  013F  3000               	movlw	0
 12186  0140                     u6090:	
 12187  0140  001E               	movwi fsr1++
 12188  0141  0BBE               	decfsz	??_GetNavData,f
 12189  0142  2940               	goto	u6090
 12190                           
 12191                           ;main.c: 658:                         IntToString(id, strId);
 12192  0143  0023               	movlb	3	; select bank3
 12193  0144  0854               	movf	(_id+1)^(0+384),w
 12194  0145  0020               	movlb	0	; select bank0
 12195  0146  00B5               	movwf	IntToString@n+1
 12196  0147  0023               	movlb	3	; select bank3
 12197  0148  0853               	movf	_id^(0+384),w
 12198  0149  0020               	movlb	0	; select bank0
 12199  014A  00B4               	movwf	IntToString@n
 12200  014B  3042               	movlw	low GetNavData@strId
 12201  014C  00B6               	movwf	IntToString@dest
 12202  014D  3000               	movlw	high GetNavData@strId
 12203  014E  00B7               	movwf	IntToString@dest+1
 12204  014F  3192  2205  3180   	fcall	_IntToString
 12205                           
 12206                           ;main.c: 659:                         InsertString(messages[0], strId, index, 70);
 12207  0152  3042               	movlw	low GetNavData@strId
 12208  0153  00A8               	movwf	InsertString@src
 12209  0154  3000               	movlw	high GetNavData@strId
 12210  0155  00A9               	movwf	InsertString@src+1
 12211  0156  0864               	movf	GetNavData@index+1,w
 12212  0157  00AB               	movwf	InsertString@index+1
 12213  0158  0863               	movf	GetNavData@index,w
 12214  0159  00AA               	movwf	InsertString@index
 12215  015A  3046               	movlw	70
 12216  015B  00AC               	movwf	InsertString@destLimit
 12217  015C  3000               	movlw	0
 12218  015D  00AD               	movwf	InsertString@destLimit+1
 12219  015E  087B               	movf	_messages,w
 12220  015F  319E  2699  3180   	fcall	_InsertString
 12221                           
 12222                           ;main.c: 660:                         index = strlen(messages[0]);
 12223  0162  087B               	movf	_messages,w
 12224  0163  00F5               	movwf	strlen@s
 12225  0164  3003               	movlw	3
 12226  0165  00F6               	movwf	strlen@s+1
 12227  0166  319A  2207  3180   	fcall	_strlen
 12228  0169  0876               	movf	?_strlen+1,w
 12229  016A  00E4               	movwf	GetNavData@index+1
 12230  016B  0875               	movf	?_strlen,w
 12231  016C  00E3               	movwf	GetNavData@index
 12232  016D                     l5690:	
 12233                           
 12234                           ;main.c: 663:                 if (doParse)
 12235  016D  0020               	movlb	0	; select bank0
 12236  016E  085D               	movf	GetNavData@doParse,w
 12237  016F  1903               	btfsc	3,2
 12238  0170  2995               	goto	l5698
 12239                           
 12240                           ;main.c: 664:                 {;main.c: 665:                     dataFieldType++;
 12241  0171  3001               	movlw	1
 12242  0172  07DE               	addwf	GetNavData@dataFieldType,f
 12243  0173  3000               	movlw	0
 12244  0174  3DDF               	addwfc	GetNavData@dataFieldType+1,f
 12245                           
 12246                           ;main.c: 666:                     messages[dataFieldType > PUBX_ALT ? 1 : 0][index] = ',
      +                          ';
 12247  0175  302C               	movlw	44
 12248  0176  00BE               	movwf	??_GetNavData
 12249  0177  085F               	movf	GetNavData@dataFieldType+1,w
 12250  0178  3A80               	xorlw	128
 12251  0179  00BF               	movwf	??_GetNavData+1
 12252  017A  3080               	movlw	128
 12253  017B  023F               	subwf	??_GetNavData+1,w
 12254  017C  3008               	movlw	8
 12255  017D  1903               	btfsc	3,2
 12256  017E  025E               	subwf	GetNavData@dataFieldType,w
 12257  017F  1C03               	btfss	3,0
 12258  0180  2983               	goto	u6110
 12259  0181  3001               	movlw	1
 12260  0182  2984               	goto	u6120
 12261  0183                     u6110:	
 12262  0183  3000               	movlw	0
 12263  0184                     u6120:	
 12264  0184  3E7B               	addlw	(low (_messages| 0))& (0+255)
 12265  0185  0086               	movwf	6
 12266  0186  0187               	clrf	7
 12267  0187  0020               	movlb	0	; select bank0
 12268  0188  0863               	movf	GetNavData@index,w
 12269  0189  0701               	addwf	1,w
 12270  018A  00C0               	movwf	??_GetNavData+2
 12271  018B  0840               	movf	??_GetNavData+2,w
 12272  018C  0086               	movwf	6
 12273  018D  3003               	movlw	3	; select bank6/7
 12274  018E  0087               	movwf	7
 12275  018F  083E               	movf	??_GetNavData,w
 12276  0190  0081               	movwf	1
 12277                           
 12278                           ;main.c: 667:                     index++;
 12279  0191  3001               	movlw	1
 12280  0192  07E3               	addwf	GetNavData@index,f
 12281  0193  3000               	movlw	0
 12282  0194  3DE4               	addwfc	GetNavData@index+1,f
 12283  0195                     l5698:	
 12284                           
 12285                           ;main.c: 669:                 dataIndex = 0;
 12286  0195  01E0               	clrf	GetNavData@dataIndex
 12287  0196  01E1               	clrf	GetNavData@dataIndex+1
 12288                           
 12289                           ;main.c: 670:                 break;
 12290  0197  29C0               	goto	l5708
 12291  0198                     l5700:	
 12292                           
 12293                           ;main.c: 672:                 success = dataFieldType > 13;
 12294  0198  085F               	movf	GetNavData@dataFieldType+1,w
 12295  0199  3A80               	xorlw	128
 12296  019A  00BE               	movwf	??_GetNavData
 12297  019B  3080               	movlw	128
 12298  019C  023E               	subwf	??_GetNavData,w
 12299  019D  1D03               	skipz
 12300  019E  29A1               	goto	u6135
 12301  019F  300E               	movlw	14
 12302  01A0  025E               	subwf	GetNavData@dataFieldType,w
 12303  01A1                     u6135:	
 12304  01A1  1C03               	btfss	3,0
 12305  01A2  29A5               	goto	u6130
 12306  01A3  3001               	movlw	1
 12307  01A4  29A6               	goto	u6140
 12308  01A5                     u6130:	
 12309  01A5  3000               	movlw	0
 12310  01A6                     u6140:	
 12311  01A6  0020               	movlb	0	; select bank0
 12312  01A7  00BF               	movwf	??_GetNavData+1
 12313  01A8  083F               	movf	??_GetNavData+1,w
 12314  01A9  00DA               	movwf	GetNavData@success
 12315                           
 12316                           ;main.c: 673:                 break;
 12317  01AA  29C0               	goto	l5708
 12318  01AB                     l5702:	
 12319                           
 12320                           ;main.c: 675:                 skip = 0;
 12321  01AB  01D9               	clrf	GetNavData@skip
 12322                           
 12323                           ;main.c: 676:                 break;
 12324  01AC  29C0               	goto	l5708
 12325  01AD                     l5706:	
 12326  01AD  0862               	movf	GetNavData@byte,w
 12327  01AE  00BE               	movwf	??_GetNavData
 12328  01AF  01BF               	clrf	??_GetNavData+1
 12329                           
 12330                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12331                           ; Switch size 1, requested type "simple"
 12332                           ; Number of cases is 1, Range of values is 0 to 0
 12333                           ; switch strategies available:
 12334                           ; Name         Instructions Cycles
 12335                           ; simple_byte            4     3 (average)
 12336                           ; direct_byte            8     6 (fixed)
 12337                           ; jumptable            260     6 (fixed)
 12338                           ;	Chosen strategy is simple_byte
 12339  01B0  083F               	movf	??_GetNavData+1,w
 12340  01B1  3A00               	xorlw	0	; case 0
 12341  01B2  1903               	skipnz
 12342  01B3  29B5               	goto	l5918
 12343  01B4  29AB               	goto	l5702
 12344  01B5                     l5918:	
 12345                           
 12346                           ; Switch size 1, requested type "simple"
 12347                           ; Number of cases is 3, Range of values is 10 to 44
 12348                           ; switch strategies available:
 12349                           ; Name         Instructions Cycles
 12350                           ; simple_byte           10     6 (average)
 12351                           ; direct_byte           79     9 (fixed)
 12352                           ; jumptable            263     9 (fixed)
 12353                           ;	Chosen strategy is simple_byte
 12354  01B5  083E               	movf	??_GetNavData,w
 12355  01B6  3A0A               	xorlw	10	; case 10
 12356  01B7  1903               	skipnz
 12357  01B8  2998               	goto	l5700
 12358  01B9  3A2E               	xorlw	46	; case 36
 12359  01BA  1903               	skipnz
 12360  01BB  28E1               	goto	l813
 12361  01BC  3A08               	xorlw	8	; case 44
 12362  01BD  1903               	skipnz
 12363  01BE  28E5               	goto	l5668
 12364  01BF  29AB               	goto	l5702
 12365  01C0                     l5708:	
 12366                           
 12367                           ;main.c: 678:             if (!skip && doParse)
 12368  01C0  0859               	movf	GetNavData@skip,w
 12369  01C1  1D03               	btfss	3,2
 12370  01C2  28AD               	goto	l5764
 12371  01C3  085D               	movf	GetNavData@doParse,w
 12372  01C4  1D03               	btfss	3,2
 12373  01C5  2A4D               	goto	l5760
 12374  01C6  28AD               	goto	l5764
 12375  01C7                     l5714:	
 12376                           
 12377                           ;main.c: 683:                     SafeSetByte(data_type, 7, dataIndex, byte);
 12378  01C7  3007               	movlw	7
 12379  01C8  00A0               	movwf	SafeSetByte@length
 12380  01C9  3000               	movlw	0
 12381  01CA  00A1               	movwf	SafeSetByte@length+1
 12382  01CB  0861               	movf	GetNavData@dataIndex+1,w
 12383  01CC  00A3               	movwf	SafeSetByte@index+1
 12384  01CD  0860               	movf	GetNavData@dataIndex,w
 12385  01CE  00A2               	movwf	SafeSetByte@index
 12386  01CF  0862               	movf	GetNavData@byte,w
 12387  01D0  00BE               	movwf	??_GetNavData
 12388  01D1  083E               	movf	??_GetNavData,w
 12389  01D2  00A4               	movwf	SafeSetByte@data
 12390  01D3  304E               	movlw	(low (GetNavData@data_type| 0))& (0+255)
 12391  01D4  319A  2298  3180   	fcall	_SafeSetByte
 12392                           
 12393                           ;main.c: 684:                     break;
 12394  01D7  2A7B               	goto	l5762
 12395  01D8                     l5716:	
 12396                           
 12397                           ;main.c: 686:                     if (dataIndex < 6)
 12398  01D8  0861               	movf	GetNavData@dataIndex+1,w
 12399  01D9  3A80               	xorlw	128
 12400  01DA  00BE               	movwf	??_GetNavData
 12401  01DB  3080               	movlw	128
 12402  01DC  023E               	subwf	??_GetNavData,w
 12403  01DD  1D03               	skipz
 12404  01DE  29E1               	goto	u6175
 12405  01DF  3006               	movlw	6
 12406  01E0  0260               	subwf	GetNavData@dataIndex,w
 12407  01E1                     u6175:	
 12408  01E1  1803               	skipnc
 12409  01E2  2A7B               	goto	l5762
 12410                           
 12411                           ;main.c: 687:                     {;main.c: 688:                         if (dataIndex =
      +                          = 2 || dataIndex == 4)
 12412  01E3  3002               	movlw	2
 12413  01E4  0020               	movlb	0	; select bank0
 12414  01E5  0660               	xorwf	GetNavData@dataIndex,w
 12415  01E6  0461               	iorwf	GetNavData@dataIndex+1,w
 12416  01E7  1903               	btfsc	3,2
 12417  01E8  29EE               	goto	l5722
 12418  01E9  3004               	movlw	4
 12419  01EA  0660               	xorwf	GetNavData@dataIndex,w
 12420  01EB  0461               	iorwf	GetNavData@dataIndex+1,w
 12421  01EC  1D03               	btfss	3,2
 12422  01ED  29FD               	goto	l5726
 12423  01EE                     l5722:	
 12424                           
 12425                           ;main.c: 689:                         {;main.c: 690:                             message
      +                          s[0][index] = ':';
 12426  01EE  303A               	movlw	58
 12427  01EF  00BE               	movwf	??_GetNavData
 12428  01F0  0863               	movf	GetNavData@index,w
 12429  01F1  077B               	addwf	_messages,w
 12430  01F2  00BF               	movwf	??_GetNavData+1
 12431  01F3  083F               	movf	??_GetNavData+1,w
 12432  01F4  0086               	movwf	6
 12433  01F5  3003               	movlw	3	; select bank6/7
 12434  01F6  0087               	movwf	7
 12435  01F7  083E               	movf	??_GetNavData,w
 12436  01F8  0081               	movwf	1
 12437                           
 12438                           ;main.c: 691:                             index++;
 12439  01F9  3001               	movlw	1
 12440  01FA  07E3               	addwf	GetNavData@index,f
 12441  01FB  3000               	movlw	0
 12442  01FC  3DE4               	addwfc	GetNavData@index+1,f
 12443  01FD                     l5726:	
 12444                           
 12445                           ;main.c: 693:                         messages[0][index] = byte;
 12446  01FD  0862               	movf	GetNavData@byte,w
 12447  01FE  00BE               	movwf	??_GetNavData
 12448  01FF  0863               	movf	GetNavData@index,w
 12449  0200  077B               	addwf	_messages,w
 12450  0201  2A40               	goto	L6
 12451  0202                     l5728:	
 12452                           
 12453                           ;main.c: 697:                     if (dataIndex == 0)
 12454  0202  0860               	movf	GetNavData@dataIndex,w
 12455  0203  0461               	iorwf	GetNavData@dataIndex+1,w
 12456  0204  1D03               	btfss	3,2
 12457  0205  29FD               	goto	l5726
 12458                           
 12459                           ;main.c: 698:                     {;main.c: 699:                         signInsertIndex
      +                           = index;
 12460  0206  0864               	movf	GetNavData@index+1,w
 12461  0207  00DC               	movwf	GetNavData@signInsertIndex+1
 12462  0208  0863               	movf	GetNavData@index,w
 12463  0209  00DB               	movwf	GetNavData@signInsertIndex
 12464  020A  29FD               	goto	l5726
 12465  020B                     l5734:	
 12466                           
 12467                           ;main.c: 704:                     if (byte != 'N')
 12468  020B  304E               	movlw	78
 12469  020C  0662               	xorwf	GetNavData@byte,w
 12470  020D  1903               	btfsc	3,2
 12471  020E  2A7B               	goto	l5762
 12472                           
 12473                           ;main.c: 705:                     {;main.c: 706:                         Insert(messages
      +                          [0], '-', signInsertIndex, 70);
 12474  020F  302D               	movlw	45
 12475  0210  00BE               	movwf	??_GetNavData
 12476  0211  083E               	movf	??_GetNavData,w
 12477  0212  00A0               	movwf	Insert@src
 12478  0213  085C               	movf	GetNavData@signInsertIndex+1,w
 12479  0214  00A2               	movwf	Insert@index+1
 12480  0215  085B               	movf	GetNavData@signInsertIndex,w
 12481  0216  00A1               	movwf	Insert@index
 12482  0217  3046               	movlw	70
 12483  0218  00A3               	movwf	Insert@destLimit
 12484  0219  3000               	movlw	0
 12485  021A  00A4               	movwf	Insert@destLimit+1
 12486  021B  087B               	movf	_messages,w
 12487  021C  319E  2653  3180   	fcall	_Insert
 12488  021F  2A7B               	goto	l5762
 12489  0220                     l5738:	
 12490  0220  2A02               	goto	l5728
 12491  0221                     l5744:	
 12492                           ;main.c: 710:                     if (dataIndex == 0)
 12493                           
 12494                           
 12495                           ;main.c: 717:                     if (byte != 'E')
 12496  0221  3045               	movlw	69
 12497  0222  0662               	xorwf	GetNavData@byte,w
 12498  0223  1903               	btfsc	3,2
 12499  0224  2A7B               	goto	l5762
 12500                           
 12501                           ;main.c: 718:                     {;main.c: 719:                         Insert(messages
      +                          [0], '-', signInsertIndex, 70);
 12502  0225  302D               	movlw	45
 12503  0226  00BE               	movwf	??_GetNavData
 12504  0227  083E               	movf	??_GetNavData,w
 12505  0228  00A0               	movwf	Insert@src
 12506  0229  085C               	movf	GetNavData@signInsertIndex+1,w
 12507  022A  00A2               	movwf	Insert@index+1
 12508  022B  085B               	movf	GetNavData@signInsertIndex,w
 12509  022C  00A1               	movwf	Insert@index
 12510  022D  3046               	movlw	70
 12511  022E  00A3               	movwf	Insert@destLimit
 12512  022F  3000               	movlw	0
 12513  0230  00A4               	movwf	Insert@destLimit+1
 12514  0231  087B               	movf	_messages,w
 12515  0232  319E  2653  3180   	fcall	_Insert
 12516  0235  2A7B               	goto	l5762
 12517  0236                     l5750:	
 12518                           
 12519                           ;main.c: 726:                     if (dataIndex == 0)
 12520  0236  0860               	movf	GetNavData@dataIndex,w
 12521  0237  0461               	iorwf	GetNavData@dataIndex+1,w
 12522  0238  1D03               	btfss	3,2
 12523  0239  2A3C               	goto	l5754
 12524                           
 12525                           ;main.c: 727:                     {;main.c: 728:                         index = 0;
 12526  023A  01E3               	clrf	GetNavData@index
 12527  023B  01E4               	clrf	GetNavData@index+1
 12528  023C                     l5754:	
 12529                           ;main.c: 732:                 case PUBX_SOG:
 12530                           
 12531                           
 12532                           ;main.c: 735:                     messages[1][index] = byte;
 12533  023C  0862               	movf	GetNavData@byte,w
 12534  023D  00BE               	movwf	??_GetNavData
 12535  023E  0863               	movf	GetNavData@index,w
 12536  023F  077C               	addwf	_messages+1,w
 12537  0240                     L6:	
 12538  0240  00BF               	movwf	??_GetNavData+1
 12539  0241  083F               	movf	??_GetNavData+1,w
 12540  0242  0086               	movwf	6
 12541  0243  3003               	movlw	3	; select bank6/7
 12542  0244  0087               	movwf	7
 12543  0245  083E               	movf	??_GetNavData,w
 12544  0246  0081               	movwf	1
 12545                           
 12546                           ;main.c: 736:                     break;
 12547  0247  2A7B               	goto	l5762
 12548  0248                     l5756:	
 12549                           
 12550                           ;main.c: 739:                     index--;
 12551  0248  30FF               	movlw	255
 12552  0249  07E3               	addwf	GetNavData@index,f
 12553  024A  30FF               	movlw	255
 12554  024B  3DE4               	addwfc	GetNavData@index+1,f
 12555                           
 12556                           ;main.c: 740:                     break;
 12557  024C  2A7B               	goto	l5762
 12558  024D                     l5760:	
 12559                           
 12560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12561                           ; Switch size 1, requested type "simple"
 12562                           ; Number of cases is 1, Range of values is 0 to 0
 12563                           ; switch strategies available:
 12564                           ; Name         Instructions Cycles
 12565                           ; simple_byte            4     3 (average)
 12566                           ; direct_byte            8     6 (fixed)
 12567                           ; jumptable            260     6 (fixed)
 12568                           ;	Chosen strategy is simple_byte
 12569  024D  085F               	movf	GetNavData@dataFieldType+1,w
 12570  024E  3A00               	xorlw	0	; case 0
 12571  024F  1903               	skipnz
 12572  0250  2A52               	goto	l5920
 12573  0251  2A48               	goto	l5756
 12574  0252                     l5920:	
 12575                           
 12576                           ; Switch size 1, requested type "simple"
 12577                           ; Number of cases is 13, Range of values is 0 to 13
 12578                           ; switch strategies available:
 12579                           ; Name         Instructions Cycles
 12580                           ; direct_byte           34     6 (fixed)
 12581                           ; simple_byte           40    21 (average)
 12582                           ; jumptable            260     6 (fixed)
 12583                           ;	Chosen strategy is simple_byte
 12584  0252  085E               	movf	GetNavData@dataFieldType,w
 12585  0253  3A00               	xorlw	0	; case 0
 12586  0254  1903               	skipnz
 12587  0255  29C7               	goto	l5714
 12588  0256  3A02               	xorlw	2	; case 2
 12589  0257  1903               	skipnz
 12590  0258  29D8               	goto	l5716
 12591  0259  3A01               	xorlw	1	; case 3
 12592  025A  1903               	skipnz
 12593  025B  2A02               	goto	l5728
 12594  025C  3A07               	xorlw	7	; case 4
 12595  025D  1903               	skipnz
 12596  025E  2A0B               	goto	l5734
 12597  025F  3A01               	xorlw	1	; case 5
 12598  0260  1903               	skipnz
 12599  0261  2A20               	goto	l5738
 12600  0262  3A03               	xorlw	3	; case 6
 12601  0263  1903               	skipnz
 12602  0264  2A21               	goto	l5744
 12603  0265  3A01               	xorlw	1	; case 7
 12604  0266  1903               	skipnz
 12605  0267  29FD               	goto	l5726
 12606  0268  3A0F               	xorlw	15	; case 8
 12607  0269  1903               	skipnz
 12608  026A  2A3C               	goto	l5754
 12609  026B  3A01               	xorlw	1	; case 9
 12610  026C  1903               	skipnz
 12611  026D  2A36               	goto	l5750
 12612  026E  3A03               	xorlw	3	; case 10
 12613  026F  1903               	skipnz
 12614  0270  2A3C               	goto	l5754
 12615  0271  3A01               	xorlw	1	; case 11
 12616  0272  1903               	skipnz
 12617  0273  2A3C               	goto	l5754
 12618  0274  3A07               	xorlw	7	; case 12
 12619  0275  1903               	skipnz
 12620  0276  2A3C               	goto	l5754
 12621  0277  3A01               	xorlw	1	; case 13
 12622  0278  1903               	skipnz
 12623  0279  2A3C               	goto	l5754
 12624  027A  2A48               	goto	l5756
 12625  027B                     l5762:	
 12626                           
 12627                           ;main.c: 742:                 dataIndex++;
 12628  027B  3001               	movlw	1
 12629  027C  0020               	movlb	0	; select bank0
 12630  027D  07E0               	addwf	GetNavData@dataIndex,f
 12631  027E  3000               	movlw	0
 12632  027F  3DE1               	addwfc	GetNavData@dataIndex+1,f
 12633                           
 12634                           ;main.c: 743:                 index++;
 12635  0280  3001               	movlw	1
 12636  0281  07E3               	addwf	GetNavData@index,f
 12637  0282  3000               	movlw	0
 12638  0283  3DE4               	addwfc	GetNavData@index+1,f
 12639  0284  28AD               	goto	l5764
 12640  0285                     l5766:	
 12641                           
 12642                           ;main.c: 749:     return success;
 12643  0285  085A               	movf	GetNavData@success,w
 12644  0286  0008               	return
 12645  0287                     __end_of_GetNavData:	
 12646                           
 12647                           	psect	text48
 12648  1B55                     __ptext48:	
 12649 ;; *************** function _WriteGPS *****************
 12650 ;; Defined at:
 12651 ;;		line 378 in file "main.c"
 12652 ;; Parameters:    Size  Location     Type
 12653 ;;  message         2    2[BANK0 ] PTR unsigned char 
 12654 ;;		 -> STR_7(14), STR_6(26), STR_5(26), STR_4(26), 
 12655 ;;		 -> STR_3(26), STR_2(26), STR_1(26), 
 12656 ;; Auto vars:     Size  Location     Type
 12657 ;;  i               2    6[BANK0 ] int 
 12658 ;;  counti          2    4[BANK0 ] int 
 12659 ;; Return value:  Size  Location     Type
 12660 ;;                  1    wreg      void 
 12661 ;; Registers used:
 12662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12663 ;; Tracked objects:
 12664 ;;		On entry : 1F/0
 12665 ;;		On exit  : 0/0
 12666 ;;		Unchanged: 0/0
 12667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12668 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;Total ram usage:        7 bytes
 12673 ;; Hardware stack levels used:    1
 12674 ;; Hardware stack levels required when called:    4
 12675 ;; This function calls:
 12676 ;;		_EUSART_Write
 12677 ;;		_strlen
 12678 ;; This function is called by:
 12679 ;;		_SetupGPS
 12680 ;;		_GetNavData
 12681 ;; This function uses a non-reentrant model
 12682 ;;
 12683                           
 12684                           
 12685                           ;psect for function _WriteGPS
 12686  1B55                     _WriteGPS:	
 12687                           
 12688                           ;main.c: 378: void WriteGPS(char* message);main.c: 379: {;main.c: 380:     for (int i = 
      +                          0, counti = strlen(message); i <= counti; i++)
 12689                           
 12690                           ;incstack = 0
 12691                           ; Regs used in _WriteGPS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12692  1B55  01A6               	clrf	WriteGPS@i
 12693  1B56  01A7               	clrf	WriteGPS@i+1
 12694  1B57  0823               	movf	WriteGPS@message+1,w
 12695  1B58  00F6               	movwf	strlen@s+1
 12696  1B59  0822               	movf	WriteGPS@message,w
 12697  1B5A  00F5               	movwf	strlen@s
 12698  1B5B  319A  2207  319B   	fcall	_strlen
 12699  1B5E  0876               	movf	?_strlen+1,w
 12700  1B5F  00A5               	movwf	WriteGPS@counti+1
 12701  1B60  0875               	movf	?_strlen,w
 12702  1B61  00A4               	movwf	WriteGPS@counti
 12703  1B62                     l5262:	
 12704  1B62  0825               	movf	WriteGPS@counti+1,w
 12705  1B63  3A80               	xorlw	128
 12706  1B64  00F8               	movwf	??_WriteGPS
 12707  1B65  0827               	movf	WriteGPS@i+1,w
 12708  1B66  3A80               	xorlw	128
 12709  1B67  0278               	subwf	??_WriteGPS,w
 12710  1B68  1D03               	skipz
 12711  1B69  2B6C               	goto	u5615
 12712  1B6A  0826               	movf	WriteGPS@i,w
 12713  1B6B  0224               	subwf	WriteGPS@counti,w
 12714  1B6C                     u5615:	
 12715  1B6C  1C03               	btfss	3,0
 12716  1B6D  0008               	return
 12717                           
 12718                           ;main.c: 381:     {;main.c: 382:         EUSART_Write((uint8_t)message[i]);
 12719  1B6E  0020               	movlb	0	; select bank0
 12720  1B6F  0822               	movf	WriteGPS@message,w
 12721  1B70  0726               	addwf	WriteGPS@i,w
 12722  1B71  0084               	movwf	4
 12723  1B72  0823               	movf	WriteGPS@message+1,w
 12724  1B73  3D27               	addwfc	WriteGPS@i+1,w
 12725  1B74  0085               	movwf	5
 12726  1B75  0800               	movf	0,w	;code access
 12727  1B76  3199  215F  319B   	fcall	_EUSART_Write
 12728                           
 12729                           ;main.c: 383:     }
 12730  1B79  3001               	movlw	1
 12731  1B7A  0020               	movlb	0	; select bank0
 12732  1B7B  07A6               	addwf	WriteGPS@i,f
 12733  1B7C  3000               	movlw	0
 12734  1B7D  3DA7               	addwfc	WriteGPS@i+1,f
 12735  1B7E  2B62               	goto	l5262
 12736  1B7F                     __end_of_WriteGPS:	
 12737                           
 12738                           	psect	text49
 12739  195F                     __ptext49:	
 12740 ;; *************** function _EUSART_Write *****************
 12741 ;; Defined at:
 12742 ;;		line 111 in file "mcc_generated_files/eusart.c"
 12743 ;; Parameters:    Size  Location     Type
 12744 ;;  txData          1    wreg     unsigned char 
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;  txData          1    5[COMMON] unsigned char 
 12747 ;; Return value:  Size  Location     Type
 12748 ;;                  1    wreg      void 
 12749 ;; Registers used:
 12750 ;;		wreg
 12751 ;; Tracked objects:
 12752 ;;		On entry : 1F/0
 12753 ;;		On exit  : 1F/3
 12754 ;;		Unchanged: 0/0
 12755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;Total ram usage:        1 bytes
 12761 ;; Hardware stack levels used:    1
 12762 ;; Hardware stack levels required when called:    3
 12763 ;; This function calls:
 12764 ;;		Nothing
 12765 ;; This function is called by:
 12766 ;;		_WriteGPS
 12767 ;;		_GPS_SendUBX
 12768 ;; This function uses a non-reentrant model
 12769 ;;
 12770                           
 12771                           
 12772                           ;psect for function _EUSART_Write
 12773  195F                     _EUSART_Write:	
 12774                           
 12775                           ;incstack = 0
 12776                           ; Regs used in _EUSART_Write: [wreg]
 12777                           ;EUSART_Write@txData stored from wreg
 12778  195F  00F5               	movwf	EUSART_Write@txData
 12779  1960                     l358:	
 12780                           ;mcc_generated_files/eusart.c: 114:     {;mcc_generated_files/eusart.c: 115:     }
 12781                           
 12782                           
 12783                           ;mcc_generated_files/eusart.c: 113:     while(0 == PIR1bits.TXIF)
 12784  1960  1E10               	btfss	16,4	;volatile
 12785  1961  2960               	goto	l358
 12786                           
 12787                           ;mcc_generated_files/eusart.c: 117:     TX1REG = txData;
 12788  1962  0875               	movf	EUSART_Write@txData,w
 12789  1963  0023               	movlb	3	; select bank3
 12790  1964  009A               	movwf	26	;volatile
 12791  1965  0008               	return
 12792  1966                     __end_of_EUSART_Write:	
 12793                           
 12794                           	psect	text50
 12795  1A98                     __ptext50:	
 12796 ;; *************** function _SafeSetByte *****************
 12797 ;; Defined at:
 12798 ;;		line 537 in file "main.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;  dest            1    wreg     PTR unsigned char 
 12801 ;;		 -> GetNavData@data_type(7), 
 12802 ;;  length          2    0[BANK0 ] int 
 12803 ;;  index           2    2[BANK0 ] unsigned int 
 12804 ;;  data            1    4[BANK0 ] unsigned char 
 12805 ;; Auto vars:     Size  Location     Type
 12806 ;;  dest            1    7[COMMON] PTR unsigned char 
 12807 ;;		 -> GetNavData@data_type(7), 
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  1    wreg      void 
 12810 ;; Registers used:
 12811 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12812 ;; Tracked objects:
 12813 ;;		On entry : 1F/0
 12814 ;;		On exit  : 1F/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12817 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;Total ram usage:        8 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:    3
 12824 ;; This function calls:
 12825 ;;		Nothing
 12826 ;; This function is called by:
 12827 ;;		_GetNavData
 12828 ;; This function uses a non-reentrant model
 12829 ;;
 12830                           
 12831                           
 12832                           ;psect for function _SafeSetByte
 12833  1A98                     _SafeSetByte:	
 12834                           
 12835                           ;incstack = 0
 12836                           ; Regs used in _SafeSetByte: [wreg+fsr1l+fsr1h+status,2+status,0]
 12837                           ;SafeSetByte@dest stored from wreg
 12838  1A98  00F7               	movwf	SafeSetByte@dest
 12839                           
 12840                           ;main.c: 537: void SafeSetByte(char* dest, int length, unsigned int index, char data);ma
      +                          in.c: 538: {;main.c: 539:     if (index < length - 1)
 12841  1A99  0820               	movf	SafeSetByte@length,w
 12842  1A9A  3EFF               	addlw	255
 12843  1A9B  00F5               	movwf	??_SafeSetByte
 12844  1A9C  30FF               	movlw	255
 12845  1A9D  3D21               	addwfc	SafeSetByte@length+1,w
 12846  1A9E  00F6               	movwf	??_SafeSetByte+1
 12847  1A9F  0876               	movf	??_SafeSetByte+1,w
 12848  1AA0  0223               	subwf	SafeSetByte@index+1,w
 12849  1AA1  1D03               	skipz
 12850  1AA2  2AA5               	goto	u5685
 12851  1AA3  0875               	movf	??_SafeSetByte,w
 12852  1AA4  0222               	subwf	SafeSetByte@index,w
 12853  1AA5                     u5685:	
 12854  1AA5  1803               	skipnc
 12855  1AA6  2AB2               	goto	l5334
 12856                           
 12857                           ;main.c: 540:     {;main.c: 541:         dest[index] = data;
 12858  1AA7  0824               	movf	SafeSetByte@data,w
 12859  1AA8  00F5               	movwf	??_SafeSetByte
 12860  1AA9  0822               	movf	SafeSetByte@index,w
 12861  1AAA  0777               	addwf	SafeSetByte@dest,w
 12862  1AAB  00F6               	movwf	??_SafeSetByte+1
 12863  1AAC  0876               	movf	??_SafeSetByte+1,w
 12864  1AAD  0086               	movwf	6
 12865  1AAE  0187               	clrf	7
 12866  1AAF  0875               	movf	??_SafeSetByte,w
 12867  1AB0  0081               	movwf	1
 12868                           
 12869                           ;main.c: 542:     }
 12870  1AB1  0008               	return
 12871  1AB2                     l5334:	
 12872                           
 12873                           ;main.c: 544:     {;main.c: 546:         dest[length - 1] = '\0';
 12874  1AB2  0820               	movf	SafeSetByte@length,w
 12875  1AB3  0777               	addwf	SafeSetByte@dest,w
 12876  1AB4  00F5               	movwf	??_SafeSetByte
 12877  1AB5  0875               	movf	??_SafeSetByte,w
 12878  1AB6  3EFF               	addlw	-1
 12879  1AB7  0086               	movwf	6
 12880  1AB8  0187               	clrf	7
 12881  1AB9  0181               	clrf	1
 12882  1ABA  0008               	return
 12883  1ABB                     __end_of_SafeSetByte:	
 12884                           
 12885                           	psect	text51
 12886  1205                     __ptext51:	
 12887 ;; *************** function _IntToString *****************
 12888 ;; Defined at:
 12889 ;;		line 139 in file "main.c"
 12890 ;; Parameters:    Size  Location     Type
 12891 ;;  n               2   20[BANK0 ] int 
 12892 ;;  dest            2   22[BANK0 ] PTR unsigned char 
 12893 ;;		 -> main@convertedSensorData(16), GetNavData@strId(12), 
 12894 ;; Auto vars:     Size  Location     Type
 12895 ;;  i               2   28[BANK0 ] int 
 12896 ;;  sign            1   27[BANK0 ] _Bool 
 12897 ;; Return value:  Size  Location     Type
 12898 ;;                  1    wreg      void 
 12899 ;; Registers used:
 12900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12901 ;; Tracked objects:
 12902 ;;		On entry : 1F/0
 12903 ;;		On exit  : 1F/0
 12904 ;;		Unchanged: 0/0
 12905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12906 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;Total ram usage:       10 bytes
 12911 ;; Hardware stack levels used:    1
 12912 ;; Hardware stack levels required when called:    5
 12913 ;; This function calls:
 12914 ;;		_ReverseString
 12915 ;;		___awdiv
 12916 ;;		___awmod
 12917 ;; This function is called by:
 12918 ;;		_GetNavData
 12919 ;;		_main
 12920 ;; This function uses a non-reentrant model
 12921 ;;
 12922                           
 12923                           
 12924                           ;psect for function _IntToString
 12925  1205                     _IntToString:	
 12926                           
 12927                           ;main.c: 139: void IntToString(int n, char* dest);main.c: 140: {;main.c: 141:     int i 
      +                          = 0;
 12928                           
 12929                           ;incstack = 0
 12930                           ; Regs used in _IntToString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12931  1205  01BC               	clrf	IntToString@i
 12932  1206  01BD               	clrf	IntToString@i+1
 12933                           
 12934                           ;main.c: 142:     _Bool sign = n < 0;
 12935  1207  1FB5               	btfss	IntToString@n+1,7
 12936  1208  2A0B               	goto	u5490
 12937  1209  3001               	movlw	1
 12938  120A  2A0C               	goto	u5500
 12939  120B                     u5490:	
 12940  120B  3000               	movlw	0
 12941  120C                     u5500:	
 12942  120C  00B8               	movwf	??_IntToString
 12943  120D  0838               	movf	??_IntToString,w
 12944  120E  00BB               	movwf	IntToString@sign
 12945                           
 12946                           ;main.c: 143:     if (sign)
 12947  120F  083B               	movf	IntToString@sign,w
 12948  1210  1903               	btfsc	3,2
 12949  1211  2A17               	goto	l5210
 12950                           
 12951                           ;main.c: 144:     {;main.c: 146:         n = -n;
 12952  1212  09B4               	comf	IntToString@n,f
 12953  1213  09B5               	comf	IntToString@n+1,f
 12954  1214  0AB4               	incf	IntToString@n,f
 12955  1215  1903               	skipnz
 12956  1216  0AB5               	incf	IntToString@n+1,f
 12957  1217                     l5210:	
 12958                           
 12959                           ;main.c: 152:         dest[i++] = n % 10 + '0';
 12960  1217  300A               	movlw	10
 12961  1218  00F5               	movwf	___awmod@divisor
 12962  1219  3000               	movlw	0
 12963  121A  00F6               	movwf	___awmod@divisor+1
 12964  121B  0020               	movlb	0	; select bank0
 12965  121C  0835               	movf	IntToString@n+1,w
 12966  121D  00F8               	movwf	___awmod@dividend+1
 12967  121E  0834               	movf	IntToString@n,w
 12968  121F  00F7               	movwf	___awmod@dividend
 12969  1220  319E  260E  3192   	fcall	___awmod
 12970  1223  0875               	movf	?___awmod,w
 12971  1224  3E30               	addlw	48
 12972  1225  00B8               	movwf	??_IntToString
 12973  1226  083C               	movf	IntToString@i,w
 12974  1227  0736               	addwf	IntToString@dest,w
 12975  1228  00B9               	movwf	??_IntToString+1
 12976  1229  083D               	movf	IntToString@i+1,w
 12977  122A  3D37               	addwfc	IntToString@dest+1,w
 12978  122B  00BA               	movwf	??_IntToString+2
 12979  122C  0839               	movf	??_IntToString+1,w
 12980  122D  0086               	movwf	6
 12981  122E  083A               	movf	??_IntToString+2,w
 12982  122F  0087               	movwf	7
 12983  1230  0838               	movf	??_IntToString,w
 12984  1231  0081               	movwf	1
 12985  1232  3001               	movlw	1
 12986  1233  07BC               	addwf	IntToString@i,f
 12987  1234  3000               	movlw	0
 12988  1235  3DBD               	addwfc	IntToString@i+1,f
 12989                           
 12990                           ;main.c: 154:     } while ((n /= 10) > 0);
 12991  1236  300A               	movlw	10
 12992  1237  00F5               	movwf	___awdiv@divisor
 12993  1238  3000               	movlw	0
 12994  1239  00F6               	movwf	___awdiv@divisor+1
 12995  123A  0835               	movf	IntToString@n+1,w
 12996  123B  00F8               	movwf	___awdiv@dividend+1
 12997  123C  0834               	movf	IntToString@n,w
 12998  123D  00F7               	movwf	___awdiv@dividend
 12999  123E  3190  2032  3192   	fcall	___awdiv
 13000  1241  0876               	movf	?___awdiv+1,w
 13001  1242  00B5               	movwf	IntToString@n+1
 13002  1243  0875               	movf	?___awdiv,w
 13003  1244  00B4               	movwf	IntToString@n
 13004  1245  0835               	movf	IntToString@n+1,w
 13005  1246  3A80               	xorlw	128
 13006  1247  00B8               	movwf	??_IntToString
 13007  1248  3080               	movlw	128
 13008  1249  0238               	subwf	??_IntToString,w
 13009  124A  1D03               	skipz
 13010  124B  2A4E               	goto	u5525
 13011  124C  3001               	movlw	1
 13012  124D  0234               	subwf	IntToString@n,w
 13013  124E                     u5525:	
 13014  124E  1803               	skipnc
 13015  124F  2A17               	goto	l5210
 13016                           
 13017                           ;main.c: 155:     if (sign)
 13018  1250  0020               	movlb	0	; select bank0
 13019  1251  083B               	movf	IntToString@sign,w
 13020  1252  1903               	btfsc	3,2
 13021  1253  2A64               	goto	l5222
 13022                           
 13023                           ;main.c: 156:     {;main.c: 157:         dest[i++] = '-';
 13024  1254  083C               	movf	IntToString@i,w
 13025  1255  0736               	addwf	IntToString@dest,w
 13026  1256  00B8               	movwf	??_IntToString
 13027  1257  083D               	movf	IntToString@i+1,w
 13028  1258  3D37               	addwfc	IntToString@dest+1,w
 13029  1259  00B9               	movwf	??_IntToString+1
 13030  125A  0838               	movf	??_IntToString,w
 13031  125B  0086               	movwf	6
 13032  125C  0839               	movf	??_IntToString+1,w
 13033  125D  0087               	movwf	7
 13034  125E  302D               	movlw	45
 13035  125F  0081               	movwf	1
 13036  1260  3001               	movlw	1
 13037  1261  07BC               	addwf	IntToString@i,f
 13038  1262  3000               	movlw	0
 13039  1263  3DBD               	addwfc	IntToString@i+1,f
 13040  1264                     l5222:	
 13041                           
 13042                           ;main.c: 159:     dest[i] = '\0';
 13043  1264  083C               	movf	IntToString@i,w
 13044  1265  0736               	addwf	IntToString@dest,w
 13045  1266  0086               	movwf	6
 13046  1267  083D               	movf	IntToString@i+1,w
 13047  1268  3D37               	addwfc	IntToString@dest+1,w
 13048  1269  0087               	movwf	7
 13049  126A  0181               	clrf	1
 13050                           
 13051                           ;main.c: 161:     ReverseString(dest);
 13052  126B  0837               	movf	IntToString@dest+1,w
 13053  126C  00A6               	movwf	ReverseString@str+1
 13054  126D  0836               	movf	IntToString@dest,w
 13055  126E  00A5               	movwf	ReverseString@str
 13056  126F  3187  2795         	fcall	_ReverseString
 13057  1271  0008               	return
 13058  1272                     __end_of_IntToString:	
 13059                           
 13060                           	psect	text52
 13061  1E0E                     __ptext52:	
 13062 ;; *************** function ___awmod *****************
 13063 ;; Defined at:
 13064 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\awmod.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;  divisor         2    5[COMMON] int 
 13067 ;;  dividend        2    7[COMMON] int 
 13068 ;; Auto vars:     Size  Location     Type
 13069 ;;  sign            1    2[BANK0 ] unsigned char 
 13070 ;;  counter         1    1[BANK0 ] unsigned char 
 13071 ;; Return value:  Size  Location     Type
 13072 ;;                  2    5[COMMON] int 
 13073 ;; Registers used:
 13074 ;;		wreg, status,2, status,0
 13075 ;; Tracked objects:
 13076 ;;		On entry : 1F/0
 13077 ;;		On exit  : 1F/0
 13078 ;;		Unchanged: 0/0
 13079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13080 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;Total ram usage:        7 bytes
 13085 ;; Hardware stack levels used:    1
 13086 ;; Hardware stack levels required when called:    3
 13087 ;; This function calls:
 13088 ;;		Nothing
 13089 ;; This function is called by:
 13090 ;;		_IntToString
 13091 ;; This function uses a non-reentrant model
 13092 ;;
 13093                           
 13094                           
 13095                           ;psect for function ___awmod
 13096  1E0E                     ___awmod:	
 13097                           
 13098                           ;incstack = 0
 13099                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 13100  1E0E  01A2               	clrf	___awmod@sign
 13101  1E0F  1FF8               	btfss	___awmod@dividend+1,7
 13102  1E10  2E18               	goto	l4974
 13103  1E11  09F7               	comf	___awmod@dividend,f
 13104  1E12  09F8               	comf	___awmod@dividend+1,f
 13105  1E13  0AF7               	incf	___awmod@dividend,f
 13106  1E14  1903               	skipnz
 13107  1E15  0AF8               	incf	___awmod@dividend+1,f
 13108  1E16  01A2               	clrf	___awmod@sign
 13109  1E17  0AA2               	incf	___awmod@sign,f
 13110  1E18                     l4974:	
 13111  1E18  1FF6               	btfss	___awmod@divisor+1,7
 13112  1E19  2E1F               	goto	l4978
 13113  1E1A  09F5               	comf	___awmod@divisor,f
 13114  1E1B  09F6               	comf	___awmod@divisor+1,f
 13115  1E1C  0AF5               	incf	___awmod@divisor,f
 13116  1E1D  1903               	skipnz
 13117  1E1E  0AF6               	incf	___awmod@divisor+1,f
 13118  1E1F                     l4978:	
 13119  1E1F  0875               	movf	___awmod@divisor,w
 13120  1E20  0476               	iorwf	___awmod@divisor+1,w
 13121  1E21  1903               	btfsc	3,2
 13122  1E22  2E46               	goto	l4996
 13123  1E23  01A1               	clrf	___awmod@counter
 13124  1E24  0AA1               	incf	___awmod@counter,f
 13125  1E25                     l4986:	
 13126  1E25  1BF6               	btfsc	___awmod@divisor+1,7
 13127  1E26  2E31               	goto	l4988
 13128  1E27  3001               	movlw	1
 13129  1E28                     u5185:	
 13130  1E28  35F5               	lslf	___awmod@divisor,f
 13131  1E29  0DF6               	rlf	___awmod@divisor+1,f
 13132  1E2A  0B89               	decfsz	9,f
 13133  1E2B  2E28               	goto	u5185
 13134  1E2C  3001               	movlw	1
 13135  1E2D  00A0               	movwf	??___awmod
 13136  1E2E  0820               	movf	??___awmod,w
 13137  1E2F  07A1               	addwf	___awmod@counter,f
 13138  1E30  2E25               	goto	l4986
 13139  1E31                     l4988:	
 13140  1E31  0876               	movf	___awmod@divisor+1,w
 13141  1E32  0278               	subwf	___awmod@dividend+1,w
 13142  1E33  1D03               	skipz
 13143  1E34  2E37               	goto	u5205
 13144  1E35  0875               	movf	___awmod@divisor,w
 13145  1E36  0277               	subwf	___awmod@dividend,w
 13146  1E37                     u5205:	
 13147  1E37  1C03               	skipc
 13148  1E38  2E3D               	goto	l4992
 13149  1E39  0875               	movf	___awmod@divisor,w
 13150  1E3A  02F7               	subwf	___awmod@dividend,f
 13151  1E3B  0876               	movf	___awmod@divisor+1,w
 13152  1E3C  3BF8               	subwfb	___awmod@dividend+1,f
 13153  1E3D                     l4992:	
 13154  1E3D  3001               	movlw	1
 13155  1E3E                     u5215:	
 13156  1E3E  36F6               	lsrf	___awmod@divisor+1,f
 13157  1E3F  0CF5               	rrf	___awmod@divisor,f
 13158  1E40  0B89               	decfsz	9,f
 13159  1E41  2E3E               	goto	u5215
 13160  1E42  3001               	movlw	1
 13161  1E43  02A1               	subwf	___awmod@counter,f
 13162  1E44  1D03               	btfss	3,2
 13163  1E45  2E31               	goto	l4988
 13164  1E46                     l4996:	
 13165  1E46  0822               	movf	___awmod@sign,w
 13166  1E47  1903               	btfsc	3,2
 13167  1E48  2E4E               	goto	l5000
 13168  1E49  09F7               	comf	___awmod@dividend,f
 13169  1E4A  09F8               	comf	___awmod@dividend+1,f
 13170  1E4B  0AF7               	incf	___awmod@dividend,f
 13171  1E4C  1903               	skipnz
 13172  1E4D  0AF8               	incf	___awmod@dividend+1,f
 13173  1E4E                     l5000:	
 13174  1E4E  0878               	movf	___awmod@dividend+1,w
 13175  1E4F  00F6               	movwf	?___awmod+1
 13176  1E50  0877               	movf	___awmod@dividend,w
 13177  1E51  00F5               	movwf	?___awmod
 13178  1E52  0008               	return
 13179  1E53                     __end_of___awmod:	
 13180                           
 13181                           	psect	text53
 13182  0795                     __ptext53:	
 13183 ;; *************** function _ReverseString *****************
 13184 ;; Defined at:
 13185 ;;		line 103 in file "main.c"
 13186 ;; Parameters:    Size  Location     Type
 13187 ;;  str             2    5[BANK0 ] PTR unsigned char 
 13188 ;;		 -> checksum(6), main@convertedSensorData(16), GetNavData@strId(12), 
 13189 ;; Auto vars:     Size  Location     Type
 13190 ;;  opposite        2   14[BANK0 ] PTR unsigned char 
 13191 ;;		 -> checksum(6), main@convertedSensorData(16), GetNavData@strId(12), 
 13192 ;;  temp            1   13[BANK0 ] unsigned char 
 13193 ;;  i               2   18[BANK0 ] int 
 13194 ;;  halfway         2   11[BANK0 ] int 
 13195 ;;  counti          2   16[BANK0 ] int 
 13196 ;; Return value:  Size  Location     Type
 13197 ;;                  1    wreg      void 
 13198 ;; Registers used:
 13199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13200 ;; Tracked objects:
 13201 ;;		On entry : 1F/0
 13202 ;;		On exit  : 1F/0
 13203 ;;		Unchanged: 0/0
 13204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13206 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13207 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13208 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13209 ;;Total ram usage:       15 bytes
 13210 ;; Hardware stack levels used:    1
 13211 ;; Hardware stack levels required when called:    4
 13212 ;; This function calls:
 13213 ;;		___awdiv
 13214 ;;		_strlen
 13215 ;; This function is called by:
 13216 ;;		_IntToHexString
 13217 ;;		_IntToString
 13218 ;; This function uses a non-reentrant model
 13219 ;;
 13220                           
 13221                           
 13222                           ;psect for function _ReverseString
 13223  0795                     _ReverseString:	
 13224                           
 13225                           ;main.c: 103: void ReverseString(char* str);main.c: 104: {;main.c: 105:     int counti =
      +                           strlen(str);
 13226                           
 13227                           ;incstack = 0
 13228                           ; Regs used in _ReverseString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13229  0795  0826               	movf	ReverseString@str+1,w
 13230  0796  00F6               	movwf	strlen@s+1
 13231  0797  0825               	movf	ReverseString@str,w
 13232  0798  00F5               	movwf	strlen@s
 13233  0799  319A  2207  3187   	fcall	_strlen
 13234  079C  0876               	movf	?_strlen+1,w
 13235  079D  00B1               	movwf	ReverseString@counti+1
 13236  079E  0875               	movf	?_strlen,w
 13237  079F  00B0               	movwf	ReverseString@counti
 13238                           
 13239                           ;main.c: 106:     for (int i = 0, halfway = counti / 2; i < halfway; i++)
 13240  07A0  01B2               	clrf	ReverseString@i
 13241  07A1  01B3               	clrf	ReverseString@i+1
 13242  07A2  3002               	movlw	2
 13243  07A3  00F5               	movwf	___awdiv@divisor
 13244  07A4  3000               	movlw	0
 13245  07A5  00F6               	movwf	___awdiv@divisor+1
 13246  07A6  0831               	movf	ReverseString@counti+1,w
 13247  07A7  00F8               	movwf	___awdiv@dividend+1
 13248  07A8  0830               	movf	ReverseString@counti,w
 13249  07A9  00F7               	movwf	___awdiv@dividend
 13250  07AA  3190  2032  3187   	fcall	___awdiv
 13251  07AD  0876               	movf	?___awdiv+1,w
 13252  07AE  00AC               	movwf	ReverseString@halfway+1
 13253  07AF  0875               	movf	?___awdiv,w
 13254  07B0  00AB               	movwf	ReverseString@halfway
 13255  07B1                     l4950:	
 13256  07B1  0833               	movf	ReverseString@i+1,w
 13257  07B2  3A80               	xorlw	128
 13258  07B3  00A7               	movwf	??_ReverseString
 13259  07B4  082C               	movf	ReverseString@halfway+1,w
 13260  07B5  3A80               	xorlw	128
 13261  07B6  0227               	subwf	??_ReverseString,w
 13262  07B7  1D03               	skipz
 13263  07B8  2FBB               	goto	u5125
 13264  07B9  082B               	movf	ReverseString@halfway,w
 13265  07BA  0232               	subwf	ReverseString@i,w
 13266  07BB                     u5125:	
 13267  07BB  1803               	btfsc	3,0
 13268  07BC  2FF7               	goto	l4952
 13269                           
 13270                           ;main.c: 107:     {;main.c: 108:         char temp = str[i];
 13271  07BD  0020               	movlb	0	; select bank0
 13272  07BE  0832               	movf	ReverseString@i,w
 13273  07BF  0725               	addwf	ReverseString@str,w
 13274  07C0  0086               	movwf	6
 13275  07C1  0833               	movf	ReverseString@i+1,w
 13276  07C2  3D26               	addwfc	ReverseString@str+1,w
 13277  07C3  0087               	movwf	7
 13278  07C4  0801               	movf	1,w
 13279  07C5  00A7               	movwf	??_ReverseString
 13280  07C6  0827               	movf	??_ReverseString,w
 13281  07C7  00AD               	movwf	ReverseString@temp
 13282                           
 13283                           ;main.c: 109:         char* opposite = str + (counti - 1 - i);
 13284  07C8  0832               	movf	ReverseString@i,w
 13285  07C9  0225               	subwf	ReverseString@str,w
 13286  07CA  00A7               	movwf	??_ReverseString
 13287  07CB  0833               	movf	ReverseString@i+1,w
 13288  07CC  3B26               	subwfb	ReverseString@str+1,w
 13289  07CD  00A8               	movwf	??_ReverseString+1
 13290  07CE  0830               	movf	ReverseString@counti,w
 13291  07CF  0727               	addwf	??_ReverseString,w
 13292  07D0  00A9               	movwf	??_ReverseString+2
 13293  07D1  0831               	movf	ReverseString@counti+1,w
 13294  07D2  3D28               	addwfc	??_ReverseString+1,w
 13295  07D3  00AA               	movwf	??_ReverseString+3
 13296  07D4  0829               	movf	??_ReverseString+2,w
 13297  07D5  3EFF               	addlw	255
 13298  07D6  00AE               	movwf	ReverseString@opposite
 13299  07D7  30FF               	movlw	255
 13300  07D8  3D2A               	addwfc	??_ReverseString+3,w
 13301  07D9  00AF               	movwf	ReverseString@opposite+1
 13302                           
 13303                           ;main.c: 110:         str[i] = *opposite;
 13304  07DA  082E               	movf	ReverseString@opposite,w
 13305  07DB  0086               	movwf	6
 13306  07DC  082F               	movf	ReverseString@opposite+1,w
 13307  07DD  0087               	movwf	7
 13308  07DE  0801               	movf	1,w
 13309  07DF  00A7               	movwf	??_ReverseString
 13310  07E0  0832               	movf	ReverseString@i,w
 13311  07E1  0725               	addwf	ReverseString@str,w
 13312  07E2  00A8               	movwf	??_ReverseString+1
 13313  07E3  0833               	movf	ReverseString@i+1,w
 13314  07E4  3D26               	addwfc	ReverseString@str+1,w
 13315  07E5  00A9               	movwf	??_ReverseString+2
 13316  07E6  0828               	movf	??_ReverseString+1,w
 13317  07E7  0086               	movwf	6
 13318  07E8  0829               	movf	??_ReverseString+2,w
 13319  07E9  0087               	movwf	7
 13320  07EA  0827               	movf	??_ReverseString,w
 13321  07EB  0081               	movwf	1
 13322                           
 13323                           ;main.c: 111:         *opposite = temp;
 13324  07EC  082E               	movf	ReverseString@opposite,w
 13325  07ED  0086               	movwf	6
 13326  07EE  082F               	movf	ReverseString@opposite+1,w
 13327  07EF  0087               	movwf	7
 13328  07F0  082D               	movf	ReverseString@temp,w
 13329  07F1  0081               	movwf	1
 13330                           
 13331                           ;main.c: 112:     }
 13332  07F2  3001               	movlw	1
 13333  07F3  07B2               	addwf	ReverseString@i,f
 13334  07F4  3000               	movlw	0
 13335  07F5  3DB3               	addwfc	ReverseString@i+1,f
 13336  07F6  2FB1               	goto	l4950
 13337  07F7                     l4952:	
 13338                           
 13339                           ;main.c: 113:     str[counti] = '\0';
 13340  07F7  0020               	movlb	0	; select bank0
 13341  07F8  0830               	movf	ReverseString@counti,w
 13342  07F9  0725               	addwf	ReverseString@str,w
 13343  07FA  0086               	movwf	6
 13344  07FB  0831               	movf	ReverseString@counti+1,w
 13345  07FC  3D26               	addwfc	ReverseString@str+1,w
 13346  07FD  0087               	movwf	7
 13347  07FE  0181               	clrf	1
 13348  07FF  0008               	return
 13349  0800                     __end_of_ReverseString:	
 13350                           
 13351                           	psect	text54
 13352  1032                     __ptext54:	
 13353 ;; *************** function ___awdiv *****************
 13354 ;; Defined at:
 13355 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\awdiv.c"
 13356 ;; Parameters:    Size  Location     Type
 13357 ;;  divisor         2    5[COMMON] int 
 13358 ;;  dividend        2    7[COMMON] int 
 13359 ;; Auto vars:     Size  Location     Type
 13360 ;;  quotient        2    3[BANK0 ] int 
 13361 ;;  sign            1    2[BANK0 ] unsigned char 
 13362 ;;  counter         1    1[BANK0 ] unsigned char 
 13363 ;; Return value:  Size  Location     Type
 13364 ;;                  2    5[COMMON] int 
 13365 ;; Registers used:
 13366 ;;		wreg, status,2, status,0
 13367 ;; Tracked objects:
 13368 ;;		On entry : 1F/0
 13369 ;;		On exit  : 1F/0
 13370 ;;		Unchanged: 0/0
 13371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13372 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13373 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13374 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13375 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;Total ram usage:        9 bytes
 13377 ;; Hardware stack levels used:    1
 13378 ;; Hardware stack levels required when called:    3
 13379 ;; This function calls:
 13380 ;;		Nothing
 13381 ;; This function is called by:
 13382 ;;		_ReverseString
 13383 ;;		_IntToHexString
 13384 ;;		_IntToString
 13385 ;; This function uses a non-reentrant model
 13386 ;;
 13387                           
 13388                           
 13389                           ;psect for function ___awdiv
 13390  1032                     ___awdiv:	
 13391                           
 13392                           ;incstack = 0
 13393                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13394  1032  01A2               	clrf	___awdiv@sign
 13395  1033  1FF6               	btfss	___awdiv@divisor+1,7
 13396  1034  283C               	goto	l4676
 13397  1035  09F5               	comf	___awdiv@divisor,f
 13398  1036  09F6               	comf	___awdiv@divisor+1,f
 13399  1037  0AF5               	incf	___awdiv@divisor,f
 13400  1038  1903               	skipnz
 13401  1039  0AF6               	incf	___awdiv@divisor+1,f
 13402  103A  01A2               	clrf	___awdiv@sign
 13403  103B  0AA2               	incf	___awdiv@sign,f
 13404  103C                     l4676:	
 13405  103C  1FF8               	btfss	___awdiv@dividend+1,7
 13406  103D  2847               	goto	l4682
 13407  103E  09F7               	comf	___awdiv@dividend,f
 13408  103F  09F8               	comf	___awdiv@dividend+1,f
 13409  1040  0AF7               	incf	___awdiv@dividend,f
 13410  1041  1903               	skipnz
 13411  1042  0AF8               	incf	___awdiv@dividend+1,f
 13412  1043  3001               	movlw	1
 13413  1044  00A0               	movwf	??___awdiv
 13414  1045  0820               	movf	??___awdiv,w
 13415  1046  06A2               	xorwf	___awdiv@sign,f
 13416  1047                     l4682:	
 13417  1047  01A3               	clrf	___awdiv@quotient
 13418  1048  01A4               	clrf	___awdiv@quotient+1
 13419  1049  0875               	movf	___awdiv@divisor,w
 13420  104A  0476               	iorwf	___awdiv@divisor+1,w
 13421  104B  1903               	btfsc	3,2
 13422  104C  2876               	goto	l4704
 13423  104D  01A1               	clrf	___awdiv@counter
 13424  104E  0AA1               	incf	___awdiv@counter,f
 13425  104F                     l4692:	
 13426  104F  1BF6               	btfsc	___awdiv@divisor+1,7
 13427  1050  285B               	goto	l4694
 13428  1051  3001               	movlw	1
 13429  1052                     u4745:	
 13430  1052  35F5               	lslf	___awdiv@divisor,f
 13431  1053  0DF6               	rlf	___awdiv@divisor+1,f
 13432  1054  0B89               	decfsz	9,f
 13433  1055  2852               	goto	u4745
 13434  1056  3001               	movlw	1
 13435  1057  00A0               	movwf	??___awdiv
 13436  1058  0820               	movf	??___awdiv,w
 13437  1059  07A1               	addwf	___awdiv@counter,f
 13438  105A  284F               	goto	l4692
 13439  105B                     l4694:	
 13440  105B  3001               	movlw	1
 13441  105C                     u4765:	
 13442  105C  35A3               	lslf	___awdiv@quotient,f
 13443  105D  0DA4               	rlf	___awdiv@quotient+1,f
 13444  105E  0B89               	decfsz	9,f
 13445  105F  285C               	goto	u4765
 13446  1060  0876               	movf	___awdiv@divisor+1,w
 13447  1061  0278               	subwf	___awdiv@dividend+1,w
 13448  1062  1D03               	skipz
 13449  1063  2866               	goto	u4775
 13450  1064  0875               	movf	___awdiv@divisor,w
 13451  1065  0277               	subwf	___awdiv@dividend,w
 13452  1066                     u4775:	
 13453  1066  1C03               	skipc
 13454  1067  286D               	goto	l4700
 13455  1068  0875               	movf	___awdiv@divisor,w
 13456  1069  02F7               	subwf	___awdiv@dividend,f
 13457  106A  0876               	movf	___awdiv@divisor+1,w
 13458  106B  3BF8               	subwfb	___awdiv@dividend+1,f
 13459  106C  1423               	bsf	___awdiv@quotient,0
 13460  106D                     l4700:	
 13461  106D  3001               	movlw	1
 13462  106E                     u4785:	
 13463  106E  36F6               	lsrf	___awdiv@divisor+1,f
 13464  106F  0CF5               	rrf	___awdiv@divisor,f
 13465  1070  0B89               	decfsz	9,f
 13466  1071  286E               	goto	u4785
 13467  1072  3001               	movlw	1
 13468  1073  02A1               	subwf	___awdiv@counter,f
 13469  1074  1D03               	btfss	3,2
 13470  1075  285B               	goto	l4694
 13471  1076                     l4704:	
 13472  1076  0822               	movf	___awdiv@sign,w
 13473  1077  1903               	btfsc	3,2
 13474  1078  287E               	goto	l4708
 13475  1079  09A3               	comf	___awdiv@quotient,f
 13476  107A  09A4               	comf	___awdiv@quotient+1,f
 13477  107B  0AA3               	incf	___awdiv@quotient,f
 13478  107C  1903               	skipnz
 13479  107D  0AA4               	incf	___awdiv@quotient+1,f
 13480  107E                     l4708:	
 13481  107E  0824               	movf	___awdiv@quotient+1,w
 13482  107F  00F6               	movwf	?___awdiv+1
 13483  1080  0823               	movf	___awdiv@quotient,w
 13484  1081  00F5               	movwf	?___awdiv
 13485  1082  0008               	return
 13486  1083                     __end_of___awdiv:	
 13487                           
 13488                           	psect	text55
 13489  1E99                     __ptext55:	
 13490 ;; *************** function _InsertString *****************
 13491 ;; Defined at:
 13492 ;;		line 91 in file "main.c"
 13493 ;; Parameters:    Size  Location     Type
 13494 ;;  dest            1    wreg     PTR unsigned char 
 13495 ;;		 -> message_end(73), message_start(70), 
 13496 ;;  src             2    8[BANK0 ] PTR unsigned char 
 13497 ;;		 -> GetNavData@strId(12), STR_10(5), 
 13498 ;;  index           2   10[BANK0 ] int 
 13499 ;;  destLimit       2   12[BANK0 ] int 
 13500 ;; Auto vars:     Size  Location     Type
 13501 ;;  dest            1   16[BANK0 ] PTR unsigned char 
 13502 ;;		 -> message_end(73), message_start(70), 
 13503 ;;  i               2   17[BANK0 ] int 
 13504 ;;  counti          2   14[BANK0 ] int 
 13505 ;; Return value:  Size  Location     Type
 13506 ;;                  1    wreg      void 
 13507 ;; Registers used:
 13508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13509 ;; Tracked objects:
 13510 ;;		On entry : 1F/0
 13511 ;;		On exit  : 0/0
 13512 ;;		Unchanged: 0/0
 13513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13514 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13515 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13517 ;;      Totals:         1      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;Total ram usage:       12 bytes
 13519 ;; Hardware stack levels used:    1
 13520 ;; Hardware stack levels required when called:    4
 13521 ;; This function calls:
 13522 ;;		_Insert
 13523 ;;		_strlen
 13524 ;; This function is called by:
 13525 ;;		_GetNavData
 13526 ;; This function uses a non-reentrant model
 13527 ;;
 13528                           
 13529                           
 13530                           ;psect for function _InsertString
 13531  1E99                     _InsertString:	
 13532                           
 13533                           ;incstack = 0
 13534                           ; Regs used in _InsertString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13535                           ;InsertString@dest stored from wreg
 13536  1E99  00B0               	movwf	InsertString@dest
 13537                           
 13538                           ;main.c: 91: void InsertString(char* dest, char* src, int index, int destLimit);main.c: 
      +                          92: {;main.c: 93:     for (int i = 0, counti = strlen(src); i < counti && index < destLi
      +                          mit; i++)
 13539  1E9A  01B1               	clrf	InsertString@i
 13540  1E9B  01B2               	clrf	InsertString@i+1
 13541  1E9C  0829               	movf	InsertString@src+1,w
 13542  1E9D  00F6               	movwf	strlen@s+1
 13543  1E9E  0828               	movf	InsertString@src,w
 13544  1E9F  00F5               	movwf	strlen@s
 13545  1EA0  319A  2207  319E   	fcall	_strlen
 13546  1EA3  0876               	movf	?_strlen+1,w
 13547  1EA4  00AF               	movwf	InsertString@counti+1
 13548  1EA5  0875               	movf	?_strlen,w
 13549  1EA6  00AE               	movwf	InsertString@counti
 13550  1EA7                     l5198:	
 13551  1EA7  0832               	movf	InsertString@i+1,w
 13552  1EA8  3A80               	xorlw	128
 13553  1EA9  00F8               	movwf	??_InsertString
 13554  1EAA  082F               	movf	InsertString@counti+1,w
 13555  1EAB  3A80               	xorlw	128
 13556  1EAC  0278               	subwf	??_InsertString,w
 13557  1EAD  1D03               	skipz
 13558  1EAE  2EB1               	goto	u5475
 13559  1EAF  082E               	movf	InsertString@counti,w
 13560  1EB0  0231               	subwf	InsertString@i,w
 13561  1EB1                     u5475:	
 13562  1EB1  1803               	skipnc
 13563  1EB2  0008               	return
 13564  1EB3  0020               	movlb	0	; select bank0
 13565  1EB4  082B               	movf	InsertString@index+1,w
 13566  1EB5  3A80               	xorlw	128
 13567  1EB6  00F8               	movwf	??_InsertString
 13568  1EB7  082D               	movf	InsertString@destLimit+1,w
 13569  1EB8  3A80               	xorlw	128
 13570  1EB9  0278               	subwf	??_InsertString,w
 13571  1EBA  1D03               	skipz
 13572  1EBB  2EBE               	goto	u5485
 13573  1EBC  082C               	movf	InsertString@destLimit,w
 13574  1EBD  022A               	subwf	InsertString@index,w
 13575  1EBE                     u5485:	
 13576  1EBE  1803               	btfsc	3,0
 13577  1EBF  0008               	return
 13578                           
 13579                           ;main.c: 94:     {;main.c: 96:         Insert(dest, src[i], index + i, destLimit);
 13580  1EC0  0020               	movlb	0	; select bank0
 13581  1EC1  0828               	movf	InsertString@src,w
 13582  1EC2  0731               	addwf	InsertString@i,w
 13583  1EC3  0084               	movwf	4
 13584  1EC4  0829               	movf	InsertString@src+1,w
 13585  1EC5  3D32               	addwfc	InsertString@i+1,w
 13586  1EC6  0085               	movwf	5
 13587  1EC7  0800               	movf	0,w	;code access
 13588  1EC8  00F8               	movwf	??_InsertString
 13589  1EC9  0878               	movf	??_InsertString,w
 13590  1ECA  00A0               	movwf	Insert@src
 13591  1ECB  0831               	movf	InsertString@i,w
 13592  1ECC  072A               	addwf	InsertString@index,w
 13593  1ECD  00A1               	movwf	Insert@index
 13594  1ECE  0832               	movf	InsertString@i+1,w
 13595  1ECF  3D2B               	addwfc	InsertString@index+1,w
 13596  1ED0  00A2               	movwf	Insert@index+1
 13597  1ED1  082D               	movf	InsertString@destLimit+1,w
 13598  1ED2  00A4               	movwf	Insert@destLimit+1
 13599  1ED3  082C               	movf	InsertString@destLimit,w
 13600  1ED4  00A3               	movwf	Insert@destLimit
 13601  1ED5  0830               	movf	InsertString@dest,w
 13602  1ED6  319E  2653  319E   	fcall	_Insert
 13603                           
 13604                           ;main.c: 97:     }
 13605  1ED9  3001               	movlw	1
 13606  1EDA  0020               	movlb	0	; select bank0
 13607  1EDB  07B1               	addwf	InsertString@i,f
 13608  1EDC  3000               	movlw	0
 13609  1EDD  3DB2               	addwfc	InsertString@i+1,f
 13610  1EDE  2EA7               	goto	l5198
 13611  1EDF                     __end_of_InsertString:	
 13612                           
 13613                           	psect	text56
 13614  1E53                     __ptext56:	
 13615 ;; *************** function _Insert *****************
 13616 ;; Defined at:
 13617 ;;		line 72 in file "main.c"
 13618 ;; Parameters:    Size  Location     Type
 13619 ;;  dest            1    wreg     PTR unsigned char 
 13620 ;;		 -> message_end(73), message_start(70), 
 13621 ;;  src             1    0[BANK0 ] unsigned char 
 13622 ;;  index           2    1[BANK0 ] int 
 13623 ;;  destLimit       2    3[BANK0 ] int 
 13624 ;; Auto vars:     Size  Location     Type
 13625 ;;  dest            1    7[BANK0 ] PTR unsigned char 
 13626 ;;		 -> message_end(73), message_start(70), 
 13627 ;;  current         1    6[BANK0 ] unsigned char 
 13628 ;;  temp            1    5[BANK0 ] unsigned char 
 13629 ;; Return value:  Size  Location     Type
 13630 ;;                  1    wreg      void 
 13631 ;; Registers used:
 13632 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13633 ;; Tracked objects:
 13634 ;;		On entry : 1F/0
 13635 ;;		On exit  : 0/0
 13636 ;;		Unchanged: 0/0
 13637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13638 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;Total ram usage:       10 bytes
 13643 ;; Hardware stack levels used:    1
 13644 ;; Hardware stack levels required when called:    3
 13645 ;; This function calls:
 13646 ;;		Nothing
 13647 ;; This function is called by:
 13648 ;;		_InsertString
 13649 ;;		_GetNavData
 13650 ;; This function uses a non-reentrant model
 13651 ;;
 13652                           
 13653                           
 13654                           ;psect for function _Insert
 13655  1E53                     _Insert:	
 13656                           
 13657                           ;incstack = 0
 13658                           ; Regs used in _Insert: [wreg+fsr1l+fsr1h+status,2+status,0]
 13659                           ;Insert@dest stored from wreg
 13660  1E53  00A7               	movwf	Insert@dest
 13661                           
 13662                           ;main.c: 75:     temp = dest[index];
 13663  1E54  0821               	movf	Insert@index,w
 13664  1E55  0727               	addwf	Insert@dest,w
 13665  1E56  00F5               	movwf	??_Insert
 13666  1E57  0875               	movf	??_Insert,w
 13667  1E58  0086               	movwf	6
 13668  1E59  3003               	movlw	3	; select bank6/7
 13669  1E5A  0087               	movwf	7
 13670  1E5B  0801               	movf	1,w
 13671  1E5C  00F6               	movwf	??_Insert+1
 13672  1E5D  0876               	movf	??_Insert+1,w
 13673  1E5E  00A5               	movwf	Insert@temp
 13674                           
 13675                           ;main.c: 76:     dest[index] = src;
 13676  1E5F  0820               	movf	Insert@src,w
 13677  1E60  00F5               	movwf	??_Insert
 13678  1E61  0821               	movf	Insert@index,w
 13679  1E62  0727               	addwf	Insert@dest,w
 13680  1E63  00F6               	movwf	??_Insert+1
 13681  1E64  0876               	movf	??_Insert+1,w
 13682  1E65  0086               	movwf	6
 13683  1E66  3003               	movlw	3	; select bank6/7
 13684  1E67  0087               	movwf	7
 13685  1E68  0875               	movf	??_Insert,w
 13686  1E69  0081               	movwf	1
 13687  1E6A                     l4922:	
 13688                           
 13689                           ;main.c: 77:     index++;
 13690  1E6A  3001               	movlw	1
 13691  1E6B  07A1               	addwf	Insert@index,f
 13692  1E6C  3000               	movlw	0
 13693  1E6D  3DA2               	addwfc	Insert@index+1,f
 13694                           
 13695                           ;main.c: 78:     while (index < destLimit)
 13696                           
 13697                           ;main.c: 88:     }
 13698                           
 13699                           ;main.c: 78:     while (index < destLimit)
 13700  1E6E  0822               	movf	Insert@index+1,w
 13701  1E6F  3A80               	xorlw	128
 13702  1E70  00F5               	movwf	??_Insert
 13703  1E71  0824               	movf	Insert@destLimit+1,w
 13704  1E72  3A80               	xorlw	128
 13705  1E73  0275               	subwf	??_Insert,w
 13706  1E74  1D03               	skipz
 13707  1E75  2E78               	goto	u5115
 13708  1E76  0823               	movf	Insert@destLimit,w
 13709  1E77  0221               	subwf	Insert@index,w
 13710  1E78                     u5115:	
 13711  1E78  1803               	btfsc	3,0
 13712  1E79  0008               	return
 13713                           
 13714                           ;main.c: 79:     {;main.c: 80:         char current = dest[index];
 13715  1E7A  0020               	movlb	0	; select bank0
 13716  1E7B  0821               	movf	Insert@index,w
 13717  1E7C  0727               	addwf	Insert@dest,w
 13718  1E7D  00F5               	movwf	??_Insert
 13719  1E7E  0875               	movf	??_Insert,w
 13720  1E7F  0086               	movwf	6
 13721  1E80  3003               	movlw	3	; select bank6/7
 13722  1E81  0087               	movwf	7
 13723  1E82  0801               	movf	1,w
 13724  1E83  00F6               	movwf	??_Insert+1
 13725  1E84  0876               	movf	??_Insert+1,w
 13726  1E85  00A6               	movwf	Insert@current
 13727                           
 13728                           ;main.c: 81:         dest[index] = temp;
 13729  1E86  0825               	movf	Insert@temp,w
 13730  1E87  00F5               	movwf	??_Insert
 13731  1E88  0821               	movf	Insert@index,w
 13732  1E89  0727               	addwf	Insert@dest,w
 13733  1E8A  00F6               	movwf	??_Insert+1
 13734  1E8B  0876               	movf	??_Insert+1,w
 13735  1E8C  0086               	movwf	6
 13736  1E8D  3003               	movlw	3	; select bank6/7
 13737  1E8E  0087               	movwf	7
 13738  1E8F  0875               	movf	??_Insert,w
 13739  1E90  0081               	movwf	1
 13740                           
 13741                           ;main.c: 82:         temp = current;
 13742  1E91  0826               	movf	Insert@current,w
 13743  1E92  00F5               	movwf	??_Insert
 13744  1E93  0875               	movf	??_Insert,w
 13745  1E94  00A5               	movwf	Insert@temp
 13746                           
 13747                           ;main.c: 83:         if (current == '\0')
 13748  1E95  0826               	movf	Insert@current,w
 13749  1E96  1903               	btfsc	3,2
 13750  1E97  0008               	return
 13751  1E98  2E6A               	goto	l4922
 13752  1E99                     __end_of_Insert:	
 13753                           
 13754                           	psect	text57
 13755  1D91                     __ptext57:	
 13756 ;; *************** function _FindString *****************
 13757 ;; Defined at:
 13758 ;;		line 51 in file "main.c"
 13759 ;; Parameters:    Size  Location     Type
 13760 ;;  src             1    wreg     PTR unsigned char 
 13761 ;;		 -> GetNavData@data_type(7), 
 13762 ;;  srcLen          2    2[BANK0 ] int 
 13763 ;;  target          2    4[BANK0 ] PTR unsigned char 
 13764 ;;		 -> STR_9(5), 
 13765 ;;  targetLen       2    6[BANK0 ] int 
 13766 ;; Auto vars:     Size  Location     Type
 13767 ;;  src             1   10[BANK0 ] PTR unsigned char 
 13768 ;;		 -> GetNavData@data_type(7), 
 13769 ;;  i               2   11[BANK0 ] int 
 13770 ;;  matching        2   13[BANK0 ] int 
 13771 ;; Return value:  Size  Location     Type
 13772 ;;                  1    wreg      _Bool 
 13773 ;; Registers used:
 13774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 13775 ;; Tracked objects:
 13776 ;;		On entry : 1F/0
 13777 ;;		On exit  : 0/0
 13778 ;;		Unchanged: 0/0
 13779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13780 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13784 ;;Total ram usage:       13 bytes
 13785 ;; Hardware stack levels used:    1
 13786 ;; Hardware stack levels required when called:    3
 13787 ;; This function calls:
 13788 ;;		Nothing
 13789 ;; This function is called by:
 13790 ;;		_GetNavData
 13791 ;; This function uses a non-reentrant model
 13792 ;;
 13793                           
 13794                           
 13795                           ;psect for function _FindString
 13796  1D91                     _FindString:	
 13797                           
 13798                           ;incstack = 0
 13799                           ; Regs used in _FindString: [wreg-fsr1h+status,2+status,0+pclath]
 13800                           ;FindString@src stored from wreg
 13801  1D91  00AA               	movwf	FindString@src
 13802                           
 13803                           ;main.c: 51: _Bool FindString(char* src, int srcLen, char* target, int targetLen);main.c
      +                          : 52: {;main.c: 53:     int matching = 0;
 13804  1D92  01AD               	clrf	FindString@matching
 13805  1D93  01AE               	clrf	FindString@matching+1
 13806                           
 13807                           ;main.c: 54:     for (int i = 0; i < srcLen; i++)
 13808  1D94  01AB               	clrf	FindString@i
 13809  1D95  01AC               	clrf	FindString@i+1
 13810  1D96                     l5184:	
 13811  1D96  082C               	movf	FindString@i+1,w
 13812  1D97  3A80               	xorlw	128
 13813  1D98  00A8               	movwf	??_FindString
 13814  1D99  0823               	movf	FindString@srcLen+1,w
 13815  1D9A  3A80               	xorlw	128
 13816  1D9B  0228               	subwf	??_FindString,w
 13817  1D9C  1D03               	skipz
 13818  1D9D  2DA0               	goto	u5465
 13819  1D9E  0822               	movf	FindString@srcLen,w
 13820  1D9F  022B               	subwf	FindString@i,w
 13821  1DA0                     u5465:	
 13822  1DA0  1803               	btfsc	3,0
 13823  1DA1  2DCA               	goto	l5186
 13824                           
 13825                           ;main.c: 55:     {;main.c: 56:         if (src[i] == target[matching])
 13826  1DA2  0020               	movlb	0	; select bank0
 13827  1DA3  0824               	movf	FindString@target,w
 13828  1DA4  072D               	addwf	FindString@matching,w
 13829  1DA5  0084               	movwf	4
 13830  1DA6  0825               	movf	FindString@target+1,w
 13831  1DA7  3D2E               	addwfc	FindString@matching+1,w
 13832  1DA8  0085               	movwf	5
 13833  1DA9  0800               	movf	0,w	;code access
 13834  1DAA  00A8               	movwf	??_FindString
 13835  1DAB  082B               	movf	FindString@i,w
 13836  1DAC  072A               	addwf	FindString@src,w
 13837  1DAD  00A9               	movwf	??_FindString+1
 13838  1DAE  0829               	movf	??_FindString+1,w
 13839  1DAF  0086               	movwf	6
 13840  1DB0  0187               	clrf	7
 13841  1DB1  0801               	movf	1,w
 13842  1DB2  0628               	xorwf	??_FindString,w
 13843  1DB3  1D03               	skipz
 13844  1DB4  2DC3               	goto	l5180
 13845                           
 13846                           ;main.c: 57:         {;main.c: 58:             matching++;
 13847  1DB5  3001               	movlw	1
 13848  1DB6  07AD               	addwf	FindString@matching,f
 13849  1DB7  3000               	movlw	0
 13850  1DB8  3DAE               	addwfc	FindString@matching+1,f
 13851                           
 13852                           ;main.c: 59:             if (matching == targetLen)
 13853  1DB9  0827               	movf	FindString@targetLen+1,w
 13854  1DBA  062E               	xorwf	FindString@matching+1,w
 13855  1DBB  1D03               	skipz
 13856  1DBC  2DBF               	goto	u5455
 13857  1DBD  0826               	movf	FindString@targetLen,w
 13858  1DBE  062D               	xorwf	FindString@matching,w
 13859  1DBF                     u5455:	
 13860  1DBF  1D03               	skipz
 13861  1DC0  2DC5               	goto	l5182
 13862                           
 13863                           ;main.c: 60:             {;main.c: 61:                 return 1;
 13864  1DC1  3001               	movlw	1
 13865  1DC2  0008               	return
 13866  1DC3                     l5180:	
 13867                           
 13868                           ;main.c: 65:         {;main.c: 66:             matching = 0;
 13869  1DC3  01AD               	clrf	FindString@matching
 13870  1DC4  01AE               	clrf	FindString@matching+1
 13871  1DC5                     l5182:	
 13872                           
 13873                           ;main.c: 68:     }
 13874  1DC5  3001               	movlw	1
 13875  1DC6  07AB               	addwf	FindString@i,f
 13876  1DC7  3000               	movlw	0
 13877  1DC8  3DAC               	addwfc	FindString@i+1,f
 13878  1DC9  2D96               	goto	l5184
 13879  1DCA                     l5186:	
 13880                           
 13881                           ;main.c: 69:     return 0;
 13882  1DCA  3000               	movlw	0
 13883  1DCB  0008               	return
 13884  1DCC                     __end_of_FindString:	
 13885                           
 13886                           	psect	text58
 13887  1948                     __ptext58:	
 13888 ;; *************** function _EUSART_is_rx_ready *****************
 13889 ;; Defined at:
 13890 ;;		line 83 in file "mcc_generated_files/eusart.c"
 13891 ;; Parameters:    Size  Location     Type
 13892 ;;		None
 13893 ;; Auto vars:     Size  Location     Type
 13894 ;;		None
 13895 ;; Return value:  Size  Location     Type
 13896 ;;                  1    wreg      _Bool 
 13897 ;; Registers used:
 13898 ;;		wreg, status,2, status,0
 13899 ;; Tracked objects:
 13900 ;;		On entry : 1D/2
 13901 ;;		On exit  : 1F/0
 13902 ;;		Unchanged: 0/0
 13903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13908 ;;Total ram usage:        0 bytes
 13909 ;; Hardware stack levels used:    1
 13910 ;; Hardware stack levels required when called:    3
 13911 ;; This function calls:
 13912 ;;		Nothing
 13913 ;; This function is called by:
 13914 ;;		_GPS_HasAcknowledged
 13915 ;;		_GetNavData
 13916 ;; This function uses a non-reentrant model
 13917 ;;
 13918                           
 13919                           
 13920                           ;psect for function _EUSART_is_rx_ready
 13921  1948                     _EUSART_is_rx_ready:	
 13922                           
 13923                           ;mcc_generated_files/eusart.c: 85:     return PIR1bits.RCIF;
 13924                           
 13925                           ;incstack = 0
 13926                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
 13927  1948  0020               	movlb	0	; select bank0
 13928  1949  0E10               	swapf	16,w	;volatile
 13929  194A  0C89               	rrf	9,f
 13930  194B  3901               	andlw	1
 13931  194C  0008               	return
 13932  194D                     __end_of_EUSART_is_rx_ready:	
 13933                           
 13934                           	psect	text59
 13935  1976                     __ptext59:	
 13936 ;; *************** function _EUSART_Read *****************
 13937 ;; Defined at:
 13938 ;;		line 93 in file "mcc_generated_files/eusart.c"
 13939 ;; Parameters:    Size  Location     Type
 13940 ;;		None
 13941 ;; Auto vars:     Size  Location     Type
 13942 ;;		None
 13943 ;; Return value:  Size  Location     Type
 13944 ;;                  1    wreg      unsigned char 
 13945 ;; Registers used:
 13946 ;;		wreg
 13947 ;; Tracked objects:
 13948 ;;		On entry : 1F/0
 13949 ;;		On exit  : 1F/3
 13950 ;;		Unchanged: 0/0
 13951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13956 ;;Total ram usage:        0 bytes
 13957 ;; Hardware stack levels used:    1
 13958 ;; Hardware stack levels required when called:    3
 13959 ;; This function calls:
 13960 ;;		Nothing
 13961 ;; This function is called by:
 13962 ;;		_GPS_HasAcknowledged
 13963 ;;		_GetNavData
 13964 ;; This function uses a non-reentrant model
 13965 ;;
 13966                           
 13967                           
 13968                           ;psect for function _EUSART_Read
 13969  1976                     _EUSART_Read:	
 13970  1976                     l351:	
 13971                           ;mcc_generated_files/eusart.c: 96:     {;mcc_generated_files/eusart.c: 97:     }
 13972                           
 13973                           ;incstack = 0
 13974                           ; Regs used in _EUSART_Read: [wreg]
 13975                           
 13976                           
 13977                           ;mcc_generated_files/eusart.c: 95:     while(!PIR1bits.RCIF)
 13978  1976  1E90               	btfss	16,5	;volatile
 13979  1977  2976               	goto	l351
 13980                           
 13981                           ;mcc_generated_files/eusart.c: 100:     if(1 == RC1STAbits.OERR)
 13982  1978  0023               	movlb	3	; select bank3
 13983  1979  1C9D               	btfss	29,1	;volatile
 13984  197A  297D               	goto	l4906
 13985                           
 13986                           ;mcc_generated_files/eusart.c: 101:     {;mcc_generated_files/eusart.c: 104:         RC1
      +                          STAbits.CREN = 0;
 13987  197B  121D               	bcf	29,4	;volatile
 13988                           
 13989                           ;mcc_generated_files/eusart.c: 105:         RC1STAbits.CREN = 1;
 13990  197C  161D               	bsf	29,4	;volatile
 13991  197D                     l4906:	
 13992                           
 13993                           ;mcc_generated_files/eusart.c: 108:     return RC1REG;
 13994  197D  0819               	movf	25,w	;volatile
 13995  197E  0008               	return
 13996  197F                     __end_of_EUSART_Read:	
 13997                           
 13998                           	psect	text60
 13999  1AE0                     __ptext60:	
 14000 ;; *************** function _ClearString *****************
 14001 ;; Defined at:
 14002 ;;		line 42 in file "main.c"
 14003 ;; Parameters:    Size  Location     Type
 14004 ;;  str             2    2[BANK0 ] PTR unsigned char 
 14005 ;;		 -> GetNavData@data_type(7), message_end(73), message_start(70), 
 14006 ;; Auto vars:     Size  Location     Type
 14007 ;;  i               2    6[BANK0 ] int 
 14008 ;;  counti          2    4[BANK0 ] int 
 14009 ;; Return value:  Size  Location     Type
 14010 ;;                  1    wreg      void 
 14011 ;; Registers used:
 14012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14013 ;; Tracked objects:
 14014 ;;		On entry : 1F/0
 14015 ;;		On exit  : 0/0
 14016 ;;		Unchanged: 0/0
 14017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14018 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14019 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14021 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14022 ;;Total ram usage:        7 bytes
 14023 ;; Hardware stack levels used:    1
 14024 ;; Hardware stack levels required when called:    4
 14025 ;; This function calls:
 14026 ;;		_strlen
 14027 ;; This function is called by:
 14028 ;;		_GetNavData
 14029 ;; This function uses a non-reentrant model
 14030 ;;
 14031                           
 14032                           
 14033                           ;psect for function _ClearString
 14034  1AE0                     _ClearString:	
 14035                           
 14036                           ;main.c: 42: void ClearString(char* str);main.c: 43: {;main.c: 44:     for (int i = 0, c
      +                          ounti = strlen(str); i < counti; i++)
 14037                           
 14038                           ;incstack = 0
 14039                           ; Regs used in _ClearString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14040  1AE0  01A6               	clrf	ClearString@i
 14041  1AE1  01A7               	clrf	ClearString@i+1
 14042  1AE2  0823               	movf	ClearString@str+1,w
 14043  1AE3  00F6               	movwf	strlen@s+1
 14044  1AE4  0822               	movf	ClearString@str,w
 14045  1AE5  00F5               	movwf	strlen@s
 14046  1AE6  319A  2207  319A   	fcall	_strlen
 14047  1AE9  0876               	movf	?_strlen+1,w
 14048  1AEA  00A5               	movwf	ClearString@counti+1
 14049  1AEB  0875               	movf	?_strlen,w
 14050  1AEC  00A4               	movwf	ClearString@counti
 14051  1AED                     l5168:	
 14052  1AED  0827               	movf	ClearString@i+1,w
 14053  1AEE  3A80               	xorlw	128
 14054  1AEF  00F8               	movwf	??_ClearString
 14055  1AF0  0825               	movf	ClearString@counti+1,w
 14056  1AF1  3A80               	xorlw	128
 14057  1AF2  0278               	subwf	??_ClearString,w
 14058  1AF3  1D03               	skipz
 14059  1AF4  2AF7               	goto	u5435
 14060  1AF5  0824               	movf	ClearString@counti,w
 14061  1AF6  0226               	subwf	ClearString@i,w
 14062  1AF7                     u5435:	
 14063  1AF7  1803               	btfsc	3,0
 14064  1AF8  0008               	return
 14065                           
 14066                           ;main.c: 45:     {;main.c: 46:         str[i] = '\0';
 14067  1AF9  0020               	movlb	0	; select bank0
 14068  1AFA  0826               	movf	ClearString@i,w
 14069  1AFB  0722               	addwf	ClearString@str,w
 14070  1AFC  0086               	movwf	6
 14071  1AFD  0827               	movf	ClearString@i+1,w
 14072  1AFE  3D23               	addwfc	ClearString@str+1,w
 14073  1AFF  0087               	movwf	7
 14074  1B00  0181               	clrf	1
 14075                           
 14076                           ;main.c: 47:     }
 14077  1B01  3001               	movlw	1
 14078  1B02  07A6               	addwf	ClearString@i,f
 14079  1B03  3000               	movlw	0
 14080  1B04  3DA7               	addwfc	ClearString@i+1,f
 14081  1B05  2AED               	goto	l5168
 14082  1B06                     __end_of_ClearString:	
 14083                           
 14084                           	psect	text61
 14085  1A07                     __ptext61:	
 14086 ;; *************** function _strlen *****************
 14087 ;; Defined at:
 14088 ;;		line 12 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strlen.c"
 14089 ;; Parameters:    Size  Location     Type
 14090 ;;  s               2    5[COMMON] PTR const unsigned char 
 14091 ;;		 -> checksum(6), main@convertedSensorData(16), GetNavData@strId(12), STR_10(5), 
 14092 ;;		 -> STR_7(14), GetNavData@data_type(7), STR_6(26), STR_5(26), 
 14093 ;;		 -> STR_4(26), STR_3(26), STR_2(26), STR_1(26), 
 14094 ;;		 -> message_end(73), message_start(70), 
 14095 ;; Auto vars:     Size  Location     Type
 14096 ;;  a               2    0[BANK0 ] PTR const unsigned char 
 14097 ;;		 -> checksum(6), main@convertedSensorData(16), GetNavData@strId(12), STR_10(5), 
 14098 ;;		 -> STR_7(14), GetNavData@data_type(7), STR_6(26), STR_5(26), 
 14099 ;;		 -> STR_4(26), STR_3(26), STR_2(26), STR_1(26), 
 14100 ;;		 -> message_end(73), message_start(70), 
 14101 ;; Return value:  Size  Location     Type
 14102 ;;                  2    5[COMMON] unsigned int 
 14103 ;; Registers used:
 14104 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14105 ;; Tracked objects:
 14106 ;;		On entry : 0/0
 14107 ;;		On exit  : 1F/0
 14108 ;;		Unchanged: 0/0
 14109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14110 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14111 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;Total ram usage:        5 bytes
 14115 ;; Hardware stack levels used:    1
 14116 ;; Hardware stack levels required when called:    3
 14117 ;; This function calls:
 14118 ;;		Nothing
 14119 ;; This function is called by:
 14120 ;;		_ClearString
 14121 ;;		_InsertString
 14122 ;;		_ReverseString
 14123 ;;		_crc16
 14124 ;;		_TransmitString
 14125 ;;		_WriteGPS
 14126 ;;		_GetNavData
 14127 ;;		_strcat
 14128 ;; This function uses a non-reentrant model
 14129 ;;
 14130                           
 14131                           
 14132                           ;psect for function _strlen
 14133  1A07                     _strlen:	
 14134                           
 14135                           ;incstack = 0
 14136                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 14137  1A07  0876               	movf	strlen@s+1,w
 14138  1A08  0020               	movlb	0	; select bank0
 14139  1A09  00A1               	movwf	strlen@a+1
 14140  1A0A  0875               	movf	strlen@s,w
 14141  1A0B  00A0               	movwf	strlen@a
 14142  1A0C                     l4518:	
 14143  1A0C  0875               	movf	strlen@s,w
 14144  1A0D  0084               	movwf	4
 14145  1A0E  0876               	movf	strlen@s+1,w
 14146  1A0F  0085               	movwf	5
 14147  1A10  0012               	moviw fsr0++
 14148  1A11  1903               	btfsc	3,2
 14149  1A12  2A18               	goto	l4520
 14150  1A13  3001               	movlw	1
 14151  1A14  07F5               	addwf	strlen@s,f
 14152  1A15  3000               	movlw	0
 14153  1A16  3DF6               	addwfc	strlen@s+1,f
 14154  1A17  2A0C               	goto	l4518
 14155  1A18                     l4520:	
 14156  1A18  0020               	movlb	0	; select bank0
 14157  1A19  0820               	movf	strlen@a,w
 14158  1A1A  0275               	subwf	strlen@s,w
 14159  1A1B  00F5               	movwf	?_strlen
 14160  1A1C  0821               	movf	strlen@a+1,w
 14161  1A1D  3B76               	subwfb	strlen@s+1,w
 14162  1A1E  00F6               	movwf	?_strlen+1
 14163  1A1F  0008               	return
 14164  1A20                     __end_of_strlen:	
 14165                           
 14166                           	psect	text62
 14167  1BD4                     __ptext62:	
 14168 ;; *************** function _FlashError *****************
 14169 ;; Defined at:
 14170 ;;		line 30 in file "main.c"
 14171 ;; Parameters:    Size  Location     Type
 14172 ;;		None
 14173 ;; Auto vars:     Size  Location     Type
 14174 ;;  i               2    7[COMMON] int 
 14175 ;; Return value:  Size  Location     Type
 14176 ;;                  1    wreg      void 
 14177 ;; Registers used:
 14178 ;;		wreg, status,2
 14179 ;; Tracked objects:
 14180 ;;		On entry : 1F/0
 14181 ;;		On exit  : 0/0
 14182 ;;		Unchanged: 0/0
 14183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14186 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14187 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14188 ;;Total ram usage:        4 bytes
 14189 ;; Hardware stack levels used:    1
 14190 ;; Hardware stack levels required when called:    3
 14191 ;; This function calls:
 14192 ;;		Nothing
 14193 ;; This function is called by:
 14194 ;;		_main
 14195 ;; This function uses a non-reentrant model
 14196 ;;
 14197                           
 14198                           
 14199                           ;psect for function _FlashError
 14200  1BD4                     _FlashError:	
 14201                           
 14202                           ;main.c: 32:     for (int i = 0; i < 3; i++)
 14203                           
 14204                           ;incstack = 0
 14205                           ; Regs used in _FlashError: [wreg+status,2]
 14206  1BD4  01F7               	clrf	FlashError@i
 14207  1BD5  01F8               	clrf	FlashError@i+1
 14208  1BD6                     l622:	
 14209                           ;main.c: 33:     {;main.c: 34:         do { LATCbits.LATC5 = 1; } while(0);
 14210                           
 14211  1BD6  0022               	movlb	2	; select bank2
 14212  1BD7  168E               	bsf	14,5	;volatile
 14213                           
 14214                           ;main.c: 35:         _delay((unsigned long)((250)*(4000000/4000.0)));
 14215  1BD8  3002               	movlw	2
 14216  1BD9  00F6               	movwf	??_FlashError+1
 14217  1BDA  3045               	movlw	69
 14218  1BDB  00F5               	movwf	??_FlashError
 14219  1BDC  30AA               	movlw	170
 14220  1BDD                     u6407:	
 14221  1BDD  0B89               	decfsz	9,f
 14222  1BDE  2BDD               	goto	u6407
 14223  1BDF  0BF5               	decfsz	??_FlashError,f
 14224  1BE0  2BDD               	goto	u6407
 14225  1BE1  0BF6               	decfsz	??_FlashError+1,f
 14226  1BE2  2BDD               	goto	u6407
 14227  1BE3  0022               	movlb	2	; select bank2
 14228  1BE4  128E               	bcf	14,5	;volatile
 14229                           
 14230                           ;main.c: 37:         _delay((unsigned long)((250)*(4000000/4000.0)));
 14231  1BE5  3002               	movlw	2
 14232  1BE6  00F6               	movwf	??_FlashError+1
 14233  1BE7  3045               	movlw	69
 14234  1BE8  00F5               	movwf	??_FlashError
 14235  1BE9  30AA               	movlw	170
 14236  1BEA                     u6417:	
 14237  1BEA  0B89               	decfsz	9,f
 14238  1BEB  2BEA               	goto	u6417
 14239  1BEC  0BF5               	decfsz	??_FlashError,f
 14240  1BED  2BEA               	goto	u6417
 14241  1BEE  0BF6               	decfsz	??_FlashError+1,f
 14242  1BEF  2BEA               	goto	u6417
 14243                           
 14244                           ;main.c: 38:     }
 14245  1BF0  3001               	movlw	1
 14246  1BF1  07F7               	addwf	FlashError@i,f
 14247  1BF2  3000               	movlw	0
 14248  1BF3  3DF8               	addwfc	FlashError@i+1,f
 14249  1BF4  0878               	movf	FlashError@i+1,w
 14250  1BF5  3A80               	xorlw	128
 14251  1BF6  00F5               	movwf	??_FlashError
 14252  1BF7  3080               	movlw	128
 14253  1BF8  0275               	subwf	??_FlashError,w
 14254  1BF9  1D03               	skipz
 14255  1BFA  2BFD               	goto	u5955
 14256  1BFB  3003               	movlw	3
 14257  1BFC  0277               	subwf	FlashError@i,w
 14258  1BFD                     u5955:	
 14259  1BFD  1803               	btfsc	3,0
 14260  1BFE  0008               	return
 14261  1BFF  2BD6               	goto	l622
 14262  1C00                     __end_of_FlashError:	
 14263                           
 14264                           	psect	intentry
 14265  0004                     __pintentry:	
 14266 ;; *************** function _INTERRUPT_InterruptManager *****************
 14267 ;; Defined at:
 14268 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14269 ;; Parameters:    Size  Location     Type
 14270 ;;		None
 14271 ;; Auto vars:     Size  Location     Type
 14272 ;;		None
 14273 ;; Return value:  Size  Location     Type
 14274 ;;                  1    wreg      void 
 14275 ;; Registers used:
 14276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14277 ;; Tracked objects:
 14278 ;;		On entry : 0/0
 14279 ;;		On exit  : 0/0
 14280 ;;		Unchanged: 0/0
 14281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14286 ;;Total ram usage:        0 bytes
 14287 ;; Hardware stack levels used:    1
 14288 ;; Hardware stack levels required when called:    2
 14289 ;; This function calls:
 14290 ;;		_I2C_BusCollisionISR
 14291 ;;		_I2C_ISR
 14292 ;;		_TMR0_ISR
 14293 ;; This function is called by:
 14294 ;;		Interrupt level 1
 14295 ;; This function uses a non-reentrant model
 14296 ;;
 14297                           
 14298  0004                     _INTERRUPT_InterruptManager:	
 14299                           
 14300                           ;incstack = 0
 14301  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14302                           
 14303                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14304  0005  3180               	pagesel	$
 14305                           
 14306                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 14307  0006  1A8B               	btfsc	11,5	;volatile
 14308  0007  1D0B               	btfss	11,2	;volatile
 14309  0008  280D               	goto	i1l382
 14310                           
 14311                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 14312  0009  3199  2199  3180   	fcall	_TMR0_ISR
 14313                           
 14314                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 14315  000C  2821               	goto	i1l390
 14316  000D                     i1l382:	
 14317                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 14318                           
 14319  000D  1F0B               	btfss	11,6	;volatile
 14320  000E  2821               	goto	i1l390
 14321                           
 14322                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 14323  000F  0021               	movlb	1	; select bank1
 14324  0010  1D91               	btfss	17,3	;volatile
 14325  0011  2819               	goto	i1l385
 14326  0012  0020               	movlb	0	; select bank0
 14327  0013  1D91               	btfss	17,3	;volatile
 14328  0014  2819               	goto	i1l385
 14329                           
 14330                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             I2C_BusCollisionISR();
 14331  0015  3190  2000  3180   	fcall	_I2C_BusCollisionISR
 14332                           
 14333                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14334  0018  2821               	goto	i1l390
 14335  0019                     i1l385:	
 14336                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 14337                           
 14338  0019  0021               	movlb	1	; select bank1
 14339  001A  1D90               	btfss	16,3	;volatile
 14340  001B  2821               	goto	i1l390
 14341  001C  0020               	movlb	0	; select bank0
 14342  001D  1D90               	btfss	16,3	;volatile
 14343  001E  2821               	goto	i1l390
 14344                           
 14345                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             I2C_ISR();
 14346  001F  3184  2429         	fcall	_I2C_ISR
 14347  0021                     i1l390:	
 14348                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 14349                           
 14350                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 14351                           
 14352  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14353  0022  0009               	retfie
 14354  0023                     __end_of_INTERRUPT_InterruptManager:	
 14355                           
 14356                           	psect	text64
 14357  1999                     __ptext64:	
 14358 ;; *************** function _TMR0_ISR *****************
 14359 ;; Defined at:
 14360 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 14361 ;; Parameters:    Size  Location     Type
 14362 ;;		None
 14363 ;; Auto vars:     Size  Location     Type
 14364 ;;		None
 14365 ;; Return value:  Size  Location     Type
 14366 ;;                  1    wreg      void 
 14367 ;; Registers used:
 14368 ;;		wreg, status,2, status,0, pclath, cstack
 14369 ;; Tracked objects:
 14370 ;;		On entry : 0/0
 14371 ;;		On exit  : 0/0
 14372 ;;		Unchanged: 0/0
 14373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;Total ram usage:        0 bytes
 14379 ;; Hardware stack levels used:    1
 14380 ;; Hardware stack levels required when called:    1
 14381 ;; This function calls:
 14382 ;;		Absolute function
 14383 ;;		_TMR0_DefaultInterruptHandler
 14384 ;;		_TimerISR
 14385 ;; This function is called by:
 14386 ;;		_INTERRUPT_InterruptManager
 14387 ;; This function uses a non-reentrant model
 14388 ;;
 14389                           
 14390                           
 14391                           ;psect for function _TMR0_ISR
 14392  1999                     _TMR0_ISR:	
 14393                           
 14394                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 14395                           
 14396                           ;incstack = 0
 14397                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 14398  1999  110B               	bcf	11,2	;volatile
 14399                           
 14400                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 14401  199A  0022               	movlb	2	; select bank2
 14402  199B  086F               	movf	_timer0ReloadVal^(0+256),w	;volatile
 14403  199C  0020               	movlb	0	; select bank0
 14404  199D  0095               	movwf	21	;volatile
 14405                           
 14406                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
 14407  199E  0022               	movlb	2	; select bank2
 14408  199F  086D               	movf	_TMR0_InterruptHandler^(0+256),w
 14409  19A0  046E               	iorwf	(_TMR0_InterruptHandler+1)^(0+256),w
 14410  19A1  1903               	btfsc	3,2
 14411  19A2  0008               	return
 14412                           
 14413                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
 14414  19A3  086E               	movf	(_TMR0_InterruptHandler+1)^(0+256),w
 14415  19A4  008A               	movwf	10
 14416  19A5  086D               	movf	_TMR0_InterruptHandler^(0+256),w
 14417  19A6  000A               	callw
 14418  19A7  3199               	pagesel	$
 14419  19A8  0008               	return
 14420  19A9                     __end_of_TMR0_ISR:	
 14421                           
 14422                           	psect	text65
 14423  1943                     __ptext65:	
 14424 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 14425 ;; Defined at:
 14426 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 14427 ;; Parameters:    Size  Location     Type
 14428 ;;		None
 14429 ;; Auto vars:     Size  Location     Type
 14430 ;;		None
 14431 ;; Return value:  Size  Location     Type
 14432 ;;                  1    wreg      void 
 14433 ;; Registers used:
 14434 ;;		None
 14435 ;; Tracked objects:
 14436 ;;		On entry : 1F/2
 14437 ;;		On exit  : 1F/2
 14438 ;;		Unchanged: 1F/0
 14439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;Total ram usage:        0 bytes
 14445 ;; Hardware stack levels used:    1
 14446 ;; This function calls:
 14447 ;;		Nothing
 14448 ;; This function is called by:
 14449 ;;		_TMR0_Initialize
 14450 ;;		_TMR0_ISR
 14451 ;; This function uses a non-reentrant model
 14452 ;;
 14453                           
 14454                           
 14455                           ;psect for function _TMR0_DefaultInterruptHandler
 14456  1943                     _TMR0_DefaultInterruptHandler:	
 14457                           
 14458                           ;incstack = 0
 14459                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 14460  1943  0008               	return
 14461  1944                     __end_of_TMR0_DefaultInterruptHandler:	
 14462                           
 14463                           	psect	text66
 14464  196D                     __ptext66:	
 14465 ;; *************** function _TimerISR *****************
 14466 ;; Defined at:
 14467 ;;		line 9 in file "main.c"
 14468 ;; Parameters:    Size  Location     Type
 14469 ;;		None
 14470 ;; Auto vars:     Size  Location     Type
 14471 ;;		None
 14472 ;; Return value:  Size  Location     Type
 14473 ;;                  1    wreg      void 
 14474 ;; Registers used:
 14475 ;;		wreg
 14476 ;; Tracked objects:
 14477 ;;		On entry : 1F/2
 14478 ;;		On exit  : 1F/2
 14479 ;;		Unchanged: 0/0
 14480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14485 ;;Total ram usage:        0 bytes
 14486 ;; Hardware stack levels used:    1
 14487 ;; This function calls:
 14488 ;;		Nothing
 14489 ;; This function is called by:
 14490 ;;		_main
 14491 ;;		_TMR0_ISR
 14492 ;; This function uses a non-reentrant model
 14493 ;;
 14494                           
 14495                           
 14496                           ;psect for function _TimerISR
 14497  196D                     _TimerISR:	
 14498                           
 14499                           ;main.c: 11:     ticks++;
 14500                           
 14501                           ;incstack = 0
 14502                           ; Regs used in _TimerISR: [wreg]
 14503  196D  3001               	movlw	1
 14504  196E  07DC               	addwf	_ticks^(0+256),f
 14505  196F  3000               	movlw	0
 14506  1970  3DDD               	addwfc	(_ticks+1)^(0+256),f
 14507  1971  3000               	movlw	0
 14508  1972  3DDE               	addwfc	(_ticks+2)^(0+256),f
 14509  1973  3000               	movlw	0
 14510  1974  3DDF               	addwfc	(_ticks+3)^(0+256),f
 14511  1975  0008               	return
 14512  1976                     __end_of_TimerISR:	
 14513                           
 14514                           	psect	text67
 14515  0429                     __ptext67:	
 14516 ;; *************** function _I2C_ISR *****************
 14517 ;; Defined at:
 14518 ;;		line 235 in file "mcc_generated_files/i2c.c"
 14519 ;; Parameters:    Size  Location     Type
 14520 ;;		None
 14521 ;; Auto vars:     Size  Location     Type
 14522 ;;		None
 14523 ;; Return value:  Size  Location     Type
 14524 ;;                  1    wreg      void 
 14525 ;; Registers used:
 14526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14527 ;; Tracked objects:
 14528 ;;		On entry : 1F/0
 14529 ;;		On exit  : 19/0
 14530 ;;		Unchanged: 0/0
 14531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14534 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14535 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14536 ;;Total ram usage:        2 bytes
 14537 ;; Hardware stack levels used:    1
 14538 ;; Hardware stack levels required when called:    1
 14539 ;; This function calls:
 14540 ;;		_I2C_FunctionComplete
 14541 ;;		_I2C_Stop
 14542 ;; This function is called by:
 14543 ;;		_INTERRUPT_InterruptManager
 14544 ;; This function uses a non-reentrant model
 14545 ;;
 14546                           
 14547                           
 14548                           ;psect for function _I2C_ISR
 14549  0429                     _I2C_ISR:	
 14550                           
 14551                           ;mcc_generated_files/i2c.c: 238:     static uint8_t *pi2c_buf_ptr;;mcc_generated_files/i
      +                          2c.c: 239:     static uint16_t i2c_address = 0;;mcc_generated_files/i2c.c: 240:     stat
      +                          ic uint8_t i2c_bytes_left = 0;;mcc_generated_files/i2c.c: 241:     static uint8_t i2c_10
      +                          bit_address_restart = 0;;mcc_generated_files/i2c.c: 243:     PIR1bits.SSP1IF = 0;
 14552                           
 14553                           ;incstack = 0
 14554                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14555  0429  1190               	bcf	16,3	;volatile
 14556                           
 14557                           ;mcc_generated_files/i2c.c: 247:     if(SSP1CON1bits.WCOL)
 14558  042A  0024               	movlb	4	; select bank4
 14559  042B  1F95               	btfss	21,7	;volatile
 14560  042C  2D49               	goto	i1l5528
 14561                           
 14562                           ;mcc_generated_files/i2c.c: 248:     {;mcc_generated_files/i2c.c: 250:         SSP1CON1b
      +                          its.WCOL = 0;
 14563  042D  1395               	bcf	21,7	;volatile
 14564                           
 14565                           ;mcc_generated_files/i2c.c: 251:         i2c_state = S_MASTER_IDLE;
 14566  042E  0022               	movlb	2	; select bank2
 14567  042F  01E8               	clrf	_i2c_state^(0+256)
 14568                           
 14569                           ;mcc_generated_files/i2c.c: 252:         *(p_i2c_current->pTrFlag) = I2C_MESSAGE_FAIL;
 14570  0430  0865               	movf	_p_i2c_current^(0+256),w
 14571  0431  3E02               	addlw	2
 14572  0432  0086               	movwf	6
 14573  0433  3001               	movlw	1	; select bank2/3
 14574  0434  0087               	movwf	7
 14575  0435  3F40               	moviw [0]fsr1
 14576  0436  00F3               	movwf	??_I2C_ISR
 14577  0437  3F41               	moviw [1]fsr1
 14578  0438  00F4               	movwf	??_I2C_ISR+1
 14579  0439  0873               	movf	??_I2C_ISR,w
 14580  043A  0086               	movwf	6
 14581  043B  0874               	movf	??_I2C_ISR+1,w
 14582  043C  0087               	movwf	7
 14583  043D  3001               	movlw	1
 14584  043E  0081               	movwf	1
 14585                           
 14586                           ;mcc_generated_files/i2c.c: 255:         p_i2c_current = ((void*)0);
 14587  043F  01E5               	clrf	_p_i2c_current^(0+256)
 14588  0440  0008               	return
 14589  0441                     i1l490:	
 14590                           ;mcc_generated_files/i2c.c: 262:     {;mcc_generated_files/i2c.c: 263:         case S_MA
      +                          STER_IDLE:
 14591                           
 14592                           
 14593                           ;mcc_generated_files/i2c.c: 265:             if(i2c_object.trStatus.s.empty != 1)
 14594  0441  18D9               	btfsc	(_i2c_object^(0+256)+2),1
 14595  0442  0008               	return
 14596                           
 14597                           ;mcc_generated_files/i2c.c: 266:             {;mcc_generated_files/i2c.c: 268:          
      +                                 p_i2c_current = i2c_object.pTrHead;
 14598  0443  0858               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 14599  0444  00F3               	movwf	??_I2C_ISR
 14600  0445  0873               	movf	??_I2C_ISR,w
 14601  0446  00E5               	movwf	_p_i2c_current^(0+256)
 14602                           
 14603                           ;mcc_generated_files/i2c.c: 269:                 i2c_trb_count = i2c_object.pTrHead->cou
      +                          nt;
 14604  0447  0858               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 14605  0448  0086               	movwf	6
 14606  0449  3001               	movlw	1	; select bank2/3
 14607  044A  0087               	movwf	7
 14608  044B  0801               	movf	1,w
 14609  044C  00F3               	movwf	??_I2C_ISR
 14610  044D  0873               	movf	??_I2C_ISR,w
 14611  044E  00E7               	movwf	_i2c_trb_count^(0+256)
 14612                           
 14613                           ;mcc_generated_files/i2c.c: 270:                 p_i2c_trb_current = i2c_object.pTrHead-
      +                          >ptrb_list;
 14614  044F  0858               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 14615  0450  0086               	movwf	6
 14616  0451  3001               	movlw	1	; select bank2/3
 14617  0452  0087               	movwf	7
 14618  0453  3001               	movlw	1	; select bank2/3
 14619  0454  3F41               	moviw [1]fsr1
 14620  0455  00E6               	movwf	_p_i2c_trb_current^(0+256)
 14621                           
 14622                           ;mcc_generated_files/i2c.c: 272:                 i2c_object.pTrHead++;
 14623  0456  3004               	movlw	4
 14624  0457  00F3               	movwf	??_I2C_ISR
 14625  0458  0873               	movf	??_I2C_ISR,w
 14626  0459  07D8               	addwf	(low ((_i2c_object| (0+256)+1)))^0,f
 14627                           
 14628                           ;mcc_generated_files/i2c.c: 275:                 if(i2c_object.pTrHead == (i2c_tr_queue 
      +                          + 1))
 14629  045A  0858               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 14630  045B  3A6D               	xorlw	(low ((_i2c_tr_queue| (0+256)+4)))& (0+255)
 14631  045C  1D03               	skipz
 14632  045D  2C62               	goto	i1l5418
 14633                           
 14634                           ;mcc_generated_files/i2c.c: 276:                 {;mcc_generated_files/i2c.c: 278:      
      +                                         i2c_object.pTrHead = i2c_tr_queue;
 14635  045E  3069               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
 14636  045F  00F3               	movwf	??_I2C_ISR
 14637  0460  0873               	movf	??_I2C_ISR,w
 14638  0461  00D8               	movwf	(low ((_i2c_object| (0+256)+1)))^0
 14639  0462                     i1l5418:	
 14640                           
 14641                           ;mcc_generated_files/i2c.c: 283:                 i2c_object.trStatus.s.full = 0;
 14642  0462  1059               	bcf	(_i2c_object^(0+256)+2),0
 14643                           
 14644                           ;mcc_generated_files/i2c.c: 286:                 if(i2c_object.pTrHead == i2c_object.pTr
      +                          Tail)
 14645  0463  0858               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 14646  0464  0657               	xorwf	_i2c_object^(0+256),w
 14647  0465  1903               	btfsc	3,2
 14648                           
 14649                           ;mcc_generated_files/i2c.c: 287:                 {;mcc_generated_files/i2c.c: 289:      
      +                                         i2c_object.trStatus.s.empty = 1;
 14650  0466  14D9               	bsf	(_i2c_object^(0+256)+2),1
 14651                           
 14652                           ;mcc_generated_files/i2c.c: 293:                 SSP1CON2bits.SEN = 1;
 14653                           
 14654                           ;mcc_generated_files/i2c.c: 290:                 }
 14655  0467  0024               	movlb	4	; select bank4
 14656  0468  1416               	bsf	22,0	;volatile
 14657  0469                     i1l5422:	
 14658                           
 14659                           ;mcc_generated_files/i2c.c: 296:                 i2c_state = S_MASTER_SEND_ADDR;
 14660  0469  3002               	movlw	2
 14661  046A  00F3               	movwf	??_I2C_ISR
 14662  046B  0873               	movf	??_I2C_ISR,w
 14663  046C  0022               	movlb	2	; select bank2
 14664  046D  00E8               	movwf	_i2c_state^(0+256)
 14665  046E  0008               	return
 14666  046F                     i1l495:	
 14667                           ;mcc_generated_files/i2c.c: 301:         case S_MASTER_RESTART:
 14668                           
 14669  046F  2CF2               	goto	i1l516
 14670  0470                     i1l496:	
 14671                           ;mcc_generated_files/i2c.c: 313:         case S_MASTER_SEND_ADDR_10BIT_LSB:
 14672                           
 14673                           ;mcc_generated_files/i2c.c: 306:             SSP1CON2bits.RSEN = 1;
 14674                           
 14675                           
 14676                           ;mcc_generated_files/i2c.c: 315:             if(SSP1CON2bits.ACKSTAT)
 14677  0470  0024               	movlb	4	; select bank4
 14678  0471  1F16               	btfss	22,6	;volatile
 14679  0472  2C7C               	goto	i1l5430
 14680                           
 14681                           ;mcc_generated_files/i2c.c: 316:             {;mcc_generated_files/i2c.c: 317:          
      +                                 i2c_object.i2cErrors++;
 14682  0473  3001               	movlw	1
 14683  0474  00F3               	movwf	??_I2C_ISR
 14684  0475  0873               	movf	??_I2C_ISR,w
 14685  0476  0022               	movlb	2	; select bank2
 14686  0477  07DB               	addwf	(_i2c_object^(0+256)+4),f
 14687                           
 14688                           ;mcc_generated_files/i2c.c: 318:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 14689  0478  3004               	movlw	4
 14690  0479  319A  2239         	fcall	_I2C_Stop
 14691                           
 14692                           ;mcc_generated_files/i2c.c: 319:             }
 14693  047B  0008               	return
 14694  047C                     i1l5430:	
 14695                           
 14696                           ;mcc_generated_files/i2c.c: 321:             {;mcc_generated_files/i2c.c: 323:          
      +                                 SSP1BUF = (i2c_address >> 1) & 0x00FF;
 14697  047C  087A               	movf	I2C_ISR@i2c_address+1,w
 14698  047D  00F4               	movwf	??_I2C_ISR+1
 14699  047E  0879               	movf	I2C_ISR@i2c_address,w
 14700  047F  00F3               	movwf	??_I2C_ISR
 14701  0480  36F4               	lsrf	??_I2C_ISR+1,f
 14702  0481  0CF3               	rrf	??_I2C_ISR,f
 14703  0482  0873               	movf	??_I2C_ISR,w
 14704  0483  0091               	movwf	17	;volatile
 14705                           
 14706                           ;mcc_generated_files/i2c.c: 326:                 if(i2c_address & 0x01)
 14707  0484  1C79               	btfss	I2C_ISR@i2c_address,0
 14708  0485  2C8C               	goto	i1l5436
 14709                           
 14710                           ;mcc_generated_files/i2c.c: 327:                 {;mcc_generated_files/i2c.c: 330:      
      +                                         i2c_state = S_MASTER_10BIT_RESTART;
 14711  0486  300B               	movlw	11
 14712  0487  00F3               	movwf	??_I2C_ISR
 14713  0488  0873               	movf	??_I2C_ISR,w
 14714  0489  0022               	movlb	2	; select bank2
 14715  048A  00E8               	movwf	_i2c_state^(0+256)
 14716                           
 14717                           ;mcc_generated_files/i2c.c: 331:                 }
 14718  048B  0008               	return
 14719  048C                     i1l5436:	
 14720                           
 14721                           ;mcc_generated_files/i2c.c: 333:                 {;mcc_generated_files/i2c.c: 335:      
      +                                         i2c_state = S_MASTER_SEND_DATA;
 14722  048C  3003               	movlw	3
 14723  048D  00F3               	movwf	??_I2C_ISR
 14724  048E  0873               	movf	??_I2C_ISR,w
 14725  048F  0022               	movlb	2	; select bank2
 14726  0490  00E8               	movwf	_i2c_state^(0+256)
 14727  0491  0008               	return
 14728  0492                     i1l501:	
 14729                           ;mcc_generated_files/i2c.c: 341:         case S_MASTER_10BIT_RESTART:
 14730                           
 14731                           
 14732                           ;mcc_generated_files/i2c.c: 343:             if(SSP1CON2bits.ACKSTAT)
 14733  0492  0024               	movlb	4	; select bank4
 14734  0493  1F16               	btfss	22,6	;volatile
 14735  0494  2C9E               	goto	i1l502
 14736                           
 14737                           ;mcc_generated_files/i2c.c: 344:             {;mcc_generated_files/i2c.c: 345:          
      +                                 i2c_object.i2cErrors++;
 14738  0495  3001               	movlw	1
 14739  0496  00F3               	movwf	??_I2C_ISR
 14740  0497  0873               	movf	??_I2C_ISR,w
 14741  0498  0022               	movlb	2	; select bank2
 14742  0499  07DB               	addwf	(_i2c_object^(0+256)+4),f
 14743                           
 14744                           ;mcc_generated_files/i2c.c: 346:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 14745  049A  3004               	movlw	4
 14746  049B  319A  2239         	fcall	_I2C_Stop
 14747                           
 14748                           ;mcc_generated_files/i2c.c: 347:             }
 14749  049D  0008               	return
 14750  049E                     i1l502:	
 14751                           ;mcc_generated_files/i2c.c: 348:             else
 14752                           
 14753                           
 14754                           ;mcc_generated_files/i2c.c: 349:             {;mcc_generated_files/i2c.c: 352:          
      +                                 SSP1CON2bits.RSEN = 1;
 14755  049E  1496               	bsf	22,1	;volatile
 14756                           
 14757                           ;mcc_generated_files/i2c.c: 356:                 i2c_address = 0x00F0 | ((i2c_address >>
      +                           8) & 0x0006);
 14758  049F  3006               	movlw	6
 14759  04A0  057A               	andwf	I2C_ISR@i2c_address+1,w
 14760  04A1  00F3               	movwf	??_I2C_ISR
 14761  04A2  30F0               	movlw	240
 14762  04A3  0473               	iorwf	??_I2C_ISR,w
 14763  04A4  00F9               	movwf	I2C_ISR@i2c_address
 14764  04A5  3000               	movlw	0
 14765  04A6  00FA               	movwf	I2C_ISR@i2c_address+1
 14766                           
 14767                           ;mcc_generated_files/i2c.c: 359:                 i2c_address |= 0x0001;
 14768  04A7  1479               	bsf	I2C_ISR@i2c_address,0
 14769                           
 14770                           ;mcc_generated_files/i2c.c: 362:                 i2c_10bit_address_restart = 1;
 14771  04A8  0022               	movlb	2	; select bank2
 14772  04A9  01E3               	clrf	I2C_ISR@i2c_10bit_address_restart^(0+256)
 14773  04AA  0AE3               	incf	I2C_ISR@i2c_10bit_address_restart^(0+256),f
 14774  04AB  2C69               	goto	i1l5422
 14775  04AC                     i1l5450:	
 14776                           
 14777                           ;mcc_generated_files/i2c.c: 383:             if(i2c_10bit_address_restart != 1)
 14778  04AC  0363               	decf	I2C_ISR@i2c_10bit_address_restart^(0+256),w
 14779  04AD  1903               	btfsc	3,2
 14780  04AE  2CC7               	goto	i1l5468
 14781                           
 14782                           ;mcc_generated_files/i2c.c: 384:             {;mcc_generated_files/i2c.c: 386:          
      +                                 i2c_address = p_i2c_trb_current->address;
 14783  04AF  0866               	movf	_p_i2c_trb_current^(0+256),w
 14784  04B0  0086               	movwf	6
 14785  04B1  3001               	movlw	1	; select bank2/3
 14786  04B2  0087               	movwf	7
 14787  04B3  3F40               	moviw [0]fsr1
 14788  04B4  00F9               	movwf	I2C_ISR@i2c_address
 14789  04B5  3F41               	moviw [1]fsr1
 14790  04B6  00FA               	movwf	I2C_ISR@i2c_address+1
 14791                           
 14792                           ;mcc_generated_files/i2c.c: 387:                 pi2c_buf_ptr = p_i2c_trb_current->pbuff
      +                          er;
 14793  04B7  0866               	movf	_p_i2c_trb_current^(0+256),w
 14794  04B8  3E03               	addlw	3
 14795  04B9  0086               	movwf	6
 14796  04BA  3001               	movlw	1	; select bank2/3
 14797  04BB  0087               	movwf	7
 14798  04BC  3F40               	moviw [0]fsr1
 14799  04BD  00E0               	movwf	I2C_ISR@pi2c_buf_ptr^(0+256)
 14800  04BE  3F41               	moviw [1]fsr1
 14801  04BF  00E1               	movwf	(I2C_ISR@pi2c_buf_ptr+1)^(0+256)
 14802                           
 14803                           ;mcc_generated_files/i2c.c: 388:                 i2c_bytes_left = p_i2c_trb_current->len
      +                          gth;
 14804  04C0  0866               	movf	_p_i2c_trb_current^(0+256),w
 14805  04C1  0086               	movwf	6
 14806  04C2  3001               	movlw	1	; select bank2/3
 14807  04C3  0087               	movwf	7
 14808  04C4  3001               	movlw	1	; select bank2/3
 14809  04C5  3F42               	moviw [2]fsr1
 14810  04C6  00E4               	movwf	I2C_ISR@i2c_bytes_left^(0+256)
 14811  04C7                     i1l5468:	
 14812                           
 14813                           ;mcc_generated_files/i2c.c: 412:             {;mcc_generated_files/i2c.c: 414:          
      +                                 SSP1BUF = i2c_address;
 14814  04C7  0879               	movf	I2C_ISR@i2c_address,w
 14815  04C8  0024               	movlb	4	; select bank4
 14816  04C9  0091               	movwf	17	;volatile
 14817                           
 14818                           ;mcc_generated_files/i2c.c: 415:                 if(i2c_address & 0x01)
 14819  04CA  1C79               	btfss	I2C_ISR@i2c_address,0
 14820  04CB  2C8C               	goto	i1l5436
 14821                           
 14822                           ;mcc_generated_files/i2c.c: 416:                 {;mcc_generated_files/i2c.c: 418:      
      +                                         i2c_state = S_MASTER_ACK_ADDR;
 14823  04CC  3005               	movlw	5
 14824  04CD  00F3               	movwf	??_I2C_ISR
 14825  04CE  0873               	movf	??_I2C_ISR,w
 14826  04CF  0022               	movlb	2	; select bank2
 14827  04D0  00E8               	movwf	_i2c_state^(0+256)
 14828                           
 14829                           ;mcc_generated_files/i2c.c: 419:                 }
 14830  04D1  0008               	return
 14831  04D2                     i1l512:	
 14832                           ;mcc_generated_files/i2c.c: 428:         case S_MASTER_SEND_DATA:
 14833                           
 14834                           
 14835                           ;mcc_generated_files/i2c.c: 431:             if(SSP1CON2bits.ACKSTAT)
 14836  04D2  0024               	movlb	4	; select bank4
 14837  04D3  1F16               	btfss	22,6	;volatile
 14838  04D4  2CE0               	goto	i1l5482
 14839                           
 14840                           ;mcc_generated_files/i2c.c: 432:             {;mcc_generated_files/i2c.c: 434:          
      +                                 i2c_object.i2cErrors++;
 14841  04D5  3001               	movlw	1
 14842  04D6  00F3               	movwf	??_I2C_ISR
 14843  04D7  0873               	movf	??_I2C_ISR,w
 14844  04D8  0022               	movlb	2	; select bank2
 14845  04D9  07DB               	addwf	(_i2c_object^(0+256)+4),f
 14846                           
 14847                           ;mcc_generated_files/i2c.c: 437:                 SSP1CON2bits.ACKSTAT = 0;
 14848  04DA  0024               	movlb	4	; select bank4
 14849  04DB  1316               	bcf	22,6	;volatile
 14850                           
 14851                           ;mcc_generated_files/i2c.c: 440:                 I2C_Stop(I2C_DATA_NO_ACK);
 14852  04DC  3005               	movlw	5
 14853  04DD  319A  2239         	fcall	_I2C_Stop
 14854                           
 14855                           ;mcc_generated_files/i2c.c: 442:             }
 14856  04DF  0008               	return
 14857  04E0                     i1l5482:	
 14858                           
 14859                           ;mcc_generated_files/i2c.c: 444:             {;mcc_generated_files/i2c.c: 446:          
      +                                 if(i2c_bytes_left-- == 0U)
 14860  04E0  3001               	movlw	1
 14861  04E1  0022               	movlb	2	; select bank2
 14862  04E2  02E4               	subwf	I2C_ISR@i2c_bytes_left^(0+256),f
 14863  04E3  0A64               	incf	I2C_ISR@i2c_bytes_left^(0+256),w
 14864  04E4  1D03               	btfss	3,2
 14865  04E5  2CF5               	goto	i1l5490
 14866                           
 14867                           ;mcc_generated_files/i2c.c: 447:                 {;mcc_generated_files/i2c.c: 451:      
      +                                         p_i2c_trb_current++;
 14868  04E6  3005               	movlw	5
 14869  04E7  00F3               	movwf	??_I2C_ISR
 14870  04E8  0873               	movf	??_I2C_ISR,w
 14871  04E9  07E6               	addwf	_p_i2c_trb_current^(0+256),f
 14872                           
 14873                           ;mcc_generated_files/i2c.c: 454:                     if(--i2c_trb_count == 0)
 14874  04EA  3001               	movlw	1
 14875  04EB  02E7               	subwf	_i2c_trb_count^(0+256),f
 14876  04EC  1D03               	btfss	3,2
 14877  04ED  2CF2               	goto	i1l516
 14878                           
 14879                           ;mcc_generated_files/i2c.c: 455:                     {;mcc_generated_files/i2c.c: 456:  
      +                                                 I2C_Stop(I2C_MESSAGE_COMPLETE);
 14880  04EE  3000               	movlw	0
 14881  04EF  319A  2239         	fcall	_I2C_Stop
 14882                           
 14883                           ;mcc_generated_files/i2c.c: 457:                     }
 14884  04F1  0008               	return
 14885  04F2                     i1l516:	
 14886                           ;mcc_generated_files/i2c.c: 458:                     else
 14887                           
 14888                           
 14889                           ;mcc_generated_files/i2c.c: 459:                     {;mcc_generated_files/i2c.c: 466:  
      +                                                 SSP1CON2bits.RSEN = 1;
 14890  04F2  0024               	movlb	4	; select bank4
 14891  04F3  1496               	bsf	22,1	;volatile
 14892  04F4  2C69               	goto	i1l5422
 14893  04F5                     i1l5490:	
 14894                           
 14895                           ;mcc_generated_files/i2c.c: 474:                 {;mcc_generated_files/i2c.c: 476:      
      +                                         SSP1BUF = *pi2c_buf_ptr++;
 14896  04F5  0860               	movf	I2C_ISR@pi2c_buf_ptr^(0+256),w
 14897  04F6  0086               	movwf	6
 14898  04F7  0861               	movf	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),w
 14899  04F8  0087               	movwf	7
 14900  04F9  0801               	movf	1,w
 14901  04FA  0024               	movlb	4	; select bank4
 14902  04FB  0091               	movwf	17	;volatile
 14903  04FC  3001               	movlw	1
 14904  04FD  0022               	movlb	2	; select bank2
 14905  04FE  07E0               	addwf	I2C_ISR@pi2c_buf_ptr^(0+256),f
 14906  04FF  3000               	movlw	0
 14907  0500  3DE1               	addwfc	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),f
 14908  0501  0008               	return
 14909  0502                     i1l519:	
 14910                           ;mcc_generated_files/i2c.c: 481:         case S_MASTER_ACK_ADDR:
 14911                           
 14912                           
 14913                           ;mcc_generated_files/i2c.c: 484:             if(SSP1CON2bits.ACKSTAT)
 14914  0502  0024               	movlb	4	; select bank4
 14915  0503  1F16               	btfss	22,6	;volatile
 14916  0504  2D10               	goto	i1l520
 14917                           
 14918                           ;mcc_generated_files/i2c.c: 485:             {;mcc_generated_files/i2c.c: 488:          
      +                                 i2c_object.i2cErrors++;
 14919  0505  3001               	movlw	1
 14920  0506  00F3               	movwf	??_I2C_ISR
 14921  0507  0873               	movf	??_I2C_ISR,w
 14922  0508  0022               	movlb	2	; select bank2
 14923  0509  07DB               	addwf	(_i2c_object^(0+256)+4),f
 14924                           
 14925                           ;mcc_generated_files/i2c.c: 491:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 14926  050A  3004               	movlw	4
 14927  050B  319A  2239         	fcall	_I2C_Stop
 14928                           
 14929                           ;mcc_generated_files/i2c.c: 494:                 SSP1CON2bits.ACKSTAT = 0;
 14930  050D  0024               	movlb	4	; select bank4
 14931  050E  1316               	bcf	22,6	;volatile
 14932                           
 14933                           ;mcc_generated_files/i2c.c: 495:             }
 14934  050F  0008               	return
 14935  0510                     i1l520:	
 14936                           ;mcc_generated_files/i2c.c: 496:             else
 14937                           
 14938                           
 14939                           ;mcc_generated_files/i2c.c: 497:             {;mcc_generated_files/i2c.c: 498:          
      +                                 SSP1CON2bits.RCEN = 1;
 14940  0510  1596               	bsf	22,3	;volatile
 14941                           
 14942                           ;mcc_generated_files/i2c.c: 499:                 i2c_state = S_MASTER_ACK_RCV_DATA;
 14943  0511  3008               	movlw	8
 14944  0512  00F3               	movwf	??_I2C_ISR
 14945  0513  0873               	movf	??_I2C_ISR,w
 14946  0514  0022               	movlb	2	; select bank2
 14947  0515  00E8               	movwf	_i2c_state^(0+256)
 14948  0516  0008               	return
 14949  0517                     i1l5502:	
 14950                           
 14951                           ;mcc_generated_files/i2c.c: 508:             i2c_state = S_MASTER_ACK_RCV_DATA;
 14952  0517  3008               	movlw	8
 14953  0518  00F3               	movwf	??_I2C_ISR
 14954  0519  0873               	movf	??_I2C_ISR,w
 14955  051A  00E8               	movwf	_i2c_state^(0+256)
 14956                           
 14957                           ;mcc_generated_files/i2c.c: 511:             SSP1CON2bits.RCEN = 1;
 14958  051B  0024               	movlb	4	; select bank4
 14959  051C  1596               	bsf	22,3	;volatile
 14960                           
 14961                           ;mcc_generated_files/i2c.c: 513:             break;
 14962  051D  0008               	return
 14963  051E                     i1l5506:	
 14964                           
 14965                           ;mcc_generated_files/i2c.c: 518:             *pi2c_buf_ptr++ = SSP1BUF;
 14966  051E  0860               	movf	I2C_ISR@pi2c_buf_ptr^(0+256),w
 14967  051F  0086               	movwf	6
 14968  0520  0861               	movf	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),w
 14969  0521  0087               	movwf	7
 14970  0522  0024               	movlb	4	; select bank4
 14971  0523  0811               	movf	17,w	;volatile
 14972  0524  0081               	movwf	1
 14973  0525  3001               	movlw	1
 14974  0526  0022               	movlb	2	; select bank2
 14975  0527  07E0               	addwf	I2C_ISR@pi2c_buf_ptr^(0+256),f
 14976  0528  3000               	movlw	0
 14977  0529  3DE1               	addwfc	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),f
 14978                           
 14979                           ;mcc_generated_files/i2c.c: 521:             if(--i2c_bytes_left)
 14980  052A  3001               	movlw	1
 14981  052B  02E4               	subwf	I2C_ISR@i2c_bytes_left^(0+256),f
 14982  052C  1903               	btfsc	3,2
 14983  052D  2D36               	goto	i1l524
 14984                           
 14985                           ;mcc_generated_files/i2c.c: 522:             {;mcc_generated_files/i2c.c: 528:          
      +                                 SSP1CON2bits.ACKDT = 0;
 14986  052E  0024               	movlb	4	; select bank4
 14987  052F  1296               	bcf	22,5	;volatile
 14988                           
 14989                           ;mcc_generated_files/i2c.c: 531:                 i2c_state = S_MASTER_RCV_DATA;
 14990  0530  3006               	movlw	6
 14991  0531  00F3               	movwf	??_I2C_ISR
 14992  0532  0873               	movf	??_I2C_ISR,w
 14993  0533  0022               	movlb	2	; select bank2
 14994  0534  00E8               	movwf	_i2c_state^(0+256)
 14995                           
 14996                           ;mcc_generated_files/i2c.c: 532:             }
 14997  0535  2D3A               	goto	i1l5518
 14998  0536                     i1l524:	
 14999                           ;mcc_generated_files/i2c.c: 533:             else
 15000                           
 15001                           
 15002                           ;mcc_generated_files/i2c.c: 534:             {;mcc_generated_files/i2c.c: 538:          
      +                                 SSP1CON2bits.ACKDT = 1;
 15003  0536  0024               	movlb	4	; select bank4
 15004  0537  1696               	bsf	22,5	;volatile
 15005                           
 15006                           ;mcc_generated_files/i2c.c: 540:                 I2C_FunctionComplete();
 15007  0538  3199  21A9         	fcall	_I2C_FunctionComplete
 15008  053A                     i1l5518:	
 15009                           
 15010                           ;mcc_generated_files/i2c.c: 544:             SSP1CON2bits.ACKEN = 1;
 15011  053A  0024               	movlb	4	; select bank4
 15012  053B  1616               	bsf	22,4	;volatile
 15013                           
 15014                           ;mcc_generated_files/i2c.c: 545:             break;
 15015  053C  0008               	return
 15016  053D                     i1l5520:	
 15017                           
 15018                           ;mcc_generated_files/i2c.c: 551:             I2C_Stop(I2C_MESSAGE_COMPLETE);
 15019  053D  3000               	movlw	0
 15020  053E  319A  2239         	fcall	_I2C_Stop
 15021                           
 15022                           ;mcc_generated_files/i2c.c: 552:             break;
 15023  0540  0008               	return
 15024  0541                     i1l5522:	
 15025                           
 15026                           ;mcc_generated_files/i2c.c: 558:             i2c_object.i2cErrors++;
 15027  0541  3001               	movlw	1
 15028  0542  00F3               	movwf	??_I2C_ISR
 15029  0543  0873               	movf	??_I2C_ISR,w
 15030  0544  07DB               	addwf	(_i2c_object^(0+256)+4),f
 15031                           
 15032                           ;mcc_generated_files/i2c.c: 559:             I2C_Stop(I2C_LOST_STATE);
 15033  0545  3006               	movlw	6
 15034  0546  319A  2239         	fcall	_I2C_Stop
 15035                           
 15036                           ;mcc_generated_files/i2c.c: 560:             break;
 15037  0548  0008               	return
 15038  0549                     i1l5528:	
 15039  0549  0022               	movlb	2	; select bank2
 15040  054A  0868               	movf	_i2c_state^(0+256),w
 15041  054B  00F3               	movwf	??_I2C_ISR
 15042  054C  01F4               	clrf	??_I2C_ISR+1
 15043                           
 15044                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15045                           ; Switch size 1, requested type "simple"
 15046                           ; Number of cases is 1, Range of values is 0 to 0
 15047                           ; switch strategies available:
 15048                           ; Name         Instructions Cycles
 15049                           ; simple_byte            4     3 (average)
 15050                           ; direct_byte            8     6 (fixed)
 15051                           ; jumptable            260     6 (fixed)
 15052                           ;	Chosen strategy is simple_byte
 15053  054D  0874               	movf	??_I2C_ISR+1,w
 15054  054E  3A00               	xorlw	0	; case 0
 15055  054F  1903               	skipnz
 15056  0550  2D52               	goto	i1l5922
 15057  0551  2D41               	goto	i1l5522
 15058  0552                     i1l5922:	
 15059                           
 15060                           ; Switch size 1, requested type "simple"
 15061                           ; Number of cases is 11, Range of values is 0 to 11
 15062                           ; switch strategies available:
 15063                           ; Name         Instructions Cycles
 15064                           ; direct_byte           30     6 (fixed)
 15065                           ; simple_byte           34    18 (average)
 15066                           ; jumptable            260     6 (fixed)
 15067                           ;	Chosen strategy is simple_byte
 15068  0552  0873               	movf	??_I2C_ISR,w
 15069  0553  3A00               	xorlw	0	; case 0
 15070  0554  1903               	skipnz
 15071  0555  2C41               	goto	i1l490
 15072  0556  3A01               	xorlw	1	; case 1
 15073  0557  1903               	skipnz
 15074  0558  2C6F               	goto	i1l495
 15075  0559  3A03               	xorlw	3	; case 2
 15076  055A  1903               	skipnz
 15077  055B  2CAC               	goto	i1l5450
 15078  055C  3A01               	xorlw	1	; case 3
 15079  055D  1903               	skipnz
 15080  055E  2CD2               	goto	i1l512
 15081  055F  3A07               	xorlw	7	; case 4
 15082  0560  1903               	skipnz
 15083  0561  2D3D               	goto	i1l5520
 15084  0562  3A01               	xorlw	1	; case 5
 15085  0563  1903               	skipnz
 15086  0564  2D02               	goto	i1l519
 15087  0565  3A03               	xorlw	3	; case 6
 15088  0566  1903               	skipnz
 15089  0567  2D17               	goto	i1l5502
 15090  0568  3A01               	xorlw	1	; case 7
 15091  0569  1903               	skipnz
 15092  056A  2D3D               	goto	i1l5520
 15093  056B  3A0F               	xorlw	15	; case 8
 15094  056C  1903               	skipnz
 15095  056D  2D1E               	goto	i1l5506
 15096  056E  3A02               	xorlw	2	; case 10
 15097  056F  1903               	skipnz
 15098  0570  2C70               	goto	i1l496
 15099  0571  3A01               	xorlw	1	; case 11
 15100  0572  1903               	skipnz
 15101  0573  2C92               	goto	i1l501
 15102  0574  2D41               	goto	i1l5522
 15103  0575  0008               	return
 15104  0576                     __end_of_I2C_ISR:	
 15105                           
 15106                           	psect	text68
 15107  1A39                     __ptext68:	
 15108 ;; *************** function _I2C_Stop *****************
 15109 ;; Defined at:
 15110 ;;		line 583 in file "mcc_generated_files/i2c.c"
 15111 ;; Parameters:    Size  Location     Type
 15112 ;;  completion_c    1    wreg     enum E9631
 15113 ;; Auto vars:     Size  Location     Type
 15114 ;;  completion_c    1    2[COMMON] enum E9631
 15115 ;; Return value:  Size  Location     Type
 15116 ;;                  1    wreg      void 
 15117 ;; Registers used:
 15118 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15119 ;; Tracked objects:
 15120 ;;		On entry : 19/2
 15121 ;;		On exit  : 1F/2
 15122 ;;		Unchanged: 0/0
 15123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;Total ram usage:        3 bytes
 15129 ;; Hardware stack levels used:    1
 15130 ;; This function calls:
 15131 ;;		Nothing
 15132 ;; This function is called by:
 15133 ;;		_I2C_ISR
 15134 ;; This function uses a non-reentrant model
 15135 ;;
 15136                           
 15137                           
 15138                           ;psect for function _I2C_Stop
 15139  1A39                     _I2C_Stop:	
 15140                           
 15141                           ;incstack = 0
 15142                           ; Regs used in _I2C_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 15143                           ;I2C_Stop@completion_code stored from wreg
 15144  1A39  00F2               	movwf	I2C_Stop@completion_code
 15145                           
 15146                           ;mcc_generated_files/i2c.c: 583: void I2C_Stop(I2C_MESSAGE_STATUS completion_code);mcc_g
      +                          enerated_files/i2c.c: 584: {;mcc_generated_files/i2c.c: 586:     SSP1CON2bits.PEN = 1;
 15147  1A3A  0024               	movlb	4	; select bank4
 15148  1A3B  1516               	bsf	22,2	;volatile
 15149                           
 15150                           ;mcc_generated_files/i2c.c: 589:     if (p_i2c_current->pTrFlag != ((void*)0))
 15151  1A3C  0022               	movlb	2	; select bank2
 15152  1A3D  0865               	movf	_p_i2c_current^(0+256),w
 15153  1A3E  3E02               	addlw	2
 15154  1A3F  0086               	movwf	6
 15155  1A40  3001               	movlw	1	; select bank2/3
 15156  1A41  0087               	movwf	7
 15157  1A42  0016               	moviw fsr1++
 15158  1A43  0401               	iorwf	1,w
 15159  1A44  1903               	btfsc	3,2
 15160  1A45  2A55               	goto	i1l5154
 15161                           
 15162                           ;mcc_generated_files/i2c.c: 590:     {;mcc_generated_files/i2c.c: 592:         *(p_i2c_c
      +                          urrent->pTrFlag) = completion_code;
 15163  1A46  0865               	movf	_p_i2c_current^(0+256),w
 15164  1A47  3E02               	addlw	2
 15165  1A48  0086               	movwf	6
 15166  1A49  3001               	movlw	1	; select bank2/3
 15167  1A4A  0087               	movwf	7
 15168  1A4B  3F40               	moviw [0]fsr1
 15169  1A4C  00F0               	movwf	??_I2C_Stop
 15170  1A4D  3F41               	moviw [1]fsr1
 15171  1A4E  00F1               	movwf	??_I2C_Stop+1
 15172  1A4F  0870               	movf	??_I2C_Stop,w
 15173  1A50  0086               	movwf	6
 15174  1A51  0871               	movf	??_I2C_Stop+1,w
 15175  1A52  0087               	movwf	7
 15176  1A53  0872               	movf	I2C_Stop@completion_code,w
 15177  1A54  0081               	movwf	1
 15178  1A55                     i1l5154:	
 15179                           
 15180                           ;mcc_generated_files/i2c.c: 596:     i2c_state = S_MASTER_IDLE;
 15181  1A55  01E8               	clrf	_i2c_state^(0+256)
 15182  1A56  0008               	return
 15183  1A57                     __end_of_I2C_Stop:	
 15184                           
 15185                           	psect	text69
 15186  19A9                     __ptext69:	
 15187 ;; *************** function _I2C_FunctionComplete *****************
 15188 ;; Defined at:
 15189 ;;		line 565 in file "mcc_generated_files/i2c.c"
 15190 ;; Parameters:    Size  Location     Type
 15191 ;;		None
 15192 ;; Auto vars:     Size  Location     Type
 15193 ;;		None
 15194 ;; Return value:  Size  Location     Type
 15195 ;;                  1    wreg      void 
 15196 ;; Registers used:
 15197 ;;		wreg, status,2, status,0
 15198 ;; Tracked objects:
 15199 ;;		On entry : 1F/4
 15200 ;;		On exit  : 1F/2
 15201 ;;		Unchanged: 0/0
 15202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;Total ram usage:        1 bytes
 15208 ;; Hardware stack levels used:    1
 15209 ;; This function calls:
 15210 ;;		Nothing
 15211 ;; This function is called by:
 15212 ;;		_I2C_ISR
 15213 ;; This function uses a non-reentrant model
 15214 ;;
 15215                           
 15216                           
 15217                           ;psect for function _I2C_FunctionComplete
 15218  19A9                     _I2C_FunctionComplete:	
 15219                           
 15220                           ;mcc_generated_files/i2c.c: 569:     p_i2c_trb_current++;
 15221                           
 15222                           ;incstack = 0
 15223                           ; Regs used in _I2C_FunctionComplete: [wreg+status,2+status,0]
 15224  19A9  3005               	movlw	5
 15225  19AA  00F0               	movwf	??_I2C_FunctionComplete
 15226  19AB  0870               	movf	??_I2C_FunctionComplete,w
 15227  19AC  0022               	movlb	2	; select bank2
 15228  19AD  07E6               	addwf	_p_i2c_trb_current^(0+256),f
 15229                           
 15230                           ;mcc_generated_files/i2c.c: 572:     if(--i2c_trb_count == 0)
 15231  19AE  3001               	movlw	1
 15232  19AF  02E7               	subwf	_i2c_trb_count^(0+256),f
 15233  19B0  1D03               	btfss	3,2
 15234  19B1  29B7               	goto	i1l531
 15235                           
 15236                           ;mcc_generated_files/i2c.c: 573:     {;mcc_generated_files/i2c.c: 574:         i2c_state
      +                           = S_MASTER_SEND_STOP;
 15237  19B2  3004               	movlw	4
 15238  19B3  00F0               	movwf	??_I2C_FunctionComplete
 15239  19B4  0870               	movf	??_I2C_FunctionComplete,w
 15240  19B5  00E8               	movwf	_i2c_state^(0+256)
 15241                           
 15242                           ;mcc_generated_files/i2c.c: 575:     }
 15243  19B6  0008               	return
 15244  19B7                     i1l531:	
 15245                           ;mcc_generated_files/i2c.c: 576:     else
 15246                           
 15247                           
 15248                           ;mcc_generated_files/i2c.c: 577:     {;mcc_generated_files/i2c.c: 578:         i2c_state
      +                           = S_MASTER_RESTART;
 15249  19B7  01E8               	clrf	_i2c_state^(0+256)
 15250  19B8  0AE8               	incf	_i2c_state^(0+256),f
 15251  19B9  0008               	return
 15252  19BA                     __end_of_I2C_FunctionComplete:	
 15253                           
 15254                           	psect	text70
 15255  1000                     __ptext70:	
 15256 ;; *************** function _I2C_BusCollisionISR *****************
 15257 ;; Defined at:
 15258 ;;		line 742 in file "mcc_generated_files/i2c.c"
 15259 ;; Parameters:    Size  Location     Type
 15260 ;;		None
 15261 ;; Auto vars:     Size  Location     Type
 15262 ;;		None
 15263 ;; Return value:  Size  Location     Type
 15264 ;;                  1    wreg      void 
 15265 ;; Registers used:
 15266 ;;		None
 15267 ;; Tracked objects:
 15268 ;;		On entry : 1F/0
 15269 ;;		On exit  : 1F/0
 15270 ;;		Unchanged: 0/0
 15271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;Total ram usage:        0 bytes
 15277 ;; Hardware stack levels used:    1
 15278 ;; This function calls:
 15279 ;;		Nothing
 15280 ;; This function is called by:
 15281 ;;		_INTERRUPT_InterruptManager
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           
 15286                           ;psect for function _I2C_BusCollisionISR
 15287  1000                     _I2C_BusCollisionISR:	
 15288                           
 15289                           ;mcc_generated_files/i2c.c: 745:  PIR2bits.BCL1IF = 0;
 15290                           
 15291                           ;incstack = 0
 15292                           ; Regs used in _I2C_BusCollisionISR: []
 15293  1000  1191               	bcf	17,3	;volatile
 15294  1001  0008               	return
 15295  1002                     __end_of_I2C_BusCollisionISR:	
 15296  007E                     btemp	set	126	;btemp
 15297  007E                     int$flags	set	126
 15298  007E                     wtemp0	set	126
 15299                           
 15300                           	psect	text29_split_1
 15301  0833                     L7:	
 15302  0833  0021               	movlb	1	; select bank1
 15303  0834  00C1               	movwf	_compensate_pressure$2549^(0+128)
 15304  0835  0020               	movlb	0	; select bank0
 15305  0836  0821               	movf	?___omul+1,w
 15306  0837  0021               	movlb	1	; select bank1
 15307  0838  00C2               	movwf	(_compensate_pressure$2549+1)^(0+128)
 15308  0839  0020               	movlb	0	; select bank0
 15309  083A  0822               	movf	?___omul+2,w
 15310  083B  0021               	movlb	1	; select bank1
 15311  083C  00C3               	movwf	(_compensate_pressure$2549+2)^(0+128)
 15312  083D  0020               	movlb	0	; select bank0
 15313  083E  0823               	movf	?___omul+3,w
 15314  083F  0021               	movlb	1	; select bank1
 15315  0840  00C4               	movwf	(_compensate_pressure$2549+3)^(0+128)
 15316  0841  0020               	movlb	0	; select bank0
 15317  0842  0824               	movf	?___omul+4,w
 15318  0843  0021               	movlb	1	; select bank1
 15319  0844  00C5               	movwf	(_compensate_pressure$2549+4)^(0+128)
 15320  0845  0020               	movlb	0	; select bank0
 15321  0846  0825               	movf	?___omul+5,w
 15322  0847  0021               	movlb	1	; select bank1
 15323  0848  00C6               	movwf	(_compensate_pressure$2549+5)^(0+128)
 15324  0849  0020               	movlb	0	; select bank0
 15325  084A  0826               	movf	?___omul+6,w
 15326  084B  0021               	movlb	1	; select bank1
 15327  084C  00C7               	movwf	(_compensate_pressure$2549+6)^(0+128)
 15328  084D  0020               	movlb	0	; select bank0
 15329  084E  0827               	movf	?___omul+7,w
 15330  084F  0021               	movlb	1	; select bank1
 15331  0850  00C8               	movwf	(_compensate_pressure$2549+7)^(0+128)
 15332                           
 15333                           ;BME280_driver/bme280.c: 1171:     var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 15334  0851  0841               	movf	_compensate_pressure$2549^(0+128),w
 15335  0852  0020               	movlb	0	; select bank0
 15336  0853  00A0               	movwf	___omul@multiplier
 15337  0854  0021               	movlb	1	; select bank1
 15338  0855  0842               	movf	(_compensate_pressure$2549+1)^(0+128),w
 15339  0856  0020               	movlb	0	; select bank0
 15340  0857  00A1               	movwf	___omul@multiplier+1
 15341  0858  0021               	movlb	1	; select bank1
 15342  0859  0843               	movf	(_compensate_pressure$2549+2)^(0+128),w
 15343  085A  0020               	movlb	0	; select bank0
 15344  085B  00A2               	movwf	___omul@multiplier+2
 15345  085C  0021               	movlb	1	; select bank1
 15346  085D  0844               	movf	(_compensate_pressure$2549+3)^(0+128),w
 15347  085E  0020               	movlb	0	; select bank0
 15348  085F  00A3               	movwf	___omul@multiplier+3
 15349  0860  0021               	movlb	1	; select bank1
 15350  0861  0845               	movf	(_compensate_pressure$2549+4)^(0+128),w
 15351  0862  0020               	movlb	0	; select bank0
 15352  0863  00A4               	movwf	___omul@multiplier+4
 15353  0864  0021               	movlb	1	; select bank1
 15354  0865  0846               	movf	(_compensate_pressure$2549+5)^(0+128),w
 15355  0866  0020               	movlb	0	; select bank0
 15356  0867  00A5               	movwf	___omul@multiplier+5
 15357  0868  0021               	movlb	1	; select bank1
 15358  0869  0847               	movf	(_compensate_pressure$2549+6)^(0+128),w
 15359  086A  0020               	movlb	0	; select bank0
 15360  086B  00A6               	movwf	___omul@multiplier+6
 15361  086C  0021               	movlb	1	; select bank1
 15362  086D  0848               	movf	(_compensate_pressure$2549+7)^(0+128),w
 15363  086E  0020               	movlb	0	; select bank0
 15364  086F  00A7               	movwf	___omul@multiplier+7
 15365  0870  0021               	movlb	1	; select bank1
 15366  0871  085D               	movf	compensate_pressure@var1^(0+128),w
 15367  0872  0020               	movlb	0	; select bank0
 15368  0873  00A8               	movwf	___omul@multiplicand
 15369  0874  0021               	movlb	1	; select bank1
 15370  0875  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 15371  0876  0020               	movlb	0	; select bank0
 15372  0877  00A9               	movwf	___omul@multiplicand+1
 15373  0878  0021               	movlb	1	; select bank1
 15374  0879  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 15375  087A  0020               	movlb	0	; select bank0
 15376  087B  00AA               	movwf	___omul@multiplicand+2
 15377  087C  0021               	movlb	1	; select bank1
 15378  087D  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 15379  087E  0020               	movlb	0	; select bank0
 15380  087F  00AB               	movwf	___omul@multiplicand+3
 15381  0880  0021               	movlb	1	; select bank1
 15382  0881  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 15383  0882  0020               	movlb	0	; select bank0
 15384  0883  00AC               	movwf	___omul@multiplicand+4
 15385  0884  0021               	movlb	1	; select bank1
 15386  0885  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 15387  0886  0020               	movlb	0	; select bank0
 15388  0887  00AD               	movwf	___omul@multiplicand+5
 15389  0888  0021               	movlb	1	; select bank1
 15390  0889  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 15391  088A  0020               	movlb	0	; select bank0
 15392  088B  00AE               	movwf	___omul@multiplicand+6
 15393  088C  0021               	movlb	1	; select bank1
 15394  088D  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 15395  088E  0020               	movlb	0	; select bank0
 15396  088F  00AF               	movwf	___omul@multiplicand+7
 15397  0890  319E  26DF  3188   	fcall	___omul
 15398  0893  0820               	movf	?___omul,w
 15399  0894  0021               	movlb	1	; select bank1
 15400  0895  00CD               	movwf	compensate_pressure@var2^(0+128)
 15401  0896  0020               	movlb	0	; select bank0
 15402  0897  0821               	movf	?___omul+1,w
 15403  0898  0021               	movlb	1	; select bank1
 15404  0899  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 15405  089A  0020               	movlb	0	; select bank0
 15406  089B  0822               	movf	?___omul+2,w
 15407  089C  0021               	movlb	1	; select bank1
 15408  089D  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 15409  089E  0020               	movlb	0	; select bank0
 15410  089F  0823               	movf	?___omul+3,w
 15411  08A0  0021               	movlb	1	; select bank1
 15412  08A1  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 15413  08A2  0020               	movlb	0	; select bank0
 15414  08A3  0824               	movf	?___omul+4,w
 15415  08A4  0021               	movlb	1	; select bank1
 15416  08A5  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 15417  08A6  0020               	movlb	0	; select bank0
 15418  08A7  0825               	movf	?___omul+5,w
 15419  08A8  0021               	movlb	1	; select bank1
 15420  08A9  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 15421  08AA  0020               	movlb	0	; select bank0
 15422  08AB  0826               	movf	?___omul+6,w
 15423  08AC  0021               	movlb	1	; select bank1
 15424  08AD  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 15425  08AE  0020               	movlb	0	; select bank0
 15426  08AF  0827               	movf	?___omul+7,w
 15427  08B0  0021               	movlb	1	; select bank1
 15428  08B1  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 15429                           
 15430                           ;BME280_driver/bme280.c: 1172:     var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) *
      +                           131072);
 15431  08B2  30CD               	movlw	low compensate_pressure@var2
 15432  08B3  0086               	movwf	6
 15433  08B4  3000               	movlw	high compensate_pressure@var2
 15434  08B5  0087               	movwf	7
 15435  08B6  3F40               	moviw [0]fsr1
 15436  08B7  0020               	movlb	0	; select bank0
 15437  08B8  00D6               	movwf	??_compensate_pressure
 15438  08B9  3F41               	moviw [1]fsr1
 15439  08BA  00D7               	movwf	??_compensate_pressure+1
 15440  08BB  3F42               	moviw [2]fsr1
 15441  08BC  00D8               	movwf	??_compensate_pressure+2
 15442  08BD  3F43               	moviw [3]fsr1
 15443  08BE  00D9               	movwf	??_compensate_pressure+3
 15444  08BF  3F44               	moviw [4]fsr1
 15445  08C0  00DA               	movwf	??_compensate_pressure+4
 15446  08C1  3F45               	moviw [5]fsr1
 15447  08C2  00DB               	movwf	??_compensate_pressure+5
 15448  08C3  3F46               	moviw [6]fsr1
 15449  08C4  00DC               	movwf	??_compensate_pressure+6
 15450  08C5  3F47               	moviw [7]fsr1
 15451  08C6  00DD               	movwf	??_compensate_pressure+7
 15452  08C7  0852               	movf	compensate_pressure@calib_data,w
 15453  08C8  3E0E               	addlw	14
 15454  08C9  0086               	movwf	6
 15455  08CA  3001               	movlw	1	; select bank2/3
 15456  08CB  0087               	movwf	7
 15457  08CC  3F40               	moviw [0]fsr1
 15458  08CD  00DE               	movwf	??_compensate_pressure+8
 15459  08CE  3F41               	moviw [1]fsr1
 15460  08CF  00DF               	movwf	??_compensate_pressure+9
 15461  08D0  085E               	movf	??_compensate_pressure+8,w
 15462  08D1  00A0               	movwf	___omul@multiplier
 15463  08D2  085F               	movf	??_compensate_pressure+9,w
 15464  08D3  00A1               	movwf	___omul@multiplier+1
 15465  08D4  0D89               	rlf	9,f
 15466  08D5  3B89               	subwfb	9,f
 15467  08D6  0989               	comf	9,f
 15468  08D7  00A2               	movwf	___omul@multiplier+2
 15469  08D8  00A3               	movwf	___omul@multiplier+3
 15470  08D9  00A4               	movwf	___omul@multiplier+4
 15471  08DA  00A5               	movwf	___omul@multiplier+5
 15472  08DB  00A6               	movwf	___omul@multiplier+6
 15473  08DC  00A7               	movwf	___omul@multiplier+7
 15474  08DD  0021               	movlb	1	; select bank1
 15475  08DE  085D               	movf	compensate_pressure@var1^(0+128),w
 15476  08DF  0020               	movlb	0	; select bank0
 15477  08E0  00A8               	movwf	___omul@multiplicand
 15478  08E1  0021               	movlb	1	; select bank1
 15479  08E2  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 15480  08E3  0020               	movlb	0	; select bank0
 15481  08E4  00A9               	movwf	___omul@multiplicand+1
 15482  08E5  0021               	movlb	1	; select bank1
 15483  08E6  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 15484  08E7  0020               	movlb	0	; select bank0
 15485  08E8  00AA               	movwf	___omul@multiplicand+2
 15486  08E9  0021               	movlb	1	; select bank1
 15487  08EA  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 15488  08EB  0020               	movlb	0	; select bank0
 15489  08EC  00AB               	movwf	___omul@multiplicand+3
 15490  08ED  0021               	movlb	1	; select bank1
 15491  08EE  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 15492  08EF  0020               	movlb	0	; select bank0
 15493  08F0  00AC               	movwf	___omul@multiplicand+4
 15494  08F1  0021               	movlb	1	; select bank1
 15495  08F2  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 15496  08F3  0020               	movlb	0	; select bank0
 15497  08F4  00AD               	movwf	___omul@multiplicand+5
 15498  08F5  0021               	movlb	1	; select bank1
 15499  08F6  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 15500  08F7  0020               	movlb	0	; select bank0
 15501  08F8  00AE               	movwf	___omul@multiplicand+6
 15502  08F9  0021               	movlb	1	; select bank1
 15503  08FA  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 15504  08FB  0020               	movlb	0	; select bank0
 15505  08FC  00AF               	movwf	___omul@multiplicand+7
 15506  08FD  319E  26DF  3188   	fcall	___omul
 15507  0900  3020               	movlw	low ?___omul
 15508  0901  0086               	movwf	6
 15509  0902  3000               	movlw	high ?___omul
 15510  0903  0087               	movwf	7
 15511  0904  3F40               	moviw [0]fsr1
 15512  0905  00E0               	movwf	??_compensate_pressure+10
 15513  0906  3F41               	moviw [1]fsr1
 15514  0907  00E1               	movwf	??_compensate_pressure+11
 15515  0908  3F42               	moviw [2]fsr1
 15516  0909  00E2               	movwf	??_compensate_pressure+12
 15517  090A  3F43               	moviw [3]fsr1
 15518  090B  00E3               	movwf	??_compensate_pressure+13
 15519  090C  3F44               	moviw [4]fsr1
 15520  090D  00E4               	movwf	??_compensate_pressure+14
 15521  090E  3F45               	moviw [5]fsr1
 15522  090F  00E5               	movwf	??_compensate_pressure+15
 15523  0910  3F46               	moviw [6]fsr1
 15524  0911  00E6               	movwf	??_compensate_pressure+16
 15525  0912  3F47               	moviw [7]fsr1
 15526  0913  00E7               	movwf	??_compensate_pressure+17
 15527  0914  3011               	movlw	17
 15528  0915                     u4985:	
 15529  0915  0020               	movlb	0	; select bank0
 15530  0916  35E0               	lslf	??_compensate_pressure+10,f
 15531  0917  0DE1               	rlf	??_compensate_pressure+11,f
 15532  0918  0DE2               	rlf	??_compensate_pressure+12,f
 15533  0919  0DE3               	rlf	??_compensate_pressure+13,f
 15534  091A  0DE4               	rlf	??_compensate_pressure+14,f
 15535  091B  0DE5               	rlf	??_compensate_pressure+15,f
 15536  091C  0DE6               	rlf	??_compensate_pressure+16,f
 15537  091D  0DE7               	rlf	??_compensate_pressure+17,f
 15538  091E  0B89               	decfsz	9,f
 15539  091F  2915               	goto	u4985
 15540  0920  0020               	movlb	0	; select bank0
 15541  0921  0860               	movf	??_compensate_pressure+10,w
 15542  0922  07D6               	addwf	??_compensate_pressure,f
 15543  0923  0861               	movf	??_compensate_pressure+11,w
 15544  0924  3DD7               	addwfc	??_compensate_pressure+1,f
 15545  0925  0862               	movf	??_compensate_pressure+12,w
 15546  0926  3DD8               	addwfc	??_compensate_pressure+2,f
 15547  0927  0863               	movf	??_compensate_pressure+13,w
 15548  0928  3DD9               	addwfc	??_compensate_pressure+3,f
 15549  0929  0864               	movf	??_compensate_pressure+14,w
 15550  092A  3DDA               	addwfc	??_compensate_pressure+4,f
 15551  092B  0865               	movf	??_compensate_pressure+15,w
 15552  092C  3DDB               	addwfc	??_compensate_pressure+5,f
 15553  092D  0866               	movf	??_compensate_pressure+16,w
 15554  092E  3DDC               	addwfc	??_compensate_pressure+6,f
 15555  092F  0867               	movf	??_compensate_pressure+17,w
 15556  0930  3DDD               	addwfc	??_compensate_pressure+7,f
 15557  0931  085D               	movf	??_compensate_pressure+7,w
 15558  0932  0021               	movlb	1	; select bank1
 15559  0933  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 15560  0934  0020               	movlb	0	; select bank0
 15561  0935  085C               	movf	??_compensate_pressure+6,w
 15562  0936  0021               	movlb	1	; select bank1
 15563  0937  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 15564  0938  0020               	movlb	0	; select bank0
 15565  0939  085B               	movf	??_compensate_pressure+5,w
 15566  093A  0021               	movlb	1	; select bank1
 15567  093B  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 15568  093C  0020               	movlb	0	; select bank0
 15569  093D  085A               	movf	??_compensate_pressure+4,w
 15570  093E  0021               	movlb	1	; select bank1
 15571  093F  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 15572  0940  0020               	movlb	0	; select bank0
 15573  0941  0859               	movf	??_compensate_pressure+3,w
 15574  0942  0021               	movlb	1	; select bank1
 15575  0943  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 15576  0944  0020               	movlb	0	; select bank0
 15577  0945  0858               	movf	??_compensate_pressure+2,w
 15578  0946  0021               	movlb	1	; select bank1
 15579  0947  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 15580  0948  0020               	movlb	0	; select bank0
 15581  0949  0857               	movf	??_compensate_pressure+1,w
 15582  094A  0021               	movlb	1	; select bank1
 15583  094B  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 15584  094C  0020               	movlb	0	; select bank0
 15585  094D  0856               	movf	??_compensate_pressure,w
 15586  094E  0021               	movlb	1	; select bank1
 15587  094F  00CD               	movwf	compensate_pressure@var2^(0+128)
 15588                           
 15589                           ;BME280_driver/bme280.c: 1173:     var2 = var2 + (((int64_t)calib_data->dig_P4) * 343597
      +                          38368);
 15590  0950  30CD               	movlw	low compensate_pressure@var2
 15591  0951  0086               	movwf	6
 15592  0952  3000               	movlw	high compensate_pressure@var2
 15593  0953  0087               	movwf	7
 15594  0954  3F40               	moviw [0]fsr1
 15595  0955  0020               	movlb	0	; select bank0
 15596  0956  00D6               	movwf	??_compensate_pressure
 15597  0957  3F41               	moviw [1]fsr1
 15598  0958  00D7               	movwf	??_compensate_pressure+1
 15599  0959  3F42               	moviw [2]fsr1
 15600  095A  00D8               	movwf	??_compensate_pressure+2
 15601  095B  3F43               	moviw [3]fsr1
 15602  095C  00D9               	movwf	??_compensate_pressure+3
 15603  095D  3F44               	moviw [4]fsr1
 15604  095E  00DA               	movwf	??_compensate_pressure+4
 15605  095F  3F45               	moviw [5]fsr1
 15606  0960  00DB               	movwf	??_compensate_pressure+5
 15607  0961  3F46               	moviw [6]fsr1
 15608  0962  00DC               	movwf	??_compensate_pressure+6
 15609  0963  3F47               	moviw [7]fsr1
 15610  0964  00DD               	movwf	??_compensate_pressure+7
 15611  0965  0852               	movf	compensate_pressure@calib_data,w
 15612  0966  3E0C               	addlw	12
 15613  0967  0086               	movwf	6
 15614  0968  3001               	movlw	1	; select bank2/3
 15615  0969  0087               	movwf	7
 15616  096A  3F40               	moviw [0]fsr1
 15617  096B  00DE               	movwf	??_compensate_pressure+8
 15618  096C  3F41               	moviw [1]fsr1
 15619  096D  00DF               	movwf	??_compensate_pressure+9
 15620  096E  085E               	movf	??_compensate_pressure+8,w
 15621  096F  00E0               	movwf	??_compensate_pressure+10
 15622  0970  085F               	movf	??_compensate_pressure+9,w
 15623  0971  00E1               	movwf	??_compensate_pressure+11
 15624  0972  3000               	movlw	0
 15625  0973  1BE1               	btfsc	??_compensate_pressure+11,7
 15626  0974  30FF               	movlw	255
 15627  0975  00E2               	movwf	??_compensate_pressure+12
 15628  0976  00E3               	movwf	??_compensate_pressure+13
 15629  0977  00E4               	movwf	??_compensate_pressure+14
 15630  0978  00E5               	movwf	??_compensate_pressure+15
 15631  0979  00E6               	movwf	??_compensate_pressure+16
 15632  097A  00E7               	movwf	??_compensate_pressure+17
 15633  097B  3023               	movlw	35
 15634  097C                     u4995:	
 15635  097C  0020               	movlb	0	; select bank0
 15636  097D  35E0               	lslf	??_compensate_pressure+10,f
 15637  097E  0DE1               	rlf	??_compensate_pressure+11,f
 15638  097F  0DE2               	rlf	??_compensate_pressure+12,f
 15639  0980  0DE3               	rlf	??_compensate_pressure+13,f
 15640  0981  0DE4               	rlf	??_compensate_pressure+14,f
 15641  0982  0DE5               	rlf	??_compensate_pressure+15,f
 15642  0983  0DE6               	rlf	??_compensate_pressure+16,f
 15643  0984  0DE7               	rlf	??_compensate_pressure+17,f
 15644  0985  0B89               	decfsz	9,f
 15645  0986  297C               	goto	u4995
 15646  0987  0020               	movlb	0	; select bank0
 15647  0988  0860               	movf	??_compensate_pressure+10,w
 15648  0989  07D6               	addwf	??_compensate_pressure,f
 15649  098A  0861               	movf	??_compensate_pressure+11,w
 15650  098B  3DD7               	addwfc	??_compensate_pressure+1,f
 15651  098C  0862               	movf	??_compensate_pressure+12,w
 15652  098D  3DD8               	addwfc	??_compensate_pressure+2,f
 15653  098E  0863               	movf	??_compensate_pressure+13,w
 15654  098F  3DD9               	addwfc	??_compensate_pressure+3,f
 15655  0990  0864               	movf	??_compensate_pressure+14,w
 15656  0991  3DDA               	addwfc	??_compensate_pressure+4,f
 15657  0992  0865               	movf	??_compensate_pressure+15,w
 15658  0993  3DDB               	addwfc	??_compensate_pressure+5,f
 15659  0994  0866               	movf	??_compensate_pressure+16,w
 15660  0995  3DDC               	addwfc	??_compensate_pressure+6,f
 15661  0996  0867               	movf	??_compensate_pressure+17,w
 15662  0997  3DDD               	addwfc	??_compensate_pressure+7,f
 15663  0998  085D               	movf	??_compensate_pressure+7,w
 15664  0999  0021               	movlb	1	; select bank1
 15665  099A  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 15666  099B  0020               	movlb	0	; select bank0
 15667  099C  085C               	movf	??_compensate_pressure+6,w
 15668  099D  0021               	movlb	1	; select bank1
 15669  099E  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 15670  099F  0020               	movlb	0	; select bank0
 15671  09A0  085B               	movf	??_compensate_pressure+5,w
 15672  09A1  0021               	movlb	1	; select bank1
 15673  09A2  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 15674  09A3  0020               	movlb	0	; select bank0
 15675  09A4  085A               	movf	??_compensate_pressure+4,w
 15676  09A5  0021               	movlb	1	; select bank1
 15677  09A6  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 15678  09A7  0020               	movlb	0	; select bank0
 15679  09A8  0859               	movf	??_compensate_pressure+3,w
 15680  09A9  0021               	movlb	1	; select bank1
 15681  09AA  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 15682  09AB  0020               	movlb	0	; select bank0
 15683  09AC  0858               	movf	??_compensate_pressure+2,w
 15684  09AD  0021               	movlb	1	; select bank1
 15685  09AE  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 15686  09AF  0020               	movlb	0	; select bank0
 15687  09B0  0857               	movf	??_compensate_pressure+1,w
 15688  09B1  0021               	movlb	1	; select bank1
 15689  09B2  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 15690  09B3  0020               	movlb	0	; select bank0
 15691  09B4  0856               	movf	??_compensate_pressure,w
 15692  09B5  0021               	movlb	1	; select bank1
 15693  09B6  00CD               	movwf	compensate_pressure@var2^(0+128)
 15694                           
 15695                           ;BME280_driver/bme280.c: 1174:     var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) /
      +                           256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 15696  09B7  0020               	movlb	0	; select bank0
 15697  09B8  0852               	movf	compensate_pressure@calib_data,w
 15698  09B9  3E0A               	addlw	10
 15699  09BA  0086               	movwf	6
 15700  09BB  3001               	movlw	1	; select bank2/3
 15701  09BC  0087               	movwf	7
 15702  09BD  3F40               	moviw [0]fsr1
 15703  09BE  00D6               	movwf	??_compensate_pressure
 15704  09BF  3F41               	moviw [1]fsr1
 15705  09C0  00D7               	movwf	??_compensate_pressure+1
 15706  09C1  0856               	movf	??_compensate_pressure,w
 15707  09C2  00A0               	movwf	___omul@multiplier
 15708  09C3  0857               	movf	??_compensate_pressure+1,w
 15709  09C4  00A1               	movwf	___omul@multiplier+1
 15710  09C5  0D89               	rlf	9,f
 15711  09C6  3B89               	subwfb	9,f
 15712  09C7  0989               	comf	9,f
 15713  09C8  00A2               	movwf	___omul@multiplier+2
 15714  09C9  00A3               	movwf	___omul@multiplier+3
 15715  09CA  00A4               	movwf	___omul@multiplier+4
 15716  09CB  00A5               	movwf	___omul@multiplier+5
 15717  09CC  00A6               	movwf	___omul@multiplier+6
 15718  09CD  00A7               	movwf	___omul@multiplier+7
 15719  09CE  0021               	movlb	1	; select bank1
 15720  09CF  085D               	movf	compensate_pressure@var1^(0+128),w
 15721  09D0  0020               	movlb	0	; select bank0
 15722  09D1  00A8               	movwf	___omul@multiplicand
 15723  09D2  0021               	movlb	1	; select bank1
 15724  09D3  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 15725  09D4  0020               	movlb	0	; select bank0
 15726  09D5  00A9               	movwf	___omul@multiplicand+1
 15727  09D6  0021               	movlb	1	; select bank1
 15728  09D7  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 15729  09D8  0020               	movlb	0	; select bank0
 15730  09D9  00AA               	movwf	___omul@multiplicand+2
 15731  09DA  0021               	movlb	1	; select bank1
 15732  09DB  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 15733  09DC  0020               	movlb	0	; select bank0
 15734  09DD  00AB               	movwf	___omul@multiplicand+3
 15735  09DE  0021               	movlb	1	; select bank1
 15736  09DF  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 15737  09E0  0020               	movlb	0	; select bank0
 15738  09E1  00AC               	movwf	___omul@multiplicand+4
 15739  09E2  0021               	movlb	1	; select bank1
 15740  09E3  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 15741  09E4  0020               	movlb	0	; select bank0
 15742  09E5  00AD               	movwf	___omul@multiplicand+5
 15743  09E6  0021               	movlb	1	; select bank1
 15744  09E7  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 15745  09E8  0020               	movlb	0	; select bank0
 15746  09E9  00AE               	movwf	___omul@multiplicand+6
 15747  09EA  0021               	movlb	1	; select bank1
 15748  09EB  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 15749  09EC  0020               	movlb	0	; select bank0
 15750  09ED  00AF               	movwf	___omul@multiplicand+7
 15751  09EE  319E  26DF  3188   	fcall	___omul
 15752  09F1  0820               	movf	?___omul,w
 15753  09F2  0021               	movlb	1	; select bank1
 15754  09F3  00C1               	movwf	_compensate_pressure$2549^(0+128)
 15755  09F4  0020               	movlb	0	; select bank0
 15756  09F5  0821               	movf	?___omul+1,w
 15757  09F6  0021               	movlb	1	; select bank1
 15758  09F7  00C2               	movwf	(_compensate_pressure$2549+1)^(0+128)
 15759  09F8  0020               	movlb	0	; select bank0
 15760  09F9  0822               	movf	?___omul+2,w
 15761  09FA  0021               	movlb	1	; select bank1
 15762  09FB  00C3               	movwf	(_compensate_pressure$2549+2)^(0+128)
 15763  09FC  0020               	movlb	0	; select bank0
 15764  09FD  0823               	movf	?___omul+3,w
 15765  09FE  0021               	movlb	1	; select bank1
 15766  09FF  00C4               	movwf	(_compensate_pressure$2549+3)^(0+128)
 15767  0A00  0020               	movlb	0	; select bank0
 15768  0A01  0824               	movf	?___omul+4,w
 15769  0A02  0021               	movlb	1	; select bank1
 15770  0A03  00C5               	movwf	(_compensate_pressure$2549+4)^(0+128)
 15771  0A04  0020               	movlb	0	; select bank0
 15772  0A05  0825               	movf	?___omul+5,w
 15773  0A06  0021               	movlb	1	; select bank1
 15774  0A07  00C6               	movwf	(_compensate_pressure$2549+5)^(0+128)
 15775  0A08  0020               	movlb	0	; select bank0
 15776  0A09  0826               	movf	?___omul+6,w
 15777  0A0A  0021               	movlb	1	; select bank1
 15778  0A0B  00C7               	movwf	(_compensate_pressure$2549+6)^(0+128)
 15779  0A0C  0020               	movlb	0	; select bank0
 15780  0A0D  0827               	movf	?___omul+7,w
 15781  0A0E  0021               	movlb	1	; select bank1
 15782  0A0F  00C8               	movwf	(_compensate_pressure$2549+7)^(0+128)
 15783                           
 15784                           ;BME280_driver/bme280.c: 1174:     var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) /
      +                           256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 15785  0A10  0020               	movlb	0	; select bank0
 15786  0A11  0852               	movf	compensate_pressure@calib_data,w
 15787  0A12  3E08               	addlw	8
 15788  0A13  0086               	movwf	6
 15789  0A14  3001               	movlw	1	; select bank2/3
 15790  0A15  0087               	movwf	7
 15791  0A16  3F40               	moviw [0]fsr1
 15792  0A17  00D6               	movwf	??_compensate_pressure
 15793  0A18  3F41               	moviw [1]fsr1
 15794  0A19  00D7               	movwf	??_compensate_pressure+1
 15795  0A1A  0856               	movf	??_compensate_pressure,w
 15796  0A1B  00A0               	movwf	___omul@multiplier
 15797  0A1C  0857               	movf	??_compensate_pressure+1,w
 15798  0A1D  00A1               	movwf	___omul@multiplier+1
 15799  0A1E  0D89               	rlf	9,f
 15800  0A1F  3B89               	subwfb	9,f
 15801  0A20  0989               	comf	9,f
 15802  0A21  00A2               	movwf	___omul@multiplier+2
 15803  0A22  00A3               	movwf	___omul@multiplier+3
 15804  0A23  00A4               	movwf	___omul@multiplier+4
 15805  0A24  00A5               	movwf	___omul@multiplier+5
 15806  0A25  00A6               	movwf	___omul@multiplier+6
 15807  0A26  00A7               	movwf	___omul@multiplier+7
 15808  0A27  0021               	movlb	1	; select bank1
 15809  0A28  085D               	movf	compensate_pressure@var1^(0+128),w
 15810  0A29  0020               	movlb	0	; select bank0
 15811  0A2A  00A8               	movwf	___omul@multiplicand
 15812  0A2B  0021               	movlb	1	; select bank1
 15813  0A2C  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 15814  0A2D  0020               	movlb	0	; select bank0
 15815  0A2E  00A9               	movwf	___omul@multiplicand+1
 15816  0A2F  0021               	movlb	1	; select bank1
 15817  0A30  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 15818  0A31  0020               	movlb	0	; select bank0
 15819  0A32  00AA               	movwf	___omul@multiplicand+2
 15820  0A33  0021               	movlb	1	; select bank1
 15821  0A34  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 15822  0A35  0020               	movlb	0	; select bank0
 15823  0A36  00AB               	movwf	___omul@multiplicand+3
 15824  0A37  0021               	movlb	1	; select bank1
 15825  0A38  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 15826  0A39  0020               	movlb	0	; select bank0
 15827  0A3A  00AC               	movwf	___omul@multiplicand+4
 15828  0A3B  0021               	movlb	1	; select bank1
 15829  0A3C  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 15830  0A3D  0020               	movlb	0	; select bank0
 15831  0A3E  00AD               	movwf	___omul@multiplicand+5
 15832  0A3F  0021               	movlb	1	; select bank1
 15833  0A40  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 15834  0A41  0020               	movlb	0	; select bank0
 15835  0A42  00AE               	movwf	___omul@multiplicand+6
 15836  0A43  0021               	movlb	1	; select bank1
 15837  0A44  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 15838  0A45  0020               	movlb	0	; select bank0
 15839  0A46  00AF               	movwf	___omul@multiplicand+7
 15840  0A47  319E  26DF  3188   	fcall	___omul
 15841  0A4A  3020               	movlw	low ?___omul
 15842  0A4B  0086               	movwf	6
 15843  0A4C  3000               	movlw	high ?___omul
 15844  0A4D  0087               	movwf	7
 15845  0A4E  3F40               	moviw [0]fsr1
 15846  0A4F  00D8               	movwf	??_compensate_pressure+2
 15847  0A50  3F41               	moviw [1]fsr1
 15848  0A51  00D9               	movwf	??_compensate_pressure+3
 15849  0A52  3F42               	moviw [2]fsr1
 15850  0A53  00DA               	movwf	??_compensate_pressure+4
 15851  0A54  3F43               	moviw [3]fsr1
 15852  0A55  00DB               	movwf	??_compensate_pressure+5
 15853  0A56  3F44               	moviw [4]fsr1
 15854  0A57  00DC               	movwf	??_compensate_pressure+6
 15855  0A58  3F45               	moviw [5]fsr1
 15856  0A59  00DD               	movwf	??_compensate_pressure+7
 15857  0A5A  3F46               	moviw [6]fsr1
 15858  0A5B  00DE               	movwf	??_compensate_pressure+8
 15859  0A5C  3F47               	moviw [7]fsr1
 15860  0A5D  00DF               	movwf	??_compensate_pressure+9
 15861  0A5E  300C               	movlw	12
 15862  0A5F                     u5005:	
 15863  0A5F  0020               	movlb	0	; select bank0
 15864  0A60  35D8               	lslf	??_compensate_pressure+2,f
 15865  0A61  0DD9               	rlf	??_compensate_pressure+3,f
 15866  0A62  0DDA               	rlf	??_compensate_pressure+4,f
 15867  0A63  0DDB               	rlf	??_compensate_pressure+5,f
 15868  0A64  0DDC               	rlf	??_compensate_pressure+6,f
 15869  0A65  0DDD               	rlf	??_compensate_pressure+7,f
 15870  0A66  0DDE               	rlf	??_compensate_pressure+8,f
 15871  0A67  0DDF               	rlf	??_compensate_pressure+9,f
 15872  0A68  0B89               	decfsz	9,f
 15873  0A69  2A5F               	goto	u5005
 15874  0A6A  3000               	movlw	0
 15875  0A6B  0020               	movlb	0	; select bank0
 15876  0A6C  00BF               	movwf	___aodiv@divisor+7
 15877  0A6D  3000               	movlw	0
 15878  0A6E  00BE               	movwf	___aodiv@divisor+6
 15879  0A6F  3000               	movlw	0
 15880  0A70  00BD               	movwf	___aodiv@divisor+5
 15881  0A71  3000               	movlw	0
 15882  0A72  00BC               	movwf	___aodiv@divisor+4
 15883  0A73  3000               	movlw	0
 15884  0A74  00BB               	movwf	___aodiv@divisor+3
 15885  0A75  3000               	movlw	0
 15886  0A76  00BA               	movwf	___aodiv@divisor+2
 15887  0A77  3001               	movlw	1
 15888  0A78  00B9               	movwf	___aodiv@divisor+1
 15889  0A79  3000               	movlw	0
 15890  0A7A  00B8               	movwf	___aodiv@divisor
 15891  0A7B  0021               	movlb	1	; select bank1
 15892  0A7C  0841               	movf	_compensate_pressure$2549^(0+128),w
 15893  0A7D  0020               	movlb	0	; select bank0
 15894  0A7E  00A0               	movwf	___omul@multiplier
 15895  0A7F  0021               	movlb	1	; select bank1
 15896  0A80  0842               	movf	(_compensate_pressure$2549+1)^(0+128),w
 15897  0A81  0020               	movlb	0	; select bank0
 15898  0A82  00A1               	movwf	___omul@multiplier+1
 15899  0A83  0021               	movlb	1	; select bank1
 15900  0A84  0843               	movf	(_compensate_pressure$2549+2)^(0+128),w
 15901  0A85  0020               	movlb	0	; select bank0
 15902  0A86  00A2               	movwf	___omul@multiplier+2
 15903  0A87  0021               	movlb	1	; select bank1
 15904  0A88  0844               	movf	(_compensate_pressure$2549+3)^(0+128),w
 15905  0A89  0020               	movlb	0	; select bank0
 15906  0A8A  00A3               	movwf	___omul@multiplier+3
 15907  0A8B  0021               	movlb	1	; select bank1
 15908  0A8C  0845               	movf	(_compensate_pressure$2549+4)^(0+128),w
 15909  0A8D  0020               	movlb	0	; select bank0
 15910  0A8E  00A4               	movwf	___omul@multiplier+4
 15911  0A8F  0021               	movlb	1	; select bank1
 15912  0A90  0846               	movf	(_compensate_pressure$2549+5)^(0+128),w
 15913  0A91  0020               	movlb	0	; select bank0
 15914  0A92  00A5               	movwf	___omul@multiplier+5
 15915  0A93  0021               	movlb	1	; select bank1
 15916  0A94  0847               	movf	(_compensate_pressure$2549+6)^(0+128),w
 15917  0A95  0020               	movlb	0	; select bank0
 15918  0A96  00A6               	movwf	___omul@multiplier+6
 15919  0A97  0021               	movlb	1	; select bank1
 15920  0A98  0848               	movf	(_compensate_pressure$2549+7)^(0+128),w
 15921  0A99  0020               	movlb	0	; select bank0
 15922  0A9A  00A7               	movwf	___omul@multiplier+7
 15923  0A9B  0021               	movlb	1	; select bank1
 15924  0A9C  085D               	movf	compensate_pressure@var1^(0+128),w
 15925  0A9D  0020               	movlb	0	; select bank0
 15926  0A9E  00A8               	movwf	___omul@multiplicand
 15927  0A9F  0021               	movlb	1	; select bank1
 15928  0AA0  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 15929  0AA1  0020               	movlb	0	; select bank0
 15930  0AA2  00A9               	movwf	___omul@multiplicand+1
 15931  0AA3  0021               	movlb	1	; select bank1
 15932  0AA4  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 15933  0AA5  0020               	movlb	0	; select bank0
 15934  0AA6  00AA               	movwf	___omul@multiplicand+2
 15935  0AA7  0021               	movlb	1	; select bank1
 15936  0AA8  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 15937  0AA9  0020               	movlb	0	; select bank0
 15938  0AAA  00AB               	movwf	___omul@multiplicand+3
 15939  0AAB  0021               	movlb	1	; select bank1
 15940  0AAC  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 15941  0AAD  0020               	movlb	0	; select bank0
 15942  0AAE  00AC               	movwf	___omul@multiplicand+4
 15943  0AAF  0021               	movlb	1	; select bank1
 15944  0AB0  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 15945  0AB1  0020               	movlb	0	; select bank0
 15946  0AB2  00AD               	movwf	___omul@multiplicand+5
 15947  0AB3  0021               	movlb	1	; select bank1
 15948  0AB4  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 15949  0AB5  0020               	movlb	0	; select bank0
 15950  0AB6  00AE               	movwf	___omul@multiplicand+6
 15951  0AB7  0021               	movlb	1	; select bank1
 15952  0AB8  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 15953  0AB9  0020               	movlb	0	; select bank0
 15954  0ABA  00AF               	movwf	___omul@multiplicand+7
 15955  0ABB  319E  26DF  3188   	fcall	___omul
 15956  0ABE  0820               	movf	?___omul,w
 15957  0ABF  00C0               	movwf	___aodiv@dividend
 15958  0AC0  0821               	movf	?___omul+1,w
 15959  0AC1  00C1               	movwf	___aodiv@dividend+1
 15960  0AC2  0822               	movf	?___omul+2,w
 15961  0AC3  00C2               	movwf	___aodiv@dividend+2
 15962  0AC4  0823               	movf	?___omul+3,w
 15963  0AC5  00C3               	movwf	___aodiv@dividend+3
 15964  0AC6  0824               	movf	?___omul+4,w
 15965  0AC7  00C4               	movwf	___aodiv@dividend+4
 15966  0AC8  0825               	movf	?___omul+5,w
 15967  0AC9  00C5               	movwf	___aodiv@dividend+5
 15968  0ACA  0826               	movf	?___omul+6,w
 15969  0ACB  00C6               	movwf	___aodiv@dividend+6
 15970  0ACC  0827               	movf	?___omul+7,w
 15971  0ACD  00C7               	movwf	___aodiv@dividend+7
 15972  0ACE  3197  270B  3188   	fcall	___aodiv
 15973  0AD1  3038               	movlw	low ?___aodiv
 15974  0AD2  0086               	movwf	6
 15975  0AD3  3000               	movlw	high ?___aodiv
 15976  0AD4  0087               	movwf	7
 15977  0AD5  3F40               	moviw [0]fsr1
 15978  0AD6  07D8               	addwf	??_compensate_pressure+2,f
 15979  0AD7  3F41               	moviw [1]fsr1
 15980  0AD8  3DD9               	addwfc	??_compensate_pressure+3,f
 15981  0AD9  3F42               	moviw [2]fsr1
 15982  0ADA  3DDA               	addwfc	??_compensate_pressure+4,f
 15983  0ADB  3F43               	moviw [3]fsr1
 15984  0ADC  3DDB               	addwfc	??_compensate_pressure+5,f
 15985  0ADD  3F44               	moviw [4]fsr1
 15986  0ADE  3DDC               	addwfc	??_compensate_pressure+6,f
 15987  0ADF  3F45               	moviw [5]fsr1
 15988  0AE0  3DDD               	addwfc	??_compensate_pressure+7,f
 15989  0AE1  3F46               	moviw [6]fsr1
 15990  0AE2  3DDE               	addwfc	??_compensate_pressure+8,f
 15991  0AE3  3F47               	moviw [7]fsr1
 15992  0AE4  3DDF               	addwfc	??_compensate_pressure+9,f
 15993  0AE5  085F               	movf	??_compensate_pressure+9,w
 15994  0AE6  0021               	movlb	1	; select bank1
 15995  0AE7  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
 15996  0AE8  0020               	movlb	0	; select bank0
 15997  0AE9  085E               	movf	??_compensate_pressure+8,w
 15998  0AEA  0021               	movlb	1	; select bank1
 15999  0AEB  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
 16000  0AEC  0020               	movlb	0	; select bank0
 16001  0AED  085D               	movf	??_compensate_pressure+7,w
 16002  0AEE  0021               	movlb	1	; select bank1
 16003  0AEF  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
 16004  0AF0  0020               	movlb	0	; select bank0
 16005  0AF1  085C               	movf	??_compensate_pressure+6,w
 16006  0AF2  0021               	movlb	1	; select bank1
 16007  0AF3  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
 16008  0AF4  0020               	movlb	0	; select bank0
 16009  0AF5  085B               	movf	??_compensate_pressure+5,w
 16010  0AF6  0021               	movlb	1	; select bank1
 16011  0AF7  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
 16012  0AF8  0020               	movlb	0	; select bank0
 16013  0AF9  085A               	movf	??_compensate_pressure+4,w
 16014  0AFA  0021               	movlb	1	; select bank1
 16015  0AFB  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
 16016  0AFC  0020               	movlb	0	; select bank0
 16017  0AFD  0859               	movf	??_compensate_pressure+3,w
 16018  0AFE  0021               	movlb	1	; select bank1
 16019  0AFF  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
 16020  0B00  0020               	movlb	0	; select bank0
 16021  0B01  0858               	movf	??_compensate_pressure+2,w
 16022  0B02  0021               	movlb	1	; select bank1
 16023  0B03  00DD               	movwf	compensate_pressure@var1^(0+128)
 16024                           
 16025                           ;BME280_driver/bme280.c: 1176:     var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) 
      +                          / 8589934592;
 16026  0B04  3000               	movlw	0
 16027  0B05  0020               	movlb	0	; select bank0
 16028  0B06  00BF               	movwf	___aodiv@divisor+7
 16029  0B07  3000               	movlw	0
 16030  0B08  00BE               	movwf	___aodiv@divisor+6
 16031  0B09  3000               	movlw	0
 16032  0B0A  00BD               	movwf	___aodiv@divisor+5
 16033  0B0B  3002               	movlw	2
 16034  0B0C  00BC               	movwf	___aodiv@divisor+4
 16035  0B0D  3000               	movlw	0
 16036  0B0E  00BB               	movwf	___aodiv@divisor+3
 16037  0B0F  3000               	movlw	0
 16038  0B10  00BA               	movwf	___aodiv@divisor+2
 16039  0B11  3000               	movlw	0
 16040  0B12  00B9               	movwf	___aodiv@divisor+1
 16041  0B13  3000               	movlw	0
 16042  0B14  00B8               	movwf	___aodiv@divisor
 16043  0B15  3000               	movlw	0
 16044  0B16  00D6               	movwf	??_compensate_pressure
 16045  0B17  3000               	movlw	0
 16046  0B18  00D7               	movwf	??_compensate_pressure+1
 16047  0B19  3000               	movlw	0
 16048  0B1A  00D8               	movwf	??_compensate_pressure+2
 16049  0B1B  3000               	movlw	0
 16050  0B1C  00D9               	movwf	??_compensate_pressure+3
 16051  0B1D  3000               	movlw	0
 16052  0B1E  00DA               	movwf	??_compensate_pressure+4
 16053  0B1F  3080               	movlw	128
 16054  0B20  00DB               	movwf	??_compensate_pressure+5
 16055  0B21  3000               	movlw	0
 16056  0B22  00DC               	movwf	??_compensate_pressure+6
 16057  0B23  3000               	movlw	0
 16058  0B24  00DD               	movwf	??_compensate_pressure+7
 16059  0B25  30DD               	movlw	low compensate_pressure@var1
 16060  0B26  0086               	movwf	6
 16061  0B27  3000               	movlw	high compensate_pressure@var1
 16062  0B28  0087               	movwf	7
 16063  0B29  3F40               	moviw [0]fsr1
 16064  0B2A  07D6               	addwf	??_compensate_pressure,f
 16065  0B2B  3F41               	moviw [1]fsr1
 16066  0B2C  3DD7               	addwfc	??_compensate_pressure+1,f
 16067  0B2D  3F42               	moviw [2]fsr1
 16068  0B2E  3DD8               	addwfc	??_compensate_pressure+2,f
 16069  0B2F  3F43               	moviw [3]fsr1
 16070  0B30  3DD9               	addwfc	??_compensate_pressure+3,f
 16071  0B31  3F44               	moviw [4]fsr1
 16072  0B32  3DDA               	addwfc	??_compensate_pressure+4,f
 16073  0B33  3F45               	moviw [5]fsr1
 16074  0B34  3DDB               	addwfc	??_compensate_pressure+5,f
 16075  0B35  3F46               	moviw [6]fsr1
 16076  0B36  3DDC               	addwfc	??_compensate_pressure+6,f
 16077  0B37  3F47               	moviw [7]fsr1
 16078  0B38  3DDD               	addwfc	??_compensate_pressure+7,f
 16079  0B39  085D               	movf	??_compensate_pressure+7,w
 16080  0B3A  00A7               	movwf	___omul@multiplier+7
 16081  0B3B  085C               	movf	??_compensate_pressure+6,w
 16082  0B3C  00A6               	movwf	___omul@multiplier+6
 16083  0B3D  085B               	movf	??_compensate_pressure+5,w
 16084  0B3E  00A5               	movwf	___omul@multiplier+5
 16085  0B3F  085A               	movf	??_compensate_pressure+4,w
 16086  0B40  00A4               	movwf	___omul@multiplier+4
 16087  0B41  0859               	movf	??_compensate_pressure+3,w
 16088  0B42  00A3               	movwf	___omul@multiplier+3
 16089  0B43  0858               	movf	??_compensate_pressure+2,w
 16090  0B44  00A2               	movwf	___omul@multiplier+2
 16091  0B45  0857               	movf	??_compensate_pressure+1,w
 16092  0B46  00A1               	movwf	___omul@multiplier+1
 16093  0B47  0856               	movf	??_compensate_pressure,w
 16094  0B48  00A0               	movwf	___omul@multiplier
 16095  0B49  0852               	movf	compensate_pressure@calib_data,w
 16096  0B4A  3E06               	addlw	6
 16097  0B4B  0086               	movwf	6
 16098  0B4C  3001               	movlw	1	; select bank2/3
 16099  0B4D  0087               	movwf	7
 16100  0B4E  3F40               	moviw [0]fsr1
 16101  0B4F  00A8               	movwf	___omul@multiplicand
 16102  0B50  3F41               	moviw [1]fsr1
 16103  0B51  00A9               	movwf	___omul@multiplicand+1
 16104  0B52  01AA               	clrf	___omul@multiplicand+2
 16105  0B53  01AB               	clrf	___omul@multiplicand+3
 16106  0B54  01AC               	clrf	___omul@multiplicand+4
 16107  0B55  01AD               	clrf	___omul@multiplicand+5
 16108  0B56  01AE               	clrf	___omul@multiplicand+6
 16109  0B57  01AF               	clrf	___omul@multiplicand+7
 16110  0B58  319E  26DF  3188   	fcall	___omul
 16111  0B5B  0820               	movf	?___omul,w
 16112  0B5C  00C0               	movwf	___aodiv@dividend
 16113  0B5D  0821               	movf	?___omul+1,w
 16114  0B5E  00C1               	movwf	___aodiv@dividend+1
 16115  0B5F  0822               	movf	?___omul+2,w
 16116  0B60  00C2               	movwf	___aodiv@dividend+2
 16117  0B61  0823               	movf	?___omul+3,w
 16118  0B62  00C3               	movwf	___aodiv@dividend+3
 16119  0B63  0824               	movf	?___omul+4,w
 16120  0B64  00C4               	movwf	___aodiv@dividend+4
 16121  0B65  0825               	movf	?___omul+5,w
 16122  0B66  00C5               	movwf	___aodiv@dividend+5
 16123  0B67  0826               	movf	?___omul+6,w
 16124  0B68  00C6               	movwf	___aodiv@dividend+6
 16125  0B69  0827               	movf	?___omul+7,w
 16126  0B6A  00C7               	movwf	___aodiv@dividend+7
 16127  0B6B  3197  270B  3188   	fcall	___aodiv
 16128  0B6E  0838               	movf	?___aodiv,w
 16129  0B6F  0021               	movlb	1	; select bank1
 16130  0B70  00DD               	movwf	compensate_pressure@var1^(0+128)
 16131  0B71  0020               	movlb	0	; select bank0
 16132  0B72  0839               	movf	?___aodiv+1,w
 16133  0B73  0021               	movlb	1	; select bank1
 16134  0B74  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
 16135  0B75  0020               	movlb	0	; select bank0
 16136  0B76  083A               	movf	?___aodiv+2,w
 16137  0B77  0021               	movlb	1	; select bank1
 16138  0B78  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
 16139  0B79  0020               	movlb	0	; select bank0
 16140  0B7A  083B               	movf	?___aodiv+3,w
 16141  0B7B  0021               	movlb	1	; select bank1
 16142  0B7C  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
 16143  0B7D  0020               	movlb	0	; select bank0
 16144  0B7E  083C               	movf	?___aodiv+4,w
 16145  0B7F  0021               	movlb	1	; select bank1
 16146  0B80  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
 16147  0B81  0020               	movlb	0	; select bank0
 16148  0B82  083D               	movf	?___aodiv+5,w
 16149  0B83  0021               	movlb	1	; select bank1
 16150  0B84  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
 16151  0B85  0020               	movlb	0	; select bank0
 16152  0B86  083E               	movf	?___aodiv+6,w
 16153  0B87  0021               	movlb	1	; select bank1
 16154  0B88  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
 16155  0B89  0020               	movlb	0	; select bank0
 16156  0B8A  083F               	movf	?___aodiv+7,w
 16157  0B8B  0021               	movlb	1	; select bank1
 16158  0B8C  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
 16159                           
 16160                           ;BME280_driver/bme280.c: 1179:     if (var1 != 0)
 16161  0B8D  085D               	movf	compensate_pressure@var1^(0+128),w
 16162  0B8E  045E               	iorwf	(compensate_pressure@var1+1)^(0+128),w
 16163  0B8F  045F               	iorwf	(compensate_pressure@var1+2)^(0+128),w
 16164  0B90  0460               	iorwf	(compensate_pressure@var1+3)^(0+128),w
 16165  0B91  0461               	iorwf	(compensate_pressure@var1+4)^(0+128),w
 16166  0B92  0462               	iorwf	(compensate_pressure@var1+5)^(0+128),w
 16167  0B93  0463               	iorwf	(compensate_pressure@var1+6)^(0+128),w
 16168  0B94  0464               	iorwf	(compensate_pressure@var1+7)^(0+128),w
 16169  0B95  1903               	skipnz
 16170  0B96  2FD7               	goto	l4840
 16171                           
 16172                           ;BME280_driver/bme280.c: 1180:     {;BME280_driver/bme280.c: 1181:         var4 = 104857
      +                          6 - uncomp_data->pressure;
 16173  0B97  0838               	movf	compensate_pressure@uncomp_data^(0+128),w
 16174  0B98  0086               	movwf	6
 16175  0B99  3001               	movlw	1	; select bank2/3
 16176  0B9A  0087               	movwf	7
 16177  0B9B  3F40               	moviw [0]fsr1
 16178  0B9C  0020               	movlb	0	; select bank0
 16179  0B9D  00D6               	movwf	??_compensate_pressure
 16180  0B9E  3F41               	moviw [1]fsr1
 16181  0B9F  00D7               	movwf	??_compensate_pressure+1
 16182  0BA0  3F42               	moviw [2]fsr1
 16183  0BA1  00D8               	movwf	??_compensate_pressure+2
 16184  0BA2  3F43               	moviw [3]fsr1
 16185  0BA3  00D9               	movwf	??_compensate_pressure+3
 16186  0BA4  3000               	movlw	0
 16187  0BA5  00DA               	movwf	??_compensate_pressure+4
 16188  0BA6  3000               	movlw	0
 16189  0BA7  00DB               	movwf	??_compensate_pressure+5
 16190  0BA8  3010               	movlw	16
 16191  0BA9  00DC               	movwf	??_compensate_pressure+6
 16192  0BAA  3000               	movlw	0
 16193  0BAB  00DD               	movwf	??_compensate_pressure+7
 16194  0BAC  0856               	movf	??_compensate_pressure,w
 16195  0BAD  02DA               	subwf	??_compensate_pressure+4,f
 16196  0BAE  0857               	movf	??_compensate_pressure+1,w
 16197  0BAF  3BDB               	subwfb	??_compensate_pressure+5,f
 16198  0BB0  0858               	movf	??_compensate_pressure+2,w
 16199  0BB1  3BDC               	subwfb	??_compensate_pressure+6,f
 16200  0BB2  0859               	movf	??_compensate_pressure+3,w
 16201  0BB3  3BDD               	subwfb	??_compensate_pressure+7,f
 16202  0BB4  085A               	movf	??_compensate_pressure+4,w
 16203  0BB5  00DE               	movwf	??_compensate_pressure+8
 16204  0BB6  085B               	movf	??_compensate_pressure+5,w
 16205  0BB7  00DF               	movwf	??_compensate_pressure+9
 16206  0BB8  085C               	movf	??_compensate_pressure+6,w
 16207  0BB9  00E0               	movwf	??_compensate_pressure+10
 16208  0BBA  085D               	movf	??_compensate_pressure+7,w
 16209  0BBB  00E1               	movwf	??_compensate_pressure+11
 16210  0BBC  01E2               	clrf	??_compensate_pressure+12
 16211  0BBD  01E3               	clrf	??_compensate_pressure+13
 16212  0BBE  01E4               	clrf	??_compensate_pressure+14
 16213  0BBF  01E5               	clrf	??_compensate_pressure+15
 16214  0BC0  0865               	movf	??_compensate_pressure+15,w
 16215  0BC1  0021               	movlb	1	; select bank1
 16216  0BC2  00DC               	movwf	(compensate_pressure@var4+7)^(0+128)
 16217  0BC3  0020               	movlb	0	; select bank0
 16218  0BC4  0864               	movf	??_compensate_pressure+14,w
 16219  0BC5  0021               	movlb	1	; select bank1
 16220  0BC6  00DB               	movwf	(compensate_pressure@var4+6)^(0+128)
 16221  0BC7  0020               	movlb	0	; select bank0
 16222  0BC8  0863               	movf	??_compensate_pressure+13,w
 16223  0BC9  0021               	movlb	1	; select bank1
 16224  0BCA  00DA               	movwf	(compensate_pressure@var4+5)^(0+128)
 16225  0BCB  0020               	movlb	0	; select bank0
 16226  0BCC  0862               	movf	??_compensate_pressure+12,w
 16227  0BCD  0021               	movlb	1	; select bank1
 16228  0BCE  00D9               	movwf	(compensate_pressure@var4+4)^(0+128)
 16229  0BCF  0020               	movlb	0	; select bank0
 16230  0BD0  0861               	movf	??_compensate_pressure+11,w
 16231  0BD1  0021               	movlb	1	; select bank1
 16232  0BD2  00D8               	movwf	(compensate_pressure@var4+3)^(0+128)
 16233  0BD3  0020               	movlb	0	; select bank0
 16234  0BD4  0860               	movf	??_compensate_pressure+10,w
 16235  0BD5  0021               	movlb	1	; select bank1
 16236  0BD6  00D7               	movwf	(compensate_pressure@var4+2)^(0+128)
 16237  0BD7  0020               	movlb	0	; select bank0
 16238  0BD8  085F               	movf	??_compensate_pressure+9,w
 16239  0BD9  0021               	movlb	1	; select bank1
 16240  0BDA  00D6               	movwf	(compensate_pressure@var4+1)^(0+128)
 16241  0BDB  0020               	movlb	0	; select bank0
 16242  0BDC  085E               	movf	??_compensate_pressure+8,w
 16243  0BDD  0021               	movlb	1	; select bank1
 16244  0BDE  00D5               	movwf	compensate_pressure@var4^(0+128)
 16245                           
 16246                           ;BME280_driver/bme280.c: 1182:         var4 = (((var4 * 2147483648LL) - var2) * 3125) / 
      +                          var1;
 16247  0BDF  085D               	movf	compensate_pressure@var1^(0+128),w
 16248  0BE0  0020               	movlb	0	; select bank0
 16249  0BE1  00B8               	movwf	___aodiv@divisor
 16250  0BE2  0021               	movlb	1	; select bank1
 16251  0BE3  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 16252  0BE4  0020               	movlb	0	; select bank0
 16253  0BE5  00B9               	movwf	___aodiv@divisor+1
 16254  0BE6  0021               	movlb	1	; select bank1
 16255  0BE7  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 16256  0BE8  0020               	movlb	0	; select bank0
 16257  0BE9  00BA               	movwf	___aodiv@divisor+2
 16258  0BEA  0021               	movlb	1	; select bank1
 16259  0BEB  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 16260  0BEC  0020               	movlb	0	; select bank0
 16261  0BED  00BB               	movwf	___aodiv@divisor+3
 16262  0BEE  0021               	movlb	1	; select bank1
 16263  0BEF  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 16264  0BF0  0020               	movlb	0	; select bank0
 16265  0BF1  00BC               	movwf	___aodiv@divisor+4
 16266  0BF2  0021               	movlb	1	; select bank1
 16267  0BF3  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 16268  0BF4  0020               	movlb	0	; select bank0
 16269  0BF5  00BD               	movwf	___aodiv@divisor+5
 16270  0BF6  0021               	movlb	1	; select bank1
 16271  0BF7  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 16272  0BF8  0020               	movlb	0	; select bank0
 16273  0BF9  00BE               	movwf	___aodiv@divisor+6
 16274  0BFA  0021               	movlb	1	; select bank1
 16275  0BFB  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 16276  0BFC  0020               	movlb	0	; select bank0
 16277  0BFD  00BF               	movwf	___aodiv@divisor+7
 16278  0BFE  30D5               	movlw	low compensate_pressure@var4
 16279  0BFF  0086               	movwf	6
 16280  0C00  3000               	movlw	high compensate_pressure@var4
 16281  0C01  0087               	movwf	7
 16282  0C02  3F40               	moviw [0]fsr1
 16283  0C03  00D6               	movwf	??_compensate_pressure
 16284  0C04  3F41               	moviw [1]fsr1
 16285  0C05  00D7               	movwf	??_compensate_pressure+1
 16286  0C06  3F42               	moviw [2]fsr1
 16287  0C07  00D8               	movwf	??_compensate_pressure+2
 16288  0C08  3F43               	moviw [3]fsr1
 16289  0C09  00D9               	movwf	??_compensate_pressure+3
 16290  0C0A  3F44               	moviw [4]fsr1
 16291  0C0B  00DA               	movwf	??_compensate_pressure+4
 16292  0C0C  3F45               	moviw [5]fsr1
 16293  0C0D  00DB               	movwf	??_compensate_pressure+5
 16294  0C0E  3F46               	moviw [6]fsr1
 16295  0C0F  00DC               	movwf	??_compensate_pressure+6
 16296  0C10  3F47               	moviw [7]fsr1
 16297  0C11  00DD               	movwf	??_compensate_pressure+7
 16298  0C12  301F               	movlw	31
 16299  0C13                     u5025:	
 16300  0C13  0020               	movlb	0	; select bank0
 16301  0C14  35D6               	lslf	??_compensate_pressure,f
 16302  0C15  0DD7               	rlf	??_compensate_pressure+1,f
 16303  0C16  0DD8               	rlf	??_compensate_pressure+2,f
 16304  0C17  0DD9               	rlf	??_compensate_pressure+3,f
 16305  0C18  0DDA               	rlf	??_compensate_pressure+4,f
 16306  0C19  0DDB               	rlf	??_compensate_pressure+5,f
 16307  0C1A  0DDC               	rlf	??_compensate_pressure+6,f
 16308  0C1B  0DDD               	rlf	??_compensate_pressure+7,f
 16309  0C1C  0B89               	decfsz	9,f
 16310  0C1D  2C13               	goto	u5025
 16311  0C1E  0021               	movlb	1	; select bank1
 16312  0C1F  084D               	movf	compensate_pressure@var2^(0+128),w
 16313  0C20  0020               	movlb	0	; select bank0
 16314  0C21  02D6               	subwf	??_compensate_pressure,f
 16315  0C22  0021               	movlb	1	; select bank1
 16316  0C23  084E               	movf	(compensate_pressure@var2+1)^(0+128),w
 16317  0C24  0020               	movlb	0	; select bank0
 16318  0C25  3BD7               	subwfb	??_compensate_pressure+1,f
 16319  0C26  0021               	movlb	1	; select bank1
 16320  0C27  084F               	movf	(compensate_pressure@var2+2)^(0+128),w
 16321  0C28  0020               	movlb	0	; select bank0
 16322  0C29  3BD8               	subwfb	??_compensate_pressure+2,f
 16323  0C2A  0021               	movlb	1	; select bank1
 16324  0C2B  0850               	movf	(compensate_pressure@var2+3)^(0+128),w
 16325  0C2C  0020               	movlb	0	; select bank0
 16326  0C2D  3BD9               	subwfb	??_compensate_pressure+3,f
 16327  0C2E  0021               	movlb	1	; select bank1
 16328  0C2F  0851               	movf	(compensate_pressure@var2+4)^(0+128),w
 16329  0C30  0020               	movlb	0	; select bank0
 16330  0C31  3BDA               	subwfb	??_compensate_pressure+4,f
 16331  0C32  0021               	movlb	1	; select bank1
 16332  0C33  0852               	movf	(compensate_pressure@var2+5)^(0+128),w
 16333  0C34  0020               	movlb	0	; select bank0
 16334  0C35  3BDB               	subwfb	??_compensate_pressure+5,f
 16335  0C36  0021               	movlb	1	; select bank1
 16336  0C37  0853               	movf	(compensate_pressure@var2+6)^(0+128),w
 16337  0C38  0020               	movlb	0	; select bank0
 16338  0C39  3BDC               	subwfb	??_compensate_pressure+6,f
 16339  0C3A  0021               	movlb	1	; select bank1
 16340  0C3B  0854               	movf	(compensate_pressure@var2+7)^(0+128),w
 16341  0C3C  0020               	movlb	0	; select bank0
 16342  0C3D  3BDD               	subwfb	??_compensate_pressure+7,f
 16343  0C3E  085D               	movf	??_compensate_pressure+7,w
 16344  0C3F  00A7               	movwf	___omul@multiplier+7
 16345  0C40  085C               	movf	??_compensate_pressure+6,w
 16346  0C41  00A6               	movwf	___omul@multiplier+6
 16347  0C42  085B               	movf	??_compensate_pressure+5,w
 16348  0C43  00A5               	movwf	___omul@multiplier+5
 16349  0C44  085A               	movf	??_compensate_pressure+4,w
 16350  0C45  00A4               	movwf	___omul@multiplier+4
 16351  0C46  0859               	movf	??_compensate_pressure+3,w
 16352  0C47  00A3               	movwf	___omul@multiplier+3
 16353  0C48  0858               	movf	??_compensate_pressure+2,w
 16354  0C49  00A2               	movwf	___omul@multiplier+2
 16355  0C4A  0857               	movf	??_compensate_pressure+1,w
 16356  0C4B  00A1               	movwf	___omul@multiplier+1
 16357  0C4C  0856               	movf	??_compensate_pressure,w
 16358  0C4D  00A0               	movwf	___omul@multiplier
 16359  0C4E  3000               	movlw	0
 16360  0C4F  00AF               	movwf	___omul@multiplicand+7
 16361  0C50  3000               	movlw	0
 16362  0C51  00AE               	movwf	___omul@multiplicand+6
 16363  0C52  3000               	movlw	0
 16364  0C53  00AD               	movwf	___omul@multiplicand+5
 16365  0C54  3000               	movlw	0
 16366  0C55  00AC               	movwf	___omul@multiplicand+4
 16367  0C56  3000               	movlw	0
 16368  0C57  00AB               	movwf	___omul@multiplicand+3
 16369  0C58  3000               	movlw	0
 16370  0C59  00AA               	movwf	___omul@multiplicand+2
 16371  0C5A  300C               	movlw	12
 16372  0C5B  00A9               	movwf	___omul@multiplicand+1
 16373  0C5C  3035               	movlw	53
 16374  0C5D  00A8               	movwf	___omul@multiplicand
 16375  0C5E  319E  26DF  3188   	fcall	___omul
 16376  0C61  0820               	movf	?___omul,w
 16377  0C62  00C0               	movwf	___aodiv@dividend
 16378  0C63  0821               	movf	?___omul+1,w
 16379  0C64  00C1               	movwf	___aodiv@dividend+1
 16380  0C65  0822               	movf	?___omul+2,w
 16381  0C66  00C2               	movwf	___aodiv@dividend+2
 16382  0C67  0823               	movf	?___omul+3,w
 16383  0C68  00C3               	movwf	___aodiv@dividend+3
 16384  0C69  0824               	movf	?___omul+4,w
 16385  0C6A  00C4               	movwf	___aodiv@dividend+4
 16386  0C6B  0825               	movf	?___omul+5,w
 16387  0C6C  00C5               	movwf	___aodiv@dividend+5
 16388  0C6D  0826               	movf	?___omul+6,w
 16389  0C6E  00C6               	movwf	___aodiv@dividend+6
 16390  0C6F  0827               	movf	?___omul+7,w
 16391  0C70  00C7               	movwf	___aodiv@dividend+7
 16392  0C71  3197  270B  3188   	fcall	___aodiv
 16393  0C74  0838               	movf	?___aodiv,w
 16394  0C75  0021               	movlb	1	; select bank1
 16395  0C76  00D5               	movwf	compensate_pressure@var4^(0+128)
 16396  0C77  0020               	movlb	0	; select bank0
 16397  0C78  0839               	movf	?___aodiv+1,w
 16398  0C79  0021               	movlb	1	; select bank1
 16399  0C7A  00D6               	movwf	(compensate_pressure@var4+1)^(0+128)
 16400  0C7B  0020               	movlb	0	; select bank0
 16401  0C7C  083A               	movf	?___aodiv+2,w
 16402  0C7D  0021               	movlb	1	; select bank1
 16403  0C7E  00D7               	movwf	(compensate_pressure@var4+2)^(0+128)
 16404  0C7F  0020               	movlb	0	; select bank0
 16405  0C80  083B               	movf	?___aodiv+3,w
 16406  0C81  0021               	movlb	1	; select bank1
 16407  0C82  00D8               	movwf	(compensate_pressure@var4+3)^(0+128)
 16408  0C83  0020               	movlb	0	; select bank0
 16409  0C84  083C               	movf	?___aodiv+4,w
 16410  0C85  0021               	movlb	1	; select bank1
 16411  0C86  00D9               	movwf	(compensate_pressure@var4+4)^(0+128)
 16412  0C87  0020               	movlb	0	; select bank0
 16413  0C88  083D               	movf	?___aodiv+5,w
 16414  0C89  0021               	movlb	1	; select bank1
 16415  0C8A  00DA               	movwf	(compensate_pressure@var4+5)^(0+128)
 16416  0C8B  0020               	movlb	0	; select bank0
 16417  0C8C  083E               	movf	?___aodiv+6,w
 16418  0C8D  0021               	movlb	1	; select bank1
 16419  0C8E  00DB               	movwf	(compensate_pressure@var4+6)^(0+128)
 16420  0C8F  0020               	movlb	0	; select bank0
 16421  0C90  083F               	movf	?___aodiv+7,w
 16422  0C91  0021               	movlb	1	; select bank1
 16423  0C92  00DC               	movwf	(compensate_pressure@var4+7)^(0+128)
 16424                           
 16425                           ;BME280_driver/bme280.c: 1183:         var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8
      +                          192) * (var4 / 8192)) / 33554432;
 16426  0C93  0020               	movlb	0	; select bank0
 16427  0C94  0852               	movf	compensate_pressure@calib_data,w
 16428  0C95  3E16               	addlw	22
 16429  0C96  0086               	movwf	6
 16430  0C97  3001               	movlw	1	; select bank2/3
 16431  0C98  0087               	movwf	7
 16432  0C99  3F40               	moviw [0]fsr1
 16433  0C9A  00D6               	movwf	??_compensate_pressure
 16434  0C9B  3F41               	moviw [1]fsr1
 16435  0C9C  00D7               	movwf	??_compensate_pressure+1
 16436  0C9D  0856               	movf	??_compensate_pressure,w
 16437  0C9E  00A0               	movwf	___omul@multiplier
 16438  0C9F  0857               	movf	??_compensate_pressure+1,w
 16439  0CA0  00A1               	movwf	___omul@multiplier+1
 16440  0CA1  0D89               	rlf	9,f
 16441  0CA2  3B89               	subwfb	9,f
 16442  0CA3  0989               	comf	9,f
 16443  0CA4  00A2               	movwf	___omul@multiplier+2
 16444  0CA5  00A3               	movwf	___omul@multiplier+3
 16445  0CA6  00A4               	movwf	___omul@multiplier+4
 16446  0CA7  00A5               	movwf	___omul@multiplier+5
 16447  0CA8  00A6               	movwf	___omul@multiplier+6
 16448  0CA9  00A7               	movwf	___omul@multiplier+7
 16449  0CAA  3000               	movlw	0
 16450  0CAB  00BF               	movwf	___aodiv@divisor+7
 16451  0CAC  3000               	movlw	0
 16452  0CAD  00BE               	movwf	___aodiv@divisor+6
 16453  0CAE  3000               	movlw	0
 16454  0CAF  00BD               	movwf	___aodiv@divisor+5
 16455  0CB0  3000               	movlw	0
 16456  0CB1  00BC               	movwf	___aodiv@divisor+4
 16457  0CB2  3000               	movlw	0
 16458  0CB3  00BB               	movwf	___aodiv@divisor+3
 16459  0CB4  3000               	movlw	0
 16460  0CB5  00BA               	movwf	___aodiv@divisor+2
 16461  0CB6  3020               	movlw	32
 16462  0CB7  00B9               	movwf	___aodiv@divisor+1
 16463  0CB8  3000               	movlw	0
 16464  0CB9  00B8               	movwf	___aodiv@divisor
 16465  0CBA  0021               	movlb	1	; select bank1
 16466  0CBB  0855               	movf	compensate_pressure@var4^(0+128),w
 16467  0CBC  0020               	movlb	0	; select bank0
 16468  0CBD  00C0               	movwf	___aodiv@dividend
 16469  0CBE  0021               	movlb	1	; select bank1
 16470  0CBF  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 16471  0CC0  0020               	movlb	0	; select bank0
 16472  0CC1  00C1               	movwf	___aodiv@dividend+1
 16473  0CC2  0021               	movlb	1	; select bank1
 16474  0CC3  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 16475  0CC4  0020               	movlb	0	; select bank0
 16476  0CC5  00C2               	movwf	___aodiv@dividend+2
 16477  0CC6  0021               	movlb	1	; select bank1
 16478  0CC7  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 16479  0CC8  0020               	movlb	0	; select bank0
 16480  0CC9  00C3               	movwf	___aodiv@dividend+3
 16481  0CCA  0021               	movlb	1	; select bank1
 16482  0CCB  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 16483  0CCC  0020               	movlb	0	; select bank0
 16484  0CCD  00C4               	movwf	___aodiv@dividend+4
 16485  0CCE  0021               	movlb	1	; select bank1
 16486  0CCF  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 16487  0CD0  0020               	movlb	0	; select bank0
 16488  0CD1  00C5               	movwf	___aodiv@dividend+5
 16489  0CD2  0021               	movlb	1	; select bank1
 16490  0CD3  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 16491  0CD4  0020               	movlb	0	; select bank0
 16492  0CD5  00C6               	movwf	___aodiv@dividend+6
 16493  0CD6  0021               	movlb	1	; select bank1
 16494  0CD7  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 16495  0CD8  0020               	movlb	0	; select bank0
 16496  0CD9  00C7               	movwf	___aodiv@dividend+7
 16497  0CDA  3197  270B  3188   	fcall	___aodiv
 16498  0CDD  0838               	movf	?___aodiv,w
 16499  0CDE  00A8               	movwf	___omul@multiplicand
 16500  0CDF  0839               	movf	?___aodiv+1,w
 16501  0CE0  00A9               	movwf	___omul@multiplicand+1
 16502  0CE1  083A               	movf	?___aodiv+2,w
 16503  0CE2  00AA               	movwf	___omul@multiplicand+2
 16504  0CE3  083B               	movf	?___aodiv+3,w
 16505  0CE4  00AB               	movwf	___omul@multiplicand+3
 16506  0CE5  083C               	movf	?___aodiv+4,w
 16507  0CE6  00AC               	movwf	___omul@multiplicand+4
 16508  0CE7  083D               	movf	?___aodiv+5,w
 16509  0CE8  00AD               	movwf	___omul@multiplicand+5
 16510  0CE9  083E               	movf	?___aodiv+6,w
 16511  0CEA  00AE               	movwf	___omul@multiplicand+6
 16512  0CEB  083F               	movf	?___aodiv+7,w
 16513  0CEC  00AF               	movwf	___omul@multiplicand+7
 16514  0CED  319E  26DF  3188   	fcall	___omul
 16515  0CF0  0820               	movf	?___omul,w
 16516  0CF1  0021               	movlb	1	; select bank1
 16517  0CF2  00C1               	movwf	_compensate_pressure$2549^(0+128)
 16518  0CF3  0020               	movlb	0	; select bank0
 16519  0CF4  0821               	movf	?___omul+1,w
 16520  0CF5  0021               	movlb	1	; select bank1
 16521  0CF6  00C2               	movwf	(_compensate_pressure$2549+1)^(0+128)
 16522  0CF7  0020               	movlb	0	; select bank0
 16523  0CF8  0822               	movf	?___omul+2,w
 16524  0CF9  0021               	movlb	1	; select bank1
 16525  0CFA  00C3               	movwf	(_compensate_pressure$2549+2)^(0+128)
 16526  0CFB  0020               	movlb	0	; select bank0
 16527  0CFC  0823               	movf	?___omul+3,w
 16528  0CFD  0021               	movlb	1	; select bank1
 16529  0CFE  00C4               	movwf	(_compensate_pressure$2549+3)^(0+128)
 16530  0CFF  0020               	movlb	0	; select bank0
 16531  0D00  0824               	movf	?___omul+4,w
 16532  0D01  0021               	movlb	1	; select bank1
 16533  0D02  00C5               	movwf	(_compensate_pressure$2549+4)^(0+128)
 16534  0D03  0020               	movlb	0	; select bank0
 16535  0D04  0825               	movf	?___omul+5,w
 16536  0D05  0021               	movlb	1	; select bank1
 16537  0D06  00C6               	movwf	(_compensate_pressure$2549+5)^(0+128)
 16538  0D07  0020               	movlb	0	; select bank0
 16539  0D08  0826               	movf	?___omul+6,w
 16540  0D09  0021               	movlb	1	; select bank1
 16541  0D0A  00C7               	movwf	(_compensate_pressure$2549+6)^(0+128)
 16542  0D0B  0020               	movlb	0	; select bank0
 16543  0D0C  0827               	movf	?___omul+7,w
 16544  0D0D  0021               	movlb	1	; select bank1
 16545  0D0E  00C8               	movwf	(_compensate_pressure$2549+7)^(0+128)
 16546                           
 16547                           ;BME280_driver/bme280.c: 1183:         var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8
      +                          192) * (var4 / 8192)) / 33554432;
 16548  0D0F  0841               	movf	_compensate_pressure$2549^(0+128),w
 16549  0D10  0020               	movlb	0	; select bank0
 16550  0D11  00A0               	movwf	___omul@multiplier
 16551  0D12  0021               	movlb	1	; select bank1
 16552  0D13  0842               	movf	(_compensate_pressure$2549+1)^(0+128),w
 16553  0D14  0020               	movlb	0	; select bank0
 16554  0D15  00A1               	movwf	___omul@multiplier+1
 16555  0D16  0021               	movlb	1	; select bank1
 16556  0D17  0843               	movf	(_compensate_pressure$2549+2)^(0+128),w
 16557  0D18  0020               	movlb	0	; select bank0
 16558  0D19  00A2               	movwf	___omul@multiplier+2
 16559  0D1A  0021               	movlb	1	; select bank1
 16560  0D1B  0844               	movf	(_compensate_pressure$2549+3)^(0+128),w
 16561  0D1C  0020               	movlb	0	; select bank0
 16562  0D1D  00A3               	movwf	___omul@multiplier+3
 16563  0D1E  0021               	movlb	1	; select bank1
 16564  0D1F  0845               	movf	(_compensate_pressure$2549+4)^(0+128),w
 16565  0D20  0020               	movlb	0	; select bank0
 16566  0D21  00A4               	movwf	___omul@multiplier+4
 16567  0D22  0021               	movlb	1	; select bank1
 16568  0D23  0846               	movf	(_compensate_pressure$2549+5)^(0+128),w
 16569  0D24  0020               	movlb	0	; select bank0
 16570  0D25  00A5               	movwf	___omul@multiplier+5
 16571  0D26  0021               	movlb	1	; select bank1
 16572  0D27  0847               	movf	(_compensate_pressure$2549+6)^(0+128),w
 16573  0D28  0020               	movlb	0	; select bank0
 16574  0D29  00A6               	movwf	___omul@multiplier+6
 16575  0D2A  0021               	movlb	1	; select bank1
 16576  0D2B  0848               	movf	(_compensate_pressure$2549+7)^(0+128),w
 16577  0D2C  0020               	movlb	0	; select bank0
 16578  0D2D  00A7               	movwf	___omul@multiplier+7
 16579  0D2E  3000               	movlw	0
 16580  0D2F  00BF               	movwf	___aodiv@divisor+7
 16581  0D30  3000               	movlw	0
 16582  0D31  00BE               	movwf	___aodiv@divisor+6
 16583  0D32  3000               	movlw	0
 16584  0D33  00BD               	movwf	___aodiv@divisor+5
 16585  0D34  3000               	movlw	0
 16586  0D35  00BC               	movwf	___aodiv@divisor+4
 16587  0D36  3000               	movlw	0
 16588  0D37  00BB               	movwf	___aodiv@divisor+3
 16589  0D38  3000               	movlw	0
 16590  0D39  00BA               	movwf	___aodiv@divisor+2
 16591  0D3A  3020               	movlw	32
 16592  0D3B  00B9               	movwf	___aodiv@divisor+1
 16593  0D3C  3000               	movlw	0
 16594  0D3D  00B8               	movwf	___aodiv@divisor
 16595  0D3E  0021               	movlb	1	; select bank1
 16596  0D3F  0855               	movf	compensate_pressure@var4^(0+128),w
 16597  0D40  0020               	movlb	0	; select bank0
 16598  0D41  00C0               	movwf	___aodiv@dividend
 16599  0D42  0021               	movlb	1	; select bank1
 16600  0D43  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 16601  0D44  0020               	movlb	0	; select bank0
 16602  0D45  00C1               	movwf	___aodiv@dividend+1
 16603  0D46  0021               	movlb	1	; select bank1
 16604  0D47  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 16605  0D48  0020               	movlb	0	; select bank0
 16606  0D49  00C2               	movwf	___aodiv@dividend+2
 16607  0D4A  0021               	movlb	1	; select bank1
 16608  0D4B  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 16609  0D4C  0020               	movlb	0	; select bank0
 16610  0D4D  00C3               	movwf	___aodiv@dividend+3
 16611  0D4E  0021               	movlb	1	; select bank1
 16612  0D4F  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 16613  0D50  0020               	movlb	0	; select bank0
 16614  0D51  00C4               	movwf	___aodiv@dividend+4
 16615  0D52  0021               	movlb	1	; select bank1
 16616  0D53  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 16617  0D54  0020               	movlb	0	; select bank0
 16618  0D55  00C5               	movwf	___aodiv@dividend+5
 16619  0D56  0021               	movlb	1	; select bank1
 16620  0D57  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 16621  0D58  0020               	movlb	0	; select bank0
 16622  0D59  00C6               	movwf	___aodiv@dividend+6
 16623  0D5A  0021               	movlb	1	; select bank1
 16624  0D5B  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 16625  0D5C  0020               	movlb	0	; select bank0
 16626  0D5D  00C7               	movwf	___aodiv@dividend+7
 16627  0D5E  3197  270B  3188   	fcall	___aodiv
 16628  0D61  0838               	movf	?___aodiv,w
 16629  0D62  00A8               	movwf	___omul@multiplicand
 16630  0D63  0839               	movf	?___aodiv+1,w
 16631  0D64  00A9               	movwf	___omul@multiplicand+1
 16632  0D65  083A               	movf	?___aodiv+2,w
 16633  0D66  00AA               	movwf	___omul@multiplicand+2
 16634  0D67  083B               	movf	?___aodiv+3,w
 16635  0D68  00AB               	movwf	___omul@multiplicand+3
 16636  0D69  083C               	movf	?___aodiv+4,w
 16637  0D6A  00AC               	movwf	___omul@multiplicand+4
 16638  0D6B  083D               	movf	?___aodiv+5,w
 16639  0D6C  00AD               	movwf	___omul@multiplicand+5
 16640  0D6D  083E               	movf	?___aodiv+6,w
 16641  0D6E  00AE               	movwf	___omul@multiplicand+6
 16642  0D6F  083F               	movf	?___aodiv+7,w
 16643  0D70  00AF               	movwf	___omul@multiplicand+7
 16644  0D71  319E  26DF  3188   	fcall	___omul
 16645  0D74  0820               	movf	?___omul,w
 16646  0D75  0021               	movlb	1	; select bank1
 16647  0D76  00A8               	movwf	_compensate_pressure$2550^(0+128)
 16648  0D77  0020               	movlb	0	; select bank0
 16649  0D78  0821               	movf	?___omul+1,w
 16650  0D79  0021               	movlb	1	; select bank1
 16651  0D7A  00A9               	movwf	(_compensate_pressure$2550+1)^(0+128)
 16652  0D7B  0020               	movlb	0	; select bank0
 16653  0D7C  0822               	movf	?___omul+2,w
 16654  0D7D  0021               	movlb	1	; select bank1
 16655  0D7E  00AA               	movwf	(_compensate_pressure$2550+2)^(0+128)
 16656  0D7F  0020               	movlb	0	; select bank0
 16657  0D80  0823               	movf	?___omul+3,w
 16658  0D81  0021               	movlb	1	; select bank1
 16659  0D82  00AB               	movwf	(_compensate_pressure$2550+3)^(0+128)
 16660  0D83  0020               	movlb	0	; select bank0
 16661  0D84  0824               	movf	?___omul+4,w
 16662  0D85  0021               	movlb	1	; select bank1
 16663  0D86  00AC               	movwf	(_compensate_pressure$2550+4)^(0+128)
 16664  0D87  0020               	movlb	0	; select bank0
 16665  0D88  0825               	movf	?___omul+5,w
 16666  0D89  0021               	movlb	1	; select bank1
 16667  0D8A  00AD               	movwf	(_compensate_pressure$2550+5)^(0+128)
 16668  0D8B  0020               	movlb	0	; select bank0
 16669  0D8C  0826               	movf	?___omul+6,w
 16670  0D8D  0021               	movlb	1	; select bank1
 16671  0D8E  00AE               	movwf	(_compensate_pressure$2550+6)^(0+128)
 16672  0D8F  0020               	movlb	0	; select bank0
 16673  0D90  0827               	movf	?___omul+7,w
 16674  0D91  0021               	movlb	1	; select bank1
 16675  0D92  00AF               	movwf	(_compensate_pressure$2550+7)^(0+128)
 16676                           
 16677                           ;BME280_driver/bme280.c: 1183:         var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8
      +                          192) * (var4 / 8192)) / 33554432;
 16678  0D93  3000               	movlw	0
 16679  0D94  0020               	movlb	0	; select bank0
 16680  0D95  00BF               	movwf	___aodiv@divisor+7
 16681  0D96  3000               	movlw	0
 16682  0D97  00BE               	movwf	___aodiv@divisor+6
 16683  0D98  3000               	movlw	0
 16684  0D99  00BD               	movwf	___aodiv@divisor+5
 16685  0D9A  3000               	movlw	0
 16686  0D9B  00BC               	movwf	___aodiv@divisor+4
 16687  0D9C  3002               	movlw	2
 16688  0D9D  00BB               	movwf	___aodiv@divisor+3
 16689  0D9E  3000               	movlw	0
 16690  0D9F  00BA               	movwf	___aodiv@divisor+2
 16691  0DA0  3000               	movlw	0
 16692  0DA1  00B9               	movwf	___aodiv@divisor+1
 16693  0DA2  3000               	movlw	0
 16694  0DA3  00B8               	movwf	___aodiv@divisor
 16695  0DA4  0021               	movlb	1	; select bank1
 16696  0DA5  0828               	movf	_compensate_pressure$2550^(0+128),w
 16697  0DA6  0020               	movlb	0	; select bank0
 16698  0DA7  00C0               	movwf	___aodiv@dividend
 16699  0DA8  0021               	movlb	1	; select bank1
 16700  0DA9  0829               	movf	(_compensate_pressure$2550+1)^(0+128),w
 16701  0DAA  0020               	movlb	0	; select bank0
 16702  0DAB  00C1               	movwf	___aodiv@dividend+1
 16703  0DAC  0021               	movlb	1	; select bank1
 16704  0DAD  082A               	movf	(_compensate_pressure$2550+2)^(0+128),w
 16705  0DAE  0020               	movlb	0	; select bank0
 16706  0DAF  00C2               	movwf	___aodiv@dividend+2
 16707  0DB0  0021               	movlb	1	; select bank1
 16708  0DB1  082B               	movf	(_compensate_pressure$2550+3)^(0+128),w
 16709  0DB2  0020               	movlb	0	; select bank0
 16710  0DB3  00C3               	movwf	___aodiv@dividend+3
 16711  0DB4  0021               	movlb	1	; select bank1
 16712  0DB5  082C               	movf	(_compensate_pressure$2550+4)^(0+128),w
 16713  0DB6  0020               	movlb	0	; select bank0
 16714  0DB7  00C4               	movwf	___aodiv@dividend+4
 16715  0DB8  0021               	movlb	1	; select bank1
 16716  0DB9  082D               	movf	(_compensate_pressure$2550+5)^(0+128),w
 16717  0DBA  0020               	movlb	0	; select bank0
 16718  0DBB  00C5               	movwf	___aodiv@dividend+5
 16719  0DBC  0021               	movlb	1	; select bank1
 16720  0DBD  082E               	movf	(_compensate_pressure$2550+6)^(0+128),w
 16721  0DBE  0020               	movlb	0	; select bank0
 16722  0DBF  00C6               	movwf	___aodiv@dividend+6
 16723  0DC0  0021               	movlb	1	; select bank1
 16724  0DC1  082F               	movf	(_compensate_pressure$2550+7)^(0+128),w
 16725  0DC2  0020               	movlb	0	; select bank0
 16726  0DC3  00C7               	movwf	___aodiv@dividend+7
 16727  0DC4  3197  270B  3188   	fcall	___aodiv
 16728  0DC7  0838               	movf	?___aodiv,w
 16729  0DC8  0021               	movlb	1	; select bank1
 16730  0DC9  00DD               	movwf	compensate_pressure@var1^(0+128)
 16731  0DCA  0020               	movlb	0	; select bank0
 16732  0DCB  0839               	movf	?___aodiv+1,w
 16733  0DCC  0021               	movlb	1	; select bank1
 16734  0DCD  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
 16735  0DCE  0020               	movlb	0	; select bank0
 16736  0DCF  083A               	movf	?___aodiv+2,w
 16737  0DD0  0021               	movlb	1	; select bank1
 16738  0DD1  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
 16739  0DD2  0020               	movlb	0	; select bank0
 16740  0DD3  083B               	movf	?___aodiv+3,w
 16741  0DD4  0021               	movlb	1	; select bank1
 16742  0DD5  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
 16743  0DD6  0020               	movlb	0	; select bank0
 16744  0DD7  083C               	movf	?___aodiv+4,w
 16745  0DD8  0021               	movlb	1	; select bank1
 16746  0DD9  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
 16747  0DDA  0020               	movlb	0	; select bank0
 16748  0DDB  083D               	movf	?___aodiv+5,w
 16749  0DDC  0021               	movlb	1	; select bank1
 16750  0DDD  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
 16751  0DDE  0020               	movlb	0	; select bank0
 16752  0DDF  083E               	movf	?___aodiv+6,w
 16753  0DE0  0021               	movlb	1	; select bank1
 16754  0DE1  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
 16755  0DE2  0020               	movlb	0	; select bank0
 16756  0DE3  083F               	movf	?___aodiv+7,w
 16757  0DE4  0021               	movlb	1	; select bank1
 16758  0DE5  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
 16759                           
 16760                           ;BME280_driver/bme280.c: 1184:         var2 = (((int64_t)calib_data->dig_P8) * var4) / 5
      +                          24288;
 16761  0DE6  3000               	movlw	0
 16762  0DE7  0020               	movlb	0	; select bank0
 16763  0DE8  00BF               	movwf	___aodiv@divisor+7
 16764  0DE9  3000               	movlw	0
 16765  0DEA  00BE               	movwf	___aodiv@divisor+6
 16766  0DEB  3000               	movlw	0
 16767  0DEC  00BD               	movwf	___aodiv@divisor+5
 16768  0DED  3000               	movlw	0
 16769  0DEE  00BC               	movwf	___aodiv@divisor+4
 16770  0DEF  3000               	movlw	0
 16771  0DF0  00BB               	movwf	___aodiv@divisor+3
 16772  0DF1  3008               	movlw	8
 16773  0DF2  00BA               	movwf	___aodiv@divisor+2
 16774  0DF3  3000               	movlw	0
 16775  0DF4  00B9               	movwf	___aodiv@divisor+1
 16776  0DF5  3000               	movlw	0
 16777  0DF6  00B8               	movwf	___aodiv@divisor
 16778  0DF7  0852               	movf	compensate_pressure@calib_data,w
 16779  0DF8  3E14               	addlw	20
 16780  0DF9  0086               	movwf	6
 16781  0DFA  3001               	movlw	1	; select bank2/3
 16782  0DFB  0087               	movwf	7
 16783  0DFC  3F40               	moviw [0]fsr1
 16784  0DFD  00D6               	movwf	??_compensate_pressure
 16785  0DFE  3F41               	moviw [1]fsr1
 16786  0DFF  00D7               	movwf	??_compensate_pressure+1
 16787  0E00  0856               	movf	??_compensate_pressure,w
 16788  0E01  00A0               	movwf	___omul@multiplier
 16789  0E02  0857               	movf	??_compensate_pressure+1,w
 16790  0E03  00A1               	movwf	___omul@multiplier+1
 16791  0E04  0D89               	rlf	9,f
 16792  0E05  3B89               	subwfb	9,f
 16793  0E06  0989               	comf	9,f
 16794  0E07  00A2               	movwf	___omul@multiplier+2
 16795  0E08  00A3               	movwf	___omul@multiplier+3
 16796  0E09  00A4               	movwf	___omul@multiplier+4
 16797  0E0A  00A5               	movwf	___omul@multiplier+5
 16798  0E0B  00A6               	movwf	___omul@multiplier+6
 16799  0E0C  00A7               	movwf	___omul@multiplier+7
 16800  0E0D  0021               	movlb	1	; select bank1
 16801  0E0E  0855               	movf	compensate_pressure@var4^(0+128),w
 16802  0E0F  0020               	movlb	0	; select bank0
 16803  0E10  00A8               	movwf	___omul@multiplicand
 16804  0E11  0021               	movlb	1	; select bank1
 16805  0E12  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 16806  0E13  0020               	movlb	0	; select bank0
 16807  0E14  00A9               	movwf	___omul@multiplicand+1
 16808  0E15  0021               	movlb	1	; select bank1
 16809  0E16  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 16810  0E17  0020               	movlb	0	; select bank0
 16811  0E18  00AA               	movwf	___omul@multiplicand+2
 16812  0E19  0021               	movlb	1	; select bank1
 16813  0E1A  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 16814  0E1B  0020               	movlb	0	; select bank0
 16815  0E1C  00AB               	movwf	___omul@multiplicand+3
 16816  0E1D  0021               	movlb	1	; select bank1
 16817  0E1E  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 16818  0E1F  0020               	movlb	0	; select bank0
 16819  0E20  00AC               	movwf	___omul@multiplicand+4
 16820  0E21  0021               	movlb	1	; select bank1
 16821  0E22  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 16822  0E23  0020               	movlb	0	; select bank0
 16823  0E24  00AD               	movwf	___omul@multiplicand+5
 16824  0E25  0021               	movlb	1	; select bank1
 16825  0E26  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 16826  0E27  0020               	movlb	0	; select bank0
 16827  0E28  00AE               	movwf	___omul@multiplicand+6
 16828  0E29  0021               	movlb	1	; select bank1
 16829  0E2A  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 16830  0E2B  0020               	movlb	0	; select bank0
 16831  0E2C  00AF               	movwf	___omul@multiplicand+7
 16832  0E2D  319E  26DF  3188   	fcall	___omul
 16833  0E30  0820               	movf	?___omul,w
 16834  0E31  00C0               	movwf	___aodiv@dividend
 16835  0E32  0821               	movf	?___omul+1,w
 16836  0E33  00C1               	movwf	___aodiv@dividend+1
 16837  0E34  0822               	movf	?___omul+2,w
 16838  0E35  00C2               	movwf	___aodiv@dividend+2
 16839  0E36  0823               	movf	?___omul+3,w
 16840  0E37  00C3               	movwf	___aodiv@dividend+3
 16841  0E38  0824               	movf	?___omul+4,w
 16842  0E39  00C4               	movwf	___aodiv@dividend+4
 16843  0E3A  0825               	movf	?___omul+5,w
 16844  0E3B  00C5               	movwf	___aodiv@dividend+5
 16845  0E3C  0826               	movf	?___omul+6,w
 16846  0E3D  00C6               	movwf	___aodiv@dividend+6
 16847  0E3E  0827               	movf	?___omul+7,w
 16848  0E3F  00C7               	movwf	___aodiv@dividend+7
 16849  0E40  3197  270B  3188   	fcall	___aodiv
 16850  0E43  0838               	movf	?___aodiv,w
 16851  0E44  0021               	movlb	1	; select bank1
 16852  0E45  00CD               	movwf	compensate_pressure@var2^(0+128)
 16853  0E46  0020               	movlb	0	; select bank0
 16854  0E47  0839               	movf	?___aodiv+1,w
 16855  0E48  0021               	movlb	1	; select bank1
 16856  0E49  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 16857  0E4A  0020               	movlb	0	; select bank0
 16858  0E4B  083A               	movf	?___aodiv+2,w
 16859  0E4C  0021               	movlb	1	; select bank1
 16860  0E4D  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 16861  0E4E  0020               	movlb	0	; select bank0
 16862  0E4F  083B               	movf	?___aodiv+3,w
 16863  0E50  0021               	movlb	1	; select bank1
 16864  0E51  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 16865  0E52  0020               	movlb	0	; select bank0
 16866  0E53  083C               	movf	?___aodiv+4,w
 16867  0E54  0021               	movlb	1	; select bank1
 16868  0E55  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 16869  0E56  0020               	movlb	0	; select bank0
 16870  0E57  083D               	movf	?___aodiv+5,w
 16871  0E58  0021               	movlb	1	; select bank1
 16872  0E59  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 16873  0E5A  0020               	movlb	0	; select bank0
 16874  0E5B  083E               	movf	?___aodiv+6,w
 16875  0E5C  0021               	movlb	1	; select bank1
 16876  0E5D  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 16877  0E5E  0020               	movlb	0	; select bank0
 16878  0E5F  083F               	movf	?___aodiv+7,w
 16879  0E60  0021               	movlb	1	; select bank1
 16880  0E61  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 16881                           
 16882                           ;BME280_driver/bme280.c: 1185:         var4 = ((var4 + var1 + var2) / 256) + (((int64_t)
      +                          calib_data->dig_P7) * 16);
 16883  0E62  0020               	movlb	0	; select bank0
 16884  0E63  0852               	movf	compensate_pressure@calib_data,w
 16885  0E64  3E12               	addlw	18
 16886  0E65  0086               	movwf	6
 16887  0E66  3001               	movlw	1	; select bank2/3
 16888  0E67  0087               	movwf	7
 16889  0E68  3F40               	moviw [0]fsr1
 16890  0E69  00D6               	movwf	??_compensate_pressure
 16891  0E6A  3F41               	moviw [1]fsr1
 16892  0E6B  00D7               	movwf	??_compensate_pressure+1
 16893  0E6C  0856               	movf	??_compensate_pressure,w
 16894  0E6D  00D8               	movwf	??_compensate_pressure+2
 16895  0E6E  0857               	movf	??_compensate_pressure+1,w
 16896  0E6F  00D9               	movwf	??_compensate_pressure+3
 16897  0E70  3000               	movlw	0
 16898  0E71  1BD9               	btfsc	??_compensate_pressure+3,7
 16899  0E72  30FF               	movlw	255
 16900  0E73  00DA               	movwf	??_compensate_pressure+4
 16901  0E74  00DB               	movwf	??_compensate_pressure+5
 16902  0E75  00DC               	movwf	??_compensate_pressure+6
 16903  0E76  00DD               	movwf	??_compensate_pressure+7
 16904  0E77  00DE               	movwf	??_compensate_pressure+8
 16905  0E78  00DF               	movwf	??_compensate_pressure+9
 16906  0E79  3004               	movlw	4
 16907  0E7A                     u5035:	
 16908  0E7A  0020               	movlb	0	; select bank0
 16909  0E7B  35D8               	lslf	??_compensate_pressure+2,f
 16910  0E7C  0DD9               	rlf	??_compensate_pressure+3,f
 16911  0E7D  0DDA               	rlf	??_compensate_pressure+4,f
 16912  0E7E  0DDB               	rlf	??_compensate_pressure+5,f
 16913  0E7F  0DDC               	rlf	??_compensate_pressure+6,f
 16914  0E80  0DDD               	rlf	??_compensate_pressure+7,f
 16915  0E81  0DDE               	rlf	??_compensate_pressure+8,f
 16916  0E82  0DDF               	rlf	??_compensate_pressure+9,f
 16917  0E83  0B89               	decfsz	9,f
 16918  0E84  2E7A               	goto	u5035
 16919  0E85  3000               	movlw	0
 16920  0E86  0020               	movlb	0	; select bank0
 16921  0E87  00BF               	movwf	___aodiv@divisor+7
 16922  0E88  3000               	movlw	0
 16923  0E89  00BE               	movwf	___aodiv@divisor+6
 16924  0E8A  3000               	movlw	0
 16925  0E8B  00BD               	movwf	___aodiv@divisor+5
 16926  0E8C  3000               	movlw	0
 16927  0E8D  00BC               	movwf	___aodiv@divisor+4
 16928  0E8E  3000               	movlw	0
 16929  0E8F  00BB               	movwf	___aodiv@divisor+3
 16930  0E90  3000               	movlw	0
 16931  0E91  00BA               	movwf	___aodiv@divisor+2
 16932  0E92  3001               	movlw	1
 16933  0E93  00B9               	movwf	___aodiv@divisor+1
 16934  0E94  3000               	movlw	0
 16935  0E95  00B8               	movwf	___aodiv@divisor
 16936  0E96  30CD               	movlw	low compensate_pressure@var2
 16937  0E97  0086               	movwf	6
 16938  0E98  3000               	movlw	high compensate_pressure@var2
 16939  0E99  0087               	movwf	7
 16940  0E9A  3F40               	moviw [0]fsr1
 16941  0E9B  00E0               	movwf	??_compensate_pressure+10
 16942  0E9C  3F41               	moviw [1]fsr1
 16943  0E9D  00E1               	movwf	??_compensate_pressure+11
 16944  0E9E  3F42               	moviw [2]fsr1
 16945  0E9F  00E2               	movwf	??_compensate_pressure+12
 16946  0EA0  3F43               	moviw [3]fsr1
 16947  0EA1  00E3               	movwf	??_compensate_pressure+13
 16948  0EA2  3F44               	moviw [4]fsr1
 16949  0EA3  00E4               	movwf	??_compensate_pressure+14
 16950  0EA4  3F45               	moviw [5]fsr1
 16951  0EA5  00E5               	movwf	??_compensate_pressure+15
 16952  0EA6  3F46               	moviw [6]fsr1
 16953  0EA7  00E6               	movwf	??_compensate_pressure+16
 16954  0EA8  3F47               	moviw [7]fsr1
 16955  0EA9  00E7               	movwf	??_compensate_pressure+17
 16956  0EAA  0021               	movlb	1	; select bank1
 16957  0EAB  0855               	movf	compensate_pressure@var4^(0+128),w
 16958  0EAC  075D               	addwf	compensate_pressure@var1^(0+128),w
 16959  0EAD  0020               	movlb	0	; select bank0
 16960  0EAE  00E8               	movwf	??_compensate_pressure+18
 16961  0EAF  0021               	movlb	1	; select bank1
 16962  0EB0  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 16963  0EB1  3D5E               	addwfc	(compensate_pressure@var1+1)^(0+128),w
 16964  0EB2  0020               	movlb	0	; select bank0
 16965  0EB3  00E9               	movwf	??_compensate_pressure+19
 16966  0EB4  0021               	movlb	1	; select bank1
 16967  0EB5  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 16968  0EB6  3D5F               	addwfc	(compensate_pressure@var1+2)^(0+128),w
 16969  0EB7  0020               	movlb	0	; select bank0
 16970  0EB8  00EA               	movwf	??_compensate_pressure+20
 16971  0EB9  0021               	movlb	1	; select bank1
 16972  0EBA  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 16973  0EBB  3D60               	addwfc	(compensate_pressure@var1+3)^(0+128),w
 16974  0EBC  0020               	movlb	0	; select bank0
 16975  0EBD  00EB               	movwf	??_compensate_pressure+21
 16976  0EBE  0021               	movlb	1	; select bank1
 16977  0EBF  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 16978  0EC0  3D61               	addwfc	(compensate_pressure@var1+4)^(0+128),w
 16979  0EC1  0020               	movlb	0	; select bank0
 16980  0EC2  00EC               	movwf	??_compensate_pressure+22
 16981  0EC3  0021               	movlb	1	; select bank1
 16982  0EC4  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 16983  0EC5  3D62               	addwfc	(compensate_pressure@var1+5)^(0+128),w
 16984  0EC6  0020               	movlb	0	; select bank0
 16985  0EC7  00ED               	movwf	??_compensate_pressure+23
 16986  0EC8  0021               	movlb	1	; select bank1
 16987  0EC9  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 16988  0ECA  3D63               	addwfc	(compensate_pressure@var1+6)^(0+128),w
 16989  0ECB  0020               	movlb	0	; select bank0
 16990  0ECC  00EE               	movwf	??_compensate_pressure+24
 16991  0ECD  0021               	movlb	1	; select bank1
 16992  0ECE  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 16993  0ECF  3D64               	addwfc	(compensate_pressure@var1+7)^(0+128),w
 16994  0ED0  0020               	movlb	0	; select bank0
 16995  0ED1  00EF               	movwf	??_compensate_pressure+25
 16996  0ED2  0868               	movf	??_compensate_pressure+18,w
 16997  0ED3  07E0               	addwf	??_compensate_pressure+10,f
 16998  0ED4  0869               	movf	??_compensate_pressure+19,w
 16999  0ED5  3DE1               	addwfc	??_compensate_pressure+11,f
 17000  0ED6  086A               	movf	??_compensate_pressure+20,w
 17001  0ED7  3DE2               	addwfc	??_compensate_pressure+12,f
 17002  0ED8  086B               	movf	??_compensate_pressure+21,w
 17003  0ED9  3DE3               	addwfc	??_compensate_pressure+13,f
 17004  0EDA  086C               	movf	??_compensate_pressure+22,w
 17005  0EDB  3DE4               	addwfc	??_compensate_pressure+14,f
 17006  0EDC  086D               	movf	??_compensate_pressure+23,w
 17007  0EDD  3DE5               	addwfc	??_compensate_pressure+15,f
 17008  0EDE  086E               	movf	??_compensate_pressure+24,w
 17009  0EDF  3DE6               	addwfc	??_compensate_pressure+16,f
 17010  0EE0  086F               	movf	??_compensate_pressure+25,w
 17011  0EE1  3DE7               	addwfc	??_compensate_pressure+17,f
 17012  0EE2  0867               	movf	??_compensate_pressure+17,w
 17013  0EE3  00C7               	movwf	___aodiv@dividend+7
 17014  0EE4  0866               	movf	??_compensate_pressure+16,w
 17015  0EE5  00C6               	movwf	___aodiv@dividend+6
 17016  0EE6  0865               	movf	??_compensate_pressure+15,w
 17017  0EE7  00C5               	movwf	___aodiv@dividend+5
 17018  0EE8  0864               	movf	??_compensate_pressure+14,w
 17019  0EE9  00C4               	movwf	___aodiv@dividend+4
 17020  0EEA  0863               	movf	??_compensate_pressure+13,w
 17021  0EEB  00C3               	movwf	___aodiv@dividend+3
 17022  0EEC  0862               	movf	??_compensate_pressure+12,w
 17023  0EED  00C2               	movwf	___aodiv@dividend+2
 17024  0EEE  0861               	movf	??_compensate_pressure+11,w
 17025  0EEF  00C1               	movwf	___aodiv@dividend+1
 17026  0EF0  0860               	movf	??_compensate_pressure+10,w
 17027  0EF1  00C0               	movwf	___aodiv@dividend
 17028  0EF2  3197  270B  3188   	fcall	___aodiv
 17029  0EF5  3038               	movlw	low ?___aodiv
 17030  0EF6  0086               	movwf	6
 17031  0EF7  3000               	movlw	high ?___aodiv
 17032  0EF8  0087               	movwf	7
 17033  0EF9  3F40               	moviw [0]fsr1
 17034  0EFA  07D8               	addwf	??_compensate_pressure+2,f
 17035  0EFB  3F41               	moviw [1]fsr1
 17036  0EFC  3DD9               	addwfc	??_compensate_pressure+3,f
 17037  0EFD  3F42               	moviw [2]fsr1
 17038  0EFE  3DDA               	addwfc	??_compensate_pressure+4,f
 17039  0EFF  3F43               	moviw [3]fsr1
 17040  0F00  3DDB               	addwfc	??_compensate_pressure+5,f
 17041  0F01  3F44               	moviw [4]fsr1
 17042  0F02  3DDC               	addwfc	??_compensate_pressure+6,f
 17043  0F03  3F45               	moviw [5]fsr1
 17044  0F04  3DDD               	addwfc	??_compensate_pressure+7,f
 17045  0F05  3F46               	moviw [6]fsr1
 17046  0F06  3DDE               	addwfc	??_compensate_pressure+8,f
 17047  0F07  3F47               	moviw [7]fsr1
 17048  0F08  3DDF               	addwfc	??_compensate_pressure+9,f
 17049  0F09  085F               	movf	??_compensate_pressure+9,w
 17050  0F0A  0021               	movlb	1	; select bank1
 17051  0F0B  00DC               	movwf	(compensate_pressure@var4+7)^(0+128)
 17052  0F0C  0020               	movlb	0	; select bank0
 17053  0F0D  085E               	movf	??_compensate_pressure+8,w
 17054  0F0E  0021               	movlb	1	; select bank1
 17055  0F0F  00DB               	movwf	(compensate_pressure@var4+6)^(0+128)
 17056  0F10  0020               	movlb	0	; select bank0
 17057  0F11  085D               	movf	??_compensate_pressure+7,w
 17058  0F12  0021               	movlb	1	; select bank1
 17059  0F13  00DA               	movwf	(compensate_pressure@var4+5)^(0+128)
 17060  0F14  0020               	movlb	0	; select bank0
 17061  0F15  085C               	movf	??_compensate_pressure+6,w
 17062  0F16  0021               	movlb	1	; select bank1
 17063  0F17  00D9               	movwf	(compensate_pressure@var4+4)^(0+128)
 17064  0F18  0020               	movlb	0	; select bank0
 17065  0F19  085B               	movf	??_compensate_pressure+5,w
 17066  0F1A  0021               	movlb	1	; select bank1
 17067  0F1B  00D8               	movwf	(compensate_pressure@var4+3)^(0+128)
 17068  0F1C  0020               	movlb	0	; select bank0
 17069  0F1D  085A               	movf	??_compensate_pressure+4,w
 17070  0F1E  0021               	movlb	1	; select bank1
 17071  0F1F  00D7               	movwf	(compensate_pressure@var4+2)^(0+128)
 17072  0F20  0020               	movlb	0	; select bank0
 17073  0F21  0859               	movf	??_compensate_pressure+3,w
 17074  0F22  0021               	movlb	1	; select bank1
 17075  0F23  00D6               	movwf	(compensate_pressure@var4+1)^(0+128)
 17076  0F24  0020               	movlb	0	; select bank0
 17077  0F25  0858               	movf	??_compensate_pressure+2,w
 17078  0F26  0021               	movlb	1	; select bank1
 17079  0F27  00D5               	movwf	compensate_pressure@var4^(0+128)
 17080                           
 17081                           ;BME280_driver/bme280.c: 1186:         pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 17082  0F28  3002               	movlw	2
 17083  0F29  0020               	movlb	0	; select bank0
 17084  0F2A  00B8               	movwf	___aodiv@divisor
 17085  0F2B  01B9               	clrf	___aodiv@divisor+1
 17086  0F2C  01BA               	clrf	___aodiv@divisor+2
 17087  0F2D  01BB               	clrf	___aodiv@divisor+3
 17088  0F2E  01BC               	clrf	___aodiv@divisor+4
 17089  0F2F  01BD               	clrf	___aodiv@divisor+5
 17090  0F30  01BE               	clrf	___aodiv@divisor+6
 17091  0F31  01BF               	clrf	___aodiv@divisor+7
 17092  0F32  0021               	movlb	1	; select bank1
 17093  0F33  0855               	movf	compensate_pressure@var4^(0+128),w
 17094  0F34  0020               	movlb	0	; select bank0
 17095  0F35  00C0               	movwf	___aodiv@dividend
 17096  0F36  0021               	movlb	1	; select bank1
 17097  0F37  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 17098  0F38  0020               	movlb	0	; select bank0
 17099  0F39  00C1               	movwf	___aodiv@dividend+1
 17100  0F3A  0021               	movlb	1	; select bank1
 17101  0F3B  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 17102  0F3C  0020               	movlb	0	; select bank0
 17103  0F3D  00C2               	movwf	___aodiv@dividend+2
 17104  0F3E  0021               	movlb	1	; select bank1
 17105  0F3F  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 17106  0F40  0020               	movlb	0	; select bank0
 17107  0F41  00C3               	movwf	___aodiv@dividend+3
 17108  0F42  0021               	movlb	1	; select bank1
 17109  0F43  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 17110  0F44  0020               	movlb	0	; select bank0
 17111  0F45  00C4               	movwf	___aodiv@dividend+4
 17112  0F46  0021               	movlb	1	; select bank1
 17113  0F47  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 17114  0F48  0020               	movlb	0	; select bank0
 17115  0F49  00C5               	movwf	___aodiv@dividend+5
 17116  0F4A  0021               	movlb	1	; select bank1
 17117  0F4B  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 17118  0F4C  0020               	movlb	0	; select bank0
 17119  0F4D  00C6               	movwf	___aodiv@dividend+6
 17120  0F4E  0021               	movlb	1	; select bank1
 17121  0F4F  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 17122  0F50  0020               	movlb	0	; select bank0
 17123  0F51  00C7               	movwf	___aodiv@dividend+7
 17124  0F52  3197  270B  3188   	fcall	___aodiv
 17125  0F55  0838               	movf	?___aodiv,w
 17126  0F56  00A0               	movwf	___omul@multiplier
 17127  0F57  0839               	movf	?___aodiv+1,w
 17128  0F58  00A1               	movwf	___omul@multiplier+1
 17129  0F59  083A               	movf	?___aodiv+2,w
 17130  0F5A  00A2               	movwf	___omul@multiplier+2
 17131  0F5B  083B               	movf	?___aodiv+3,w
 17132  0F5C  00A3               	movwf	___omul@multiplier+3
 17133  0F5D  083C               	movf	?___aodiv+4,w
 17134  0F5E  00A4               	movwf	___omul@multiplier+4
 17135  0F5F  083D               	movf	?___aodiv+5,w
 17136  0F60  00A5               	movwf	___omul@multiplier+5
 17137  0F61  083E               	movf	?___aodiv+6,w
 17138  0F62  00A6               	movwf	___omul@multiplier+6
 17139  0F63  083F               	movf	?___aodiv+7,w
 17140  0F64  00A7               	movwf	___omul@multiplier+7
 17141  0F65  3064               	movlw	100
 17142  0F66  00A8               	movwf	___omul@multiplicand
 17143  0F67  01A9               	clrf	___omul@multiplicand+1
 17144  0F68  01AA               	clrf	___omul@multiplicand+2
 17145  0F69  01AB               	clrf	___omul@multiplicand+3
 17146  0F6A  01AC               	clrf	___omul@multiplicand+4
 17147  0F6B  01AD               	clrf	___omul@multiplicand+5
 17148  0F6C  01AE               	clrf	___omul@multiplicand+6
 17149  0F6D  01AF               	clrf	___omul@multiplicand+7
 17150  0F6E  319E  26DF  3188   	fcall	___omul
 17151  0F71  0820               	movf	?___omul,w
 17152  0F72  0021               	movlb	1	; select bank1
 17153  0F73  00B0               	movwf	_compensate_pressure$2551^(0+128)
 17154  0F74  0020               	movlb	0	; select bank0
 17155  0F75  0821               	movf	?___omul+1,w
 17156  0F76  0021               	movlb	1	; select bank1
 17157  0F77  00B1               	movwf	(_compensate_pressure$2551+1)^(0+128)
 17158  0F78  0020               	movlb	0	; select bank0
 17159  0F79  0822               	movf	?___omul+2,w
 17160  0F7A  0021               	movlb	1	; select bank1
 17161  0F7B  00B2               	movwf	(_compensate_pressure$2551+2)^(0+128)
 17162  0F7C  0020               	movlb	0	; select bank0
 17163  0F7D  0823               	movf	?___omul+3,w
 17164  0F7E  0021               	movlb	1	; select bank1
 17165  0F7F  00B3               	movwf	(_compensate_pressure$2551+3)^(0+128)
 17166  0F80  0020               	movlb	0	; select bank0
 17167  0F81  0824               	movf	?___omul+4,w
 17168  0F82  0021               	movlb	1	; select bank1
 17169  0F83  00B4               	movwf	(_compensate_pressure$2551+4)^(0+128)
 17170  0F84  0020               	movlb	0	; select bank0
 17171  0F85  0825               	movf	?___omul+5,w
 17172  0F86  0021               	movlb	1	; select bank1
 17173  0F87  00B5               	movwf	(_compensate_pressure$2551+5)^(0+128)
 17174  0F88  0020               	movlb	0	; select bank0
 17175  0F89  0826               	movf	?___omul+6,w
 17176  0F8A  0021               	movlb	1	; select bank1
 17177  0F8B  00B6               	movwf	(_compensate_pressure$2551+6)^(0+128)
 17178  0F8C  0020               	movlb	0	; select bank0
 17179  0F8D  0827               	movf	?___omul+7,w
 17180  0F8E  0021               	movlb	1	; select bank1
 17181  0F8F  00B7               	movwf	(_compensate_pressure$2551+7)^(0+128)
 17182                           
 17183                           ;BME280_driver/bme280.c: 1186:         pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 17184  0F90  3080               	movlw	128
 17185  0F91  0020               	movlb	0	; select bank0
 17186  0F92  00B8               	movwf	___aodiv@divisor
 17187  0F93  01B9               	clrf	___aodiv@divisor+1
 17188  0F94  01BA               	clrf	___aodiv@divisor+2
 17189  0F95  01BB               	clrf	___aodiv@divisor+3
 17190  0F96  01BC               	clrf	___aodiv@divisor+4
 17191  0F97  01BD               	clrf	___aodiv@divisor+5
 17192  0F98  01BE               	clrf	___aodiv@divisor+6
 17193  0F99  01BF               	clrf	___aodiv@divisor+7
 17194  0F9A  0021               	movlb	1	; select bank1
 17195  0F9B  0830               	movf	_compensate_pressure$2551^(0+128),w
 17196  0F9C  0020               	movlb	0	; select bank0
 17197  0F9D  00C0               	movwf	___aodiv@dividend
 17198  0F9E  0021               	movlb	1	; select bank1
 17199  0F9F  0831               	movf	(_compensate_pressure$2551+1)^(0+128),w
 17200  0FA0  0020               	movlb	0	; select bank0
 17201  0FA1  00C1               	movwf	___aodiv@dividend+1
 17202  0FA2  0021               	movlb	1	; select bank1
 17203  0FA3  0832               	movf	(_compensate_pressure$2551+2)^(0+128),w
 17204  0FA4  0020               	movlb	0	; select bank0
 17205  0FA5  00C2               	movwf	___aodiv@dividend+2
 17206  0FA6  0021               	movlb	1	; select bank1
 17207  0FA7  0833               	movf	(_compensate_pressure$2551+3)^(0+128),w
 17208  0FA8  0020               	movlb	0	; select bank0
 17209  0FA9  00C3               	movwf	___aodiv@dividend+3
 17210  0FAA  0021               	movlb	1	; select bank1
 17211  0FAB  0834               	movf	(_compensate_pressure$2551+4)^(0+128),w
 17212  0FAC  0020               	movlb	0	; select bank0
 17213  0FAD  00C4               	movwf	___aodiv@dividend+4
 17214  0FAE  0021               	movlb	1	; select bank1
 17215  0FAF  0835               	movf	(_compensate_pressure$2551+5)^(0+128),w
 17216  0FB0  0020               	movlb	0	; select bank0
 17217  0FB1  00C5               	movwf	___aodiv@dividend+5
 17218  0FB2  0021               	movlb	1	; select bank1
 17219  0FB3  0836               	movf	(_compensate_pressure$2551+6)^(0+128),w
 17220  0FB4  0020               	movlb	0	; select bank0
 17221  0FB5  00C6               	movwf	___aodiv@dividend+6
 17222  0FB6  0021               	movlb	1	; select bank1
 17223  0FB7  0837               	movf	(_compensate_pressure$2551+7)^(0+128),w
 17224  0FB8  0020               	movlb	0	; select bank0
 17225  0FB9  00C7               	movwf	___aodiv@dividend+7
 17226  0FBA  3197  270B  3188   	fcall	___aodiv
 17227  0FBD  083B               	movf	?___aodiv+3,w
 17228  0FBE  0021               	movlb	1	; select bank1
 17229  0FBF  00CC               	movwf	(compensate_pressure@pressure+3)^(0+128)
 17230  0FC0  0020               	movlb	0	; select bank0
 17231  0FC1  083A               	movf	?___aodiv+2,w
 17232  0FC2  0021               	movlb	1	; select bank1
 17233  0FC3  00CB               	movwf	(compensate_pressure@pressure+2)^(0+128)
 17234  0FC4  0020               	movlb	0	; select bank0
 17235  0FC5  0839               	movf	?___aodiv+1,w
 17236  0FC6  0021               	movlb	1	; select bank1
 17237  0FC7  00CA               	movwf	(compensate_pressure@pressure+1)^(0+128)
 17238  0FC8  0020               	movlb	0	; select bank0
 17239  0FC9  0838               	movf	?___aodiv,w
 17240  0FCA  0021               	movlb	1	; select bank1
 17241  0FCB  00C9               	movwf	compensate_pressure@pressure^(0+128)
 17242                           
 17243                           ;BME280_driver/bme280.c: 1187:         if (pressure < pressure_min)
 17244  0FCC  084C               	movf	(compensate_pressure@pressure+3)^(0+128),w
 17245  0FCD  1D03               	btfss	3,2
 17246  0FCE  2FDD               	goto	l4842
 17247  0FCF  30C0               	movlw	192
 17248  0FD0  0249               	subwf	compensate_pressure@pressure^(0+128),w
 17249  0FD1  30C6               	movlw	198
 17250  0FD2  3B4A               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
 17251  0FD3  302D               	movlw	45
 17252  0FD4  3B4B               	subwfb	(compensate_pressure@pressure+2)^(0+128),w
 17253  0FD5  1803               	btfsc	3,0
 17254  0FD6  2FDD               	goto	l4842
 17255  0FD7                     l4840:	
 17256                           
 17257                           ;BME280_driver/bme280.c: 1188:         {;BME280_driver/bme280.c: 1189:             press
      +                          ure = pressure_min;
 17258  0FD7  3000               	movlw	0
 17259  0FD8  00CC               	movwf	(compensate_pressure@pressure+3)^(0+128)
 17260  0FD9  302D               	movlw	45
 17261  0FDA  00CB               	movwf	(compensate_pressure@pressure+2)^(0+128)
 17262  0FDB  30C6               	movlw	198
 17263  0FDC  2FED               	goto	L4
 17264  0FDD                     l4842:	
 17265                           ;BME280_driver/bme280.c: 1190:         }
 17266                           
 17267  0FDD  084C               	movf	(compensate_pressure@pressure+3)^(0+128),w
 17268  0FDE  1D03               	btfss	3,2
 17269  0FDF  2FE8               	goto	l4844
 17270  0FE0  30C1               	movlw	193
 17271  0FE1  0249               	subwf	compensate_pressure@pressure^(0+128),w
 17272  0FE2  30D8               	movlw	216
 17273  0FE3  3B4A               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
 17274  0FE4  30A7               	movlw	167
 17275  0FE5  3B4B               	subwfb	(compensate_pressure@pressure+2)^(0+128),w
 17276  0FE6  1C03               	btfss	3,0
 17277  0FE7  2FF0               	goto	l192
 17278  0FE8                     l4844:	
 17279                           
 17280                           ;BME280_driver/bme280.c: 1192:         {;BME280_driver/bme280.c: 1193:             press
      +                          ure = pressure_max;
 17281  0FE8  3000               	movlw	0
 17282  0FE9  00CC               	movwf	(compensate_pressure@pressure+3)^(0+128)
 17283  0FEA  30A7               	movlw	167
 17284  0FEB  00CB               	movwf	(compensate_pressure@pressure+2)^(0+128)
 17285  0FEC  30D8               	movlw	216
 17286  0FED                     L4:	
 17287  0FED  00CA               	movwf	(compensate_pressure@pressure+1)^(0+128)
 17288  0FEE  30C0               	movlw	192
 17289  0FEF  00C9               	movwf	compensate_pressure@pressure^(0+128)
 17290  0FF0                     l192:	
 17291                           ;BME280_driver/bme280.c: 1199:     }
 17292                           
 17293                           
 17294                           ;BME280_driver/bme280.c: 1201:     return pressure;
 17295  0FF0  084C               	movf	(compensate_pressure@pressure+3)^(0+128),w
 17296  0FF1  0020               	movlb	0	; select bank0
 17297  0FF2  00D5               	movwf	?_compensate_pressure+3
 17298  0FF3  0021               	movlb	1	; select bank1
 17299  0FF4  084B               	movf	(compensate_pressure@pressure+2)^(0+128),w
 17300  0FF5  0020               	movlb	0	; select bank0
 17301  0FF6  00D4               	movwf	?_compensate_pressure+2
 17302  0FF7  0021               	movlb	1	; select bank1
 17303  0FF8  084A               	movf	(compensate_pressure@pressure+1)^(0+128),w
 17304  0FF9  0020               	movlb	0	; select bank0
 17305  0FFA  00D3               	movwf	?_compensate_pressure+1
 17306  0FFB  0021               	movlb	1	; select bank1
 17307  0FFC  0849               	movf	compensate_pressure@pressure^(0+128),w
 17308  0FFD  0020               	movlb	0	; select bank0
 17309  0FFE  00D2               	movwf	?_compensate_pressure
 17310  0FFF  0008               	return
 17311  1000                     __end_of_compensate_pressure:	


Data Sizes:
    Strings     182
    Constant    0
    Data        46
    BSS         266
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     55      80
    BANK3            80     51      69
    BANK4            80      0      55
    BANK5            80      0      70
    BANK6            80      0      70
    BANK7            80      0      73
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    get_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 0
		 -> Sleep(), 

    get_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> WriteEnvSensor(), 

    get_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> ReadEnvSensor(), 

    i2c_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_tr_queue.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    S54$4$2	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    S54$3$2	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 73
		 -> checksum(BANK3[6]), main@convertedSensorData(BANK2[16]), GetNavData@strId(BANK0[12]), STR_10(CODE[5]), 
		 -> STR_7(CODE[14]), GetNavData@data_type(BANK0[7]), STR_6(CODE[26]), STR_5(CODE[26]), 
		 -> STR_4(CODE[26]), STR_3(CODE[26]), STR_2(CODE[26]), STR_1(CODE[26]), 
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 73
		 -> checksum(BANK3[6]), main@convertedSensorData(BANK2[16]), GetNavData@strId(BANK0[12]), STR_10(CODE[5]), 
		 -> STR_7(CODE[14]), GetNavData@data_type(BANK0[7]), STR_6(CODE[26]), STR_5(CODE[26]), 
		 -> STR_4(CODE[26]), STR_3(CODE[26]), STR_2(CODE[26]), STR_1(CODE[26]), 
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 16
		 -> checksum(BANK3[6]), STR_11(CODE[2]), main@convertedSensorData(BANK2[16]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> checksum(BANK3[6]), STR_11(CODE[2]), main@convertedSensorData(BANK2[16]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    strcat@src	PTR const unsigned char  size(2) Largest target is 16
		 -> checksum(BANK3[6]), STR_11(CODE[2]), main@convertedSensorData(BANK2[16]), 

    strcat@dest	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    env_sensor.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    env_sensor.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    env_sensor.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    WriteEnvSensor@reg_data	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    ReadEnvSensor@data	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    SafeSetByte@dest	PTR unsigned char  size(1) Largest target is 7
		 -> GetNavData@data_type(BANK0[7]), 

    GPS_HasAcknowledged@data	PTR unsigned char  size(1) Largest target is 44
		 -> setNavFlightMode(BANK5[44]), 

    GPS_SendUBX@data	PTR unsigned char  size(1) Largest target is 44
		 -> setNavFlightMode(BANK5[44]), 

    GetLengthUBX@data	PTR unsigned char  size(1) Largest target is 44
		 -> setNavFlightMode(BANK5[44]), 

    WriteGPS@message	PTR unsigned char  size(2) Largest target is 26
		 -> STR_7(CODE[14]), STR_6(CODE[26]), STR_5(CODE[26]), STR_4(CODE[26]), 
		 -> STR_3(CODE[26]), STR_2(CODE[26]), STR_1(CODE[26]), 

    TransmitString@message	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    crc16@data	PTR PTR unsigned char  size(1) Largest target is 2
		 -> messages(COMMON[2]), 

    crc16@string	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    messages	PTR unsigned char [2] size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    IntToString@dest	PTR unsigned char  size(2) Largest target is 16
		 -> main@convertedSensorData(BANK2[16]), GetNavData@strId(BANK0[12]), 

    IntToHexString@dest	PTR unsigned char  size(1) Largest target is 6
		 -> checksum(BANK3[6]), 

    ReverseString@opposite	PTR unsigned char  size(2) Largest target is 16
		 -> checksum(BANK3[6]), main@convertedSensorData(BANK2[16]), GetNavData@strId(BANK0[12]), 

    ReverseString@str	PTR unsigned char  size(2) Largest target is 16
		 -> checksum(BANK3[6]), main@convertedSensorData(BANK2[16]), GetNavData@strId(BANK0[12]), 

    InsertString@dest	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    InsertString@src	PTR unsigned char  size(2) Largest target is 12
		 -> GetNavData@strId(BANK0[12]), STR_10(CODE[5]), 

    Insert@dest	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    FindString@target	PTR unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[5]), 

    FindString@src	PTR unsigned char  size(1) Largest target is 7
		 -> GetNavData@data_type(BANK0[7]), 

    ClearString@str	PTR unsigned char  size(2) Largest target is 73
		 -> GetNavData@data_type(BANK0[7]), message_end(BANK7[73]), message_start(BANK6[70]), 

    I2C_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 20
		 -> WriteEnvSensor@local_address(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), bme280_set_regs@temp_buff(BANK0[20]), 

    I2C_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterWrite@trBlock(BANK3[5]), 

    I2C_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), 

    i2c_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrTail.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    I2C_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    I2C_MasterTRBInsert@pflag	PTR enum E9631 size(1) Largest target is 1
		 -> WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterRead@pflag	PTR enum E9631 size(1) Largest target is 1
		 -> ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    F9742.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterWrite@pflag	PTR enum E9631 size(1) Largest target is 1
		 -> WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 20
		 -> WriteEnvSensor@local_address(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), bme280_set_regs@temp_buff(BANK0[20]), 

    F9736.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), NULL(NULL[0]), 
		 -> bme280_init@chip_id(BANK0[1]), 

    p_i2c_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), NULL(NULL[0]), 

    i2c_object.pTrHead.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    S1297$pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_current.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    S1309$pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_current.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    S1309$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    p_i2c_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    p_i2c_current	PTR volatile struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), NULL(NULL[0]), 

    S1320$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), 

    i2c_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), 

    S1320$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), 

    i2c_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    null_ptr_check@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    null_ptr_check@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    null_ptr_check@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    null_ptr_check@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    parse_humidity_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_humidity_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_humidity_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_humidity_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_humidity_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    parse_humidity_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> env_sensor.calib_data(BANK0[37]), main@env_sensor(BANK3[51]), 

    parse_temp_press_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_temp_press_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_temp_press_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_temp_press_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_temp_press_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    parse_temp_press_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> env_sensor.calib_data(BANK0[37]), main@env_sensor(BANK3[51]), 

    interleave_reg_addr@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(COMMON[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    interleave_reg_addr@reg_addr	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(COMMON[1]), set_filter_standby_settings@reg_addr(COMMON[1]), set_osr_press_temp_settings@reg_addr(COMMON[1]), set_osr_humidity_settings@reg_addr(COMMON[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    interleave_reg_addr@temp_buff	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    get_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_pressure@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    compensate_pressure@calib_data	PTR const struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_temperature@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_temperature@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    bme280_compensate_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_compensate_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_compensate_data@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    bme280_parse_sensor_data@uncomp_data	PTR struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    bme280_parse_sensor_data@reg_data	PTR const unsigned char  size(1) Largest target is 8
		 -> bme280_get_sensor_data@reg_data(BANK2[8]), 

    bme280_get_sensor_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_sensor_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_get_sensor_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_soft_reset@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_soft_reset@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_soft_reset@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_soft_reset@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_get_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(COMMON[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    bme280_set_regs@reg_addr	PTR unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(COMMON[1]), set_filter_standby_settings@reg_addr(COMMON[1]), set_osr_press_temp_settings@reg_addr(COMMON[1]), set_osr_humidity_settings@reg_addr(COMMON[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    bme280_set_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_get_regs@reg_data	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    bme280_get_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    S54bme280_dev$delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_init@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    S54bme280_dev$write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_init@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    S54bme280_dev$read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 


Critical Paths under _main in COMMON

    _main->_FlashError
    _main->_TransmitString
    _main->_strcat
    _strcat->_strlen
    _strcpy->_strlen
    _crc16->_crc_append_byte
    _crc16->_strlen
    _bme280_init->_Sleep
    _bme280_init->_null_ptr_check
    _get_calib_data->_parse_humidity_calib_data
    _get_calib_data->_parse_temp_press_calib_data
    _bme280_soft_reset->_Sleep
    _bme280_soft_reset->_null_ptr_check
    _bme280_set_regs->_null_ptr_check
    _bme280_get_sensor_data->_null_ptr_check
    _bme280_get_regs->_null_ptr_check
    _I2C_MasterWrite->_I2C_MasterTRBInsert
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2C_MasterRead->_I2C_MasterTRBInsert
    _compensate_temperature->___lmul
    ___aldiv->___lmul
    _compensate_pressure->___aodiv
    ___aodiv->___omul
    _TransmitString->_TransmitByte
    _TransmitString->_strlen
    _TransmitByte->_TransmitBit
    _SetupGPS->_GPS_HasAcknowledged
    _SetupGPS->_WriteGPS
    _GPS_SendUBX->_GetLengthUBX
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _IntToHexString->___awdiv
    _GetNavData->_ClearString
    _GetNavData->_InsertString
    _GetNavData->_WriteGPS
    _WriteGPS->_strlen
    _IntToString->___awdiv
    _IntToString->___awmod
    _ReverseString->___awdiv
    _InsertString->_strlen
    _FindString->_strlen
    _ClearString->_strlen

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_ISR->_I2C_Stop

Critical Paths under _main in BANK0

    _strcat->_strcpy
    _strcpy->_strlen
    _crc16->_crc_append_byte
    _bme280_init->_get_calib_data
    _get_calib_data->_bme280_get_regs
    _bme280_soft_reset->_bme280_set_regs
    _bme280_set_regs->_WriteEnvSensor
    _WriteEnvSensor->_I2C_MasterWrite
    _bme280_get_regs->_ReadEnvSensor
    _ReadEnvSensor->_I2C_MasterRead
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2C_MasterRead->_I2C_MasterReadTRBBuild
    _bme280_compensate_data->_compensate_pressure
    _compensate_temperature->___aldiv
    ___aldiv->___lmul
    _compensate_pressure->___aodiv
    ___aodiv->___omul
    _TransmitString->_TransmitByte
    _SetupGPS->_GPS_HasAcknowledged
    _IntToHexString->_ReverseString
    _IntToHexString->_crc16
    _GetNavData->_IntToString
    _WriteGPS->_strlen
    _IntToString->_ReverseString
    _ReverseString->___awdiv
    _InsertString->_Insert
    _FindString->_strlen
    _ClearString->_strlen

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_bme280_get_sensor_data
    _bme280_get_sensor_data->_bme280_compensate_data
    _bme280_compensate_data->_compensate_pressure

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_bme280_get_sensor_data

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                84    84      0   84809
                                             22 BANK2     33    33      0
                                              0 BANK3     51    51      0
                         _FlashError
                         _GetNavData
                     _IntToHexString
                        _IntToString
                  _SYSTEM_Initialize
                           _SetupGPS
           _TMR0_SetInterruptHandler
                     _TransmitString
             _bme280_get_sensor_data
                        _bme280_init
                              _crc16
                             _strcat
 ---------------------------------------------------------------------------------
 (1) _strcat                                               5     3      2    1897
                                              8 COMMON     1     1      0
                                             10 BANK0      4     2      2
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               8     6      2     263
                                              2 BANK0      8     6      2
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _crc16                                               15    13      2    2032
                                              5 BANK0     15    13      2
                    _crc_append_byte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _crc_append_byte                                      8     5      3     412
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _bme280_init                                          6     6      0   26613
                                             64 BANK0      6     6      0
                              _Sleep *
                    _bme280_get_regs
                  _bme280_soft_reset
                     _get_calib_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _get_calib_data                                      31    31      0   10302
                                             33 BANK0     31    31      0
                    _bme280_get_regs
          _parse_humidity_calib_data
        _parse_temp_press_calib_data
 ---------------------------------------------------------------------------------
 (3) _parse_temp_press_calib_data                          4     3      1    1338
                                              5 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _parse_humidity_calib_data                           14    13      1     699
                                              5 COMMON     4     3      1
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (2) _bme280_soft_reset                                    7     7      0    7394
                                             52 BANK0      7     7      0
                              _Sleep *
                    _bme280_set_regs
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (3) _bme280_set_regs                                     31    28      3    6392
                                             21 BANK0     31    28      3
                     _WriteEnvSensor *
                _interleave_reg_addr
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (4) _interleave_reg_addr                                  8     5      3     622
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (4) _WriteEnvSensor                                      11     6      5    2815
                                             10 BANK0     11     6      5
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _Sleep                                               12     8      4     195
                                              5 COMMON     4     0      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _bme280_get_sensor_data                              27    25      2   21846
                                             75 BANK1      5     3      2
                                              0 BANK2     22    22      0
             _bme280_compensate_data
                    _bme280_get_regs
           _bme280_parse_sensor_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _bme280_parse_sensor_data                            22    21      1     739
                                              5 COMMON     1     0      1
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 (3) _bme280_get_regs                                      9     4      5    7691
                                             24 BANK0      9     4      5
                      _ReadEnvSensor *
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _null_ptr_check                                       4     4      0     485
                                              5 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _ReadEnvSensor                                       11     5      6    4303
                                             13 BANK0     11     5      6
                     _I2C_MasterRead
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWrite                                      7     3      4    2111
                                              3 BANK0      7     3      4
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterWriteTRBBuild                              7     3      4     492
                                              5 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterRead                                       8     2      6    1544
                                              5 BANK0      8     2      6
             _I2C_MasterReadTRBBuild
                _I2C_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterTRBInsert                                  4     2      2     546
                                              5 COMMON     4     2      2
    _I2C_WaitForLastPacketToComplete
 ---------------------------------------------------------------------------------
 (7) _I2C_WaitForLastPacketToComplete                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterReadTRBBuild                               8     3      5     523
                                              5 COMMON     3     3      0
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (2) _bme280_compensate_data                               6     3      3   12282
                                             69 BANK1      6     3      3
                _compensate_pressure
             _compensate_temperature
 ---------------------------------------------------------------------------------
 (3) _compensate_temperature                              39    35      4    5348
                                             23 BANK0     39    35      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    1976
                                              5 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8    2565
                                              8 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _compensate_pressure                                 99    95      4    6131
                                             50 BANK0     30    26      4
                                              0 BANK1     69    69      0
                            ___aodiv
                             ___omul
 ---------------------------------------------------------------------------------
 (4) ___omul                                              25     9     16    2296
                                              5 COMMON     1     1      0
                                              0 BANK0     24     8     16
 ---------------------------------------------------------------------------------
 (4) ___aodiv                                             27    11     16    2245
                                              6 COMMON     1     1      0
                                             24 BANK0     26    10     16
                             ___omul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TransmitString                                       6     6      0    1427
                                              8 COMMON     1     1      0
                                              3 BANK0      5     5      0
                       _TransmitByte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _TransmitByte                                         4     4      0     161
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                        _TransmitBit
 ---------------------------------------------------------------------------------
 (3) _TransmitBit                                          2     2      0      31
                                              5 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SetupGPS                                             2     2      0    3100
                                             18 BANK0      2     2      0
                _GPS_HasAcknowledged
                        _GPS_SendUBX
                           _WriteGPS
 ---------------------------------------------------------------------------------
 (2) _GPS_SendUBX                                          6     6      0     329
                                              0 BANK0      6     6      0
                       _EUSART_Write
                       _GetLengthUBX
 ---------------------------------------------------------------------------------
 (3) _GetLengthUBX                                         4     1      3      98
                                              5 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _GPS_HasAcknowledged                                 22    22      0     916
                                              5 COMMON     4     4      0
                                              0 BANK0     18    18      0
                        _EUSART_Read
                 _EUSART_is_rx_ready
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     211
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     211
                                              7 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     211
                                              5 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IntToHexString                                      11     8      3    4136
                                             20 BANK0     11     8      3
                      _ReverseString
                            ___awdiv
                              _crc16 (ARG)
 ---------------------------------------------------------------------------------
 (1) _GetNavData                                          39    39      0   16994
                                             30 BANK0     39    39      0
                        _ClearString
                        _EUSART_Read
                 _EUSART_is_rx_ready
                         _FindString
                             _Insert
                       _InsertString
                        _IntToString
                        _SafeSetByte
                           _WriteGPS
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _WriteGPS                                             7     5      2    1855
                                              8 COMMON     1     1      0
                                              2 BANK0      6     4      2
                       _EUSART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      31
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SafeSetByte                                          8     3      5     523
                                              5 COMMON     3     3      0
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _IntToString                                         10     6      4    5448
                                             20 BANK0     10     6      4
                      _ReverseString
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     613
                                              5 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ReverseString                                       15    13      2    2609
                                              5 BANK0     15    13      2
                            ___awdiv
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     985
                                              5 COMMON     4     0      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _InsertString                                        12     6      6    3362
                                              8 COMMON     1     1      0
                                              8 BANK0     11     5      6
                             _Insert
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _Insert                                              10     5      5    1370
                                              5 COMMON     2     2      0
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _FindString                                          13     7      6     569
                                              2 BANK0     13     7      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClearString                                          7     5      2    1314
                                              8 COMMON     1     1      0
                                              2 BANK0      6     4      2
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               5     3      2    1030
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _FlashError                                           4     4      0      68
                                              5 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0      31
                _I2C_BusCollisionISR
                            _I2C_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                           _TimerISR *
 ---------------------------------------------------------------------------------
 (10) _TimerISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_ISR                                              2     2      0      31
                                              3 COMMON     2     2      0
               _I2C_FunctionComplete
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C_Stop                                            3     3      0      31
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _I2C_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashError
   _GetNavData
     _ClearString
       _strlen
     _EUSART_Read
     _EUSART_is_rx_ready
     _FindString
       _strlen (ARG)
     _Insert
     _InsertString
       _Insert
       _strlen
     _IntToString
       _ReverseString
         ___awdiv
         _strlen
       ___awdiv
       ___awmod
     _SafeSetByte
     _WriteGPS
       _EUSART_Write
       _strlen
     _strlen
   _IntToHexString
     _ReverseString
       ___awdiv
       _strlen
     ___awdiv
     _crc16 (ARG)
       _crc_append_byte
       _strlen
   _IntToString
     _ReverseString
       ___awdiv
       _strlen
     ___awdiv
     ___awmod
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _SetupGPS
     _GPS_HasAcknowledged
       _EUSART_Read
       _EUSART_is_rx_ready
     _GPS_SendUBX
       _EUSART_Write
       _GetLengthUBX
     _WriteGPS
       _EUSART_Write
       _strlen
   _TMR0_SetInterruptHandler
   _TransmitString
     _TransmitByte
       _TransmitBit
     _strlen
   _bme280_get_sensor_data
     _bme280_compensate_data
       _compensate_pressure
         ___aodiv
           ___omul (ARG)
         ___omul
       _compensate_temperature
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _bme280_get_regs
       _ReadEnvSensor *
         _I2C_MasterRead
           _I2C_MasterReadTRBBuild
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
           _I2C_MasterWriteTRBBuild
       _null_ptr_check *
     _bme280_parse_sensor_data
     _null_ptr_check
   _bme280_init
     _Sleep *
     _bme280_get_regs *
       _ReadEnvSensor *
         _I2C_MasterRead
           _I2C_MasterReadTRBBuild
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
           _I2C_MasterWriteTRBBuild
       _null_ptr_check *
     _bme280_soft_reset *
       _Sleep *
       _bme280_set_regs *
         _WriteEnvSensor *
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
             _I2C_MasterWriteTRBBuild
         _interleave_reg_addr *
         _null_ptr_check *
       _null_ptr_check *
     _get_calib_data *
       _bme280_get_regs
         _ReadEnvSensor *
           _I2C_MasterRead
             _I2C_MasterReadTRBBuild
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
             _I2C_MasterWriteTRBBuild
         _null_ptr_check *
       _parse_humidity_calib_data
       _parse_temp_press_calib_data
     _null_ptr_check *
   _crc16
     _crc_append_byte
     _strlen
   _strcat
     _strcpy
       _strlen (ARG)
     _strlen

 _INTERRUPT_InterruptManager (ROOT)
   _I2C_BusCollisionISR
   _I2C_ISR
     _I2C_FunctionComplete
     _I2C_Stop
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _TimerISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     37      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     33      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      37      13       68.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      46      15       87.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      46      17       87.5%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      49      19       91.3%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     24E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     24E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Sep 02 00:36:26 2019

                     __end_of_ClearString 1B06                     I2C_ISR@i2c_bytes_left 0164  
                             __CFG_CP$OFF 0000          bme280_parse_sensor_data@data_lsb 002C  
        bme280_parse_sensor_data@data_msb 0030                                        l53 1203  
                                      l70 159D                                        l63 1E0C  
                            ___awdiv@sign 0022                           GPS_SendUBX@data 0023  
                                      _id 01D3                           _timer0ReloadVal 016F  
                 ?_I2C_MasterReadTRBBuild 0020          __end_of_bme280_parse_sensor_data 06A0  
                             __CFG_LVP$ON 0000                                       l124 1354  
                                     l234 1ADA                                       l351 1976  
                                     l183 0420                                       l192 0FF0  
                                     l622 1BD6                                       l358 1960  
                                     l704 1D67                                       l723 1279  
                                     l740 19C1                                       l716 080E  
                                     l813 00E1                                       l719 0823  
                                     l855 1D1C                                       l859 1FBB  
       bme280_parse_sensor_data@data_xlsb 0028                           __end_of_I2C_ISR 0576  
                            ___awmod@sign 0022                         GetNavData@doParse 005D  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000          bme280_parse_sensor_data@reg_data 0034  
                          bme280_init@dev 0065                              ?_EUSART_Read 0070  
         __size_of_compensate_temperature 01A2                            ReverseString@i 0032  
                            __CFG_ZCD$OFF 0000                            WriteGPS@counti 0024  
                                    l1018 1368                                      l1053 17EE  
                                    l5000 1E4E                                      l5012 1D55  
                                    l5210 1217                                      l5034 1FB4  
                                    l4500 1ADD                                      l5222 1264  
                                    l5310 142F                                      l5302 1428  
                                    l5062 1343                                      l4502 1ADE  
                                    l4520 1A18                                      l5312 144E  
                                    l5304 1429                                      l4600 1379  
                                    l4512 1C5C                                      l4610 1397  
                                    l5066 1356                                      l5058 1328  
                                    l5180 1DC3                                      l4700 106D  
                                    l5316 1450                                      l4452 1944  
                                    l5236 081E                                      l4518 1A0C  
                                    l5182 1DC5                                      l5334 1AB2  
                                    l5262 1B62                                      l5246 100A  
                                    l4622 13C2                                      l4470 1F5D  
                                    l4534 1D18                                      l5350 11B1  
                                    l5168 1AED                                      l5184 1D96  
                                    l4704 1076                                      l5272 1B8B  
                                    l4640 175D                                      l4608 1389  
                                    l4472 1F62                                      l4720 1DE5  
                                    l4560 1FF9                                      l4552 1FF7  
                                    l5186 1DCA                                      l4642 1762  
                                    l4626 13D0                                      l4618 13B7  
                                    l4466 1F56                                      l4490 1B26  
                                    l4562 1FFE                                      l5370 11FC  
                                    l5338 1A60                                      l4708 107E  
                                    l5700 0198                                      l5604 1C3B  
                                    l4652 1779                                      l4636 1736  
                                    l4572 1C98                                      l4484 1B4E  
                                    l4732 150C                                      l5364 11E5  
                                    l5198 1EA7                                      l5702 01AB  
                                    l5294 1412                                      l4662 17C1  
                                    l4654 1788                                      l4582 1EE9  
                                    l5560 117D                                      l5552 114D  
                                    l5616 1083                                      l4664 17CD  
                                    l4840 0FD7                                      l4568 1C8E  
                                    l4760 1569                                      l4752 1530  
                                    l5368 11F9                                      l4906 197D  
                                    l4922 1E6A                                      l4682 1047  
                                    l5722 01EE                                      l5714 01C7  
                                    l5706 01AD                                      l5546 1139  
                                    l5618 10A4                                      l4586 1EFB  
                                    l4842 0FDD                                      l4770 159F  
                                    l4754 154A                                      l4692 104F  
                                    l4676 103C                                      l5716 01D8  
                                    l5708 01C0                                      l5564 118A  
                                    l4844 0FE8                                      l5580 12A9  
                                    l4694 105B                                      l4950 07B1  
                                    l5750 0236                                      l5734 020B  
                                    l5726 01FD                                      l5590 12D5  
                                    l4952 07F7                                      l5920 0252  
                                    l5744 0221                                      l5728 0202  
                                    l5760 024D                                      l4960 19C3  
                                    l4768 1598                                      l5592 12DA  
                                    l5754 023C                                      l5738 0220  
                                    l5762 027B                                      l5690 016D  
                                    l4794 040A                                      l5850 16EF  
                                    l5818 1667                                      l5756 0248  
                                    l5676 010D                                      l5668 00E5  
                                    l5764 00AD                                      l4796 0418  
                                    l5588 12AD                                      l4974 1E18  
                                    l5918 01B5                                      l5766 0285  
                                    l4992 1E3D                                      l5856 16F2  
                                    l5848 16EC                                      l4986 1E25  
                                    l4978 1E1F                                      l5698 0195  
                                    l4988 1E31                                      l4996 1E46  
                                    STR_1 184E                                      STR_2 1834  
                                    STR_3 1882                                      STR_4 181A  
                                    STR_5 1868                                      STR_6 1800  
                                    STR_7 189C                                      STR_8 18AF  
                                    STR_9 18AF                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                  ??_I2C_FunctionComplete 0070                                      u5005 0A5F  
                                    u5025 0C13                                      u5115 1E78  
                                    u5035 0E7A                                      u5125 07BB  
                                    u5205 1E37                                      u6005 12B3  
                                    u6110 0183                                      u5215 1E3E  
                                    u5135 1D8A                                      u6015 1283  
                                    u6120 0184                                      u6040 008C  
                                    u6025 1C45                                      u5305 05B0  
                                    u4425 1FCB                                      u5065 14DC  
                                    u6130 01A5                                      u5250 1F76  
                                    u5315 05F3                                      u5500 120C  
                                    u6140 01A6                                      u4445 1C99  
                                    u5325 060C                                      u4470 1EE6  
                                    u6135 01A1                                      u4535 138C  
                                    u4455 1CA0                                      u5335 0622  
                                    u4640 1769                                      u5185 1E28  
                                    u5345 0666                                      u6090 0140  
                                    u5435 1AF7                                      u4555 1398  
                                    u6340 1685                                      u5525 124E  
                                    u5605 1028                                      u4565 13AC  
                                    u5285 0582                                      u6407 1BDD  
                                    u5455 1DBF                                      u5615 1B6C  
                                    u6175 01E1                                      u4575 13B8  
                                    u5295 059A                                      u6417 1BEA  
                                    u5465 1DA0                                      u4745 1052  
                                    u5625 1B95                                      u5490 120B  
                                    u5475 1EB1                                      u4675 17AE  
                                    u5555 081F                                      u6355 1708  
                                    u5580 1016                                      u5485 1EBE  
                                    u4765 105C                                      u5590 1017  
                                    u5574 1010                                      u4775 1066  
                                    u5575 100F                                      u4935 02A0  
                                    u6367 16F6                                      u5760 10DF  
                                    u4785 106E                                      u4945 02B4  
                                    u6377 1D8D                                      u5770 10EC  
                                    u6387 19C6                                      u4955 031E  
                                    u5685 1AA5                                      u6397 109C  
                                    u4985 0915                                      u5955 1BFD  
                                    u4995 097C                                      u5965 1149  
                                    u5975 117A                                      u5985 1194  
                                    _TMR0 0015                                      _WPUA 020C  
                                    _WPUB 020D                                      _WPUC 020E  
                  WriteEnvSensor@reg_addr 002B       bme280_parse_sensor_data@uncomp_data 0075  
                  WriteEnvSensor@reg_data 002C         bme280_get_sensor_data@uncomp_data 012A  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                       GetNavData@success 005A                                      _main 1642  
                    __end_of_GetLengthUBX 19DD                              TransmitBit@b 0076  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                    interleave_reg_addr@len 0077  
                        __end_of_I2C_Stop 1A57                             __CFG_BOREN$ON 0000  
                       GPS_SendUBX@length 0021              GPS_HasAcknowledged@startTime 0020  
                                    start 0023                      bme280_soft_reset@dev 005A  
             __end_of_compensate_pressure 1000                             __CFG_MCLRE$ON 0000  
                              _GetNavData 006E                             ??_IntToString 0038  
                           _ReadEnvSensor 1CE8            __end_of_I2C_MasterReadTRBBuild 1BD4  
                         bme280_init@rslt 0064                   __end_of_TMR0_Initialize 19F2  
                 IntToHexString@remainder 003B            ??_TMR0_DefaultInterruptHandler 0070  
                           ??_SafeSetByte 0075                I2C_MasterReadTRBBuild@ptrb 0077  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 0007  
                        ?_I2C_MasterWrite 0023             __end_of_OSCILLATOR_Initialize 196D  
                         __end_of___aldiv 13D9                           __end_of___aodiv 1800  
                   ReverseString@opposite 002E                                     ?_main 0070  
              GPS_HasAcknowledged@ackByte 0024                           __end_of___awdiv 1083  
                              _FindString 1D91                                     STR_10 18AA  
                                   STR_11 18B4                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 1E53                                _FlashError 1BD4  
                         WriteGPS@message 0022                    _bme280_compensate_data 12E0  
                         ___awdiv@divisor 0075                             _i2c_trb_count 0167  
                                   i1l501 0492                                     i1l502 049E  
                                   i1l520 0510                                     i1l512 04D2  
                                   i1l531 19B7                                     i1l524 0536  
                                   i1l516 04F2                                     i1l390 0021  
                                   i1l382 000D                                     i1l519 0502  
                                   i1l385 0019                                     i1l490 0441  
                                   i1l495 046F                                     i1l496 0470  
                         ___awdiv@counter 0021                                Insert@dest 0027  
                       _bme280_soft_reset 1D1E                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _RXPPS 0E24                                Insert@temp 0025  
       __size_of_TMR0_SetInterruptHandler 0006                  __size_of_bme280_get_regs 0042  
                     ___lmul@multiplicand 0024                 ?_TMR0_SetInterruptHandler 0075  
                                   _Sleep 1D57                          __end_of_TMR0_ISR 19A9  
          compensate_pressure@uncomp_data 00B8                bme280_compensate_data@rslt 00E9  
                          _IntToHexString 1137                        ?_bme280_soft_reset 0070  
                                   _crc16 1272                        FindString@matching 002D  
                            ?_GPS_SendUBX 0070                                     _ticks 015C  
                                   main@i 0149                                     pclath 000A  
                     GetNavData@dataIndex 0060                   main@convertedSensorData 0138  
                 GPS_HasAcknowledged@data 002F                             TransmitByte@i 0021  
                     ??_bme280_soft_reset 0054                                     status 0003  
                                   wtemp0 007E                               _ClearString 1AE0  
                __size_of_bme280_set_regs 009E                       GetNavData@data_type 004E  
                        ??_get_calib_data 0041                     bme280_soft_reset@rslt 0058  
                I2C_MasterTRBInsert@count 0078                  I2C_MasterTRBInsert@pflag 0076  
                              _i2c_object 0157                           _crc_append_byte 0800  
                         __initialization 0025                    _compensate_temperature 0287  
       parse_humidity_calib_data@reg_data 0029                            ?_ReadEnvSensor 002D  
                            __end_of_main 170B                      GPS_HasAcknowledged@i 0031  
                         SafeSetByte@data 0024                           SafeSetByte@dest 0077  
                          ??_EUSART_Write 0075                                 ??_I2C_ISR 0073  
                          __CFG_LPBOR$OFF 0000               ?_INTERRUPT_InterruptManager 0070  
                 ?_bme280_get_sensor_data 00EB                 __end_of_bme280_soft_reset 1D57  
                                  ??_main 0136                     __end_of_ReverseString 0800  
                     __end_of_IntToString 1272                   __size_of_WriteEnvSensor 004A  
                     _I2C_MasterTRBInsert 1F26                          ??_null_ptr_check 0075  
         bme280_compensate_data@comp_data 00E6                          ReverseString@str 0025  
                          __CFG_PLLEN$OFF 0000               I2C_MasterReadTRBBuild@pdata 0020  
                  __end_of_IntToHexString 119E                          __end_of_TimerISR 1976  
         compensate_pressure@pressure_max 00B9                          __end_of_SetupGPS 10D5  
               bme280_get_sensor_data@dev 00EC                     ReadEnvSensor@reg_addr 002E  
                     __end_of_SafeSetByte 1ABB                             ?_InsertString 0028  
                                  ?_Sleep 0075                  ?_I2C_MasterWriteTRBBuild 0075  
                _bme280_parse_sensor_data 0576                                    ?_crc16 0025  
                              Sleep@start 0024                          ___awdiv@dividend 0077  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of_WriteGPS 1B7F  
              __end_of_EUSART_is_rx_ready 194D                                    _BORCON 0116  
                                  _RC1REG 0199                                    _RC1STA 019D  
                                  _RB4PPS 0E9C                                    _RB6PPS 0E9E  
                                  _RB7PPS 0E9F                                    _ODCONA 028C  
                                  _ODCONB 028D                                    _ODCONC 028E  
                                  i1l5154 1A55                                    i1l5502 0517  
                                  i1l5430 047C                                    i1l5422 0469  
                                  i1l5520 053D                                    i1l5522 0541  
                                  i1l5506 051E                                    i1l5450 04AC  
                                  i1l5418 0462                                    i1l5436 048C  
                                  i1l5518 053A                                    i1l5528 0549  
                                  i1l5490 04F5                                    i1l5482 04E0  
                                  i1l5468 04C7                                    i1l5922 0552  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _TX1REG 019A  
                                  _TX1STA 019E                                    u461lld 1733  
                             Insert@index 0021                      ?_I2C_MasterTRBInsert 0075  
            __size_of_interleave_reg_addr 002D                            __CFG_PWRTE$OFF 0000  
              ?_parse_humidity_calib_data 0075                                    _Insert 1E53  
                             ?_GetNavData 0070                                    ___lmul 1C86  
                                  ___omul 1EDF                                 ??___aldiv 0030  
                               ??___aodiv 0076                                    crc16@c 002C  
                               ??___awdiv 0020                                    crc16@i 0032  
                          __CFG_STVREN$ON 0000                                 ??___awmod 0020  
            parse_humidity_calib_data@dev 0075            __end_of_bme280_get_sensor_data 1137  
           I2C_MasterReadTRBBuild@address 0023                       _IntToHexString$1796 0039  
                        ?_TMR0_Initialize 0070                       GetNavData@startTime 0055  
             compensate_pressure@pressure 00C9                          ___awdiv@quotient 0023  
                         ___awmod@divisor 0075                   __size_of_I2C_MasterRead 0027  
                         ___awmod@counter 0021                   __size_of_I2C_Initialize 0019  
                             ?_FindString 0022                                    _strcat 19F2  
                             ?_FlashError 0070                                    _strcpy 1A57  
                                  _strlen 1A07                  interleave_reg_addr@index 0024  
                       get_calib_data@dev 005F                              IntToString@i 003C  
                            IntToString@n 0034                           InsertString@src 0028  
                            __pdataCOMMON 007B                           ?_IntToHexString 0034  
                 compensate_pressure@var1 00DD                   compensate_pressure@var2 00CD  
                 compensate_pressure@var4 00D5                            ??_InsertString 0078  
                               ?_I2C_Stop 0070                          ??_TransmitString 0078  
                     FindString@targetLen 0026  TMR0_SetInterruptHandler@InterruptHandler 0075  
                   __size_of_GetLengthUBX 0012                         ??_bme280_get_regs 003D  
                 __end_of_crc_append_byte 0833                      __size_of_EUSART_Read 0009  
            interleave_reg_addr@temp_buff 0075          bme280_compensate_data@calib_data 00E7  
                       _SYSTEM_Initialize 198A                   __end_of__initialization 006A  
                   ??_I2C_MasterTRBInsert 0077                        ?_SYSTEM_Initialize 0070  
        compensate_temperature@calib_data 0037                           ??_ReadEnvSensor 0033  
                     ReverseString@counti 0030                             ??_bme280_init 0060  
                get_calib_data@calib_data 0043                            __pcstackCOMMON 0070  
                           __end_of_Sleep 1D91                              __pidataBANK5 1C00  
                       ??_bme280_set_regs 0038                             __end_of_crc16 12E0  
                     ??_SYSTEM_Initialize 0078                               _IntToString 1205  
                               ?_TMR0_ISR 0070                             ??_TransmitBit 0075  
                        FindString@target 0024                          FindString@srcLen 0022  
                        SafeSetByte@index 0022                               _SafeSetByte 1A98  
              __size_of_bme280_soft_reset 0039           __end_of_I2C_MasterWriteTRBBuild 1A98  
                            _GetLengthUBX 19CB                            _OPTION_REGbits 0095  
                              ??_I2C_Stop 0070                                   ??_Sleep 0020  
                                 ??_crc16 0027               __end_of_GPS_HasAcknowledged 146A  
               __end_of_SYSTEM_Initialize 1999                       __size_of_GetNavData 0219  
                              __pbssBANK2 0157                                __pbssBANK3 01D3  
                              __pbssBANK4 0220                                __pbssBANK5 02CC  
                              __pbssBANK6 0320                                __pbssBANK7 03A0  
                    __end_of_EUSART_Write 1966               interleave_reg_addr@reg_addr 0023  
                    __size_of_GPS_SendUBX 002A                         ReverseString@temp 002D  
             interleave_reg_addr@reg_data 0076                     InsertString@destLimit 002C  
            I2C_MasterReadTRBBuild@length 0022                       __size_of_FindString 003B  
                     __size_of_FlashError 002C              __size_of_I2C_BusCollisionISR 0002  
                        _setNavFlightMode 02A0                                   ?_Insert 0020  
                              __pmaintext 1642                                 ?_TimerISR 0070  
                               ?_SetupGPS 0070          __end_of_TMR0_SetInterruptHandler 1953  
                                 ?___lmul 0020                                   ?___omul 0020  
                              ??_TMR0_ISR 0070                           __CFG_PPS1WAY$ON 0000  
                              __pintentry 0004                   ?_bme280_compensate_data 00E5  
                                 _I2C_ISR 0429                       ___omul@multiplicand 0028  
                          ___lmul@product 0075                          ReadEnvSensor@len 0031  
                               ?_WriteGPS 0022                       __end_of_bme280_init 1205  
             I2C_MasterWriteTRBBuild@ptrb 0022                            _WriteEnvSensor 1FB6  
                                 ?_strcat 002A                                   ?_strcpy 0022  
                                 ?_strlen 0075                           __CFG_WDTCCS$SWC 0000  
                          main@env_sensor 01A0                       __end_of_TransmitBit 19CB  
                                 _OSCTUNE 0098                   I2C_Stop@completion_code 0072  
            ?_parse_temp_press_calib_data 0075                                   _SSP1ADD 0212  
                                 _SLRCONA 030C                                   _SLRCONB 030D  
                                 _SLRCONC 030E                                   _SSP1BUF 0211  
                        ?_crc_append_byte 0075             __size_of_I2C_FunctionComplete 0011  
                            ?_ClearString 0022                   ?_compensate_temperature 0037  
           bme280_soft_reset@soft_rst_cmd 0057                                   Sleep@ms 0075  
                    __end_of_InsertString 1EDF                           __size_of_Insert 0046  
                              ??_TimerISR 0070                                ??_SetupGPS 0032  
          __end_of_bme280_compensate_data 1358                                   ___aldiv 1358  
                                 ___aodiv 170B                          GetLengthUBX@data 0078  
                                 ___awdiv 1032                           __size_of___lmul 002F  
                                 ___awmod 1E0E                           __size_of___omul 0047  
                  __end_of_WriteEnvSensor 2000              __size_of_compensate_pressure FA5F  
                          _I2C_MasterRead 1B06                ??_bme280_parse_sensor_data 0020  
                          _I2C_Initialize 1A20                                ??_WriteGPS 0078  
                                 __ptext1 19F2                                   __ptext2 1A57  
                                 __ptext3 1272                                   __ptext4 0800  
                                 __ptext5 119E                                   __ptext6 1F6E  
                                 __ptext7 06A0                                   __ptext8 146A  
                                 __ptext9 1D1E       parse_humidity_calib_data@dig_H4_lsb 0020  
     parse_humidity_calib_data@dig_H4_msb 0022       parse_humidity_calib_data@dig_H5_lsb 0024  
     parse_humidity_calib_data@dig_H5_msb 0026                           __size_of_strcat 0015  
     parse_humidity_calib_data@calib_data 0028                           __size_of_strcpy 001F  
                         __size_of_strlen 0019                       _interleave_reg_addr 1C59  
                   _OSCILLATOR_Initialize 1966                          ___awmod@dividend 0077  
                           _message_start 0320                          ___aldiv@dividend 002C  
                ??_PIN_MANAGER_Initialize 0075                        get_calib_data@F375 02CC  
                __size_of_I2C_MasterWrite 0028                __size_of_SYSTEM_Initialize 000F  
                                 clrloop0 1954             ??_parse_temp_press_calib_data 0076  
                    end_of_initialization 006A           bme280_get_sensor_data@comp_data 00EB  
                      get_calib_data@rslt 005E                          InsertString@dest 0030  
                          ___omul@product 0030                                   init_ram 1959  
          __end_of_compensate_temperature 0429                                   initloop 195A  
                    ?_interleave_reg_addr 0075                      I2C_MasterRead@length 0027  
                       _EUSART_Initialize 197F                       crc_append_byte@data 0077  
        __size_of_I2C_MasterWriteTRBBuild 0022               ??_parse_humidity_calib_data 0076  
                      ?_EUSART_Initialize 0070                              ??_GetNavData 003E  
                             _bme280_init 119E                        _EUSART_is_rx_ready 1948  
                        ___aldiv@quotient 0033         compensate_temperature@temperature 005A  
                                 psplit$0 3E0068                    __end_of_I2C_MasterRead 1B2D  
                  __end_of_I2C_Initialize 1A39                                main@F10164 0220  
                   I2C_MasterWrite@length 0023                            ClearString@str 0022  
                         ?_WriteEnvSensor 002A                          ??_IntToHexString 0037  
                             _TransmitBit 19BA                                   strcpy@d 0028  
                                 strlen@a 0020                                   strcpy@s 0026  
                                 strlen@s 0075                       ??_EUSART_Initialize 0075  
                         IntToHexString@i 003D                           IntToHexString@n 0034  
                _TMR0_SetInterruptHandler 194D                              ??_FindString 0028  
                     ?_EUSART_is_rx_ready 0070                              ??_FlashError 0075  
                      I2C_ISR@i2c_address 0079                                 _SSPDATPPS 0E21  
                         _bme280_get_regs 1DCC                                 _SSPCLKPPS 0E20  
                      bme280_get_regs@dev 003C                        bme280_get_regs@len 003A  
                         TransmitString@i 0025                             ?_TransmitByte 0070  
                        __CFG_FOSC$INTOSC 0000                             crc16@segments 0025  
                   __size_of_EUSART_Write 0007                              GPS_SendUBX@i 0024  
                       __size_of_I2C_Stop 001E                           GetNavData@index 0063  
                      __end_of_GetNavData 0287          I2C_ISR@i2c_10bit_address_restart 0163  
                         GetNavData@strId 0042                           _bme280_set_regs 1503  
               __end_of_EUSART_Initialize 198A                      ??_EUSART_is_rx_ready 0075  
                    bme280_init@try_count 0062                     ??_interleave_reg_addr 0020  
               bme280_soft_reset@reg_addr 0059         compensate_temperature@uncomp_data 0055  
                          _gps_configured 0162                      ReverseString@halfway 002B  
                  __size_of_ReverseString 006B                        __end_of_FindString 1DCC  
                      __end_of_FlashError 1C00                  ??_I2C_MasterReadTRBBuild 0075  
                   TransmitString@message 0027                         _p_i2c_trb_current 0166  
    __size_of_parse_temp_press_calib_data 00F5                            __end_of_Insert 1E99  
                            ?_IntToString 0034                           ?_I2C_MasterRead 0025  
                         ?_I2C_Initialize 0070                            __end_of___lmul 1CB5  
                          __end_of___omul 1F26                   __size_of_get_calib_data 0048  
                               Insert@src 0020                             __pidataCOMMON 0002  
                            ?_SafeSetByte 0020                              _i2c_tr_queue 0169  
                            _EUSART_Write 195F                         __size_of_TMR0_ISR 0010  
                  ?_OSCILLATOR_Initialize 0070            parse_temp_press_calib_data@dev 0075  
                bme280_set_regs@temp_buff 003B                            ??_TransmitByte 0077  
                     _I2C_BusCollisionISR 1000                            __end_of_strcat 1A07  
               _parse_humidity_calib_data 146A                            __end_of_strcpy 1A76  
                          __end_of_strlen 1A20                       start_initialization 0025  
                       SafeSetByte@length 0020                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0033                                 _i2c_state 0168  
   parse_temp_press_calib_data@calib_data 0077                             ??_EUSART_Read 0075  
             __end_of_I2C_MasterTRBInsert 1F6E                   __size_of_null_ptr_check 0025  
                   __size_of_InsertString 0046                         ??_I2C_MasterWrite 0027  
                       ___omul@multiplier 0020                      ?_I2C_BusCollisionISR 0070  
                    __size_of_ClearString 0026                                  ??_Insert 0075  
                      bme280_init@chip_id 0063                     __end_of_ReadEnvSensor 1D1E  
                                ??___lmul 0075                                  ??___omul 0075  
                 __end_of_bme280_get_regs 1E0E                         __size_of_TimerISR 0009  
                             __pdataBANK5 02A0                         __size_of_SetupGPS 0052  
                      null_ptr_check@rslt 0077                                  ?_I2C_ISR 0070  
                            ClearString@i 0026                                  ??_strcat 002C  
                                ??_strcpy 0024                                  ??_strlen 0077  
              compensate_temperature@var1 0051                compensate_temperature@var2 0056  
   compensate_temperature@temperature_max 004D                             _ReverseString 0795  
                       __size_of_WriteGPS 002A                               crc16@string 0031  
                             __pbssCOMMON 0079                                 ___latbits 0002  
                           __pcstackBANK0 0020                             __pcstackBANK1 00A0  
                           __pcstackBANK2 0120                             __pcstackBANK3 01A0  
               GetNavData@signInsertIndex 005B                          ___aodiv@dividend 0040  
                 __end_of_bme280_set_regs 15A1                              _InsertString 1E99  
                           ??_GPS_SendUBX 0020                  _compensate_pressure$2550 00A8  
                _compensate_pressure$2551 00B0                  _compensate_pressure$2549 00C1  
                     _compensate_pressure 15A1                __size_of_EUSART_Initialize 000B  
                               crc16@data 002B                       __end_of_EUSART_Read 197F  
                 __size_of_TransmitString 002D                   _I2C_MasterWriteTRBBuild 1A76  
                   ??_I2C_BusCollisionISR 0070                     _TMR0_InterruptHandler 016D  
                               WriteGPS@i 0026                                 __pnvBANK2 016D  
            __size_of_GPS_HasAcknowledged 0091                             FindString@src 002A  
                ??_bme280_get_sensor_data 00ED                    _PIN_MANAGER_Initialize 1CB5  
         __size_of_I2C_MasterReadTRBBuild 002B                                  ?___aldiv 0028  
                                ?___aodiv 0038                                  ?___awdiv 0075  
                        ___aodiv@quotient 004A                                  ?___awmod 0075  
                    ?_compensate_pressure 0052              __end_of_I2C_FunctionComplete 19BA  
                        crc_append_byte@i 0023              ??_INTERRUPT_InterruptManager 0075  
                          ?_ReverseString 0025                                  _BAUD1CON 019F  
                                _I2C_Stop 1A39                         ReadEnvSensor@data 002F  
                          __size_of_Sleep 003A                            __size_of_crc16 006E  
            I2C_MasterWriteTRBBuild@pdata 0075                                pnum$text29 003E  
                           _p_i2c_current 0165                           ___aldiv@divisor 0028  
                       ??_TMR0_Initialize 0077                           ___aldiv@counter 0031  
                                _LATAbits 010C                                  _LATCbits 010E  
                     __end_of_GPS_SendUBX 1BA9                                 clear_ram0 1953  
                                _PIE1bits 0090                                  _PIE2bits 0091  
                    __end_of_TransmitByte 1032                       I2C_MasterRead@pdata 0025  
                     I2C_MasterRead@pflag 002A                        crc_append_byte@crc 0075  
     __size_of_INTERRUPT_InterruptManager 001F       parse_temp_press_calib_data@reg_data 0078  
                        ??_WriteEnvSensor 002F                ??_TMR0_SetInterruptHandler 0077  
                                _PIR1bits 0010                                  _PIR2bits 0011  
                            ?_bme280_init 0070                  __size_of_crc_append_byte 0033  
          bme280_get_sensor_data@reg_data 0120                      I2C_MasterWrite@pdata 0029  
                    I2C_MasterWrite@pflag 0026                      __CFG_WDTCPS$WDTCPS1F 0000  
                                _SSP1CON1 0215                                  _SSP1CON3 0217  
                                _TMR0_ISR 1999                       I2C_ISR@pi2c_buf_ptr 0160  
                   ??_compensate_pressure 0056                                  _SSP1STAT 0214  
                        ?_bme280_get_regs 0038                            _get_calib_data 1F6E  
                            ?_TransmitBit 0070                      __size_of_IntToString 006D  
                        __size_of_I2C_ISR 014D                             Insert@current 0026  
                          GetNavData@byte 0062                            GetNavData@skip 0059  
                    WriteEnvSensor@dev_id 002A                      __size_of_SafeSetByte 0023  
                  _I2C_MasterReadTRBBuild 1BA9                      TransmitString@counti 0023  
                 bme280_get_regs@reg_addr 003F                   bme280_set_regs@reg_addr 0053  
                 bme280_get_regs@reg_data 0038                   bme280_set_regs@reg_data 0035  
                    WriteEnvSensor@status 0034                          ?_bme280_set_regs 0035  
                             _EUSART_Read 1976                         ___lmul@multiplier 0020  
                 bme280_set_regs@temp_len 004F         __size_of_bme280_parse_sensor_data 012A  
               ??_I2C_MasterWriteTRBBuild 0020                 ?_bme280_parse_sensor_data 0075  
                          _null_ptr_check 1ABB        __size_of_parse_humidity_calib_data 0099  
                     ReadEnvSensor@dev_id 002D               bme280_set_regs@reg_addr_cnt 0051  
                        ??_I2C_MasterRead 002B                        InsertString@counti 002E  
                        ??_I2C_Initialize 0075                   GetNavData@dataFieldType 005E  
                         IntToString@dest 0036                       ReadEnvSensor@status 0037  
                         IntToString@sign 003B           __size_of_bme280_get_sensor_data 0062  
                     bme280_set_regs@rslt 0052                                  _TimerISR 196D  
                                _SetupGPS 1083                    __end_of_get_calib_data 1FB6  
                       null_ptr_check@dev 0078                             InsertString@i 0031  
                 ??_OSCILLATOR_Initialize 0075                          __size_of___aldiv 0081  
                        __size_of___aodiv 00F5                          __size_of___awdiv 0051  
                        __size_of___awmod 0045                           ??_ReverseString 0027  
                                _WriteGPS 1B55                           ___aodiv@divisor 0038  
                         ___aodiv@counter 0048                             ?_GetLengthUBX 0075  
                       ClearString@counti 0024                                  crc16@crc 002D  
                                crc16@len 0029                                  crc16@str 002F  
                              strcat@dest 0078                                  _checksum 01D5  
                         _I2C_MasterWrite 1B2D       __end_of_parse_temp_press_calib_data 0795  
             _parse_temp_press_calib_data 06A0                                  __ptext10 1503  
                                __ptext11 1C59                                  __ptext20 1A76  
                                __ptext12 1FB6                                  __ptext21 1B06  
                                __ptext13 1D57                                  __ptext30 1EDF  
                                __ptext22 1F26                                  __ptext14 10D5  
                                __ptext31 170B                                  __ptext23 1944  
                                __ptext15 0576                                  __ptext40 19DD  
                                __ptext32 1C2C                                  __ptext24 1BA9  
                                __ptext16 1DCC                                  __ptext41 194D  
                                __ptext33 1002                                  __ptext25 12E0  
                                __ptext17 1ABB                                  __ptext50 1A98  
                                __ptext42 1CB5                                  __ptext34 19BA  
                                __ptext26 0287                                  __ptext18 1CE8  
                                __ptext51 1205                                  __ptext43 1966  
                                __ptext35 1083                                  __ptext27 1C86  
                                __ptext19 1B2D                                  __ptext60 1AE0  
                                __ptext52 1E0E                                  __ptext44 1A20  
                                __ptext36 1B7F                                  __ptext28 1358  
                                __ptext61 1A07                                  __ptext53 0795  
                                __ptext45 197F                                  __ptext37 19CB  
                                __ptext29 15A1                                  __ptext70 1000  
                                __ptext62 1BD4                                  __ptext54 1032  
                                __ptext46 1137                                  __ptext38 13D9  
                                __ptext55 1E99                                  __ptext47 006E  
                                __ptext39 198A                                  __ptext64 1999  
                                __ptext56 1E53                                  __ptext48 1B55  
                                __ptext65 1943                                  __ptext57 1D91  
                                __ptext49 195F                                  __ptext66 196D  
                                __ptext58 1948                                  __ptext67 0429  
                                __ptext59 1976                                  __ptext68 1A39  
                                __ptext69 19A9               __end_of_interleave_reg_addr 1C86  
                            _SSP1CON1bits 0215                    __end_of_null_ptr_check 1AE0  
                            _SSP1CON2bits 0216                               _GPS_SendUBX 1B7F  
            I2C_MasterTRBInsert@ptrb_list 0075             compensate_pressure@calib_data 0052  
                              strcpy@dest 0029               __size_of_EUSART_is_rx_ready 0005  
                          _TransmitString 1C2C                             __size_of_main 00C9  
                    _I2C_FunctionComplete 19A9         bme280_compensate_data@sensor_comp 00EA  
                ??_bme280_compensate_data 00E8         __end_of_parse_humidity_calib_data 1503  
                             _message_end 03A0                                  _messages 007B  
    __end_of_TMR0_DefaultInterruptHandler 1944     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 1943                      __CFG_WDTCWS$WDTCWSSW 0000  
 __end_of_I2C_WaitForLastPacketToComplete 1948  __size_of_I2C_WaitForLastPacketToComplete 0004  
       ??_I2C_WaitForLastPacketToComplete 0075          ?_I2C_WaitForLastPacketToComplete 0070  
         _I2C_WaitForLastPacketToComplete 1944                                _RC1STAbits 019D  
                         ?_get_calib_data 0070               _compensate_temperature$2548 0045  
                                int$flags 007E                        IntToHexString@dest 0036  
      __end_of_INTERRUPT_InterruptManager 0023                _INTERRUPT_InterruptManager 0004  
                          ??_GetLengthUBX 0078                         ??_crc_append_byte 0020  
                         main@sensor_data 014B                       _GPS_HasAcknowledged 13D9  
                              _INTCONbits 000B                    _bme280_get_sensor_data 10D5  
                       InsertString@index 002A                        bme280_set_regs@dev 0037  
                      bme280_set_regs@len 0036                            __pstringtext10 18B4  
                          __pstringtext11 0000                  ??_compensate_temperature 003B  
                   I2C_MasterRead@address 0028                   __size_of_IntToHexString 0067  
       bme280_compensate_data@uncomp_data 00E5                           ?_null_ptr_check 0070  
              bme280_get_sensor_data@F271 0248                bme280_get_sensor_data@F273 023C  
                      pnum$text29_split_1 0068                    __end_of_TransmitString 1C59  
                   __size_of_TransmitByte 0030                                  intlevel1 0000  
                             FindString@i 002B                          TransmitByte@byte 0020  
                               strcat@src 002A                               FlashError@i 0077  
                   ?_I2C_FunctionComplete 0070                             ??_ClearString 0078  
                 ?_PIN_MANAGER_Initialize 0070                     I2C_MasterRead@trBlock 01DB  
              bme280_get_sensor_data@rslt 0129                         __CFG_CLKOUTEN$OFF 0000  
            __size_of_I2C_MasterTRBInsert 0048                      ?_GPS_HasAcknowledged 0070  
                               strcpy@src 0022             ?_TMR0_DefaultInterruptHandler 0070  
            GPS_HasAcknowledged@ackByteID 0030              GPS_HasAcknowledged@ackPacket 0025  
                  I2C_MasterWrite@address 0024                      __size_of_bme280_init 0067  
                 __end_of_I2C_MasterWrite 1B55                             __pstringtext1 1800  
                           __pstringtext2 181A                             __pstringtext3 1834  
                           __pstringtext4 184E                             __pstringtext5 1868  
                           __pstringtext6 1882                             __pstringtext7 189C  
                           __pstringtext8 18AA                             __pstringtext9 18AF  
                    __size_of_TransmitBit 0011                    I2C_MasterWrite@trBlock 01E0  
                              _OPTION_REG 0095                              _TransmitByte 1002  
                         _TMR0_Initialize 19DD                              ___aldiv@sign 0032  
                       WriteEnvSensor@len 002D                          GetNavData@F10100 0250  
                        GetNavData@F10106 0230               __end_of_I2C_BusCollisionISR 1002  
                  __size_of_ReadEnvSensor 0036                        EUSART_Write@txData 0075  
                            ___aodiv@sign 0049                           ?_TransmitString 0070  
          __end_of_PIN_MANAGER_Initialize 1CE8                           Insert@destLimit 0023  
          I2C_MasterWriteTRBBuild@address 0077               WriteEnvSensor@local_address 0033  
                     bme280_get_regs@rslt 0040                     ??_GPS_HasAcknowledged 0075  
         __size_of_bme280_compensate_data 0078             I2C_MasterWriteTRBBuild@length 0076  
       bme280_get_sensor_data@sensor_comp 0128  
