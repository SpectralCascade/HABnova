

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 29 22:28:05 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F1619 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001A                     	;# 
   100  001B                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  001D                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0090                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0113                     	;# 
   131  0114                     	;# 
   132  0115                     	;# 
   133  0116                     	;# 
   134  0117                     	;# 
   135  0118                     	;# 
   136  0119                     	;# 
   137  011C                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  018E                     	;# 
   141  0191                     	;# 
   142  0191                     	;# 
   143  0192                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0194                     	;# 
   147  0195                     	;# 
   148  0196                     	;# 
   149  0197                     	;# 
   150  0199                     	;# 
   151  0199                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019A                     	;# 
   155  019A                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019C                     	;# 
   162  019C                     	;# 
   163  019C                     	;# 
   164  019D                     	;# 
   165  019D                     	;# 
   166  019D                     	;# 
   167  019E                     	;# 
   168  019E                     	;# 
   169  019E                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  019F                     	;# 
   173  019F                     	;# 
   174  019F                     	;# 
   175  020C                     	;# 
   176  020D                     	;# 
   177  020E                     	;# 
   178  0211                     	;# 
   179  0211                     	;# 
   180  0212                     	;# 
   181  0212                     	;# 
   182  0213                     	;# 
   183  0213                     	;# 
   184  0214                     	;# 
   185  0214                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  028C                     	;# 
   195  028D                     	;# 
   196  028E                     	;# 
   197  0291                     	;# 
   198  0291                     	;# 
   199  0292                     	;# 
   200  0293                     	;# 
   201  0294                     	;# 
   202  0298                     	;# 
   203  0298                     	;# 
   204  0299                     	;# 
   205  029A                     	;# 
   206  029B                     	;# 
   207  029E                     	;# 
   208  030C                     	;# 
   209  030D                     	;# 
   210  030E                     	;# 
   211  038C                     	;# 
   212  038D                     	;# 
   213  038E                     	;# 
   214  0391                     	;# 
   215  0392                     	;# 
   216  0393                     	;# 
   217  0394                     	;# 
   218  0395                     	;# 
   219  0396                     	;# 
   220  0397                     	;# 
   221  0398                     	;# 
   222  0399                     	;# 
   223  040E                     	;# 
   224  0413                     	;# 
   225  0413                     	;# 
   226  0414                     	;# 
   227  0414                     	;# 
   228  0415                     	;# 
   229  0416                     	;# 
   230  0417                     	;# 
   231  0418                     	;# 
   232  041A                     	;# 
   233  041A                     	;# 
   234  041B                     	;# 
   235  041B                     	;# 
   236  041C                     	;# 
   237  041D                     	;# 
   238  041E                     	;# 
   239  041F                     	;# 
   240  0493                     	;# 
   241  0494                     	;# 
   242  0495                     	;# 
   243  0496                     	;# 
   244  049A                     	;# 
   245  049B                     	;# 
   246  049C                     	;# 
   247  049D                     	;# 
   248  058C                     	;# 
   249  058C                     	;# 
   250  058D                     	;# 
   251  058E                     	;# 
   252  058E                     	;# 
   253  058F                     	;# 
   254  0590                     	;# 
   255  0590                     	;# 
   256  0591                     	;# 
   257  0592                     	;# 
   258  0592                     	;# 
   259  0593                     	;# 
   260  0594                     	;# 
   261  0594                     	;# 
   262  0595                     	;# 
   263  0596                     	;# 
   264  0596                     	;# 
   265  0597                     	;# 
   266  0598                     	;# 
   267  0599                     	;# 
   268  059A                     	;# 
   269  059B                     	;# 
   270  059B                     	;# 
   271  059C                     	;# 
   272  059D                     	;# 
   273  060C                     	;# 
   274  060C                     	;# 
   275  060D                     	;# 
   276  060E                     	;# 
   277  060F                     	;# 
   278  060F                     	;# 
   279  0610                     	;# 
   280  0611                     	;# 
   281  0612                     	;# 
   282  0613                     	;# 
   283  0614                     	;# 
   284  0617                     	;# 
   285  0617                     	;# 
   286  0618                     	;# 
   287  0619                     	;# 
   288  061A                     	;# 
   289  061A                     	;# 
   290  061B                     	;# 
   291  061C                     	;# 
   292  0691                     	;# 
   293  0692                     	;# 
   294  0693                     	;# 
   295  0694                     	;# 
   296  0695                     	;# 
   297  0696                     	;# 
   298  0697                     	;# 
   299  0699                     	;# 
   300  069A                     	;# 
   301  0711                     	;# 
   302  0712                     	;# 
   303  0713                     	;# 
   304  0714                     	;# 
   305  0715                     	;# 
   306  0718                     	;# 
   307  0718                     	;# 
   308  0719                     	;# 
   309  071A                     	;# 
   310  071A                     	;# 
   311  071B                     	;# 
   312  071C                     	;# 
   313  071D                     	;# 
   314  0791                     	;# 
   315  0791                     	;# 
   316  0792                     	;# 
   317  0793                     	;# 
   318  0793                     	;# 
   319  0794                     	;# 
   320  0795                     	;# 
   321  0795                     	;# 
   322  0796                     	;# 
   323  0797                     	;# 
   324  0797                     	;# 
   325  0798                     	;# 
   326  0799                     	;# 
   327  079A                     	;# 
   328  080C                     	;# 
   329  080C                     	;# 
   330  080D                     	;# 
   331  080E                     	;# 
   332  080E                     	;# 
   333  080F                     	;# 
   334  0810                     	;# 
   335  0810                     	;# 
   336  0811                     	;# 
   337  0812                     	;# 
   338  0812                     	;# 
   339  0813                     	;# 
   340  0814                     	;# 
   341  0815                     	;# 
   342  0816                     	;# 
   343  0817                     	;# 
   344  0818                     	;# 
   345  0819                     	;# 
   346  081A                     	;# 
   347  081A                     	;# 
   348  081B                     	;# 
   349  081C                     	;# 
   350  081C                     	;# 
   351  081D                     	;# 
   352  088C                     	;# 
   353  088D                     	;# 
   354  088E                     	;# 
   355  088F                     	;# 
   356  088F                     	;# 
   357  0890                     	;# 
   358  0891                     	;# 
   359  0892                     	;# 
   360  0893                     	;# 
   361  0893                     	;# 
   362  0894                     	;# 
   363  0895                     	;# 
   364  0896                     	;# 
   365  0897                     	;# 
   366  0897                     	;# 
   367  0898                     	;# 
   368  0899                     	;# 
   369  0D8C                     	;# 
   370  0D8C                     	;# 
   371  0D8D                     	;# 
   372  0D8E                     	;# 
   373  0D8F                     	;# 
   374  0D8F                     	;# 
   375  0D90                     	;# 
   376  0D91                     	;# 
   377  0D92                     	;# 
   378  0D92                     	;# 
   379  0D93                     	;# 
   380  0D94                     	;# 
   381  0D95                     	;# 
   382  0D95                     	;# 
   383  0D96                     	;# 
   384  0D97                     	;# 
   385  0D98                     	;# 
   386  0D99                     	;# 
   387  0D9A                     	;# 
   388  0D9B                     	;# 
   389  0D9C                     	;# 
   390  0D9D                     	;# 
   391  0D9E                     	;# 
   392  0D9E                     	;# 
   393  0D9F                     	;# 
   394  0DA0                     	;# 
   395  0DA1                     	;# 
   396  0DA1                     	;# 
   397  0DA2                     	;# 
   398  0DA3                     	;# 
   399  0DA4                     	;# 
   400  0DA4                     	;# 
   401  0DA5                     	;# 
   402  0DA6                     	;# 
   403  0DA7                     	;# 
   404  0DA7                     	;# 
   405  0DA8                     	;# 
   406  0DA9                     	;# 
   407  0DAA                     	;# 
   408  0DAB                     	;# 
   409  0DAC                     	;# 
   410  0DAD                     	;# 
   411  0DAE                     	;# 
   412  0DAF                     	;# 
   413  0E0F                     	;# 
   414  0E10                     	;# 
   415  0E11                     	;# 
   416  0E12                     	;# 
   417  0E13                     	;# 
   418  0E14                     	;# 
   419  0E15                     	;# 
   420  0E16                     	;# 
   421  0E17                     	;# 
   422  0E18                     	;# 
   423  0E19                     	;# 
   424  0E1A                     	;# 
   425  0E1B                     	;# 
   426  0E1C                     	;# 
   427  0E1D                     	;# 
   428  0E1E                     	;# 
   429  0E1F                     	;# 
   430  0E20                     	;# 
   431  0E21                     	;# 
   432  0E22                     	;# 
   433  0E23                     	;# 
   434  0E24                     	;# 
   435  0E25                     	;# 
   436  0E26                     	;# 
   437  0E27                     	;# 
   438  0E28                     	;# 
   439  0E29                     	;# 
   440  0E2A                     	;# 
   441  0E2B                     	;# 
   442  0E2C                     	;# 
   443  0E2D                     	;# 
   444  0E2E                     	;# 
   445  0E90                     	;# 
   446  0E91                     	;# 
   447  0E92                     	;# 
   448  0E94                     	;# 
   449  0E95                     	;# 
   450  0E9C                     	;# 
   451  0E9D                     	;# 
   452  0E9E                     	;# 
   453  0E9F                     	;# 
   454  0EA0                     	;# 
   455  0EA1                     	;# 
   456  0EA2                     	;# 
   457  0EA3                     	;# 
   458  0EA4                     	;# 
   459  0EA5                     	;# 
   460  0EA6                     	;# 
   461  0EA7                     	;# 
   462  0F0F                     	;# 
   463  0F10                     	;# 
   464  0F11                     	;# 
   465  0F12                     	;# 
   466  0F13                     	;# 
   467  0F14                     	;# 
   468  0F15                     	;# 
   469  0F16                     	;# 
   470  0F17                     	;# 
   471  0F18                     	;# 
   472  0F19                     	;# 
   473  0F1A                     	;# 
   474  0F1B                     	;# 
   475  0F1C                     	;# 
   476  0F1D                     	;# 
   477  0F1E                     	;# 
   478  0F1F                     	;# 
   479  0F20                     	;# 
   480  0F21                     	;# 
   481  0F22                     	;# 
   482  0F23                     	;# 
   483  0F24                     	;# 
   484  0F25                     	;# 
   485  0F26                     	;# 
   486  0F27                     	;# 
   487  0F28                     	;# 
   488  0F29                     	;# 
   489  0F2A                     	;# 
   490  0F2B                     	;# 
   491  0F2C                     	;# 
   492  0F2D                     	;# 
   493  0F2E                     	;# 
   494  0F2F                     	;# 
   495  0F30                     	;# 
   496  0F31                     	;# 
   497  0F32                     	;# 
   498  0F33                     	;# 
   499  0F34                     	;# 
   500  0F35                     	;# 
   501  0F36                     	;# 
   502  0F37                     	;# 
   503  0FE4                     	;# 
   504  0FE5                     	;# 
   505  0FE6                     	;# 
   506  0FE7                     	;# 
   507  0FE8                     	;# 
   508  0FE9                     	;# 
   509  0FEA                     	;# 
   510  0FEB                     	;# 
   511  0FED                     	;# 
   512  0FEE                     	;# 
   513  0FEF                     	;# 
   514  0000                     	;# 
   515  0001                     	;# 
   516  0002                     	;# 
   517  0003                     	;# 
   518  0004                     	;# 
   519  0005                     	;# 
   520  0006                     	;# 
   521  0007                     	;# 
   522  0008                     	;# 
   523  0009                     	;# 
   524  000A                     	;# 
   525  000B                     	;# 
   526  000C                     	;# 
   527  000D                     	;# 
   528  000E                     	;# 
   529  0010                     	;# 
   530  0011                     	;# 
   531  0012                     	;# 
   532  0013                     	;# 
   533  0014                     	;# 
   534  0015                     	;# 
   535  0016                     	;# 
   536  0016                     	;# 
   537  0017                     	;# 
   538  0018                     	;# 
   539  0019                     	;# 
   540  001A                     	;# 
   541  001A                     	;# 
   542  001B                     	;# 
   543  001B                     	;# 
   544  001C                     	;# 
   545  001D                     	;# 
   546  001E                     	;# 
   547  001F                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  0090                     	;# 
   552  0091                     	;# 
   553  0092                     	;# 
   554  0093                     	;# 
   555  0094                     	;# 
   556  0095                     	;# 
   557  0096                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009A                     	;# 
   561  009B                     	;# 
   562  009B                     	;# 
   563  009C                     	;# 
   564  009D                     	;# 
   565  009E                     	;# 
   566  009F                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  0111                     	;# 
   571  0112                     	;# 
   572  0113                     	;# 
   573  0114                     	;# 
   574  0115                     	;# 
   575  0116                     	;# 
   576  0117                     	;# 
   577  0118                     	;# 
   578  0119                     	;# 
   579  011C                     	;# 
   580  018C                     	;# 
   581  018D                     	;# 
   582  018E                     	;# 
   583  0191                     	;# 
   584  0191                     	;# 
   585  0192                     	;# 
   586  0193                     	;# 
   587  0193                     	;# 
   588  0194                     	;# 
   589  0195                     	;# 
   590  0196                     	;# 
   591  0197                     	;# 
   592  0199                     	;# 
   593  0199                     	;# 
   594  0199                     	;# 
   595  019A                     	;# 
   596  019A                     	;# 
   597  019A                     	;# 
   598  019B                     	;# 
   599  019B                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019C                     	;# 
   604  019C                     	;# 
   605  019C                     	;# 
   606  019D                     	;# 
   607  019D                     	;# 
   608  019D                     	;# 
   609  019E                     	;# 
   610  019E                     	;# 
   611  019E                     	;# 
   612  019F                     	;# 
   613  019F                     	;# 
   614  019F                     	;# 
   615  019F                     	;# 
   616  019F                     	;# 
   617  020C                     	;# 
   618  020D                     	;# 
   619  020E                     	;# 
   620  0211                     	;# 
   621  0211                     	;# 
   622  0212                     	;# 
   623  0212                     	;# 
   624  0213                     	;# 
   625  0213                     	;# 
   626  0214                     	;# 
   627  0214                     	;# 
   628  0215                     	;# 
   629  0215                     	;# 
   630  0215                     	;# 
   631  0215                     	;# 
   632  0216                     	;# 
   633  0216                     	;# 
   634  0217                     	;# 
   635  0217                     	;# 
   636  028C                     	;# 
   637  028D                     	;# 
   638  028E                     	;# 
   639  0291                     	;# 
   640  0291                     	;# 
   641  0292                     	;# 
   642  0293                     	;# 
   643  0294                     	;# 
   644  0298                     	;# 
   645  0298                     	;# 
   646  0299                     	;# 
   647  029A                     	;# 
   648  029B                     	;# 
   649  029E                     	;# 
   650  030C                     	;# 
   651  030D                     	;# 
   652  030E                     	;# 
   653  038C                     	;# 
   654  038D                     	;# 
   655  038E                     	;# 
   656  0391                     	;# 
   657  0392                     	;# 
   658  0393                     	;# 
   659  0394                     	;# 
   660  0395                     	;# 
   661  0396                     	;# 
   662  0397                     	;# 
   663  0398                     	;# 
   664  0399                     	;# 
   665  040E                     	;# 
   666  0413                     	;# 
   667  0413                     	;# 
   668  0414                     	;# 
   669  0414                     	;# 
   670  0415                     	;# 
   671  0416                     	;# 
   672  0417                     	;# 
   673  0418                     	;# 
   674  041A                     	;# 
   675  041A                     	;# 
   676  041B                     	;# 
   677  041B                     	;# 
   678  041C                     	;# 
   679  041D                     	;# 
   680  041E                     	;# 
   681  041F                     	;# 
   682  0493                     	;# 
   683  0494                     	;# 
   684  0495                     	;# 
   685  0496                     	;# 
   686  049A                     	;# 
   687  049B                     	;# 
   688  049C                     	;# 
   689  049D                     	;# 
   690  058C                     	;# 
   691  058C                     	;# 
   692  058D                     	;# 
   693  058E                     	;# 
   694  058E                     	;# 
   695  058F                     	;# 
   696  0590                     	;# 
   697  0590                     	;# 
   698  0591                     	;# 
   699  0592                     	;# 
   700  0592                     	;# 
   701  0593                     	;# 
   702  0594                     	;# 
   703  0594                     	;# 
   704  0595                     	;# 
   705  0596                     	;# 
   706  0596                     	;# 
   707  0597                     	;# 
   708  0598                     	;# 
   709  0599                     	;# 
   710  059A                     	;# 
   711  059B                     	;# 
   712  059B                     	;# 
   713  059C                     	;# 
   714  059D                     	;# 
   715  060C                     	;# 
   716  060C                     	;# 
   717  060D                     	;# 
   718  060E                     	;# 
   719  060F                     	;# 
   720  060F                     	;# 
   721  0610                     	;# 
   722  0611                     	;# 
   723  0612                     	;# 
   724  0613                     	;# 
   725  0614                     	;# 
   726  0617                     	;# 
   727  0617                     	;# 
   728  0618                     	;# 
   729  0619                     	;# 
   730  061A                     	;# 
   731  061A                     	;# 
   732  061B                     	;# 
   733  061C                     	;# 
   734  0691                     	;# 
   735  0692                     	;# 
   736  0693                     	;# 
   737  0694                     	;# 
   738  0695                     	;# 
   739  0696                     	;# 
   740  0697                     	;# 
   741  0699                     	;# 
   742  069A                     	;# 
   743  0711                     	;# 
   744  0712                     	;# 
   745  0713                     	;# 
   746  0714                     	;# 
   747  0715                     	;# 
   748  0718                     	;# 
   749  0718                     	;# 
   750  0719                     	;# 
   751  071A                     	;# 
   752  071A                     	;# 
   753  071B                     	;# 
   754  071C                     	;# 
   755  071D                     	;# 
   756  0791                     	;# 
   757  0791                     	;# 
   758  0792                     	;# 
   759  0793                     	;# 
   760  0793                     	;# 
   761  0794                     	;# 
   762  0795                     	;# 
   763  0795                     	;# 
   764  0796                     	;# 
   765  0797                     	;# 
   766  0797                     	;# 
   767  0798                     	;# 
   768  0799                     	;# 
   769  079A                     	;# 
   770  080C                     	;# 
   771  080C                     	;# 
   772  080D                     	;# 
   773  080E                     	;# 
   774  080E                     	;# 
   775  080F                     	;# 
   776  0810                     	;# 
   777  0810                     	;# 
   778  0811                     	;# 
   779  0812                     	;# 
   780  0812                     	;# 
   781  0813                     	;# 
   782  0814                     	;# 
   783  0815                     	;# 
   784  0816                     	;# 
   785  0817                     	;# 
   786  0818                     	;# 
   787  0819                     	;# 
   788  081A                     	;# 
   789  081A                     	;# 
   790  081B                     	;# 
   791  081C                     	;# 
   792  081C                     	;# 
   793  081D                     	;# 
   794  088C                     	;# 
   795  088D                     	;# 
   796  088E                     	;# 
   797  088F                     	;# 
   798  088F                     	;# 
   799  0890                     	;# 
   800  0891                     	;# 
   801  0892                     	;# 
   802  0893                     	;# 
   803  0893                     	;# 
   804  0894                     	;# 
   805  0895                     	;# 
   806  0896                     	;# 
   807  0897                     	;# 
   808  0897                     	;# 
   809  0898                     	;# 
   810  0899                     	;# 
   811  0D8C                     	;# 
   812  0D8C                     	;# 
   813  0D8D                     	;# 
   814  0D8E                     	;# 
   815  0D8F                     	;# 
   816  0D8F                     	;# 
   817  0D90                     	;# 
   818  0D91                     	;# 
   819  0D92                     	;# 
   820  0D92                     	;# 
   821  0D93                     	;# 
   822  0D94                     	;# 
   823  0D95                     	;# 
   824  0D95                     	;# 
   825  0D96                     	;# 
   826  0D97                     	;# 
   827  0D98                     	;# 
   828  0D99                     	;# 
   829  0D9A                     	;# 
   830  0D9B                     	;# 
   831  0D9C                     	;# 
   832  0D9D                     	;# 
   833  0D9E                     	;# 
   834  0D9E                     	;# 
   835  0D9F                     	;# 
   836  0DA0                     	;# 
   837  0DA1                     	;# 
   838  0DA1                     	;# 
   839  0DA2                     	;# 
   840  0DA3                     	;# 
   841  0DA4                     	;# 
   842  0DA4                     	;# 
   843  0DA5                     	;# 
   844  0DA6                     	;# 
   845  0DA7                     	;# 
   846  0DA7                     	;# 
   847  0DA8                     	;# 
   848  0DA9                     	;# 
   849  0DAA                     	;# 
   850  0DAB                     	;# 
   851  0DAC                     	;# 
   852  0DAD                     	;# 
   853  0DAE                     	;# 
   854  0DAF                     	;# 
   855  0E0F                     	;# 
   856  0E10                     	;# 
   857  0E11                     	;# 
   858  0E12                     	;# 
   859  0E13                     	;# 
   860  0E14                     	;# 
   861  0E15                     	;# 
   862  0E16                     	;# 
   863  0E17                     	;# 
   864  0E18                     	;# 
   865  0E19                     	;# 
   866  0E1A                     	;# 
   867  0E1B                     	;# 
   868  0E1C                     	;# 
   869  0E1D                     	;# 
   870  0E1E                     	;# 
   871  0E1F                     	;# 
   872  0E20                     	;# 
   873  0E21                     	;# 
   874  0E22                     	;# 
   875  0E23                     	;# 
   876  0E24                     	;# 
   877  0E25                     	;# 
   878  0E26                     	;# 
   879  0E27                     	;# 
   880  0E28                     	;# 
   881  0E29                     	;# 
   882  0E2A                     	;# 
   883  0E2B                     	;# 
   884  0E2C                     	;# 
   885  0E2D                     	;# 
   886  0E2E                     	;# 
   887  0E90                     	;# 
   888  0E91                     	;# 
   889  0E92                     	;# 
   890  0E94                     	;# 
   891  0E95                     	;# 
   892  0E9C                     	;# 
   893  0E9D                     	;# 
   894  0E9E                     	;# 
   895  0E9F                     	;# 
   896  0EA0                     	;# 
   897  0EA1                     	;# 
   898  0EA2                     	;# 
   899  0EA3                     	;# 
   900  0EA4                     	;# 
   901  0EA5                     	;# 
   902  0EA6                     	;# 
   903  0EA7                     	;# 
   904  0F0F                     	;# 
   905  0F10                     	;# 
   906  0F11                     	;# 
   907  0F12                     	;# 
   908  0F13                     	;# 
   909  0F14                     	;# 
   910  0F15                     	;# 
   911  0F16                     	;# 
   912  0F17                     	;# 
   913  0F18                     	;# 
   914  0F19                     	;# 
   915  0F1A                     	;# 
   916  0F1B                     	;# 
   917  0F1C                     	;# 
   918  0F1D                     	;# 
   919  0F1E                     	;# 
   920  0F1F                     	;# 
   921  0F20                     	;# 
   922  0F21                     	;# 
   923  0F22                     	;# 
   924  0F23                     	;# 
   925  0F24                     	;# 
   926  0F25                     	;# 
   927  0F26                     	;# 
   928  0F27                     	;# 
   929  0F28                     	;# 
   930  0F29                     	;# 
   931  0F2A                     	;# 
   932  0F2B                     	;# 
   933  0F2C                     	;# 
   934  0F2D                     	;# 
   935  0F2E                     	;# 
   936  0F2F                     	;# 
   937  0F30                     	;# 
   938  0F31                     	;# 
   939  0F32                     	;# 
   940  0F33                     	;# 
   941  0F34                     	;# 
   942  0F35                     	;# 
   943  0F36                     	;# 
   944  0F37                     	;# 
   945  0FE4                     	;# 
   946  0FE5                     	;# 
   947  0FE6                     	;# 
   948  0FE7                     	;# 
   949  0FE8                     	;# 
   950  0FE9                     	;# 
   951  0FEA                     	;# 
   952  0FEB                     	;# 
   953  0FED                     	;# 
   954  0FEE                     	;# 
   955  0FEF                     	;# 
   956  0000                     	;# 
   957  0001                     	;# 
   958  0002                     	;# 
   959  0003                     	;# 
   960  0004                     	;# 
   961  0005                     	;# 
   962  0006                     	;# 
   963  0007                     	;# 
   964  0008                     	;# 
   965  0009                     	;# 
   966  000A                     	;# 
   967  000B                     	;# 
   968  000C                     	;# 
   969  000D                     	;# 
   970  000E                     	;# 
   971  0010                     	;# 
   972  0011                     	;# 
   973  0012                     	;# 
   974  0013                     	;# 
   975  0014                     	;# 
   976  0015                     	;# 
   977  0016                     	;# 
   978  0016                     	;# 
   979  0017                     	;# 
   980  0018                     	;# 
   981  0019                     	;# 
   982  001A                     	;# 
   983  001A                     	;# 
   984  001B                     	;# 
   985  001B                     	;# 
   986  001C                     	;# 
   987  001D                     	;# 
   988  001E                     	;# 
   989  001F                     	;# 
   990  008C                     	;# 
   991  008D                     	;# 
   992  008E                     	;# 
   993  0090                     	;# 
   994  0091                     	;# 
   995  0092                     	;# 
   996  0093                     	;# 
   997  0094                     	;# 
   998  0095                     	;# 
   999  0096                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  009F                     	;# 
  1009  010C                     	;# 
  1010  010D                     	;# 
  1011  010E                     	;# 
  1012  0111                     	;# 
  1013  0112                     	;# 
  1014  0113                     	;# 
  1015  0114                     	;# 
  1016  0115                     	;# 
  1017  0116                     	;# 
  1018  0117                     	;# 
  1019  0118                     	;# 
  1020  0119                     	;# 
  1021  011C                     	;# 
  1022  018C                     	;# 
  1023  018D                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0194                     	;# 
  1031  0195                     	;# 
  1032  0196                     	;# 
  1033  0197                     	;# 
  1034  0199                     	;# 
  1035  0199                     	;# 
  1036  0199                     	;# 
  1037  019A                     	;# 
  1038  019A                     	;# 
  1039  019A                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019B                     	;# 
  1043  019B                     	;# 
  1044  019B                     	;# 
  1045  019C                     	;# 
  1046  019C                     	;# 
  1047  019C                     	;# 
  1048  019D                     	;# 
  1049  019D                     	;# 
  1050  019D                     	;# 
  1051  019E                     	;# 
  1052  019E                     	;# 
  1053  019E                     	;# 
  1054  019F                     	;# 
  1055  019F                     	;# 
  1056  019F                     	;# 
  1057  019F                     	;# 
  1058  019F                     	;# 
  1059  020C                     	;# 
  1060  020D                     	;# 
  1061  020E                     	;# 
  1062  0211                     	;# 
  1063  0211                     	;# 
  1064  0212                     	;# 
  1065  0212                     	;# 
  1066  0213                     	;# 
  1067  0213                     	;# 
  1068  0214                     	;# 
  1069  0214                     	;# 
  1070  0215                     	;# 
  1071  0215                     	;# 
  1072  0215                     	;# 
  1073  0215                     	;# 
  1074  0216                     	;# 
  1075  0216                     	;# 
  1076  0217                     	;# 
  1077  0217                     	;# 
  1078  028C                     	;# 
  1079  028D                     	;# 
  1080  028E                     	;# 
  1081  0291                     	;# 
  1082  0291                     	;# 
  1083  0292                     	;# 
  1084  0293                     	;# 
  1085  0294                     	;# 
  1086  0298                     	;# 
  1087  0298                     	;# 
  1088  0299                     	;# 
  1089  029A                     	;# 
  1090  029B                     	;# 
  1091  029E                     	;# 
  1092  030C                     	;# 
  1093  030D                     	;# 
  1094  030E                     	;# 
  1095  038C                     	;# 
  1096  038D                     	;# 
  1097  038E                     	;# 
  1098  0391                     	;# 
  1099  0392                     	;# 
  1100  0393                     	;# 
  1101  0394                     	;# 
  1102  0395                     	;# 
  1103  0396                     	;# 
  1104  0397                     	;# 
  1105  0398                     	;# 
  1106  0399                     	;# 
  1107  040E                     	;# 
  1108  0413                     	;# 
  1109  0413                     	;# 
  1110  0414                     	;# 
  1111  0414                     	;# 
  1112  0415                     	;# 
  1113  0416                     	;# 
  1114  0417                     	;# 
  1115  0418                     	;# 
  1116  041A                     	;# 
  1117  041A                     	;# 
  1118  041B                     	;# 
  1119  041B                     	;# 
  1120  041C                     	;# 
  1121  041D                     	;# 
  1122  041E                     	;# 
  1123  041F                     	;# 
  1124  0493                     	;# 
  1125  0494                     	;# 
  1126  0495                     	;# 
  1127  0496                     	;# 
  1128  049A                     	;# 
  1129  049B                     	;# 
  1130  049C                     	;# 
  1131  049D                     	;# 
  1132  058C                     	;# 
  1133  058C                     	;# 
  1134  058D                     	;# 
  1135  058E                     	;# 
  1136  058E                     	;# 
  1137  058F                     	;# 
  1138  0590                     	;# 
  1139  0590                     	;# 
  1140  0591                     	;# 
  1141  0592                     	;# 
  1142  0592                     	;# 
  1143  0593                     	;# 
  1144  0594                     	;# 
  1145  0594                     	;# 
  1146  0595                     	;# 
  1147  0596                     	;# 
  1148  0596                     	;# 
  1149  0597                     	;# 
  1150  0598                     	;# 
  1151  0599                     	;# 
  1152  059A                     	;# 
  1153  059B                     	;# 
  1154  059B                     	;# 
  1155  059C                     	;# 
  1156  059D                     	;# 
  1157  060C                     	;# 
  1158  060C                     	;# 
  1159  060D                     	;# 
  1160  060E                     	;# 
  1161  060F                     	;# 
  1162  060F                     	;# 
  1163  0610                     	;# 
  1164  0611                     	;# 
  1165  0612                     	;# 
  1166  0613                     	;# 
  1167  0614                     	;# 
  1168  0617                     	;# 
  1169  0617                     	;# 
  1170  0618                     	;# 
  1171  0619                     	;# 
  1172  061A                     	;# 
  1173  061A                     	;# 
  1174  061B                     	;# 
  1175  061C                     	;# 
  1176  0691                     	;# 
  1177  0692                     	;# 
  1178  0693                     	;# 
  1179  0694                     	;# 
  1180  0695                     	;# 
  1181  0696                     	;# 
  1182  0697                     	;# 
  1183  0699                     	;# 
  1184  069A                     	;# 
  1185  0711                     	;# 
  1186  0712                     	;# 
  1187  0713                     	;# 
  1188  0714                     	;# 
  1189  0715                     	;# 
  1190  0718                     	;# 
  1191  0718                     	;# 
  1192  0719                     	;# 
  1193  071A                     	;# 
  1194  071A                     	;# 
  1195  071B                     	;# 
  1196  071C                     	;# 
  1197  071D                     	;# 
  1198  0791                     	;# 
  1199  0791                     	;# 
  1200  0792                     	;# 
  1201  0793                     	;# 
  1202  0793                     	;# 
  1203  0794                     	;# 
  1204  0795                     	;# 
  1205  0795                     	;# 
  1206  0796                     	;# 
  1207  0797                     	;# 
  1208  0797                     	;# 
  1209  0798                     	;# 
  1210  0799                     	;# 
  1211  079A                     	;# 
  1212  080C                     	;# 
  1213  080C                     	;# 
  1214  080D                     	;# 
  1215  080E                     	;# 
  1216  080E                     	;# 
  1217  080F                     	;# 
  1218  0810                     	;# 
  1219  0810                     	;# 
  1220  0811                     	;# 
  1221  0812                     	;# 
  1222  0812                     	;# 
  1223  0813                     	;# 
  1224  0814                     	;# 
  1225  0815                     	;# 
  1226  0816                     	;# 
  1227  0817                     	;# 
  1228  0818                     	;# 
  1229  0819                     	;# 
  1230  081A                     	;# 
  1231  081A                     	;# 
  1232  081B                     	;# 
  1233  081C                     	;# 
  1234  081C                     	;# 
  1235  081D                     	;# 
  1236  088C                     	;# 
  1237  088D                     	;# 
  1238  088E                     	;# 
  1239  088F                     	;# 
  1240  088F                     	;# 
  1241  0890                     	;# 
  1242  0891                     	;# 
  1243  0892                     	;# 
  1244  0893                     	;# 
  1245  0893                     	;# 
  1246  0894                     	;# 
  1247  0895                     	;# 
  1248  0896                     	;# 
  1249  0897                     	;# 
  1250  0897                     	;# 
  1251  0898                     	;# 
  1252  0899                     	;# 
  1253  0D8C                     	;# 
  1254  0D8C                     	;# 
  1255  0D8D                     	;# 
  1256  0D8E                     	;# 
  1257  0D8F                     	;# 
  1258  0D8F                     	;# 
  1259  0D90                     	;# 
  1260  0D91                     	;# 
  1261  0D92                     	;# 
  1262  0D92                     	;# 
  1263  0D93                     	;# 
  1264  0D94                     	;# 
  1265  0D95                     	;# 
  1266  0D95                     	;# 
  1267  0D96                     	;# 
  1268  0D97                     	;# 
  1269  0D98                     	;# 
  1270  0D99                     	;# 
  1271  0D9A                     	;# 
  1272  0D9B                     	;# 
  1273  0D9C                     	;# 
  1274  0D9D                     	;# 
  1275  0D9E                     	;# 
  1276  0D9E                     	;# 
  1277  0D9F                     	;# 
  1278  0DA0                     	;# 
  1279  0DA1                     	;# 
  1280  0DA1                     	;# 
  1281  0DA2                     	;# 
  1282  0DA3                     	;# 
  1283  0DA4                     	;# 
  1284  0DA4                     	;# 
  1285  0DA5                     	;# 
  1286  0DA6                     	;# 
  1287  0DA7                     	;# 
  1288  0DA7                     	;# 
  1289  0DA8                     	;# 
  1290  0DA9                     	;# 
  1291  0DAA                     	;# 
  1292  0DAB                     	;# 
  1293  0DAC                     	;# 
  1294  0DAD                     	;# 
  1295  0DAE                     	;# 
  1296  0DAF                     	;# 
  1297  0E0F                     	;# 
  1298  0E10                     	;# 
  1299  0E11                     	;# 
  1300  0E12                     	;# 
  1301  0E13                     	;# 
  1302  0E14                     	;# 
  1303  0E15                     	;# 
  1304  0E16                     	;# 
  1305  0E17                     	;# 
  1306  0E18                     	;# 
  1307  0E19                     	;# 
  1308  0E1A                     	;# 
  1309  0E1B                     	;# 
  1310  0E1C                     	;# 
  1311  0E1D                     	;# 
  1312  0E1E                     	;# 
  1313  0E1F                     	;# 
  1314  0E20                     	;# 
  1315  0E21                     	;# 
  1316  0E22                     	;# 
  1317  0E23                     	;# 
  1318  0E24                     	;# 
  1319  0E25                     	;# 
  1320  0E26                     	;# 
  1321  0E27                     	;# 
  1322  0E28                     	;# 
  1323  0E29                     	;# 
  1324  0E2A                     	;# 
  1325  0E2B                     	;# 
  1326  0E2C                     	;# 
  1327  0E2D                     	;# 
  1328  0E2E                     	;# 
  1329  0E90                     	;# 
  1330  0E91                     	;# 
  1331  0E92                     	;# 
  1332  0E94                     	;# 
  1333  0E95                     	;# 
  1334  0E9C                     	;# 
  1335  0E9D                     	;# 
  1336  0E9E                     	;# 
  1337  0E9F                     	;# 
  1338  0EA0                     	;# 
  1339  0EA1                     	;# 
  1340  0EA2                     	;# 
  1341  0EA3                     	;# 
  1342  0EA4                     	;# 
  1343  0EA5                     	;# 
  1344  0EA6                     	;# 
  1345  0EA7                     	;# 
  1346  0F0F                     	;# 
  1347  0F10                     	;# 
  1348  0F11                     	;# 
  1349  0F12                     	;# 
  1350  0F13                     	;# 
  1351  0F14                     	;# 
  1352  0F15                     	;# 
  1353  0F16                     	;# 
  1354  0F17                     	;# 
  1355  0F18                     	;# 
  1356  0F19                     	;# 
  1357  0F1A                     	;# 
  1358  0F1B                     	;# 
  1359  0F1C                     	;# 
  1360  0F1D                     	;# 
  1361  0F1E                     	;# 
  1362  0F1F                     	;# 
  1363  0F20                     	;# 
  1364  0F21                     	;# 
  1365  0F22                     	;# 
  1366  0F23                     	;# 
  1367  0F24                     	;# 
  1368  0F25                     	;# 
  1369  0F26                     	;# 
  1370  0F27                     	;# 
  1371  0F28                     	;# 
  1372  0F29                     	;# 
  1373  0F2A                     	;# 
  1374  0F2B                     	;# 
  1375  0F2C                     	;# 
  1376  0F2D                     	;# 
  1377  0F2E                     	;# 
  1378  0F2F                     	;# 
  1379  0F30                     	;# 
  1380  0F31                     	;# 
  1381  0F32                     	;# 
  1382  0F33                     	;# 
  1383  0F34                     	;# 
  1384  0F35                     	;# 
  1385  0F36                     	;# 
  1386  0F37                     	;# 
  1387  0FE4                     	;# 
  1388  0FE5                     	;# 
  1389  0FE6                     	;# 
  1390  0FE7                     	;# 
  1391  0FE8                     	;# 
  1392  0FE9                     	;# 
  1393  0FEA                     	;# 
  1394  0FEB                     	;# 
  1395  0FED                     	;# 
  1396  0FEE                     	;# 
  1397  0FEF                     	;# 
  1398                           
  1399                           	psect	stringtext1
  1400  0821                     __pstringtext1:	
  1401  0821                     crc16@FRONT_BIT:	
  1402  0821  3400               	retlw	0
  1403  0822  3480               	retlw	128
  1404  0823                     __end_ofcrc16@FRONT_BIT:	
  1405                           
  1406                           	psect	stringtext2
  1407  0800                     __pstringtext2:	
  1408  0800                     _BAUD_DELAY:	
  1409  0800  3414               	retlw	20
  1410  0801  3400               	retlw	0
  1411  0802                     __end_of_BAUD_DELAY:	
  1412  0095                     _OPTION_REGbits	set	149
  1413  008E                     _TRISC	set	142
  1414  008D                     _TRISB	set	141
  1415  008C                     _TRISA	set	140
  1416  0098                     _OSCTUNE	set	152
  1417  0099                     _OSCCON	set	153
  1418  010C                     _LATAbits	set	268
  1419  010E                     _LATC	set	270
  1420  010D                     _LATB	set	269
  1421  010C                     _LATA	set	268
  1422  0116                     _BORCON	set	278
  1423  018C                     _ANSELA	set	396
  1424  018D                     _ANSELB	set	397
  1425  018E                     _ANSELC	set	398
  1426  020E                     _WPUC	set	526
  1427  020C                     _WPUA	set	524
  1428  020D                     _WPUB	set	525
  1429  028E                     _ODCONC	set	654
  1430  028D                     _ODCONB	set	653
  1431  028C                     _ODCONA	set	652
  1432  030E                     _SLRCONC	set	782
  1433  030D                     _SLRCONB	set	781
  1434  030C                     _SLRCONA	set	780
  1435  0802                     STR_1:	
  1436  0802  3452               	retlw	82	;'R'
  1437  0803  3454               	retlw	84	;'T'
  1438  0804  3454               	retlw	84	;'T'
  1439  0805  3459               	retlw	89	;'Y'
  1440  0806  3420               	retlw	32	;' '
  1441  0807  3454               	retlw	84	;'T'
  1442  0808  3465               	retlw	101	;'e'
  1443  0809  3473               	retlw	115	;'s'
  1444  080A  3474               	retlw	116	;'t'
  1445  080B  342C               	retlw	44	;','
  1446  080C  3420               	retlw	32	;' '
  1447  080D  3448               	retlw	72	;'H'
  1448  080E  3465               	retlw	101	;'e'
  1449  080F  346C               	retlw	108	;'l'
  1450  0810  346C               	retlw	108	;'l'
  1451  0811  346F               	retlw	111	;'o'
  1452  0812  3420               	retlw	32	;' '
  1453  0813  3457               	retlw	87	;'W'
  1454  0814  346F               	retlw	111	;'o'
  1455  0815  3472               	retlw	114	;'r'
  1456  0816  346C               	retlw	108	;'l'
  1457  0817  3464               	retlw	100	;'d'
  1458  0818  3421               	retlw	33	;'!'
  1459  0819  3420               	retlw	32	;' '
  1460  081A  3449               	retlw	73	;'I'
  1461  081B  3444               	retlw	68	;'D'
  1462  081C  343A               	retlw	58	;':'
  1463  081D  3420               	retlw	32	;' '
  1464  081E  3425               	retlw	37	;'%'
  1465  081F  3464               	retlw	100	;'d'
  1466  0820  3400               	retlw	0
  1467                           
  1468                           	psect	stringtext3
  1469  0000                     __pstringtext3:	
  1470                           
  1471                           ; #config settings
  1472  0000                     
  1473                           	psect	cinit
  1474  07EA                     start_initialization:	
  1475  07EA                     __initialization:	
  1476                           
  1477                           ; Clear objects allocated to BANK0
  1478  07EA  0020               	movlb	0	; select bank0
  1479  07EB  01EB               	clrf	__pbssBANK0& (0+127)
  1480  07EC  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  1481  07ED  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  1482  07EE  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  1483                           
  1484                           ; Clear objects allocated to BANK1
  1485  07EF  0021               	movlb	1	; select bank1
  1486  07F0  01D8               	clrf	__pbssBANK1& (0+127)
  1487  07F1  01D9               	clrf	(__pbssBANK1+1)& (0+127)
  1488  07F2  01DA               	clrf	(__pbssBANK1+2)& (0+127)
  1489  07F3  01DB               	clrf	(__pbssBANK1+3)& (0+127)
  1490  07F4  01DC               	clrf	(__pbssBANK1+4)& (0+127)
  1491  07F5  01DD               	clrf	(__pbssBANK1+5)& (0+127)
  1492                           
  1493                           ; Clear objects allocated to BANK2
  1494  07F6  3020               	movlw	low __pbssBANK2
  1495  07F7  0084               	movwf	4
  1496  07F8  3001               	movlw	high __pbssBANK2
  1497  07F9  0085               	movwf	5
  1498  07FA  3020               	movlw	32
  1499  07FB  3181  2130         	fcall	clear_ram0
  1500  07FD                     end_of_initialization:	
  1501                           ;End of C runtime variable initialization code
  1502                           
  1503  07FD                     __end_of__initialization:	
  1504  07FD  0020               	movlb	0
  1505  07FE  3183  2B3E         	ljmp	_main	;jump to C main() function
  1506                           
  1507                           	psect	bssBANK0
  1508  006B                     __pbssBANK0:	
  1509  006B                     _prec:	
  1510  006B                     	ds	2
  1511  006D                     _flags:	
  1512  006D                     	ds	2
  1513                           
  1514                           	psect	bssBANK1
  1515  00D8                     __pbssBANK1:	
  1516  00D8                     _nout:	
  1517  00D8                     	ds	2
  1518  00DA                     _width:	
  1519  00DA                     	ds	2
  1520  00DC                     _transmission_time:	
  1521  00DC                     	ds	2
  1522                           
  1523                           	psect	bssBANK2
  1524  0120                     __pbssBANK2:	
  1525  0120                     _dbuf:	
  1526  0120                     	ds	32
  1527                           
  1528                           	psect	clrtext
  1529  0130                     clear_ram0:	
  1530                           ;	Called with FSR0 containing the base address, and
  1531                           ;	WREG with the size to clear
  1532                           
  1533  0130  0064               	clrwdt	;clear the watchdog before getting into this loop
  1534  0131                     clrloop0:	
  1535  0131  0180               	clrf	0	;clear RAM location pointed to by FSR
  1536  0132  3101               	addfsr 0,1
  1537  0133  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1538  0134  2931               	goto	clrloop0	;have we reached the end yet?
  1539  0135  3400               	retlw	0	;all done for this memory range, return
  1540                           
  1541                           	psect	cstackBANK1
  1542  00A0                     __pcstackBANK1:	
  1543  00A0                     	ds	2
  1544  00A2                     sprintf@ap:	
  1545                           
  1546                           ; 1 bytes @ 0x2
  1547  00A2                     	ds	1
  1548  00A3                     sprintf@s:	
  1549                           
  1550                           ; 1 bytes @ 0x3
  1551  00A3                     	ds	1
  1552  00A4                     sprintf@f:	
  1553                           
  1554                           ; 5 bytes @ 0x4
  1555  00A4                     	ds	5
  1556  00A9                     main@message:	
  1557                           
  1558                           ; 43 bytes @ 0x9
  1559  00A9                     	ds	43
  1560  00D4                     main@id:	
  1561                           
  1562                           ; 2 bytes @ 0x34
  1563  00D4                     	ds	2
  1564  00D6                     main@i:	
  1565                           
  1566                           ; 2 bytes @ 0x36
  1567  00D6                     	ds	2
  1568                           
  1569                           	psect	cstackCOMMON
  1570  0070                     __pcstackCOMMON:	
  1571  0070                     ?_PIN_MANAGER_Initialize:	
  1572  0070                     ??_PIN_MANAGER_Initialize:	
  1573                           ; 1 bytes @ 0x0
  1574                           
  1575  0070                     ?_OSCILLATOR_Initialize:	
  1576                           ; 1 bytes @ 0x0
  1577                           
  1578  0070                     ??_OSCILLATOR_Initialize:	
  1579                           ; 1 bytes @ 0x0
  1580                           
  1581  0070                     ?_putch:	
  1582                           ; 1 bytes @ 0x0
  1583                           
  1584  0070                     ??_putch:	
  1585                           ; 1 bytes @ 0x0
  1586                           
  1587  0070                     ?_SYSTEM_Initialize:	
  1588                           ; 1 bytes @ 0x0
  1589                           
  1590  0070                     ??_SYSTEM_Initialize:	
  1591                           ; 1 bytes @ 0x0
  1592                           
  1593  0070                     ?_TransmitBit:	
  1594                           ; 1 bytes @ 0x0
  1595                           
  1596  0070                     ??_TransmitBit:	
  1597                           ; 1 bytes @ 0x0
  1598                           
  1599  0070                     ?_TransmitByte:	
  1600                           ; 1 bytes @ 0x0
  1601                           
  1602  0070                     ?_TransmitString:	
  1603                           ; 1 bytes @ 0x0
  1604                           
  1605  0070                     ?_main:	
  1606                           ; 1 bytes @ 0x0
  1607                           
  1608  0070                     ??___aodiv:	
  1609                           ; 1 bytes @ 0x0
  1610                           
  1611  0070                     ??___aomod:	
  1612                           ; 1 bytes @ 0x0
  1613                           
  1614  0070                     ?_strlen:	
  1615                           ; 1 bytes @ 0x0
  1616                           
  1617  0070                     ?_fputc:	
  1618                           ; 2 bytes @ 0x0
  1619                           
  1620  0070                     putch@c:	
  1621                           ; 2 bytes @ 0x0
  1622                           
  1623  0070                     fputc@c:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     strlen@s:	
  1627                           ; 2 bytes @ 0x0
  1628                           
  1629                           
  1630                           ; 2 bytes @ 0x0
  1631  0070                     	ds	1
  1632  0071                     TransmitBit@b:	
  1633  0071                     ___aodiv@counter:	
  1634                           ; 1 bytes @ 0x1
  1635                           
  1636  0071                     ___aomod@counter:	
  1637                           ; 1 bytes @ 0x1
  1638                           
  1639                           
  1640                           ; 1 bytes @ 0x1
  1641  0071                     	ds	1
  1642  0072                     ??_strlen:	
  1643  0072                     ??_TransmitByte:	
  1644                           ; 1 bytes @ 0x2
  1645                           
  1646  0072                     ___aodiv@sign:	
  1647                           ; 1 bytes @ 0x2
  1648                           
  1649  0072                     ___aomod@sign:	
  1650                           ; 1 bytes @ 0x2
  1651                           
  1652  0072                     fputc@fp:	
  1653                           ; 1 bytes @ 0x2
  1654                           
  1655  0072                     strlen@a:	
  1656                           ; 1 bytes @ 0x2
  1657                           
  1658                           
  1659                           ; 2 bytes @ 0x2
  1660  0072                     	ds	1
  1661  0073                     ??_fputc:	
  1662  0073                     ?_abs:	
  1663                           ; 1 bytes @ 0x3
  1664                           
  1665  0073                     TransmitByte@byte:	
  1666                           ; 2 bytes @ 0x3
  1667                           
  1668  0073                     abs@a:	
  1669                           ; 1 bytes @ 0x3
  1670                           
  1671  0073                     ___aodiv@quotient:	
  1672                           ; 2 bytes @ 0x3
  1673                           
  1674                           
  1675                           ; 8 bytes @ 0x3
  1676  0073                     	ds	1
  1677  0074                     ?_crc16:	
  1678  0074                     crc16@polynomial:	
  1679                           ; 2 bytes @ 0x4
  1680                           
  1681  0074                     TransmitByte@i:	
  1682                           ; 2 bytes @ 0x4
  1683                           
  1684                           
  1685                           ; 2 bytes @ 0x4
  1686  0074                     	ds	1
  1687  0075                     ??_abs:	
  1688                           
  1689                           ; 1 bytes @ 0x5
  1690  0075                     	ds	1
  1691  0076                     ??_crc16:	
  1692  0076                     ??_TransmitString:	
  1693                           ; 1 bytes @ 0x6
  1694                           
  1695                           
  1696                           ; 1 bytes @ 0x6
  1697  0076                     	ds	1
  1698  0077                     TransmitString@counti:	
  1699                           
  1700                           ; 2 bytes @ 0x7
  1701  0077                     	ds	1
  1702  0078                     ?_fputs:	
  1703  0078                     fputs@fp:	
  1704                           ; 2 bytes @ 0x8
  1705                           
  1706                           
  1707                           ; 1 bytes @ 0x8
  1708  0078                     	ds	1
  1709  0079                     ??_fputs:	
  1710  0079                     ?_AppendCRC:	
  1711                           ; 1 bytes @ 0x9
  1712                           
  1713  0079                     TransmitString@message:	
  1714                           ; 1 bytes @ 0x9
  1715                           
  1716  0079                     AppendCRC@crc:	
  1717                           ; 1 bytes @ 0x9
  1718                           
  1719                           
  1720                           ; 2 bytes @ 0x9
  1721  0079                     	ds	1
  1722  007A                     TransmitString@i:	
  1723                           
  1724                           ; 2 bytes @ 0xA
  1725  007A                     	ds	1
  1726  007B                     ??_AppendCRC:	
  1727                           
  1728                           ; 1 bytes @ 0xB
  1729  007B                     	ds	1
  1730  007C                     ??_pad:	
  1731                           
  1732                           ; 1 bytes @ 0xC
  1733  007C                     	ds	1
  1734  007D                     ??_sprintf:	
  1735                           
  1736                           ; 1 bytes @ 0xD
  1737  007D                     	ds	1
  1738                           
  1739                           	psect	cstackBANK0
  1740  0020                     __pcstackBANK0:	
  1741  0020                     ?___aodiv:	
  1742  0020                     ?___aomod:	
  1743                           ; 8 bytes @ 0x0
  1744                           
  1745  0020                     fputs@c:	
  1746                           ; 8 bytes @ 0x0
  1747                           
  1748  0020                     ___aodiv@divisor:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0020                     ___aomod@divisor:	
  1752                           ; 8 bytes @ 0x0
  1753                           
  1754                           
  1755                           ; 8 bytes @ 0x0
  1756  0020                     	ds	1
  1757  0021                     crc16@counti:	
  1758  0021                     fputs@i:	
  1759                           ; 2 bytes @ 0x1
  1760                           
  1761                           
  1762                           ; 2 bytes @ 0x1
  1763  0021                     	ds	2
  1764  0023                     crc16@byte:	
  1765  0023                     fputs@s:	
  1766                           ; 1 bytes @ 0x3
  1767                           
  1768                           
  1769                           ; 1 bytes @ 0x3
  1770  0023                     	ds	1
  1771  0024                     ?_pad:	
  1772  0024                     pad@buf:	
  1773                           ; 2 bytes @ 0x4
  1774                           
  1775  0024                     crc16@i:	
  1776                           ; 1 bytes @ 0x4
  1777                           
  1778                           
  1779                           ; 2 bytes @ 0x4
  1780  0024                     	ds	1
  1781  0025                     pad@p:	
  1782                           
  1783                           ; 2 bytes @ 0x5
  1784  0025                     	ds	1
  1785  0026                     crc16@i_139:	
  1786                           
  1787                           ; 2 bytes @ 0x6
  1788  0026                     	ds	1
  1789  0027                     pad@i:	
  1790                           
  1791                           ; 2 bytes @ 0x7
  1792  0027                     	ds	1
  1793  0028                     crc16@message:	
  1794  0028                     ___aodiv@dividend:	
  1795                           ; 1 bytes @ 0x8
  1796                           
  1797  0028                     ___aomod@dividend:	
  1798                           ; 8 bytes @ 0x8
  1799                           
  1800                           
  1801                           ; 8 bytes @ 0x8
  1802  0028                     	ds	1
  1803  0029                     crc16@crc:	
  1804  0029                     pad@w:	
  1805                           ; 2 bytes @ 0x9
  1806                           
  1807                           
  1808                           ; 2 bytes @ 0x9
  1809  0029                     	ds	2
  1810  002B                     AppendCRC@data:	
  1811  002B                     pad@fp:	
  1812                           ; 1 bytes @ 0xB
  1813                           
  1814                           
  1815                           ; 1 bytes @ 0xB
  1816  002B                     	ds	1
  1817  002C                     AppendCRC@len:	
  1818                           
  1819                           ; 2 bytes @ 0xC
  1820  002C                     	ds	4
  1821  0030                     ?_dtoa:	
  1822  0030                     dtoa@d:	
  1823                           ; 2 bytes @ 0x10
  1824                           
  1825                           
  1826                           ; 8 bytes @ 0x10
  1827  0030                     	ds	8
  1828  0038                     ??_dtoa:	
  1829                           
  1830                           ; 1 bytes @ 0x18
  1831  0038                     	ds	3
  1832  003B                     dtoa@fp:	
  1833                           
  1834                           ; 1 bytes @ 0x1B
  1835  003B                     	ds	1
  1836  003C                     _dtoa$250:	
  1837                           
  1838                           ; 2 bytes @ 0x1C
  1839  003C                     	ds	2
  1840  003E                     dtoa@p:	
  1841                           
  1842                           ; 2 bytes @ 0x1E
  1843  003E                     	ds	2
  1844  0040                     dtoa@w:	
  1845                           
  1846                           ; 2 bytes @ 0x20
  1847  0040                     	ds	2
  1848  0042                     dtoa@s:	
  1849                           
  1850                           ; 2 bytes @ 0x22
  1851  0042                     	ds	2
  1852  0044                     dtoa@n:	
  1853                           
  1854                           ; 8 bytes @ 0x24
  1855  0044                     	ds	8
  1856  004C                     dtoa@i:	
  1857                           
  1858                           ; 2 bytes @ 0x2C
  1859  004C                     	ds	2
  1860  004E                     ?_vfpfcnvrt:	
  1861  004E                     vfpfcnvrt@fmt:	
  1862                           ; 2 bytes @ 0x2E
  1863                           
  1864                           
  1865                           ; 1 bytes @ 0x2E
  1866  004E                     	ds	1
  1867  004F                     vfpfcnvrt@ap:	
  1868                           
  1869                           ; 1 bytes @ 0x2F
  1870  004F                     	ds	1
  1871  0050                     ??_vfpfcnvrt:	
  1872                           
  1873                           ; 1 bytes @ 0x30
  1874  0050                     	ds	5
  1875  0055                     vfpfcnvrt@ll:	
  1876                           
  1877                           ; 8 bytes @ 0x35
  1878  0055                     	ds	8
  1879  005D                     vfpfcnvrt@fp:	
  1880                           
  1881                           ; 1 bytes @ 0x3D
  1882  005D                     	ds	1
  1883  005E                     ?_vfprintf:	
  1884  005E                     vfprintf@fmt:	
  1885                           ; 2 bytes @ 0x3E
  1886                           
  1887                           
  1888                           ; 2 bytes @ 0x3E
  1889  005E                     	ds	2
  1890  0060                     vfprintf@ap:	
  1891                           
  1892                           ; 1 bytes @ 0x40
  1893  0060                     	ds	1
  1894  0061                     ??_vfprintf:	
  1895                           
  1896                           ; 1 bytes @ 0x41
  1897  0061                     	ds	2
  1898  0063                     vfprintf@fp:	
  1899                           
  1900                           ; 1 bytes @ 0x43
  1901  0063                     	ds	1
  1902  0064                     vfprintf@cfmt:	
  1903                           
  1904                           ; 2 bytes @ 0x44
  1905  0064                     	ds	2
  1906  0066                     ?_sprintf:	
  1907  0066                     sprintf@fmt:	
  1908                           ; 2 bytes @ 0x46
  1909                           
  1910                           
  1911                           ; 2 bytes @ 0x46
  1912  0066                     	ds	4
  1913  006A                     ??_main:	
  1914                           
  1915                           ; 1 bytes @ 0x4A
  1916  006A                     	ds	1
  1917                           
  1918                           	psect	maintext
  1919  033E                     __pmaintext:	
  1920 ;;
  1921 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1922 ;;
  1923 ;; *************** function _main *****************
  1924 ;; Defined at:
  1925 ;;		line 97 in file "main.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;		None
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  i               2   54[BANK1 ] int 
  1930 ;;  message        43    9[BANK1 ] unsigned char [43]
  1931 ;;  id              2   52[BANK1 ] int 
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  1    wreg      void 
  1934 ;; Registers used:
  1935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1936 ;; Tracked objects:
  1937 ;;		On entry : B1F/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1942 ;;      Locals:         0       0      47       0       0       0       0       0       0       0       0       0       
      +0       0
  1943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1944 ;;      Totals:         0       1      47       0       0       0       0       0       0       0       0       0       
      +0       0
  1945 ;;Total ram usage:       48 bytes
  1946 ;; Hardware stack levels required when called:    8
  1947 ;; This function calls:
  1948 ;;		_AppendCRC
  1949 ;;		_PIN_MANAGER_Initialize
  1950 ;;		_SYSTEM_Initialize
  1951 ;;		_TransmitBit
  1952 ;;		_TransmitString
  1953 ;;		_crc16
  1954 ;;		_sprintf
  1955 ;; This function is called by:
  1956 ;;		Startup code after reset
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           
  1961                           ;psect for function _main
  1962  033E                     _main:	
  1963                           
  1964                           ;main.c: 99:     SYSTEM_Initialize();
  1965                           
  1966                           ;incstack = 0
  1967                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1968  033E  3181  212A  3183   	fcall	_SYSTEM_Initialize
  1969                           
  1970                           ;main.c: 100:     PIN_MANAGER_Initialize();
  1971  0341  3181  21C0  3183   	fcall	_PIN_MANAGER_Initialize
  1972                           
  1973                           ;main.c: 102:     char message[40 + 3];;main.c: 104:     int id = 0;
  1974  0344  0021               	movlb	1	; select bank1
  1975  0345  01D4               	clrf	main@id^(0+128)
  1976  0346  01D5               	clrf	(main@id+1)^(0+128)
  1977  0347                     l1738:	
  1978                           
  1979                           ;main.c: 106:     {;main.c: 107:         sprintf(message, "RTTY Test, Hello World! ID: %
      +                          d", id);
  1980  0347  3002               	movlw	low (STR_1| (0+32768))
  1981  0348  0020               	movlb	0	; select bank0
  1982  0349  00E6               	movwf	sprintf@fmt
  1983  034A  3088               	movlw	high (STR_1| (0+32768))
  1984  034B  00E7               	movwf	sprintf@fmt+1
  1985  034C  0021               	movlb	1	; select bank1
  1986  034D  0855               	movf	(main@id+1)^(0+128),w
  1987  034E  0020               	movlb	0	; select bank0
  1988  034F  00E9               	movwf	?_sprintf+3
  1989  0350  0021               	movlb	1	; select bank1
  1990  0351  0854               	movf	main@id^(0+128),w
  1991  0352  0020               	movlb	0	; select bank0
  1992  0353  00E8               	movwf	?_sprintf+2
  1993  0354  30A9               	movlw	(low (main@message| 0))& (0+255)
  1994  0355  3181  219D  3183   	fcall	_sprintf
  1995                           
  1996                           ;main.c: 108:         id++;
  1997  0358  3001               	movlw	1
  1998  0359  0021               	movlb	1	; select bank1
  1999  035A  07D4               	addwf	main@id^(0+128),f
  2000  035B  3000               	movlw	0
  2001  035C  3DD5               	addwfc	(main@id+1)^(0+128),f
  2002                           
  2003                           ;main.c: 109:         AppendCRC(message, crc16(message, 0x8408));
  2004  035D  3008               	movlw	8
  2005  035E  00F4               	movwf	crc16@polynomial
  2006  035F  3084               	movlw	132
  2007  0360  00F5               	movwf	crc16@polynomial+1
  2008  0361  30A9               	movlw	(low (main@message| 0))& (0+255)
  2009  0362  3183  2396  3183   	fcall	_crc16
  2010  0365  0875               	movf	?_crc16+1,w
  2011  0366  00FA               	movwf	AppendCRC@crc+1
  2012  0367  0874               	movf	?_crc16,w
  2013  0368  00F9               	movwf	AppendCRC@crc
  2014  0369  30A9               	movlw	(low (main@message| 0))& (0+255)
  2015  036A  3182  22A7  3183   	fcall	_AppendCRC
  2016                           
  2017                           ;main.c: 110:         TransmitString(message);
  2018  036D  30A9               	movlw	(low (main@message| 0))& (0+255)
  2019  036E  3182  220A  3183   	fcall	_TransmitString
  2020                           
  2021                           ;main.c: 112:         TransmitBit(0);
  2022  0371  3000               	movlw	0
  2023  0372  3181  2154  3183   	fcall	_TransmitBit
  2024                           
  2025                           ;main.c: 114:         for (int i = 0; i < 1000; i++)
  2026  0375  0021               	movlb	1	; select bank1
  2027  0376  01D6               	clrf	main@i^(0+128)
  2028  0377  01D7               	clrf	(main@i+1)^(0+128)
  2029  0378                     l1754:	
  2030                           
  2031                           ;main.c: 115:         {;main.c: 116:             _delay((unsigned long)((5)*(4000000/400
      +                          0.0)));
  2032  0378  3007               	movlw	7
  2033  0379  0020               	movlb	0	; select bank0
  2034  037A  00EA               	movwf	??_main
  2035  037B  307D               	movlw	125
  2036  037C                     u1647:	
  2037  037C  0B89               	decfsz	9,f
  2038  037D  2B7C               	goto	u1647
  2039  037E  0BEA               	decfsz	??_main,f
  2040  037F  2B7C               	goto	u1647
  2041                           
  2042                           ;main.c: 117:         }
  2043  0380  3001               	movlw	1
  2044  0381  0021               	movlb	1	; select bank1
  2045  0382  07D6               	addwf	main@i^(0+128),f
  2046  0383  3000               	movlw	0
  2047  0384  3DD7               	addwfc	(main@i+1)^(0+128),f
  2048  0385  0857               	movf	(main@i+1)^(0+128),w
  2049  0386  3A80               	xorlw	128
  2050  0387  0020               	movlb	0	; select bank0
  2051  0388  00EA               	movwf	??_main
  2052  0389  3083               	movlw	131
  2053  038A  026A               	subwf	??_main,w
  2054  038B  1D03               	skipz
  2055  038C  2B90               	goto	u1635
  2056  038D  30E8               	movlw	232
  2057  038E  0021               	movlb	1	; select bank1
  2058  038F  0256               	subwf	main@i^(0+128),w
  2059  0390                     u1635:	
  2060  0390  1C03               	skipc
  2061  0391  2B78               	goto	l1754
  2062                           
  2063                           ;main.c: 118:         transmission_time = 0;
  2064  0392  0021               	movlb	1	; select bank1
  2065  0393  01DC               	clrf	_transmission_time^(0+128)
  2066  0394  01DD               	clrf	(_transmission_time+1)^(0+128)
  2067  0395  2B47               	goto	l1738
  2068  0396                     __end_of_main:	
  2069                           
  2070                           	psect	text1
  2071  019D                     __ptext1:	
  2072 ;; *************** function _sprintf *****************
  2073 ;; Defined at:
  2074 ;;		line 9 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\nf_sprintf.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  s               1    wreg     PTR unsigned char 
  2077 ;;		 -> main@message(43), 
  2078 ;;  fmt             2   70[BANK0 ] PTR const unsigned char 
  2079 ;;		 -> STR_1(31), 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  s               1    3[BANK1 ] PTR unsigned char 
  2082 ;;		 -> main@message(43), 
  2083 ;;  f               5    4[BANK1 ] struct _IO_FILE
  2084 ;;  ret             2    0        int 
  2085 ;;  ap              1    2[BANK1 ] PTR void [1]
  2086 ;;		 -> ?_sprintf(2), 
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  2   70[BANK0 ] int 
  2089 ;; Registers used:
  2090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2097 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  2098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2099 ;;      Totals:         1       4       9       0       0       0       0       0       0       0       0       0       
      +0       0
  2100 ;;Total ram usage:       14 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    7
  2103 ;; This function calls:
  2104 ;;		_vfprintf
  2105 ;; This function is called by:
  2106 ;;		_main
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           
  2111                           ;psect for function _sprintf
  2112  019D                     _sprintf:	
  2113                           
  2114                           ;incstack = 0
  2115                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2116                           ;sprintf@s stored from wreg
  2117  019D  0021               	movlb	1	; select bank1
  2118  019E  00A3               	movwf	sprintf@s^(0+128)
  2119  019F  3068               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2120  01A0  00FD               	movwf	??_sprintf
  2121  01A1  087D               	movf	??_sprintf,w
  2122  01A2  00A2               	movwf	sprintf@ap^(0+128)
  2123  01A3  0823               	movf	sprintf@s^(0+128),w
  2124  01A4  00FD               	movwf	??_sprintf
  2125  01A5  087D               	movf	??_sprintf,w
  2126  01A6  00A4               	movwf	sprintf@f^(0+128)
  2127  01A7  01A5               	clrf	(sprintf@f^(0+128)+1)
  2128  01A8  01A6               	clrf	((sprintf@f+1)^(0+128)+1)
  2129  01A9  01A7               	clrf	(sprintf@f^(0+128)+3)
  2130  01AA  01A8               	clrf	((sprintf@f+1)^(0+128)+3)
  2131  01AB  0020               	movlb	0	; select bank0
  2132  01AC  0867               	movf	sprintf@fmt+1,w
  2133  01AD  00DF               	movwf	vfprintf@fmt+1
  2134  01AE  0866               	movf	sprintf@fmt,w
  2135  01AF  00DE               	movwf	vfprintf@fmt
  2136  01B0  30A2               	movlw	(low (sprintf@ap| 0))& (0+255)
  2137  01B1  00FD               	movwf	??_sprintf
  2138  01B2  087D               	movf	??_sprintf,w
  2139  01B3  00E0               	movwf	vfprintf@ap
  2140  01B4  30A4               	movlw	(low (sprintf@f| 0))& (0+255)
  2141  01B5  3182  2233         	fcall	_vfprintf
  2142  01B7  0021               	movlb	1	; select bank1
  2143  01B8  0825               	movf	(sprintf@f^(0+128)+1),w
  2144  01B9  0723               	addwf	sprintf@s^(0+128),w
  2145  01BA  00FD               	movwf	??_sprintf
  2146  01BB  087D               	movf	??_sprintf,w
  2147  01BC  0086               	movwf	6
  2148  01BD  0187               	clrf	7
  2149  01BE  0181               	clrf	1
  2150  01BF  0008               	return
  2151  01C0                     __end_of_sprintf:	
  2152                           
  2153                           	psect	text2
  2154  0233                     __ptext2:	
  2155 ;; *************** function _vfprintf *****************
  2156 ;; Defined at:
  2157 ;;		line 1368 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  fp              1    wreg     PTR struct _IO_FILE
  2160 ;;		 -> sprintf@f(5), 
  2161 ;;  fmt             2   62[BANK0 ] PTR const unsigned char 
  2162 ;;		 -> STR_1(31), 
  2163 ;;  ap              1   64[BANK0 ] PTR PTR void 
  2164 ;;		 -> sprintf@ap(1), 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  fp              1   67[BANK0 ] PTR struct _IO_FILE
  2167 ;;		 -> sprintf@f(5), 
  2168 ;;  cfmt            2   68[BANK0 ] PTR unsigned char 
  2169 ;;		 -> STR_1(31), 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  2   62[BANK0 ] int 
  2172 ;; Registers used:
  2173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2179 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2180 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2182 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2183 ;;Total ram usage:        8 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    6
  2186 ;; This function calls:
  2187 ;;		_vfpfcnvrt
  2188 ;; This function is called by:
  2189 ;;		_sprintf
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           
  2194                           ;psect for function _vfprintf
  2195  0233                     _vfprintf:	
  2196                           
  2197                           ;incstack = 0
  2198                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2199                           ;vfprintf@fp stored from wreg
  2200  0233  0020               	movlb	0	; select bank0
  2201  0234  00E3               	movwf	vfprintf@fp
  2202                           
  2203                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1368: int vfprintf(FIL
      +                          E *fp, const char *fmt, va_list ap);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\comm
      +                          on\doprnt.c: 1369: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 13
      +                          71:     char *cfmt;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 137
      +                          3:     cfmt = (char *)fmt;
  2204  0235  085F               	movf	vfprintf@fmt+1,w
  2205  0236  00E5               	movwf	vfprintf@cfmt+1
  2206  0237  085E               	movf	vfprintf@fmt,w
  2207  0238  00E4               	movwf	vfprintf@cfmt
  2208                           
  2209                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1374:     nout = 0;
  2210  0239  0021               	movlb	1	; select bank1
  2211  023A  01D8               	clrf	_nout^(0+128)
  2212  023B  01D9               	clrf	(_nout+1)^(0+128)
  2213  023C                     l1660:	
  2214                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1375:     while (*cfmt
      +                          ) {
  2215                           
  2216                           
  2217                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1375:     while (*cfmt
      +                          ) {
  2218  023C  0020               	movlb	0	; select bank0
  2219  023D  0864               	movf	vfprintf@cfmt,w
  2220  023E  0084               	movwf	4
  2221  023F  0865               	movf	vfprintf@cfmt+1,w
  2222  0240  0085               	movwf	5
  2223  0241  0012               	moviw fsr0++
  2224  0242  1903               	btfsc	3,2
  2225  0243  2A59               	goto	l1662
  2226                           
  2227                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1376:         nout += 
      +                          vfpfcnvrt(fp, &cfmt, ap);
  2228  0244  3064               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  2229  0245  00E1               	movwf	??_vfprintf
  2230  0246  0861               	movf	??_vfprintf,w
  2231  0247  00CE               	movwf	vfpfcnvrt@fmt
  2232  0248  0860               	movf	vfprintf@ap,w
  2233  0249  00E2               	movwf	??_vfprintf+1
  2234  024A  0862               	movf	??_vfprintf+1,w
  2235  024B  00CF               	movwf	vfpfcnvrt@ap
  2236  024C  0863               	movf	vfprintf@fp,w
  2237  024D  3184  2405  3182   	fcall	_vfpfcnvrt
  2238  0250  0020               	movlb	0	; select bank0
  2239  0251  084E               	movf	?_vfpfcnvrt,w
  2240  0252  0021               	movlb	1	; select bank1
  2241  0253  07D8               	addwf	_nout^(0+128),f
  2242  0254  0020               	movlb	0	; select bank0
  2243  0255  084F               	movf	?_vfpfcnvrt+1,w
  2244  0256  0021               	movlb	1	; select bank1
  2245  0257  3DD9               	addwfc	(_nout+1)^(0+128),f
  2246  0258  2A3C               	goto	l1660
  2247  0259                     l1662:	
  2248                           
  2249                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1378:     return nout;
  2250  0259  0021               	movlb	1	; select bank1
  2251  025A  0859               	movf	(_nout+1)^(0+128),w
  2252  025B  0020               	movlb	0	; select bank0
  2253  025C  00DF               	movwf	?_vfprintf+1
  2254  025D  0021               	movlb	1	; select bank1
  2255  025E  0858               	movf	_nout^(0+128),w
  2256  025F  0020               	movlb	0	; select bank0
  2257  0260  00DE               	movwf	?_vfprintf
  2258  0261  0008               	return
  2259  0262                     __end_of_vfprintf:	
  2260                           
  2261                           	psect	text3
  2262  0405                     __ptext3:	
  2263 ;; *************** function _vfpfcnvrt *****************
  2264 ;; Defined at:
  2265 ;;		line 670 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;  fp              1    wreg     PTR struct _IO_FILE
  2268 ;;		 -> sprintf@f(5), 
  2269 ;;  fmt             1   46[BANK0 ] PTR PTR unsigned char 
  2270 ;;		 -> vfprintf@cfmt(2), 
  2271 ;;  ap              1   47[BANK0 ] PTR PTR void 
  2272 ;;		 -> sprintf@ap(1), 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  fp              1   61[BANK0 ] PTR struct _IO_FILE
  2275 ;;		 -> sprintf@f(5), 
  2276 ;;  ll              8   53[BANK0 ] long long 
  2277 ;;  llu             8    0        unsigned long long 
  2278 ;;  f               4    0        unsigned long long 
  2279 ;;  ct              3    0        unsigned char [3]
  2280 ;;  vp              2    0        PTR void 
  2281 ;;  i               2    0        int 
  2282 ;;  done            2    0        int 
  2283 ;;  cp              2    0        PTR unsigned char 
  2284 ;;  c               1    0        unsigned char 
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  2   46[BANK0 ] int 
  2287 ;; Registers used:
  2288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2294 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2295 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2296 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2297 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2298 ;;Total ram usage:       16 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    5
  2301 ;; This function calls:
  2302 ;;		_dtoa
  2303 ;;		_fputc
  2304 ;; This function is called by:
  2305 ;;		_vfprintf
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           
  2310                           ;psect for function _vfpfcnvrt
  2311  0405                     _vfpfcnvrt:	
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2315                           ;vfpfcnvrt@fp stored from wreg
  2316  0405  0020               	movlb	0	; select bank0
  2317  0406  00DD               	movwf	vfpfcnvrt@fp
  2318                           
  2319                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 670: static int vfpfcn
      +                          vrt(FILE *fp, char *fmt[], va_list ap);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\c
      +                          ommon\doprnt.c: 671: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 
      +                          672:     char c, *cp, ct[3];;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\dopr
      +                          nt.c: 673:     int done, i;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprn
      +                          t.c: 674:     long long ll;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprn
      +                          t.c: 675:     unsigned long long llu;
  2320  0407  084E               	movf	vfpfcnvrt@fmt,w
  2321  0408  0086               	movwf	6
  2322  0409  0187               	clrf	7
  2323  040A  3F40               	moviw [0]fsr1
  2324  040B  00D0               	movwf	??_vfpfcnvrt
  2325  040C  3F41               	moviw [1]fsr1
  2326  040D  00D1               	movwf	??_vfpfcnvrt+1
  2327  040E  0850               	movf	??_vfpfcnvrt,w
  2328  040F  0084               	movwf	4
  2329  0410  0851               	movf	??_vfpfcnvrt+1,w
  2330  0411  0085               	movwf	5
  2331  0412  0012               	moviw fsr0++
  2332  0413  3A25               	xorlw	37
  2333  0414  1D03               	btfss	3,2
  2334  0415  2CB2               	goto	l1646
  2335                           
  2336                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 681:         ++*fmt;
  2337  0416  084E               	movf	vfpfcnvrt@fmt,w
  2338  0417  0086               	movwf	6
  2339  0418  0187               	clrf	7
  2340  0419  3001               	movlw	1
  2341  041A  0781               	addwf	1,f
  2342  041B  3141               	addfsr 1,1
  2343  041C  1803               	skipnc
  2344  041D  0A81               	incf	1,f
  2345                           
  2346                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 683:         flags = w
      +                          idth = 0;
  2347  041E  0021               	movlb	1	; select bank1
  2348  041F  01DA               	clrf	_width^(0+128)
  2349  0420  01DB               	clrf	(_width+1)^(0+128)
  2350  0421  0020               	movlb	0	; select bank0
  2351  0422  01ED               	clrf	_flags
  2352  0423  01EE               	clrf	_flags+1
  2353                           
  2354                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 684:         prec = -1
      +                          ;
  2355  0424  30FF               	movlw	255
  2356  0425  00EB               	movwf	_prec
  2357  0426  30FF               	movlw	255
  2358  0427  00EC               	movwf	_prec+1
  2359                           
  2360                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 825:         if ((*fmt
      +                          [0] == 'd') || (*fmt[0] == 'i')) {
  2361  0428  084E               	movf	vfpfcnvrt@fmt,w
  2362  0429  0086               	movwf	6
  2363  042A  0187               	clrf	7
  2364  042B  3F40               	moviw [0]fsr1
  2365  042C  00D0               	movwf	??_vfpfcnvrt
  2366  042D  3F41               	moviw [1]fsr1
  2367  042E  00D1               	movwf	??_vfpfcnvrt+1
  2368  042F  0850               	movf	??_vfpfcnvrt,w
  2369  0430  0084               	movwf	4
  2370  0431  0851               	movf	??_vfpfcnvrt+1,w
  2371  0432  0085               	movwf	5
  2372  0433  0012               	moviw fsr0++
  2373  0434  3A64               	xorlw	100
  2374  0435  1903               	btfsc	3,2
  2375  0436  2C46               	goto	l1622
  2376  0437  084E               	movf	vfpfcnvrt@fmt,w
  2377  0438  0086               	movwf	6
  2378  0439  0187               	clrf	7
  2379  043A  3F40               	moviw [0]fsr1
  2380  043B  00D0               	movwf	??_vfpfcnvrt
  2381  043C  3F41               	moviw [1]fsr1
  2382  043D  00D1               	movwf	??_vfpfcnvrt+1
  2383  043E  0850               	movf	??_vfpfcnvrt,w
  2384  043F  0084               	movwf	4
  2385  0440  0851               	movf	??_vfpfcnvrt+1,w
  2386  0441  0085               	movwf	5
  2387  0442  0012               	moviw fsr0++
  2388  0443  3A69               	xorlw	105
  2389  0444  1D03               	btfss	3,2
  2390  0445  2C80               	goto	l1630
  2391  0446                     l1622:	
  2392                           
  2393                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 827:             ++*fm
      +                          t;
  2394  0446  084E               	movf	vfpfcnvrt@fmt,w
  2395  0447  0086               	movwf	6
  2396  0448  0187               	clrf	7
  2397  0449  3001               	movlw	1
  2398  044A  0781               	addwf	1,f
  2399  044B  3141               	addfsr 1,1
  2400  044C  1803               	skipnc
  2401  044D  0A81               	incf	1,f
  2402                           
  2403                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 828:             ll = 
      +                          (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2404  044E  084F               	movf	vfpfcnvrt@ap,w
  2405  044F  0086               	movwf	6
  2406  0450  0187               	clrf	7
  2407  0451  0801               	movf	1,w
  2408  0452  0084               	movwf	4
  2409  0453  0185               	clrf	5
  2410  0454  3002               	movlw	2
  2411  0455  0781               	addwf	1,f
  2412  0456  3F00               	moviw [0]fsr0
  2413  0457  00D0               	movwf	??_vfpfcnvrt
  2414  0458  3F01               	moviw [1]fsr0
  2415  0459  00D1               	movwf	??_vfpfcnvrt+1
  2416  045A  0850               	movf	??_vfpfcnvrt,w
  2417  045B  00D5               	movwf	vfpfcnvrt@ll
  2418  045C  0851               	movf	??_vfpfcnvrt+1,w
  2419  045D  00D6               	movwf	vfpfcnvrt@ll+1
  2420  045E  0D89               	rlf	9,f
  2421  045F  3B89               	subwfb	9,f
  2422  0460  0989               	comf	9,f
  2423  0461  00D7               	movwf	vfpfcnvrt@ll+2
  2424  0462  00D8               	movwf	vfpfcnvrt@ll+3
  2425  0463  00D9               	movwf	vfpfcnvrt@ll+4
  2426  0464  00DA               	movwf	vfpfcnvrt@ll+5
  2427  0465  00DB               	movwf	vfpfcnvrt@ll+6
  2428  0466  00DC               	movwf	vfpfcnvrt@ll+7
  2429                           
  2430                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 830:             retur
      +                          n dtoa(fp, ll);
  2431  0467  0855               	movf	vfpfcnvrt@ll,w
  2432  0468  00B0               	movwf	dtoa@d
  2433  0469  0856               	movf	vfpfcnvrt@ll+1,w
  2434  046A  00B1               	movwf	dtoa@d+1
  2435  046B  0857               	movf	vfpfcnvrt@ll+2,w
  2436  046C  00B2               	movwf	dtoa@d+2
  2437  046D  0858               	movf	vfpfcnvrt@ll+3,w
  2438  046E  00B3               	movwf	dtoa@d+3
  2439  046F  0859               	movf	vfpfcnvrt@ll+4,w
  2440  0470  00B4               	movwf	dtoa@d+4
  2441  0471  085A               	movf	vfpfcnvrt@ll+5,w
  2442  0472  00B5               	movwf	dtoa@d+5
  2443  0473  085B               	movf	vfpfcnvrt@ll+6,w
  2444  0474  00B6               	movwf	dtoa@d+6
  2445  0475  085C               	movf	vfpfcnvrt@ll+7,w
  2446  0476  00B7               	movwf	dtoa@d+7
  2447  0477  085D               	movf	vfpfcnvrt@fp,w
  2448  0478  3186  26A4         	fcall	_dtoa
  2449  047A  0020               	movlb	0	; select bank0
  2450  047B  0831               	movf	?_dtoa+1,w
  2451  047C  00CF               	movwf	?_vfpfcnvrt+1
  2452  047D  0830               	movf	?_dtoa,w
  2453  047E  00CE               	movwf	?_vfpfcnvrt
  2454  047F  0008               	return
  2455  0480                     l1630:	
  2456                           
  2457                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1350:         if ((*fm
      +                          t)[0] == '%') {
  2458  0480  084E               	movf	vfpfcnvrt@fmt,w
  2459  0481  0086               	movwf	6
  2460  0482  0187               	clrf	7
  2461  0483  3F40               	moviw [0]fsr1
  2462  0484  00D0               	movwf	??_vfpfcnvrt
  2463  0485  3F41               	moviw [1]fsr1
  2464  0486  00D1               	movwf	??_vfpfcnvrt+1
  2465  0487  0850               	movf	??_vfpfcnvrt,w
  2466  0488  0084               	movwf	4
  2467  0489  0851               	movf	??_vfpfcnvrt+1,w
  2468  048A  0085               	movwf	5
  2469  048B  0012               	moviw fsr0++
  2470  048C  3A25               	xorlw	37
  2471  048D  1D03               	btfss	3,2
  2472  048E  2CA7               	goto	l1640
  2473                           
  2474                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1351:             ++*f
      +                          mt;
  2475  048F  084E               	movf	vfpfcnvrt@fmt,w
  2476  0490  0086               	movwf	6
  2477  0491  0187               	clrf	7
  2478  0492  3001               	movlw	1
  2479  0493  0781               	addwf	1,f
  2480  0494  3141               	addfsr 1,1
  2481  0495  1803               	skipnc
  2482  0496  0A81               	incf	1,f
  2483                           
  2484                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1352:             fput
      +                          c((int)'%', fp);
  2485  0497  3025               	movlw	37
  2486  0498  00F0               	movwf	fputc@c
  2487  0499  3000               	movlw	0
  2488  049A  00F1               	movwf	fputc@c+1
  2489  049B  085D               	movf	vfpfcnvrt@fp,w
  2490  049C  00D0               	movwf	??_vfpfcnvrt
  2491  049D  0850               	movf	??_vfpfcnvrt,w
  2492  049E  00F2               	movwf	fputc@fp
  2493  049F  3182  2262         	fcall	_fputc
  2494  04A1                     l1636:	
  2495                           
  2496                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1353:             retu
      +                          rn 1;
  2497  04A1  3001               	movlw	1
  2498  04A2  0020               	movlb	0	; select bank0
  2499  04A3  00CE               	movwf	?_vfpfcnvrt
  2500  04A4  3000               	movlw	0
  2501  04A5  00CF               	movwf	?_vfpfcnvrt+1
  2502  04A6  0008               	return
  2503  04A7                     l1640:	
  2504                           
  2505                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1357:         ++*fmt;
  2506  04A7  084E               	movf	vfpfcnvrt@fmt,w
  2507  04A8  0086               	movwf	6
  2508  04A9  0187               	clrf	7
  2509  04AA  3001               	movlw	1
  2510  04AB  0781               	addwf	1,f
  2511  04AC  3141               	addfsr 1,1
  2512  04AD  1803               	skipnc
  2513  04AE  0A81               	incf	1,f
  2514                           
  2515                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1358:         return 0
      +                          ;
  2516  04AF  01CE               	clrf	?_vfpfcnvrt
  2517  04B0  01CF               	clrf	?_vfpfcnvrt+1
  2518  04B1  0008               	return
  2519  04B2                     l1646:	
  2520                           
  2521                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1362:     fputc((int)(
      +                          *fmt)[0], fp);
  2522  04B2  084E               	movf	vfpfcnvrt@fmt,w
  2523  04B3  0086               	movwf	6
  2524  04B4  0187               	clrf	7
  2525  04B5  3F40               	moviw [0]fsr1
  2526  04B6  00D0               	movwf	??_vfpfcnvrt
  2527  04B7  3F41               	moviw [1]fsr1
  2528  04B8  00D1               	movwf	??_vfpfcnvrt+1
  2529  04B9  0850               	movf	??_vfpfcnvrt,w
  2530  04BA  0084               	movwf	4
  2531  04BB  0851               	movf	??_vfpfcnvrt+1,w
  2532  04BC  0085               	movwf	5
  2533  04BD  0800               	movf	0,w	;code access
  2534  04BE  00D2               	movwf	??_vfpfcnvrt+2
  2535  04BF  01D3               	clrf	??_vfpfcnvrt+3
  2536  04C0  0852               	movf	??_vfpfcnvrt+2,w
  2537  04C1  00F0               	movwf	fputc@c
  2538  04C2  0853               	movf	??_vfpfcnvrt+3,w
  2539  04C3  00F1               	movwf	fputc@c+1
  2540  04C4  085D               	movf	vfpfcnvrt@fp,w
  2541  04C5  00D4               	movwf	??_vfpfcnvrt+4
  2542  04C6  0854               	movf	??_vfpfcnvrt+4,w
  2543  04C7  00F2               	movwf	fputc@fp
  2544  04C8  3182  2262  3184   	fcall	_fputc
  2545                           
  2546                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1363:     ++*fmt;
  2547  04CB  0020               	movlb	0	; select bank0
  2548  04CC  084E               	movf	vfpfcnvrt@fmt,w
  2549  04CD  0086               	movwf	6
  2550  04CE  0187               	clrf	7
  2551  04CF  3001               	movlw	1
  2552  04D0  0781               	addwf	1,f
  2553  04D1  3141               	addfsr 1,1
  2554  04D2  1803               	skipnc
  2555  04D3  0A81               	incf	1,f
  2556  04D4  2CA1               	goto	l1636
  2557  04D5                     __end_of_vfpfcnvrt:	
  2558                           
  2559                           	psect	text4
  2560  06A4                     __ptext4:	
  2561 ;; *************** function _dtoa *****************
  2562 ;; Defined at:
  2563 ;;		line 274 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  fp              1    wreg     PTR struct _IO_FILE
  2566 ;;		 -> sprintf@f(5), 
  2567 ;;  d               8   16[BANK0 ] long long 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
  2570 ;;		 -> sprintf@f(5), 
  2571 ;;  n               8   36[BANK0 ] long long 
  2572 ;;  i               2   44[BANK0 ] int 
  2573 ;;  s               2   34[BANK0 ] int 
  2574 ;;  w               2   32[BANK0 ] int 
  2575 ;;  p               2   30[BANK0 ] int 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  2   16[BANK0 ] int 
  2578 ;; Registers used:
  2579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2585 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2586 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2587 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2588 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2589 ;;Total ram usage:       30 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    4
  2592 ;; This function calls:
  2593 ;;		___aodiv
  2594 ;;		___aomod
  2595 ;;		_abs
  2596 ;;		_pad
  2597 ;; This function is called by:
  2598 ;;		_vfpfcnvrt
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           
  2603                           ;psect for function _dtoa
  2604  06A4                     _dtoa:	
  2605                           
  2606                           ;incstack = 0
  2607                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2608                           ;dtoa@fp stored from wreg
  2609  06A4  0020               	movlb	0	; select bank0
  2610  06A5  00BB               	movwf	dtoa@fp
  2611                           
  2612                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 274: static int dtoa(F
      +                          ILE *fp, long long d);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 2
      +                          75: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 276:     int i, p
      +                          , s, w;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 277:     long l
      +                          ong n;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 280:     n = d;
  2613  06A6  0830               	movf	dtoa@d,w
  2614  06A7  00C4               	movwf	dtoa@n
  2615  06A8  0831               	movf	dtoa@d+1,w
  2616  06A9  00C5               	movwf	dtoa@n+1
  2617  06AA  0832               	movf	dtoa@d+2,w
  2618  06AB  00C6               	movwf	dtoa@n+2
  2619  06AC  0833               	movf	dtoa@d+3,w
  2620  06AD  00C7               	movwf	dtoa@n+3
  2621  06AE  0834               	movf	dtoa@d+4,w
  2622  06AF  00C8               	movwf	dtoa@n+4
  2623  06B0  0835               	movf	dtoa@d+5,w
  2624  06B1  00C9               	movwf	dtoa@n+5
  2625  06B2  0836               	movf	dtoa@d+6,w
  2626  06B3  00CA               	movwf	dtoa@n+6
  2627  06B4  0837               	movf	dtoa@d+7,w
  2628  06B5  00CB               	movwf	dtoa@n+7
  2629                           
  2630                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 281:     s = n < 0 ? 1
      +                           : 0;
  2631  06B6  3044               	movlw	low dtoa@n
  2632  06B7  0086               	movwf	6
  2633  06B8  3000               	movlw	high dtoa@n
  2634  06B9  0087               	movwf	7
  2635  06BA  3F47               	moviw [7]fsr1
  2636  06BB  00B8               	movwf	??_dtoa
  2637  06BC  1FB8               	btfss	??_dtoa,7
  2638  06BD  2EC0               	goto	u1360
  2639  06BE  3001               	movlw	1
  2640  06BF  2EC1               	goto	u1370
  2641  06C0                     u1360:	
  2642  06C0  3000               	movlw	0
  2643  06C1                     u1370:	
  2644  06C1  0020               	movlb	0	; select bank0
  2645  06C2  00B9               	movwf	??_dtoa+1
  2646  06C3  01BA               	clrf	??_dtoa+2
  2647  06C4  0839               	movf	??_dtoa+1,w
  2648  06C5  00C2               	movwf	dtoa@s
  2649  06C6  083A               	movf	??_dtoa+2,w
  2650  06C7  00C3               	movwf	dtoa@s+1
  2651                           
  2652                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 282:     if (s) {
  2653  06C8  0842               	movf	dtoa@s,w
  2654  06C9  0443               	iorwf	dtoa@s+1,w
  2655  06CA  1903               	btfsc	3,2
  2656  06CB  2EEA               	goto	l222
  2657                           
  2658                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 283:         n = -n;
  2659  06CC  09C4               	comf	dtoa@n,f
  2660  06CD  09C5               	comf	dtoa@n+1,f
  2661  06CE  09C6               	comf	dtoa@n+2,f
  2662  06CF  09C7               	comf	dtoa@n+3,f
  2663  06D0  09C8               	comf	dtoa@n+4,f
  2664  06D1  09C9               	comf	dtoa@n+5,f
  2665  06D2  09CA               	comf	dtoa@n+6,f
  2666  06D3  09CB               	comf	dtoa@n+7,f
  2667  06D4  0AC4               	incf	dtoa@n,f
  2668  06D5  1D03               	skipz
  2669  06D6  2EEA               	goto	l222
  2670  06D7  0AC5               	incf	dtoa@n+1,f
  2671  06D8  1D03               	skipz
  2672  06D9  2EEA               	goto	l222
  2673  06DA  0AC6               	incf	dtoa@n+2,f
  2674  06DB  1D03               	skipz
  2675  06DC  2EEA               	goto	l222
  2676  06DD  0AC7               	incf	dtoa@n+3,f
  2677  06DE  1D03               	skipz
  2678  06DF  2EEA               	goto	l222
  2679  06E0  0AC8               	incf	dtoa@n+4,f
  2680  06E1  1D03               	skipz
  2681  06E2  2EEA               	goto	l222
  2682  06E3  0AC9               	incf	dtoa@n+5,f
  2683  06E4  1D03               	skipz
  2684  06E5  2EEA               	goto	l222
  2685  06E6  0ACA               	incf	dtoa@n+6,f
  2686  06E7  1D03               	skipz
  2687  06E8  2EEA               	goto	l222
  2688  06E9  0ACB               	incf	dtoa@n+7,f
  2689  06EA                     l222:	
  2690                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 284:     }
  2691                           
  2692                           
  2693                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 287:     if (!(prec < 
      +                          0)) {
  2694  06EA  0020               	movlb	0	; select bank0
  2695  06EB  1BEC               	btfsc	_prec+1,7
  2696  06EC  2EF1               	goto	l223
  2697                           
  2698                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 288:         flags &= 
      +                          ~(1 << 1);
  2699  06ED  30FD               	movlw	253
  2700  06EE  05ED               	andwf	_flags,f
  2701  06EF  30FF               	movlw	255
  2702  06F0  05EE               	andwf	_flags+1,f
  2703  06F1                     l223:	
  2704                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 289:     }
  2705                           
  2706                           
  2707                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 290:     p = (0 < prec
      +                          ) ? prec : 1;
  2708  06F1  086C               	movf	_prec+1,w
  2709  06F2  3A80               	xorlw	128
  2710  06F3  00B8               	movwf	??_dtoa
  2711  06F4  3080               	movlw	128
  2712  06F5  0238               	subwf	??_dtoa,w
  2713  06F6  1D03               	skipz
  2714  06F7  2EFA               	goto	u1415
  2715  06F8  3001               	movlw	1
  2716  06F9  026B               	subwf	_prec,w
  2717  06FA                     u1415:	
  2718  06FA  1803               	skipnc
  2719  06FB  2F02               	goto	l1564
  2720  06FC  3001               	movlw	1
  2721  06FD  0020               	movlb	0	; select bank0
  2722  06FE  00BE               	movwf	dtoa@p
  2723  06FF  3000               	movlw	0
  2724  0700  00BF               	movwf	dtoa@p+1
  2725  0701  2F07               	goto	l227
  2726  0702                     l1564:	
  2727  0702  0020               	movlb	0	; select bank0
  2728  0703  086C               	movf	_prec+1,w
  2729  0704  00BF               	movwf	dtoa@p+1
  2730  0705  086B               	movf	_prec,w
  2731  0706  00BE               	movwf	dtoa@p
  2732  0707                     l227:	
  2733                           
  2734                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 291:     w = width;
  2735  0707  0021               	movlb	1	; select bank1
  2736  0708  085B               	movf	(_width+1)^(0+128),w
  2737  0709  0020               	movlb	0	; select bank0
  2738  070A  00C1               	movwf	dtoa@w+1
  2739  070B  0021               	movlb	1	; select bank1
  2740  070C  085A               	movf	_width^(0+128),w
  2741  070D  0020               	movlb	0	; select bank0
  2742  070E  00C0               	movwf	dtoa@w
  2743                           
  2744                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 292:     if (s || (fla
      +                          gs & (1 << 2))) {
  2745  070F  0842               	movf	dtoa@s,w
  2746  0710  0443               	iorwf	dtoa@s+1,w
  2747  0711  1D03               	btfss	3,2
  2748  0712  2F15               	goto	l1570
  2749  0713  1D6D               	btfss	_flags,2
  2750  0714  2F19               	goto	l228
  2751  0715                     l1570:	
  2752                           
  2753                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 293:         --w;
  2754  0715  30FF               	movlw	255
  2755  0716  07C0               	addwf	dtoa@w,f
  2756  0717  30FF               	movlw	255
  2757  0718  3DC1               	addwfc	dtoa@w+1,f
  2758  0719                     l228:	
  2759                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 294:     }
  2760                           
  2761                           
  2762                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 297:     i = sizeof(db
      +                          uf) - 1;
  2763  0719  301F               	movlw	31
  2764  071A  00CC               	movwf	dtoa@i
  2765  071B  3000               	movlw	0
  2766  071C  00CD               	movwf	dtoa@i+1
  2767                           
  2768                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 298:     dbuf[i] = '\0
      +                          ';
  2769  071D  0022               	movlb	2	; select bank2
  2770  071E  01BF               	clrf	(_dbuf^(0+256)+31)
  2771                           
  2772                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 299:     while (!(i < 
      +                          1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2773  071F  2FAE               	goto	l231
  2774  0720                     l1584:	
  2775  0720  0020               	movlb	0	; select bank0
  2776  0721  0844               	movf	dtoa@n,w
  2777  0722  0445               	iorwf	dtoa@n+1,w
  2778  0723  0446               	iorwf	dtoa@n+2,w
  2779  0724  0447               	iorwf	dtoa@n+3,w
  2780  0725  0448               	iorwf	dtoa@n+4,w
  2781  0726  0449               	iorwf	dtoa@n+5,w
  2782  0727  044A               	iorwf	dtoa@n+6,w
  2783  0728  044B               	iorwf	dtoa@n+7,w
  2784  0729  1D03               	skipz
  2785  072A  2F45               	goto	l1574
  2786  072B  083F               	movf	dtoa@p+1,w
  2787  072C  3A80               	xorlw	128
  2788  072D  00B8               	movwf	??_dtoa
  2789  072E  3080               	movlw	128
  2790  072F  0238               	subwf	??_dtoa,w
  2791  0730  1D03               	skipz
  2792  0731  2F34               	goto	u1465
  2793  0732  3001               	movlw	1
  2794  0733  023E               	subwf	dtoa@p,w
  2795  0734                     u1465:	
  2796  0734  1803               	skipnc
  2797  0735  2F45               	goto	l1574
  2798  0736  0020               	movlb	0	; select bank0
  2799  0737  0841               	movf	dtoa@w+1,w
  2800  0738  3A80               	xorlw	128
  2801  0739  00B8               	movwf	??_dtoa
  2802  073A  3080               	movlw	128
  2803  073B  0238               	subwf	??_dtoa,w
  2804  073C  1D03               	skipz
  2805  073D  2F40               	goto	u1475
  2806  073E  3001               	movlw	1
  2807  073F  0240               	subwf	dtoa@w,w
  2808  0740                     u1475:	
  2809  0740  1C03               	skipc
  2810  0741  2FBA               	goto	l1592
  2811  0742  0020               	movlb	0	; select bank0
  2812  0743  1CED               	btfss	_flags,1
  2813  0744  2FBA               	goto	l1592
  2814  0745                     l1574:	
  2815                           
  2816                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 300:         --i;
  2817  0745  30FF               	movlw	255
  2818  0746  0020               	movlb	0	; select bank0
  2819  0747  07CC               	addwf	dtoa@i,f
  2820  0748  30FF               	movlw	255
  2821  0749  3DCD               	addwfc	dtoa@i+1,f
  2822                           
  2823                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 301:         dbuf[i] =
      +                           '0' + abs(n % 10);
  2824  074A  300A               	movlw	10
  2825  074B  00A0               	movwf	___aomod@divisor
  2826  074C  01A1               	clrf	___aomod@divisor+1
  2827  074D  01A2               	clrf	___aomod@divisor+2
  2828  074E  01A3               	clrf	___aomod@divisor+3
  2829  074F  01A4               	clrf	___aomod@divisor+4
  2830  0750  01A5               	clrf	___aomod@divisor+5
  2831  0751  01A6               	clrf	___aomod@divisor+6
  2832  0752  01A7               	clrf	___aomod@divisor+7
  2833  0753  0844               	movf	dtoa@n,w
  2834  0754  00A8               	movwf	___aomod@dividend
  2835  0755  0845               	movf	dtoa@n+1,w
  2836  0756  00A9               	movwf	___aomod@dividend+1
  2837  0757  0846               	movf	dtoa@n+2,w
  2838  0758  00AA               	movwf	___aomod@dividend+2
  2839  0759  0847               	movf	dtoa@n+3,w
  2840  075A  00AB               	movwf	___aomod@dividend+3
  2841  075B  0848               	movf	dtoa@n+4,w
  2842  075C  00AC               	movwf	___aomod@dividend+4
  2843  075D  0849               	movf	dtoa@n+5,w
  2844  075E  00AD               	movwf	___aomod@dividend+5
  2845  075F  084A               	movf	dtoa@n+6,w
  2846  0760  00AE               	movwf	___aomod@dividend+6
  2847  0761  084B               	movf	dtoa@n+7,w
  2848  0762  00AF               	movwf	___aomod@dividend+7
  2849  0763  3184  24D5  3186   	fcall	___aomod
  2850  0766  0020               	movlb	0	; select bank0
  2851  0767  0821               	movf	?___aomod+1,w
  2852  0768  00F4               	movwf	abs@a+1
  2853  0769  0820               	movf	?___aomod,w
  2854  076A  00F3               	movwf	abs@a
  2855  076B  3181  216B  3186   	fcall	_abs
  2856  076E  0873               	movf	?_abs,w
  2857  076F  3E30               	addlw	48
  2858  0770  0020               	movlb	0	; select bank0
  2859  0771  00B8               	movwf	??_dtoa
  2860  0772  084C               	movf	dtoa@i,w
  2861  0773  3E20               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2862  0774  0086               	movwf	6
  2863  0775  3001               	movlw	1	; select bank2/3
  2864  0776  0087               	movwf	7
  2865  0777  0838               	movf	??_dtoa,w
  2866  0778  0081               	movwf	1
  2867                           
  2868                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 302:         --p;
  2869  0779  30FF               	movlw	255
  2870  077A  07BE               	addwf	dtoa@p,f
  2871  077B  30FF               	movlw	255
  2872  077C  3DBF               	addwfc	dtoa@p+1,f
  2873                           
  2874                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 303:         --w;
  2875  077D  30FF               	movlw	255
  2876  077E  07C0               	addwf	dtoa@w,f
  2877  077F  30FF               	movlw	255
  2878  0780  3DC1               	addwfc	dtoa@w+1,f
  2879                           
  2880                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 304:         n = n / 1
      +                          0;
  2881  0781  300A               	movlw	10
  2882  0782  00A0               	movwf	___aodiv@divisor
  2883  0783  01A1               	clrf	___aodiv@divisor+1
  2884  0784  01A2               	clrf	___aodiv@divisor+2
  2885  0785  01A3               	clrf	___aodiv@divisor+3
  2886  0786  01A4               	clrf	___aodiv@divisor+4
  2887  0787  01A5               	clrf	___aodiv@divisor+5
  2888  0788  01A6               	clrf	___aodiv@divisor+6
  2889  0789  01A7               	clrf	___aodiv@divisor+7
  2890  078A  0844               	movf	dtoa@n,w
  2891  078B  00A8               	movwf	___aodiv@dividend
  2892  078C  0845               	movf	dtoa@n+1,w
  2893  078D  00A9               	movwf	___aodiv@dividend+1
  2894  078E  0846               	movf	dtoa@n+2,w
  2895  078F  00AA               	movwf	___aodiv@dividend+2
  2896  0790  0847               	movf	dtoa@n+3,w
  2897  0791  00AB               	movwf	___aodiv@dividend+3
  2898  0792  0848               	movf	dtoa@n+4,w
  2899  0793  00AC               	movwf	___aodiv@dividend+4
  2900  0794  0849               	movf	dtoa@n+5,w
  2901  0795  00AD               	movwf	___aodiv@dividend+5
  2902  0796  084A               	movf	dtoa@n+6,w
  2903  0797  00AE               	movwf	___aodiv@dividend+6
  2904  0798  084B               	movf	dtoa@n+7,w
  2905  0799  00AF               	movwf	___aodiv@dividend+7
  2906  079A  3185  25B1  3186   	fcall	___aodiv
  2907  079D  0020               	movlb	0	; select bank0
  2908  079E  0820               	movf	?___aodiv,w
  2909  079F  00C4               	movwf	dtoa@n
  2910  07A0  0821               	movf	?___aodiv+1,w
  2911  07A1  00C5               	movwf	dtoa@n+1
  2912  07A2  0822               	movf	?___aodiv+2,w
  2913  07A3  00C6               	movwf	dtoa@n+2
  2914  07A4  0823               	movf	?___aodiv+3,w
  2915  07A5  00C7               	movwf	dtoa@n+3
  2916  07A6  0824               	movf	?___aodiv+4,w
  2917  07A7  00C8               	movwf	dtoa@n+4
  2918  07A8  0825               	movf	?___aodiv+5,w
  2919  07A9  00C9               	movwf	dtoa@n+5
  2920  07AA  0826               	movf	?___aodiv+6,w
  2921  07AB  00CA               	movwf	dtoa@n+6
  2922  07AC  0827               	movf	?___aodiv+7,w
  2923  07AD  00CB               	movwf	dtoa@n+7
  2924  07AE                     l231:	
  2925                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 305:     }
  2926                           
  2927                           
  2928                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 299:     while (!(i < 
      +                          1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2929  07AE  0020               	movlb	0	; select bank0
  2930  07AF  084D               	movf	dtoa@i+1,w
  2931  07B0  3A80               	xorlw	128
  2932  07B1  00B8               	movwf	??_dtoa
  2933  07B2  3080               	movlw	128
  2934  07B3  0238               	subwf	??_dtoa,w
  2935  07B4  1D03               	skipz
  2936  07B5  2FB8               	goto	u1445
  2937  07B6  3001               	movlw	1
  2938  07B7  024C               	subwf	dtoa@i,w
  2939  07B8                     u1445:	
  2940  07B8  1803               	btfsc	3,0
  2941  07B9  2F20               	goto	l1584
  2942  07BA                     l1592:	
  2943                           
  2944                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 308:     if (s || (fla
      +                          gs & (1 << 2))) {
  2945  07BA  0020               	movlb	0	; select bank0
  2946  07BB  0842               	movf	dtoa@s,w
  2947  07BC  0443               	iorwf	dtoa@s+1,w
  2948  07BD  1D03               	btfss	3,2
  2949  07BE  2FC1               	goto	l1596
  2950  07BF  1D6D               	btfss	_flags,2
  2951  07C0  2FD8               	goto	l1606
  2952  07C1                     l1596:	
  2953                           
  2954                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 309:         --i;
  2955  07C1  30FF               	movlw	255
  2956  07C2  07CC               	addwf	dtoa@i,f
  2957  07C3  30FF               	movlw	255
  2958  07C4  3DCD               	addwfc	dtoa@i+1,f
  2959                           
  2960                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 310:         dbuf[i] =
      +                           s ? '-' : '+';
  2961  07C5  0842               	movf	dtoa@s,w
  2962  07C6  0443               	iorwf	dtoa@s+1,w
  2963  07C7  1D03               	btfss	3,2
  2964  07C8  2FCB               	goto	l1602
  2965  07C9  302B               	movlw	43
  2966  07CA  2FCC               	goto	L1
  2967  07CB                     l1602:	
  2968  07CB  302D               	movlw	45
  2969  07CC                     L1:	
  2970  07CC  00BC               	movwf	_dtoa$250
  2971  07CD  3000               	movlw	0
  2972  07CE  00BD               	movwf	_dtoa$250+1
  2973  07CF  083C               	movf	_dtoa$250,w
  2974  07D0  00B8               	movwf	??_dtoa
  2975  07D1  084C               	movf	dtoa@i,w
  2976  07D2  3E20               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2977  07D3  0086               	movwf	6
  2978  07D4  3001               	movlw	1	; select bank2/3
  2979  07D5  0087               	movwf	7
  2980  07D6  0838               	movf	??_dtoa,w
  2981  07D7  0081               	movwf	1
  2982  07D8                     l1606:	
  2983                           
  2984                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 314:     return pad(fp
      +                          , &dbuf[i], w);
  2985  07D8  084C               	movf	dtoa@i,w
  2986  07D9  3E20               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2987  07DA  00B8               	movwf	??_dtoa
  2988  07DB  0838               	movf	??_dtoa,w
  2989  07DC  00A4               	movwf	pad@buf
  2990  07DD  0841               	movf	dtoa@w+1,w
  2991  07DE  00A6               	movwf	pad@p+1
  2992  07DF  0840               	movf	dtoa@w,w
  2993  07E0  00A5               	movwf	pad@p
  2994  07E1  083B               	movf	dtoa@fp,w
  2995  07E2  3182  22EE         	fcall	_pad
  2996  07E4  0020               	movlb	0	; select bank0
  2997  07E5  0825               	movf	?_pad+1,w
  2998  07E6  00B1               	movwf	?_dtoa+1
  2999  07E7  0824               	movf	?_pad,w
  3000  07E8  00B0               	movwf	?_dtoa
  3001  07E9  0008               	return
  3002  07EA                     __end_of_dtoa:	
  3003                           
  3004                           	psect	text5
  3005  02EE                     __ptext5:	
  3006 ;; *************** function _pad *****************
  3007 ;; Defined at:
  3008 ;;		line 72 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  fp              1    wreg     PTR struct _IO_FILE
  3011 ;;		 -> sprintf@f(5), 
  3012 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  3013 ;;		 -> dbuf(32), 
  3014 ;;  p               2    5[BANK0 ] int 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  3017 ;;		 -> sprintf@f(5), 
  3018 ;;  w               2    9[BANK0 ] int 
  3019 ;;  i               2    7[BANK0 ] int 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  2    4[BANK0 ] int 
  3022 ;; Registers used:
  3023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3029 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3030 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3031 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3032 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3033 ;;Total ram usage:        9 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    3
  3036 ;; This function calls:
  3037 ;;		_fputc
  3038 ;;		_fputs
  3039 ;;		_strlen
  3040 ;; This function is called by:
  3041 ;;		_dtoa
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function _pad
  3047  02EE                     _pad:	
  3048                           
  3049                           ;incstack = 0
  3050                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3051                           ;pad@fp stored from wreg
  3052  02EE  0020               	movlb	0	; select bank0
  3053  02EF  00AB               	movwf	pad@fp
  3054                           
  3055                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 72: static int pad(FIL
      +                          E *fp, char *buf, int p);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c
      +                          : 73: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 74:     int i, 
      +                          w;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 77:     if (flags & 
      +                          (1 << 0)) {
  3056  02F0  1C6D               	btfss	_flags,0
  3057  02F1  2AFA               	goto	l1534
  3058                           
  3059                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 78:         fputs((con
      +                          st char *)buf, fp);
  3060  02F2  082B               	movf	pad@fp,w
  3061  02F3  00FC               	movwf	??_pad
  3062  02F4  087C               	movf	??_pad,w
  3063  02F5  00F8               	movwf	fputs@fp
  3064  02F6  0824               	movf	pad@buf,w
  3065  02F7  3181  21E4  3182   	fcall	_fputs
  3066  02FA                     l1534:	
  3067                           
  3068                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 82:     w = (p < 0) ? 
      +                          0 : p;
  3069  02FA  0020               	movlb	0	; select bank0
  3070  02FB  1BA6               	btfsc	pad@p+1,7
  3071  02FC  2B02               	goto	l1538
  3072  02FD  0826               	movf	pad@p+1,w
  3073  02FE  00AA               	movwf	pad@w+1
  3074  02FF  0825               	movf	pad@p,w
  3075  0300  00A9               	movwf	pad@w
  3076  0301  2B04               	goto	l214
  3077  0302                     l1538:	
  3078  0302  01A9               	clrf	pad@w
  3079  0303  01AA               	clrf	pad@w+1
  3080  0304                     l214:	
  3081                           
  3082                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  3083  0304  01A7               	clrf	pad@i
  3084  0305  01A8               	clrf	pad@i+1
  3085  0306                     l1544:	
  3086                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 84:     while (i < w) 
      +                          {
  3087                           
  3088                           
  3089                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 84:     while (i < w) 
      +                          {
  3090  0306  0828               	movf	pad@i+1,w
  3091  0307  3A80               	xorlw	128
  3092  0308  00FC               	movwf	??_pad
  3093  0309  082A               	movf	pad@w+1,w
  3094  030A  3A80               	xorlw	128
  3095  030B  027C               	subwf	??_pad,w
  3096  030C  1D03               	skipz
  3097  030D  2B10               	goto	u1345
  3098  030E  0829               	movf	pad@w,w
  3099  030F  0227               	subwf	pad@i,w
  3100  0310                     u1345:	
  3101  0310  1803               	btfsc	3,0
  3102  0311  2B24               	goto	l217
  3103                           
  3104                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 85:         fputc(' ',
      +                           fp);
  3105  0312  3020               	movlw	32
  3106  0313  00F0               	movwf	fputc@c
  3107  0314  3000               	movlw	0
  3108  0315  00F1               	movwf	fputc@c+1
  3109  0316  0020               	movlb	0	; select bank0
  3110  0317  082B               	movf	pad@fp,w
  3111  0318  00FC               	movwf	??_pad
  3112  0319  087C               	movf	??_pad,w
  3113  031A  00F2               	movwf	fputc@fp
  3114  031B  3182  2262  3182   	fcall	_fputc
  3115                           
  3116                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 86:         ++i;
  3117  031E  3001               	movlw	1
  3118  031F  0020               	movlb	0	; select bank0
  3119  0320  07A7               	addwf	pad@i,f
  3120  0321  3000               	movlw	0
  3121  0322  3DA8               	addwfc	pad@i+1,f
  3122  0323  2B06               	goto	l1544
  3123  0324                     l217:	
  3124                           
  3125                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 90:     if (!(flags & 
      +                          (1 << 0))) {
  3126  0324  0020               	movlb	0	; select bank0
  3127  0325  186D               	btfsc	_flags,0
  3128  0326  2B2F               	goto	l1548
  3129                           
  3130                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 91:         fputs((con
      +                          st char *)buf, fp);
  3131  0327  082B               	movf	pad@fp,w
  3132  0328  00FC               	movwf	??_pad
  3133  0329  087C               	movf	??_pad,w
  3134  032A  00F8               	movwf	fputs@fp
  3135  032B  0824               	movf	pad@buf,w
  3136  032C  3181  21E4  3182   	fcall	_fputs
  3137  032F                     l1548:	
  3138                           
  3139                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 94:     return strlen(
      +                          buf) + w;
  3140  032F  0020               	movlb	0	; select bank0
  3141  0330  0824               	movf	pad@buf,w
  3142  0331  00F0               	movwf	strlen@s
  3143  0332  3001               	movlw	1
  3144  0333  00F1               	movwf	strlen@s+1
  3145  0334  3181  213D         	fcall	_strlen
  3146  0336  0020               	movlb	0	; select bank0
  3147  0337  0829               	movf	pad@w,w
  3148  0338  0770               	addwf	?_strlen,w
  3149  0339  00A4               	movwf	?_pad
  3150  033A  082A               	movf	pad@w+1,w
  3151  033B  3D71               	addwfc	?_strlen+1,w
  3152  033C  00A5               	movwf	?_pad+1
  3153  033D  0008               	return
  3154  033E                     __end_of_pad:	
  3155                           
  3156                           	psect	text6
  3157  01E4                     __ptext6:	
  3158 ;; *************** function _fputs *****************
  3159 ;; Defined at:
  3160 ;;		line 8 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\nf_fputs.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  s               1    wreg     PTR const unsigned char 
  3163 ;;		 -> dbuf(32), 
  3164 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  3165 ;;		 -> sprintf@f(5), 
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  3168 ;;		 -> dbuf(32), 
  3169 ;;  i               2    1[BANK0 ] int 
  3170 ;;  c               1    0[BANK0 ] unsigned char 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  2    8[COMMON] int 
  3173 ;; Registers used:
  3174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3180 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3182 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3183 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3184 ;;Total ram usage:        8 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    2
  3187 ;; This function calls:
  3188 ;;		_fputc
  3189 ;; This function is called by:
  3190 ;;		_pad
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           
  3195                           ;psect for function _fputs
  3196  01E4                     _fputs:	
  3197                           
  3198                           ;incstack = 0
  3199                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3200                           ;fputs@s stored from wreg
  3201  01E4  0020               	movlb	0	; select bank0
  3202  01E5  00A3               	movwf	fputs@s
  3203  01E6  01A1               	clrf	fputs@i
  3204  01E7  01A2               	clrf	fputs@i+1
  3205  01E8                     l1174:	
  3206  01E8  0821               	movf	fputs@i,w
  3207  01E9  0723               	addwf	fputs@s,w
  3208  01EA  00F9               	movwf	??_fputs
  3209  01EB  0879               	movf	??_fputs,w
  3210  01EC  0086               	movwf	6
  3211  01ED  3001               	movlw	1	; select bank2/3
  3212  01EE  0087               	movwf	7
  3213  01EF  0801               	movf	1,w
  3214  01F0  00FA               	movwf	??_fputs+1
  3215  01F1  087A               	movf	??_fputs+1,w
  3216  01F2  00A0               	movwf	fputs@c
  3217  01F3  0820               	movf	fputs@c,w
  3218  01F4  1903               	btfsc	3,2
  3219  01F5  0008               	return
  3220  01F6  0820               	movf	fputs@c,w
  3221  01F7  00F9               	movwf	??_fputs
  3222  01F8  01FA               	clrf	??_fputs+1
  3223  01F9  0879               	movf	??_fputs,w
  3224  01FA  00F0               	movwf	fputc@c
  3225  01FB  087A               	movf	??_fputs+1,w
  3226  01FC  00F1               	movwf	fputc@c+1
  3227  01FD  0878               	movf	fputs@fp,w
  3228  01FE  00FB               	movwf	??_fputs+2
  3229  01FF  087B               	movf	??_fputs+2,w
  3230  0200  00F2               	movwf	fputc@fp
  3231  0201  3182  2262  3181   	fcall	_fputc
  3232  0204  3001               	movlw	1
  3233  0205  0020               	movlb	0	; select bank0
  3234  0206  07A1               	addwf	fputs@i,f
  3235  0207  3000               	movlw	0
  3236  0208  3DA2               	addwfc	fputs@i+1,f
  3237  0209  29E8               	goto	l1174
  3238  020A                     __end_of_fputs:	
  3239                           
  3240                           	psect	text7
  3241  0262                     __ptext7:	
  3242 ;; *************** function _fputc *****************
  3243 ;; Defined at:
  3244 ;;		line 8 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\nf_fputc.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  c               2    0[COMMON] int 
  3247 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  3248 ;;		 -> sprintf@f(5), 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  2    0[COMMON] int 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3260 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3262 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3263 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3264 ;;Total ram usage:        8 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:    1
  3267 ;; This function calls:
  3268 ;;		_putch
  3269 ;; This function is called by:
  3270 ;;		_pad
  3271 ;;		_vfpfcnvrt
  3272 ;;		_fputs
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           
  3277                           ;psect for function _fputc
  3278  0262                     _fputc:	
  3279                           
  3280                           ;incstack = 0
  3281                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3282  0262  0872               	movf	fputc@fp,w
  3283  0263  1D03               	btfss	3,2
  3284  0264  0872               	movf	fputc@fp,w
  3285  0265  1D03               	btfss	3,2
  3286  0266  2A6B               	goto	l1148
  3287  0267  0870               	movf	fputc@c,w
  3288  0268  3181  2129         	fcall	_putch
  3289  026A  0008               	return
  3290  026B                     l1148:	
  3291  026B  0872               	movf	fputc@fp,w
  3292  026C  3E03               	addlw	3
  3293  026D  0086               	movwf	6
  3294  026E  0187               	clrf	7
  3295  026F  0016               	moviw fsr1++
  3296  0270  0401               	iorwf	1,w
  3297  0271  1903               	btfsc	3,2
  3298  0272  2A8E               	goto	l1152
  3299  0273  0872               	movf	fputc@fp,w
  3300  0274  3E03               	addlw	3
  3301  0275  0086               	movwf	6
  3302  0276  0187               	clrf	7
  3303  0277  3F40               	moviw [0]fsr1
  3304  0278  00F3               	movwf	??_fputc
  3305  0279  3F41               	moviw [1]fsr1
  3306  027A  00F4               	movwf	??_fputc+1
  3307  027B  0A72               	incf	fputc@fp,w
  3308  027C  0086               	movwf	6
  3309  027D  0187               	clrf	7
  3310  027E  3F40               	moviw [0]fsr1
  3311  027F  00F5               	movwf	??_fputc+2
  3312  0280  3F41               	moviw [1]fsr1
  3313  0281  00F6               	movwf	??_fputc+3
  3314  0282  0876               	movf	??_fputc+3,w
  3315  0283  3A80               	xorlw	128
  3316  0284  00F7               	movwf	??_fputc+4
  3317  0285  0874               	movf	??_fputc+1,w
  3318  0286  3A80               	xorlw	128
  3319  0287  0277               	subwf	??_fputc+4,w
  3320  0288  1D03               	skipz
  3321  0289  2A8C               	goto	u695
  3322  028A  0873               	movf	??_fputc,w
  3323  028B  0275               	subwf	??_fputc+2,w
  3324  028C                     u695:	
  3325  028C  1803               	skipnc
  3326  028D  0008               	return
  3327  028E                     l1152:	
  3328  028E  0870               	movf	fputc@c,w
  3329  028F  00F3               	movwf	??_fputc
  3330  0290  0872               	movf	fputc@fp,w
  3331  0291  0086               	movwf	6
  3332  0292  0187               	clrf	7
  3333  0293  0A72               	incf	fputc@fp,w
  3334  0294  0084               	movwf	4
  3335  0295  0185               	clrf	5
  3336  0296  0800               	movf	0,w
  3337  0297  0701               	addwf	1,w
  3338  0298  00F4               	movwf	??_fputc+1
  3339  0299  0874               	movf	??_fputc+1,w
  3340  029A  0086               	movwf	6
  3341  029B  0187               	clrf	7
  3342  029C  0873               	movf	??_fputc,w
  3343  029D  0081               	movwf	1
  3344  029E  0A72               	incf	fputc@fp,w
  3345  029F  0086               	movwf	6
  3346  02A0  0187               	clrf	7
  3347  02A1  3001               	movlw	1
  3348  02A2  0781               	addwf	1,f
  3349  02A3  3141               	addfsr 1,1
  3350  02A4  1803               	skipnc
  3351  02A5  0A81               	incf	1,f
  3352  02A6  0008               	return
  3353  02A7                     __end_of_fputc:	
  3354                           
  3355                           	psect	text8
  3356  0129                     __ptext8:	
  3357 ;; *************** function _putch *****************
  3358 ;; Defined at:
  3359 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\putch.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  c               1    wreg     unsigned char 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  c               1    0[COMMON] unsigned char 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3377 ;;Total ram usage:        0 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; This function calls:
  3380 ;;		Nothing
  3381 ;; This function is called by:
  3382 ;;		_fputc
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           
  3387                           ;psect for function _putch
  3388  0129                     _putch:	
  3389                           
  3390                           ;incstack = 0
  3391                           ; Regs used in _putch: [wreg]
  3392  0129  0008               	return
  3393  012A                     __end_of_putch:	
  3394                           
  3395                           	psect	text9
  3396  016B                     __ptext9:	
  3397 ;; *************** function _abs *****************
  3398 ;; Defined at:
  3399 ;;		line 1 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\abs.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;  a               2    3[COMMON] int 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;		None
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  2    3[COMMON] int 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3413 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3416 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3417 ;;Total ram usage:        4 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; This function calls:
  3420 ;;		Nothing
  3421 ;; This function is called by:
  3422 ;;		_dtoa
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           
  3427                           ;psect for function _abs
  3428  016B                     _abs:	
  3429                           
  3430                           ;incstack = 0
  3431                           ; Regs used in _abs: [wreg+status,2+status,0]
  3432  016B  0874               	movf	abs@a+1,w
  3433  016C  3A80               	xorlw	128
  3434  016D  00F5               	movwf	??_abs
  3435  016E  3080               	movlw	128
  3436  016F  0275               	subwf	??_abs,w
  3437  0170  1D03               	skipz
  3438  0171  2974               	goto	u765
  3439  0172  3001               	movlw	1
  3440  0173  0273               	subwf	abs@a,w
  3441  0174                     u765:	
  3442  0174  1803               	skipnc
  3443  0175  0008               	return
  3444  0176  0973               	comf	abs@a,w
  3445  0177  00F5               	movwf	??_abs
  3446  0178  0974               	comf	abs@a+1,w
  3447  0179  00F6               	movwf	??_abs+1
  3448  017A  0AF5               	incf	??_abs,f
  3449  017B  1903               	skipnz
  3450  017C  0AF6               	incf	??_abs+1,f
  3451  017D  0875               	movf	??_abs,w
  3452  017E  00F3               	movwf	?_abs
  3453  017F  0876               	movf	??_abs+1,w
  3454  0180  00F4               	movwf	?_abs+1
  3455  0181  0008               	return
  3456  0182                     __end_of_abs:	
  3457                           
  3458                           	psect	text10
  3459  04D5                     __ptext10:	
  3460 ;; *************** function ___aomod *****************
  3461 ;; Defined at:
  3462 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aomod.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  divisor         8    0[BANK0 ] long long 
  3465 ;;  dividend        8    8[BANK0 ] long long 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  sign            1    2[COMMON] unsigned char 
  3468 ;;  counter         1    1[COMMON] unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  8    0[BANK0 ] long long 
  3471 ;; Registers used:
  3472 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3478 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3481 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3482 ;;Total ram usage:       19 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; This function calls:
  3485 ;;		Nothing
  3486 ;; This function is called by:
  3487 ;;		_dtoa
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           
  3492                           ;psect for function ___aomod
  3493  04D5                     ___aomod:	
  3494                           
  3495                           ;incstack = 0
  3496                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
  3497  04D5  01F2               	clrf	___aomod@sign
  3498  04D6  3028               	movlw	low ___aomod@dividend
  3499  04D7  0086               	movwf	6
  3500  04D8  3000               	movlw	high ___aomod@dividend
  3501  04D9  0087               	movwf	7
  3502  04DA  3F47               	moviw [7]fsr1
  3503  04DB  00F0               	movwf	??___aomod
  3504  04DC  1FF0               	btfss	??___aomod,7
  3505  04DD  2CFF               	goto	l1246
  3506  04DE  0020               	movlb	0	; select bank0
  3507  04DF  09A8               	comf	___aomod@dividend,f
  3508  04E0  09A9               	comf	___aomod@dividend+1,f
  3509  04E1  09AA               	comf	___aomod@dividend+2,f
  3510  04E2  09AB               	comf	___aomod@dividend+3,f
  3511  04E3  09AC               	comf	___aomod@dividend+4,f
  3512  04E4  09AD               	comf	___aomod@dividend+5,f
  3513  04E5  09AE               	comf	___aomod@dividend+6,f
  3514  04E6  09AF               	comf	___aomod@dividend+7,f
  3515  04E7  0AA8               	incf	___aomod@dividend,f
  3516  04E8  1D03               	skipz
  3517  04E9  2CFD               	goto	u89lld
  3518  04EA  0AA9               	incf	___aomod@dividend+1,f
  3519  04EB  1D03               	skipz
  3520  04EC  2CFD               	goto	u89lld
  3521  04ED  0AAA               	incf	___aomod@dividend+2,f
  3522  04EE  1D03               	skipz
  3523  04EF  2CFD               	goto	u89lld
  3524  04F0  0AAB               	incf	___aomod@dividend+3,f
  3525  04F1  1D03               	skipz
  3526  04F2  2CFD               	goto	u89lld
  3527  04F3  0AAC               	incf	___aomod@dividend+4,f
  3528  04F4  1D03               	skipz
  3529  04F5  2CFD               	goto	u89lld
  3530  04F6  0AAD               	incf	___aomod@dividend+5,f
  3531  04F7  1D03               	skipz
  3532  04F8  2CFD               	goto	u89lld
  3533  04F9  0AAE               	incf	___aomod@dividend+6,f
  3534  04FA  1D03               	skipz
  3535  04FB  2CFD               	goto	u89lld
  3536  04FC  0AAF               	incf	___aomod@dividend+7,f
  3537  04FD                     u89lld:	
  3538  04FD  01F2               	clrf	___aomod@sign
  3539  04FE  0AF2               	incf	___aomod@sign,f
  3540  04FF                     l1246:	
  3541  04FF  3020               	movlw	low ___aomod@divisor
  3542  0500  0086               	movwf	6
  3543  0501  3000               	movlw	high ___aomod@divisor
  3544  0502  0087               	movwf	7
  3545  0503  3F47               	moviw [7]fsr1
  3546  0504  00F0               	movwf	??___aomod
  3547  0505  1FF0               	btfss	??___aomod,7
  3548  0506  2D26               	goto	l1250
  3549  0507  0020               	movlb	0	; select bank0
  3550  0508  09A0               	comf	___aomod@divisor,f
  3551  0509  09A1               	comf	___aomod@divisor+1,f
  3552  050A  09A2               	comf	___aomod@divisor+2,f
  3553  050B  09A3               	comf	___aomod@divisor+3,f
  3554  050C  09A4               	comf	___aomod@divisor+4,f
  3555  050D  09A5               	comf	___aomod@divisor+5,f
  3556  050E  09A6               	comf	___aomod@divisor+6,f
  3557  050F  09A7               	comf	___aomod@divisor+7,f
  3558  0510  0AA0               	incf	___aomod@divisor,f
  3559  0511  1D03               	skipz
  3560  0512  2D26               	goto	l1250
  3561  0513  0AA1               	incf	___aomod@divisor+1,f
  3562  0514  1D03               	skipz
  3563  0515  2D26               	goto	l1250
  3564  0516  0AA2               	incf	___aomod@divisor+2,f
  3565  0517  1D03               	skipz
  3566  0518  2D26               	goto	l1250
  3567  0519  0AA3               	incf	___aomod@divisor+3,f
  3568  051A  1D03               	skipz
  3569  051B  2D26               	goto	l1250
  3570  051C  0AA4               	incf	___aomod@divisor+4,f
  3571  051D  1D03               	skipz
  3572  051E  2D26               	goto	l1250
  3573  051F  0AA5               	incf	___aomod@divisor+5,f
  3574  0520  1D03               	skipz
  3575  0521  2D26               	goto	l1250
  3576  0522  0AA6               	incf	___aomod@divisor+6,f
  3577  0523  1D03               	skipz
  3578  0524  2D26               	goto	l1250
  3579  0525  0AA7               	incf	___aomod@divisor+7,f
  3580  0526                     l1250:	
  3581  0526  0020               	movlb	0	; select bank0
  3582  0527  0820               	movf	___aomod@divisor,w
  3583  0528  0421               	iorwf	___aomod@divisor+1,w
  3584  0529  0422               	iorwf	___aomod@divisor+2,w
  3585  052A  0423               	iorwf	___aomod@divisor+3,w
  3586  052B  0424               	iorwf	___aomod@divisor+4,w
  3587  052C  0425               	iorwf	___aomod@divisor+5,w
  3588  052D  0426               	iorwf	___aomod@divisor+6,w
  3589  052E  0427               	iorwf	___aomod@divisor+7,w
  3590  052F  1903               	skipnz
  3591  0530  2D7E               	goto	l1266
  3592  0531  01F1               	clrf	___aomod@counter
  3593  0532  0AF1               	incf	___aomod@counter,f
  3594  0533                     l1258:	
  3595  0533  1BA7               	btfsc	___aomod@divisor+7,7
  3596  0534  2D42               	goto	l1260
  3597  0535  35A0               	lslf	___aomod@divisor,f
  3598  0536  0DA1               	rlf	___aomod@divisor+1,f
  3599  0537  0DA2               	rlf	___aomod@divisor+2,f
  3600  0538  0DA3               	rlf	___aomod@divisor+3,f
  3601  0539  0DA4               	rlf	___aomod@divisor+4,f
  3602  053A  0DA5               	rlf	___aomod@divisor+5,f
  3603  053B  0DA6               	rlf	___aomod@divisor+6,f
  3604  053C  0DA7               	rlf	___aomod@divisor+7,f
  3605  053D  3001               	movlw	1
  3606  053E  00F0               	movwf	??___aomod
  3607  053F  0870               	movf	??___aomod,w
  3608  0540  07F1               	addwf	___aomod@counter,f
  3609  0541  2D33               	goto	l1258
  3610  0542                     l1260:	
  3611  0542  0827               	movf	___aomod@divisor+7,w
  3612  0543  022F               	subwf	___aomod@dividend+7,w
  3613  0544  1D03               	skipz
  3614  0545  2D60               	goto	u945
  3615  0546  0826               	movf	___aomod@divisor+6,w
  3616  0547  022E               	subwf	___aomod@dividend+6,w
  3617  0548  1D03               	skipz
  3618  0549  2D60               	goto	u945
  3619  054A  0825               	movf	___aomod@divisor+5,w
  3620  054B  022D               	subwf	___aomod@dividend+5,w
  3621  054C  1D03               	skipz
  3622  054D  2D60               	goto	u945
  3623  054E  0824               	movf	___aomod@divisor+4,w
  3624  054F  022C               	subwf	___aomod@dividend+4,w
  3625  0550  1D03               	skipz
  3626  0551  2D60               	goto	u945
  3627  0552  0823               	movf	___aomod@divisor+3,w
  3628  0553  022B               	subwf	___aomod@dividend+3,w
  3629  0554  1D03               	skipz
  3630  0555  2D60               	goto	u945
  3631  0556  0822               	movf	___aomod@divisor+2,w
  3632  0557  022A               	subwf	___aomod@dividend+2,w
  3633  0558  1D03               	skipz
  3634  0559  2D60               	goto	u945
  3635  055A  0821               	movf	___aomod@divisor+1,w
  3636  055B  0229               	subwf	___aomod@dividend+1,w
  3637  055C  1D03               	skipz
  3638  055D  2D60               	goto	u945
  3639  055E  0820               	movf	___aomod@divisor,w
  3640  055F  0228               	subwf	___aomod@dividend,w
  3641  0560                     u945:	
  3642  0560  1C03               	skipc
  3643  0561  2D72               	goto	l1264
  3644  0562  0820               	movf	___aomod@divisor,w
  3645  0563  02A8               	subwf	___aomod@dividend,f
  3646  0564  0821               	movf	___aomod@divisor+1,w
  3647  0565  3BA9               	subwfb	___aomod@dividend+1,f
  3648  0566  0822               	movf	___aomod@divisor+2,w
  3649  0567  3BAA               	subwfb	___aomod@dividend+2,f
  3650  0568  0823               	movf	___aomod@divisor+3,w
  3651  0569  3BAB               	subwfb	___aomod@dividend+3,f
  3652  056A  0824               	movf	___aomod@divisor+4,w
  3653  056B  3BAC               	subwfb	___aomod@dividend+4,f
  3654  056C  0825               	movf	___aomod@divisor+5,w
  3655  056D  3BAD               	subwfb	___aomod@dividend+5,f
  3656  056E  0826               	movf	___aomod@divisor+6,w
  3657  056F  3BAE               	subwfb	___aomod@dividend+6,f
  3658  0570  0827               	movf	___aomod@divisor+7,w
  3659  0571  3BAF               	subwfb	___aomod@dividend+7,f
  3660  0572                     l1264:	
  3661  0572  36A7               	lsrf	___aomod@divisor+7,f
  3662  0573  0CA6               	rrf	___aomod@divisor+6,f
  3663  0574  0CA5               	rrf	___aomod@divisor+5,f
  3664  0575  0CA4               	rrf	___aomod@divisor+4,f
  3665  0576  0CA3               	rrf	___aomod@divisor+3,f
  3666  0577  0CA2               	rrf	___aomod@divisor+2,f
  3667  0578  0CA1               	rrf	___aomod@divisor+1,f
  3668  0579  0CA0               	rrf	___aomod@divisor,f
  3669  057A  3001               	movlw	1
  3670  057B  02F1               	subwf	___aomod@counter,f
  3671  057C  1D03               	btfss	3,2
  3672  057D  2D42               	goto	l1260
  3673  057E                     l1266:	
  3674  057E  0872               	movf	___aomod@sign,w
  3675  057F  1903               	btfsc	3,2
  3676  0580  2D9F               	goto	l376
  3677  0581  09A8               	comf	___aomod@dividend,f
  3678  0582  09A9               	comf	___aomod@dividend+1,f
  3679  0583  09AA               	comf	___aomod@dividend+2,f
  3680  0584  09AB               	comf	___aomod@dividend+3,f
  3681  0585  09AC               	comf	___aomod@dividend+4,f
  3682  0586  09AD               	comf	___aomod@dividend+5,f
  3683  0587  09AE               	comf	___aomod@dividend+6,f
  3684  0588  09AF               	comf	___aomod@dividend+7,f
  3685  0589  0AA8               	incf	___aomod@dividend,f
  3686  058A  1D03               	skipz
  3687  058B  2D9F               	goto	l376
  3688  058C  0AA9               	incf	___aomod@dividend+1,f
  3689  058D  1D03               	skipz
  3690  058E  2D9F               	goto	l376
  3691  058F  0AAA               	incf	___aomod@dividend+2,f
  3692  0590  1D03               	skipz
  3693  0591  2D9F               	goto	l376
  3694  0592  0AAB               	incf	___aomod@dividend+3,f
  3695  0593  1D03               	skipz
  3696  0594  2D9F               	goto	l376
  3697  0595  0AAC               	incf	___aomod@dividend+4,f
  3698  0596  1D03               	skipz
  3699  0597  2D9F               	goto	l376
  3700  0598  0AAD               	incf	___aomod@dividend+5,f
  3701  0599  1D03               	skipz
  3702  059A  2D9F               	goto	l376
  3703  059B  0AAE               	incf	___aomod@dividend+6,f
  3704  059C  1D03               	skipz
  3705  059D  2D9F               	goto	l376
  3706  059E  0AAF               	incf	___aomod@dividend+7,f
  3707  059F                     l376:	
  3708  059F  0020               	movlb	0	; select bank0
  3709  05A0  0828               	movf	___aomod@dividend,w
  3710  05A1  00A0               	movwf	?___aomod
  3711  05A2  0829               	movf	___aomod@dividend+1,w
  3712  05A3  00A1               	movwf	?___aomod+1
  3713  05A4  082A               	movf	___aomod@dividend+2,w
  3714  05A5  00A2               	movwf	?___aomod+2
  3715  05A6  082B               	movf	___aomod@dividend+3,w
  3716  05A7  00A3               	movwf	?___aomod+3
  3717  05A8  082C               	movf	___aomod@dividend+4,w
  3718  05A9  00A4               	movwf	?___aomod+4
  3719  05AA  082D               	movf	___aomod@dividend+5,w
  3720  05AB  00A5               	movwf	?___aomod+5
  3721  05AC  082E               	movf	___aomod@dividend+6,w
  3722  05AD  00A6               	movwf	?___aomod+6
  3723  05AE  082F               	movf	___aomod@dividend+7,w
  3724  05AF  00A7               	movwf	?___aomod+7
  3725  05B0  0008               	return
  3726  05B1                     __end_of___aomod:	
  3727                           
  3728                           	psect	text11
  3729  05B1                     __ptext11:	
  3730 ;; *************** function ___aodiv *****************
  3731 ;; Defined at:
  3732 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aodiv.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  divisor         8    0[BANK0 ] long long 
  3735 ;;  dividend        8    8[BANK0 ] long long 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  quotient        8    3[COMMON] long long 
  3738 ;;  sign            1    2[COMMON] unsigned char 
  3739 ;;  counter         1    1[COMMON] unsigned char 
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  8    0[BANK0 ] long long 
  3742 ;; Registers used:
  3743 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3749 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3750 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3751 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3752 ;;      Totals:        11      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3753 ;;Total ram usage:       27 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; This function calls:
  3756 ;;		Nothing
  3757 ;; This function is called by:
  3758 ;;		_dtoa
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           
  3763                           ;psect for function ___aodiv
  3764  05B1                     ___aodiv:	
  3765                           
  3766                           ;incstack = 0
  3767                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
  3768  05B1  01F2               	clrf	___aodiv@sign
  3769  05B2  3020               	movlw	low ___aodiv@divisor
  3770  05B3  0086               	movwf	6
  3771  05B4  3000               	movlw	high ___aodiv@divisor
  3772  05B5  0087               	movwf	7
  3773  05B6  3F47               	moviw [7]fsr1
  3774  05B7  00F0               	movwf	??___aodiv
  3775  05B8  1FF0               	btfss	??___aodiv,7
  3776  05B9  2DDB               	goto	l1208
  3777  05BA  0020               	movlb	0	; select bank0
  3778  05BB  09A0               	comf	___aodiv@divisor,f
  3779  05BC  09A1               	comf	___aodiv@divisor+1,f
  3780  05BD  09A2               	comf	___aodiv@divisor+2,f
  3781  05BE  09A3               	comf	___aodiv@divisor+3,f
  3782  05BF  09A4               	comf	___aodiv@divisor+4,f
  3783  05C0  09A5               	comf	___aodiv@divisor+5,f
  3784  05C1  09A6               	comf	___aodiv@divisor+6,f
  3785  05C2  09A7               	comf	___aodiv@divisor+7,f
  3786  05C3  0AA0               	incf	___aodiv@divisor,f
  3787  05C4  1D03               	skipz
  3788  05C5  2DD9               	goto	u78lld
  3789  05C6  0AA1               	incf	___aodiv@divisor+1,f
  3790  05C7  1D03               	skipz
  3791  05C8  2DD9               	goto	u78lld
  3792  05C9  0AA2               	incf	___aodiv@divisor+2,f
  3793  05CA  1D03               	skipz
  3794  05CB  2DD9               	goto	u78lld
  3795  05CC  0AA3               	incf	___aodiv@divisor+3,f
  3796  05CD  1D03               	skipz
  3797  05CE  2DD9               	goto	u78lld
  3798  05CF  0AA4               	incf	___aodiv@divisor+4,f
  3799  05D0  1D03               	skipz
  3800  05D1  2DD9               	goto	u78lld
  3801  05D2  0AA5               	incf	___aodiv@divisor+5,f
  3802  05D3  1D03               	skipz
  3803  05D4  2DD9               	goto	u78lld
  3804  05D5  0AA6               	incf	___aodiv@divisor+6,f
  3805  05D6  1D03               	skipz
  3806  05D7  2DD9               	goto	u78lld
  3807  05D8  0AA7               	incf	___aodiv@divisor+7,f
  3808  05D9                     u78lld:	
  3809  05D9  01F2               	clrf	___aodiv@sign
  3810  05DA  0AF2               	incf	___aodiv@sign,f
  3811  05DB                     l1208:	
  3812  05DB  3028               	movlw	low ___aodiv@dividend
  3813  05DC  0086               	movwf	6
  3814  05DD  3000               	movlw	high ___aodiv@dividend
  3815  05DE  0087               	movwf	7
  3816  05DF  3F47               	moviw [7]fsr1
  3817  05E0  00F0               	movwf	??___aodiv
  3818  05E1  1FF0               	btfss	??___aodiv,7
  3819  05E2  2E06               	goto	l1214
  3820  05E3  0020               	movlb	0	; select bank0
  3821  05E4  09A8               	comf	___aodiv@dividend,f
  3822  05E5  09A9               	comf	___aodiv@dividend+1,f
  3823  05E6  09AA               	comf	___aodiv@dividend+2,f
  3824  05E7  09AB               	comf	___aodiv@dividend+3,f
  3825  05E8  09AC               	comf	___aodiv@dividend+4,f
  3826  05E9  09AD               	comf	___aodiv@dividend+5,f
  3827  05EA  09AE               	comf	___aodiv@dividend+6,f
  3828  05EB  09AF               	comf	___aodiv@dividend+7,f
  3829  05EC  0AA8               	incf	___aodiv@dividend,f
  3830  05ED  1D03               	skipz
  3831  05EE  2E02               	goto	l1212
  3832  05EF  0AA9               	incf	___aodiv@dividend+1,f
  3833  05F0  1D03               	skipz
  3834  05F1  2E02               	goto	l1212
  3835  05F2  0AAA               	incf	___aodiv@dividend+2,f
  3836  05F3  1D03               	skipz
  3837  05F4  2E02               	goto	l1212
  3838  05F5  0AAB               	incf	___aodiv@dividend+3,f
  3839  05F6  1D03               	skipz
  3840  05F7  2E02               	goto	l1212
  3841  05F8  0AAC               	incf	___aodiv@dividend+4,f
  3842  05F9  1D03               	skipz
  3843  05FA  2E02               	goto	l1212
  3844  05FB  0AAD               	incf	___aodiv@dividend+5,f
  3845  05FC  1D03               	skipz
  3846  05FD  2E02               	goto	l1212
  3847  05FE  0AAE               	incf	___aodiv@dividend+6,f
  3848  05FF  1D03               	skipz
  3849  0600  2E02               	goto	l1212
  3850  0601  0AAF               	incf	___aodiv@dividend+7,f
  3851  0602                     l1212:	
  3852  0602  3001               	movlw	1
  3853  0603  00F0               	movwf	??___aodiv
  3854  0604  0870               	movf	??___aodiv,w
  3855  0605  06F2               	xorwf	___aodiv@sign,f
  3856  0606                     l1214:	
  3857  0606  3073               	movlw	low ___aodiv@quotient
  3858  0607  0086               	movwf	6
  3859  0608  3000               	movlw	high ___aodiv@quotient
  3860  0609  0087               	movwf	7
  3861  060A  3008               	movlw	8
  3862  060B  00F0               	movwf	??___aodiv
  3863  060C  3000               	movlw	0
  3864  060D                     u810:	
  3865  060D  001E               	movwi fsr1++
  3866  060E  0BF0               	decfsz	??___aodiv,f
  3867  060F  2E0D               	goto	u810
  3868  0610  0020               	movlb	0	; select bank0
  3869  0611  0820               	movf	___aodiv@divisor,w
  3870  0612  0421               	iorwf	___aodiv@divisor+1,w
  3871  0613  0422               	iorwf	___aodiv@divisor+2,w
  3872  0614  0423               	iorwf	___aodiv@divisor+3,w
  3873  0615  0424               	iorwf	___aodiv@divisor+4,w
  3874  0616  0425               	iorwf	___aodiv@divisor+5,w
  3875  0617  0426               	iorwf	___aodiv@divisor+6,w
  3876  0618  0427               	iorwf	___aodiv@divisor+7,w
  3877  0619  1903               	skipnz
  3878  061A  2E71               	goto	l1236
  3879  061B  01F1               	clrf	___aodiv@counter
  3880  061C  0AF1               	incf	___aodiv@counter,f
  3881  061D                     l1224:	
  3882  061D  1BA7               	btfsc	___aodiv@divisor+7,7
  3883  061E  2E2C               	goto	l1226
  3884  061F  35A0               	lslf	___aodiv@divisor,f
  3885  0620  0DA1               	rlf	___aodiv@divisor+1,f
  3886  0621  0DA2               	rlf	___aodiv@divisor+2,f
  3887  0622  0DA3               	rlf	___aodiv@divisor+3,f
  3888  0623  0DA4               	rlf	___aodiv@divisor+4,f
  3889  0624  0DA5               	rlf	___aodiv@divisor+5,f
  3890  0625  0DA6               	rlf	___aodiv@divisor+6,f
  3891  0626  0DA7               	rlf	___aodiv@divisor+7,f
  3892  0627  3001               	movlw	1
  3893  0628  00F0               	movwf	??___aodiv
  3894  0629  0870               	movf	??___aodiv,w
  3895  062A  07F1               	addwf	___aodiv@counter,f
  3896  062B  2E1D               	goto	l1224
  3897  062C                     l1226:	
  3898  062C  35F3               	lslf	___aodiv@quotient,f
  3899  062D  0DF4               	rlf	___aodiv@quotient+1,f
  3900  062E  0DF5               	rlf	___aodiv@quotient+2,f
  3901  062F  0DF6               	rlf	___aodiv@quotient+3,f
  3902  0630  0DF7               	rlf	___aodiv@quotient+4,f
  3903  0631  0DF8               	rlf	___aodiv@quotient+5,f
  3904  0632  0DF9               	rlf	___aodiv@quotient+6,f
  3905  0633  0DFA               	rlf	___aodiv@quotient+7,f
  3906  0634  0827               	movf	___aodiv@divisor+7,w
  3907  0635  022F               	subwf	___aodiv@dividend+7,w
  3908  0636  1D03               	skipz
  3909  0637  2E52               	goto	u845
  3910  0638  0826               	movf	___aodiv@divisor+6,w
  3911  0639  022E               	subwf	___aodiv@dividend+6,w
  3912  063A  1D03               	skipz
  3913  063B  2E52               	goto	u845
  3914  063C  0825               	movf	___aodiv@divisor+5,w
  3915  063D  022D               	subwf	___aodiv@dividend+5,w
  3916  063E  1D03               	skipz
  3917  063F  2E52               	goto	u845
  3918  0640  0824               	movf	___aodiv@divisor+4,w
  3919  0641  022C               	subwf	___aodiv@dividend+4,w
  3920  0642  1D03               	skipz
  3921  0643  2E52               	goto	u845
  3922  0644  0823               	movf	___aodiv@divisor+3,w
  3923  0645  022B               	subwf	___aodiv@dividend+3,w
  3924  0646  1D03               	skipz
  3925  0647  2E52               	goto	u845
  3926  0648  0822               	movf	___aodiv@divisor+2,w
  3927  0649  022A               	subwf	___aodiv@dividend+2,w
  3928  064A  1D03               	skipz
  3929  064B  2E52               	goto	u845
  3930  064C  0821               	movf	___aodiv@divisor+1,w
  3931  064D  0229               	subwf	___aodiv@dividend+1,w
  3932  064E  1D03               	skipz
  3933  064F  2E52               	goto	u845
  3934  0650  0820               	movf	___aodiv@divisor,w
  3935  0651  0228               	subwf	___aodiv@dividend,w
  3936  0652                     u845:	
  3937  0652  1C03               	skipc
  3938  0653  2E65               	goto	l1234
  3939  0654  0820               	movf	___aodiv@divisor,w
  3940  0655  02A8               	subwf	___aodiv@dividend,f
  3941  0656  0821               	movf	___aodiv@divisor+1,w
  3942  0657  3BA9               	subwfb	___aodiv@dividend+1,f
  3943  0658  0822               	movf	___aodiv@divisor+2,w
  3944  0659  3BAA               	subwfb	___aodiv@dividend+2,f
  3945  065A  0823               	movf	___aodiv@divisor+3,w
  3946  065B  3BAB               	subwfb	___aodiv@dividend+3,f
  3947  065C  0824               	movf	___aodiv@divisor+4,w
  3948  065D  3BAC               	subwfb	___aodiv@dividend+4,f
  3949  065E  0825               	movf	___aodiv@divisor+5,w
  3950  065F  3BAD               	subwfb	___aodiv@dividend+5,f
  3951  0660  0826               	movf	___aodiv@divisor+6,w
  3952  0661  3BAE               	subwfb	___aodiv@dividend+6,f
  3953  0662  0827               	movf	___aodiv@divisor+7,w
  3954  0663  3BAF               	subwfb	___aodiv@dividend+7,f
  3955  0664  1473               	bsf	___aodiv@quotient,0
  3956  0665                     l1234:	
  3957  0665  36A7               	lsrf	___aodiv@divisor+7,f
  3958  0666  0CA6               	rrf	___aodiv@divisor+6,f
  3959  0667  0CA5               	rrf	___aodiv@divisor+5,f
  3960  0668  0CA4               	rrf	___aodiv@divisor+4,f
  3961  0669  0CA3               	rrf	___aodiv@divisor+3,f
  3962  066A  0CA2               	rrf	___aodiv@divisor+2,f
  3963  066B  0CA1               	rrf	___aodiv@divisor+1,f
  3964  066C  0CA0               	rrf	___aodiv@divisor,f
  3965  066D  3001               	movlw	1
  3966  066E  02F1               	subwf	___aodiv@counter,f
  3967  066F  1D03               	btfss	3,2
  3968  0670  2E2C               	goto	l1226
  3969  0671                     l1236:	
  3970  0671  0872               	movf	___aodiv@sign,w
  3971  0672  1903               	btfsc	3,2
  3972  0673  2E92               	goto	l363
  3973  0674  09F3               	comf	___aodiv@quotient,f
  3974  0675  09F4               	comf	___aodiv@quotient+1,f
  3975  0676  09F5               	comf	___aodiv@quotient+2,f
  3976  0677  09F6               	comf	___aodiv@quotient+3,f
  3977  0678  09F7               	comf	___aodiv@quotient+4,f
  3978  0679  09F8               	comf	___aodiv@quotient+5,f
  3979  067A  09F9               	comf	___aodiv@quotient+6,f
  3980  067B  09FA               	comf	___aodiv@quotient+7,f
  3981  067C  0AF3               	incf	___aodiv@quotient,f
  3982  067D  1D03               	skipz
  3983  067E  2E92               	goto	l363
  3984  067F  0AF4               	incf	___aodiv@quotient+1,f
  3985  0680  1D03               	skipz
  3986  0681  2E92               	goto	l363
  3987  0682  0AF5               	incf	___aodiv@quotient+2,f
  3988  0683  1D03               	skipz
  3989  0684  2E92               	goto	l363
  3990  0685  0AF6               	incf	___aodiv@quotient+3,f
  3991  0686  1D03               	skipz
  3992  0687  2E92               	goto	l363
  3993  0688  0AF7               	incf	___aodiv@quotient+4,f
  3994  0689  1D03               	skipz
  3995  068A  2E92               	goto	l363
  3996  068B  0AF8               	incf	___aodiv@quotient+5,f
  3997  068C  1D03               	skipz
  3998  068D  2E92               	goto	l363
  3999  068E  0AF9               	incf	___aodiv@quotient+6,f
  4000  068F  1D03               	skipz
  4001  0690  2E92               	goto	l363
  4002  0691  0AFA               	incf	___aodiv@quotient+7,f
  4003  0692                     l363:	
  4004  0692  0873               	movf	___aodiv@quotient,w
  4005  0693  0020               	movlb	0	; select bank0
  4006  0694  00A0               	movwf	?___aodiv
  4007  0695  0874               	movf	___aodiv@quotient+1,w
  4008  0696  00A1               	movwf	?___aodiv+1
  4009  0697  0875               	movf	___aodiv@quotient+2,w
  4010  0698  00A2               	movwf	?___aodiv+2
  4011  0699  0876               	movf	___aodiv@quotient+3,w
  4012  069A  00A3               	movwf	?___aodiv+3
  4013  069B  0877               	movf	___aodiv@quotient+4,w
  4014  069C  00A4               	movwf	?___aodiv+4
  4015  069D  0878               	movf	___aodiv@quotient+5,w
  4016  069E  00A5               	movwf	?___aodiv+5
  4017  069F  0879               	movf	___aodiv@quotient+6,w
  4018  06A0  00A6               	movwf	?___aodiv+6
  4019  06A1  087A               	movf	___aodiv@quotient+7,w
  4020  06A2  00A7               	movwf	?___aodiv+7
  4021  06A3  0008               	return
  4022  06A4                     __end_of___aodiv:	
  4023                           
  4024                           	psect	text12
  4025  0396                     __ptext12:	
  4026 ;; *************** function _crc16 *****************
  4027 ;; Defined at:
  4028 ;;		line 16 in file "main.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  message         1    wreg     PTR const unsigned char 
  4031 ;;		 -> main@message(43), 
  4032 ;;  polynomial      2    4[COMMON] unsigned short 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  message         1    8[BANK0 ] PTR const unsigned char 
  4035 ;;		 -> main@message(43), 
  4036 ;;  i               2    6[BANK0 ] int 
  4037 ;;  byte            1    3[BANK0 ] unsigned char 
  4038 ;;  i               2    4[BANK0 ] unsigned int 
  4039 ;;  counti          2    1[BANK0 ] unsigned int 
  4040 ;;  crc             2    9[BANK0 ] unsigned int 
  4041 ;;  append          1    0        unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  2    4[COMMON] unsigned short 
  4044 ;; Registers used:
  4045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4052 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4053 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4054 ;;      Totals:         5      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4055 ;;Total ram usage:       16 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    1
  4058 ;; This function calls:
  4059 ;;		_strlen
  4060 ;; This function is called by:
  4061 ;;		_main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _crc16
  4067  0396                     _crc16:	
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _crc16: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4071                           ;crc16@message stored from wreg
  4072  0396  0020               	movlb	0	; select bank0
  4073  0397  00A8               	movwf	crc16@message
  4074                           
  4075                           ;main.c: 17:  unsigned int crc;;main.c: 19:  crc = 0xFFFF;
  4076  0398  30FF               	movlw	255
  4077  0399  00A9               	movwf	crc16@crc
  4078  039A  30FF               	movlw	255
  4079  039B  00AA               	movwf	crc16@crc+1
  4080                           
  4081                           ;main.c: 20:  if (strlen(message) == 0)
  4082  039C  0828               	movf	crc16@message,w
  4083  039D  00F0               	movwf	strlen@s
  4084  039E  3000               	movlw	0
  4085  039F  00F1               	movwf	strlen@s+1
  4086  03A0  3181  213D  3183   	fcall	_strlen
  4087  03A3  0870               	movf	?_strlen,w
  4088  03A4  0471               	iorwf	?_strlen+1,w
  4089  03A5  1D03               	btfss	3,2
  4090  03A6  2BAA               	goto	l1674
  4091                           
  4092                           ;main.c: 21:  {;main.c: 22:   return (~crc);
  4093  03A7  01F4               	clrf	?_crc16
  4094  03A8  01F5               	clrf	?_crc16+1
  4095  03A9  0008               	return
  4096  03AA                     l1674:	
  4097                           
  4098                           ;main.c: 25:  const unsigned short FRONT_BIT = 0x8000;;main.c: 26:  for (unsigned int i 
      +                          = 0, counti = strlen(message); i < counti; i++) {
  4099  03AA  0020               	movlb	0	; select bank0
  4100  03AB  01A4               	clrf	crc16@i
  4101  03AC  01A5               	clrf	crc16@i+1
  4102  03AD  0828               	movf	crc16@message,w
  4103  03AE  00F0               	movwf	strlen@s
  4104  03AF  3000               	movlw	0
  4105  03B0  00F1               	movwf	strlen@s+1
  4106  03B1  3181  213D  3183   	fcall	_strlen
  4107  03B4  0871               	movf	?_strlen+1,w
  4108  03B5  0020               	movlb	0	; select bank0
  4109  03B6  00A2               	movwf	crc16@counti+1
  4110  03B7  0870               	movf	?_strlen,w
  4111  03B8  00A1               	movwf	crc16@counti
  4112  03B9                     l81:	
  4113  03B9  0822               	movf	crc16@counti+1,w
  4114  03BA  0225               	subwf	crc16@i+1,w
  4115  03BB  1D03               	skipz
  4116  03BC  2BBF               	goto	u1605
  4117  03BD  0821               	movf	crc16@counti,w
  4118  03BE  0224               	subwf	crc16@i,w
  4119  03BF                     u1605:	
  4120  03BF  1803               	btfsc	3,0
  4121  03C0  2C00               	goto	l1694
  4122                           
  4123                           ;main.c: 27:   char byte = message[i];
  4124  03C1  0824               	movf	crc16@i,w
  4125  03C2  0728               	addwf	crc16@message,w
  4126  03C3  00F6               	movwf	??_crc16
  4127  03C4  0876               	movf	??_crc16,w
  4128  03C5  0086               	movwf	6
  4129  03C6  0187               	clrf	7
  4130  03C7  0801               	movf	1,w
  4131  03C8  00F7               	movwf	??_crc16+1
  4132  03C9  0877               	movf	??_crc16+1,w
  4133  03CA  00A3               	movwf	crc16@byte
  4134                           
  4135                           ;main.c: 29:   crc = crc ^ ((unsigned short)(byte << 8));
  4136  03CB  0823               	movf	crc16@byte,w
  4137  03CC  00F6               	movwf	??_crc16
  4138  03CD  01F7               	clrf	??_crc16+1
  4139  03CE  0876               	movf	??_crc16,w
  4140  03CF  00F7               	movwf	??_crc16+1
  4141  03D0  01F6               	clrf	??_crc16
  4142  03D1  0829               	movf	crc16@crc,w
  4143  03D2  0676               	xorwf	??_crc16,w
  4144  03D3  00A9               	movwf	crc16@crc
  4145  03D4  082A               	movf	crc16@crc+1,w
  4146  03D5  0677               	xorwf	??_crc16+1,w
  4147  03D6  00AA               	movwf	crc16@crc+1
  4148                           
  4149                           ;main.c: 31:   for (int i = 0; i < 8; i++) {
  4150  03D7  01A6               	clrf	crc16@i_139
  4151  03D8  01A7               	clrf	crc16@i_139+1
  4152  03D9                     l83:	
  4153                           
  4154                           ;main.c: 32:    if ((crc & FRONT_BIT) != 0) {
  4155  03D9  0020               	movlb	0	; select bank0
  4156  03DA  1FAA               	btfss	crc16@crc+1,7
  4157  03DB  2BE8               	goto	l1690
  4158                           
  4159                           ;main.c: 33:     crc = ((unsigned short)(crc << 1)) ^ polynomial;
  4160  03DC  082A               	movf	crc16@crc+1,w
  4161  03DD  00F7               	movwf	??_crc16+1
  4162  03DE  0829               	movf	crc16@crc,w
  4163  03DF  00F6               	movwf	??_crc16
  4164  03E0  35F6               	lslf	??_crc16,f
  4165  03E1  0DF7               	rlf	??_crc16+1,f
  4166  03E2  0874               	movf	crc16@polynomial,w
  4167  03E3  0676               	xorwf	??_crc16,w
  4168  03E4  00A9               	movwf	crc16@crc
  4169  03E5  0875               	movf	crc16@polynomial+1,w
  4170  03E6  0677               	xorwf	??_crc16+1,w
  4171  03E7  2BEB               	goto	L2
  4172  03E8                     l1690:	
  4173                           ;main.c: 34:    }
  4174                           
  4175                           
  4176                           ;main.c: 37:     crc = crc << 1;
  4177  03E8  3529               	lslf	crc16@crc,w
  4178  03E9  00A9               	movwf	crc16@crc
  4179  03EA  0D2A               	rlf	crc16@crc+1,w
  4180  03EB                     L2:	
  4181  03EB  00AA               	movwf	crc16@crc+1
  4182                           
  4183                           ;main.c: 39:   }
  4184                           
  4185                           ;main.c: 38:    }
  4186  03EC  3001               	movlw	1
  4187  03ED  07A6               	addwf	crc16@i_139,f
  4188  03EE  3000               	movlw	0
  4189  03EF  3DA7               	addwfc	crc16@i_139+1,f
  4190  03F0  0827               	movf	crc16@i_139+1,w
  4191  03F1  3A80               	xorlw	128
  4192  03F2  00F6               	movwf	??_crc16
  4193  03F3  3080               	movlw	128
  4194  03F4  0276               	subwf	??_crc16,w
  4195  03F5  3008               	movlw	8
  4196  03F6  1903               	btfsc	3,2
  4197  03F7  0226               	subwf	crc16@i_139,w
  4198  03F8  1C03               	skipc
  4199  03F9  2BD9               	goto	l83
  4200                           
  4201                           ;main.c: 40:  }
  4202  03FA  3001               	movlw	1
  4203  03FB  0020               	movlb	0	; select bank0
  4204  03FC  07A4               	addwf	crc16@i,f
  4205  03FD  3000               	movlw	0
  4206  03FE  3DA5               	addwfc	crc16@i+1,f
  4207  03FF  2BB9               	goto	l81
  4208  0400                     l1694:	
  4209                           
  4210                           ;main.c: 42:  return crc;
  4211  0400  082A               	movf	crc16@crc+1,w
  4212  0401  00F5               	movwf	?_crc16+1
  4213  0402  0829               	movf	crc16@crc,w
  4214  0403  00F4               	movwf	?_crc16
  4215  0404  0008               	return
  4216  0405                     __end_of_crc16:	
  4217                           
  4218                           	psect	text13
  4219  020A                     __ptext13:	
  4220 ;; *************** function _TransmitString *****************
  4221 ;; Defined at:
  4222 ;;		line 72 in file "main.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  message         1    wreg     PTR unsigned char 
  4225 ;;		 -> main@message(43), 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  message         1    9[COMMON] PTR unsigned char 
  4228 ;;		 -> main@message(43), 
  4229 ;;  i               2   10[COMMON] int 
  4230 ;;  counti          2    7[COMMON] int 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  1    wreg      void 
  4233 ;; Registers used:
  4234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4241 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;Total ram usage:        6 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    2
  4247 ;; This function calls:
  4248 ;;		_TransmitByte
  4249 ;;		_strlen
  4250 ;; This function is called by:
  4251 ;;		_main
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           
  4256                           ;psect for function _TransmitString
  4257  020A                     _TransmitString:	
  4258                           
  4259                           ;incstack = 0
  4260                           ; Regs used in _TransmitString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4261                           ;TransmitString@message stored from wreg
  4262  020A  00F9               	movwf	TransmitString@message
  4263                           
  4264                           ;main.c: 72: void TransmitString(char* message);main.c: 73: {;main.c: 75:  for (int i = 
      +                          0, counti = strlen(message); i < counti; i++)
  4265  020B  01FA               	clrf	TransmitString@i
  4266  020C  01FB               	clrf	TransmitString@i+1
  4267  020D  0879               	movf	TransmitString@message,w
  4268  020E  00F0               	movwf	strlen@s
  4269  020F  3000               	movlw	0
  4270  0210  00F1               	movwf	strlen@s+1
  4271  0211  3181  213D  3182   	fcall	_strlen
  4272  0214  0871               	movf	?_strlen+1,w
  4273  0215  00F8               	movwf	TransmitString@counti+1
  4274  0216  0870               	movf	?_strlen,w
  4275  0217  00F7               	movwf	TransmitString@counti
  4276  0218                     l1706:	
  4277  0218  087B               	movf	TransmitString@i+1,w
  4278  0219  3A80               	xorlw	128
  4279  021A  00F6               	movwf	??_TransmitString
  4280  021B  0878               	movf	TransmitString@counti+1,w
  4281  021C  3A80               	xorlw	128
  4282  021D  0276               	subwf	??_TransmitString,w
  4283  021E  1D03               	skipz
  4284  021F  2A22               	goto	u1615
  4285  0220  0877               	movf	TransmitString@counti,w
  4286  0221  027A               	subwf	TransmitString@i,w
  4287  0222                     u1615:	
  4288  0222  1803               	btfsc	3,0
  4289  0223  0008               	return
  4290                           
  4291                           ;main.c: 76:  {;main.c: 77:   TransmitByte(message[i]);
  4292  0224  087A               	movf	TransmitString@i,w
  4293  0225  0779               	addwf	TransmitString@message,w
  4294  0226  00F6               	movwf	??_TransmitString
  4295  0227  0876               	movf	??_TransmitString,w
  4296  0228  0086               	movwf	6
  4297  0229  0187               	clrf	7
  4298  022A  0801               	movf	1,w
  4299  022B  3181  2182  3182   	fcall	_TransmitByte
  4300                           
  4301                           ;main.c: 78:  }
  4302  022E  3001               	movlw	1
  4303  022F  07FA               	addwf	TransmitString@i,f
  4304  0230  3000               	movlw	0
  4305  0231  3DFB               	addwfc	TransmitString@i+1,f
  4306  0232  2A18               	goto	l1706
  4307  0233                     __end_of_TransmitString:	
  4308                           
  4309                           	psect	text14
  4310  0182                     __ptext14:	
  4311 ;; *************** function _TransmitByte *****************
  4312 ;; Defined at:
  4313 ;;		line 63 in file "main.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  byte            1    wreg     unsigned char 
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  byte            1    3[COMMON] unsigned char 
  4318 ;;  i               2    4[COMMON] int 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      void 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0, pclath, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;Total ram usage:        4 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    1
  4335 ;; This function calls:
  4336 ;;		_TransmitBit
  4337 ;; This function is called by:
  4338 ;;		_TransmitString
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           
  4343                           ;psect for function _TransmitByte
  4344  0182                     _TransmitByte:	
  4345                           
  4346                           ;incstack = 0
  4347                           ; Regs used in _TransmitByte: [wreg+status,2+status,0+pclath+cstack]
  4348                           ;TransmitByte@byte stored from wreg
  4349  0182  00F3               	movwf	TransmitByte@byte
  4350                           
  4351                           ;main.c: 63: void TransmitByte(char byte);main.c: 64: {;main.c: 65:  for (int i = 7; i >
      +                          =0; i--)
  4352  0183  3007               	movlw	7
  4353  0184  00F4               	movwf	TransmitByte@i
  4354  0185  3000               	movlw	0
  4355  0186  00F5               	movwf	TransmitByte@i+1
  4356  0187                     l1408:	
  4357                           
  4358                           ;main.c: 66:  {;main.c: 67:   TransmitBit((byte >> i) & 1);
  4359  0187  0873               	movf	TransmitByte@byte,w
  4360  0188  00F2               	movwf	??_TransmitByte
  4361  0189  0A74               	incf	TransmitByte@i,w
  4362  018A  298C               	goto	u1194
  4363  018B                     u1195:	
  4364  018B  36F2               	lsrf	??_TransmitByte,f
  4365  018C                     u1194:	
  4366  018C  0B89               	decfsz	9,f
  4367  018D  298B               	goto	u1195
  4368  018E  1C72               	btfss	??_TransmitByte,0
  4369  018F  2992               	goto	u1200
  4370  0190  3001               	movlw	1
  4371  0191  2993               	goto	u1210
  4372  0192                     u1200:	
  4373  0192  3000               	movlw	0
  4374  0193                     u1210:	
  4375  0193  3181  2154  3181   	fcall	_TransmitBit
  4376                           
  4377                           ;main.c: 68:  }
  4378  0196  30FF               	movlw	255
  4379  0197  07F4               	addwf	TransmitByte@i,f
  4380  0198  30FF               	movlw	255
  4381  0199  3DF5               	addwfc	TransmitByte@i+1,f
  4382  019A  1BF5               	btfsc	TransmitByte@i+1,7
  4383  019B  0008               	return
  4384  019C  2987               	goto	l1408
  4385  019D                     __end_of_TransmitByte:	
  4386                           
  4387                           	psect	text15
  4388  0154                     __ptext15:	
  4389 ;; *************** function _TransmitBit *****************
  4390 ;; Defined at:
  4391 ;;		line 47 in file "main.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  b               1    wreg     _Bool 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  b               1    1[COMMON] _Bool 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;Total ram usage:        2 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_TransmitByte
  4415 ;;		_main
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           
  4420                           ;psect for function _TransmitBit
  4421  0154                     _TransmitBit:	
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _TransmitBit: [wreg+status,2+status,0]
  4425                           ;TransmitBit@b stored from wreg
  4426  0154  00F1               	movwf	TransmitBit@b
  4427                           
  4428                           ;main.c: 47: void TransmitBit(_Bool b);main.c: 48: {;main.c: 49:  if (b)
  4429  0155  0871               	movf	TransmitBit@b,w
  4430  0156  1903               	btfsc	3,2
  4431  0157  295B               	goto	l96
  4432                           
  4433                           ;main.c: 50:  {;main.c: 52:   do { LATAbits.LATA4 = 1; } while(0);
  4434  0158  0022               	movlb	2	; select bank2
  4435  0159  160C               	bsf	12,4	;volatile
  4436  015A  295D               	goto	l1330
  4437  015B                     l96:	
  4438                           ;main.c: 55:  {;main.c: 57:   do { LATAbits.LATA4 = 0; } while(0);
  4439                           
  4440  015B  0022               	movlb	2	; select bank2
  4441  015C  120C               	bcf	12,4	;volatile
  4442  015D                     l1330:	
  4443                           
  4444                           ;main.c: 59:  _delay((unsigned long)((BAUD_DELAY)*(4000000/4000.0)));
  4445  015D  301A               	movlw	26
  4446  015E  00F0               	movwf	??_TransmitBit
  4447  015F  30F8               	movlw	248
  4448  0160                     u1657:	
  4449  0160  0B89               	decfsz	9,f
  4450  0161  2960               	goto	u1657
  4451  0162  0BF0               	decfsz	??_TransmitBit,f
  4452  0163  2960               	goto	u1657
  4453  0164  3200               	nop2
  4454                           
  4455                           ;main.c: 60:  transmission_time += BAUD_DELAY;
  4456  0165  3014               	movlw	20
  4457  0166  0021               	movlb	1	; select bank1
  4458  0167  07DC               	addwf	_transmission_time^(0+128),f
  4459  0168  3000               	movlw	0
  4460  0169  3DDD               	addwfc	(_transmission_time+1)^(0+128),f
  4461  016A  0008               	return
  4462  016B                     __end_of_TransmitBit:	
  4463                           
  4464                           	psect	text16
  4465  012A                     __ptext16:	
  4466 ;; *************** function _SYSTEM_Initialize *****************
  4467 ;; Defined at:
  4468 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;		None
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;		None
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      void 
  4475 ;; Registers used:
  4476 ;;		wreg, status,2, status,0, pclath, cstack
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4486 ;;Total ram usage:        0 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    1
  4489 ;; This function calls:
  4490 ;;		_OSCILLATOR_Initialize
  4491 ;;		_PIN_MANAGER_Initialize
  4492 ;; This function is called by:
  4493 ;;		_main
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           
  4498                           ;psect for function _SYSTEM_Initialize
  4499  012A                     _SYSTEM_Initialize:	
  4500                           
  4501                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
  4502                           
  4503                           ;incstack = 0
  4504                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4505  012A  3181  21C0  3181   	fcall	_PIN_MANAGER_Initialize
  4506                           
  4507                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
  4508  012D  3181  2136         	fcall	_OSCILLATOR_Initialize
  4509  012F  0008               	return
  4510  0130                     __end_of_SYSTEM_Initialize:	
  4511                           
  4512                           	psect	text17
  4513  01C0                     __ptext17:	
  4514 ;; *************** function _PIN_MANAGER_Initialize *****************
  4515 ;; Defined at:
  4516 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;		None
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  1    wreg      void 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;Total ram usage:        0 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_SYSTEM_Initialize
  4540 ;;		_main
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           
  4545                           ;psect for function _PIN_MANAGER_Initialize
  4546  01C0                     _PIN_MANAGER_Initialize:	
  4547                           
  4548                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4552  01C0  0022               	movlb	2	; select bank2
  4553  01C1  018C               	clrf	12	;volatile
  4554                           
  4555                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
  4556  01C2  018D               	clrf	13	;volatile
  4557                           
  4558                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
  4559  01C3  018E               	clrf	14	;volatile
  4560                           
  4561                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x27;
  4562  01C4  3027               	movlw	39
  4563  01C5  0021               	movlb	1	; select bank1
  4564  01C6  008C               	movwf	12	;volatile
  4565                           
  4566                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xF0;
  4567  01C7  30F0               	movlw	240
  4568  01C8  008D               	movwf	13	;volatile
  4569                           
  4570                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xFF;
  4571  01C9  30FF               	movlw	255
  4572  01CA  008E               	movwf	14	;volatile
  4573                           
  4574                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0xCF;
  4575  01CB  30CF               	movlw	207
  4576  01CC  0023               	movlb	3	; select bank3
  4577  01CD  008E               	movwf	14	;volatile
  4578                           
  4579                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0xF0;
  4580  01CE  30F0               	movlw	240
  4581  01CF  008D               	movwf	13	;volatile
  4582                           
  4583                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x07;
  4584  01D0  3007               	movlw	7
  4585  01D1  008C               	movwf	12	;volatile
  4586                           
  4587                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  4588  01D2  0024               	movlb	4	; select bank4
  4589  01D3  018D               	clrf	13	;volatile
  4590                           
  4591                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
  4592  01D4  018C               	clrf	12	;volatile
  4593                           
  4594                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
  4595  01D5  018E               	clrf	14	;volatile
  4596                           
  4597                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 1;
  4598  01D6  0021               	movlb	1	; select bank1
  4599  01D7  1795               	bsf	21,7	;volatile
  4600                           
  4601                           ;mcc_generated_files/pin_manager.c: 91:     ODCONA = 0x00;
  4602  01D8  0025               	movlb	5	; select bank5
  4603  01D9  018C               	clrf	12	;volatile
  4604                           
  4605                           ;mcc_generated_files/pin_manager.c: 92:     ODCONB = 0x00;
  4606  01DA  018D               	clrf	13	;volatile
  4607                           
  4608                           ;mcc_generated_files/pin_manager.c: 93:     ODCONC = 0x00;
  4609  01DB  018E               	clrf	14	;volatile
  4610                           
  4611                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONA = 0x37;
  4612  01DC  3037               	movlw	55
  4613  01DD  0026               	movlb	6	; select bank6
  4614  01DE  008C               	movwf	12	;volatile
  4615                           
  4616                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONB = 0xF0;
  4617  01DF  30F0               	movlw	240
  4618  01E0  008D               	movwf	13	;volatile
  4619                           
  4620                           ;mcc_generated_files/pin_manager.c: 100:     SLRCONC = 0xFF;
  4621  01E1  30FF               	movlw	255
  4622  01E2  008E               	movwf	14	;volatile
  4623  01E3  0008               	return
  4624  01E4                     __end_of_PIN_MANAGER_Initialize:	
  4625                           
  4626                           	psect	text18
  4627  0136                     __ptext18:	
  4628 ;; *************** function _OSCILLATOR_Initialize *****************
  4629 ;; Defined at:
  4630 ;;		line 56 in file "mcc_generated_files/mcc.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;		None
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;		None
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, status,2
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;Total ram usage:        0 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; This function calls:
  4651 ;;		Nothing
  4652 ;; This function is called by:
  4653 ;;		_SYSTEM_Initialize
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           
  4658                           ;psect for function _OSCILLATOR_Initialize
  4659  0136                     _OSCILLATOR_Initialize:	
  4660                           
  4661                           ;mcc_generated_files/mcc.c: 59:     OSCCON = 0x68;
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4665  0136  3068               	movlw	104
  4666  0137  0021               	movlb	1	; select bank1
  4667  0138  0099               	movwf	25	;volatile
  4668                           
  4669                           ;mcc_generated_files/mcc.c: 61:     OSCTUNE = 0x00;
  4670  0139  0198               	clrf	24	;volatile
  4671                           
  4672                           ;mcc_generated_files/mcc.c: 63:     BORCON = 0x00;
  4673  013A  0022               	movlb	2	; select bank2
  4674  013B  0196               	clrf	22	;volatile
  4675  013C  0008               	return
  4676  013D                     __end_of_OSCILLATOR_Initialize:	
  4677                           
  4678                           	psect	text19
  4679  02A7                     __ptext19:	
  4680 ;; *************** function _AppendCRC *****************
  4681 ;; Defined at:
  4682 ;;		line 83 in file "main.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;  data            1    wreg     PTR unsigned char 
  4685 ;;		 -> main@message(43), 
  4686 ;;  crc             2    9[COMMON] unsigned short 
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;  data            1   11[BANK0 ] PTR unsigned char 
  4689 ;;		 -> main@message(43), 
  4690 ;;  len             2   12[BANK0 ] int 
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4700 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4703 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;Total ram usage:        7 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    1
  4707 ;; This function calls:
  4708 ;;		_strlen
  4709 ;; This function is called by:
  4710 ;;		_main
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           
  4715                           ;psect for function _AppendCRC
  4716  02A7                     _AppendCRC:	
  4717                           
  4718                           ;incstack = 0
  4719                           ; Regs used in _AppendCRC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4720                           ;AppendCRC@data stored from wreg
  4721  02A7  0020               	movlb	0	; select bank0
  4722  02A8  00AB               	movwf	AppendCRC@data
  4723                           
  4724                           ;main.c: 83: void AppendCRC(char* data, unsigned short crc);main.c: 84: {;main.c: 85:  i
      +                          nt len = strlen(data);
  4725  02A9  082B               	movf	AppendCRC@data,w
  4726  02AA  00F0               	movwf	strlen@s
  4727  02AB  3000               	movlw	0
  4728  02AC  00F1               	movwf	strlen@s+1
  4729  02AD  3181  213D  3182   	fcall	_strlen
  4730  02B0  0871               	movf	?_strlen+1,w
  4731  02B1  0020               	movlb	0	; select bank0
  4732  02B2  00AD               	movwf	AppendCRC@len+1
  4733  02B3  0870               	movf	?_strlen,w
  4734  02B4  00AC               	movwf	AppendCRC@len
  4735                           
  4736                           ;main.c: 86:  if (len >= 40 - 1)
  4737  02B5  082D               	movf	AppendCRC@len+1,w
  4738  02B6  3A80               	xorlw	128
  4739  02B7  00FB               	movwf	??_AppendCRC
  4740  02B8  3080               	movlw	128
  4741  02B9  027B               	subwf	??_AppendCRC,w
  4742  02BA  1D03               	skipz
  4743  02BB  2ABE               	goto	u1625
  4744  02BC  3027               	movlw	39
  4745  02BD  022C               	subwf	AppendCRC@len,w
  4746  02BE                     u1625:	
  4747  02BE  1C03               	skipc
  4748  02BF  2AC5               	goto	l1714
  4749                           
  4750                           ;main.c: 87:  {;main.c: 89:   len = 40 - 2;
  4751  02C0  3026               	movlw	38
  4752  02C1  0020               	movlb	0	; select bank0
  4753  02C2  00AC               	movwf	AppendCRC@len
  4754  02C3  3000               	movlw	0
  4755  02C4  00AD               	movwf	AppendCRC@len+1
  4756  02C5                     l1714:	
  4757                           
  4758                           ;main.c: 91:  data[len] = (char)(crc >> 8);
  4759  02C5  087A               	movf	AppendCRC@crc+1,w
  4760  02C6  00FB               	movwf	??_AppendCRC
  4761  02C7  0020               	movlb	0	; select bank0
  4762  02C8  082C               	movf	AppendCRC@len,w
  4763  02C9  072B               	addwf	AppendCRC@data,w
  4764  02CA  00FC               	movwf	??_AppendCRC+1
  4765  02CB  087C               	movf	??_AppendCRC+1,w
  4766  02CC  0086               	movwf	6
  4767  02CD  0187               	clrf	7
  4768  02CE  087B               	movf	??_AppendCRC,w
  4769  02CF  0081               	movwf	1
  4770                           
  4771                           ;main.c: 92:  data[len + 1] = (char)(crc);
  4772  02D0  0879               	movf	AppendCRC@crc,w
  4773  02D1  00FB               	movwf	??_AppendCRC
  4774  02D2  082C               	movf	AppendCRC@len,w
  4775  02D3  072B               	addwf	AppendCRC@data,w
  4776  02D4  00FC               	movwf	??_AppendCRC+1
  4777  02D5  0A7C               	incf	??_AppendCRC+1,w
  4778  02D6  0086               	movwf	6
  4779  02D7  0187               	clrf	7
  4780  02D8  087B               	movf	??_AppendCRC,w
  4781  02D9  0081               	movwf	1
  4782                           
  4783                           ;main.c: 93:  data[len + 2] = '\n';
  4784  02DA  300A               	movlw	10
  4785  02DB  00FB               	movwf	??_AppendCRC
  4786  02DC  082C               	movf	AppendCRC@len,w
  4787  02DD  072B               	addwf	AppendCRC@data,w
  4788  02DE  00FC               	movwf	??_AppendCRC+1
  4789  02DF  087C               	movf	??_AppendCRC+1,w
  4790  02E0  3E02               	addlw	2
  4791  02E1  0086               	movwf	6
  4792  02E2  0187               	clrf	7
  4793  02E3  087B               	movf	??_AppendCRC,w
  4794  02E4  0081               	movwf	1
  4795                           
  4796                           ;main.c: 94:  data[len + 3] = '\0';
  4797  02E5  082C               	movf	AppendCRC@len,w
  4798  02E6  072B               	addwf	AppendCRC@data,w
  4799  02E7  00FB               	movwf	??_AppendCRC
  4800  02E8  087B               	movf	??_AppendCRC,w
  4801  02E9  3E03               	addlw	3
  4802  02EA  0086               	movwf	6
  4803  02EB  0187               	clrf	7
  4804  02EC  0181               	clrf	1
  4805  02ED  0008               	return
  4806  02EE                     __end_of_AppendCRC:	
  4807                           
  4808                           	psect	text20
  4809  013D                     __ptext20:	
  4810 ;; *************** function _strlen *****************
  4811 ;; Defined at:
  4812 ;;		line 12 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strlen.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  s               2    0[COMMON] PTR const unsigned char 
  4815 ;;		 -> dbuf(32), main@message(43), 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  a               2    2[COMMON] PTR const unsigned char 
  4818 ;;		 -> dbuf(32), main@message(43), 
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  2    0[COMMON] unsigned int 
  4821 ;; Registers used:
  4822 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4828 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;Total ram usage:        4 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		_crc16
  4838 ;;		_TransmitString
  4839 ;;		_AppendCRC
  4840 ;;		_pad
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function _strlen
  4846  013D                     _strlen:	
  4847                           
  4848                           ;incstack = 0
  4849                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  4850  013D  0871               	movf	strlen@s+1,w
  4851  013E  00F3               	movwf	strlen@a+1
  4852  013F  0870               	movf	strlen@s,w
  4853  0140  00F2               	movwf	strlen@a
  4854  0141                     l1524:	
  4855  0141  0870               	movf	strlen@s,w
  4856  0142  0086               	movwf	6
  4857  0143  0871               	movf	strlen@s+1,w
  4858  0144  0087               	movwf	7
  4859  0145  0801               	movf	1,w
  4860  0146  1903               	btfsc	3,2
  4861  0147  294D               	goto	l1526
  4862  0148  3001               	movlw	1
  4863  0149  07F0               	addwf	strlen@s,f
  4864  014A  3000               	movlw	0
  4865  014B  3DF1               	addwfc	strlen@s+1,f
  4866  014C  2941               	goto	l1524
  4867  014D                     l1526:	
  4868  014D  0872               	movf	strlen@a,w
  4869  014E  0270               	subwf	strlen@s,w
  4870  014F  00F0               	movwf	?_strlen
  4871  0150  0873               	movf	strlen@a+1,w
  4872  0151  3B71               	subwfb	strlen@s+1,w
  4873  0152  00F1               	movwf	?_strlen+1
  4874  0153  0008               	return
  4875  0154                     __end_of_strlen:	
  4876  007E                     btemp	set	126	;btemp
  4877  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    4
    Data        0
    BSS         42
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      79
    BANK1            80     56      62
    BANK2            80      0      32
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 43
		 -> dbuf(BANK2[32]), main@message(BANK1[43]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 43
		 -> dbuf(BANK2[32]), main@message(BANK1[43]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_1(CODE[31]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    S549_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_1(CODE[31]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 31
		 -> STR_1(CODE[31]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    AppendCRC@data	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    TransmitString@message	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    crc16@message	PTR const unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 


Critical Paths under _main in COMMON

    _main->_sprintf
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _crc16->_strlen
    _TransmitString->_TransmitByte
    _TransmitByte->_TransmitBit
    _AppendCRC->_crc16

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _dtoa->___aomod
    _pad->_fputs
    _abs->___aomod
    _AppendCRC->_crc16

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                48    48      0    9841
                                             74 BANK0      1     1      0
                                              9 BANK1     47    47      0
                          _AppendCRC
             _PIN_MANAGER_Initialize
                  _SYSTEM_Initialize
                        _TransmitBit
                     _TransmitString
                              _crc16
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             14    10      4    7084
                                             13 COMMON     1     1      0
                                             70 BANK0      4     0      4
                                              0 BANK1      9     9      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    6652
                                             62 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    6233
                                             46 BANK0     16    14      2
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                30    22      8    4715
                                             16 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2882
                                             12 COMMON     1     1      0
                                              4 BANK0      8     5      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1149
                                              8 COMMON     4     3      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     834
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              3 COMMON     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             19     3     16     448
                                              0 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             27    11     16     452
                                              0 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (1) _crc16                                               16    14      2     985
                                              4 COMMON     5     3      2
                                              0 BANK0     11    11      0
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _TransmitString                                       6     6      0     642
                                              6 COMMON     6     6      0
                       _TransmitByte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _TransmitByte                                         4     4      0     112
                                              2 COMMON     4     4      0
                        _TransmitBit
 ---------------------------------------------------------------------------------
 (3) _TransmitBit                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AppendCRC                                            7     5      2     834
                                              9 COMMON     4     2      2
                                             11 BANK0      3     3      0
                              _crc16 (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     330
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AppendCRC
     _crc16 (ARG)
       _strlen
     _strlen (ARG)
   _PIN_MANAGER_Initialize
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _TransmitBit
   _TransmitString
     _TransmitByte
       _TransmitBit
     _strlen
   _crc16
     _strlen
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     38      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      20       9       40.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BB      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BB      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 29 22:28:05 2019

                    __CFG_CP$OFF 0000                               l81 03B9                               l83 03D9  
                             l96 015B                      __CFG_LVP$ON 0000                              l214 0304  
                            l222 06EA                              l231 07AE                              l223 06F1  
                            l217 0324                              l227 0707                              l228 0719  
                            l363 0692                              l376 059F                              u810 060D  
                            u845 0652                              u765 0174                              u695 028C  
                            u945 0560                              _abs 016B                              _pad 02EE  
                crc16@polynomial 0074                     __CFG_BORV$LO 0000                              wreg 0009  
                   __CFG_IESO$ON 0000                     __CFG_ZCD$OFF 0000                             ?_abs 0073  
                           l1212 0602                             l1214 0606                             l1224 061D  
                           l1208 05DB                             l1152 028E                             l1330 015D  
                           l1234 0665                             l1226 062C                             l1250 0526  
                           l1236 0671                             l1260 0542                             l1148 026B  
                           l1246 04FF                             l1174 01E8                             l1408 0187  
                           l1264 0572                             l1258 0533                             l1266 057E  
                           l1602 07CB                             l1524 0141                             l1526 014D  
                           l1534 02FA                             l1606 07D8                             l1630 0480  
                           l1622 0446                             l1544 0306                             l1640 04A7  
                           l1714 02C5                             l1706 0218                             l1538 0302  
                           l1570 0715                             l1548 032F                             l1564 0702  
                           l1636 04A1                             l1660 023C                             l1574 0745  
                           l1646 04B2                             l1662 0259                             l1584 0720  
                           l1592 07BA                             l1690 03E8                             l1674 03AA  
                           l1754 0378                             l1738 0347                             l1596 07C1  
                           l1694 0400                             ?_pad 0024                             STR_1 0802  
                           u1200 0192                             u1210 0193                             _LATA 010C  
                           _LATB 010D                             u1415 06FA                             _LATC 010E  
                           u1360 06C0                             u1345 0310                             u1194 018C  
                           u1370 06C1                             u1195 018B                             u1605 03BF  
                           u1445 07B8                             u1615 0222                             u1625 02BE  
                           u1465 0734                             u1475 0740                             u1635 0390  
                           u1647 037C                             u1657 0160                             _WPUA 020C  
                           _WPUB 020D                             _WPUC 020E                      main@message 00A9  
                   __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000                             abs@a 0073  
                           _dbuf 0120                             _main 033E                             _dtoa 06A4  
                           _prec 006B                     TransmitBit@b 0071                             _nout 00D8  
                           pad@i 0027                             pad@p 0025                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             pad@w 0029  
                           btemp 007E                    __CFG_BOREN$ON 0000                             start 0002  
                  __CFG_MCLRE$ON 0000                            ??_abs 0075                            ??_pad 007C  
 __size_of_OSCILLATOR_Initialize 0007    __end_of_OSCILLATOR_Initialize 013D                  __end_of___aodiv 06A4  
                          ?_main 0070                            ?_dtoa 0030                  __end_of___aomod 05B1  
                  __CFG_WDTE$OFF 0000                     vfpfcnvrt@fmt 004E                            _TRISA 008C  
                          _TRISB 008D                            _TRISC 008E                            u78lld 05D9  
                          u89lld 04FD                            _crc16 0396                            _flags 006D  
                          _fputc 0262                            _fputs 01E4                            pad@fp 002B  
                          _width 00DA                            _putch 0129                            main@i 00D6  
                          dtoa@d 0030                            dtoa@i 004C                            dtoa@n 0044  
                          dtoa@p 003E                            dtoa@s 0042                            dtoa@w 0040  
                  TransmitByte@i 0074                            status 0003                            wtemp0 007E  
                __end_of_sprintf 01C0                  __initialization 07EA                     __end_of_main 0396  
                   __end_of_dtoa 07EA                   __CFG_LPBOR$OFF 0000                           ??_main 006A  
                         ??_dtoa 0038               __size_of_AppendCRC 0047                   __CFG_PLLEN$OFF 0000  
                         ?_crc16 0074                           ?_fputc 0070                           ?_fputs 0078  
                         _ANSELA 018C                           ?_putch 0070                           _ANSELB 018D  
                         _ANSELC 018E                           _BORCON 0116                           _ODCONA 028C  
                         _ODCONB 028D                           _ODCONC 028E                           _OSCCON 0099  
                 __CFG_PWRTE$OFF 0000                     vfprintf@cfmt 0064                        ??___aodiv 0070  
                      ??___aomod 0070                           crc16@i 0024                   __CFG_STVREN$ON 0000  
                         pad@buf 0024                           main@id 00D4                           dtoa@fp 003B  
                         _strlen 013D               __end_of_BAUD_DELAY 0802                           fputc@c 0070  
                         fputs@c 0020                           fputs@i 0021                           fputs@s 0023  
               ??_TransmitString 0076                           putch@c 0070                 __end_of_vfprintf 0262  
                      ??_sprintf 007D                     crc16@message 0028                _SYSTEM_Initialize 012A  
        __end_of__initialization 07FD               ?_SYSTEM_Initialize 0070                __end_of_AppendCRC 02EE  
                 __pcstackCOMMON 0070                    __end_of_crc16 0405              ??_SYSTEM_Initialize 0070  
                  __end_of_fputc 02A7                    __end_of_fputs 020A                    ??_TransmitBit 0070  
                  __end_of_putch 012A                   _OPTION_REGbits 0095                       crc16@i_139 0026  
                        ??_crc16 0076                          ??_fputc 0073        __end_of_SYSTEM_Initialize 0130  
                        ??_fputs 0079                          ??_putch 0070                       __pbssBANK0 006B  
                     __pbssBANK1 00D8                       __pbssBANK2 0120                       __pmaintext 033E  
                __CFG_PPS1WAY$ON 0000                          ?_strlen 0070                  __CFG_WDTCCS$SWC 0000  
            __end_of_TransmitBit 016B               __size_of_vfpfcnvrt 00D0                          _OSCTUNE 0098  
                        _SLRCONA 030C                          _SLRCONB 030D                          _SLRCONC 030E  
                        ___aodiv 05B1                          ___aomod 04D5                        ?_vfprintf 005E  
                        __ptext1 019D                          __ptext2 0233                          __ptext3 0405  
                        __ptext4 06A4                          __ptext5 02EE                          __ptext6 01E4  
                        __ptext7 0262                          __ptext8 0129                          __ptext9 016B  
                __size_of_strlen 0017            _OSCILLATOR_Initialize 0136                     __size_of_abs 0017  
                   __size_of_pad 0050         ??_PIN_MANAGER_Initialize 0070       __size_of_SYSTEM_Initialize 0006  
                        _sprintf 019D                          clrloop0 0131             end_of_initialization 07FD  
                        fputc@fp 0072                          fputs@fp 0078                __end_of_vfpfcnvrt 04D5  
                     ??_vfprintf 0061                      _TransmitBit 0154                          strlen@a 0072  
                        strlen@s 0070                  TransmitString@i 007A                    ?_TransmitByte 0070  
               __CFG_FOSC$INTOSC 0000            TransmitString@message 0079                        _AppendCRC 02A7  
                    vfpfcnvrt@ap 004F                      vfpfcnvrt@fp 005D                      vfpfcnvrt@ll 0055  
                  AppendCRC@data 002B           ?_OSCILLATOR_Initialize 0070                   ??_TransmitByte 0072  
                 __end_of_strlen 0154              start_initialization 07EA  __size_of_PIN_MANAGER_Initialize 0024  
                    __end_of_abs 0182                      __end_of_pad 033E                _transmission_time 00DC  
                    vfprintf@fmt 005E                       ?_AppendCRC 0079                      crc16@counti 0021  
                       ??_strlen 0072                        ___latbits 0002                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                 ___aodiv@dividend 0028                        crc16@byte 0023  
        __size_of_TransmitString 0029           _PIN_MANAGER_Initialize 01C0                         ?___aodiv 0020  
                       ?___aomod 0020                 ___aodiv@quotient 0073                __size_of_vfprintf 002F  
                 __size_of_crc16 006F                         ?_sprintf 0066                   __size_of_fputc 0045  
                 __size_of_fputs 0026                   crc16@FRONT_BIT 0821                   __size_of_putch 0001  
                       _LATAbits 010C                        clear_ram0 0130             __end_of_TransmitByte 019D  
           __CFG_WDTCPS$WDTCPS1F 0000                      ??_AppendCRC 007B                     ?_TransmitBit 0070  
                      _vfpfcnvrt 0405             TransmitString@counti 0077           __end_ofcrc16@FRONT_BIT 0823  
                   AppendCRC@crc 0079                     AppendCRC@len 002C                       _BAUD_DELAY 0800  
                     vfprintf@ap 0060                       vfprintf@fp 0063          ??_OSCILLATOR_Initialize 0070  
               __size_of___aodiv 00F3                 __size_of___aomod 00DC                       ?_vfpfcnvrt 004E  
                ___aodiv@divisor 0020                  ___aodiv@counter 0071                       sprintf@fmt 0066  
                       crc16@crc 0029                         _dtoa$250 003C                         __ptext10 04D5  
                       __ptext11 05B1                         __ptext20 013D                         __ptext12 0396  
                       __ptext13 020A                         __ptext14 0182                         __ptext15 0154  
                       __ptext16 012A                         __ptext17 01C0                         __ptext18 0136  
                       __ptext19 02A7                 __size_of_sprintf 0023                   _TransmitString 020A  
                  __size_of_main 0058                    __size_of_dtoa 0146             __CFG_WDTCWS$WDTCWSSW 0000  
                       _vfprintf 0233                 ___aomod@dividend 0028           __end_of_TransmitString 0233  
          __size_of_TransmitByte 001B                        sprintf@ap 00A2                 TransmitByte@byte 0073  
        ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000                  ___aomod@divisor 0020  
                    ??_vfpfcnvrt 0050                  ___aomod@counter 0071                    __pstringtext1 0821  
                  __pstringtext2 0800                    __pstringtext3 0000             __size_of_TransmitBit 0017  
                       sprintf@f 00A4                         sprintf@s 00A3                     _TransmitByte 0182  
                   ___aodiv@sign 0072                  ?_TransmitString 0070   __end_of_PIN_MANAGER_Initialize 01E4  
                   ___aomod@sign 0072  
