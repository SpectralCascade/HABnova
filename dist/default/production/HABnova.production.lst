

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Jun 09 23:34:32 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 2.05
    41                           ; Generated 20/12/2018 GMT
    42                           ; 
    43                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F1619 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  008C                     	;# 
   109  008D                     	;# 
   110  008E                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0094                     	;# 
   116  0095                     	;# 
   117  0096                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  0111                     	;# 
   131  0112                     	;# 
   132  0113                     	;# 
   133  0114                     	;# 
   134  0115                     	;# 
   135  0116                     	;# 
   136  0117                     	;# 
   137  0118                     	;# 
   138  0119                     	;# 
   139  011C                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0194                     	;# 
   149  0195                     	;# 
   150  0196                     	;# 
   151  0197                     	;# 
   152  0199                     	;# 
   153  0199                     	;# 
   154  0199                     	;# 
   155  019A                     	;# 
   156  019A                     	;# 
   157  019A                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019C                     	;# 
   164  019C                     	;# 
   165  019C                     	;# 
   166  019D                     	;# 
   167  019D                     	;# 
   168  019D                     	;# 
   169  019E                     	;# 
   170  019E                     	;# 
   171  019E                     	;# 
   172  019F                     	;# 
   173  019F                     	;# 
   174  019F                     	;# 
   175  019F                     	;# 
   176  019F                     	;# 
   177  020C                     	;# 
   178  020D                     	;# 
   179  020E                     	;# 
   180  0211                     	;# 
   181  0211                     	;# 
   182  0212                     	;# 
   183  0212                     	;# 
   184  0213                     	;# 
   185  0213                     	;# 
   186  0214                     	;# 
   187  0214                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0216                     	;# 
   194  0217                     	;# 
   195  0217                     	;# 
   196  028C                     	;# 
   197  028D                     	;# 
   198  028E                     	;# 
   199  0291                     	;# 
   200  0291                     	;# 
   201  0292                     	;# 
   202  0293                     	;# 
   203  0294                     	;# 
   204  0298                     	;# 
   205  0298                     	;# 
   206  0299                     	;# 
   207  029A                     	;# 
   208  029B                     	;# 
   209  029E                     	;# 
   210  030C                     	;# 
   211  030D                     	;# 
   212  030E                     	;# 
   213  038C                     	;# 
   214  038D                     	;# 
   215  038E                     	;# 
   216  0391                     	;# 
   217  0392                     	;# 
   218  0393                     	;# 
   219  0394                     	;# 
   220  0395                     	;# 
   221  0396                     	;# 
   222  0397                     	;# 
   223  0398                     	;# 
   224  0399                     	;# 
   225  040E                     	;# 
   226  0413                     	;# 
   227  0413                     	;# 
   228  0414                     	;# 
   229  0414                     	;# 
   230  0415                     	;# 
   231  0416                     	;# 
   232  0417                     	;# 
   233  0418                     	;# 
   234  041A                     	;# 
   235  041A                     	;# 
   236  041B                     	;# 
   237  041B                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  041F                     	;# 
   242  0493                     	;# 
   243  0494                     	;# 
   244  0495                     	;# 
   245  0496                     	;# 
   246  049A                     	;# 
   247  049B                     	;# 
   248  049C                     	;# 
   249  049D                     	;# 
   250  058C                     	;# 
   251  058C                     	;# 
   252  058D                     	;# 
   253  058E                     	;# 
   254  058E                     	;# 
   255  058F                     	;# 
   256  0590                     	;# 
   257  0590                     	;# 
   258  0591                     	;# 
   259  0592                     	;# 
   260  0592                     	;# 
   261  0593                     	;# 
   262  0594                     	;# 
   263  0594                     	;# 
   264  0595                     	;# 
   265  0596                     	;# 
   266  0596                     	;# 
   267  0597                     	;# 
   268  0598                     	;# 
   269  0599                     	;# 
   270  059A                     	;# 
   271  059B                     	;# 
   272  059B                     	;# 
   273  059C                     	;# 
   274  059D                     	;# 
   275  060C                     	;# 
   276  060C                     	;# 
   277  060D                     	;# 
   278  060E                     	;# 
   279  060F                     	;# 
   280  060F                     	;# 
   281  0610                     	;# 
   282  0611                     	;# 
   283  0612                     	;# 
   284  0613                     	;# 
   285  0614                     	;# 
   286  0617                     	;# 
   287  0617                     	;# 
   288  0618                     	;# 
   289  0619                     	;# 
   290  061A                     	;# 
   291  061A                     	;# 
   292  061B                     	;# 
   293  061C                     	;# 
   294  0691                     	;# 
   295  0692                     	;# 
   296  0693                     	;# 
   297  0694                     	;# 
   298  0695                     	;# 
   299  0696                     	;# 
   300  0697                     	;# 
   301  0699                     	;# 
   302  069A                     	;# 
   303  0711                     	;# 
   304  0712                     	;# 
   305  0713                     	;# 
   306  0714                     	;# 
   307  0715                     	;# 
   308  0718                     	;# 
   309  0718                     	;# 
   310  0719                     	;# 
   311  071A                     	;# 
   312  071A                     	;# 
   313  071B                     	;# 
   314  071C                     	;# 
   315  071D                     	;# 
   316  0791                     	;# 
   317  0791                     	;# 
   318  0792                     	;# 
   319  0793                     	;# 
   320  0793                     	;# 
   321  0794                     	;# 
   322  0795                     	;# 
   323  0795                     	;# 
   324  0796                     	;# 
   325  0797                     	;# 
   326  0797                     	;# 
   327  0798                     	;# 
   328  0799                     	;# 
   329  079A                     	;# 
   330  080C                     	;# 
   331  080C                     	;# 
   332  080D                     	;# 
   333  080E                     	;# 
   334  080E                     	;# 
   335  080F                     	;# 
   336  0810                     	;# 
   337  0810                     	;# 
   338  0811                     	;# 
   339  0812                     	;# 
   340  0812                     	;# 
   341  0813                     	;# 
   342  0814                     	;# 
   343  0815                     	;# 
   344  0816                     	;# 
   345  0817                     	;# 
   346  0818                     	;# 
   347  0819                     	;# 
   348  081A                     	;# 
   349  081A                     	;# 
   350  081B                     	;# 
   351  081C                     	;# 
   352  081C                     	;# 
   353  081D                     	;# 
   354  088C                     	;# 
   355  088D                     	;# 
   356  088E                     	;# 
   357  088F                     	;# 
   358  088F                     	;# 
   359  0890                     	;# 
   360  0891                     	;# 
   361  0892                     	;# 
   362  0893                     	;# 
   363  0893                     	;# 
   364  0894                     	;# 
   365  0895                     	;# 
   366  0896                     	;# 
   367  0897                     	;# 
   368  0897                     	;# 
   369  0898                     	;# 
   370  0899                     	;# 
   371  0D8C                     	;# 
   372  0D8C                     	;# 
   373  0D8D                     	;# 
   374  0D8E                     	;# 
   375  0D8F                     	;# 
   376  0D8F                     	;# 
   377  0D90                     	;# 
   378  0D91                     	;# 
   379  0D92                     	;# 
   380  0D92                     	;# 
   381  0D93                     	;# 
   382  0D94                     	;# 
   383  0D95                     	;# 
   384  0D95                     	;# 
   385  0D96                     	;# 
   386  0D97                     	;# 
   387  0D98                     	;# 
   388  0D99                     	;# 
   389  0D9A                     	;# 
   390  0D9B                     	;# 
   391  0D9C                     	;# 
   392  0D9D                     	;# 
   393  0D9E                     	;# 
   394  0D9E                     	;# 
   395  0D9F                     	;# 
   396  0DA0                     	;# 
   397  0DA1                     	;# 
   398  0DA1                     	;# 
   399  0DA2                     	;# 
   400  0DA3                     	;# 
   401  0DA4                     	;# 
   402  0DA4                     	;# 
   403  0DA5                     	;# 
   404  0DA6                     	;# 
   405  0DA7                     	;# 
   406  0DA7                     	;# 
   407  0DA8                     	;# 
   408  0DA9                     	;# 
   409  0DAA                     	;# 
   410  0DAB                     	;# 
   411  0DAC                     	;# 
   412  0DAD                     	;# 
   413  0DAE                     	;# 
   414  0DAF                     	;# 
   415  0E0F                     	;# 
   416  0E10                     	;# 
   417  0E11                     	;# 
   418  0E12                     	;# 
   419  0E13                     	;# 
   420  0E14                     	;# 
   421  0E15                     	;# 
   422  0E16                     	;# 
   423  0E17                     	;# 
   424  0E18                     	;# 
   425  0E19                     	;# 
   426  0E1A                     	;# 
   427  0E1B                     	;# 
   428  0E1C                     	;# 
   429  0E1D                     	;# 
   430  0E1E                     	;# 
   431  0E1F                     	;# 
   432  0E20                     	;# 
   433  0E21                     	;# 
   434  0E22                     	;# 
   435  0E23                     	;# 
   436  0E24                     	;# 
   437  0E25                     	;# 
   438  0E26                     	;# 
   439  0E27                     	;# 
   440  0E28                     	;# 
   441  0E29                     	;# 
   442  0E2A                     	;# 
   443  0E2B                     	;# 
   444  0E2C                     	;# 
   445  0E2D                     	;# 
   446  0E2E                     	;# 
   447  0E90                     	;# 
   448  0E91                     	;# 
   449  0E92                     	;# 
   450  0E94                     	;# 
   451  0E95                     	;# 
   452  0E9C                     	;# 
   453  0E9D                     	;# 
   454  0E9E                     	;# 
   455  0E9F                     	;# 
   456  0EA0                     	;# 
   457  0EA1                     	;# 
   458  0EA2                     	;# 
   459  0EA3                     	;# 
   460  0EA4                     	;# 
   461  0EA5                     	;# 
   462  0EA6                     	;# 
   463  0EA7                     	;# 
   464  0F0F                     	;# 
   465  0F10                     	;# 
   466  0F11                     	;# 
   467  0F12                     	;# 
   468  0F13                     	;# 
   469  0F14                     	;# 
   470  0F15                     	;# 
   471  0F16                     	;# 
   472  0F17                     	;# 
   473  0F18                     	;# 
   474  0F19                     	;# 
   475  0F1A                     	;# 
   476  0F1B                     	;# 
   477  0F1C                     	;# 
   478  0F1D                     	;# 
   479  0F1E                     	;# 
   480  0F1F                     	;# 
   481  0F20                     	;# 
   482  0F21                     	;# 
   483  0F22                     	;# 
   484  0F23                     	;# 
   485  0F24                     	;# 
   486  0F25                     	;# 
   487  0F26                     	;# 
   488  0F27                     	;# 
   489  0F28                     	;# 
   490  0F29                     	;# 
   491  0F2A                     	;# 
   492  0F2B                     	;# 
   493  0F2C                     	;# 
   494  0F2D                     	;# 
   495  0F2E                     	;# 
   496  0F2F                     	;# 
   497  0F30                     	;# 
   498  0F31                     	;# 
   499  0F32                     	;# 
   500  0F33                     	;# 
   501  0F34                     	;# 
   502  0F35                     	;# 
   503  0F36                     	;# 
   504  0F37                     	;# 
   505  0FE4                     	;# 
   506  0FE5                     	;# 
   507  0FE6                     	;# 
   508  0FE7                     	;# 
   509  0FE8                     	;# 
   510  0FE9                     	;# 
   511  0FEA                     	;# 
   512  0FEB                     	;# 
   513  0FED                     	;# 
   514  0FEE                     	;# 
   515  0FEF                     	;# 
   516  0000                     	;# 
   517  0001                     	;# 
   518  0002                     	;# 
   519  0003                     	;# 
   520  0004                     	;# 
   521  0005                     	;# 
   522  0006                     	;# 
   523  0007                     	;# 
   524  0008                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  000E                     	;# 
   531  0010                     	;# 
   532  0011                     	;# 
   533  0012                     	;# 
   534  0013                     	;# 
   535  0014                     	;# 
   536  0015                     	;# 
   537  0016                     	;# 
   538  0016                     	;# 
   539  0017                     	;# 
   540  0018                     	;# 
   541  0019                     	;# 
   542  001A                     	;# 
   543  001A                     	;# 
   544  001B                     	;# 
   545  001B                     	;# 
   546  001C                     	;# 
   547  001D                     	;# 
   548  001E                     	;# 
   549  001F                     	;# 
   550  008C                     	;# 
   551  008D                     	;# 
   552  008E                     	;# 
   553  0090                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0095                     	;# 
   559  0096                     	;# 
   560  0098                     	;# 
   561  0099                     	;# 
   562  009A                     	;# 
   563  009B                     	;# 
   564  009B                     	;# 
   565  009C                     	;# 
   566  009D                     	;# 
   567  009E                     	;# 
   568  009F                     	;# 
   569  010C                     	;# 
   570  010D                     	;# 
   571  010E                     	;# 
   572  0111                     	;# 
   573  0112                     	;# 
   574  0113                     	;# 
   575  0114                     	;# 
   576  0115                     	;# 
   577  0116                     	;# 
   578  0117                     	;# 
   579  0118                     	;# 
   580  0119                     	;# 
   581  011C                     	;# 
   582  018C                     	;# 
   583  018D                     	;# 
   584  018E                     	;# 
   585  0191                     	;# 
   586  0191                     	;# 
   587  0192                     	;# 
   588  0193                     	;# 
   589  0193                     	;# 
   590  0194                     	;# 
   591  0195                     	;# 
   592  0196                     	;# 
   593  0197                     	;# 
   594  0199                     	;# 
   595  0199                     	;# 
   596  0199                     	;# 
   597  019A                     	;# 
   598  019A                     	;# 
   599  019A                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019C                     	;# 
   606  019C                     	;# 
   607  019C                     	;# 
   608  019D                     	;# 
   609  019D                     	;# 
   610  019D                     	;# 
   611  019E                     	;# 
   612  019E                     	;# 
   613  019E                     	;# 
   614  019F                     	;# 
   615  019F                     	;# 
   616  019F                     	;# 
   617  019F                     	;# 
   618  019F                     	;# 
   619  020C                     	;# 
   620  020D                     	;# 
   621  020E                     	;# 
   622  0211                     	;# 
   623  0211                     	;# 
   624  0212                     	;# 
   625  0212                     	;# 
   626  0213                     	;# 
   627  0213                     	;# 
   628  0214                     	;# 
   629  0214                     	;# 
   630  0215                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0215                     	;# 
   634  0216                     	;# 
   635  0216                     	;# 
   636  0217                     	;# 
   637  0217                     	;# 
   638  028C                     	;# 
   639  028D                     	;# 
   640  028E                     	;# 
   641  0291                     	;# 
   642  0291                     	;# 
   643  0292                     	;# 
   644  0293                     	;# 
   645  0294                     	;# 
   646  0298                     	;# 
   647  0298                     	;# 
   648  0299                     	;# 
   649  029A                     	;# 
   650  029B                     	;# 
   651  029E                     	;# 
   652  030C                     	;# 
   653  030D                     	;# 
   654  030E                     	;# 
   655  038C                     	;# 
   656  038D                     	;# 
   657  038E                     	;# 
   658  0391                     	;# 
   659  0392                     	;# 
   660  0393                     	;# 
   661  0394                     	;# 
   662  0395                     	;# 
   663  0396                     	;# 
   664  0397                     	;# 
   665  0398                     	;# 
   666  0399                     	;# 
   667  040E                     	;# 
   668  0413                     	;# 
   669  0413                     	;# 
   670  0414                     	;# 
   671  0414                     	;# 
   672  0415                     	;# 
   673  0416                     	;# 
   674  0417                     	;# 
   675  0418                     	;# 
   676  041A                     	;# 
   677  041A                     	;# 
   678  041B                     	;# 
   679  041B                     	;# 
   680  041C                     	;# 
   681  041D                     	;# 
   682  041E                     	;# 
   683  041F                     	;# 
   684  0493                     	;# 
   685  0494                     	;# 
   686  0495                     	;# 
   687  0496                     	;# 
   688  049A                     	;# 
   689  049B                     	;# 
   690  049C                     	;# 
   691  049D                     	;# 
   692  058C                     	;# 
   693  058C                     	;# 
   694  058D                     	;# 
   695  058E                     	;# 
   696  058E                     	;# 
   697  058F                     	;# 
   698  0590                     	;# 
   699  0590                     	;# 
   700  0591                     	;# 
   701  0592                     	;# 
   702  0592                     	;# 
   703  0593                     	;# 
   704  0594                     	;# 
   705  0594                     	;# 
   706  0595                     	;# 
   707  0596                     	;# 
   708  0596                     	;# 
   709  0597                     	;# 
   710  0598                     	;# 
   711  0599                     	;# 
   712  059A                     	;# 
   713  059B                     	;# 
   714  059B                     	;# 
   715  059C                     	;# 
   716  059D                     	;# 
   717  060C                     	;# 
   718  060C                     	;# 
   719  060D                     	;# 
   720  060E                     	;# 
   721  060F                     	;# 
   722  060F                     	;# 
   723  0610                     	;# 
   724  0611                     	;# 
   725  0612                     	;# 
   726  0613                     	;# 
   727  0614                     	;# 
   728  0617                     	;# 
   729  0617                     	;# 
   730  0618                     	;# 
   731  0619                     	;# 
   732  061A                     	;# 
   733  061A                     	;# 
   734  061B                     	;# 
   735  061C                     	;# 
   736  0691                     	;# 
   737  0692                     	;# 
   738  0693                     	;# 
   739  0694                     	;# 
   740  0695                     	;# 
   741  0696                     	;# 
   742  0697                     	;# 
   743  0699                     	;# 
   744  069A                     	;# 
   745  0711                     	;# 
   746  0712                     	;# 
   747  0713                     	;# 
   748  0714                     	;# 
   749  0715                     	;# 
   750  0718                     	;# 
   751  0718                     	;# 
   752  0719                     	;# 
   753  071A                     	;# 
   754  071A                     	;# 
   755  071B                     	;# 
   756  071C                     	;# 
   757  071D                     	;# 
   758  0791                     	;# 
   759  0791                     	;# 
   760  0792                     	;# 
   761  0793                     	;# 
   762  0793                     	;# 
   763  0794                     	;# 
   764  0795                     	;# 
   765  0795                     	;# 
   766  0796                     	;# 
   767  0797                     	;# 
   768  0797                     	;# 
   769  0798                     	;# 
   770  0799                     	;# 
   771  079A                     	;# 
   772  080C                     	;# 
   773  080C                     	;# 
   774  080D                     	;# 
   775  080E                     	;# 
   776  080E                     	;# 
   777  080F                     	;# 
   778  0810                     	;# 
   779  0810                     	;# 
   780  0811                     	;# 
   781  0812                     	;# 
   782  0812                     	;# 
   783  0813                     	;# 
   784  0814                     	;# 
   785  0815                     	;# 
   786  0816                     	;# 
   787  0817                     	;# 
   788  0818                     	;# 
   789  0819                     	;# 
   790  081A                     	;# 
   791  081A                     	;# 
   792  081B                     	;# 
   793  081C                     	;# 
   794  081C                     	;# 
   795  081D                     	;# 
   796  088C                     	;# 
   797  088D                     	;# 
   798  088E                     	;# 
   799  088F                     	;# 
   800  088F                     	;# 
   801  0890                     	;# 
   802  0891                     	;# 
   803  0892                     	;# 
   804  0893                     	;# 
   805  0893                     	;# 
   806  0894                     	;# 
   807  0895                     	;# 
   808  0896                     	;# 
   809  0897                     	;# 
   810  0897                     	;# 
   811  0898                     	;# 
   812  0899                     	;# 
   813  0D8C                     	;# 
   814  0D8C                     	;# 
   815  0D8D                     	;# 
   816  0D8E                     	;# 
   817  0D8F                     	;# 
   818  0D8F                     	;# 
   819  0D90                     	;# 
   820  0D91                     	;# 
   821  0D92                     	;# 
   822  0D92                     	;# 
   823  0D93                     	;# 
   824  0D94                     	;# 
   825  0D95                     	;# 
   826  0D95                     	;# 
   827  0D96                     	;# 
   828  0D97                     	;# 
   829  0D98                     	;# 
   830  0D99                     	;# 
   831  0D9A                     	;# 
   832  0D9B                     	;# 
   833  0D9C                     	;# 
   834  0D9D                     	;# 
   835  0D9E                     	;# 
   836  0D9E                     	;# 
   837  0D9F                     	;# 
   838  0DA0                     	;# 
   839  0DA1                     	;# 
   840  0DA1                     	;# 
   841  0DA2                     	;# 
   842  0DA3                     	;# 
   843  0DA4                     	;# 
   844  0DA4                     	;# 
   845  0DA5                     	;# 
   846  0DA6                     	;# 
   847  0DA7                     	;# 
   848  0DA7                     	;# 
   849  0DA8                     	;# 
   850  0DA9                     	;# 
   851  0DAA                     	;# 
   852  0DAB                     	;# 
   853  0DAC                     	;# 
   854  0DAD                     	;# 
   855  0DAE                     	;# 
   856  0DAF                     	;# 
   857  0E0F                     	;# 
   858  0E10                     	;# 
   859  0E11                     	;# 
   860  0E12                     	;# 
   861  0E13                     	;# 
   862  0E14                     	;# 
   863  0E15                     	;# 
   864  0E16                     	;# 
   865  0E17                     	;# 
   866  0E18                     	;# 
   867  0E19                     	;# 
   868  0E1A                     	;# 
   869  0E1B                     	;# 
   870  0E1C                     	;# 
   871  0E1D                     	;# 
   872  0E1E                     	;# 
   873  0E1F                     	;# 
   874  0E20                     	;# 
   875  0E21                     	;# 
   876  0E22                     	;# 
   877  0E23                     	;# 
   878  0E24                     	;# 
   879  0E25                     	;# 
   880  0E26                     	;# 
   881  0E27                     	;# 
   882  0E28                     	;# 
   883  0E29                     	;# 
   884  0E2A                     	;# 
   885  0E2B                     	;# 
   886  0E2C                     	;# 
   887  0E2D                     	;# 
   888  0E2E                     	;# 
   889  0E90                     	;# 
   890  0E91                     	;# 
   891  0E92                     	;# 
   892  0E94                     	;# 
   893  0E95                     	;# 
   894  0E9C                     	;# 
   895  0E9D                     	;# 
   896  0E9E                     	;# 
   897  0E9F                     	;# 
   898  0EA0                     	;# 
   899  0EA1                     	;# 
   900  0EA2                     	;# 
   901  0EA3                     	;# 
   902  0EA4                     	;# 
   903  0EA5                     	;# 
   904  0EA6                     	;# 
   905  0EA7                     	;# 
   906  0F0F                     	;# 
   907  0F10                     	;# 
   908  0F11                     	;# 
   909  0F12                     	;# 
   910  0F13                     	;# 
   911  0F14                     	;# 
   912  0F15                     	;# 
   913  0F16                     	;# 
   914  0F17                     	;# 
   915  0F18                     	;# 
   916  0F19                     	;# 
   917  0F1A                     	;# 
   918  0F1B                     	;# 
   919  0F1C                     	;# 
   920  0F1D                     	;# 
   921  0F1E                     	;# 
   922  0F1F                     	;# 
   923  0F20                     	;# 
   924  0F21                     	;# 
   925  0F22                     	;# 
   926  0F23                     	;# 
   927  0F24                     	;# 
   928  0F25                     	;# 
   929  0F26                     	;# 
   930  0F27                     	;# 
   931  0F28                     	;# 
   932  0F29                     	;# 
   933  0F2A                     	;# 
   934  0F2B                     	;# 
   935  0F2C                     	;# 
   936  0F2D                     	;# 
   937  0F2E                     	;# 
   938  0F2F                     	;# 
   939  0F30                     	;# 
   940  0F31                     	;# 
   941  0F32                     	;# 
   942  0F33                     	;# 
   943  0F34                     	;# 
   944  0F35                     	;# 
   945  0F36                     	;# 
   946  0F37                     	;# 
   947  0FE4                     	;# 
   948  0FE5                     	;# 
   949  0FE6                     	;# 
   950  0FE7                     	;# 
   951  0FE8                     	;# 
   952  0FE9                     	;# 
   953  0FEA                     	;# 
   954  0FEB                     	;# 
   955  0FED                     	;# 
   956  0FEE                     	;# 
   957  0FEF                     	;# 
   958  0000                     	;# 
   959  0001                     	;# 
   960  0002                     	;# 
   961  0003                     	;# 
   962  0004                     	;# 
   963  0005                     	;# 
   964  0006                     	;# 
   965  0007                     	;# 
   966  0008                     	;# 
   967  0009                     	;# 
   968  000A                     	;# 
   969  000B                     	;# 
   970  000C                     	;# 
   971  000D                     	;# 
   972  000E                     	;# 
   973  0010                     	;# 
   974  0011                     	;# 
   975  0012                     	;# 
   976  0013                     	;# 
   977  0014                     	;# 
   978  0015                     	;# 
   979  0016                     	;# 
   980  0016                     	;# 
   981  0017                     	;# 
   982  0018                     	;# 
   983  0019                     	;# 
   984  001A                     	;# 
   985  001A                     	;# 
   986  001B                     	;# 
   987  001B                     	;# 
   988  001C                     	;# 
   989  001D                     	;# 
   990  001E                     	;# 
   991  001F                     	;# 
   992  008C                     	;# 
   993  008D                     	;# 
   994  008E                     	;# 
   995  0090                     	;# 
   996  0091                     	;# 
   997  0092                     	;# 
   998  0093                     	;# 
   999  0094                     	;# 
  1000  0095                     	;# 
  1001  0096                     	;# 
  1002  0098                     	;# 
  1003  0099                     	;# 
  1004  009A                     	;# 
  1005  009B                     	;# 
  1006  009B                     	;# 
  1007  009C                     	;# 
  1008  009D                     	;# 
  1009  009E                     	;# 
  1010  009F                     	;# 
  1011  010C                     	;# 
  1012  010D                     	;# 
  1013  010E                     	;# 
  1014  0111                     	;# 
  1015  0112                     	;# 
  1016  0113                     	;# 
  1017  0114                     	;# 
  1018  0115                     	;# 
  1019  0116                     	;# 
  1020  0117                     	;# 
  1021  0118                     	;# 
  1022  0119                     	;# 
  1023  011C                     	;# 
  1024  018C                     	;# 
  1025  018D                     	;# 
  1026  018E                     	;# 
  1027  0191                     	;# 
  1028  0191                     	;# 
  1029  0192                     	;# 
  1030  0193                     	;# 
  1031  0193                     	;# 
  1032  0194                     	;# 
  1033  0195                     	;# 
  1034  0196                     	;# 
  1035  0197                     	;# 
  1036  0199                     	;# 
  1037  0199                     	;# 
  1038  0199                     	;# 
  1039  019A                     	;# 
  1040  019A                     	;# 
  1041  019A                     	;# 
  1042  019B                     	;# 
  1043  019B                     	;# 
  1044  019B                     	;# 
  1045  019B                     	;# 
  1046  019B                     	;# 
  1047  019C                     	;# 
  1048  019C                     	;# 
  1049  019C                     	;# 
  1050  019D                     	;# 
  1051  019D                     	;# 
  1052  019D                     	;# 
  1053  019E                     	;# 
  1054  019E                     	;# 
  1055  019E                     	;# 
  1056  019F                     	;# 
  1057  019F                     	;# 
  1058  019F                     	;# 
  1059  019F                     	;# 
  1060  019F                     	;# 
  1061  020C                     	;# 
  1062  020D                     	;# 
  1063  020E                     	;# 
  1064  0211                     	;# 
  1065  0211                     	;# 
  1066  0212                     	;# 
  1067  0212                     	;# 
  1068  0213                     	;# 
  1069  0213                     	;# 
  1070  0214                     	;# 
  1071  0214                     	;# 
  1072  0215                     	;# 
  1073  0215                     	;# 
  1074  0215                     	;# 
  1075  0215                     	;# 
  1076  0216                     	;# 
  1077  0216                     	;# 
  1078  0217                     	;# 
  1079  0217                     	;# 
  1080  028C                     	;# 
  1081  028D                     	;# 
  1082  028E                     	;# 
  1083  0291                     	;# 
  1084  0291                     	;# 
  1085  0292                     	;# 
  1086  0293                     	;# 
  1087  0294                     	;# 
  1088  0298                     	;# 
  1089  0298                     	;# 
  1090  0299                     	;# 
  1091  029A                     	;# 
  1092  029B                     	;# 
  1093  029E                     	;# 
  1094  030C                     	;# 
  1095  030D                     	;# 
  1096  030E                     	;# 
  1097  038C                     	;# 
  1098  038D                     	;# 
  1099  038E                     	;# 
  1100  0391                     	;# 
  1101  0392                     	;# 
  1102  0393                     	;# 
  1103  0394                     	;# 
  1104  0395                     	;# 
  1105  0396                     	;# 
  1106  0397                     	;# 
  1107  0398                     	;# 
  1108  0399                     	;# 
  1109  040E                     	;# 
  1110  0413                     	;# 
  1111  0413                     	;# 
  1112  0414                     	;# 
  1113  0414                     	;# 
  1114  0415                     	;# 
  1115  0416                     	;# 
  1116  0417                     	;# 
  1117  0418                     	;# 
  1118  041A                     	;# 
  1119  041A                     	;# 
  1120  041B                     	;# 
  1121  041B                     	;# 
  1122  041C                     	;# 
  1123  041D                     	;# 
  1124  041E                     	;# 
  1125  041F                     	;# 
  1126  0493                     	;# 
  1127  0494                     	;# 
  1128  0495                     	;# 
  1129  0496                     	;# 
  1130  049A                     	;# 
  1131  049B                     	;# 
  1132  049C                     	;# 
  1133  049D                     	;# 
  1134  058C                     	;# 
  1135  058C                     	;# 
  1136  058D                     	;# 
  1137  058E                     	;# 
  1138  058E                     	;# 
  1139  058F                     	;# 
  1140  0590                     	;# 
  1141  0590                     	;# 
  1142  0591                     	;# 
  1143  0592                     	;# 
  1144  0592                     	;# 
  1145  0593                     	;# 
  1146  0594                     	;# 
  1147  0594                     	;# 
  1148  0595                     	;# 
  1149  0596                     	;# 
  1150  0596                     	;# 
  1151  0597                     	;# 
  1152  0598                     	;# 
  1153  0599                     	;# 
  1154  059A                     	;# 
  1155  059B                     	;# 
  1156  059B                     	;# 
  1157  059C                     	;# 
  1158  059D                     	;# 
  1159  060C                     	;# 
  1160  060C                     	;# 
  1161  060D                     	;# 
  1162  060E                     	;# 
  1163  060F                     	;# 
  1164  060F                     	;# 
  1165  0610                     	;# 
  1166  0611                     	;# 
  1167  0612                     	;# 
  1168  0613                     	;# 
  1169  0614                     	;# 
  1170  0617                     	;# 
  1171  0617                     	;# 
  1172  0618                     	;# 
  1173  0619                     	;# 
  1174  061A                     	;# 
  1175  061A                     	;# 
  1176  061B                     	;# 
  1177  061C                     	;# 
  1178  0691                     	;# 
  1179  0692                     	;# 
  1180  0693                     	;# 
  1181  0694                     	;# 
  1182  0695                     	;# 
  1183  0696                     	;# 
  1184  0697                     	;# 
  1185  0699                     	;# 
  1186  069A                     	;# 
  1187  0711                     	;# 
  1188  0712                     	;# 
  1189  0713                     	;# 
  1190  0714                     	;# 
  1191  0715                     	;# 
  1192  0718                     	;# 
  1193  0718                     	;# 
  1194  0719                     	;# 
  1195  071A                     	;# 
  1196  071A                     	;# 
  1197  071B                     	;# 
  1198  071C                     	;# 
  1199  071D                     	;# 
  1200  0791                     	;# 
  1201  0791                     	;# 
  1202  0792                     	;# 
  1203  0793                     	;# 
  1204  0793                     	;# 
  1205  0794                     	;# 
  1206  0795                     	;# 
  1207  0795                     	;# 
  1208  0796                     	;# 
  1209  0797                     	;# 
  1210  0797                     	;# 
  1211  0798                     	;# 
  1212  0799                     	;# 
  1213  079A                     	;# 
  1214  080C                     	;# 
  1215  080C                     	;# 
  1216  080D                     	;# 
  1217  080E                     	;# 
  1218  080E                     	;# 
  1219  080F                     	;# 
  1220  0810                     	;# 
  1221  0810                     	;# 
  1222  0811                     	;# 
  1223  0812                     	;# 
  1224  0812                     	;# 
  1225  0813                     	;# 
  1226  0814                     	;# 
  1227  0815                     	;# 
  1228  0816                     	;# 
  1229  0817                     	;# 
  1230  0818                     	;# 
  1231  0819                     	;# 
  1232  081A                     	;# 
  1233  081A                     	;# 
  1234  081B                     	;# 
  1235  081C                     	;# 
  1236  081C                     	;# 
  1237  081D                     	;# 
  1238  088C                     	;# 
  1239  088D                     	;# 
  1240  088E                     	;# 
  1241  088F                     	;# 
  1242  088F                     	;# 
  1243  0890                     	;# 
  1244  0891                     	;# 
  1245  0892                     	;# 
  1246  0893                     	;# 
  1247  0893                     	;# 
  1248  0894                     	;# 
  1249  0895                     	;# 
  1250  0896                     	;# 
  1251  0897                     	;# 
  1252  0897                     	;# 
  1253  0898                     	;# 
  1254  0899                     	;# 
  1255  0D8C                     	;# 
  1256  0D8C                     	;# 
  1257  0D8D                     	;# 
  1258  0D8E                     	;# 
  1259  0D8F                     	;# 
  1260  0D8F                     	;# 
  1261  0D90                     	;# 
  1262  0D91                     	;# 
  1263  0D92                     	;# 
  1264  0D92                     	;# 
  1265  0D93                     	;# 
  1266  0D94                     	;# 
  1267  0D95                     	;# 
  1268  0D95                     	;# 
  1269  0D96                     	;# 
  1270  0D97                     	;# 
  1271  0D98                     	;# 
  1272  0D99                     	;# 
  1273  0D9A                     	;# 
  1274  0D9B                     	;# 
  1275  0D9C                     	;# 
  1276  0D9D                     	;# 
  1277  0D9E                     	;# 
  1278  0D9E                     	;# 
  1279  0D9F                     	;# 
  1280  0DA0                     	;# 
  1281  0DA1                     	;# 
  1282  0DA1                     	;# 
  1283  0DA2                     	;# 
  1284  0DA3                     	;# 
  1285  0DA4                     	;# 
  1286  0DA4                     	;# 
  1287  0DA5                     	;# 
  1288  0DA6                     	;# 
  1289  0DA7                     	;# 
  1290  0DA7                     	;# 
  1291  0DA8                     	;# 
  1292  0DA9                     	;# 
  1293  0DAA                     	;# 
  1294  0DAB                     	;# 
  1295  0DAC                     	;# 
  1296  0DAD                     	;# 
  1297  0DAE                     	;# 
  1298  0DAF                     	;# 
  1299  0E0F                     	;# 
  1300  0E10                     	;# 
  1301  0E11                     	;# 
  1302  0E12                     	;# 
  1303  0E13                     	;# 
  1304  0E14                     	;# 
  1305  0E15                     	;# 
  1306  0E16                     	;# 
  1307  0E17                     	;# 
  1308  0E18                     	;# 
  1309  0E19                     	;# 
  1310  0E1A                     	;# 
  1311  0E1B                     	;# 
  1312  0E1C                     	;# 
  1313  0E1D                     	;# 
  1314  0E1E                     	;# 
  1315  0E1F                     	;# 
  1316  0E20                     	;# 
  1317  0E21                     	;# 
  1318  0E22                     	;# 
  1319  0E23                     	;# 
  1320  0E24                     	;# 
  1321  0E25                     	;# 
  1322  0E26                     	;# 
  1323  0E27                     	;# 
  1324  0E28                     	;# 
  1325  0E29                     	;# 
  1326  0E2A                     	;# 
  1327  0E2B                     	;# 
  1328  0E2C                     	;# 
  1329  0E2D                     	;# 
  1330  0E2E                     	;# 
  1331  0E90                     	;# 
  1332  0E91                     	;# 
  1333  0E92                     	;# 
  1334  0E94                     	;# 
  1335  0E95                     	;# 
  1336  0E9C                     	;# 
  1337  0E9D                     	;# 
  1338  0E9E                     	;# 
  1339  0E9F                     	;# 
  1340  0EA0                     	;# 
  1341  0EA1                     	;# 
  1342  0EA2                     	;# 
  1343  0EA3                     	;# 
  1344  0EA4                     	;# 
  1345  0EA5                     	;# 
  1346  0EA6                     	;# 
  1347  0EA7                     	;# 
  1348  0F0F                     	;# 
  1349  0F10                     	;# 
  1350  0F11                     	;# 
  1351  0F12                     	;# 
  1352  0F13                     	;# 
  1353  0F14                     	;# 
  1354  0F15                     	;# 
  1355  0F16                     	;# 
  1356  0F17                     	;# 
  1357  0F18                     	;# 
  1358  0F19                     	;# 
  1359  0F1A                     	;# 
  1360  0F1B                     	;# 
  1361  0F1C                     	;# 
  1362  0F1D                     	;# 
  1363  0F1E                     	;# 
  1364  0F1F                     	;# 
  1365  0F20                     	;# 
  1366  0F21                     	;# 
  1367  0F22                     	;# 
  1368  0F23                     	;# 
  1369  0F24                     	;# 
  1370  0F25                     	;# 
  1371  0F26                     	;# 
  1372  0F27                     	;# 
  1373  0F28                     	;# 
  1374  0F29                     	;# 
  1375  0F2A                     	;# 
  1376  0F2B                     	;# 
  1377  0F2C                     	;# 
  1378  0F2D                     	;# 
  1379  0F2E                     	;# 
  1380  0F2F                     	;# 
  1381  0F30                     	;# 
  1382  0F31                     	;# 
  1383  0F32                     	;# 
  1384  0F33                     	;# 
  1385  0F34                     	;# 
  1386  0F35                     	;# 
  1387  0F36                     	;# 
  1388  0F37                     	;# 
  1389  0FE4                     	;# 
  1390  0FE5                     	;# 
  1391  0FE6                     	;# 
  1392  0FE7                     	;# 
  1393  0FE8                     	;# 
  1394  0FE9                     	;# 
  1395  0FEA                     	;# 
  1396  0FEB                     	;# 
  1397  0FED                     	;# 
  1398  0FEE                     	;# 
  1399  0FEF                     	;# 
  1400                           
  1401                           	psect	stringtext1
  1402  0821                     __pstringtext1:	
  1403  0821                     crc16@FRONT_BIT:	
  1404  0821  3400               	retlw	0
  1405  0822  3480               	retlw	128
  1406  0823                     __end_ofcrc16@FRONT_BIT:	
  1407                           
  1408                           	psect	stringtext2
  1409  0823                     __pstringtext2:	
  1410  0823                     _DELAY_MULT:	
  1411  0823  34E8               	retlw	232
  1412  0824  3403               	retlw	3
  1413  0825                     __end_of_DELAY_MULT:	
  1414                           
  1415                           	psect	stringtext3
  1416  0825                     __pstringtext3:	
  1417  0825                     _BAUD_RATE:	
  1418  0825  3432               	retlw	50
  1419  0826  3400               	retlw	0
  1420  0827                     __end_of_BAUD_RATE:	
  1421                           
  1422                           	psect	stringtext4
  1423  0800                     __pstringtext4:	
  1424  0800                     _MESSAGE_INTERVAL:	
  1425  0800  3401               	retlw	1
  1426  0801  3400               	retlw	0
  1427  0802                     __end_of_MESSAGE_INTERVAL:	
  1428  0095                     _OPTION_REGbits	set	149
  1429  008E                     _TRISC	set	142
  1430  008D                     _TRISB	set	141
  1431  008C                     _TRISA	set	140
  1432  0098                     _OSCTUNE	set	152
  1433  0099                     _OSCCON	set	153
  1434  010C                     _LATAbits	set	268
  1435  010E                     _LATC	set	270
  1436  010D                     _LATB	set	269
  1437  010C                     _LATA	set	268
  1438  0116                     _BORCON	set	278
  1439  018C                     _ANSELA	set	396
  1440  018D                     _ANSELB	set	397
  1441  018E                     _ANSELC	set	398
  1442  020E                     _WPUC	set	526
  1443  020C                     _WPUA	set	524
  1444  020D                     _WPUB	set	525
  1445  028E                     _ODCONC	set	654
  1446  028D                     _ODCONB	set	653
  1447  028C                     _ODCONA	set	652
  1448  030E                     _SLRCONC	set	782
  1449  030D                     _SLRCONB	set	781
  1450  030C                     _SLRCONA	set	780
  1451  0802                     STR_1:	
  1452  0802  344E               	retlw	78	;'N'
  1453  0803  344F               	retlw	79	;'O'
  1454  0804  3456               	retlw	86	;'V'
  1455  0805  3441               	retlw	65	;'A'
  1456  0806  3420               	retlw	32	;' '
  1457  0807  3454               	retlw	84	;'T'
  1458  0808  3445               	retlw	69	;'E'
  1459  0809  3453               	retlw	83	;'S'
  1460  080A  3454               	retlw	84	;'T'
  1461  080B  3420               	retlw	32	;' '
  1462  080C  3454               	retlw	84	;'T'
  1463  080D  3452               	retlw	82	;'R'
  1464  080E  3441               	retlw	65	;'A'
  1465  080F  344E               	retlw	78	;'N'
  1466  0810  3453               	retlw	83	;'S'
  1467  0811  344D               	retlw	77	;'M'
  1468  0812  3449               	retlw	73	;'I'
  1469  0813  3453               	retlw	83	;'S'
  1470  0814  3453               	retlw	83	;'S'
  1471  0815  3449               	retlw	73	;'I'
  1472  0816  344F               	retlw	79	;'O'
  1473  0817  344E               	retlw	78	;'N'
  1474  0818  342C               	retlw	44	;','
  1475  0819  3420               	retlw	32	;' '
  1476  081A  3449               	retlw	73	;'I'
  1477  081B  3444               	retlw	68	;'D'
  1478  081C  343A               	retlw	58	;':'
  1479  081D  3420               	retlw	32	;' '
  1480  081E  3425               	retlw	37	;'%'
  1481  081F  3464               	retlw	100	;'d'
  1482  0820  3400               	retlw	0
  1483                           
  1484                           	psect	stringtext5
  1485  0000                     __pstringtext5:	
  1486                           
  1487                           ; #config settings
  1488  0000                     
  1489                           	psect	cinit
  1490  07EA                     start_initialization:	
  1491  07EA                     __initialization:	
  1492                           
  1493                           ; Clear objects allocated to BANK0
  1494  07EA  0020               	movlb	0	; select bank0
  1495  07EB  01EB               	clrf	__pbssBANK0& (0+127)
  1496  07EC  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  1497  07ED  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  1498  07EE  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  1499                           
  1500                           ; Clear objects allocated to BANK1
  1501  07EF  0021               	movlb	1	; select bank1
  1502  07F0  01D8               	clrf	__pbssBANK1& (0+127)
  1503  07F1  01D9               	clrf	(__pbssBANK1+1)& (0+127)
  1504  07F2  01DA               	clrf	(__pbssBANK1+2)& (0+127)
  1505  07F3  01DB               	clrf	(__pbssBANK1+3)& (0+127)
  1506  07F4  01DC               	clrf	(__pbssBANK1+4)& (0+127)
  1507  07F5  01DD               	clrf	(__pbssBANK1+5)& (0+127)
  1508                           
  1509                           ; Clear objects allocated to BANK2
  1510  07F6  3020               	movlw	low __pbssBANK2
  1511  07F7  0084               	movwf	4
  1512  07F8  3001               	movlw	high __pbssBANK2
  1513  07F9  0085               	movwf	5
  1514  07FA  3020               	movlw	32
  1515  07FB  3181  2125         	fcall	clear_ram0
  1516  07FD                     end_of_initialization:	
  1517                           ;End of C runtime variable initialization code
  1518                           
  1519  07FD                     __end_of__initialization:	
  1520  07FD  0020               	movlb	0
  1521  07FE  3183  2B46         	ljmp	_main	;jump to C main() function
  1522                           
  1523                           	psect	bssBANK0
  1524  006B                     __pbssBANK0:	
  1525  006B                     _prec:	
  1526  006B                     	ds	2
  1527  006D                     _flags:	
  1528  006D                     	ds	2
  1529                           
  1530                           	psect	bssBANK1
  1531  00D8                     __pbssBANK1:	
  1532  00D8                     _nout:	
  1533  00D8                     	ds	2
  1534  00DA                     _width:	
  1535  00DA                     	ds	2
  1536  00DC                     _transmission_time:	
  1537  00DC                     	ds	2
  1538                           
  1539                           	psect	bssBANK2
  1540  0120                     __pbssBANK2:	
  1541  0120                     _dbuf:	
  1542  0120                     	ds	32
  1543                           
  1544                           	psect	clrtext
  1545  0125                     clear_ram0:	
  1546                           ;	Called with FSR0 containing the base address, and
  1547                           ;	WREG with the size to clear
  1548                           
  1549  0125  0064               	clrwdt	;clear the watchdog before getting into this loop
  1550  0126                     clrloop0:	
  1551  0126  0180               	clrf	0	;clear RAM location pointed to by FSR
  1552  0127  3101               	addfsr 0,1
  1553  0128  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1554  0129  2926               	goto	clrloop0	;have we reached the end yet?
  1555  012A  3400               	retlw	0	;all done for this memory range, return
  1556                           
  1557                           	psect	cstackBANK1
  1558  00A0                     __pcstackBANK1:	
  1559  00A0                     	ds	2
  1560  00A2                     sprintf@ap:	
  1561                           
  1562                           ; 1 bytes @ 0x2
  1563  00A2                     	ds	1
  1564  00A3                     sprintf@s:	
  1565                           
  1566                           ; 1 bytes @ 0x3
  1567  00A3                     	ds	1
  1568  00A4                     sprintf@f:	
  1569                           
  1570                           ; 5 bytes @ 0x4
  1571  00A4                     	ds	5
  1572  00A9                     main@message:	
  1573                           
  1574                           ; 43 bytes @ 0x9
  1575  00A9                     	ds	43
  1576  00D4                     main@id:	
  1577                           
  1578                           ; 2 bytes @ 0x34
  1579  00D4                     	ds	2
  1580  00D6                     main@i:	
  1581                           
  1582                           ; 2 bytes @ 0x36
  1583  00D6                     	ds	2
  1584                           
  1585                           	psect	cstackCOMMON
  1586  0070                     __pcstackCOMMON:	
  1587  0070                     ?_PIN_MANAGER_Initialize:	
  1588  0070                     ??_PIN_MANAGER_Initialize:	
  1589                           ; 1 bytes @ 0x0
  1590                           
  1591  0070                     ?_OSCILLATOR_Initialize:	
  1592                           ; 1 bytes @ 0x0
  1593                           
  1594  0070                     ??_OSCILLATOR_Initialize:	
  1595                           ; 1 bytes @ 0x0
  1596                           
  1597  0070                     ?_putch:	
  1598                           ; 1 bytes @ 0x0
  1599                           
  1600  0070                     ??_putch:	
  1601                           ; 1 bytes @ 0x0
  1602                           
  1603  0070                     ?_SYSTEM_Initialize:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606  0070                     ??_SYSTEM_Initialize:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0070                     ?_TransmitBit:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0070                     ??_TransmitBit:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  0070                     ?_TransmitByte:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0070                     ?_TransmitString:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621  0070                     ?_main:	
  1622                           ; 1 bytes @ 0x0
  1623                           
  1624  0070                     ??___aodiv:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627  0070                     ??___aomod:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630  0070                     ?_strlen:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  0070                     ?_fputc:	
  1634                           ; 2 bytes @ 0x0
  1635                           
  1636  0070                     putch@c:	
  1637                           ; 2 bytes @ 0x0
  1638                           
  1639  0070                     fputc@c:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0070                     strlen@s:	
  1643                           ; 2 bytes @ 0x0
  1644                           
  1645                           
  1646                           ; 2 bytes @ 0x0
  1647  0070                     	ds	1
  1648  0071                     TransmitBit@b:	
  1649  0071                     ___aodiv@counter:	
  1650                           ; 1 bytes @ 0x1
  1651                           
  1652  0071                     ___aomod@counter:	
  1653                           ; 1 bytes @ 0x1
  1654                           
  1655                           
  1656                           ; 1 bytes @ 0x1
  1657  0071                     	ds	1
  1658  0072                     ??_strlen:	
  1659  0072                     ??_TransmitByte:	
  1660                           ; 1 bytes @ 0x2
  1661                           
  1662  0072                     ___aodiv@sign:	
  1663                           ; 1 bytes @ 0x2
  1664                           
  1665  0072                     ___aomod@sign:	
  1666                           ; 1 bytes @ 0x2
  1667                           
  1668  0072                     fputc@fp:	
  1669                           ; 1 bytes @ 0x2
  1670                           
  1671  0072                     strlen@a:	
  1672                           ; 1 bytes @ 0x2
  1673                           
  1674                           
  1675                           ; 2 bytes @ 0x2
  1676  0072                     	ds	1
  1677  0073                     ??_fputc:	
  1678  0073                     ?_abs:	
  1679                           ; 1 bytes @ 0x3
  1680                           
  1681  0073                     TransmitByte@byte:	
  1682                           ; 2 bytes @ 0x3
  1683                           
  1684  0073                     abs@a:	
  1685                           ; 1 bytes @ 0x3
  1686                           
  1687  0073                     ___aodiv@quotient:	
  1688                           ; 2 bytes @ 0x3
  1689                           
  1690                           
  1691                           ; 8 bytes @ 0x3
  1692  0073                     	ds	1
  1693  0074                     ?_crc16:	
  1694  0074                     crc16@polynomial:	
  1695                           ; 2 bytes @ 0x4
  1696                           
  1697  0074                     TransmitByte@i:	
  1698                           ; 2 bytes @ 0x4
  1699                           
  1700                           
  1701                           ; 2 bytes @ 0x4
  1702  0074                     	ds	1
  1703  0075                     ??_abs:	
  1704                           
  1705                           ; 1 bytes @ 0x5
  1706  0075                     	ds	1
  1707  0076                     ??_crc16:	
  1708  0076                     ??_TransmitString:	
  1709                           ; 1 bytes @ 0x6
  1710                           
  1711                           
  1712                           ; 1 bytes @ 0x6
  1713  0076                     	ds	1
  1714  0077                     TransmitString@counti:	
  1715                           
  1716                           ; 2 bytes @ 0x7
  1717  0077                     	ds	1
  1718  0078                     ?_fputs:	
  1719  0078                     fputs@fp:	
  1720                           ; 2 bytes @ 0x8
  1721                           
  1722                           
  1723                           ; 1 bytes @ 0x8
  1724  0078                     	ds	1
  1725  0079                     ??_fputs:	
  1726  0079                     ?_AppendCRC:	
  1727                           ; 1 bytes @ 0x9
  1728                           
  1729  0079                     TransmitString@message:	
  1730                           ; 1 bytes @ 0x9
  1731                           
  1732  0079                     AppendCRC@crc:	
  1733                           ; 1 bytes @ 0x9
  1734                           
  1735                           
  1736                           ; 2 bytes @ 0x9
  1737  0079                     	ds	1
  1738  007A                     TransmitString@i:	
  1739                           
  1740                           ; 2 bytes @ 0xA
  1741  007A                     	ds	1
  1742  007B                     ??_AppendCRC:	
  1743                           
  1744                           ; 1 bytes @ 0xB
  1745  007B                     	ds	1
  1746  007C                     ??_pad:	
  1747                           
  1748                           ; 1 bytes @ 0xC
  1749  007C                     	ds	1
  1750  007D                     ??_sprintf:	
  1751                           
  1752                           ; 1 bytes @ 0xD
  1753  007D                     	ds	1
  1754                           
  1755                           	psect	cstackBANK0
  1756  0020                     __pcstackBANK0:	
  1757  0020                     ?___aodiv:	
  1758  0020                     ?___aomod:	
  1759                           ; 8 bytes @ 0x0
  1760                           
  1761  0020                     fputs@c:	
  1762                           ; 8 bytes @ 0x0
  1763                           
  1764  0020                     crc16@counti:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0020                     ___aodiv@divisor:	
  1768                           ; 2 bytes @ 0x0
  1769                           
  1770  0020                     ___aomod@divisor:	
  1771                           ; 8 bytes @ 0x0
  1772                           
  1773                           
  1774                           ; 8 bytes @ 0x0
  1775  0020                     	ds	1
  1776  0021                     fputs@i:	
  1777                           
  1778                           ; 2 bytes @ 0x1
  1779  0021                     	ds	1
  1780  0022                     crc16@byte:	
  1781                           
  1782                           ; 1 bytes @ 0x2
  1783  0022                     	ds	1
  1784  0023                     fputs@s:	
  1785  0023                     crc16@i:	
  1786                           ; 1 bytes @ 0x3
  1787                           
  1788                           
  1789                           ; 2 bytes @ 0x3
  1790  0023                     	ds	1
  1791  0024                     ?_pad:	
  1792  0024                     pad@buf:	
  1793                           ; 2 bytes @ 0x4
  1794                           
  1795                           
  1796                           ; 1 bytes @ 0x4
  1797  0024                     	ds	1
  1798  0025                     crc16@i_140:	
  1799  0025                     pad@p:	
  1800                           ; 2 bytes @ 0x5
  1801                           
  1802                           
  1803                           ; 2 bytes @ 0x5
  1804  0025                     	ds	2
  1805  0027                     crc16@message:	
  1806  0027                     pad@i:	
  1807                           ; 1 bytes @ 0x7
  1808                           
  1809                           
  1810                           ; 2 bytes @ 0x7
  1811  0027                     	ds	1
  1812  0028                     crc16@crc:	
  1813  0028                     ___aodiv@dividend:	
  1814                           ; 2 bytes @ 0x8
  1815                           
  1816  0028                     ___aomod@dividend:	
  1817                           ; 8 bytes @ 0x8
  1818                           
  1819                           
  1820                           ; 8 bytes @ 0x8
  1821  0028                     	ds	1
  1822  0029                     pad@w:	
  1823                           
  1824                           ; 2 bytes @ 0x9
  1825  0029                     	ds	1
  1826  002A                     AppendCRC@data:	
  1827                           
  1828                           ; 1 bytes @ 0xA
  1829  002A                     	ds	1
  1830  002B                     pad@fp:	
  1831  002B                     AppendCRC@len:	
  1832                           ; 1 bytes @ 0xB
  1833                           
  1834                           
  1835                           ; 2 bytes @ 0xB
  1836  002B                     	ds	5
  1837  0030                     ?_dtoa:	
  1838  0030                     dtoa@d:	
  1839                           ; 2 bytes @ 0x10
  1840                           
  1841                           
  1842                           ; 8 bytes @ 0x10
  1843  0030                     	ds	8
  1844  0038                     ??_dtoa:	
  1845                           
  1846                           ; 1 bytes @ 0x18
  1847  0038                     	ds	3
  1848  003B                     dtoa@fp:	
  1849                           
  1850                           ; 1 bytes @ 0x1B
  1851  003B                     	ds	1
  1852  003C                     _dtoa$251:	
  1853                           
  1854                           ; 2 bytes @ 0x1C
  1855  003C                     	ds	2
  1856  003E                     dtoa@p:	
  1857                           
  1858                           ; 2 bytes @ 0x1E
  1859  003E                     	ds	2
  1860  0040                     dtoa@w:	
  1861                           
  1862                           ; 2 bytes @ 0x20
  1863  0040                     	ds	2
  1864  0042                     dtoa@s:	
  1865                           
  1866                           ; 2 bytes @ 0x22
  1867  0042                     	ds	2
  1868  0044                     dtoa@n:	
  1869                           
  1870                           ; 8 bytes @ 0x24
  1871  0044                     	ds	8
  1872  004C                     dtoa@i:	
  1873                           
  1874                           ; 2 bytes @ 0x2C
  1875  004C                     	ds	2
  1876  004E                     ?_vfpfcnvrt:	
  1877  004E                     vfpfcnvrt@fmt:	
  1878                           ; 2 bytes @ 0x2E
  1879                           
  1880                           
  1881                           ; 1 bytes @ 0x2E
  1882  004E                     	ds	1
  1883  004F                     vfpfcnvrt@ap:	
  1884                           
  1885                           ; 1 bytes @ 0x2F
  1886  004F                     	ds	1
  1887  0050                     ??_vfpfcnvrt:	
  1888                           
  1889                           ; 1 bytes @ 0x30
  1890  0050                     	ds	5
  1891  0055                     vfpfcnvrt@ll:	
  1892                           
  1893                           ; 8 bytes @ 0x35
  1894  0055                     	ds	8
  1895  005D                     vfpfcnvrt@fp:	
  1896                           
  1897                           ; 1 bytes @ 0x3D
  1898  005D                     	ds	1
  1899  005E                     ?_vfprintf:	
  1900  005E                     vfprintf@fmt:	
  1901                           ; 2 bytes @ 0x3E
  1902                           
  1903                           
  1904                           ; 2 bytes @ 0x3E
  1905  005E                     	ds	2
  1906  0060                     vfprintf@ap:	
  1907                           
  1908                           ; 1 bytes @ 0x40
  1909  0060                     	ds	1
  1910  0061                     ??_vfprintf:	
  1911                           
  1912                           ; 1 bytes @ 0x41
  1913  0061                     	ds	2
  1914  0063                     vfprintf@fp:	
  1915                           
  1916                           ; 1 bytes @ 0x43
  1917  0063                     	ds	1
  1918  0064                     vfprintf@cfmt:	
  1919                           
  1920                           ; 2 bytes @ 0x44
  1921  0064                     	ds	2
  1922  0066                     ?_sprintf:	
  1923  0066                     sprintf@fmt:	
  1924                           ; 2 bytes @ 0x46
  1925                           
  1926                           
  1927                           ; 2 bytes @ 0x46
  1928  0066                     	ds	4
  1929  006A                     ??_main:	
  1930                           
  1931                           ; 1 bytes @ 0x4A
  1932  006A                     	ds	1
  1933                           
  1934                           	psect	maintext
  1935  0346                     __pmaintext:	
  1936 ;;
  1937 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1938 ;;
  1939 ;; *************** function _main *****************
  1940 ;; Defined at:
  1941 ;;		line 140 in file "main.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  i               2   54[BANK1 ] int 
  1946 ;;  message        43    9[BANK1 ] unsigned char [43]
  1947 ;;  id              2   52[BANK1 ] int 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      void 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : B1F/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1958 ;;      Locals:         0       0      47       0       0       0       0       0       0       0       0       0       
      +0       0
  1959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1960 ;;      Totals:         0       1      47       0       0       0       0       0       0       0       0       0       
      +0       0
  1961 ;;Total ram usage:       48 bytes
  1962 ;; Hardware stack levels required when called:    8
  1963 ;; This function calls:
  1964 ;;		_AppendCRC
  1965 ;;		_PIN_MANAGER_Initialize
  1966 ;;		_SYSTEM_Initialize
  1967 ;;		_TransmitString
  1968 ;;		_crc16
  1969 ;;		_sprintf
  1970 ;; This function is called by:
  1971 ;;		Startup code after reset
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           
  1976                           ;psect for function _main
  1977  0346                     _main:	
  1978                           
  1979                           ;main.c: 144:     SYSTEM_Initialize();
  1980                           
  1981                           ;incstack = 0
  1982                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1983  0346  3181  211F  3183   	fcall	_SYSTEM_Initialize
  1984                           
  1985                           ;main.c: 145:     PIN_MANAGER_Initialize();
  1986  0349  3181  219B  3183   	fcall	_PIN_MANAGER_Initialize
  1987                           
  1988                           ;main.c: 148:     char message[40 + 3];;main.c: 150:     int id = 0;
  1989  034C  0021               	movlb	1	; select bank1
  1990  034D  01D4               	clrf	main@id^(0+128)
  1991  034E  01D5               	clrf	(main@id+1)^(0+128)
  1992  034F                     l1750:	
  1993                           
  1994                           ;main.c: 152:     {;main.c: 153:         sprintf(message, "NOVA TEST TRANSMISSION, ID: %
      +                          d", id);
  1995  034F  3002               	movlw	low (STR_1| (0+32768))
  1996  0350  0020               	movlb	0	; select bank0
  1997  0351  00E6               	movwf	sprintf@fmt
  1998  0352  3088               	movlw	high (STR_1| (0+32768))
  1999  0353  00E7               	movwf	sprintf@fmt+1
  2000  0354  0021               	movlb	1	; select bank1
  2001  0355  0855               	movf	(main@id+1)^(0+128),w
  2002  0356  0020               	movlb	0	; select bank0
  2003  0357  00E9               	movwf	?_sprintf+3
  2004  0358  0021               	movlb	1	; select bank1
  2005  0359  0854               	movf	main@id^(0+128),w
  2006  035A  0020               	movlb	0	; select bank0
  2007  035B  00E8               	movwf	?_sprintf+2
  2008  035C  30A9               	movlw	(low (main@message| 0))& (0+255)
  2009  035D  3181  2178  3183   	fcall	_sprintf
  2010                           
  2011                           ;main.c: 154:         id++;
  2012  0360  3001               	movlw	1
  2013  0361  0021               	movlb	1	; select bank1
  2014  0362  07D4               	addwf	main@id^(0+128),f
  2015  0363  3000               	movlw	0
  2016  0364  3DD5               	addwfc	(main@id+1)^(0+128),f
  2017                           
  2018                           ;main.c: 155:         AppendCRC(message, crc16(message, 0x1021));
  2019  0365  3021               	movlw	33
  2020  0366  00F4               	movwf	crc16@polynomial
  2021  0367  3010               	movlw	16
  2022  0368  00F5               	movwf	crc16@polynomial+1
  2023  0369  30A9               	movlw	(low (main@message| 0))& (0+255)
  2024  036A  3183  2396  3183   	fcall	_crc16
  2025  036D  0875               	movf	?_crc16+1,w
  2026  036E  00FA               	movwf	AppendCRC@crc+1
  2027  036F  0874               	movf	?_crc16,w
  2028  0370  00F9               	movwf	AppendCRC@crc
  2029  0371  30A9               	movlw	(low (main@message| 0))& (0+255)
  2030  0372  3182  22AF  3183   	fcall	_AppendCRC
  2031                           
  2032                           ;main.c: 156:         TransmitString(message);
  2033  0375  30A9               	movlw	(low (main@message| 0))& (0+255)
  2034  0376  3181  21E5  3183   	fcall	_TransmitString
  2035                           
  2036                           ;main.c: 158:         for (int i = 0; i < DELAY_MULT; i++)
  2037  0379  0021               	movlb	1	; select bank1
  2038  037A  01D6               	clrf	main@i^(0+128)
  2039  037B  01D7               	clrf	(main@i+1)^(0+128)
  2040  037C                     l1764:	
  2041                           
  2042                           ;main.c: 159:         {;main.c: 160:             _delay((unsigned long)((MESSAGE_INTERVA
      +                          L)*(4000000/4000.0)));
  2043  037C  30C8               	movlw	200
  2044  037D                     u1647:	
  2045  037D  3200               	nop2
  2046  037E  0B89               	decfsz	9,f
  2047  037F  2B7D               	goto	u1647
  2048                           
  2049                           ;main.c: 161:         }
  2050  0380  3001               	movlw	1
  2051  0381  0021               	movlb	1	; select bank1
  2052  0382  07D6               	addwf	main@i^(0+128),f
  2053  0383  3000               	movlw	0
  2054  0384  3DD7               	addwfc	(main@i+1)^(0+128),f
  2055  0385  0857               	movf	(main@i+1)^(0+128),w
  2056  0386  3A80               	xorlw	128
  2057  0387  0020               	movlb	0	; select bank0
  2058  0388  00EA               	movwf	??_main
  2059  0389  3083               	movlw	131
  2060  038A  026A               	subwf	??_main,w
  2061  038B  1D03               	skipz
  2062  038C  2B90               	goto	u1635
  2063  038D  30E8               	movlw	232
  2064  038E  0021               	movlb	1	; select bank1
  2065  038F  0256               	subwf	main@i^(0+128),w
  2066  0390                     u1635:	
  2067  0390  1C03               	skipc
  2068  0391  2B7C               	goto	l1764
  2069                           
  2070                           ;main.c: 162:         transmission_time = 0;
  2071  0392  0021               	movlb	1	; select bank1
  2072  0393  01DC               	clrf	_transmission_time^(0+128)
  2073  0394  01DD               	clrf	(_transmission_time+1)^(0+128)
  2074  0395  2B4F               	goto	l1750
  2075  0396                     __end_of_main:	
  2076                           
  2077                           	psect	text1
  2078  0178                     __ptext1:	
  2079 ;; *************** function _sprintf *****************
  2080 ;; Defined at:
  2081 ;;		line 9 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\nf_sprintf.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;  s               1    wreg     PTR unsigned char 
  2084 ;;		 -> main@message(43), 
  2085 ;;  fmt             2   70[BANK0 ] PTR const unsigned char 
  2086 ;;		 -> STR_1(31), 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;  s               1    3[BANK1 ] PTR unsigned char 
  2089 ;;		 -> main@message(43), 
  2090 ;;  f               5    4[BANK1 ] struct _IO_FILE
  2091 ;;  ret             2    0        int 
  2092 ;;  ap              1    2[BANK1 ] PTR void [1]
  2093 ;;		 -> ?_sprintf(2), 
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  2   70[BANK0 ] int 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2103 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2104 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  2105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2106 ;;      Totals:         1       4       9       0       0       0       0       0       0       0       0       0       
      +0       0
  2107 ;;Total ram usage:       14 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    7
  2110 ;; This function calls:
  2111 ;;		_vfprintf
  2112 ;; This function is called by:
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           
  2118                           ;psect for function _sprintf
  2119  0178                     _sprintf:	
  2120                           
  2121                           ;incstack = 0
  2122                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2123                           ;sprintf@s stored from wreg
  2124  0178  0021               	movlb	1	; select bank1
  2125  0179  00A3               	movwf	sprintf@s^(0+128)
  2126  017A  3068               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2127  017B  00FD               	movwf	??_sprintf
  2128  017C  087D               	movf	??_sprintf,w
  2129  017D  00A2               	movwf	sprintf@ap^(0+128)
  2130  017E  0823               	movf	sprintf@s^(0+128),w
  2131  017F  00FD               	movwf	??_sprintf
  2132  0180  087D               	movf	??_sprintf,w
  2133  0181  00A4               	movwf	sprintf@f^(0+128)
  2134  0182  01A5               	clrf	(sprintf@f^(0+128)+1)
  2135  0183  01A6               	clrf	((sprintf@f+1)^(0+128)+1)
  2136  0184  01A7               	clrf	(sprintf@f^(0+128)+3)
  2137  0185  01A8               	clrf	((sprintf@f+1)^(0+128)+3)
  2138  0186  0020               	movlb	0	; select bank0
  2139  0187  0867               	movf	sprintf@fmt+1,w
  2140  0188  00DF               	movwf	vfprintf@fmt+1
  2141  0189  0866               	movf	sprintf@fmt,w
  2142  018A  00DE               	movwf	vfprintf@fmt
  2143  018B  30A2               	movlw	(low (sprintf@ap| 0))& (0+255)
  2144  018C  00FD               	movwf	??_sprintf
  2145  018D  087D               	movf	??_sprintf,w
  2146  018E  00E0               	movwf	vfprintf@ap
  2147  018F  30A4               	movlw	(low (sprintf@f| 0))& (0+255)
  2148  0190  3182  223B         	fcall	_vfprintf
  2149  0192  0021               	movlb	1	; select bank1
  2150  0193  0825               	movf	(sprintf@f^(0+128)+1),w
  2151  0194  0723               	addwf	sprintf@s^(0+128),w
  2152  0195  00FD               	movwf	??_sprintf
  2153  0196  087D               	movf	??_sprintf,w
  2154  0197  0086               	movwf	6
  2155  0198  0187               	clrf	7
  2156  0199  0181               	clrf	1
  2157  019A  0008               	return
  2158  019B                     __end_of_sprintf:	
  2159                           
  2160                           	psect	text2
  2161  023B                     __ptext2:	
  2162 ;; *************** function _vfprintf *****************
  2163 ;; Defined at:
  2164 ;;		line 1368 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  fp              1    wreg     PTR struct _IO_FILE
  2167 ;;		 -> sprintf@f(5), 
  2168 ;;  fmt             2   62[BANK0 ] PTR const unsigned char 
  2169 ;;		 -> STR_1(31), 
  2170 ;;  ap              1   64[BANK0 ] PTR PTR void 
  2171 ;;		 -> sprintf@ap(1), 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;  fp              1   67[BANK0 ] PTR struct _IO_FILE
  2174 ;;		 -> sprintf@f(5), 
  2175 ;;  cfmt            2   68[BANK0 ] PTR unsigned char 
  2176 ;;		 -> STR_1(31), 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  2   62[BANK0 ] int 
  2179 ;; Registers used:
  2180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2186 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2187 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2189 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2190 ;;Total ram usage:        8 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    6
  2193 ;; This function calls:
  2194 ;;		_vfpfcnvrt
  2195 ;; This function is called by:
  2196 ;;		_sprintf
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           
  2201                           ;psect for function _vfprintf
  2202  023B                     _vfprintf:	
  2203                           
  2204                           ;incstack = 0
  2205                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2206                           ;vfprintf@fp stored from wreg
  2207  023B  0020               	movlb	0	; select bank0
  2208  023C  00E3               	movwf	vfprintf@fp
  2209                           
  2210                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1368: int vfprintf(FIL
      +                          E *fp, const char *fmt, va_list ap);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\comm
      +                          on\doprnt.c: 1369: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 13
      +                          71:     char *cfmt;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 137
      +                          3:     cfmt = (char *)fmt;
  2211  023D  085F               	movf	vfprintf@fmt+1,w
  2212  023E  00E5               	movwf	vfprintf@cfmt+1
  2213  023F  085E               	movf	vfprintf@fmt,w
  2214  0240  00E4               	movwf	vfprintf@cfmt
  2215                           
  2216                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1374:     nout = 0;
  2217  0241  0021               	movlb	1	; select bank1
  2218  0242  01D8               	clrf	_nout^(0+128)
  2219  0243  01D9               	clrf	(_nout+1)^(0+128)
  2220  0244                     l1672:	
  2221                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1375:     while (*cfmt
      +                          ) {
  2222                           
  2223                           
  2224                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1375:     while (*cfmt
      +                          ) {
  2225  0244  0020               	movlb	0	; select bank0
  2226  0245  0864               	movf	vfprintf@cfmt,w
  2227  0246  0084               	movwf	4
  2228  0247  0865               	movf	vfprintf@cfmt+1,w
  2229  0248  0085               	movwf	5
  2230  0249  0012               	moviw fsr0++
  2231  024A  1903               	btfsc	3,2
  2232  024B  2A61               	goto	l1674
  2233                           
  2234                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1376:         nout += 
      +                          vfpfcnvrt(fp, &cfmt, ap);
  2235  024C  3064               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  2236  024D  00E1               	movwf	??_vfprintf
  2237  024E  0861               	movf	??_vfprintf,w
  2238  024F  00CE               	movwf	vfpfcnvrt@fmt
  2239  0250  0860               	movf	vfprintf@ap,w
  2240  0251  00E2               	movwf	??_vfprintf+1
  2241  0252  0862               	movf	??_vfprintf+1,w
  2242  0253  00CF               	movwf	vfpfcnvrt@ap
  2243  0254  0863               	movf	vfprintf@fp,w
  2244  0255  3184  2405  3182   	fcall	_vfpfcnvrt
  2245  0258  0020               	movlb	0	; select bank0
  2246  0259  084E               	movf	?_vfpfcnvrt,w
  2247  025A  0021               	movlb	1	; select bank1
  2248  025B  07D8               	addwf	_nout^(0+128),f
  2249  025C  0020               	movlb	0	; select bank0
  2250  025D  084F               	movf	?_vfpfcnvrt+1,w
  2251  025E  0021               	movlb	1	; select bank1
  2252  025F  3DD9               	addwfc	(_nout+1)^(0+128),f
  2253  0260  2A44               	goto	l1672
  2254  0261                     l1674:	
  2255                           
  2256                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1378:     return nout;
  2257  0261  0021               	movlb	1	; select bank1
  2258  0262  0859               	movf	(_nout+1)^(0+128),w
  2259  0263  0020               	movlb	0	; select bank0
  2260  0264  00DF               	movwf	?_vfprintf+1
  2261  0265  0021               	movlb	1	; select bank1
  2262  0266  0858               	movf	_nout^(0+128),w
  2263  0267  0020               	movlb	0	; select bank0
  2264  0268  00DE               	movwf	?_vfprintf
  2265  0269  0008               	return
  2266  026A                     __end_of_vfprintf:	
  2267                           
  2268                           	psect	text3
  2269  0405                     __ptext3:	
  2270 ;; *************** function _vfpfcnvrt *****************
  2271 ;; Defined at:
  2272 ;;		line 670 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  fp              1    wreg     PTR struct _IO_FILE
  2275 ;;		 -> sprintf@f(5), 
  2276 ;;  fmt             1   46[BANK0 ] PTR PTR unsigned char 
  2277 ;;		 -> vfprintf@cfmt(2), 
  2278 ;;  ap              1   47[BANK0 ] PTR PTR void 
  2279 ;;		 -> sprintf@ap(1), 
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  fp              1   61[BANK0 ] PTR struct _IO_FILE
  2282 ;;		 -> sprintf@f(5), 
  2283 ;;  ll              8   53[BANK0 ] long long 
  2284 ;;  llu             8    0        unsigned long long 
  2285 ;;  f               4    0        unsigned long long 
  2286 ;;  ct              3    0        unsigned char [3]
  2287 ;;  vp              2    0        PTR void 
  2288 ;;  i               2    0        int 
  2289 ;;  done            2    0        int 
  2290 ;;  cp              2    0        PTR unsigned char 
  2291 ;;  c               1    0        unsigned char 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  2   46[BANK0 ] int 
  2294 ;; Registers used:
  2295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2301 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2302 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2303 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2304 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2305 ;;Total ram usage:       16 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; Hardware stack levels required when called:    5
  2308 ;; This function calls:
  2309 ;;		_dtoa
  2310 ;;		_fputc
  2311 ;; This function is called by:
  2312 ;;		_vfprintf
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           
  2317                           ;psect for function _vfpfcnvrt
  2318  0405                     _vfpfcnvrt:	
  2319                           
  2320                           ;incstack = 0
  2321                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2322                           ;vfpfcnvrt@fp stored from wreg
  2323  0405  0020               	movlb	0	; select bank0
  2324  0406  00DD               	movwf	vfpfcnvrt@fp
  2325                           
  2326                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 670: static int vfpfcn
      +                          vrt(FILE *fp, char *fmt[], va_list ap);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\c
      +                          ommon\doprnt.c: 671: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 
      +                          672:     char c, *cp, ct[3];;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\dopr
      +                          nt.c: 673:     int done, i;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprn
      +                          t.c: 674:     long long ll;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprn
      +                          t.c: 675:     unsigned long long llu;
  2327  0407  084E               	movf	vfpfcnvrt@fmt,w
  2328  0408  0086               	movwf	6
  2329  0409  0187               	clrf	7
  2330  040A  3F40               	moviw [0]fsr1
  2331  040B  00D0               	movwf	??_vfpfcnvrt
  2332  040C  3F41               	moviw [1]fsr1
  2333  040D  00D1               	movwf	??_vfpfcnvrt+1
  2334  040E  0850               	movf	??_vfpfcnvrt,w
  2335  040F  0084               	movwf	4
  2336  0410  0851               	movf	??_vfpfcnvrt+1,w
  2337  0411  0085               	movwf	5
  2338  0412  0012               	moviw fsr0++
  2339  0413  3A25               	xorlw	37
  2340  0414  1D03               	btfss	3,2
  2341  0415  2CB2               	goto	l1658
  2342                           
  2343                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 681:         ++*fmt;
  2344  0416  084E               	movf	vfpfcnvrt@fmt,w
  2345  0417  0086               	movwf	6
  2346  0418  0187               	clrf	7
  2347  0419  3001               	movlw	1
  2348  041A  0781               	addwf	1,f
  2349  041B  3141               	addfsr 1,1
  2350  041C  1803               	skipnc
  2351  041D  0A81               	incf	1,f
  2352                           
  2353                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 683:         flags = w
      +                          idth = 0;
  2354  041E  0021               	movlb	1	; select bank1
  2355  041F  01DA               	clrf	_width^(0+128)
  2356  0420  01DB               	clrf	(_width+1)^(0+128)
  2357  0421  0020               	movlb	0	; select bank0
  2358  0422  01ED               	clrf	_flags
  2359  0423  01EE               	clrf	_flags+1
  2360                           
  2361                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 684:         prec = -1
      +                          ;
  2362  0424  30FF               	movlw	255
  2363  0425  00EB               	movwf	_prec
  2364  0426  30FF               	movlw	255
  2365  0427  00EC               	movwf	_prec+1
  2366                           
  2367                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 825:         if ((*fmt
      +                          [0] == 'd') || (*fmt[0] == 'i')) {
  2368  0428  084E               	movf	vfpfcnvrt@fmt,w
  2369  0429  0086               	movwf	6
  2370  042A  0187               	clrf	7
  2371  042B  3F40               	moviw [0]fsr1
  2372  042C  00D0               	movwf	??_vfpfcnvrt
  2373  042D  3F41               	moviw [1]fsr1
  2374  042E  00D1               	movwf	??_vfpfcnvrt+1
  2375  042F  0850               	movf	??_vfpfcnvrt,w
  2376  0430  0084               	movwf	4
  2377  0431  0851               	movf	??_vfpfcnvrt+1,w
  2378  0432  0085               	movwf	5
  2379  0433  0012               	moviw fsr0++
  2380  0434  3A64               	xorlw	100
  2381  0435  1903               	btfsc	3,2
  2382  0436  2C46               	goto	l1634
  2383  0437  084E               	movf	vfpfcnvrt@fmt,w
  2384  0438  0086               	movwf	6
  2385  0439  0187               	clrf	7
  2386  043A  3F40               	moviw [0]fsr1
  2387  043B  00D0               	movwf	??_vfpfcnvrt
  2388  043C  3F41               	moviw [1]fsr1
  2389  043D  00D1               	movwf	??_vfpfcnvrt+1
  2390  043E  0850               	movf	??_vfpfcnvrt,w
  2391  043F  0084               	movwf	4
  2392  0440  0851               	movf	??_vfpfcnvrt+1,w
  2393  0441  0085               	movwf	5
  2394  0442  0012               	moviw fsr0++
  2395  0443  3A69               	xorlw	105
  2396  0444  1D03               	btfss	3,2
  2397  0445  2C80               	goto	l1642
  2398  0446                     l1634:	
  2399                           
  2400                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 827:             ++*fm
      +                          t;
  2401  0446  084E               	movf	vfpfcnvrt@fmt,w
  2402  0447  0086               	movwf	6
  2403  0448  0187               	clrf	7
  2404  0449  3001               	movlw	1
  2405  044A  0781               	addwf	1,f
  2406  044B  3141               	addfsr 1,1
  2407  044C  1803               	skipnc
  2408  044D  0A81               	incf	1,f
  2409                           
  2410                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 828:             ll = 
      +                          (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2411  044E  084F               	movf	vfpfcnvrt@ap,w
  2412  044F  0086               	movwf	6
  2413  0450  0187               	clrf	7
  2414  0451  0801               	movf	1,w
  2415  0452  0084               	movwf	4
  2416  0453  0185               	clrf	5
  2417  0454  3002               	movlw	2
  2418  0455  0781               	addwf	1,f
  2419  0456  3F00               	moviw [0]fsr0
  2420  0457  00D0               	movwf	??_vfpfcnvrt
  2421  0458  3F01               	moviw [1]fsr0
  2422  0459  00D1               	movwf	??_vfpfcnvrt+1
  2423  045A  0850               	movf	??_vfpfcnvrt,w
  2424  045B  00D5               	movwf	vfpfcnvrt@ll
  2425  045C  0851               	movf	??_vfpfcnvrt+1,w
  2426  045D  00D6               	movwf	vfpfcnvrt@ll+1
  2427  045E  0D89               	rlf	9,f
  2428  045F  3B89               	subwfb	9,f
  2429  0460  0989               	comf	9,f
  2430  0461  00D7               	movwf	vfpfcnvrt@ll+2
  2431  0462  00D8               	movwf	vfpfcnvrt@ll+3
  2432  0463  00D9               	movwf	vfpfcnvrt@ll+4
  2433  0464  00DA               	movwf	vfpfcnvrt@ll+5
  2434  0465  00DB               	movwf	vfpfcnvrt@ll+6
  2435  0466  00DC               	movwf	vfpfcnvrt@ll+7
  2436                           
  2437                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 830:             retur
      +                          n dtoa(fp, ll);
  2438  0467  0855               	movf	vfpfcnvrt@ll,w
  2439  0468  00B0               	movwf	dtoa@d
  2440  0469  0856               	movf	vfpfcnvrt@ll+1,w
  2441  046A  00B1               	movwf	dtoa@d+1
  2442  046B  0857               	movf	vfpfcnvrt@ll+2,w
  2443  046C  00B2               	movwf	dtoa@d+2
  2444  046D  0858               	movf	vfpfcnvrt@ll+3,w
  2445  046E  00B3               	movwf	dtoa@d+3
  2446  046F  0859               	movf	vfpfcnvrt@ll+4,w
  2447  0470  00B4               	movwf	dtoa@d+4
  2448  0471  085A               	movf	vfpfcnvrt@ll+5,w
  2449  0472  00B5               	movwf	dtoa@d+5
  2450  0473  085B               	movf	vfpfcnvrt@ll+6,w
  2451  0474  00B6               	movwf	dtoa@d+6
  2452  0475  085C               	movf	vfpfcnvrt@ll+7,w
  2453  0476  00B7               	movwf	dtoa@d+7
  2454  0477  085D               	movf	vfpfcnvrt@fp,w
  2455  0478  3186  26A4         	fcall	_dtoa
  2456  047A  0020               	movlb	0	; select bank0
  2457  047B  0831               	movf	?_dtoa+1,w
  2458  047C  00CF               	movwf	?_vfpfcnvrt+1
  2459  047D  0830               	movf	?_dtoa,w
  2460  047E  00CE               	movwf	?_vfpfcnvrt
  2461  047F  0008               	return
  2462  0480                     l1642:	
  2463                           
  2464                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1350:         if ((*fm
      +                          t)[0] == '%') {
  2465  0480  084E               	movf	vfpfcnvrt@fmt,w
  2466  0481  0086               	movwf	6
  2467  0482  0187               	clrf	7
  2468  0483  3F40               	moviw [0]fsr1
  2469  0484  00D0               	movwf	??_vfpfcnvrt
  2470  0485  3F41               	moviw [1]fsr1
  2471  0486  00D1               	movwf	??_vfpfcnvrt+1
  2472  0487  0850               	movf	??_vfpfcnvrt,w
  2473  0488  0084               	movwf	4
  2474  0489  0851               	movf	??_vfpfcnvrt+1,w
  2475  048A  0085               	movwf	5
  2476  048B  0012               	moviw fsr0++
  2477  048C  3A25               	xorlw	37
  2478  048D  1D03               	btfss	3,2
  2479  048E  2CA7               	goto	l1652
  2480                           
  2481                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1351:             ++*f
      +                          mt;
  2482  048F  084E               	movf	vfpfcnvrt@fmt,w
  2483  0490  0086               	movwf	6
  2484  0491  0187               	clrf	7
  2485  0492  3001               	movlw	1
  2486  0493  0781               	addwf	1,f
  2487  0494  3141               	addfsr 1,1
  2488  0495  1803               	skipnc
  2489  0496  0A81               	incf	1,f
  2490                           
  2491                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1352:             fput
      +                          c((int)'%', fp);
  2492  0497  3025               	movlw	37
  2493  0498  00F0               	movwf	fputc@c
  2494  0499  3000               	movlw	0
  2495  049A  00F1               	movwf	fputc@c+1
  2496  049B  085D               	movf	vfpfcnvrt@fp,w
  2497  049C  00D0               	movwf	??_vfpfcnvrt
  2498  049D  0850               	movf	??_vfpfcnvrt,w
  2499  049E  00F2               	movwf	fputc@fp
  2500  049F  3182  226A         	fcall	_fputc
  2501  04A1                     l1648:	
  2502                           
  2503                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1353:             retu
      +                          rn 1;
  2504  04A1  3001               	movlw	1
  2505  04A2  0020               	movlb	0	; select bank0
  2506  04A3  00CE               	movwf	?_vfpfcnvrt
  2507  04A4  3000               	movlw	0
  2508  04A5  00CF               	movwf	?_vfpfcnvrt+1
  2509  04A6  0008               	return
  2510  04A7                     l1652:	
  2511                           
  2512                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1357:         ++*fmt;
  2513  04A7  084E               	movf	vfpfcnvrt@fmt,w
  2514  04A8  0086               	movwf	6
  2515  04A9  0187               	clrf	7
  2516  04AA  3001               	movlw	1
  2517  04AB  0781               	addwf	1,f
  2518  04AC  3141               	addfsr 1,1
  2519  04AD  1803               	skipnc
  2520  04AE  0A81               	incf	1,f
  2521                           
  2522                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1358:         return 0
      +                          ;
  2523  04AF  01CE               	clrf	?_vfpfcnvrt
  2524  04B0  01CF               	clrf	?_vfpfcnvrt+1
  2525  04B1  0008               	return
  2526  04B2                     l1658:	
  2527                           
  2528                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1362:     fputc((int)(
      +                          *fmt)[0], fp);
  2529  04B2  084E               	movf	vfpfcnvrt@fmt,w
  2530  04B3  0086               	movwf	6
  2531  04B4  0187               	clrf	7
  2532  04B5  3F40               	moviw [0]fsr1
  2533  04B6  00D0               	movwf	??_vfpfcnvrt
  2534  04B7  3F41               	moviw [1]fsr1
  2535  04B8  00D1               	movwf	??_vfpfcnvrt+1
  2536  04B9  0850               	movf	??_vfpfcnvrt,w
  2537  04BA  0084               	movwf	4
  2538  04BB  0851               	movf	??_vfpfcnvrt+1,w
  2539  04BC  0085               	movwf	5
  2540  04BD  0800               	movf	0,w	;code access
  2541  04BE  00D2               	movwf	??_vfpfcnvrt+2
  2542  04BF  01D3               	clrf	??_vfpfcnvrt+3
  2543  04C0  0852               	movf	??_vfpfcnvrt+2,w
  2544  04C1  00F0               	movwf	fputc@c
  2545  04C2  0853               	movf	??_vfpfcnvrt+3,w
  2546  04C3  00F1               	movwf	fputc@c+1
  2547  04C4  085D               	movf	vfpfcnvrt@fp,w
  2548  04C5  00D4               	movwf	??_vfpfcnvrt+4
  2549  04C6  0854               	movf	??_vfpfcnvrt+4,w
  2550  04C7  00F2               	movwf	fputc@fp
  2551  04C8  3182  226A  3184   	fcall	_fputc
  2552                           
  2553                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1363:     ++*fmt;
  2554  04CB  0020               	movlb	0	; select bank0
  2555  04CC  084E               	movf	vfpfcnvrt@fmt,w
  2556  04CD  0086               	movwf	6
  2557  04CE  0187               	clrf	7
  2558  04CF  3001               	movlw	1
  2559  04D0  0781               	addwf	1,f
  2560  04D1  3141               	addfsr 1,1
  2561  04D2  1803               	skipnc
  2562  04D3  0A81               	incf	1,f
  2563  04D4  2CA1               	goto	l1648
  2564  04D5                     __end_of_vfpfcnvrt:	
  2565                           
  2566                           	psect	text4
  2567  06A4                     __ptext4:	
  2568 ;; *************** function _dtoa *****************
  2569 ;; Defined at:
  2570 ;;		line 274 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;  fp              1    wreg     PTR struct _IO_FILE
  2573 ;;		 -> sprintf@f(5), 
  2574 ;;  d               8   16[BANK0 ] long long 
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
  2577 ;;		 -> sprintf@f(5), 
  2578 ;;  n               8   36[BANK0 ] long long 
  2579 ;;  i               2   44[BANK0 ] int 
  2580 ;;  s               2   34[BANK0 ] int 
  2581 ;;  w               2   32[BANK0 ] int 
  2582 ;;  p               2   30[BANK0 ] int 
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  2   16[BANK0 ] int 
  2585 ;; Registers used:
  2586 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2592 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2593 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2594 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2595 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2596 ;;Total ram usage:       30 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    4
  2599 ;; This function calls:
  2600 ;;		___aodiv
  2601 ;;		___aomod
  2602 ;;		_abs
  2603 ;;		_pad
  2604 ;; This function is called by:
  2605 ;;		_vfpfcnvrt
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           
  2610                           ;psect for function _dtoa
  2611  06A4                     _dtoa:	
  2612                           
  2613                           ;incstack = 0
  2614                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2615                           ;dtoa@fp stored from wreg
  2616  06A4  0020               	movlb	0	; select bank0
  2617  06A5  00BB               	movwf	dtoa@fp
  2618                           
  2619                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 274: static int dtoa(F
      +                          ILE *fp, long long d);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 2
      +                          75: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 276:     int i, p
      +                          , s, w;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 277:     long l
      +                          ong n;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 280:     n = d;
  2620  06A6  0830               	movf	dtoa@d,w
  2621  06A7  00C4               	movwf	dtoa@n
  2622  06A8  0831               	movf	dtoa@d+1,w
  2623  06A9  00C5               	movwf	dtoa@n+1
  2624  06AA  0832               	movf	dtoa@d+2,w
  2625  06AB  00C6               	movwf	dtoa@n+2
  2626  06AC  0833               	movf	dtoa@d+3,w
  2627  06AD  00C7               	movwf	dtoa@n+3
  2628  06AE  0834               	movf	dtoa@d+4,w
  2629  06AF  00C8               	movwf	dtoa@n+4
  2630  06B0  0835               	movf	dtoa@d+5,w
  2631  06B1  00C9               	movwf	dtoa@n+5
  2632  06B2  0836               	movf	dtoa@d+6,w
  2633  06B3  00CA               	movwf	dtoa@n+6
  2634  06B4  0837               	movf	dtoa@d+7,w
  2635  06B5  00CB               	movwf	dtoa@n+7
  2636                           
  2637                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 281:     s = n < 0 ? 1
      +                           : 0;
  2638  06B6  3044               	movlw	low dtoa@n
  2639  06B7  0086               	movwf	6
  2640  06B8  3000               	movlw	high dtoa@n
  2641  06B9  0087               	movwf	7
  2642  06BA  3F47               	moviw [7]fsr1
  2643  06BB  00B8               	movwf	??_dtoa
  2644  06BC  1FB8               	btfss	??_dtoa,7
  2645  06BD  2EC0               	goto	u1360
  2646  06BE  3001               	movlw	1
  2647  06BF  2EC1               	goto	u1370
  2648  06C0                     u1360:	
  2649  06C0  3000               	movlw	0
  2650  06C1                     u1370:	
  2651  06C1  0020               	movlb	0	; select bank0
  2652  06C2  00B9               	movwf	??_dtoa+1
  2653  06C3  01BA               	clrf	??_dtoa+2
  2654  06C4  0839               	movf	??_dtoa+1,w
  2655  06C5  00C2               	movwf	dtoa@s
  2656  06C6  083A               	movf	??_dtoa+2,w
  2657  06C7  00C3               	movwf	dtoa@s+1
  2658                           
  2659                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 282:     if (s) {
  2660  06C8  0842               	movf	dtoa@s,w
  2661  06C9  0443               	iorwf	dtoa@s+1,w
  2662  06CA  1903               	btfsc	3,2
  2663  06CB  2EEA               	goto	l226
  2664                           
  2665                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 283:         n = -n;
  2666  06CC  09C4               	comf	dtoa@n,f
  2667  06CD  09C5               	comf	dtoa@n+1,f
  2668  06CE  09C6               	comf	dtoa@n+2,f
  2669  06CF  09C7               	comf	dtoa@n+3,f
  2670  06D0  09C8               	comf	dtoa@n+4,f
  2671  06D1  09C9               	comf	dtoa@n+5,f
  2672  06D2  09CA               	comf	dtoa@n+6,f
  2673  06D3  09CB               	comf	dtoa@n+7,f
  2674  06D4  0AC4               	incf	dtoa@n,f
  2675  06D5  1D03               	skipz
  2676  06D6  2EEA               	goto	l226
  2677  06D7  0AC5               	incf	dtoa@n+1,f
  2678  06D8  1D03               	skipz
  2679  06D9  2EEA               	goto	l226
  2680  06DA  0AC6               	incf	dtoa@n+2,f
  2681  06DB  1D03               	skipz
  2682  06DC  2EEA               	goto	l226
  2683  06DD  0AC7               	incf	dtoa@n+3,f
  2684  06DE  1D03               	skipz
  2685  06DF  2EEA               	goto	l226
  2686  06E0  0AC8               	incf	dtoa@n+4,f
  2687  06E1  1D03               	skipz
  2688  06E2  2EEA               	goto	l226
  2689  06E3  0AC9               	incf	dtoa@n+5,f
  2690  06E4  1D03               	skipz
  2691  06E5  2EEA               	goto	l226
  2692  06E6  0ACA               	incf	dtoa@n+6,f
  2693  06E7  1D03               	skipz
  2694  06E8  2EEA               	goto	l226
  2695  06E9  0ACB               	incf	dtoa@n+7,f
  2696  06EA                     l226:	
  2697                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 284:     }
  2698                           
  2699                           
  2700                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 287:     if (!(prec < 
      +                          0)) {
  2701  06EA  0020               	movlb	0	; select bank0
  2702  06EB  1BEC               	btfsc	_prec+1,7
  2703  06EC  2EF1               	goto	l227
  2704                           
  2705                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 288:         flags &= 
      +                          ~(1 << 1);
  2706  06ED  30FD               	movlw	253
  2707  06EE  05ED               	andwf	_flags,f
  2708  06EF  30FF               	movlw	255
  2709  06F0  05EE               	andwf	_flags+1,f
  2710  06F1                     l227:	
  2711                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 289:     }
  2712                           
  2713                           
  2714                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 290:     p = (0 < prec
      +                          ) ? prec : 1;
  2715  06F1  086C               	movf	_prec+1,w
  2716  06F2  3A80               	xorlw	128
  2717  06F3  00B8               	movwf	??_dtoa
  2718  06F4  3080               	movlw	128
  2719  06F5  0238               	subwf	??_dtoa,w
  2720  06F6  1D03               	skipz
  2721  06F7  2EFA               	goto	u1415
  2722  06F8  3001               	movlw	1
  2723  06F9  026B               	subwf	_prec,w
  2724  06FA                     u1415:	
  2725  06FA  1803               	skipnc
  2726  06FB  2F02               	goto	l1576
  2727  06FC  3001               	movlw	1
  2728  06FD  0020               	movlb	0	; select bank0
  2729  06FE  00BE               	movwf	dtoa@p
  2730  06FF  3000               	movlw	0
  2731  0700  00BF               	movwf	dtoa@p+1
  2732  0701  2F07               	goto	l231
  2733  0702                     l1576:	
  2734  0702  0020               	movlb	0	; select bank0
  2735  0703  086C               	movf	_prec+1,w
  2736  0704  00BF               	movwf	dtoa@p+1
  2737  0705  086B               	movf	_prec,w
  2738  0706  00BE               	movwf	dtoa@p
  2739  0707                     l231:	
  2740                           
  2741                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 291:     w = width;
  2742  0707  0021               	movlb	1	; select bank1
  2743  0708  085B               	movf	(_width+1)^(0+128),w
  2744  0709  0020               	movlb	0	; select bank0
  2745  070A  00C1               	movwf	dtoa@w+1
  2746  070B  0021               	movlb	1	; select bank1
  2747  070C  085A               	movf	_width^(0+128),w
  2748  070D  0020               	movlb	0	; select bank0
  2749  070E  00C0               	movwf	dtoa@w
  2750                           
  2751                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 292:     if (s || (fla
      +                          gs & (1 << 2))) {
  2752  070F  0842               	movf	dtoa@s,w
  2753  0710  0443               	iorwf	dtoa@s+1,w
  2754  0711  1D03               	btfss	3,2
  2755  0712  2F15               	goto	l1582
  2756  0713  1D6D               	btfss	_flags,2
  2757  0714  2F19               	goto	l232
  2758  0715                     l1582:	
  2759                           
  2760                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 293:         --w;
  2761  0715  30FF               	movlw	255
  2762  0716  07C0               	addwf	dtoa@w,f
  2763  0717  30FF               	movlw	255
  2764  0718  3DC1               	addwfc	dtoa@w+1,f
  2765  0719                     l232:	
  2766                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 294:     }
  2767                           
  2768                           
  2769                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 297:     i = sizeof(db
      +                          uf) - 1;
  2770  0719  301F               	movlw	31
  2771  071A  00CC               	movwf	dtoa@i
  2772  071B  3000               	movlw	0
  2773  071C  00CD               	movwf	dtoa@i+1
  2774                           
  2775                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 298:     dbuf[i] = '\0
      +                          ';
  2776  071D  0022               	movlb	2	; select bank2
  2777  071E  01BF               	clrf	(_dbuf^(0+256)+31)
  2778                           
  2779                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 299:     while (!(i < 
      +                          1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2780  071F  2FAE               	goto	l235
  2781  0720                     l1596:	
  2782  0720  0020               	movlb	0	; select bank0
  2783  0721  0844               	movf	dtoa@n,w
  2784  0722  0445               	iorwf	dtoa@n+1,w
  2785  0723  0446               	iorwf	dtoa@n+2,w
  2786  0724  0447               	iorwf	dtoa@n+3,w
  2787  0725  0448               	iorwf	dtoa@n+4,w
  2788  0726  0449               	iorwf	dtoa@n+5,w
  2789  0727  044A               	iorwf	dtoa@n+6,w
  2790  0728  044B               	iorwf	dtoa@n+7,w
  2791  0729  1D03               	skipz
  2792  072A  2F45               	goto	l1586
  2793  072B  083F               	movf	dtoa@p+1,w
  2794  072C  3A80               	xorlw	128
  2795  072D  00B8               	movwf	??_dtoa
  2796  072E  3080               	movlw	128
  2797  072F  0238               	subwf	??_dtoa,w
  2798  0730  1D03               	skipz
  2799  0731  2F34               	goto	u1465
  2800  0732  3001               	movlw	1
  2801  0733  023E               	subwf	dtoa@p,w
  2802  0734                     u1465:	
  2803  0734  1803               	skipnc
  2804  0735  2F45               	goto	l1586
  2805  0736  0020               	movlb	0	; select bank0
  2806  0737  0841               	movf	dtoa@w+1,w
  2807  0738  3A80               	xorlw	128
  2808  0739  00B8               	movwf	??_dtoa
  2809  073A  3080               	movlw	128
  2810  073B  0238               	subwf	??_dtoa,w
  2811  073C  1D03               	skipz
  2812  073D  2F40               	goto	u1475
  2813  073E  3001               	movlw	1
  2814  073F  0240               	subwf	dtoa@w,w
  2815  0740                     u1475:	
  2816  0740  1C03               	skipc
  2817  0741  2FBA               	goto	l1604
  2818  0742  0020               	movlb	0	; select bank0
  2819  0743  1CED               	btfss	_flags,1
  2820  0744  2FBA               	goto	l1604
  2821  0745                     l1586:	
  2822                           
  2823                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 300:         --i;
  2824  0745  30FF               	movlw	255
  2825  0746  0020               	movlb	0	; select bank0
  2826  0747  07CC               	addwf	dtoa@i,f
  2827  0748  30FF               	movlw	255
  2828  0749  3DCD               	addwfc	dtoa@i+1,f
  2829                           
  2830                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 301:         dbuf[i] =
      +                           '0' + abs(n % 10);
  2831  074A  300A               	movlw	10
  2832  074B  00A0               	movwf	___aomod@divisor
  2833  074C  01A1               	clrf	___aomod@divisor+1
  2834  074D  01A2               	clrf	___aomod@divisor+2
  2835  074E  01A3               	clrf	___aomod@divisor+3
  2836  074F  01A4               	clrf	___aomod@divisor+4
  2837  0750  01A5               	clrf	___aomod@divisor+5
  2838  0751  01A6               	clrf	___aomod@divisor+6
  2839  0752  01A7               	clrf	___aomod@divisor+7
  2840  0753  0844               	movf	dtoa@n,w
  2841  0754  00A8               	movwf	___aomod@dividend
  2842  0755  0845               	movf	dtoa@n+1,w
  2843  0756  00A9               	movwf	___aomod@dividend+1
  2844  0757  0846               	movf	dtoa@n+2,w
  2845  0758  00AA               	movwf	___aomod@dividend+2
  2846  0759  0847               	movf	dtoa@n+3,w
  2847  075A  00AB               	movwf	___aomod@dividend+3
  2848  075B  0848               	movf	dtoa@n+4,w
  2849  075C  00AC               	movwf	___aomod@dividend+4
  2850  075D  0849               	movf	dtoa@n+5,w
  2851  075E  00AD               	movwf	___aomod@dividend+5
  2852  075F  084A               	movf	dtoa@n+6,w
  2853  0760  00AE               	movwf	___aomod@dividend+6
  2854  0761  084B               	movf	dtoa@n+7,w
  2855  0762  00AF               	movwf	___aomod@dividend+7
  2856  0763  3184  24D5  3186   	fcall	___aomod
  2857  0766  0020               	movlb	0	; select bank0
  2858  0767  0821               	movf	?___aomod+1,w
  2859  0768  00F4               	movwf	abs@a+1
  2860  0769  0820               	movf	?___aomod,w
  2861  076A  00F3               	movwf	abs@a
  2862  076B  3181  2149  3186   	fcall	_abs
  2863  076E  0873               	movf	?_abs,w
  2864  076F  3E30               	addlw	48
  2865  0770  0020               	movlb	0	; select bank0
  2866  0771  00B8               	movwf	??_dtoa
  2867  0772  084C               	movf	dtoa@i,w
  2868  0773  3E20               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2869  0774  0086               	movwf	6
  2870  0775  3001               	movlw	1	; select bank2/3
  2871  0776  0087               	movwf	7
  2872  0777  0838               	movf	??_dtoa,w
  2873  0778  0081               	movwf	1
  2874                           
  2875                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 302:         --p;
  2876  0779  30FF               	movlw	255
  2877  077A  07BE               	addwf	dtoa@p,f
  2878  077B  30FF               	movlw	255
  2879  077C  3DBF               	addwfc	dtoa@p+1,f
  2880                           
  2881                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 303:         --w;
  2882  077D  30FF               	movlw	255
  2883  077E  07C0               	addwf	dtoa@w,f
  2884  077F  30FF               	movlw	255
  2885  0780  3DC1               	addwfc	dtoa@w+1,f
  2886                           
  2887                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 304:         n = n / 1
      +                          0;
  2888  0781  300A               	movlw	10
  2889  0782  00A0               	movwf	___aodiv@divisor
  2890  0783  01A1               	clrf	___aodiv@divisor+1
  2891  0784  01A2               	clrf	___aodiv@divisor+2
  2892  0785  01A3               	clrf	___aodiv@divisor+3
  2893  0786  01A4               	clrf	___aodiv@divisor+4
  2894  0787  01A5               	clrf	___aodiv@divisor+5
  2895  0788  01A6               	clrf	___aodiv@divisor+6
  2896  0789  01A7               	clrf	___aodiv@divisor+7
  2897  078A  0844               	movf	dtoa@n,w
  2898  078B  00A8               	movwf	___aodiv@dividend
  2899  078C  0845               	movf	dtoa@n+1,w
  2900  078D  00A9               	movwf	___aodiv@dividend+1
  2901  078E  0846               	movf	dtoa@n+2,w
  2902  078F  00AA               	movwf	___aodiv@dividend+2
  2903  0790  0847               	movf	dtoa@n+3,w
  2904  0791  00AB               	movwf	___aodiv@dividend+3
  2905  0792  0848               	movf	dtoa@n+4,w
  2906  0793  00AC               	movwf	___aodiv@dividend+4
  2907  0794  0849               	movf	dtoa@n+5,w
  2908  0795  00AD               	movwf	___aodiv@dividend+5
  2909  0796  084A               	movf	dtoa@n+6,w
  2910  0797  00AE               	movwf	___aodiv@dividend+6
  2911  0798  084B               	movf	dtoa@n+7,w
  2912  0799  00AF               	movwf	___aodiv@dividend+7
  2913  079A  3185  25B1  3186   	fcall	___aodiv
  2914  079D  0020               	movlb	0	; select bank0
  2915  079E  0820               	movf	?___aodiv,w
  2916  079F  00C4               	movwf	dtoa@n
  2917  07A0  0821               	movf	?___aodiv+1,w
  2918  07A1  00C5               	movwf	dtoa@n+1
  2919  07A2  0822               	movf	?___aodiv+2,w
  2920  07A3  00C6               	movwf	dtoa@n+2
  2921  07A4  0823               	movf	?___aodiv+3,w
  2922  07A5  00C7               	movwf	dtoa@n+3
  2923  07A6  0824               	movf	?___aodiv+4,w
  2924  07A7  00C8               	movwf	dtoa@n+4
  2925  07A8  0825               	movf	?___aodiv+5,w
  2926  07A9  00C9               	movwf	dtoa@n+5
  2927  07AA  0826               	movf	?___aodiv+6,w
  2928  07AB  00CA               	movwf	dtoa@n+6
  2929  07AC  0827               	movf	?___aodiv+7,w
  2930  07AD  00CB               	movwf	dtoa@n+7
  2931  07AE                     l235:	
  2932                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 305:     }
  2933                           
  2934                           
  2935                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 299:     while (!(i < 
      +                          1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2936  07AE  0020               	movlb	0	; select bank0
  2937  07AF  084D               	movf	dtoa@i+1,w
  2938  07B0  3A80               	xorlw	128
  2939  07B1  00B8               	movwf	??_dtoa
  2940  07B2  3080               	movlw	128
  2941  07B3  0238               	subwf	??_dtoa,w
  2942  07B4  1D03               	skipz
  2943  07B5  2FB8               	goto	u1445
  2944  07B6  3001               	movlw	1
  2945  07B7  024C               	subwf	dtoa@i,w
  2946  07B8                     u1445:	
  2947  07B8  1803               	btfsc	3,0
  2948  07B9  2F20               	goto	l1596
  2949  07BA                     l1604:	
  2950                           
  2951                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 308:     if (s || (fla
      +                          gs & (1 << 2))) {
  2952  07BA  0020               	movlb	0	; select bank0
  2953  07BB  0842               	movf	dtoa@s,w
  2954  07BC  0443               	iorwf	dtoa@s+1,w
  2955  07BD  1D03               	btfss	3,2
  2956  07BE  2FC1               	goto	l1608
  2957  07BF  1D6D               	btfss	_flags,2
  2958  07C0  2FD8               	goto	l1618
  2959  07C1                     l1608:	
  2960                           
  2961                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 309:         --i;
  2962  07C1  30FF               	movlw	255
  2963  07C2  07CC               	addwf	dtoa@i,f
  2964  07C3  30FF               	movlw	255
  2965  07C4  3DCD               	addwfc	dtoa@i+1,f
  2966                           
  2967                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 310:         dbuf[i] =
      +                           s ? '-' : '+';
  2968  07C5  0842               	movf	dtoa@s,w
  2969  07C6  0443               	iorwf	dtoa@s+1,w
  2970  07C7  1D03               	btfss	3,2
  2971  07C8  2FCB               	goto	l1614
  2972  07C9  302B               	movlw	43
  2973  07CA  2FCC               	goto	L1
  2974  07CB                     l1614:	
  2975  07CB  302D               	movlw	45
  2976  07CC                     L1:	
  2977  07CC  00BC               	movwf	_dtoa$251
  2978  07CD  3000               	movlw	0
  2979  07CE  00BD               	movwf	_dtoa$251+1
  2980  07CF  083C               	movf	_dtoa$251,w
  2981  07D0  00B8               	movwf	??_dtoa
  2982  07D1  084C               	movf	dtoa@i,w
  2983  07D2  3E20               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2984  07D3  0086               	movwf	6
  2985  07D4  3001               	movlw	1	; select bank2/3
  2986  07D5  0087               	movwf	7
  2987  07D6  0838               	movf	??_dtoa,w
  2988  07D7  0081               	movwf	1
  2989  07D8                     l1618:	
  2990                           
  2991                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 314:     return pad(fp
      +                          , &dbuf[i], w);
  2992  07D8  084C               	movf	dtoa@i,w
  2993  07D9  3E20               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2994  07DA  00B8               	movwf	??_dtoa
  2995  07DB  0838               	movf	??_dtoa,w
  2996  07DC  00A4               	movwf	pad@buf
  2997  07DD  0841               	movf	dtoa@w+1,w
  2998  07DE  00A6               	movwf	pad@p+1
  2999  07DF  0840               	movf	dtoa@w,w
  3000  07E0  00A5               	movwf	pad@p
  3001  07E1  083B               	movf	dtoa@fp,w
  3002  07E2  3182  22F6         	fcall	_pad
  3003  07E4  0020               	movlb	0	; select bank0
  3004  07E5  0825               	movf	?_pad+1,w
  3005  07E6  00B1               	movwf	?_dtoa+1
  3006  07E7  0824               	movf	?_pad,w
  3007  07E8  00B0               	movwf	?_dtoa
  3008  07E9  0008               	return
  3009  07EA                     __end_of_dtoa:	
  3010                           
  3011                           	psect	text5
  3012  02F6                     __ptext5:	
  3013 ;; *************** function _pad *****************
  3014 ;; Defined at:
  3015 ;;		line 72 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  fp              1    wreg     PTR struct _IO_FILE
  3018 ;;		 -> sprintf@f(5), 
  3019 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  3020 ;;		 -> dbuf(32), 
  3021 ;;  p               2    5[BANK0 ] int 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  3024 ;;		 -> sprintf@f(5), 
  3025 ;;  w               2    9[BANK0 ] int 
  3026 ;;  i               2    7[BANK0 ] int 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  2    4[BANK0 ] int 
  3029 ;; Registers used:
  3030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3036 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3037 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3039 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3040 ;;Total ram usage:        9 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    3
  3043 ;; This function calls:
  3044 ;;		_fputc
  3045 ;;		_fputs
  3046 ;;		_strlen
  3047 ;; This function is called by:
  3048 ;;		_dtoa
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function _pad
  3054  02F6                     _pad:	
  3055                           
  3056                           ;incstack = 0
  3057                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3058                           ;pad@fp stored from wreg
  3059  02F6  0020               	movlb	0	; select bank0
  3060  02F7  00AB               	movwf	pad@fp
  3061                           
  3062                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 72: static int pad(FIL
      +                          E *fp, char *buf, int p);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c
      +                          : 73: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 74:     int i, 
      +                          w;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 77:     if (flags & 
      +                          (1 << 0)) {
  3063  02F8  1C6D               	btfss	_flags,0
  3064  02F9  2B02               	goto	l1546
  3065                           
  3066                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 78:         fputs((con
      +                          st char *)buf, fp);
  3067  02FA  082B               	movf	pad@fp,w
  3068  02FB  00FC               	movwf	??_pad
  3069  02FC  087C               	movf	??_pad,w
  3070  02FD  00F8               	movwf	fputs@fp
  3071  02FE  0824               	movf	pad@buf,w
  3072  02FF  3181  21BF  3182   	fcall	_fputs
  3073  0302                     l1546:	
  3074                           
  3075                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 82:     w = (p < 0) ? 
      +                          0 : p;
  3076  0302  0020               	movlb	0	; select bank0
  3077  0303  1BA6               	btfsc	pad@p+1,7
  3078  0304  2B0A               	goto	l1550
  3079  0305  0826               	movf	pad@p+1,w
  3080  0306  00AA               	movwf	pad@w+1
  3081  0307  0825               	movf	pad@p,w
  3082  0308  00A9               	movwf	pad@w
  3083  0309  2B0C               	goto	l218
  3084  030A                     l1550:	
  3085  030A  01A9               	clrf	pad@w
  3086  030B  01AA               	clrf	pad@w+1
  3087  030C                     l218:	
  3088                           
  3089                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  3090  030C  01A7               	clrf	pad@i
  3091  030D  01A8               	clrf	pad@i+1
  3092  030E                     l1556:	
  3093                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 84:     while (i < w) 
      +                          {
  3094                           
  3095                           
  3096                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 84:     while (i < w) 
      +                          {
  3097  030E  0828               	movf	pad@i+1,w
  3098  030F  3A80               	xorlw	128
  3099  0310  00FC               	movwf	??_pad
  3100  0311  082A               	movf	pad@w+1,w
  3101  0312  3A80               	xorlw	128
  3102  0313  027C               	subwf	??_pad,w
  3103  0314  1D03               	skipz
  3104  0315  2B18               	goto	u1345
  3105  0316  0829               	movf	pad@w,w
  3106  0317  0227               	subwf	pad@i,w
  3107  0318                     u1345:	
  3108  0318  1803               	btfsc	3,0
  3109  0319  2B2C               	goto	l221
  3110                           
  3111                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 85:         fputc(' ',
      +                           fp);
  3112  031A  3020               	movlw	32
  3113  031B  00F0               	movwf	fputc@c
  3114  031C  3000               	movlw	0
  3115  031D  00F1               	movwf	fputc@c+1
  3116  031E  0020               	movlb	0	; select bank0
  3117  031F  082B               	movf	pad@fp,w
  3118  0320  00FC               	movwf	??_pad
  3119  0321  087C               	movf	??_pad,w
  3120  0322  00F2               	movwf	fputc@fp
  3121  0323  3182  226A  3182   	fcall	_fputc
  3122                           
  3123                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 86:         ++i;
  3124  0326  3001               	movlw	1
  3125  0327  0020               	movlb	0	; select bank0
  3126  0328  07A7               	addwf	pad@i,f
  3127  0329  3000               	movlw	0
  3128  032A  3DA8               	addwfc	pad@i+1,f
  3129  032B  2B0E               	goto	l1556
  3130  032C                     l221:	
  3131                           
  3132                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 90:     if (!(flags & 
      +                          (1 << 0))) {
  3133  032C  0020               	movlb	0	; select bank0
  3134  032D  186D               	btfsc	_flags,0
  3135  032E  2B37               	goto	l1560
  3136                           
  3137                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 91:         fputs((con
      +                          st char *)buf, fp);
  3138  032F  082B               	movf	pad@fp,w
  3139  0330  00FC               	movwf	??_pad
  3140  0331  087C               	movf	??_pad,w
  3141  0332  00F8               	movwf	fputs@fp
  3142  0333  0824               	movf	pad@buf,w
  3143  0334  3181  21BF  3182   	fcall	_fputs
  3144  0337                     l1560:	
  3145                           
  3146                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 94:     return strlen(
      +                          buf) + w;
  3147  0337  0020               	movlb	0	; select bank0
  3148  0338  0824               	movf	pad@buf,w
  3149  0339  00F0               	movwf	strlen@s
  3150  033A  3001               	movlw	1
  3151  033B  00F1               	movwf	strlen@s+1
  3152  033C  3181  2132         	fcall	_strlen
  3153  033E  0020               	movlb	0	; select bank0
  3154  033F  0829               	movf	pad@w,w
  3155  0340  0770               	addwf	?_strlen,w
  3156  0341  00A4               	movwf	?_pad
  3157  0342  082A               	movf	pad@w+1,w
  3158  0343  3D71               	addwfc	?_strlen+1,w
  3159  0344  00A5               	movwf	?_pad+1
  3160  0345  0008               	return
  3161  0346                     __end_of_pad:	
  3162                           
  3163                           	psect	text6
  3164  01BF                     __ptext6:	
  3165 ;; *************** function _fputs *****************
  3166 ;; Defined at:
  3167 ;;		line 8 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\nf_fputs.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  s               1    wreg     PTR const unsigned char 
  3170 ;;		 -> dbuf(32), 
  3171 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  3172 ;;		 -> sprintf@f(5), 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  3175 ;;		 -> dbuf(32), 
  3176 ;;  i               2    1[BANK0 ] int 
  3177 ;;  c               1    0[BANK0 ] unsigned char 
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  2    8[COMMON] int 
  3180 ;; Registers used:
  3181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3187 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3188 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3189 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3190 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3191 ;;Total ram usage:        8 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    2
  3194 ;; This function calls:
  3195 ;;		_fputc
  3196 ;; This function is called by:
  3197 ;;		_pad
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           
  3202                           ;psect for function _fputs
  3203  01BF                     _fputs:	
  3204                           
  3205                           ;incstack = 0
  3206                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3207                           ;fputs@s stored from wreg
  3208  01BF  0020               	movlb	0	; select bank0
  3209  01C0  00A3               	movwf	fputs@s
  3210  01C1  01A1               	clrf	fputs@i
  3211  01C2  01A2               	clrf	fputs@i+1
  3212  01C3                     l1182:	
  3213  01C3  0821               	movf	fputs@i,w
  3214  01C4  0723               	addwf	fputs@s,w
  3215  01C5  00F9               	movwf	??_fputs
  3216  01C6  0879               	movf	??_fputs,w
  3217  01C7  0086               	movwf	6
  3218  01C8  3001               	movlw	1	; select bank2/3
  3219  01C9  0087               	movwf	7
  3220  01CA  0801               	movf	1,w
  3221  01CB  00FA               	movwf	??_fputs+1
  3222  01CC  087A               	movf	??_fputs+1,w
  3223  01CD  00A0               	movwf	fputs@c
  3224  01CE  0820               	movf	fputs@c,w
  3225  01CF  1903               	btfsc	3,2
  3226  01D0  0008               	return
  3227  01D1  0820               	movf	fputs@c,w
  3228  01D2  00F9               	movwf	??_fputs
  3229  01D3  01FA               	clrf	??_fputs+1
  3230  01D4  0879               	movf	??_fputs,w
  3231  01D5  00F0               	movwf	fputc@c
  3232  01D6  087A               	movf	??_fputs+1,w
  3233  01D7  00F1               	movwf	fputc@c+1
  3234  01D8  0878               	movf	fputs@fp,w
  3235  01D9  00FB               	movwf	??_fputs+2
  3236  01DA  087B               	movf	??_fputs+2,w
  3237  01DB  00F2               	movwf	fputc@fp
  3238  01DC  3182  226A  3181   	fcall	_fputc
  3239  01DF  3001               	movlw	1
  3240  01E0  0020               	movlb	0	; select bank0
  3241  01E1  07A1               	addwf	fputs@i,f
  3242  01E2  3000               	movlw	0
  3243  01E3  3DA2               	addwfc	fputs@i+1,f
  3244  01E4  29C3               	goto	l1182
  3245  01E5                     __end_of_fputs:	
  3246                           
  3247                           	psect	text7
  3248  026A                     __ptext7:	
  3249 ;; *************** function _fputc *****************
  3250 ;; Defined at:
  3251 ;;		line 8 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\nf_fputc.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  c               2    0[COMMON] int 
  3254 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  3255 ;;		 -> sprintf@f(5), 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;		None
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  2    0[COMMON] int 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3267 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3269 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3270 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3271 ;;Total ram usage:        8 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    1
  3274 ;; This function calls:
  3275 ;;		_putch
  3276 ;; This function is called by:
  3277 ;;		_pad
  3278 ;;		_vfpfcnvrt
  3279 ;;		_fputs
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           
  3284                           ;psect for function _fputc
  3285  026A                     _fputc:	
  3286                           
  3287                           ;incstack = 0
  3288                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3289  026A  0872               	movf	fputc@fp,w
  3290  026B  1D03               	btfss	3,2
  3291  026C  0872               	movf	fputc@fp,w
  3292  026D  1D03               	btfss	3,2
  3293  026E  2A73               	goto	l1156
  3294  026F  0870               	movf	fputc@c,w
  3295  0270  3181  211E         	fcall	_putch
  3296  0272  0008               	return
  3297  0273                     l1156:	
  3298  0273  0872               	movf	fputc@fp,w
  3299  0274  3E03               	addlw	3
  3300  0275  0086               	movwf	6
  3301  0276  0187               	clrf	7
  3302  0277  0016               	moviw fsr1++
  3303  0278  0401               	iorwf	1,w
  3304  0279  1903               	btfsc	3,2
  3305  027A  2A96               	goto	l1160
  3306  027B  0872               	movf	fputc@fp,w
  3307  027C  3E03               	addlw	3
  3308  027D  0086               	movwf	6
  3309  027E  0187               	clrf	7
  3310  027F  3F40               	moviw [0]fsr1
  3311  0280  00F3               	movwf	??_fputc
  3312  0281  3F41               	moviw [1]fsr1
  3313  0282  00F4               	movwf	??_fputc+1
  3314  0283  0A72               	incf	fputc@fp,w
  3315  0284  0086               	movwf	6
  3316  0285  0187               	clrf	7
  3317  0286  3F40               	moviw [0]fsr1
  3318  0287  00F5               	movwf	??_fputc+2
  3319  0288  3F41               	moviw [1]fsr1
  3320  0289  00F6               	movwf	??_fputc+3
  3321  028A  0876               	movf	??_fputc+3,w
  3322  028B  3A80               	xorlw	128
  3323  028C  00F7               	movwf	??_fputc+4
  3324  028D  0874               	movf	??_fputc+1,w
  3325  028E  3A80               	xorlw	128
  3326  028F  0277               	subwf	??_fputc+4,w
  3327  0290  1D03               	skipz
  3328  0291  2A94               	goto	u695
  3329  0292  0873               	movf	??_fputc,w
  3330  0293  0275               	subwf	??_fputc+2,w
  3331  0294                     u695:	
  3332  0294  1803               	skipnc
  3333  0295  0008               	return
  3334  0296                     l1160:	
  3335  0296  0870               	movf	fputc@c,w
  3336  0297  00F3               	movwf	??_fputc
  3337  0298  0872               	movf	fputc@fp,w
  3338  0299  0086               	movwf	6
  3339  029A  0187               	clrf	7
  3340  029B  0A72               	incf	fputc@fp,w
  3341  029C  0084               	movwf	4
  3342  029D  0185               	clrf	5
  3343  029E  0800               	movf	0,w
  3344  029F  0701               	addwf	1,w
  3345  02A0  00F4               	movwf	??_fputc+1
  3346  02A1  0874               	movf	??_fputc+1,w
  3347  02A2  0086               	movwf	6
  3348  02A3  0187               	clrf	7
  3349  02A4  0873               	movf	??_fputc,w
  3350  02A5  0081               	movwf	1
  3351  02A6  0A72               	incf	fputc@fp,w
  3352  02A7  0086               	movwf	6
  3353  02A8  0187               	clrf	7
  3354  02A9  3001               	movlw	1
  3355  02AA  0781               	addwf	1,f
  3356  02AB  3141               	addfsr 1,1
  3357  02AC  1803               	skipnc
  3358  02AD  0A81               	incf	1,f
  3359  02AE  0008               	return
  3360  02AF                     __end_of_fputc:	
  3361                           
  3362                           	psect	text8
  3363  011E                     __ptext8:	
  3364 ;; *************** function _putch *****************
  3365 ;; Defined at:
  3366 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\putch.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  c               1    wreg     unsigned char 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;  c               1    0[COMMON] unsigned char 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  1    wreg      void 
  3373 ;; Registers used:
  3374 ;;		wreg
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3384 ;;Total ram usage:        0 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; This function calls:
  3387 ;;		Nothing
  3388 ;; This function is called by:
  3389 ;;		_fputc
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           
  3394                           ;psect for function _putch
  3395  011E                     _putch:	
  3396                           
  3397                           ;incstack = 0
  3398                           ; Regs used in _putch: [wreg]
  3399  011E  0008               	return
  3400  011F                     __end_of_putch:	
  3401                           
  3402                           	psect	text9
  3403  0149                     __ptext9:	
  3404 ;; *************** function _abs *****************
  3405 ;; Defined at:
  3406 ;;		line 1 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\abs.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  a               2    3[COMMON] int 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  2    3[COMMON] int 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3420 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3422 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3423 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3424 ;;Total ram usage:        4 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; This function calls:
  3427 ;;		Nothing
  3428 ;; This function is called by:
  3429 ;;		_dtoa
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           
  3434                           ;psect for function _abs
  3435  0149                     _abs:	
  3436                           
  3437                           ;incstack = 0
  3438                           ; Regs used in _abs: [wreg+status,2+status,0]
  3439  0149  0874               	movf	abs@a+1,w
  3440  014A  3A80               	xorlw	128
  3441  014B  00F5               	movwf	??_abs
  3442  014C  3080               	movlw	128
  3443  014D  0275               	subwf	??_abs,w
  3444  014E  1D03               	skipz
  3445  014F  2952               	goto	u765
  3446  0150  3001               	movlw	1
  3447  0151  0273               	subwf	abs@a,w
  3448  0152                     u765:	
  3449  0152  1803               	skipnc
  3450  0153  0008               	return
  3451  0154  0973               	comf	abs@a,w
  3452  0155  00F5               	movwf	??_abs
  3453  0156  0974               	comf	abs@a+1,w
  3454  0157  00F6               	movwf	??_abs+1
  3455  0158  0AF5               	incf	??_abs,f
  3456  0159  1903               	skipnz
  3457  015A  0AF6               	incf	??_abs+1,f
  3458  015B  0875               	movf	??_abs,w
  3459  015C  00F3               	movwf	?_abs
  3460  015D  0876               	movf	??_abs+1,w
  3461  015E  00F4               	movwf	?_abs+1
  3462  015F  0008               	return
  3463  0160                     __end_of_abs:	
  3464                           
  3465                           	psect	text10
  3466  04D5                     __ptext10:	
  3467 ;; *************** function ___aomod *****************
  3468 ;; Defined at:
  3469 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aomod.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  divisor         8    0[BANK0 ] long long 
  3472 ;;  dividend        8    8[BANK0 ] long long 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  sign            1    2[COMMON] unsigned char 
  3475 ;;  counter         1    1[COMMON] unsigned char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  8    0[BANK0 ] long long 
  3478 ;; Registers used:
  3479 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3485 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3487 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3488 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3489 ;;Total ram usage:       19 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_dtoa
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           
  3499                           ;psect for function ___aomod
  3500  04D5                     ___aomod:	
  3501                           
  3502                           ;incstack = 0
  3503                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
  3504  04D5  01F2               	clrf	___aomod@sign
  3505  04D6  3028               	movlw	low ___aomod@dividend
  3506  04D7  0086               	movwf	6
  3507  04D8  3000               	movlw	high ___aomod@dividend
  3508  04D9  0087               	movwf	7
  3509  04DA  3F47               	moviw [7]fsr1
  3510  04DB  00F0               	movwf	??___aomod
  3511  04DC  1FF0               	btfss	??___aomod,7
  3512  04DD  2CFF               	goto	l1254
  3513  04DE  0020               	movlb	0	; select bank0
  3514  04DF  09A8               	comf	___aomod@dividend,f
  3515  04E0  09A9               	comf	___aomod@dividend+1,f
  3516  04E1  09AA               	comf	___aomod@dividend+2,f
  3517  04E2  09AB               	comf	___aomod@dividend+3,f
  3518  04E3  09AC               	comf	___aomod@dividend+4,f
  3519  04E4  09AD               	comf	___aomod@dividend+5,f
  3520  04E5  09AE               	comf	___aomod@dividend+6,f
  3521  04E6  09AF               	comf	___aomod@dividend+7,f
  3522  04E7  0AA8               	incf	___aomod@dividend,f
  3523  04E8  1D03               	skipz
  3524  04E9  2CFD               	goto	u89lld
  3525  04EA  0AA9               	incf	___aomod@dividend+1,f
  3526  04EB  1D03               	skipz
  3527  04EC  2CFD               	goto	u89lld
  3528  04ED  0AAA               	incf	___aomod@dividend+2,f
  3529  04EE  1D03               	skipz
  3530  04EF  2CFD               	goto	u89lld
  3531  04F0  0AAB               	incf	___aomod@dividend+3,f
  3532  04F1  1D03               	skipz
  3533  04F2  2CFD               	goto	u89lld
  3534  04F3  0AAC               	incf	___aomod@dividend+4,f
  3535  04F4  1D03               	skipz
  3536  04F5  2CFD               	goto	u89lld
  3537  04F6  0AAD               	incf	___aomod@dividend+5,f
  3538  04F7  1D03               	skipz
  3539  04F8  2CFD               	goto	u89lld
  3540  04F9  0AAE               	incf	___aomod@dividend+6,f
  3541  04FA  1D03               	skipz
  3542  04FB  2CFD               	goto	u89lld
  3543  04FC  0AAF               	incf	___aomod@dividend+7,f
  3544  04FD                     u89lld:	
  3545  04FD  01F2               	clrf	___aomod@sign
  3546  04FE  0AF2               	incf	___aomod@sign,f
  3547  04FF                     l1254:	
  3548  04FF  3020               	movlw	low ___aomod@divisor
  3549  0500  0086               	movwf	6
  3550  0501  3000               	movlw	high ___aomod@divisor
  3551  0502  0087               	movwf	7
  3552  0503  3F47               	moviw [7]fsr1
  3553  0504  00F0               	movwf	??___aomod
  3554  0505  1FF0               	btfss	??___aomod,7
  3555  0506  2D26               	goto	l1258
  3556  0507  0020               	movlb	0	; select bank0
  3557  0508  09A0               	comf	___aomod@divisor,f
  3558  0509  09A1               	comf	___aomod@divisor+1,f
  3559  050A  09A2               	comf	___aomod@divisor+2,f
  3560  050B  09A3               	comf	___aomod@divisor+3,f
  3561  050C  09A4               	comf	___aomod@divisor+4,f
  3562  050D  09A5               	comf	___aomod@divisor+5,f
  3563  050E  09A6               	comf	___aomod@divisor+6,f
  3564  050F  09A7               	comf	___aomod@divisor+7,f
  3565  0510  0AA0               	incf	___aomod@divisor,f
  3566  0511  1D03               	skipz
  3567  0512  2D26               	goto	l1258
  3568  0513  0AA1               	incf	___aomod@divisor+1,f
  3569  0514  1D03               	skipz
  3570  0515  2D26               	goto	l1258
  3571  0516  0AA2               	incf	___aomod@divisor+2,f
  3572  0517  1D03               	skipz
  3573  0518  2D26               	goto	l1258
  3574  0519  0AA3               	incf	___aomod@divisor+3,f
  3575  051A  1D03               	skipz
  3576  051B  2D26               	goto	l1258
  3577  051C  0AA4               	incf	___aomod@divisor+4,f
  3578  051D  1D03               	skipz
  3579  051E  2D26               	goto	l1258
  3580  051F  0AA5               	incf	___aomod@divisor+5,f
  3581  0520  1D03               	skipz
  3582  0521  2D26               	goto	l1258
  3583  0522  0AA6               	incf	___aomod@divisor+6,f
  3584  0523  1D03               	skipz
  3585  0524  2D26               	goto	l1258
  3586  0525  0AA7               	incf	___aomod@divisor+7,f
  3587  0526                     l1258:	
  3588  0526  0020               	movlb	0	; select bank0
  3589  0527  0820               	movf	___aomod@divisor,w
  3590  0528  0421               	iorwf	___aomod@divisor+1,w
  3591  0529  0422               	iorwf	___aomod@divisor+2,w
  3592  052A  0423               	iorwf	___aomod@divisor+3,w
  3593  052B  0424               	iorwf	___aomod@divisor+4,w
  3594  052C  0425               	iorwf	___aomod@divisor+5,w
  3595  052D  0426               	iorwf	___aomod@divisor+6,w
  3596  052E  0427               	iorwf	___aomod@divisor+7,w
  3597  052F  1903               	skipnz
  3598  0530  2D7E               	goto	l1274
  3599  0531  01F1               	clrf	___aomod@counter
  3600  0532  0AF1               	incf	___aomod@counter,f
  3601  0533                     l1266:	
  3602  0533  1BA7               	btfsc	___aomod@divisor+7,7
  3603  0534  2D42               	goto	l1268
  3604  0535  35A0               	lslf	___aomod@divisor,f
  3605  0536  0DA1               	rlf	___aomod@divisor+1,f
  3606  0537  0DA2               	rlf	___aomod@divisor+2,f
  3607  0538  0DA3               	rlf	___aomod@divisor+3,f
  3608  0539  0DA4               	rlf	___aomod@divisor+4,f
  3609  053A  0DA5               	rlf	___aomod@divisor+5,f
  3610  053B  0DA6               	rlf	___aomod@divisor+6,f
  3611  053C  0DA7               	rlf	___aomod@divisor+7,f
  3612  053D  3001               	movlw	1
  3613  053E  00F0               	movwf	??___aomod
  3614  053F  0870               	movf	??___aomod,w
  3615  0540  07F1               	addwf	___aomod@counter,f
  3616  0541  2D33               	goto	l1266
  3617  0542                     l1268:	
  3618  0542  0827               	movf	___aomod@divisor+7,w
  3619  0543  022F               	subwf	___aomod@dividend+7,w
  3620  0544  1D03               	skipz
  3621  0545  2D60               	goto	u945
  3622  0546  0826               	movf	___aomod@divisor+6,w
  3623  0547  022E               	subwf	___aomod@dividend+6,w
  3624  0548  1D03               	skipz
  3625  0549  2D60               	goto	u945
  3626  054A  0825               	movf	___aomod@divisor+5,w
  3627  054B  022D               	subwf	___aomod@dividend+5,w
  3628  054C  1D03               	skipz
  3629  054D  2D60               	goto	u945
  3630  054E  0824               	movf	___aomod@divisor+4,w
  3631  054F  022C               	subwf	___aomod@dividend+4,w
  3632  0550  1D03               	skipz
  3633  0551  2D60               	goto	u945
  3634  0552  0823               	movf	___aomod@divisor+3,w
  3635  0553  022B               	subwf	___aomod@dividend+3,w
  3636  0554  1D03               	skipz
  3637  0555  2D60               	goto	u945
  3638  0556  0822               	movf	___aomod@divisor+2,w
  3639  0557  022A               	subwf	___aomod@dividend+2,w
  3640  0558  1D03               	skipz
  3641  0559  2D60               	goto	u945
  3642  055A  0821               	movf	___aomod@divisor+1,w
  3643  055B  0229               	subwf	___aomod@dividend+1,w
  3644  055C  1D03               	skipz
  3645  055D  2D60               	goto	u945
  3646  055E  0820               	movf	___aomod@divisor,w
  3647  055F  0228               	subwf	___aomod@dividend,w
  3648  0560                     u945:	
  3649  0560  1C03               	skipc
  3650  0561  2D72               	goto	l1272
  3651  0562  0820               	movf	___aomod@divisor,w
  3652  0563  02A8               	subwf	___aomod@dividend,f
  3653  0564  0821               	movf	___aomod@divisor+1,w
  3654  0565  3BA9               	subwfb	___aomod@dividend+1,f
  3655  0566  0822               	movf	___aomod@divisor+2,w
  3656  0567  3BAA               	subwfb	___aomod@dividend+2,f
  3657  0568  0823               	movf	___aomod@divisor+3,w
  3658  0569  3BAB               	subwfb	___aomod@dividend+3,f
  3659  056A  0824               	movf	___aomod@divisor+4,w
  3660  056B  3BAC               	subwfb	___aomod@dividend+4,f
  3661  056C  0825               	movf	___aomod@divisor+5,w
  3662  056D  3BAD               	subwfb	___aomod@dividend+5,f
  3663  056E  0826               	movf	___aomod@divisor+6,w
  3664  056F  3BAE               	subwfb	___aomod@dividend+6,f
  3665  0570  0827               	movf	___aomod@divisor+7,w
  3666  0571  3BAF               	subwfb	___aomod@dividend+7,f
  3667  0572                     l1272:	
  3668  0572  36A7               	lsrf	___aomod@divisor+7,f
  3669  0573  0CA6               	rrf	___aomod@divisor+6,f
  3670  0574  0CA5               	rrf	___aomod@divisor+5,f
  3671  0575  0CA4               	rrf	___aomod@divisor+4,f
  3672  0576  0CA3               	rrf	___aomod@divisor+3,f
  3673  0577  0CA2               	rrf	___aomod@divisor+2,f
  3674  0578  0CA1               	rrf	___aomod@divisor+1,f
  3675  0579  0CA0               	rrf	___aomod@divisor,f
  3676  057A  3001               	movlw	1
  3677  057B  02F1               	subwf	___aomod@counter,f
  3678  057C  1D03               	btfss	3,2
  3679  057D  2D42               	goto	l1268
  3680  057E                     l1274:	
  3681  057E  0872               	movf	___aomod@sign,w
  3682  057F  1903               	btfsc	3,2
  3683  0580  2D9F               	goto	l380
  3684  0581  09A8               	comf	___aomod@dividend,f
  3685  0582  09A9               	comf	___aomod@dividend+1,f
  3686  0583  09AA               	comf	___aomod@dividend+2,f
  3687  0584  09AB               	comf	___aomod@dividend+3,f
  3688  0585  09AC               	comf	___aomod@dividend+4,f
  3689  0586  09AD               	comf	___aomod@dividend+5,f
  3690  0587  09AE               	comf	___aomod@dividend+6,f
  3691  0588  09AF               	comf	___aomod@dividend+7,f
  3692  0589  0AA8               	incf	___aomod@dividend,f
  3693  058A  1D03               	skipz
  3694  058B  2D9F               	goto	l380
  3695  058C  0AA9               	incf	___aomod@dividend+1,f
  3696  058D  1D03               	skipz
  3697  058E  2D9F               	goto	l380
  3698  058F  0AAA               	incf	___aomod@dividend+2,f
  3699  0590  1D03               	skipz
  3700  0591  2D9F               	goto	l380
  3701  0592  0AAB               	incf	___aomod@dividend+3,f
  3702  0593  1D03               	skipz
  3703  0594  2D9F               	goto	l380
  3704  0595  0AAC               	incf	___aomod@dividend+4,f
  3705  0596  1D03               	skipz
  3706  0597  2D9F               	goto	l380
  3707  0598  0AAD               	incf	___aomod@dividend+5,f
  3708  0599  1D03               	skipz
  3709  059A  2D9F               	goto	l380
  3710  059B  0AAE               	incf	___aomod@dividend+6,f
  3711  059C  1D03               	skipz
  3712  059D  2D9F               	goto	l380
  3713  059E  0AAF               	incf	___aomod@dividend+7,f
  3714  059F                     l380:	
  3715  059F  0020               	movlb	0	; select bank0
  3716  05A0  0828               	movf	___aomod@dividend,w
  3717  05A1  00A0               	movwf	?___aomod
  3718  05A2  0829               	movf	___aomod@dividend+1,w
  3719  05A3  00A1               	movwf	?___aomod+1
  3720  05A4  082A               	movf	___aomod@dividend+2,w
  3721  05A5  00A2               	movwf	?___aomod+2
  3722  05A6  082B               	movf	___aomod@dividend+3,w
  3723  05A7  00A3               	movwf	?___aomod+3
  3724  05A8  082C               	movf	___aomod@dividend+4,w
  3725  05A9  00A4               	movwf	?___aomod+4
  3726  05AA  082D               	movf	___aomod@dividend+5,w
  3727  05AB  00A5               	movwf	?___aomod+5
  3728  05AC  082E               	movf	___aomod@dividend+6,w
  3729  05AD  00A6               	movwf	?___aomod+6
  3730  05AE  082F               	movf	___aomod@dividend+7,w
  3731  05AF  00A7               	movwf	?___aomod+7
  3732  05B0  0008               	return
  3733  05B1                     __end_of___aomod:	
  3734                           
  3735                           	psect	text11
  3736  05B1                     __ptext11:	
  3737 ;; *************** function ___aodiv *****************
  3738 ;; Defined at:
  3739 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aodiv.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;  divisor         8    0[BANK0 ] long long 
  3742 ;;  dividend        8    8[BANK0 ] long long 
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;  quotient        8    3[COMMON] long long 
  3745 ;;  sign            1    2[COMMON] unsigned char 
  3746 ;;  counter         1    1[COMMON] unsigned char 
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  8    0[BANK0 ] long long 
  3749 ;; Registers used:
  3750 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3756 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3757 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3758 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3759 ;;      Totals:        11      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3760 ;;Total ram usage:       27 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; This function calls:
  3763 ;;		Nothing
  3764 ;; This function is called by:
  3765 ;;		_dtoa
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           
  3770                           ;psect for function ___aodiv
  3771  05B1                     ___aodiv:	
  3772                           
  3773                           ;incstack = 0
  3774                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
  3775  05B1  01F2               	clrf	___aodiv@sign
  3776  05B2  3020               	movlw	low ___aodiv@divisor
  3777  05B3  0086               	movwf	6
  3778  05B4  3000               	movlw	high ___aodiv@divisor
  3779  05B5  0087               	movwf	7
  3780  05B6  3F47               	moviw [7]fsr1
  3781  05B7  00F0               	movwf	??___aodiv
  3782  05B8  1FF0               	btfss	??___aodiv,7
  3783  05B9  2DDB               	goto	l1216
  3784  05BA  0020               	movlb	0	; select bank0
  3785  05BB  09A0               	comf	___aodiv@divisor,f
  3786  05BC  09A1               	comf	___aodiv@divisor+1,f
  3787  05BD  09A2               	comf	___aodiv@divisor+2,f
  3788  05BE  09A3               	comf	___aodiv@divisor+3,f
  3789  05BF  09A4               	comf	___aodiv@divisor+4,f
  3790  05C0  09A5               	comf	___aodiv@divisor+5,f
  3791  05C1  09A6               	comf	___aodiv@divisor+6,f
  3792  05C2  09A7               	comf	___aodiv@divisor+7,f
  3793  05C3  0AA0               	incf	___aodiv@divisor,f
  3794  05C4  1D03               	skipz
  3795  05C5  2DD9               	goto	u78lld
  3796  05C6  0AA1               	incf	___aodiv@divisor+1,f
  3797  05C7  1D03               	skipz
  3798  05C8  2DD9               	goto	u78lld
  3799  05C9  0AA2               	incf	___aodiv@divisor+2,f
  3800  05CA  1D03               	skipz
  3801  05CB  2DD9               	goto	u78lld
  3802  05CC  0AA3               	incf	___aodiv@divisor+3,f
  3803  05CD  1D03               	skipz
  3804  05CE  2DD9               	goto	u78lld
  3805  05CF  0AA4               	incf	___aodiv@divisor+4,f
  3806  05D0  1D03               	skipz
  3807  05D1  2DD9               	goto	u78lld
  3808  05D2  0AA5               	incf	___aodiv@divisor+5,f
  3809  05D3  1D03               	skipz
  3810  05D4  2DD9               	goto	u78lld
  3811  05D5  0AA6               	incf	___aodiv@divisor+6,f
  3812  05D6  1D03               	skipz
  3813  05D7  2DD9               	goto	u78lld
  3814  05D8  0AA7               	incf	___aodiv@divisor+7,f
  3815  05D9                     u78lld:	
  3816  05D9  01F2               	clrf	___aodiv@sign
  3817  05DA  0AF2               	incf	___aodiv@sign,f
  3818  05DB                     l1216:	
  3819  05DB  3028               	movlw	low ___aodiv@dividend
  3820  05DC  0086               	movwf	6
  3821  05DD  3000               	movlw	high ___aodiv@dividend
  3822  05DE  0087               	movwf	7
  3823  05DF  3F47               	moviw [7]fsr1
  3824  05E0  00F0               	movwf	??___aodiv
  3825  05E1  1FF0               	btfss	??___aodiv,7
  3826  05E2  2E06               	goto	l1222
  3827  05E3  0020               	movlb	0	; select bank0
  3828  05E4  09A8               	comf	___aodiv@dividend,f
  3829  05E5  09A9               	comf	___aodiv@dividend+1,f
  3830  05E6  09AA               	comf	___aodiv@dividend+2,f
  3831  05E7  09AB               	comf	___aodiv@dividend+3,f
  3832  05E8  09AC               	comf	___aodiv@dividend+4,f
  3833  05E9  09AD               	comf	___aodiv@dividend+5,f
  3834  05EA  09AE               	comf	___aodiv@dividend+6,f
  3835  05EB  09AF               	comf	___aodiv@dividend+7,f
  3836  05EC  0AA8               	incf	___aodiv@dividend,f
  3837  05ED  1D03               	skipz
  3838  05EE  2E02               	goto	l1220
  3839  05EF  0AA9               	incf	___aodiv@dividend+1,f
  3840  05F0  1D03               	skipz
  3841  05F1  2E02               	goto	l1220
  3842  05F2  0AAA               	incf	___aodiv@dividend+2,f
  3843  05F3  1D03               	skipz
  3844  05F4  2E02               	goto	l1220
  3845  05F5  0AAB               	incf	___aodiv@dividend+3,f
  3846  05F6  1D03               	skipz
  3847  05F7  2E02               	goto	l1220
  3848  05F8  0AAC               	incf	___aodiv@dividend+4,f
  3849  05F9  1D03               	skipz
  3850  05FA  2E02               	goto	l1220
  3851  05FB  0AAD               	incf	___aodiv@dividend+5,f
  3852  05FC  1D03               	skipz
  3853  05FD  2E02               	goto	l1220
  3854  05FE  0AAE               	incf	___aodiv@dividend+6,f
  3855  05FF  1D03               	skipz
  3856  0600  2E02               	goto	l1220
  3857  0601  0AAF               	incf	___aodiv@dividend+7,f
  3858  0602                     l1220:	
  3859  0602  3001               	movlw	1
  3860  0603  00F0               	movwf	??___aodiv
  3861  0604  0870               	movf	??___aodiv,w
  3862  0605  06F2               	xorwf	___aodiv@sign,f
  3863  0606                     l1222:	
  3864  0606  3073               	movlw	low ___aodiv@quotient
  3865  0607  0086               	movwf	6
  3866  0608  3000               	movlw	high ___aodiv@quotient
  3867  0609  0087               	movwf	7
  3868  060A  3008               	movlw	8
  3869  060B  00F0               	movwf	??___aodiv
  3870  060C  3000               	movlw	0
  3871  060D                     u810:	
  3872  060D  001E               	movwi fsr1++
  3873  060E  0BF0               	decfsz	??___aodiv,f
  3874  060F  2E0D               	goto	u810
  3875  0610  0020               	movlb	0	; select bank0
  3876  0611  0820               	movf	___aodiv@divisor,w
  3877  0612  0421               	iorwf	___aodiv@divisor+1,w
  3878  0613  0422               	iorwf	___aodiv@divisor+2,w
  3879  0614  0423               	iorwf	___aodiv@divisor+3,w
  3880  0615  0424               	iorwf	___aodiv@divisor+4,w
  3881  0616  0425               	iorwf	___aodiv@divisor+5,w
  3882  0617  0426               	iorwf	___aodiv@divisor+6,w
  3883  0618  0427               	iorwf	___aodiv@divisor+7,w
  3884  0619  1903               	skipnz
  3885  061A  2E71               	goto	l1244
  3886  061B  01F1               	clrf	___aodiv@counter
  3887  061C  0AF1               	incf	___aodiv@counter,f
  3888  061D                     l1232:	
  3889  061D  1BA7               	btfsc	___aodiv@divisor+7,7
  3890  061E  2E2C               	goto	l1234
  3891  061F  35A0               	lslf	___aodiv@divisor,f
  3892  0620  0DA1               	rlf	___aodiv@divisor+1,f
  3893  0621  0DA2               	rlf	___aodiv@divisor+2,f
  3894  0622  0DA3               	rlf	___aodiv@divisor+3,f
  3895  0623  0DA4               	rlf	___aodiv@divisor+4,f
  3896  0624  0DA5               	rlf	___aodiv@divisor+5,f
  3897  0625  0DA6               	rlf	___aodiv@divisor+6,f
  3898  0626  0DA7               	rlf	___aodiv@divisor+7,f
  3899  0627  3001               	movlw	1
  3900  0628  00F0               	movwf	??___aodiv
  3901  0629  0870               	movf	??___aodiv,w
  3902  062A  07F1               	addwf	___aodiv@counter,f
  3903  062B  2E1D               	goto	l1232
  3904  062C                     l1234:	
  3905  062C  35F3               	lslf	___aodiv@quotient,f
  3906  062D  0DF4               	rlf	___aodiv@quotient+1,f
  3907  062E  0DF5               	rlf	___aodiv@quotient+2,f
  3908  062F  0DF6               	rlf	___aodiv@quotient+3,f
  3909  0630  0DF7               	rlf	___aodiv@quotient+4,f
  3910  0631  0DF8               	rlf	___aodiv@quotient+5,f
  3911  0632  0DF9               	rlf	___aodiv@quotient+6,f
  3912  0633  0DFA               	rlf	___aodiv@quotient+7,f
  3913  0634  0827               	movf	___aodiv@divisor+7,w
  3914  0635  022F               	subwf	___aodiv@dividend+7,w
  3915  0636  1D03               	skipz
  3916  0637  2E52               	goto	u845
  3917  0638  0826               	movf	___aodiv@divisor+6,w
  3918  0639  022E               	subwf	___aodiv@dividend+6,w
  3919  063A  1D03               	skipz
  3920  063B  2E52               	goto	u845
  3921  063C  0825               	movf	___aodiv@divisor+5,w
  3922  063D  022D               	subwf	___aodiv@dividend+5,w
  3923  063E  1D03               	skipz
  3924  063F  2E52               	goto	u845
  3925  0640  0824               	movf	___aodiv@divisor+4,w
  3926  0641  022C               	subwf	___aodiv@dividend+4,w
  3927  0642  1D03               	skipz
  3928  0643  2E52               	goto	u845
  3929  0644  0823               	movf	___aodiv@divisor+3,w
  3930  0645  022B               	subwf	___aodiv@dividend+3,w
  3931  0646  1D03               	skipz
  3932  0647  2E52               	goto	u845
  3933  0648  0822               	movf	___aodiv@divisor+2,w
  3934  0649  022A               	subwf	___aodiv@dividend+2,w
  3935  064A  1D03               	skipz
  3936  064B  2E52               	goto	u845
  3937  064C  0821               	movf	___aodiv@divisor+1,w
  3938  064D  0229               	subwf	___aodiv@dividend+1,w
  3939  064E  1D03               	skipz
  3940  064F  2E52               	goto	u845
  3941  0650  0820               	movf	___aodiv@divisor,w
  3942  0651  0228               	subwf	___aodiv@dividend,w
  3943  0652                     u845:	
  3944  0652  1C03               	skipc
  3945  0653  2E65               	goto	l1242
  3946  0654  0820               	movf	___aodiv@divisor,w
  3947  0655  02A8               	subwf	___aodiv@dividend,f
  3948  0656  0821               	movf	___aodiv@divisor+1,w
  3949  0657  3BA9               	subwfb	___aodiv@dividend+1,f
  3950  0658  0822               	movf	___aodiv@divisor+2,w
  3951  0659  3BAA               	subwfb	___aodiv@dividend+2,f
  3952  065A  0823               	movf	___aodiv@divisor+3,w
  3953  065B  3BAB               	subwfb	___aodiv@dividend+3,f
  3954  065C  0824               	movf	___aodiv@divisor+4,w
  3955  065D  3BAC               	subwfb	___aodiv@dividend+4,f
  3956  065E  0825               	movf	___aodiv@divisor+5,w
  3957  065F  3BAD               	subwfb	___aodiv@dividend+5,f
  3958  0660  0826               	movf	___aodiv@divisor+6,w
  3959  0661  3BAE               	subwfb	___aodiv@dividend+6,f
  3960  0662  0827               	movf	___aodiv@divisor+7,w
  3961  0663  3BAF               	subwfb	___aodiv@dividend+7,f
  3962  0664  1473               	bsf	___aodiv@quotient,0
  3963  0665                     l1242:	
  3964  0665  36A7               	lsrf	___aodiv@divisor+7,f
  3965  0666  0CA6               	rrf	___aodiv@divisor+6,f
  3966  0667  0CA5               	rrf	___aodiv@divisor+5,f
  3967  0668  0CA4               	rrf	___aodiv@divisor+4,f
  3968  0669  0CA3               	rrf	___aodiv@divisor+3,f
  3969  066A  0CA2               	rrf	___aodiv@divisor+2,f
  3970  066B  0CA1               	rrf	___aodiv@divisor+1,f
  3971  066C  0CA0               	rrf	___aodiv@divisor,f
  3972  066D  3001               	movlw	1
  3973  066E  02F1               	subwf	___aodiv@counter,f
  3974  066F  1D03               	btfss	3,2
  3975  0670  2E2C               	goto	l1234
  3976  0671                     l1244:	
  3977  0671  0872               	movf	___aodiv@sign,w
  3978  0672  1903               	btfsc	3,2
  3979  0673  2E92               	goto	l367
  3980  0674  09F3               	comf	___aodiv@quotient,f
  3981  0675  09F4               	comf	___aodiv@quotient+1,f
  3982  0676  09F5               	comf	___aodiv@quotient+2,f
  3983  0677  09F6               	comf	___aodiv@quotient+3,f
  3984  0678  09F7               	comf	___aodiv@quotient+4,f
  3985  0679  09F8               	comf	___aodiv@quotient+5,f
  3986  067A  09F9               	comf	___aodiv@quotient+6,f
  3987  067B  09FA               	comf	___aodiv@quotient+7,f
  3988  067C  0AF3               	incf	___aodiv@quotient,f
  3989  067D  1D03               	skipz
  3990  067E  2E92               	goto	l367
  3991  067F  0AF4               	incf	___aodiv@quotient+1,f
  3992  0680  1D03               	skipz
  3993  0681  2E92               	goto	l367
  3994  0682  0AF5               	incf	___aodiv@quotient+2,f
  3995  0683  1D03               	skipz
  3996  0684  2E92               	goto	l367
  3997  0685  0AF6               	incf	___aodiv@quotient+3,f
  3998  0686  1D03               	skipz
  3999  0687  2E92               	goto	l367
  4000  0688  0AF7               	incf	___aodiv@quotient+4,f
  4001  0689  1D03               	skipz
  4002  068A  2E92               	goto	l367
  4003  068B  0AF8               	incf	___aodiv@quotient+5,f
  4004  068C  1D03               	skipz
  4005  068D  2E92               	goto	l367
  4006  068E  0AF9               	incf	___aodiv@quotient+6,f
  4007  068F  1D03               	skipz
  4008  0690  2E92               	goto	l367
  4009  0691  0AFA               	incf	___aodiv@quotient+7,f
  4010  0692                     l367:	
  4011  0692  0873               	movf	___aodiv@quotient,w
  4012  0693  0020               	movlb	0	; select bank0
  4013  0694  00A0               	movwf	?___aodiv
  4014  0695  0874               	movf	___aodiv@quotient+1,w
  4015  0696  00A1               	movwf	?___aodiv+1
  4016  0697  0875               	movf	___aodiv@quotient+2,w
  4017  0698  00A2               	movwf	?___aodiv+2
  4018  0699  0876               	movf	___aodiv@quotient+3,w
  4019  069A  00A3               	movwf	?___aodiv+3
  4020  069B  0877               	movf	___aodiv@quotient+4,w
  4021  069C  00A4               	movwf	?___aodiv+4
  4022  069D  0878               	movf	___aodiv@quotient+5,w
  4023  069E  00A5               	movwf	?___aodiv+5
  4024  069F  0879               	movf	___aodiv@quotient+6,w
  4025  06A0  00A6               	movwf	?___aodiv+6
  4026  06A1  087A               	movf	___aodiv@quotient+7,w
  4027  06A2  00A7               	movwf	?___aodiv+7
  4028  06A3  0008               	return
  4029  06A4                     __end_of___aodiv:	
  4030                           
  4031                           	psect	text12
  4032  0396                     __ptext12:	
  4033 ;; *************** function _crc16 *****************
  4034 ;; Defined at:
  4035 ;;		line 25 in file "main.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;  message         1    wreg     PTR const unsigned char 
  4038 ;;		 -> main@message(43), 
  4039 ;;  polynomial      2    4[COMMON] unsigned short 
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  message         1    7[BANK0 ] PTR const unsigned char 
  4042 ;;		 -> main@message(43), 
  4043 ;;  i               2    5[BANK0 ] int 
  4044 ;;  byte            1    2[BANK0 ] unsigned char 
  4045 ;;  i               2    3[BANK0 ] unsigned int 
  4046 ;;  counti          2    0[BANK0 ] unsigned int 
  4047 ;;  crc             2    8[BANK0 ] unsigned int 
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  2    4[COMMON] unsigned short 
  4050 ;; Registers used:
  4051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;      Totals:         5      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;Total ram usage:       15 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:    1
  4064 ;; This function calls:
  4065 ;;		_strlen
  4066 ;; This function is called by:
  4067 ;;		_main
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           
  4072                           ;psect for function _crc16
  4073  0396                     _crc16:	
  4074                           
  4075                           ;incstack = 0
  4076                           ; Regs used in _crc16: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4077                           ;crc16@message stored from wreg
  4078  0396  0020               	movlb	0	; select bank0
  4079  0397  00A7               	movwf	crc16@message
  4080                           
  4081                           ;main.c: 26:  unsigned int crc;;main.c: 28:  crc = 0xFFFF;
  4082  0398  30FF               	movlw	255
  4083  0399  00A8               	movwf	crc16@crc
  4084  039A  30FF               	movlw	255
  4085  039B  00A9               	movwf	crc16@crc+1
  4086                           
  4087                           ;main.c: 29:  if (strlen(message) == 0)
  4088  039C  0827               	movf	crc16@message,w
  4089  039D  00F0               	movwf	strlen@s
  4090  039E  3000               	movlw	0
  4091  039F  00F1               	movwf	strlen@s+1
  4092  03A0  3181  2132  3183   	fcall	_strlen
  4093  03A3  0870               	movf	?_strlen,w
  4094  03A4  0471               	iorwf	?_strlen+1,w
  4095  03A5  1D03               	btfss	3,2
  4096  03A6  2BAA               	goto	l1686
  4097                           
  4098                           ;main.c: 30:  {;main.c: 31:   return (~crc);
  4099  03A7  01F4               	clrf	?_crc16
  4100  03A8  01F5               	clrf	?_crc16+1
  4101  03A9  0008               	return
  4102  03AA                     l1686:	
  4103                           
  4104                           ;main.c: 33:  const unsigned short FRONT_BIT = 0x8000;;main.c: 34:  for (unsigned int i 
      +                          = 0, counti = strlen(message); i < counti; i++) {
  4105  03AA  0020               	movlb	0	; select bank0
  4106  03AB  01A3               	clrf	crc16@i
  4107  03AC  01A4               	clrf	crc16@i+1
  4108  03AD  0827               	movf	crc16@message,w
  4109  03AE  00F0               	movwf	strlen@s
  4110  03AF  3000               	movlw	0
  4111  03B0  00F1               	movwf	strlen@s+1
  4112  03B1  3181  2132  3183   	fcall	_strlen
  4113  03B4  0871               	movf	?_strlen+1,w
  4114  03B5  0020               	movlb	0	; select bank0
  4115  03B6  00A1               	movwf	crc16@counti+1
  4116  03B7  0870               	movf	?_strlen,w
  4117  03B8  00A0               	movwf	crc16@counti
  4118  03B9                     l85:	
  4119  03B9  0821               	movf	crc16@counti+1,w
  4120  03BA  0224               	subwf	crc16@i+1,w
  4121  03BB  1D03               	skipz
  4122  03BC  2BBF               	goto	u1605
  4123  03BD  0820               	movf	crc16@counti,w
  4124  03BE  0223               	subwf	crc16@i,w
  4125  03BF                     u1605:	
  4126  03BF  1803               	btfsc	3,0
  4127  03C0  2C00               	goto	l1706
  4128                           
  4129                           ;main.c: 35:   char byte = message[i];
  4130  03C1  0823               	movf	crc16@i,w
  4131  03C2  0727               	addwf	crc16@message,w
  4132  03C3  00F6               	movwf	??_crc16
  4133  03C4  0876               	movf	??_crc16,w
  4134  03C5  0086               	movwf	6
  4135  03C6  0187               	clrf	7
  4136  03C7  0801               	movf	1,w
  4137  03C8  00F7               	movwf	??_crc16+1
  4138  03C9  0877               	movf	??_crc16+1,w
  4139  03CA  00A2               	movwf	crc16@byte
  4140                           
  4141                           ;main.c: 37:   crc = crc ^ ((unsigned short)(byte << 8));
  4142  03CB  0822               	movf	crc16@byte,w
  4143  03CC  00F6               	movwf	??_crc16
  4144  03CD  01F7               	clrf	??_crc16+1
  4145  03CE  0876               	movf	??_crc16,w
  4146  03CF  00F7               	movwf	??_crc16+1
  4147  03D0  01F6               	clrf	??_crc16
  4148  03D1  0828               	movf	crc16@crc,w
  4149  03D2  0676               	xorwf	??_crc16,w
  4150  03D3  00A8               	movwf	crc16@crc
  4151  03D4  0829               	movf	crc16@crc+1,w
  4152  03D5  0677               	xorwf	??_crc16+1,w
  4153  03D6  00A9               	movwf	crc16@crc+1
  4154                           
  4155                           ;main.c: 39:   for (int i = 0; i < 8; i++) {
  4156  03D7  01A5               	clrf	crc16@i_140
  4157  03D8  01A6               	clrf	crc16@i_140+1
  4158  03D9                     l87:	
  4159                           
  4160                           ;main.c: 40:    if ((crc & FRONT_BIT) != 0) {
  4161  03D9  0020               	movlb	0	; select bank0
  4162  03DA  1FA9               	btfss	crc16@crc+1,7
  4163  03DB  2BE8               	goto	l1702
  4164                           
  4165                           ;main.c: 41:     crc = ((unsigned short)(crc << 1)) ^ polynomial;
  4166  03DC  0829               	movf	crc16@crc+1,w
  4167  03DD  00F7               	movwf	??_crc16+1
  4168  03DE  0828               	movf	crc16@crc,w
  4169  03DF  00F6               	movwf	??_crc16
  4170  03E0  35F6               	lslf	??_crc16,f
  4171  03E1  0DF7               	rlf	??_crc16+1,f
  4172  03E2  0874               	movf	crc16@polynomial,w
  4173  03E3  0676               	xorwf	??_crc16,w
  4174  03E4  00A8               	movwf	crc16@crc
  4175  03E5  0875               	movf	crc16@polynomial+1,w
  4176  03E6  0677               	xorwf	??_crc16+1,w
  4177  03E7  2BEB               	goto	L2
  4178  03E8                     l1702:	
  4179                           ;main.c: 42:    }
  4180                           
  4181                           
  4182                           ;main.c: 45:     crc = crc << 1;
  4183  03E8  3528               	lslf	crc16@crc,w
  4184  03E9  00A8               	movwf	crc16@crc
  4185  03EA  0D29               	rlf	crc16@crc+1,w
  4186  03EB                     L2:	
  4187  03EB  00A9               	movwf	crc16@crc+1
  4188                           
  4189                           ;main.c: 47:   }
  4190                           
  4191                           ;main.c: 46:    }
  4192  03EC  3001               	movlw	1
  4193  03ED  07A5               	addwf	crc16@i_140,f
  4194  03EE  3000               	movlw	0
  4195  03EF  3DA6               	addwfc	crc16@i_140+1,f
  4196  03F0  0826               	movf	crc16@i_140+1,w
  4197  03F1  3A80               	xorlw	128
  4198  03F2  00F6               	movwf	??_crc16
  4199  03F3  3080               	movlw	128
  4200  03F4  0276               	subwf	??_crc16,w
  4201  03F5  3008               	movlw	8
  4202  03F6  1903               	btfsc	3,2
  4203  03F7  0225               	subwf	crc16@i_140,w
  4204  03F8  1C03               	skipc
  4205  03F9  2BD9               	goto	l87
  4206                           
  4207                           ;main.c: 48:  }
  4208  03FA  3001               	movlw	1
  4209  03FB  0020               	movlb	0	; select bank0
  4210  03FC  07A3               	addwf	crc16@i,f
  4211  03FD  3000               	movlw	0
  4212  03FE  3DA4               	addwfc	crc16@i+1,f
  4213  03FF  2BB9               	goto	l85
  4214  0400                     l1706:	
  4215                           
  4216                           ;main.c: 50:  return crc;
  4217  0400  0829               	movf	crc16@crc+1,w
  4218  0401  00F5               	movwf	?_crc16+1
  4219  0402  0828               	movf	crc16@crc,w
  4220  0403  00F4               	movwf	?_crc16
  4221  0404  0008               	return
  4222  0405                     __end_of_crc16:	
  4223                           
  4224                           	psect	text13
  4225  01E5                     __ptext13:	
  4226 ;; *************** function _TransmitString *****************
  4227 ;; Defined at:
  4228 ;;		line 108 in file "main.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  message         1    wreg     PTR unsigned char 
  4231 ;;		 -> main@message(43), 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  message         1    9[COMMON] PTR unsigned char 
  4234 ;;		 -> main@message(43), 
  4235 ;;  i               2   10[COMMON] int 
  4236 ;;  counti          2    7[COMMON] int 
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;Total ram usage:        6 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:    2
  4253 ;; This function calls:
  4254 ;;		_TransmitByte
  4255 ;;		_strlen
  4256 ;; This function is called by:
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _TransmitString
  4263  01E5                     _TransmitString:	
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _TransmitString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4267                           ;TransmitString@message stored from wreg
  4268  01E5  00F9               	movwf	TransmitString@message
  4269                           
  4270                           ;main.c: 108: void TransmitString(char* message);main.c: 109: {;main.c: 113:  for (int i
      +                           = 0, counti = strlen(message); i < counti; i++)
  4271  01E6  01FA               	clrf	TransmitString@i
  4272  01E7  01FB               	clrf	TransmitString@i+1
  4273  01E8  0879               	movf	TransmitString@message,w
  4274  01E9  00F0               	movwf	strlen@s
  4275  01EA  3000               	movlw	0
  4276  01EB  00F1               	movwf	strlen@s+1
  4277  01EC  3181  2132  3181   	fcall	_strlen
  4278  01EF  0871               	movf	?_strlen+1,w
  4279  01F0  00F8               	movwf	TransmitString@counti+1
  4280  01F1  0870               	movf	?_strlen,w
  4281  01F2  00F7               	movwf	TransmitString@counti
  4282  01F3                     l1718:	
  4283  01F3  087B               	movf	TransmitString@i+1,w
  4284  01F4  3A80               	xorlw	128
  4285  01F5  00F6               	movwf	??_TransmitString
  4286  01F6  0878               	movf	TransmitString@counti+1,w
  4287  01F7  3A80               	xorlw	128
  4288  01F8  0276               	subwf	??_TransmitString,w
  4289  01F9  1D03               	skipz
  4290  01FA  29FD               	goto	u1615
  4291  01FB  0877               	movf	TransmitString@counti,w
  4292  01FC  027A               	subwf	TransmitString@i,w
  4293  01FD                     u1615:	
  4294  01FD  1803               	btfsc	3,0
  4295  01FE  0008               	return
  4296                           
  4297                           ;main.c: 114:  {;main.c: 115:   TransmitByte(message[i]);
  4298  01FF  087A               	movf	TransmitString@i,w
  4299  0200  0779               	addwf	TransmitString@message,w
  4300  0201  00F6               	movwf	??_TransmitString
  4301  0202  0876               	movf	??_TransmitString,w
  4302  0203  0086               	movwf	6
  4303  0204  0187               	clrf	7
  4304  0205  0801               	movf	1,w
  4305  0206  3182  220E  3181   	fcall	_TransmitByte
  4306                           
  4307                           ;main.c: 116:  }
  4308  0209  3001               	movlw	1
  4309  020A  07FA               	addwf	TransmitString@i,f
  4310  020B  3000               	movlw	0
  4311  020C  3DFB               	addwfc	TransmitString@i+1,f
  4312  020D  29F3               	goto	l1718
  4313  020E                     __end_of_TransmitString:	
  4314                           
  4315                           	psect	text14
  4316  020E                     __ptext14:	
  4317 ;; *************** function _TransmitByte *****************
  4318 ;; Defined at:
  4319 ;;		line 77 in file "main.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  byte            1    wreg     unsigned char 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  byte            1    3[COMMON] unsigned char 
  4324 ;;  i               2    4[COMMON] int 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, status,2, status,0, pclath, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;Total ram usage:        4 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    1
  4341 ;; This function calls:
  4342 ;;		_TransmitBit
  4343 ;; This function is called by:
  4344 ;;		_TransmitString
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _TransmitByte
  4350  020E                     _TransmitByte:	
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _TransmitByte: [wreg+status,2+status,0+pclath+cstack]
  4354                           ;TransmitByte@byte stored from wreg
  4355  020E  00F3               	movwf	TransmitByte@byte
  4356                           
  4357                           ;main.c: 77: void TransmitByte(char byte);main.c: 78: {;main.c: 88:     TransmitBit(0);
  4358  020F  3000               	movlw	0
  4359  0210  3181  2160  3182   	fcall	_TransmitBit
  4360                           
  4361                           ;main.c: 93:  for (int i = 0; i < 7; i++)
  4362  0213  01F4               	clrf	TransmitByte@i
  4363  0214  01F5               	clrf	TransmitByte@i+1
  4364  0215                     l1420:	
  4365                           
  4366                           ;main.c: 94:  {;main.c: 95:   TransmitBit((byte >> i) & 1);
  4367  0215  0873               	movf	TransmitByte@byte,w
  4368  0216  00F2               	movwf	??_TransmitByte
  4369  0217  0A74               	incf	TransmitByte@i,w
  4370  0218  2A1A               	goto	u1194
  4371  0219                     u1195:	
  4372  0219  36F2               	lsrf	??_TransmitByte,f
  4373  021A                     u1194:	
  4374  021A  0B89               	decfsz	9,f
  4375  021B  2A19               	goto	u1195
  4376  021C  1C72               	btfss	??_TransmitByte,0
  4377  021D  2A20               	goto	u1200
  4378  021E  3001               	movlw	1
  4379  021F  2A21               	goto	u1210
  4380  0220                     u1200:	
  4381  0220  3000               	movlw	0
  4382  0221                     u1210:	
  4383  0221  3181  2160  3182   	fcall	_TransmitBit
  4384                           
  4385                           ;main.c: 96:  }
  4386  0224  3001               	movlw	1
  4387  0225  07F4               	addwf	TransmitByte@i,f
  4388  0226  3000               	movlw	0
  4389  0227  3DF5               	addwfc	TransmitByte@i+1,f
  4390  0228  0875               	movf	TransmitByte@i+1,w
  4391  0229  3A80               	xorlw	128
  4392  022A  00F2               	movwf	??_TransmitByte
  4393  022B  3080               	movlw	128
  4394  022C  0272               	subwf	??_TransmitByte,w
  4395  022D  1D03               	skipz
  4396  022E  2A31               	goto	u1225
  4397  022F  3007               	movlw	7
  4398  0230  0274               	subwf	TransmitByte@i,w
  4399  0231                     u1225:	
  4400  0231  1C03               	skipc
  4401  0232  2A15               	goto	l1420
  4402                           
  4403                           ;main.c: 101:  TransmitBit(1);
  4404  0233  3001               	movlw	1
  4405  0234  3181  2160  3182   	fcall	_TransmitBit
  4406                           
  4407                           ;main.c: 102:  TransmitBit(1);
  4408  0237  3001               	movlw	1
  4409  0238  3181  2160         	fcall	_TransmitBit
  4410  023A  0008               	return
  4411  023B                     __end_of_TransmitByte:	
  4412                           
  4413                           	psect	text15
  4414  0160                     __ptext15:	
  4415 ;; *************** function _TransmitBit *****************
  4416 ;; Defined at:
  4417 ;;		line 55 in file "main.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  b               1    wreg     _Bool 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  b               1    1[COMMON] _Bool 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;Total ram usage:        2 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_TransmitByte
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _TransmitBit
  4446  0160                     _TransmitBit:	
  4447                           
  4448                           ;incstack = 0
  4449                           ; Regs used in _TransmitBit: [wreg+status,2+status,0]
  4450                           ;TransmitBit@b stored from wreg
  4451  0160  00F1               	movwf	TransmitBit@b
  4452                           
  4453                           ;main.c: 55: void TransmitBit(_Bool b);main.c: 56: {;main.c: 57:  if (b)
  4454  0161  0871               	movf	TransmitBit@b,w
  4455  0162  1903               	btfsc	3,2
  4456  0163  2967               	goto	l100
  4457                           
  4458                           ;main.c: 58:  {;main.c: 62:   do { LATAbits.LATA4 = 1; } while(0);
  4459  0164  0022               	movlb	2	; select bank2
  4460  0165  160C               	bsf	12,4	;volatile
  4461  0166  2969               	goto	l1338
  4462  0167                     l100:	
  4463                           ;main.c: 66:  {;main.c: 70:   do { LATAbits.LATA4 = 0; } while(0);
  4464                           
  4465  0167  0022               	movlb	2	; select bank2
  4466  0168  120C               	bcf	12,4	;volatile
  4467  0169                     l1338:	
  4468                           
  4469                           ;main.c: 73:  _delay((unsigned long)((((1000 / BAUD_RATE) / 2) * 1000)*(4000000/4000000.
      +                          0)));
  4470  0169  300D               	movlw	13
  4471  016A  00F0               	movwf	??_TransmitBit
  4472  016B  30FC               	movlw	252
  4473  016C                     u1657:	
  4474  016C  0B89               	decfsz	9,f
  4475  016D  296C               	goto	u1657
  4476  016E  0BF0               	decfsz	??_TransmitBit,f
  4477  016F  296C               	goto	u1657
  4478                           
  4479                           ;main.c: 74:  _delay((unsigned long)((((1000 / BAUD_RATE) / 2) * 1000)*(4000000/4000000.
      +                          0)));
  4480  0170  300D               	movlw	13
  4481  0171  00F0               	movwf	??_TransmitBit
  4482  0172  30FC               	movlw	252
  4483  0173                     u1667:	
  4484  0173  0B89               	decfsz	9,f
  4485  0174  2973               	goto	u1667
  4486  0175  0BF0               	decfsz	??_TransmitBit,f
  4487  0176  2973               	goto	u1667
  4488  0177  0008               	return
  4489  0178                     __end_of_TransmitBit:	
  4490                           
  4491                           	psect	text16
  4492  011F                     __ptext16:	
  4493 ;; *************** function _SYSTEM_Initialize *****************
  4494 ;; Defined at:
  4495 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;		None
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;		None
  4500 ;; Return value:  Size  Location     Type
  4501 ;;                  1    wreg      void 
  4502 ;; Registers used:
  4503 ;;		wreg, status,2, status,0, pclath, cstack
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4513 ;;Total ram usage:        0 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; Hardware stack levels required when called:    1
  4516 ;; This function calls:
  4517 ;;		_OSCILLATOR_Initialize
  4518 ;;		_PIN_MANAGER_Initialize
  4519 ;; This function is called by:
  4520 ;;		_main
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           
  4525                           ;psect for function _SYSTEM_Initialize
  4526  011F                     _SYSTEM_Initialize:	
  4527                           
  4528                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
  4529                           
  4530                           ;incstack = 0
  4531                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4532  011F  3181  219B  3181   	fcall	_PIN_MANAGER_Initialize
  4533                           
  4534                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
  4535  0122  3181  212B         	fcall	_OSCILLATOR_Initialize
  4536  0124  0008               	return
  4537  0125                     __end_of_SYSTEM_Initialize:	
  4538                           
  4539                           	psect	text17
  4540  019B                     __ptext17:	
  4541 ;; *************** function _PIN_MANAGER_Initialize *****************
  4542 ;; Defined at:
  4543 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;		None
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;		None
  4548 ;; Return value:  Size  Location     Type
  4549 ;;                  1    wreg      void 
  4550 ;; Registers used:
  4551 ;;		wreg, status,2
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;Total ram usage:        0 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; This function calls:
  4564 ;;		Nothing
  4565 ;; This function is called by:
  4566 ;;		_SYSTEM_Initialize
  4567 ;;		_main
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           
  4572                           ;psect for function _PIN_MANAGER_Initialize
  4573  019B                     _PIN_MANAGER_Initialize:	
  4574                           
  4575                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  4576                           
  4577                           ;incstack = 0
  4578                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4579  019B  0022               	movlb	2	; select bank2
  4580  019C  018C               	clrf	12	;volatile
  4581                           
  4582                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
  4583  019D  018D               	clrf	13	;volatile
  4584                           
  4585                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
  4586  019E  018E               	clrf	14	;volatile
  4587                           
  4588                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x27;
  4589  019F  3027               	movlw	39
  4590  01A0  0021               	movlb	1	; select bank1
  4591  01A1  008C               	movwf	12	;volatile
  4592                           
  4593                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xF0;
  4594  01A2  30F0               	movlw	240
  4595  01A3  008D               	movwf	13	;volatile
  4596                           
  4597                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xFF;
  4598  01A4  30FF               	movlw	255
  4599  01A5  008E               	movwf	14	;volatile
  4600                           
  4601                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0xCF;
  4602  01A6  30CF               	movlw	207
  4603  01A7  0023               	movlb	3	; select bank3
  4604  01A8  008E               	movwf	14	;volatile
  4605                           
  4606                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0xF0;
  4607  01A9  30F0               	movlw	240
  4608  01AA  008D               	movwf	13	;volatile
  4609                           
  4610                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x07;
  4611  01AB  3007               	movlw	7
  4612  01AC  008C               	movwf	12	;volatile
  4613                           
  4614                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  4615  01AD  0024               	movlb	4	; select bank4
  4616  01AE  018D               	clrf	13	;volatile
  4617                           
  4618                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
  4619  01AF  018C               	clrf	12	;volatile
  4620                           
  4621                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
  4622  01B0  018E               	clrf	14	;volatile
  4623                           
  4624                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 1;
  4625  01B1  0021               	movlb	1	; select bank1
  4626  01B2  1795               	bsf	21,7	;volatile
  4627                           
  4628                           ;mcc_generated_files/pin_manager.c: 91:     ODCONA = 0x00;
  4629  01B3  0025               	movlb	5	; select bank5
  4630  01B4  018C               	clrf	12	;volatile
  4631                           
  4632                           ;mcc_generated_files/pin_manager.c: 92:     ODCONB = 0x00;
  4633  01B5  018D               	clrf	13	;volatile
  4634                           
  4635                           ;mcc_generated_files/pin_manager.c: 93:     ODCONC = 0x00;
  4636  01B6  018E               	clrf	14	;volatile
  4637                           
  4638                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONA = 0x37;
  4639  01B7  3037               	movlw	55
  4640  01B8  0026               	movlb	6	; select bank6
  4641  01B9  008C               	movwf	12	;volatile
  4642                           
  4643                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONB = 0xF0;
  4644  01BA  30F0               	movlw	240
  4645  01BB  008D               	movwf	13	;volatile
  4646                           
  4647                           ;mcc_generated_files/pin_manager.c: 100:     SLRCONC = 0xFF;
  4648  01BC  30FF               	movlw	255
  4649  01BD  008E               	movwf	14	;volatile
  4650  01BE  0008               	return
  4651  01BF                     __end_of_PIN_MANAGER_Initialize:	
  4652                           
  4653                           	psect	text18
  4654  012B                     __ptext18:	
  4655 ;; *************** function _OSCILLATOR_Initialize *****************
  4656 ;; Defined at:
  4657 ;;		line 56 in file "mcc_generated_files/mcc.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;		None
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      void 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;Total ram usage:        0 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_SYSTEM_Initialize
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           
  4685                           ;psect for function _OSCILLATOR_Initialize
  4686  012B                     _OSCILLATOR_Initialize:	
  4687                           
  4688                           ;mcc_generated_files/mcc.c: 59:     OSCCON = 0x68;
  4689                           
  4690                           ;incstack = 0
  4691                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4692  012B  3068               	movlw	104
  4693  012C  0021               	movlb	1	; select bank1
  4694  012D  0099               	movwf	25	;volatile
  4695                           
  4696                           ;mcc_generated_files/mcc.c: 61:     OSCTUNE = 0x00;
  4697  012E  0198               	clrf	24	;volatile
  4698                           
  4699                           ;mcc_generated_files/mcc.c: 63:     BORCON = 0x00;
  4700  012F  0022               	movlb	2	; select bank2
  4701  0130  0196               	clrf	22	;volatile
  4702  0131  0008               	return
  4703  0132                     __end_of_OSCILLATOR_Initialize:	
  4704                           
  4705                           	psect	text19
  4706  02AF                     __ptext19:	
  4707 ;; *************** function _AppendCRC *****************
  4708 ;; Defined at:
  4709 ;;		line 123 in file "main.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  data            1    wreg     PTR unsigned char 
  4712 ;;		 -> main@message(43), 
  4713 ;;  crc             2    9[COMMON] unsigned short 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  data            1   10[BANK0 ] PTR unsigned char 
  4716 ;;		 -> main@message(43), 
  4717 ;;  len             2   11[BANK0 ] int 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      void 
  4720 ;; Registers used:
  4721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4727 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;Total ram usage:        7 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    1
  4734 ;; This function calls:
  4735 ;;		_strlen
  4736 ;; This function is called by:
  4737 ;;		_main
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           
  4742                           ;psect for function _AppendCRC
  4743  02AF                     _AppendCRC:	
  4744                           
  4745                           ;incstack = 0
  4746                           ; Regs used in _AppendCRC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4747                           ;AppendCRC@data stored from wreg
  4748  02AF  0020               	movlb	0	; select bank0
  4749  02B0  00AA               	movwf	AppendCRC@data
  4750                           
  4751                           ;main.c: 123: void AppendCRC(char* data, unsigned short crc);main.c: 124: {;main.c: 125:
      +                            int len = strlen(data);
  4752  02B1  082A               	movf	AppendCRC@data,w
  4753  02B2  00F0               	movwf	strlen@s
  4754  02B3  3000               	movlw	0
  4755  02B4  00F1               	movwf	strlen@s+1
  4756  02B5  3181  2132  3182   	fcall	_strlen
  4757  02B8  0871               	movf	?_strlen+1,w
  4758  02B9  0020               	movlb	0	; select bank0
  4759  02BA  00AC               	movwf	AppendCRC@len+1
  4760  02BB  0870               	movf	?_strlen,w
  4761  02BC  00AB               	movwf	AppendCRC@len
  4762                           
  4763                           ;main.c: 126:  if (len >= 40 - 1)
  4764  02BD  082C               	movf	AppendCRC@len+1,w
  4765  02BE  3A80               	xorlw	128
  4766  02BF  00FB               	movwf	??_AppendCRC
  4767  02C0  3080               	movlw	128
  4768  02C1  027B               	subwf	??_AppendCRC,w
  4769  02C2  1D03               	skipz
  4770  02C3  2AC6               	goto	u1625
  4771  02C4  3027               	movlw	39
  4772  02C5  022B               	subwf	AppendCRC@len,w
  4773  02C6                     u1625:	
  4774  02C6  1C03               	skipc
  4775  02C7  2ACD               	goto	l1726
  4776                           
  4777                           ;main.c: 127:  {;main.c: 129:   len = 40 - 2;
  4778  02C8  3026               	movlw	38
  4779  02C9  0020               	movlb	0	; select bank0
  4780  02CA  00AB               	movwf	AppendCRC@len
  4781  02CB  3000               	movlw	0
  4782  02CC  00AC               	movwf	AppendCRC@len+1
  4783  02CD                     l1726:	
  4784                           
  4785                           ;main.c: 131:  data[len] = (char)(crc >> 8);
  4786  02CD  087A               	movf	AppendCRC@crc+1,w
  4787  02CE  00FB               	movwf	??_AppendCRC
  4788  02CF  0020               	movlb	0	; select bank0
  4789  02D0  082B               	movf	AppendCRC@len,w
  4790  02D1  072A               	addwf	AppendCRC@data,w
  4791  02D2  00FC               	movwf	??_AppendCRC+1
  4792  02D3  087C               	movf	??_AppendCRC+1,w
  4793  02D4  0086               	movwf	6
  4794  02D5  0187               	clrf	7
  4795  02D6  087B               	movf	??_AppendCRC,w
  4796  02D7  0081               	movwf	1
  4797                           
  4798                           ;main.c: 132:  data[len + 1] = (char)(crc);
  4799  02D8  0879               	movf	AppendCRC@crc,w
  4800  02D9  00FB               	movwf	??_AppendCRC
  4801  02DA  082B               	movf	AppendCRC@len,w
  4802  02DB  072A               	addwf	AppendCRC@data,w
  4803  02DC  00FC               	movwf	??_AppendCRC+1
  4804  02DD  0A7C               	incf	??_AppendCRC+1,w
  4805  02DE  0086               	movwf	6
  4806  02DF  0187               	clrf	7
  4807  02E0  087B               	movf	??_AppendCRC,w
  4808  02E1  0081               	movwf	1
  4809                           
  4810                           ;main.c: 133:  data[len + 2] = '\n';
  4811  02E2  300A               	movlw	10
  4812  02E3  00FB               	movwf	??_AppendCRC
  4813  02E4  082B               	movf	AppendCRC@len,w
  4814  02E5  072A               	addwf	AppendCRC@data,w
  4815  02E6  00FC               	movwf	??_AppendCRC+1
  4816  02E7  087C               	movf	??_AppendCRC+1,w
  4817  02E8  3E02               	addlw	2
  4818  02E9  0086               	movwf	6
  4819  02EA  0187               	clrf	7
  4820  02EB  087B               	movf	??_AppendCRC,w
  4821  02EC  0081               	movwf	1
  4822                           
  4823                           ;main.c: 134:  data[len + 3] = '\0';
  4824  02ED  082B               	movf	AppendCRC@len,w
  4825  02EE  072A               	addwf	AppendCRC@data,w
  4826  02EF  00FB               	movwf	??_AppendCRC
  4827  02F0  087B               	movf	??_AppendCRC,w
  4828  02F1  3E03               	addlw	3
  4829  02F2  0086               	movwf	6
  4830  02F3  0187               	clrf	7
  4831  02F4  0181               	clrf	1
  4832  02F5  0008               	return
  4833  02F6                     __end_of_AppendCRC:	
  4834                           
  4835                           	psect	text20
  4836  0132                     __ptext20:	
  4837 ;; *************** function _strlen *****************
  4838 ;; Defined at:
  4839 ;;		line 12 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strlen.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;  s               2    0[COMMON] PTR const unsigned char 
  4842 ;;		 -> dbuf(32), main@message(43), 
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;  a               2    2[COMMON] PTR const unsigned char 
  4845 ;;		 -> dbuf(32), main@message(43), 
  4846 ;; Return value:  Size  Location     Type
  4847 ;;                  2    0[COMMON] unsigned int 
  4848 ;; Registers used:
  4849 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4855 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4856 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4858 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;Total ram usage:        4 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; This function calls:
  4862 ;;		Nothing
  4863 ;; This function is called by:
  4864 ;;		_crc16
  4865 ;;		_TransmitString
  4866 ;;		_AppendCRC
  4867 ;;		_pad
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           
  4872                           ;psect for function _strlen
  4873  0132                     _strlen:	
  4874                           
  4875                           ;incstack = 0
  4876                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  4877  0132  0871               	movf	strlen@s+1,w
  4878  0133  00F3               	movwf	strlen@a+1
  4879  0134  0870               	movf	strlen@s,w
  4880  0135  00F2               	movwf	strlen@a
  4881  0136                     l1536:	
  4882  0136  0870               	movf	strlen@s,w
  4883  0137  0086               	movwf	6
  4884  0138  0871               	movf	strlen@s+1,w
  4885  0139  0087               	movwf	7
  4886  013A  0801               	movf	1,w
  4887  013B  1903               	btfsc	3,2
  4888  013C  2942               	goto	l1538
  4889  013D  3001               	movlw	1
  4890  013E  07F0               	addwf	strlen@s,f
  4891  013F  3000               	movlw	0
  4892  0140  3DF1               	addwfc	strlen@s+1,f
  4893  0141  2936               	goto	l1536
  4894  0142                     l1538:	
  4895  0142  0872               	movf	strlen@a,w
  4896  0143  0270               	subwf	strlen@s,w
  4897  0144  00F0               	movwf	?_strlen
  4898  0145  0873               	movf	strlen@a+1,w
  4899  0146  3B71               	subwfb	strlen@s+1,w
  4900  0147  00F1               	movwf	?_strlen+1
  4901  0148  0008               	return
  4902  0149                     __end_of_strlen:	
  4903  007E                     btemp	set	126	;btemp
  4904  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    8
    Data        0
    BSS         42
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      79
    BANK1            80     56      62
    BANK2            80      0      32
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 43
		 -> dbuf(BANK2[32]), main@message(BANK1[43]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 43
		 -> dbuf(BANK2[32]), main@message(BANK1[43]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_1(CODE[31]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    S550_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_1(CODE[31]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 31
		 -> STR_1(CODE[31]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    AppendCRC@data	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    TransmitString@message	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    crc16@message	PTR const unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 


Critical Paths under _main in COMMON

    _main->_sprintf
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _crc16->_strlen
    _TransmitString->_TransmitByte
    _TransmitByte->_TransmitBit
    _AppendCRC->_crc16

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _dtoa->___aomod
    _pad->_fputs
    _abs->___aomod
    _AppendCRC->_crc16

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                48    48      0    9816
                                             74 BANK0      1     1      0
                                              9 BANK1     47    47      0
                          _AppendCRC
             _PIN_MANAGER_Initialize
                  _SYSTEM_Initialize
                     _TransmitString
                              _crc16
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             14    10      4    7084
                                             13 COMMON     1     1      0
                                             70 BANK0      4     0      4
                                              0 BANK1      9     9      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    6652
                                             62 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    6233
                                             46 BANK0     16    14      2
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                30    22      8    4715
                                             16 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2882
                                             12 COMMON     1     1      0
                                              4 BANK0      8     5      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1149
                                              8 COMMON     4     3      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     834
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              3 COMMON     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             19     3     16     448
                                              0 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             27    11     16     452
                                              0 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (1) _crc16                                               15    13      2     982
                                              4 COMMON     5     3      2
                                              0 BANK0     10    10      0
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _TransmitString                                       6     6      0     642
                                              6 COMMON     6     6      0
                       _TransmitByte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _TransmitByte                                         4     4      0     112
                                              2 COMMON     4     4      0
                        _TransmitBit
 ---------------------------------------------------------------------------------
 (3) _TransmitBit                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AppendCRC                                            7     5      2     834
                                              9 COMMON     4     2      2
                                             10 BANK0      3     3      0
                              _crc16 (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     330
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AppendCRC
     _crc16 (ARG)
       _strlen
     _strlen (ARG)
   _PIN_MANAGER_Initialize
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _TransmitString
     _TransmitByte
       _TransmitBit
     _strlen
   _crc16
     _strlen
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     38      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      20       9       40.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BB      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BB      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Jun 09 23:34:32 2019

                    __CFG_CP$OFF 0000                               l85 03B9                               l87 03D9  
                    __CFG_LVP$ON 0000                              l100 0167                              l221 032C  
                            l231 0707                              l232 0719                              l218 030C  
                            l226 06EA                              l235 07AE                              l227 06F1  
                            l380 059F                              l367 0692                              u810 060D  
                            u845 0652                              u765 0152                              u695 0294  
                            u945 0560                              _abs 0149                              _pad 02F6  
                crc16@polynomial 0074                     __CFG_BORV$LO 0000                              wreg 0009  
                   __CFG_IESO$ON 0000                     __CFG_ZCD$OFF 0000                             ?_abs 0073  
                           l1220 0602                             l1222 0606                             l1232 061D  
                           l1216 05DB                             l1160 0296                             l1242 0665  
                           l1234 062C                             l1420 0215                             l1244 0671  
                           l1156 0273                             l1254 04FF                             l1182 01C3  
                           l1272 0572                             l1338 0169                             l1266 0533  
                           l1274 057E                             l1258 0526                             l1268 0542  
                           l1604 07BA                             l1702 03E8                             l1550 030A  
                           l1614 07CB                             l1536 0136                             l1560 0337  
                           l1608 07C1                             l1538 0142                             l1706 0400  
                           l1546 0302                             l1618 07D8                             l1642 0480  
                           l1634 0446                             l1556 030E                             l1652 04A7  
                           l1726 02CD                             l1718 01F3                             l1582 0715  
                           l1750 034F                             l1576 0702                             l1648 04A1  
                           l1672 0244                             l1586 0745                             l1658 04B2  
                           l1674 0261                             l1596 0720                             l1764 037C  
                           l1686 03AA                             ?_pad 0024                             STR_1 0802  
                           u1200 0220                             u1210 0221                             u1225 0231  
                           _LATA 010C                             _LATB 010D                             u1415 06FA  
                           _LATC 010E                             u1360 06C0                             u1345 0318  
                           u1194 021A                             u1370 06C1                             u1195 0219  
                           u1605 03BF                             u1445 07B8                             u1615 01FD  
                           u1625 02C6                             u1465 0734                             u1475 0740  
                           u1635 0390                             u1647 037D                             u1657 016C  
                           u1667 0173                             _WPUA 020C                             _WPUB 020D  
                           _WPUC 020E                      main@message 00A9                     __CFG_WRT$OFF 0000  
                  __CFG_FCMEN$ON 0000                             abs@a 0073                             _dbuf 0120  
                           _main 0346                             _dtoa 06A4                             _prec 006B  
                   TransmitBit@b 0071                             _nout 00D8                             pad@i 0027  
                           pad@p 0025                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             pad@w 0029                             btemp 007E  
                  __CFG_BOREN$ON 0000                             start 0002                    __CFG_MCLRE$ON 0000  
                          ??_abs 0075                            ??_pad 007C   __size_of_OSCILLATOR_Initialize 0007  
  __end_of_OSCILLATOR_Initialize 0132                  __end_of___aodiv 06A4                            ?_main 0070  
                          ?_dtoa 0030                  __end_of___aomod 05B1                    __CFG_WDTE$OFF 0000  
                   vfpfcnvrt@fmt 004E                            _TRISA 008C                            _TRISB 008D  
                          _TRISC 008E                            u78lld 05D9                            u89lld 04FD  
                          _crc16 0396                            _flags 006D                            _fputc 026A  
                          _fputs 01BF                            pad@fp 002B                            _width 00DA  
                          _putch 011E                            main@i 00D6                            dtoa@d 0030  
                          dtoa@i 004C                            dtoa@n 0044                            dtoa@p 003E  
                          dtoa@s 0042                            dtoa@w 0040                __end_of_BAUD_RATE 0827  
                  TransmitByte@i 0074                            status 0003                            wtemp0 007E  
                __end_of_sprintf 019B         __end_of_MESSAGE_INTERVAL 0802                  __initialization 07EA  
                   __end_of_main 0396                     __end_of_dtoa 07EA                   __CFG_LPBOR$OFF 0000  
                         ??_main 006A                           ??_dtoa 0038               __size_of_AppendCRC 0047  
                 __CFG_PLLEN$OFF 0000                           ?_crc16 0074                           ?_fputc 0070  
                         ?_fputs 0078                           _ANSELA 018C                           ?_putch 0070  
                         _ANSELB 018D                           _ANSELC 018E                           _BORCON 0116  
                         _ODCONA 028C                           _ODCONB 028D                           _ODCONC 028E  
                         _OSCCON 0099                   __CFG_PWRTE$OFF 0000                     vfprintf@cfmt 0064  
                      ??___aodiv 0070                        ??___aomod 0070                           crc16@i 0023  
                 __CFG_STVREN$ON 0000                           pad@buf 0024                           main@id 00D4  
                         dtoa@fp 003B                           _strlen 0132                           fputc@c 0070  
                         fputs@c 0020                           fputs@i 0021                           fputs@s 0023  
               ??_TransmitString 0076                           putch@c 0070                 __end_of_vfprintf 026A  
             __end_of_DELAY_MULT 0825                        ??_sprintf 007D                     crc16@message 0027  
              _SYSTEM_Initialize 011F          __end_of__initialization 07FD               ?_SYSTEM_Initialize 0070  
              __end_of_AppendCRC 02F6                   __pcstackCOMMON 0070                    __end_of_crc16 0405  
            ??_SYSTEM_Initialize 0070                    __end_of_fputc 02AF                    __end_of_fputs 01E5  
                  ??_TransmitBit 0070                    __end_of_putch 011F                   _OPTION_REGbits 0095  
                     crc16@i_140 0025                          ??_crc16 0076                          ??_fputc 0073  
      __end_of_SYSTEM_Initialize 0125                          ??_fputs 0079                          ??_putch 0070  
                     __pbssBANK0 006B                       __pbssBANK1 00D8                       __pbssBANK2 0120  
                     __pmaintext 0346                  __CFG_PPS1WAY$ON 0000                          ?_strlen 0070  
                __CFG_WDTCCS$SWC 0000              __end_of_TransmitBit 0178               __size_of_vfpfcnvrt 00D0  
                        _OSCTUNE 0098                          _SLRCONA 030C                          _SLRCONB 030D  
                        _SLRCONC 030E                        _BAUD_RATE 0825                          ___aodiv 05B1  
                        ___aomod 04D5                        ?_vfprintf 005E                          __ptext1 0178  
                        __ptext2 023B                          __ptext3 0405                          __ptext4 06A4  
                        __ptext5 02F6                          __ptext6 01BF                          __ptext7 026A  
                        __ptext8 011E                          __ptext9 0149                  __size_of_strlen 0017  
          _OSCILLATOR_Initialize 012B                     __size_of_abs 0017                     __size_of_pad 0050  
       ??_PIN_MANAGER_Initialize 0070       __size_of_SYSTEM_Initialize 0006                          _sprintf 0178  
                        clrloop0 0126             end_of_initialization 07FD                          fputc@fp 0072  
                        fputs@fp 0078                __end_of_vfpfcnvrt 04D5                       ??_vfprintf 0061  
                    _TransmitBit 0160                          strlen@a 0072                          strlen@s 0070  
                TransmitString@i 007A                    ?_TransmitByte 0070                 __CFG_FOSC$INTOSC 0000  
          TransmitString@message 0079                        _AppendCRC 02AF                      vfpfcnvrt@ap 004F  
                    vfpfcnvrt@fp 005D                      vfpfcnvrt@ll 0055                    AppendCRC@data 002A  
         ?_OSCILLATOR_Initialize 0070                   ??_TransmitByte 0072                   __end_of_strlen 0149  
            start_initialization 07EA  __size_of_PIN_MANAGER_Initialize 0024                      __end_of_abs 0160  
                    __end_of_pad 0346                _transmission_time 00DC                      vfprintf@fmt 005E  
                     ?_AppendCRC 0079                      crc16@counti 0020                         ??_strlen 0072  
                      ___latbits 0002                    __pcstackBANK0 0020                    __pcstackBANK1 00A0  
               ___aodiv@dividend 0028                        crc16@byte 0022          __size_of_TransmitString 0029  
         _PIN_MANAGER_Initialize 019B                         ?___aodiv 0020                         ?___aomod 0020  
               ___aodiv@quotient 0073                __size_of_vfprintf 002F                   __size_of_crc16 006F  
                       ?_sprintf 0066                   __size_of_fputc 0045                   __size_of_fputs 0026  
                 crc16@FRONT_BIT 0821                   __size_of_putch 0001                         _LATAbits 010C  
                      clear_ram0 0125             __end_of_TransmitByte 023B             __CFG_WDTCPS$WDTCPS1F 0000  
                    ??_AppendCRC 007B                     ?_TransmitBit 0070                        _vfpfcnvrt 0405  
           TransmitString@counti 0077           __end_ofcrc16@FRONT_BIT 0823                     AppendCRC@crc 0079  
                   AppendCRC@len 002B                       _DELAY_MULT 0823                       vfprintf@ap 0060  
                     vfprintf@fp 0063          ??_OSCILLATOR_Initialize 0070                 __size_of___aodiv 00F3  
               __size_of___aomod 00DC                       ?_vfpfcnvrt 004E                  ___aodiv@divisor 0020  
                ___aodiv@counter 0071                       sprintf@fmt 0066                         crc16@crc 0028  
                       _dtoa$251 003C                         __ptext10 04D5                         __ptext11 05B1  
                       __ptext20 0132                         __ptext12 0396                         __ptext13 01E5  
                       __ptext14 020E                         __ptext15 0160                         __ptext16 011F  
                       __ptext17 019B                         __ptext18 012B                         __ptext19 02AF  
               __size_of_sprintf 0023                   _TransmitString 01E5                    __size_of_main 0050  
                  __size_of_dtoa 0146             __CFG_WDTCWS$WDTCWSSW 0000                         _vfprintf 023B  
               _MESSAGE_INTERVAL 0800                 ___aomod@dividend 0028           __end_of_TransmitString 020E  
          __size_of_TransmitByte 002D                        sprintf@ap 00A2                 TransmitByte@byte 0073  
        ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000                  ___aomod@divisor 0020  
                    ??_vfpfcnvrt 0050                  ___aomod@counter 0071                    __pstringtext1 0821  
                  __pstringtext2 0823                    __pstringtext3 0825                    __pstringtext4 0800  
                  __pstringtext5 0000             __size_of_TransmitBit 0018                         sprintf@f 00A4  
                       sprintf@s 00A3                     _TransmitByte 020E                     ___aodiv@sign 0072  
                ?_TransmitString 0070   __end_of_PIN_MANAGER_Initialize 01BF                     ___aomod@sign 0072  
