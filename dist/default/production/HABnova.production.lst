

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Apr 26 20:38:06 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F1619 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001A                     	;# 
   100  001B                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  001D                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0090                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0113                     	;# 
   131  0114                     	;# 
   132  0115                     	;# 
   133  0116                     	;# 
   134  0117                     	;# 
   135  0118                     	;# 
   136  0119                     	;# 
   137  011C                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  018E                     	;# 
   141  0191                     	;# 
   142  0191                     	;# 
   143  0192                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0194                     	;# 
   147  0195                     	;# 
   148  0196                     	;# 
   149  0197                     	;# 
   150  0199                     	;# 
   151  0199                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019A                     	;# 
   155  019A                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019C                     	;# 
   162  019C                     	;# 
   163  019C                     	;# 
   164  019D                     	;# 
   165  019D                     	;# 
   166  019D                     	;# 
   167  019E                     	;# 
   168  019E                     	;# 
   169  019E                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  019F                     	;# 
   173  019F                     	;# 
   174  019F                     	;# 
   175  020C                     	;# 
   176  020D                     	;# 
   177  020E                     	;# 
   178  0211                     	;# 
   179  0211                     	;# 
   180  0212                     	;# 
   181  0212                     	;# 
   182  0213                     	;# 
   183  0213                     	;# 
   184  0214                     	;# 
   185  0214                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  028C                     	;# 
   195  028D                     	;# 
   196  028E                     	;# 
   197  0291                     	;# 
   198  0291                     	;# 
   199  0292                     	;# 
   200  0293                     	;# 
   201  0294                     	;# 
   202  0298                     	;# 
   203  0298                     	;# 
   204  0299                     	;# 
   205  029A                     	;# 
   206  029B                     	;# 
   207  029E                     	;# 
   208  030C                     	;# 
   209  030D                     	;# 
   210  030E                     	;# 
   211  038C                     	;# 
   212  038D                     	;# 
   213  038E                     	;# 
   214  0391                     	;# 
   215  0392                     	;# 
   216  0393                     	;# 
   217  0394                     	;# 
   218  0395                     	;# 
   219  0396                     	;# 
   220  0397                     	;# 
   221  0398                     	;# 
   222  0399                     	;# 
   223  040E                     	;# 
   224  0413                     	;# 
   225  0413                     	;# 
   226  0414                     	;# 
   227  0414                     	;# 
   228  0415                     	;# 
   229  0416                     	;# 
   230  0417                     	;# 
   231  0418                     	;# 
   232  041A                     	;# 
   233  041A                     	;# 
   234  041B                     	;# 
   235  041B                     	;# 
   236  041C                     	;# 
   237  041D                     	;# 
   238  041E                     	;# 
   239  041F                     	;# 
   240  0493                     	;# 
   241  0494                     	;# 
   242  0495                     	;# 
   243  0496                     	;# 
   244  049A                     	;# 
   245  049B                     	;# 
   246  049C                     	;# 
   247  049D                     	;# 
   248  058C                     	;# 
   249  058C                     	;# 
   250  058D                     	;# 
   251  058E                     	;# 
   252  058E                     	;# 
   253  058F                     	;# 
   254  0590                     	;# 
   255  0590                     	;# 
   256  0591                     	;# 
   257  0592                     	;# 
   258  0592                     	;# 
   259  0593                     	;# 
   260  0594                     	;# 
   261  0594                     	;# 
   262  0595                     	;# 
   263  0596                     	;# 
   264  0596                     	;# 
   265  0597                     	;# 
   266  0598                     	;# 
   267  0599                     	;# 
   268  059A                     	;# 
   269  059B                     	;# 
   270  059B                     	;# 
   271  059C                     	;# 
   272  059D                     	;# 
   273  060C                     	;# 
   274  060C                     	;# 
   275  060D                     	;# 
   276  060E                     	;# 
   277  060F                     	;# 
   278  060F                     	;# 
   279  0610                     	;# 
   280  0611                     	;# 
   281  0612                     	;# 
   282  0613                     	;# 
   283  0614                     	;# 
   284  0617                     	;# 
   285  0617                     	;# 
   286  0618                     	;# 
   287  0619                     	;# 
   288  061A                     	;# 
   289  061A                     	;# 
   290  061B                     	;# 
   291  061C                     	;# 
   292  0691                     	;# 
   293  0692                     	;# 
   294  0693                     	;# 
   295  0694                     	;# 
   296  0695                     	;# 
   297  0696                     	;# 
   298  0697                     	;# 
   299  0699                     	;# 
   300  069A                     	;# 
   301  0711                     	;# 
   302  0712                     	;# 
   303  0713                     	;# 
   304  0714                     	;# 
   305  0715                     	;# 
   306  0718                     	;# 
   307  0718                     	;# 
   308  0719                     	;# 
   309  071A                     	;# 
   310  071A                     	;# 
   311  071B                     	;# 
   312  071C                     	;# 
   313  071D                     	;# 
   314  0791                     	;# 
   315  0791                     	;# 
   316  0792                     	;# 
   317  0793                     	;# 
   318  0793                     	;# 
   319  0794                     	;# 
   320  0795                     	;# 
   321  0795                     	;# 
   322  0796                     	;# 
   323  0797                     	;# 
   324  0797                     	;# 
   325  0798                     	;# 
   326  0799                     	;# 
   327  079A                     	;# 
   328  080C                     	;# 
   329  080C                     	;# 
   330  080D                     	;# 
   331  080E                     	;# 
   332  080E                     	;# 
   333  080F                     	;# 
   334  0810                     	;# 
   335  0810                     	;# 
   336  0811                     	;# 
   337  0812                     	;# 
   338  0812                     	;# 
   339  0813                     	;# 
   340  0814                     	;# 
   341  0815                     	;# 
   342  0816                     	;# 
   343  0817                     	;# 
   344  0818                     	;# 
   345  0819                     	;# 
   346  081A                     	;# 
   347  081A                     	;# 
   348  081B                     	;# 
   349  081C                     	;# 
   350  081C                     	;# 
   351  081D                     	;# 
   352  088C                     	;# 
   353  088D                     	;# 
   354  088E                     	;# 
   355  088F                     	;# 
   356  088F                     	;# 
   357  0890                     	;# 
   358  0891                     	;# 
   359  0892                     	;# 
   360  0893                     	;# 
   361  0893                     	;# 
   362  0894                     	;# 
   363  0895                     	;# 
   364  0896                     	;# 
   365  0897                     	;# 
   366  0897                     	;# 
   367  0898                     	;# 
   368  0899                     	;# 
   369  0D8C                     	;# 
   370  0D8C                     	;# 
   371  0D8D                     	;# 
   372  0D8E                     	;# 
   373  0D8F                     	;# 
   374  0D8F                     	;# 
   375  0D90                     	;# 
   376  0D91                     	;# 
   377  0D92                     	;# 
   378  0D92                     	;# 
   379  0D93                     	;# 
   380  0D94                     	;# 
   381  0D95                     	;# 
   382  0D95                     	;# 
   383  0D96                     	;# 
   384  0D97                     	;# 
   385  0D98                     	;# 
   386  0D99                     	;# 
   387  0D9A                     	;# 
   388  0D9B                     	;# 
   389  0D9C                     	;# 
   390  0D9D                     	;# 
   391  0D9E                     	;# 
   392  0D9E                     	;# 
   393  0D9F                     	;# 
   394  0DA0                     	;# 
   395  0DA1                     	;# 
   396  0DA1                     	;# 
   397  0DA2                     	;# 
   398  0DA3                     	;# 
   399  0DA4                     	;# 
   400  0DA4                     	;# 
   401  0DA5                     	;# 
   402  0DA6                     	;# 
   403  0DA7                     	;# 
   404  0DA7                     	;# 
   405  0DA8                     	;# 
   406  0DA9                     	;# 
   407  0DAA                     	;# 
   408  0DAB                     	;# 
   409  0DAC                     	;# 
   410  0DAD                     	;# 
   411  0DAE                     	;# 
   412  0DAF                     	;# 
   413  0E0F                     	;# 
   414  0E10                     	;# 
   415  0E11                     	;# 
   416  0E12                     	;# 
   417  0E13                     	;# 
   418  0E14                     	;# 
   419  0E15                     	;# 
   420  0E16                     	;# 
   421  0E17                     	;# 
   422  0E18                     	;# 
   423  0E19                     	;# 
   424  0E1A                     	;# 
   425  0E1B                     	;# 
   426  0E1C                     	;# 
   427  0E1D                     	;# 
   428  0E1E                     	;# 
   429  0E1F                     	;# 
   430  0E20                     	;# 
   431  0E21                     	;# 
   432  0E22                     	;# 
   433  0E23                     	;# 
   434  0E24                     	;# 
   435  0E25                     	;# 
   436  0E26                     	;# 
   437  0E27                     	;# 
   438  0E28                     	;# 
   439  0E29                     	;# 
   440  0E2A                     	;# 
   441  0E2B                     	;# 
   442  0E2C                     	;# 
   443  0E2D                     	;# 
   444  0E2E                     	;# 
   445  0E90                     	;# 
   446  0E91                     	;# 
   447  0E92                     	;# 
   448  0E94                     	;# 
   449  0E95                     	;# 
   450  0E9C                     	;# 
   451  0E9D                     	;# 
   452  0E9E                     	;# 
   453  0E9F                     	;# 
   454  0EA0                     	;# 
   455  0EA1                     	;# 
   456  0EA2                     	;# 
   457  0EA3                     	;# 
   458  0EA4                     	;# 
   459  0EA5                     	;# 
   460  0EA6                     	;# 
   461  0EA7                     	;# 
   462  0F0F                     	;# 
   463  0F10                     	;# 
   464  0F11                     	;# 
   465  0F12                     	;# 
   466  0F13                     	;# 
   467  0F14                     	;# 
   468  0F15                     	;# 
   469  0F16                     	;# 
   470  0F17                     	;# 
   471  0F18                     	;# 
   472  0F19                     	;# 
   473  0F1A                     	;# 
   474  0F1B                     	;# 
   475  0F1C                     	;# 
   476  0F1D                     	;# 
   477  0F1E                     	;# 
   478  0F1F                     	;# 
   479  0F20                     	;# 
   480  0F21                     	;# 
   481  0F22                     	;# 
   482  0F23                     	;# 
   483  0F24                     	;# 
   484  0F25                     	;# 
   485  0F26                     	;# 
   486  0F27                     	;# 
   487  0F28                     	;# 
   488  0F29                     	;# 
   489  0F2A                     	;# 
   490  0F2B                     	;# 
   491  0F2C                     	;# 
   492  0F2D                     	;# 
   493  0F2E                     	;# 
   494  0F2F                     	;# 
   495  0F30                     	;# 
   496  0F31                     	;# 
   497  0F32                     	;# 
   498  0F33                     	;# 
   499  0F34                     	;# 
   500  0F35                     	;# 
   501  0F36                     	;# 
   502  0F37                     	;# 
   503  0FE4                     	;# 
   504  0FE5                     	;# 
   505  0FE6                     	;# 
   506  0FE7                     	;# 
   507  0FE8                     	;# 
   508  0FE9                     	;# 
   509  0FEA                     	;# 
   510  0FEB                     	;# 
   511  0FED                     	;# 
   512  0FEE                     	;# 
   513  0FEF                     	;# 
   514  0000                     	;# 
   515  0001                     	;# 
   516  0002                     	;# 
   517  0003                     	;# 
   518  0004                     	;# 
   519  0005                     	;# 
   520  0006                     	;# 
   521  0007                     	;# 
   522  0008                     	;# 
   523  0009                     	;# 
   524  000A                     	;# 
   525  000B                     	;# 
   526  000C                     	;# 
   527  000D                     	;# 
   528  000E                     	;# 
   529  0010                     	;# 
   530  0011                     	;# 
   531  0012                     	;# 
   532  0013                     	;# 
   533  0014                     	;# 
   534  0015                     	;# 
   535  0016                     	;# 
   536  0016                     	;# 
   537  0017                     	;# 
   538  0018                     	;# 
   539  0019                     	;# 
   540  001A                     	;# 
   541  001A                     	;# 
   542  001B                     	;# 
   543  001B                     	;# 
   544  001C                     	;# 
   545  001D                     	;# 
   546  001E                     	;# 
   547  001F                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  0090                     	;# 
   552  0091                     	;# 
   553  0092                     	;# 
   554  0093                     	;# 
   555  0094                     	;# 
   556  0095                     	;# 
   557  0096                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009A                     	;# 
   561  009B                     	;# 
   562  009B                     	;# 
   563  009C                     	;# 
   564  009D                     	;# 
   565  009E                     	;# 
   566  009F                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  0111                     	;# 
   571  0112                     	;# 
   572  0113                     	;# 
   573  0114                     	;# 
   574  0115                     	;# 
   575  0116                     	;# 
   576  0117                     	;# 
   577  0118                     	;# 
   578  0119                     	;# 
   579  011C                     	;# 
   580  018C                     	;# 
   581  018D                     	;# 
   582  018E                     	;# 
   583  0191                     	;# 
   584  0191                     	;# 
   585  0192                     	;# 
   586  0193                     	;# 
   587  0193                     	;# 
   588  0194                     	;# 
   589  0195                     	;# 
   590  0196                     	;# 
   591  0197                     	;# 
   592  0199                     	;# 
   593  0199                     	;# 
   594  0199                     	;# 
   595  019A                     	;# 
   596  019A                     	;# 
   597  019A                     	;# 
   598  019B                     	;# 
   599  019B                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019C                     	;# 
   604  019C                     	;# 
   605  019C                     	;# 
   606  019D                     	;# 
   607  019D                     	;# 
   608  019D                     	;# 
   609  019E                     	;# 
   610  019E                     	;# 
   611  019E                     	;# 
   612  019F                     	;# 
   613  019F                     	;# 
   614  019F                     	;# 
   615  019F                     	;# 
   616  019F                     	;# 
   617  020C                     	;# 
   618  020D                     	;# 
   619  020E                     	;# 
   620  0211                     	;# 
   621  0211                     	;# 
   622  0212                     	;# 
   623  0212                     	;# 
   624  0213                     	;# 
   625  0213                     	;# 
   626  0214                     	;# 
   627  0214                     	;# 
   628  0215                     	;# 
   629  0215                     	;# 
   630  0215                     	;# 
   631  0215                     	;# 
   632  0216                     	;# 
   633  0216                     	;# 
   634  0217                     	;# 
   635  0217                     	;# 
   636  028C                     	;# 
   637  028D                     	;# 
   638  028E                     	;# 
   639  0291                     	;# 
   640  0291                     	;# 
   641  0292                     	;# 
   642  0293                     	;# 
   643  0294                     	;# 
   644  0298                     	;# 
   645  0298                     	;# 
   646  0299                     	;# 
   647  029A                     	;# 
   648  029B                     	;# 
   649  029E                     	;# 
   650  030C                     	;# 
   651  030D                     	;# 
   652  030E                     	;# 
   653  038C                     	;# 
   654  038D                     	;# 
   655  038E                     	;# 
   656  0391                     	;# 
   657  0392                     	;# 
   658  0393                     	;# 
   659  0394                     	;# 
   660  0395                     	;# 
   661  0396                     	;# 
   662  0397                     	;# 
   663  0398                     	;# 
   664  0399                     	;# 
   665  040E                     	;# 
   666  0413                     	;# 
   667  0413                     	;# 
   668  0414                     	;# 
   669  0414                     	;# 
   670  0415                     	;# 
   671  0416                     	;# 
   672  0417                     	;# 
   673  0418                     	;# 
   674  041A                     	;# 
   675  041A                     	;# 
   676  041B                     	;# 
   677  041B                     	;# 
   678  041C                     	;# 
   679  041D                     	;# 
   680  041E                     	;# 
   681  041F                     	;# 
   682  0493                     	;# 
   683  0494                     	;# 
   684  0495                     	;# 
   685  0496                     	;# 
   686  049A                     	;# 
   687  049B                     	;# 
   688  049C                     	;# 
   689  049D                     	;# 
   690  058C                     	;# 
   691  058C                     	;# 
   692  058D                     	;# 
   693  058E                     	;# 
   694  058E                     	;# 
   695  058F                     	;# 
   696  0590                     	;# 
   697  0590                     	;# 
   698  0591                     	;# 
   699  0592                     	;# 
   700  0592                     	;# 
   701  0593                     	;# 
   702  0594                     	;# 
   703  0594                     	;# 
   704  0595                     	;# 
   705  0596                     	;# 
   706  0596                     	;# 
   707  0597                     	;# 
   708  0598                     	;# 
   709  0599                     	;# 
   710  059A                     	;# 
   711  059B                     	;# 
   712  059B                     	;# 
   713  059C                     	;# 
   714  059D                     	;# 
   715  060C                     	;# 
   716  060C                     	;# 
   717  060D                     	;# 
   718  060E                     	;# 
   719  060F                     	;# 
   720  060F                     	;# 
   721  0610                     	;# 
   722  0611                     	;# 
   723  0612                     	;# 
   724  0613                     	;# 
   725  0614                     	;# 
   726  0617                     	;# 
   727  0617                     	;# 
   728  0618                     	;# 
   729  0619                     	;# 
   730  061A                     	;# 
   731  061A                     	;# 
   732  061B                     	;# 
   733  061C                     	;# 
   734  0691                     	;# 
   735  0692                     	;# 
   736  0693                     	;# 
   737  0694                     	;# 
   738  0695                     	;# 
   739  0696                     	;# 
   740  0697                     	;# 
   741  0699                     	;# 
   742  069A                     	;# 
   743  0711                     	;# 
   744  0712                     	;# 
   745  0713                     	;# 
   746  0714                     	;# 
   747  0715                     	;# 
   748  0718                     	;# 
   749  0718                     	;# 
   750  0719                     	;# 
   751  071A                     	;# 
   752  071A                     	;# 
   753  071B                     	;# 
   754  071C                     	;# 
   755  071D                     	;# 
   756  0791                     	;# 
   757  0791                     	;# 
   758  0792                     	;# 
   759  0793                     	;# 
   760  0793                     	;# 
   761  0794                     	;# 
   762  0795                     	;# 
   763  0795                     	;# 
   764  0796                     	;# 
   765  0797                     	;# 
   766  0797                     	;# 
   767  0798                     	;# 
   768  0799                     	;# 
   769  079A                     	;# 
   770  080C                     	;# 
   771  080C                     	;# 
   772  080D                     	;# 
   773  080E                     	;# 
   774  080E                     	;# 
   775  080F                     	;# 
   776  0810                     	;# 
   777  0810                     	;# 
   778  0811                     	;# 
   779  0812                     	;# 
   780  0812                     	;# 
   781  0813                     	;# 
   782  0814                     	;# 
   783  0815                     	;# 
   784  0816                     	;# 
   785  0817                     	;# 
   786  0818                     	;# 
   787  0819                     	;# 
   788  081A                     	;# 
   789  081A                     	;# 
   790  081B                     	;# 
   791  081C                     	;# 
   792  081C                     	;# 
   793  081D                     	;# 
   794  088C                     	;# 
   795  088D                     	;# 
   796  088E                     	;# 
   797  088F                     	;# 
   798  088F                     	;# 
   799  0890                     	;# 
   800  0891                     	;# 
   801  0892                     	;# 
   802  0893                     	;# 
   803  0893                     	;# 
   804  0894                     	;# 
   805  0895                     	;# 
   806  0896                     	;# 
   807  0897                     	;# 
   808  0897                     	;# 
   809  0898                     	;# 
   810  0899                     	;# 
   811  0D8C                     	;# 
   812  0D8C                     	;# 
   813  0D8D                     	;# 
   814  0D8E                     	;# 
   815  0D8F                     	;# 
   816  0D8F                     	;# 
   817  0D90                     	;# 
   818  0D91                     	;# 
   819  0D92                     	;# 
   820  0D92                     	;# 
   821  0D93                     	;# 
   822  0D94                     	;# 
   823  0D95                     	;# 
   824  0D95                     	;# 
   825  0D96                     	;# 
   826  0D97                     	;# 
   827  0D98                     	;# 
   828  0D99                     	;# 
   829  0D9A                     	;# 
   830  0D9B                     	;# 
   831  0D9C                     	;# 
   832  0D9D                     	;# 
   833  0D9E                     	;# 
   834  0D9E                     	;# 
   835  0D9F                     	;# 
   836  0DA0                     	;# 
   837  0DA1                     	;# 
   838  0DA1                     	;# 
   839  0DA2                     	;# 
   840  0DA3                     	;# 
   841  0DA4                     	;# 
   842  0DA4                     	;# 
   843  0DA5                     	;# 
   844  0DA6                     	;# 
   845  0DA7                     	;# 
   846  0DA7                     	;# 
   847  0DA8                     	;# 
   848  0DA9                     	;# 
   849  0DAA                     	;# 
   850  0DAB                     	;# 
   851  0DAC                     	;# 
   852  0DAD                     	;# 
   853  0DAE                     	;# 
   854  0DAF                     	;# 
   855  0E0F                     	;# 
   856  0E10                     	;# 
   857  0E11                     	;# 
   858  0E12                     	;# 
   859  0E13                     	;# 
   860  0E14                     	;# 
   861  0E15                     	;# 
   862  0E16                     	;# 
   863  0E17                     	;# 
   864  0E18                     	;# 
   865  0E19                     	;# 
   866  0E1A                     	;# 
   867  0E1B                     	;# 
   868  0E1C                     	;# 
   869  0E1D                     	;# 
   870  0E1E                     	;# 
   871  0E1F                     	;# 
   872  0E20                     	;# 
   873  0E21                     	;# 
   874  0E22                     	;# 
   875  0E23                     	;# 
   876  0E24                     	;# 
   877  0E25                     	;# 
   878  0E26                     	;# 
   879  0E27                     	;# 
   880  0E28                     	;# 
   881  0E29                     	;# 
   882  0E2A                     	;# 
   883  0E2B                     	;# 
   884  0E2C                     	;# 
   885  0E2D                     	;# 
   886  0E2E                     	;# 
   887  0E90                     	;# 
   888  0E91                     	;# 
   889  0E92                     	;# 
   890  0E94                     	;# 
   891  0E95                     	;# 
   892  0E9C                     	;# 
   893  0E9D                     	;# 
   894  0E9E                     	;# 
   895  0E9F                     	;# 
   896  0EA0                     	;# 
   897  0EA1                     	;# 
   898  0EA2                     	;# 
   899  0EA3                     	;# 
   900  0EA4                     	;# 
   901  0EA5                     	;# 
   902  0EA6                     	;# 
   903  0EA7                     	;# 
   904  0F0F                     	;# 
   905  0F10                     	;# 
   906  0F11                     	;# 
   907  0F12                     	;# 
   908  0F13                     	;# 
   909  0F14                     	;# 
   910  0F15                     	;# 
   911  0F16                     	;# 
   912  0F17                     	;# 
   913  0F18                     	;# 
   914  0F19                     	;# 
   915  0F1A                     	;# 
   916  0F1B                     	;# 
   917  0F1C                     	;# 
   918  0F1D                     	;# 
   919  0F1E                     	;# 
   920  0F1F                     	;# 
   921  0F20                     	;# 
   922  0F21                     	;# 
   923  0F22                     	;# 
   924  0F23                     	;# 
   925  0F24                     	;# 
   926  0F25                     	;# 
   927  0F26                     	;# 
   928  0F27                     	;# 
   929  0F28                     	;# 
   930  0F29                     	;# 
   931  0F2A                     	;# 
   932  0F2B                     	;# 
   933  0F2C                     	;# 
   934  0F2D                     	;# 
   935  0F2E                     	;# 
   936  0F2F                     	;# 
   937  0F30                     	;# 
   938  0F31                     	;# 
   939  0F32                     	;# 
   940  0F33                     	;# 
   941  0F34                     	;# 
   942  0F35                     	;# 
   943  0F36                     	;# 
   944  0F37                     	;# 
   945  0FE4                     	;# 
   946  0FE5                     	;# 
   947  0FE6                     	;# 
   948  0FE7                     	;# 
   949  0FE8                     	;# 
   950  0FE9                     	;# 
   951  0FEA                     	;# 
   952  0FEB                     	;# 
   953  0FED                     	;# 
   954  0FEE                     	;# 
   955  0FEF                     	;# 
   956  0000                     	;# 
   957  0001                     	;# 
   958  0002                     	;# 
   959  0003                     	;# 
   960  0004                     	;# 
   961  0005                     	;# 
   962  0006                     	;# 
   963  0007                     	;# 
   964  0008                     	;# 
   965  0009                     	;# 
   966  000A                     	;# 
   967  000B                     	;# 
   968  000C                     	;# 
   969  000D                     	;# 
   970  000E                     	;# 
   971  0010                     	;# 
   972  0011                     	;# 
   973  0012                     	;# 
   974  0013                     	;# 
   975  0014                     	;# 
   976  0015                     	;# 
   977  0016                     	;# 
   978  0016                     	;# 
   979  0017                     	;# 
   980  0018                     	;# 
   981  0019                     	;# 
   982  001A                     	;# 
   983  001A                     	;# 
   984  001B                     	;# 
   985  001B                     	;# 
   986  001C                     	;# 
   987  001D                     	;# 
   988  001E                     	;# 
   989  001F                     	;# 
   990  008C                     	;# 
   991  008D                     	;# 
   992  008E                     	;# 
   993  0090                     	;# 
   994  0091                     	;# 
   995  0092                     	;# 
   996  0093                     	;# 
   997  0094                     	;# 
   998  0095                     	;# 
   999  0096                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  009F                     	;# 
  1009  010C                     	;# 
  1010  010D                     	;# 
  1011  010E                     	;# 
  1012  0111                     	;# 
  1013  0112                     	;# 
  1014  0113                     	;# 
  1015  0114                     	;# 
  1016  0115                     	;# 
  1017  0116                     	;# 
  1018  0117                     	;# 
  1019  0118                     	;# 
  1020  0119                     	;# 
  1021  011C                     	;# 
  1022  018C                     	;# 
  1023  018D                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0194                     	;# 
  1031  0195                     	;# 
  1032  0196                     	;# 
  1033  0197                     	;# 
  1034  0199                     	;# 
  1035  0199                     	;# 
  1036  0199                     	;# 
  1037  019A                     	;# 
  1038  019A                     	;# 
  1039  019A                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019B                     	;# 
  1043  019B                     	;# 
  1044  019B                     	;# 
  1045  019C                     	;# 
  1046  019C                     	;# 
  1047  019C                     	;# 
  1048  019D                     	;# 
  1049  019D                     	;# 
  1050  019D                     	;# 
  1051  019E                     	;# 
  1052  019E                     	;# 
  1053  019E                     	;# 
  1054  019F                     	;# 
  1055  019F                     	;# 
  1056  019F                     	;# 
  1057  019F                     	;# 
  1058  019F                     	;# 
  1059  020C                     	;# 
  1060  020D                     	;# 
  1061  020E                     	;# 
  1062  0211                     	;# 
  1063  0211                     	;# 
  1064  0212                     	;# 
  1065  0212                     	;# 
  1066  0213                     	;# 
  1067  0213                     	;# 
  1068  0214                     	;# 
  1069  0214                     	;# 
  1070  0215                     	;# 
  1071  0215                     	;# 
  1072  0215                     	;# 
  1073  0215                     	;# 
  1074  0216                     	;# 
  1075  0216                     	;# 
  1076  0217                     	;# 
  1077  0217                     	;# 
  1078  028C                     	;# 
  1079  028D                     	;# 
  1080  028E                     	;# 
  1081  0291                     	;# 
  1082  0291                     	;# 
  1083  0292                     	;# 
  1084  0293                     	;# 
  1085  0294                     	;# 
  1086  0298                     	;# 
  1087  0298                     	;# 
  1088  0299                     	;# 
  1089  029A                     	;# 
  1090  029B                     	;# 
  1091  029E                     	;# 
  1092  030C                     	;# 
  1093  030D                     	;# 
  1094  030E                     	;# 
  1095  038C                     	;# 
  1096  038D                     	;# 
  1097  038E                     	;# 
  1098  0391                     	;# 
  1099  0392                     	;# 
  1100  0393                     	;# 
  1101  0394                     	;# 
  1102  0395                     	;# 
  1103  0396                     	;# 
  1104  0397                     	;# 
  1105  0398                     	;# 
  1106  0399                     	;# 
  1107  040E                     	;# 
  1108  0413                     	;# 
  1109  0413                     	;# 
  1110  0414                     	;# 
  1111  0414                     	;# 
  1112  0415                     	;# 
  1113  0416                     	;# 
  1114  0417                     	;# 
  1115  0418                     	;# 
  1116  041A                     	;# 
  1117  041A                     	;# 
  1118  041B                     	;# 
  1119  041B                     	;# 
  1120  041C                     	;# 
  1121  041D                     	;# 
  1122  041E                     	;# 
  1123  041F                     	;# 
  1124  0493                     	;# 
  1125  0494                     	;# 
  1126  0495                     	;# 
  1127  0496                     	;# 
  1128  049A                     	;# 
  1129  049B                     	;# 
  1130  049C                     	;# 
  1131  049D                     	;# 
  1132  058C                     	;# 
  1133  058C                     	;# 
  1134  058D                     	;# 
  1135  058E                     	;# 
  1136  058E                     	;# 
  1137  058F                     	;# 
  1138  0590                     	;# 
  1139  0590                     	;# 
  1140  0591                     	;# 
  1141  0592                     	;# 
  1142  0592                     	;# 
  1143  0593                     	;# 
  1144  0594                     	;# 
  1145  0594                     	;# 
  1146  0595                     	;# 
  1147  0596                     	;# 
  1148  0596                     	;# 
  1149  0597                     	;# 
  1150  0598                     	;# 
  1151  0599                     	;# 
  1152  059A                     	;# 
  1153  059B                     	;# 
  1154  059B                     	;# 
  1155  059C                     	;# 
  1156  059D                     	;# 
  1157  060C                     	;# 
  1158  060C                     	;# 
  1159  060D                     	;# 
  1160  060E                     	;# 
  1161  060F                     	;# 
  1162  060F                     	;# 
  1163  0610                     	;# 
  1164  0611                     	;# 
  1165  0612                     	;# 
  1166  0613                     	;# 
  1167  0614                     	;# 
  1168  0617                     	;# 
  1169  0617                     	;# 
  1170  0618                     	;# 
  1171  0619                     	;# 
  1172  061A                     	;# 
  1173  061A                     	;# 
  1174  061B                     	;# 
  1175  061C                     	;# 
  1176  0691                     	;# 
  1177  0692                     	;# 
  1178  0693                     	;# 
  1179  0694                     	;# 
  1180  0695                     	;# 
  1181  0696                     	;# 
  1182  0697                     	;# 
  1183  0699                     	;# 
  1184  069A                     	;# 
  1185  0711                     	;# 
  1186  0712                     	;# 
  1187  0713                     	;# 
  1188  0714                     	;# 
  1189  0715                     	;# 
  1190  0718                     	;# 
  1191  0718                     	;# 
  1192  0719                     	;# 
  1193  071A                     	;# 
  1194  071A                     	;# 
  1195  071B                     	;# 
  1196  071C                     	;# 
  1197  071D                     	;# 
  1198  0791                     	;# 
  1199  0791                     	;# 
  1200  0792                     	;# 
  1201  0793                     	;# 
  1202  0793                     	;# 
  1203  0794                     	;# 
  1204  0795                     	;# 
  1205  0795                     	;# 
  1206  0796                     	;# 
  1207  0797                     	;# 
  1208  0797                     	;# 
  1209  0798                     	;# 
  1210  0799                     	;# 
  1211  079A                     	;# 
  1212  080C                     	;# 
  1213  080C                     	;# 
  1214  080D                     	;# 
  1215  080E                     	;# 
  1216  080E                     	;# 
  1217  080F                     	;# 
  1218  0810                     	;# 
  1219  0810                     	;# 
  1220  0811                     	;# 
  1221  0812                     	;# 
  1222  0812                     	;# 
  1223  0813                     	;# 
  1224  0814                     	;# 
  1225  0815                     	;# 
  1226  0816                     	;# 
  1227  0817                     	;# 
  1228  0818                     	;# 
  1229  0819                     	;# 
  1230  081A                     	;# 
  1231  081A                     	;# 
  1232  081B                     	;# 
  1233  081C                     	;# 
  1234  081C                     	;# 
  1235  081D                     	;# 
  1236  088C                     	;# 
  1237  088D                     	;# 
  1238  088E                     	;# 
  1239  088F                     	;# 
  1240  088F                     	;# 
  1241  0890                     	;# 
  1242  0891                     	;# 
  1243  0892                     	;# 
  1244  0893                     	;# 
  1245  0893                     	;# 
  1246  0894                     	;# 
  1247  0895                     	;# 
  1248  0896                     	;# 
  1249  0897                     	;# 
  1250  0897                     	;# 
  1251  0898                     	;# 
  1252  0899                     	;# 
  1253  0D8C                     	;# 
  1254  0D8C                     	;# 
  1255  0D8D                     	;# 
  1256  0D8E                     	;# 
  1257  0D8F                     	;# 
  1258  0D8F                     	;# 
  1259  0D90                     	;# 
  1260  0D91                     	;# 
  1261  0D92                     	;# 
  1262  0D92                     	;# 
  1263  0D93                     	;# 
  1264  0D94                     	;# 
  1265  0D95                     	;# 
  1266  0D95                     	;# 
  1267  0D96                     	;# 
  1268  0D97                     	;# 
  1269  0D98                     	;# 
  1270  0D99                     	;# 
  1271  0D9A                     	;# 
  1272  0D9B                     	;# 
  1273  0D9C                     	;# 
  1274  0D9D                     	;# 
  1275  0D9E                     	;# 
  1276  0D9E                     	;# 
  1277  0D9F                     	;# 
  1278  0DA0                     	;# 
  1279  0DA1                     	;# 
  1280  0DA1                     	;# 
  1281  0DA2                     	;# 
  1282  0DA3                     	;# 
  1283  0DA4                     	;# 
  1284  0DA4                     	;# 
  1285  0DA5                     	;# 
  1286  0DA6                     	;# 
  1287  0DA7                     	;# 
  1288  0DA7                     	;# 
  1289  0DA8                     	;# 
  1290  0DA9                     	;# 
  1291  0DAA                     	;# 
  1292  0DAB                     	;# 
  1293  0DAC                     	;# 
  1294  0DAD                     	;# 
  1295  0DAE                     	;# 
  1296  0DAF                     	;# 
  1297  0E0F                     	;# 
  1298  0E10                     	;# 
  1299  0E11                     	;# 
  1300  0E12                     	;# 
  1301  0E13                     	;# 
  1302  0E14                     	;# 
  1303  0E15                     	;# 
  1304  0E16                     	;# 
  1305  0E17                     	;# 
  1306  0E18                     	;# 
  1307  0E19                     	;# 
  1308  0E1A                     	;# 
  1309  0E1B                     	;# 
  1310  0E1C                     	;# 
  1311  0E1D                     	;# 
  1312  0E1E                     	;# 
  1313  0E1F                     	;# 
  1314  0E20                     	;# 
  1315  0E21                     	;# 
  1316  0E22                     	;# 
  1317  0E23                     	;# 
  1318  0E24                     	;# 
  1319  0E25                     	;# 
  1320  0E26                     	;# 
  1321  0E27                     	;# 
  1322  0E28                     	;# 
  1323  0E29                     	;# 
  1324  0E2A                     	;# 
  1325  0E2B                     	;# 
  1326  0E2C                     	;# 
  1327  0E2D                     	;# 
  1328  0E2E                     	;# 
  1329  0E90                     	;# 
  1330  0E91                     	;# 
  1331  0E92                     	;# 
  1332  0E94                     	;# 
  1333  0E95                     	;# 
  1334  0E9C                     	;# 
  1335  0E9D                     	;# 
  1336  0E9E                     	;# 
  1337  0E9F                     	;# 
  1338  0EA0                     	;# 
  1339  0EA1                     	;# 
  1340  0EA2                     	;# 
  1341  0EA3                     	;# 
  1342  0EA4                     	;# 
  1343  0EA5                     	;# 
  1344  0EA6                     	;# 
  1345  0EA7                     	;# 
  1346  0F0F                     	;# 
  1347  0F10                     	;# 
  1348  0F11                     	;# 
  1349  0F12                     	;# 
  1350  0F13                     	;# 
  1351  0F14                     	;# 
  1352  0F15                     	;# 
  1353  0F16                     	;# 
  1354  0F17                     	;# 
  1355  0F18                     	;# 
  1356  0F19                     	;# 
  1357  0F1A                     	;# 
  1358  0F1B                     	;# 
  1359  0F1C                     	;# 
  1360  0F1D                     	;# 
  1361  0F1E                     	;# 
  1362  0F1F                     	;# 
  1363  0F20                     	;# 
  1364  0F21                     	;# 
  1365  0F22                     	;# 
  1366  0F23                     	;# 
  1367  0F24                     	;# 
  1368  0F25                     	;# 
  1369  0F26                     	;# 
  1370  0F27                     	;# 
  1371  0F28                     	;# 
  1372  0F29                     	;# 
  1373  0F2A                     	;# 
  1374  0F2B                     	;# 
  1375  0F2C                     	;# 
  1376  0F2D                     	;# 
  1377  0F2E                     	;# 
  1378  0F2F                     	;# 
  1379  0F30                     	;# 
  1380  0F31                     	;# 
  1381  0F32                     	;# 
  1382  0F33                     	;# 
  1383  0F34                     	;# 
  1384  0F35                     	;# 
  1385  0F36                     	;# 
  1386  0F37                     	;# 
  1387  0FE4                     	;# 
  1388  0FE5                     	;# 
  1389  0FE6                     	;# 
  1390  0FE7                     	;# 
  1391  0FE8                     	;# 
  1392  0FE9                     	;# 
  1393  0FEA                     	;# 
  1394  0FEB                     	;# 
  1395  0FED                     	;# 
  1396  0FEE                     	;# 
  1397  0FEF                     	;# 
  1398                           
  1399                           	psect	stringtext1
  1400  0830                     __pstringtext1:	
  1401  0830                     crc16@FRONT_BIT:	
  1402  0830  3400               	retlw	0
  1403  0831  3480               	retlw	128
  1404  0832                     __end_ofcrc16@FRONT_BIT:	
  1405                           
  1406                           	psect	stringtext2
  1407  0800                     __pstringtext2:	
  1408  0800                     _BAUD_DELAY:	
  1409  0800  3414               	retlw	20
  1410  0801  3400               	retlw	0
  1411  0802                     __end_of_BAUD_DELAY:	
  1412  0095                     _OPTION_REGbits	set	149
  1413  008E                     _TRISC	set	142
  1414  008D                     _TRISB	set	141
  1415  008C                     _TRISA	set	140
  1416  0098                     _OSCTUNE	set	152
  1417  0099                     _OSCCON	set	153
  1418  010C                     _LATAbits	set	268
  1419  010E                     _LATC	set	270
  1420  010D                     _LATB	set	269
  1421  010C                     _LATA	set	268
  1422  0116                     _BORCON	set	278
  1423  018C                     _ANSELA	set	396
  1424  018D                     _ANSELB	set	397
  1425  018E                     _ANSELC	set	398
  1426  020E                     _WPUC	set	526
  1427  020C                     _WPUA	set	524
  1428  020D                     _WPUB	set	525
  1429  028E                     _ODCONC	set	654
  1430  028D                     _ODCONB	set	653
  1431  028C                     _ODCONA	set	652
  1432  030E                     _SLRCONC	set	782
  1433  030D                     _SLRCONB	set	781
  1434  030C                     _SLRCONA	set	780
  1435  0802                     STR_1:	
  1436  0802  3452               	retlw	82	;'R'
  1437  0803  3454               	retlw	84	;'T'
  1438  0804  3454               	retlw	84	;'T'
  1439  0805  3459               	retlw	89	;'Y'
  1440  0806  3420               	retlw	32	;' '
  1441  0807  3454               	retlw	84	;'T'
  1442  0808  3472               	retlw	114	;'r'
  1443  0809  3461               	retlw	97	;'a'
  1444  080A  346E               	retlw	110	;'n'
  1445  080B  3473               	retlw	115	;'s'
  1446  080C  346D               	retlw	109	;'m'
  1447  080D  3469               	retlw	105	;'i'
  1448  080E  3473               	retlw	115	;'s'
  1449  080F  3473               	retlw	115	;'s'
  1450  0810  3469               	retlw	105	;'i'
  1451  0811  346F               	retlw	111	;'o'
  1452  0812  346E               	retlw	110	;'n'
  1453  0813  3420               	retlw	32	;' '
  1454  0814  3454               	retlw	84	;'T'
  1455  0815  3465               	retlw	101	;'e'
  1456  0816  3473               	retlw	115	;'s'
  1457  0817  3474               	retlw	116	;'t'
  1458  0818  342C               	retlw	44	;','
  1459  0819  3420               	retlw	32	;' '
  1460  081A  3448               	retlw	72	;'H'
  1461  081B  3465               	retlw	101	;'e'
  1462  081C  346C               	retlw	108	;'l'
  1463  081D  346C               	retlw	108	;'l'
  1464  081E  346F               	retlw	111	;'o'
  1465  081F  3420               	retlw	32	;' '
  1466  0820  3457               	retlw	87	;'W'
  1467  0821  346F               	retlw	111	;'o'
  1468  0822  3472               	retlw	114	;'r'
  1469  0823  346C               	retlw	108	;'l'
  1470  0824  3464               	retlw	100	;'d'
  1471  0825  3421               	retlw	33	;'!'
  1472  0826  3420               	retlw	32	;' '
  1473  0827  3449               	retlw	73	;'I'
  1474  0828  3444               	retlw	68	;'D'
  1475  0829  343A               	retlw	58	;':'
  1476  082A  3420               	retlw	32	;' '
  1477  082B  3425               	retlw	37	;'%'
  1478  082C  3464               	retlw	100	;'d'
  1479  082D  3420               	retlw	32	;' '
  1480  082E  3400               	retlw	0
  1481  082F  3400               	retlw	0
  1482                           
  1483                           	psect	stringtext3
  1484  0000                     __pstringtext3:	
  1485                           
  1486                           ; #config settings
  1487  0000                     
  1488                           	psect	cinit
  1489  07EA                     start_initialization:	
  1490  07EA                     __initialization:	
  1491                           
  1492                           ; Clear objects allocated to BANK0
  1493  07EA  0020               	movlb	0	; select bank0
  1494  07EB  01EB               	clrf	__pbssBANK0& (0+127)
  1495  07EC  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  1496  07ED  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  1497  07EE  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  1498                           
  1499                           ; Clear objects allocated to BANK1
  1500  07EF  0021               	movlb	1	; select bank1
  1501  07F0  01D8               	clrf	__pbssBANK1& (0+127)
  1502  07F1  01D9               	clrf	(__pbssBANK1+1)& (0+127)
  1503  07F2  01DA               	clrf	(__pbssBANK1+2)& (0+127)
  1504  07F3  01DB               	clrf	(__pbssBANK1+3)& (0+127)
  1505  07F4  01DC               	clrf	(__pbssBANK1+4)& (0+127)
  1506  07F5  01DD               	clrf	(__pbssBANK1+5)& (0+127)
  1507                           
  1508                           ; Clear objects allocated to BANK2
  1509  07F6  3020               	movlw	low __pbssBANK2
  1510  07F7  0084               	movwf	4
  1511  07F8  3001               	movlw	high __pbssBANK2
  1512  07F9  0085               	movwf	5
  1513  07FA  3020               	movlw	32
  1514  07FB  3181  2134         	fcall	clear_ram0
  1515  07FD                     end_of_initialization:	
  1516                           ;End of C runtime variable initialization code
  1517                           
  1518  07FD                     __end_of__initialization:	
  1519  07FD  0020               	movlb	0
  1520  07FE  3183  2B3E         	ljmp	_main	;jump to C main() function
  1521                           
  1522                           	psect	bssBANK0
  1523  006B                     __pbssBANK0:	
  1524  006B                     _prec:	
  1525  006B                     	ds	2
  1526  006D                     _flags:	
  1527  006D                     	ds	2
  1528                           
  1529                           	psect	bssBANK1
  1530  00D8                     __pbssBANK1:	
  1531  00D8                     _nout:	
  1532  00D8                     	ds	2
  1533  00DA                     _width:	
  1534  00DA                     	ds	2
  1535  00DC                     _transmission_time:	
  1536  00DC                     	ds	2
  1537                           
  1538                           	psect	bssBANK2
  1539  0120                     __pbssBANK2:	
  1540  0120                     _dbuf:	
  1541  0120                     	ds	32
  1542                           
  1543                           	psect	clrtext
  1544  0134                     clear_ram0:	
  1545                           ;	Called with FSR0 containing the base address, and
  1546                           ;	WREG with the size to clear
  1547                           
  1548  0134  0064               	clrwdt	;clear the watchdog before getting into this loop
  1549  0135                     clrloop0:	
  1550  0135  0180               	clrf	0	;clear RAM location pointed to by FSR
  1551  0136  3101               	addfsr 0,1
  1552  0137  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1553  0138  2935               	goto	clrloop0	;have we reached the end yet?
  1554  0139  3400               	retlw	0	;all done for this memory range, return
  1555                           
  1556                           	psect	cstackBANK1
  1557  00A0                     __pcstackBANK1:	
  1558  00A0                     	ds	2
  1559  00A2                     sprintf@ap:	
  1560                           
  1561                           ; 1 bytes @ 0x2
  1562  00A2                     	ds	1
  1563  00A3                     sprintf@s:	
  1564                           
  1565                           ; 1 bytes @ 0x3
  1566  00A3                     	ds	1
  1567  00A4                     sprintf@f:	
  1568                           
  1569                           ; 5 bytes @ 0x4
  1570  00A4                     	ds	5
  1571  00A9                     main@message:	
  1572                           
  1573                           ; 43 bytes @ 0x9
  1574  00A9                     	ds	43
  1575  00D4                     main@id:	
  1576                           
  1577                           ; 2 bytes @ 0x34
  1578  00D4                     	ds	2
  1579  00D6                     main@i:	
  1580                           
  1581                           ; 2 bytes @ 0x36
  1582  00D6                     	ds	2
  1583                           
  1584                           	psect	cstackCOMMON
  1585  0070                     __pcstackCOMMON:	
  1586  0070                     ?_PIN_MANAGER_Initialize:	
  1587  0070                     ??_PIN_MANAGER_Initialize:	
  1588                           ; 1 bytes @ 0x0
  1589                           
  1590  0070                     ?_OSCILLATOR_Initialize:	
  1591                           ; 1 bytes @ 0x0
  1592                           
  1593  0070                     ??_OSCILLATOR_Initialize:	
  1594                           ; 1 bytes @ 0x0
  1595                           
  1596  0070                     ?_putch:	
  1597                           ; 1 bytes @ 0x0
  1598                           
  1599  0070                     ??_putch:	
  1600                           ; 1 bytes @ 0x0
  1601                           
  1602  0070                     ?_SYSTEM_Initialize:	
  1603                           ; 1 bytes @ 0x0
  1604                           
  1605  0070                     ??_SYSTEM_Initialize:	
  1606                           ; 1 bytes @ 0x0
  1607                           
  1608  0070                     ?_TransmitBit:	
  1609                           ; 1 bytes @ 0x0
  1610                           
  1611  0070                     ??_TransmitBit:	
  1612                           ; 1 bytes @ 0x0
  1613                           
  1614  0070                     ?_TransmitByte:	
  1615                           ; 1 bytes @ 0x0
  1616                           
  1617  0070                     ?_TransmitString:	
  1618                           ; 1 bytes @ 0x0
  1619                           
  1620  0070                     ?_main:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0070                     ??___aodiv:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     ??___aomod:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0070                     ?_strlen:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     ?_fputc:	
  1633                           ; 2 bytes @ 0x0
  1634                           
  1635  0070                     putch@c:	
  1636                           ; 2 bytes @ 0x0
  1637                           
  1638  0070                     fputc@c:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0070                     strlen@s:	
  1642                           ; 2 bytes @ 0x0
  1643                           
  1644                           
  1645                           ; 2 bytes @ 0x0
  1646  0070                     	ds	1
  1647  0071                     TransmitBit@b:	
  1648  0071                     ___aodiv@counter:	
  1649                           ; 1 bytes @ 0x1
  1650                           
  1651  0071                     ___aomod@counter:	
  1652                           ; 1 bytes @ 0x1
  1653                           
  1654                           
  1655                           ; 1 bytes @ 0x1
  1656  0071                     	ds	1
  1657  0072                     ??_strlen:	
  1658  0072                     ??_TransmitByte:	
  1659                           ; 1 bytes @ 0x2
  1660                           
  1661  0072                     ___aodiv@sign:	
  1662                           ; 1 bytes @ 0x2
  1663                           
  1664  0072                     ___aomod@sign:	
  1665                           ; 1 bytes @ 0x2
  1666                           
  1667  0072                     fputc@fp:	
  1668                           ; 1 bytes @ 0x2
  1669                           
  1670  0072                     strlen@a:	
  1671                           ; 1 bytes @ 0x2
  1672                           
  1673                           
  1674                           ; 2 bytes @ 0x2
  1675  0072                     	ds	1
  1676  0073                     ??_fputc:	
  1677  0073                     ?_abs:	
  1678                           ; 1 bytes @ 0x3
  1679                           
  1680  0073                     TransmitByte@byte:	
  1681                           ; 2 bytes @ 0x3
  1682                           
  1683  0073                     abs@a:	
  1684                           ; 1 bytes @ 0x3
  1685                           
  1686  0073                     ___aodiv@quotient:	
  1687                           ; 2 bytes @ 0x3
  1688                           
  1689                           
  1690                           ; 8 bytes @ 0x3
  1691  0073                     	ds	1
  1692  0074                     ?_crc16:	
  1693  0074                     crc16@polynomial:	
  1694                           ; 2 bytes @ 0x4
  1695                           
  1696  0074                     TransmitByte@i:	
  1697                           ; 2 bytes @ 0x4
  1698                           
  1699                           
  1700                           ; 2 bytes @ 0x4
  1701  0074                     	ds	1
  1702  0075                     ??_abs:	
  1703                           
  1704                           ; 1 bytes @ 0x5
  1705  0075                     	ds	1
  1706  0076                     ??_crc16:	
  1707  0076                     ??_TransmitString:	
  1708                           ; 1 bytes @ 0x6
  1709                           
  1710                           
  1711                           ; 1 bytes @ 0x6
  1712  0076                     	ds	1
  1713  0077                     TransmitString@counti:	
  1714                           
  1715                           ; 2 bytes @ 0x7
  1716  0077                     	ds	1
  1717  0078                     ?_fputs:	
  1718  0078                     fputs@fp:	
  1719                           ; 2 bytes @ 0x8
  1720                           
  1721                           
  1722                           ; 1 bytes @ 0x8
  1723  0078                     	ds	1
  1724  0079                     ??_fputs:	
  1725  0079                     ?_AppendCRC:	
  1726                           ; 1 bytes @ 0x9
  1727                           
  1728  0079                     TransmitString@message:	
  1729                           ; 1 bytes @ 0x9
  1730                           
  1731  0079                     AppendCRC@crc:	
  1732                           ; 1 bytes @ 0x9
  1733                           
  1734                           
  1735                           ; 2 bytes @ 0x9
  1736  0079                     	ds	1
  1737  007A                     TransmitString@i:	
  1738                           
  1739                           ; 2 bytes @ 0xA
  1740  007A                     	ds	1
  1741  007B                     ??_AppendCRC:	
  1742                           
  1743                           ; 1 bytes @ 0xB
  1744  007B                     	ds	1
  1745  007C                     ??_pad:	
  1746                           
  1747                           ; 1 bytes @ 0xC
  1748  007C                     	ds	1
  1749  007D                     ??_sprintf:	
  1750                           
  1751                           ; 1 bytes @ 0xD
  1752  007D                     	ds	1
  1753                           
  1754                           	psect	cstackBANK0
  1755  0020                     __pcstackBANK0:	
  1756  0020                     ?___aodiv:	
  1757  0020                     ?___aomod:	
  1758                           ; 8 bytes @ 0x0
  1759                           
  1760  0020                     fputs@c:	
  1761                           ; 8 bytes @ 0x0
  1762                           
  1763  0020                     ___aodiv@divisor:	
  1764                           ; 1 bytes @ 0x0
  1765                           
  1766  0020                     ___aomod@divisor:	
  1767                           ; 8 bytes @ 0x0
  1768                           
  1769                           
  1770                           ; 8 bytes @ 0x0
  1771  0020                     	ds	1
  1772  0021                     crc16@counti:	
  1773  0021                     fputs@i:	
  1774                           ; 2 bytes @ 0x1
  1775                           
  1776                           
  1777                           ; 2 bytes @ 0x1
  1778  0021                     	ds	2
  1779  0023                     crc16@byte:	
  1780  0023                     fputs@s:	
  1781                           ; 1 bytes @ 0x3
  1782                           
  1783                           
  1784                           ; 1 bytes @ 0x3
  1785  0023                     	ds	1
  1786  0024                     ?_pad:	
  1787  0024                     pad@buf:	
  1788                           ; 2 bytes @ 0x4
  1789                           
  1790  0024                     crc16@i:	
  1791                           ; 1 bytes @ 0x4
  1792                           
  1793                           
  1794                           ; 2 bytes @ 0x4
  1795  0024                     	ds	1
  1796  0025                     pad@p:	
  1797                           
  1798                           ; 2 bytes @ 0x5
  1799  0025                     	ds	1
  1800  0026                     crc16@i_139:	
  1801                           
  1802                           ; 2 bytes @ 0x6
  1803  0026                     	ds	1
  1804  0027                     pad@i:	
  1805                           
  1806                           ; 2 bytes @ 0x7
  1807  0027                     	ds	1
  1808  0028                     crc16@message:	
  1809  0028                     ___aodiv@dividend:	
  1810                           ; 1 bytes @ 0x8
  1811                           
  1812  0028                     ___aomod@dividend:	
  1813                           ; 8 bytes @ 0x8
  1814                           
  1815                           
  1816                           ; 8 bytes @ 0x8
  1817  0028                     	ds	1
  1818  0029                     crc16@crc:	
  1819  0029                     pad@w:	
  1820                           ; 2 bytes @ 0x9
  1821                           
  1822                           
  1823                           ; 2 bytes @ 0x9
  1824  0029                     	ds	2
  1825  002B                     AppendCRC@data:	
  1826  002B                     pad@fp:	
  1827                           ; 1 bytes @ 0xB
  1828                           
  1829                           
  1830                           ; 1 bytes @ 0xB
  1831  002B                     	ds	1
  1832  002C                     AppendCRC@len:	
  1833                           
  1834                           ; 2 bytes @ 0xC
  1835  002C                     	ds	4
  1836  0030                     ?_dtoa:	
  1837  0030                     dtoa@d:	
  1838                           ; 2 bytes @ 0x10
  1839                           
  1840                           
  1841                           ; 8 bytes @ 0x10
  1842  0030                     	ds	8
  1843  0038                     ??_dtoa:	
  1844                           
  1845                           ; 1 bytes @ 0x18
  1846  0038                     	ds	3
  1847  003B                     dtoa@fp:	
  1848                           
  1849                           ; 1 bytes @ 0x1B
  1850  003B                     	ds	1
  1851  003C                     _dtoa$250:	
  1852                           
  1853                           ; 2 bytes @ 0x1C
  1854  003C                     	ds	2
  1855  003E                     dtoa@p:	
  1856                           
  1857                           ; 2 bytes @ 0x1E
  1858  003E                     	ds	2
  1859  0040                     dtoa@w:	
  1860                           
  1861                           ; 2 bytes @ 0x20
  1862  0040                     	ds	2
  1863  0042                     dtoa@s:	
  1864                           
  1865                           ; 2 bytes @ 0x22
  1866  0042                     	ds	2
  1867  0044                     dtoa@n:	
  1868                           
  1869                           ; 8 bytes @ 0x24
  1870  0044                     	ds	8
  1871  004C                     dtoa@i:	
  1872                           
  1873                           ; 2 bytes @ 0x2C
  1874  004C                     	ds	2
  1875  004E                     ?_vfpfcnvrt:	
  1876  004E                     vfpfcnvrt@fmt:	
  1877                           ; 2 bytes @ 0x2E
  1878                           
  1879                           
  1880                           ; 1 bytes @ 0x2E
  1881  004E                     	ds	1
  1882  004F                     vfpfcnvrt@ap:	
  1883                           
  1884                           ; 1 bytes @ 0x2F
  1885  004F                     	ds	1
  1886  0050                     ??_vfpfcnvrt:	
  1887                           
  1888                           ; 1 bytes @ 0x30
  1889  0050                     	ds	5
  1890  0055                     vfpfcnvrt@ll:	
  1891                           
  1892                           ; 8 bytes @ 0x35
  1893  0055                     	ds	8
  1894  005D                     vfpfcnvrt@fp:	
  1895                           
  1896                           ; 1 bytes @ 0x3D
  1897  005D                     	ds	1
  1898  005E                     ?_vfprintf:	
  1899  005E                     vfprintf@fmt:	
  1900                           ; 2 bytes @ 0x3E
  1901                           
  1902                           
  1903                           ; 2 bytes @ 0x3E
  1904  005E                     	ds	2
  1905  0060                     vfprintf@ap:	
  1906                           
  1907                           ; 1 bytes @ 0x40
  1908  0060                     	ds	1
  1909  0061                     ??_vfprintf:	
  1910                           
  1911                           ; 1 bytes @ 0x41
  1912  0061                     	ds	2
  1913  0063                     vfprintf@fp:	
  1914                           
  1915                           ; 1 bytes @ 0x43
  1916  0063                     	ds	1
  1917  0064                     vfprintf@cfmt:	
  1918                           
  1919                           ; 2 bytes @ 0x44
  1920  0064                     	ds	2
  1921  0066                     ?_sprintf:	
  1922  0066                     sprintf@fmt:	
  1923                           ; 2 bytes @ 0x46
  1924                           
  1925                           
  1926                           ; 2 bytes @ 0x46
  1927  0066                     	ds	4
  1928  006A                     ??_main:	
  1929                           
  1930                           ; 1 bytes @ 0x4A
  1931  006A                     	ds	1
  1932                           
  1933                           	psect	maintext
  1934  033E                     __pmaintext:	
  1935 ;;
  1936 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1937 ;;
  1938 ;; *************** function _main *****************
  1939 ;; Defined at:
  1940 ;;		line 101 in file "main.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;		None
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  i               2   54[BANK1 ] int 
  1945 ;;  message        43    9[BANK1 ] unsigned char [43]
  1946 ;;  id              2   52[BANK1 ] int 
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1951 ;; Tracked objects:
  1952 ;;		On entry : B1F/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1957 ;;      Locals:         0       0      47       0       0       0       0       0       0       0       0       0       
      +0       0
  1958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1959 ;;      Totals:         0       1      47       0       0       0       0       0       0       0       0       0       
      +0       0
  1960 ;;Total ram usage:       48 bytes
  1961 ;; Hardware stack levels required when called:    8
  1962 ;; This function calls:
  1963 ;;		_AppendCRC
  1964 ;;		_PIN_MANAGER_Initialize
  1965 ;;		_SYSTEM_Initialize
  1966 ;;		_TransmitBit
  1967 ;;		_TransmitString
  1968 ;;		_crc16
  1969 ;;		_sprintf
  1970 ;; This function is called by:
  1971 ;;		Startup code after reset
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           
  1976                           ;psect for function _main
  1977  033E                     _main:	
  1978                           
  1979                           ;main.c: 103:     SYSTEM_Initialize();
  1980                           
  1981                           ;incstack = 0
  1982                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1983  033E  3181  212E  3183   	fcall	_SYSTEM_Initialize
  1984                           
  1985                           ;main.c: 104:     PIN_MANAGER_Initialize();
  1986  0341  3181  21C3  3183   	fcall	_PIN_MANAGER_Initialize
  1987                           
  1988                           ;main.c: 106:     char message[40 + 3];;main.c: 108:     int id = 0;
  1989  0344  0021               	movlb	1	; select bank1
  1990  0345  01D4               	clrf	main@id^(0+128)
  1991  0346  01D5               	clrf	(main@id+1)^(0+128)
  1992  0347                     l1748:	
  1993                           
  1994                           ;main.c: 110:     {;main.c: 111:         sprintf(message, "RTTY Transmission Test, Hello
      +                           World! ID: %d \0", id);
  1995  0347  3002               	movlw	low (STR_1| (0+32768))
  1996  0348  0020               	movlb	0	; select bank0
  1997  0349  00E6               	movwf	sprintf@fmt
  1998  034A  3088               	movlw	high (STR_1| (0+32768))
  1999  034B  00E7               	movwf	sprintf@fmt+1
  2000  034C  0021               	movlb	1	; select bank1
  2001  034D  0855               	movf	(main@id+1)^(0+128),w
  2002  034E  0020               	movlb	0	; select bank0
  2003  034F  00E9               	movwf	?_sprintf+3
  2004  0350  0021               	movlb	1	; select bank1
  2005  0351  0854               	movf	main@id^(0+128),w
  2006  0352  0020               	movlb	0	; select bank0
  2007  0353  00E8               	movwf	?_sprintf+2
  2008  0354  30A9               	movlw	(low (main@message| 0))& (0+255)
  2009  0355  3181  21A0  3183   	fcall	_sprintf
  2010                           
  2011                           ;main.c: 112:         id++;
  2012  0358  3001               	movlw	1
  2013  0359  0021               	movlb	1	; select bank1
  2014  035A  07D4               	addwf	main@id^(0+128),f
  2015  035B  3000               	movlw	0
  2016  035C  3DD5               	addwfc	(main@id+1)^(0+128),f
  2017                           
  2018                           ;main.c: 113:         AppendCRC(message, crc16(message, 0x8408));
  2019  035D  3008               	movlw	8
  2020  035E  00F4               	movwf	crc16@polynomial
  2021  035F  3084               	movlw	132
  2022  0360  00F5               	movwf	crc16@polynomial+1
  2023  0361  30A9               	movlw	(low (main@message| 0))& (0+255)
  2024  0362  3183  2396  3183   	fcall	_crc16
  2025  0365  0875               	movf	?_crc16+1,w
  2026  0366  00FA               	movwf	AppendCRC@crc+1
  2027  0367  0874               	movf	?_crc16,w
  2028  0368  00F9               	movwf	AppendCRC@crc
  2029  0369  30A9               	movlw	(low (main@message| 0))& (0+255)
  2030  036A  3182  2265  3183   	fcall	_AppendCRC
  2031                           
  2032                           ;main.c: 114:         TransmitString(message);
  2033  036D  30A9               	movlw	(low (main@message| 0))& (0+255)
  2034  036E  3182  220D  3183   	fcall	_TransmitString
  2035                           
  2036                           ;main.c: 116:         TransmitBit(0);
  2037  0371  3000               	movlw	0
  2038  0372  3181  2158  3183   	fcall	_TransmitBit
  2039                           
  2040                           ;main.c: 118:         for (int i = 0; i < 1000; i++)
  2041  0375  0021               	movlb	1	; select bank1
  2042  0376  01D6               	clrf	main@i^(0+128)
  2043  0377  01D7               	clrf	(main@i+1)^(0+128)
  2044  0378                     l1764:	
  2045                           
  2046                           ;main.c: 119:         {;main.c: 120:             _delay((unsigned long)((5)*(4000000/400
      +                          0.0)));
  2047  0378  3007               	movlw	7
  2048  0379  0020               	movlb	0	; select bank0
  2049  037A  00EA               	movwf	??_main
  2050  037B  307D               	movlw	125
  2051  037C                     u1607:	
  2052  037C  0B89               	decfsz	9,f
  2053  037D  2B7C               	goto	u1607
  2054  037E  0BEA               	decfsz	??_main,f
  2055  037F  2B7C               	goto	u1607
  2056                           
  2057                           ;main.c: 121:         }
  2058  0380  3001               	movlw	1
  2059  0381  0021               	movlb	1	; select bank1
  2060  0382  07D6               	addwf	main@i^(0+128),f
  2061  0383  3000               	movlw	0
  2062  0384  3DD7               	addwfc	(main@i+1)^(0+128),f
  2063  0385  0857               	movf	(main@i+1)^(0+128),w
  2064  0386  3A80               	xorlw	128
  2065  0387  0020               	movlb	0	; select bank0
  2066  0388  00EA               	movwf	??_main
  2067  0389  3083               	movlw	131
  2068  038A  026A               	subwf	??_main,w
  2069  038B  1D03               	skipz
  2070  038C  2B90               	goto	u1595
  2071  038D  30E8               	movlw	232
  2072  038E  0021               	movlb	1	; select bank1
  2073  038F  0256               	subwf	main@i^(0+128),w
  2074  0390                     u1595:	
  2075  0390  1C03               	skipc
  2076  0391  2B78               	goto	l1764
  2077                           
  2078                           ;main.c: 122:         transmission_time = 0;
  2079  0392  0021               	movlb	1	; select bank1
  2080  0393  01DC               	clrf	_transmission_time^(0+128)
  2081  0394  01DD               	clrf	(_transmission_time+1)^(0+128)
  2082  0395  2B47               	goto	l1748
  2083  0396                     __end_of_main:	
  2084                           
  2085                           	psect	text1
  2086  01A0                     __ptext1:	
  2087 ;; *************** function _sprintf *****************
  2088 ;; Defined at:
  2089 ;;		line 9 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\nf_sprintf.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  s               1    wreg     PTR unsigned char 
  2092 ;;		 -> main@message(43), 
  2093 ;;  fmt             2   70[BANK0 ] PTR const unsigned char 
  2094 ;;		 -> STR_1(46), 
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  s               1    3[BANK1 ] PTR unsigned char 
  2097 ;;		 -> main@message(43), 
  2098 ;;  f               5    4[BANK1 ] struct _IO_FILE
  2099 ;;  ret             2    0        int 
  2100 ;;  ap              1    2[BANK1 ] PTR void [1]
  2101 ;;		 -> ?_sprintf(2), 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  2   70[BANK0 ] int 
  2104 ;; Registers used:
  2105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2111 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2112 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  2113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2114 ;;      Totals:         1       4       9       0       0       0       0       0       0       0       0       0       
      +0       0
  2115 ;;Total ram usage:       14 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    7
  2118 ;; This function calls:
  2119 ;;		_vfprintf
  2120 ;; This function is called by:
  2121 ;;		_main
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           
  2126                           ;psect for function _sprintf
  2127  01A0                     _sprintf:	
  2128                           
  2129                           ;incstack = 0
  2130                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2131                           ;sprintf@s stored from wreg
  2132  01A0  0021               	movlb	1	; select bank1
  2133  01A1  00A3               	movwf	sprintf@s^(0+128)
  2134  01A2  3068               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2135  01A3  00FD               	movwf	??_sprintf
  2136  01A4  087D               	movf	??_sprintf,w
  2137  01A5  00A2               	movwf	sprintf@ap^(0+128)
  2138  01A6  0823               	movf	sprintf@s^(0+128),w
  2139  01A7  00FD               	movwf	??_sprintf
  2140  01A8  087D               	movf	??_sprintf,w
  2141  01A9  00A4               	movwf	sprintf@f^(0+128)
  2142  01AA  01A5               	clrf	(sprintf@f^(0+128)+1)
  2143  01AB  01A6               	clrf	((sprintf@f+1)^(0+128)+1)
  2144  01AC  01A7               	clrf	(sprintf@f^(0+128)+3)
  2145  01AD  01A8               	clrf	((sprintf@f+1)^(0+128)+3)
  2146  01AE  0020               	movlb	0	; select bank0
  2147  01AF  0867               	movf	sprintf@fmt+1,w
  2148  01B0  00DF               	movwf	vfprintf@fmt+1
  2149  01B1  0866               	movf	sprintf@fmt,w
  2150  01B2  00DE               	movwf	vfprintf@fmt
  2151  01B3  30A2               	movlw	(low (sprintf@ap| 0))& (0+255)
  2152  01B4  00FD               	movwf	??_sprintf
  2153  01B5  087D               	movf	??_sprintf,w
  2154  01B6  00E0               	movwf	vfprintf@ap
  2155  01B7  30A4               	movlw	(low (sprintf@f| 0))& (0+255)
  2156  01B8  3182  2236         	fcall	_vfprintf
  2157  01BA  0021               	movlb	1	; select bank1
  2158  01BB  0825               	movf	(sprintf@f^(0+128)+1),w
  2159  01BC  0723               	addwf	sprintf@s^(0+128),w
  2160  01BD  00FD               	movwf	??_sprintf
  2161  01BE  087D               	movf	??_sprintf,w
  2162  01BF  0086               	movwf	6
  2163  01C0  0187               	clrf	7
  2164  01C1  0181               	clrf	1
  2165  01C2  0008               	return
  2166  01C3                     __end_of_sprintf:	
  2167                           
  2168                           	psect	text2
  2169  0236                     __ptext2:	
  2170 ;; *************** function _vfprintf *****************
  2171 ;; Defined at:
  2172 ;;		line 1368 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  fp              1    wreg     PTR struct _IO_FILE
  2175 ;;		 -> sprintf@f(5), 
  2176 ;;  fmt             2   62[BANK0 ] PTR const unsigned char 
  2177 ;;		 -> STR_1(46), 
  2178 ;;  ap              1   64[BANK0 ] PTR PTR void 
  2179 ;;		 -> sprintf@ap(1), 
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  fp              1   67[BANK0 ] PTR struct _IO_FILE
  2182 ;;		 -> sprintf@f(5), 
  2183 ;;  cfmt            2   68[BANK0 ] PTR unsigned char 
  2184 ;;		 -> STR_1(46), 
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  2   62[BANK0 ] int 
  2187 ;; Registers used:
  2188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2194 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2195 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2197 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2198 ;;Total ram usage:        8 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; Hardware stack levels required when called:    6
  2201 ;; This function calls:
  2202 ;;		_vfpfcnvrt
  2203 ;; This function is called by:
  2204 ;;		_sprintf
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           
  2209                           ;psect for function _vfprintf
  2210  0236                     _vfprintf:	
  2211                           
  2212                           ;incstack = 0
  2213                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2214                           ;vfprintf@fp stored from wreg
  2215  0236  0020               	movlb	0	; select bank0
  2216  0237  00E3               	movwf	vfprintf@fp
  2217                           
  2218                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1368: int vfprintf(FIL
      +                          E *fp, const char *fmt, va_list ap);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\comm
      +                          on\doprnt.c: 1369: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 13
      +                          71:     char *cfmt;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 137
      +                          3:     cfmt = (char *)fmt;
  2219  0238  085F               	movf	vfprintf@fmt+1,w
  2220  0239  00E5               	movwf	vfprintf@cfmt+1
  2221  023A  085E               	movf	vfprintf@fmt,w
  2222  023B  00E4               	movwf	vfprintf@cfmt
  2223                           
  2224                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1374:     nout = 0;
  2225  023C  0021               	movlb	1	; select bank1
  2226  023D  01D8               	clrf	_nout^(0+128)
  2227  023E  01D9               	clrf	(_nout+1)^(0+128)
  2228  023F                     l1670:	
  2229                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1375:     while (*cfmt
      +                          ) {
  2230                           
  2231                           
  2232                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1375:     while (*cfmt
      +                          ) {
  2233  023F  0020               	movlb	0	; select bank0
  2234  0240  0864               	movf	vfprintf@cfmt,w
  2235  0241  0084               	movwf	4
  2236  0242  0865               	movf	vfprintf@cfmt+1,w
  2237  0243  0085               	movwf	5
  2238  0244  0012               	moviw fsr0++
  2239  0245  1903               	btfsc	3,2
  2240  0246  2A5C               	goto	l1672
  2241                           
  2242                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1376:         nout += 
      +                          vfpfcnvrt(fp, &cfmt, ap);
  2243  0247  3064               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  2244  0248  00E1               	movwf	??_vfprintf
  2245  0249  0861               	movf	??_vfprintf,w
  2246  024A  00CE               	movwf	vfpfcnvrt@fmt
  2247  024B  0860               	movf	vfprintf@ap,w
  2248  024C  00E2               	movwf	??_vfprintf+1
  2249  024D  0862               	movf	??_vfprintf+1,w
  2250  024E  00CF               	movwf	vfpfcnvrt@ap
  2251  024F  0863               	movf	vfprintf@fp,w
  2252  0250  3184  2405  3182   	fcall	_vfpfcnvrt
  2253  0253  0020               	movlb	0	; select bank0
  2254  0254  084E               	movf	?_vfpfcnvrt,w
  2255  0255  0021               	movlb	1	; select bank1
  2256  0256  07D8               	addwf	_nout^(0+128),f
  2257  0257  0020               	movlb	0	; select bank0
  2258  0258  084F               	movf	?_vfpfcnvrt+1,w
  2259  0259  0021               	movlb	1	; select bank1
  2260  025A  3DD9               	addwfc	(_nout+1)^(0+128),f
  2261  025B  2A3F               	goto	l1670
  2262  025C                     l1672:	
  2263                           
  2264                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1378:     return nout;
  2265  025C  0021               	movlb	1	; select bank1
  2266  025D  0859               	movf	(_nout+1)^(0+128),w
  2267  025E  0020               	movlb	0	; select bank0
  2268  025F  00DF               	movwf	?_vfprintf+1
  2269  0260  0021               	movlb	1	; select bank1
  2270  0261  0858               	movf	_nout^(0+128),w
  2271  0262  0020               	movlb	0	; select bank0
  2272  0263  00DE               	movwf	?_vfprintf
  2273  0264  0008               	return
  2274  0265                     __end_of_vfprintf:	
  2275                           
  2276                           	psect	text3
  2277  0405                     __ptext3:	
  2278 ;; *************** function _vfpfcnvrt *****************
  2279 ;; Defined at:
  2280 ;;		line 670 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  fp              1    wreg     PTR struct _IO_FILE
  2283 ;;		 -> sprintf@f(5), 
  2284 ;;  fmt             1   46[BANK0 ] PTR PTR unsigned char 
  2285 ;;		 -> vfprintf@cfmt(2), 
  2286 ;;  ap              1   47[BANK0 ] PTR PTR void 
  2287 ;;		 -> sprintf@ap(1), 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  fp              1   61[BANK0 ] PTR struct _IO_FILE
  2290 ;;		 -> sprintf@f(5), 
  2291 ;;  ll              8   53[BANK0 ] long long 
  2292 ;;  llu             8    0        unsigned long long 
  2293 ;;  f               4    0        unsigned long long 
  2294 ;;  ct              3    0        unsigned char [3]
  2295 ;;  vp              2    0        PTR void 
  2296 ;;  i               2    0        int 
  2297 ;;  done            2    0        int 
  2298 ;;  cp              2    0        PTR unsigned char 
  2299 ;;  c               1    0        unsigned char 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  2   46[BANK0 ] int 
  2302 ;; Registers used:
  2303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2309 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2310 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2311 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2312 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2313 ;;Total ram usage:       16 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    5
  2316 ;; This function calls:
  2317 ;;		_dtoa
  2318 ;;		_fputc
  2319 ;; This function is called by:
  2320 ;;		_vfprintf
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           
  2325                           ;psect for function _vfpfcnvrt
  2326  0405                     _vfpfcnvrt:	
  2327                           
  2328                           ;incstack = 0
  2329                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2330                           ;vfpfcnvrt@fp stored from wreg
  2331  0405  0020               	movlb	0	; select bank0
  2332  0406  00DD               	movwf	vfpfcnvrt@fp
  2333                           
  2334                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 670: static int vfpfcn
      +                          vrt(FILE *fp, char *fmt[], va_list ap);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\c
      +                          ommon\doprnt.c: 671: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 
      +                          672:     char c, *cp, ct[3];;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\dopr
      +                          nt.c: 673:     int done, i;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprn
      +                          t.c: 674:     long long ll;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprn
      +                          t.c: 675:     unsigned long long llu;
  2335  0407  084E               	movf	vfpfcnvrt@fmt,w
  2336  0408  0086               	movwf	6
  2337  0409  0187               	clrf	7
  2338  040A  3F40               	moviw [0]fsr1
  2339  040B  00D0               	movwf	??_vfpfcnvrt
  2340  040C  3F41               	moviw [1]fsr1
  2341  040D  00D1               	movwf	??_vfpfcnvrt+1
  2342  040E  0850               	movf	??_vfpfcnvrt,w
  2343  040F  0084               	movwf	4
  2344  0410  0851               	movf	??_vfpfcnvrt+1,w
  2345  0411  0085               	movwf	5
  2346  0412  0012               	moviw fsr0++
  2347  0413  3A25               	xorlw	37
  2348  0414  1D03               	btfss	3,2
  2349  0415  2CB2               	goto	l1656
  2350                           
  2351                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 681:         ++*fmt;
  2352  0416  084E               	movf	vfpfcnvrt@fmt,w
  2353  0417  0086               	movwf	6
  2354  0418  0187               	clrf	7
  2355  0419  3001               	movlw	1
  2356  041A  0781               	addwf	1,f
  2357  041B  3141               	addfsr 1,1
  2358  041C  1803               	skipnc
  2359  041D  0A81               	incf	1,f
  2360                           
  2361                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 683:         flags = w
      +                          idth = 0;
  2362  041E  0021               	movlb	1	; select bank1
  2363  041F  01DA               	clrf	_width^(0+128)
  2364  0420  01DB               	clrf	(_width+1)^(0+128)
  2365  0421  0020               	movlb	0	; select bank0
  2366  0422  01ED               	clrf	_flags
  2367  0423  01EE               	clrf	_flags+1
  2368                           
  2369                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 684:         prec = -1
      +                          ;
  2370  0424  30FF               	movlw	255
  2371  0425  00EB               	movwf	_prec
  2372  0426  30FF               	movlw	255
  2373  0427  00EC               	movwf	_prec+1
  2374                           
  2375                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 825:         if ((*fmt
      +                          [0] == 'd') || (*fmt[0] == 'i')) {
  2376  0428  084E               	movf	vfpfcnvrt@fmt,w
  2377  0429  0086               	movwf	6
  2378  042A  0187               	clrf	7
  2379  042B  3F40               	moviw [0]fsr1
  2380  042C  00D0               	movwf	??_vfpfcnvrt
  2381  042D  3F41               	moviw [1]fsr1
  2382  042E  00D1               	movwf	??_vfpfcnvrt+1
  2383  042F  0850               	movf	??_vfpfcnvrt,w
  2384  0430  0084               	movwf	4
  2385  0431  0851               	movf	??_vfpfcnvrt+1,w
  2386  0432  0085               	movwf	5
  2387  0433  0012               	moviw fsr0++
  2388  0434  3A64               	xorlw	100
  2389  0435  1903               	btfsc	3,2
  2390  0436  2C46               	goto	l1632
  2391  0437  084E               	movf	vfpfcnvrt@fmt,w
  2392  0438  0086               	movwf	6
  2393  0439  0187               	clrf	7
  2394  043A  3F40               	moviw [0]fsr1
  2395  043B  00D0               	movwf	??_vfpfcnvrt
  2396  043C  3F41               	moviw [1]fsr1
  2397  043D  00D1               	movwf	??_vfpfcnvrt+1
  2398  043E  0850               	movf	??_vfpfcnvrt,w
  2399  043F  0084               	movwf	4
  2400  0440  0851               	movf	??_vfpfcnvrt+1,w
  2401  0441  0085               	movwf	5
  2402  0442  0012               	moviw fsr0++
  2403  0443  3A69               	xorlw	105
  2404  0444  1D03               	btfss	3,2
  2405  0445  2C80               	goto	l1640
  2406  0446                     l1632:	
  2407                           
  2408                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 827:             ++*fm
      +                          t;
  2409  0446  084E               	movf	vfpfcnvrt@fmt,w
  2410  0447  0086               	movwf	6
  2411  0448  0187               	clrf	7
  2412  0449  3001               	movlw	1
  2413  044A  0781               	addwf	1,f
  2414  044B  3141               	addfsr 1,1
  2415  044C  1803               	skipnc
  2416  044D  0A81               	incf	1,f
  2417                           
  2418                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 828:             ll = 
      +                          (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2419  044E  084F               	movf	vfpfcnvrt@ap,w
  2420  044F  0086               	movwf	6
  2421  0450  0187               	clrf	7
  2422  0451  0801               	movf	1,w
  2423  0452  0084               	movwf	4
  2424  0453  0185               	clrf	5
  2425  0454  3002               	movlw	2
  2426  0455  0781               	addwf	1,f
  2427  0456  3F00               	moviw [0]fsr0
  2428  0457  00D0               	movwf	??_vfpfcnvrt
  2429  0458  3F01               	moviw [1]fsr0
  2430  0459  00D1               	movwf	??_vfpfcnvrt+1
  2431  045A  0850               	movf	??_vfpfcnvrt,w
  2432  045B  00D5               	movwf	vfpfcnvrt@ll
  2433  045C  0851               	movf	??_vfpfcnvrt+1,w
  2434  045D  00D6               	movwf	vfpfcnvrt@ll+1
  2435  045E  0D89               	rlf	9,f
  2436  045F  3B89               	subwfb	9,f
  2437  0460  0989               	comf	9,f
  2438  0461  00D7               	movwf	vfpfcnvrt@ll+2
  2439  0462  00D8               	movwf	vfpfcnvrt@ll+3
  2440  0463  00D9               	movwf	vfpfcnvrt@ll+4
  2441  0464  00DA               	movwf	vfpfcnvrt@ll+5
  2442  0465  00DB               	movwf	vfpfcnvrt@ll+6
  2443  0466  00DC               	movwf	vfpfcnvrt@ll+7
  2444                           
  2445                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 830:             retur
      +                          n dtoa(fp, ll);
  2446  0467  0855               	movf	vfpfcnvrt@ll,w
  2447  0468  00B0               	movwf	dtoa@d
  2448  0469  0856               	movf	vfpfcnvrt@ll+1,w
  2449  046A  00B1               	movwf	dtoa@d+1
  2450  046B  0857               	movf	vfpfcnvrt@ll+2,w
  2451  046C  00B2               	movwf	dtoa@d+2
  2452  046D  0858               	movf	vfpfcnvrt@ll+3,w
  2453  046E  00B3               	movwf	dtoa@d+3
  2454  046F  0859               	movf	vfpfcnvrt@ll+4,w
  2455  0470  00B4               	movwf	dtoa@d+4
  2456  0471  085A               	movf	vfpfcnvrt@ll+5,w
  2457  0472  00B5               	movwf	dtoa@d+5
  2458  0473  085B               	movf	vfpfcnvrt@ll+6,w
  2459  0474  00B6               	movwf	dtoa@d+6
  2460  0475  085C               	movf	vfpfcnvrt@ll+7,w
  2461  0476  00B7               	movwf	dtoa@d+7
  2462  0477  085D               	movf	vfpfcnvrt@fp,w
  2463  0478  3186  26A4         	fcall	_dtoa
  2464  047A  0020               	movlb	0	; select bank0
  2465  047B  0831               	movf	?_dtoa+1,w
  2466  047C  00CF               	movwf	?_vfpfcnvrt+1
  2467  047D  0830               	movf	?_dtoa,w
  2468  047E  00CE               	movwf	?_vfpfcnvrt
  2469  047F  0008               	return
  2470  0480                     l1640:	
  2471                           
  2472                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1350:         if ((*fm
      +                          t)[0] == '%') {
  2473  0480  084E               	movf	vfpfcnvrt@fmt,w
  2474  0481  0086               	movwf	6
  2475  0482  0187               	clrf	7
  2476  0483  3F40               	moviw [0]fsr1
  2477  0484  00D0               	movwf	??_vfpfcnvrt
  2478  0485  3F41               	moviw [1]fsr1
  2479  0486  00D1               	movwf	??_vfpfcnvrt+1
  2480  0487  0850               	movf	??_vfpfcnvrt,w
  2481  0488  0084               	movwf	4
  2482  0489  0851               	movf	??_vfpfcnvrt+1,w
  2483  048A  0085               	movwf	5
  2484  048B  0012               	moviw fsr0++
  2485  048C  3A25               	xorlw	37
  2486  048D  1D03               	btfss	3,2
  2487  048E  2CA7               	goto	l1650
  2488                           
  2489                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1351:             ++*f
      +                          mt;
  2490  048F  084E               	movf	vfpfcnvrt@fmt,w
  2491  0490  0086               	movwf	6
  2492  0491  0187               	clrf	7
  2493  0492  3001               	movlw	1
  2494  0493  0781               	addwf	1,f
  2495  0494  3141               	addfsr 1,1
  2496  0495  1803               	skipnc
  2497  0496  0A81               	incf	1,f
  2498                           
  2499                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1352:             fput
      +                          c((int)'%', fp);
  2500  0497  3025               	movlw	37
  2501  0498  00F0               	movwf	fputc@c
  2502  0499  3000               	movlw	0
  2503  049A  00F1               	movwf	fputc@c+1
  2504  049B  085D               	movf	vfpfcnvrt@fp,w
  2505  049C  00D0               	movwf	??_vfpfcnvrt
  2506  049D  0850               	movf	??_vfpfcnvrt,w
  2507  049E  00F2               	movwf	fputc@fp
  2508  049F  3182  22A9         	fcall	_fputc
  2509  04A1                     l1646:	
  2510                           
  2511                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1353:             retu
      +                          rn 1;
  2512  04A1  3001               	movlw	1
  2513  04A2  0020               	movlb	0	; select bank0
  2514  04A3  00CE               	movwf	?_vfpfcnvrt
  2515  04A4  3000               	movlw	0
  2516  04A5  00CF               	movwf	?_vfpfcnvrt+1
  2517  04A6  0008               	return
  2518  04A7                     l1650:	
  2519                           
  2520                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1357:         ++*fmt;
  2521  04A7  084E               	movf	vfpfcnvrt@fmt,w
  2522  04A8  0086               	movwf	6
  2523  04A9  0187               	clrf	7
  2524  04AA  3001               	movlw	1
  2525  04AB  0781               	addwf	1,f
  2526  04AC  3141               	addfsr 1,1
  2527  04AD  1803               	skipnc
  2528  04AE  0A81               	incf	1,f
  2529                           
  2530                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1358:         return 0
      +                          ;
  2531  04AF  01CE               	clrf	?_vfpfcnvrt
  2532  04B0  01CF               	clrf	?_vfpfcnvrt+1
  2533  04B1  0008               	return
  2534  04B2                     l1656:	
  2535                           
  2536                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1362:     fputc((int)(
      +                          *fmt)[0], fp);
  2537  04B2  084E               	movf	vfpfcnvrt@fmt,w
  2538  04B3  0086               	movwf	6
  2539  04B4  0187               	clrf	7
  2540  04B5  3F40               	moviw [0]fsr1
  2541  04B6  00D0               	movwf	??_vfpfcnvrt
  2542  04B7  3F41               	moviw [1]fsr1
  2543  04B8  00D1               	movwf	??_vfpfcnvrt+1
  2544  04B9  0850               	movf	??_vfpfcnvrt,w
  2545  04BA  0084               	movwf	4
  2546  04BB  0851               	movf	??_vfpfcnvrt+1,w
  2547  04BC  0085               	movwf	5
  2548  04BD  0800               	movf	0,w	;code access
  2549  04BE  00D2               	movwf	??_vfpfcnvrt+2
  2550  04BF  01D3               	clrf	??_vfpfcnvrt+3
  2551  04C0  0852               	movf	??_vfpfcnvrt+2,w
  2552  04C1  00F0               	movwf	fputc@c
  2553  04C2  0853               	movf	??_vfpfcnvrt+3,w
  2554  04C3  00F1               	movwf	fputc@c+1
  2555  04C4  085D               	movf	vfpfcnvrt@fp,w
  2556  04C5  00D4               	movwf	??_vfpfcnvrt+4
  2557  04C6  0854               	movf	??_vfpfcnvrt+4,w
  2558  04C7  00F2               	movwf	fputc@fp
  2559  04C8  3182  22A9  3184   	fcall	_fputc
  2560                           
  2561                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 1363:     ++*fmt;
  2562  04CB  0020               	movlb	0	; select bank0
  2563  04CC  084E               	movf	vfpfcnvrt@fmt,w
  2564  04CD  0086               	movwf	6
  2565  04CE  0187               	clrf	7
  2566  04CF  3001               	movlw	1
  2567  04D0  0781               	addwf	1,f
  2568  04D1  3141               	addfsr 1,1
  2569  04D2  1803               	skipnc
  2570  04D3  0A81               	incf	1,f
  2571  04D4  2CA1               	goto	l1646
  2572  04D5                     __end_of_vfpfcnvrt:	
  2573                           
  2574                           	psect	text4
  2575  06A4                     __ptext4:	
  2576 ;; *************** function _dtoa *****************
  2577 ;; Defined at:
  2578 ;;		line 274 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  fp              1    wreg     PTR struct _IO_FILE
  2581 ;;		 -> sprintf@f(5), 
  2582 ;;  d               8   16[BANK0 ] long long 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
  2585 ;;		 -> sprintf@f(5), 
  2586 ;;  n               8   36[BANK0 ] long long 
  2587 ;;  i               2   44[BANK0 ] int 
  2588 ;;  s               2   34[BANK0 ] int 
  2589 ;;  w               2   32[BANK0 ] int 
  2590 ;;  p               2   30[BANK0 ] int 
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  2   16[BANK0 ] int 
  2593 ;; Registers used:
  2594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2600 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2601 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2602 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2603 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2604 ;;Total ram usage:       30 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    4
  2607 ;; This function calls:
  2608 ;;		___aodiv
  2609 ;;		___aomod
  2610 ;;		_abs
  2611 ;;		_pad
  2612 ;; This function is called by:
  2613 ;;		_vfpfcnvrt
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           
  2618                           ;psect for function _dtoa
  2619  06A4                     _dtoa:	
  2620                           
  2621                           ;incstack = 0
  2622                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2623                           ;dtoa@fp stored from wreg
  2624  06A4  0020               	movlb	0	; select bank0
  2625  06A5  00BB               	movwf	dtoa@fp
  2626                           
  2627                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 274: static int dtoa(F
      +                          ILE *fp, long long d);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 2
      +                          75: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 276:     int i, p
      +                          , s, w;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 277:     long l
      +                          ong n;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 280:     n = d;
  2628  06A6  0830               	movf	dtoa@d,w
  2629  06A7  00C4               	movwf	dtoa@n
  2630  06A8  0831               	movf	dtoa@d+1,w
  2631  06A9  00C5               	movwf	dtoa@n+1
  2632  06AA  0832               	movf	dtoa@d+2,w
  2633  06AB  00C6               	movwf	dtoa@n+2
  2634  06AC  0833               	movf	dtoa@d+3,w
  2635  06AD  00C7               	movwf	dtoa@n+3
  2636  06AE  0834               	movf	dtoa@d+4,w
  2637  06AF  00C8               	movwf	dtoa@n+4
  2638  06B0  0835               	movf	dtoa@d+5,w
  2639  06B1  00C9               	movwf	dtoa@n+5
  2640  06B2  0836               	movf	dtoa@d+6,w
  2641  06B3  00CA               	movwf	dtoa@n+6
  2642  06B4  0837               	movf	dtoa@d+7,w
  2643  06B5  00CB               	movwf	dtoa@n+7
  2644                           
  2645                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 281:     s = n < 0 ? 1
      +                           : 0;
  2646  06B6  3044               	movlw	low dtoa@n
  2647  06B7  0086               	movwf	6
  2648  06B8  3000               	movlw	high dtoa@n
  2649  06B9  0087               	movwf	7
  2650  06BA  3F47               	moviw [7]fsr1
  2651  06BB  00B8               	movwf	??_dtoa
  2652  06BC  1FB8               	btfss	??_dtoa,7
  2653  06BD  2EC0               	goto	u1320
  2654  06BE  3001               	movlw	1
  2655  06BF  2EC1               	goto	u1330
  2656  06C0                     u1320:	
  2657  06C0  3000               	movlw	0
  2658  06C1                     u1330:	
  2659  06C1  0020               	movlb	0	; select bank0
  2660  06C2  00B9               	movwf	??_dtoa+1
  2661  06C3  01BA               	clrf	??_dtoa+2
  2662  06C4  0839               	movf	??_dtoa+1,w
  2663  06C5  00C2               	movwf	dtoa@s
  2664  06C6  083A               	movf	??_dtoa+2,w
  2665  06C7  00C3               	movwf	dtoa@s+1
  2666                           
  2667                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 282:     if (s) {
  2668  06C8  0842               	movf	dtoa@s,w
  2669  06C9  0443               	iorwf	dtoa@s+1,w
  2670  06CA  1903               	btfsc	3,2
  2671  06CB  2EEA               	goto	l224
  2672                           
  2673                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 283:         n = -n;
  2674  06CC  09C4               	comf	dtoa@n,f
  2675  06CD  09C5               	comf	dtoa@n+1,f
  2676  06CE  09C6               	comf	dtoa@n+2,f
  2677  06CF  09C7               	comf	dtoa@n+3,f
  2678  06D0  09C8               	comf	dtoa@n+4,f
  2679  06D1  09C9               	comf	dtoa@n+5,f
  2680  06D2  09CA               	comf	dtoa@n+6,f
  2681  06D3  09CB               	comf	dtoa@n+7,f
  2682  06D4  0AC4               	incf	dtoa@n,f
  2683  06D5  1D03               	skipz
  2684  06D6  2EEA               	goto	l224
  2685  06D7  0AC5               	incf	dtoa@n+1,f
  2686  06D8  1D03               	skipz
  2687  06D9  2EEA               	goto	l224
  2688  06DA  0AC6               	incf	dtoa@n+2,f
  2689  06DB  1D03               	skipz
  2690  06DC  2EEA               	goto	l224
  2691  06DD  0AC7               	incf	dtoa@n+3,f
  2692  06DE  1D03               	skipz
  2693  06DF  2EEA               	goto	l224
  2694  06E0  0AC8               	incf	dtoa@n+4,f
  2695  06E1  1D03               	skipz
  2696  06E2  2EEA               	goto	l224
  2697  06E3  0AC9               	incf	dtoa@n+5,f
  2698  06E4  1D03               	skipz
  2699  06E5  2EEA               	goto	l224
  2700  06E6  0ACA               	incf	dtoa@n+6,f
  2701  06E7  1D03               	skipz
  2702  06E8  2EEA               	goto	l224
  2703  06E9  0ACB               	incf	dtoa@n+7,f
  2704  06EA                     l224:	
  2705                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 284:     }
  2706                           
  2707                           
  2708                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 287:     if (!(prec < 
      +                          0)) {
  2709  06EA  0020               	movlb	0	; select bank0
  2710  06EB  1BEC               	btfsc	_prec+1,7
  2711  06EC  2EF1               	goto	l225
  2712                           
  2713                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 288:         flags &= 
      +                          ~(1 << 1);
  2714  06ED  30FD               	movlw	253
  2715  06EE  05ED               	andwf	_flags,f
  2716  06EF  30FF               	movlw	255
  2717  06F0  05EE               	andwf	_flags+1,f
  2718  06F1                     l225:	
  2719                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 289:     }
  2720                           
  2721                           
  2722                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 290:     p = (0 < prec
      +                          ) ? prec : 1;
  2723  06F1  086C               	movf	_prec+1,w
  2724  06F2  3A80               	xorlw	128
  2725  06F3  00B8               	movwf	??_dtoa
  2726  06F4  3080               	movlw	128
  2727  06F5  0238               	subwf	??_dtoa,w
  2728  06F6  1D03               	skipz
  2729  06F7  2EFA               	goto	u1375
  2730  06F8  3001               	movlw	1
  2731  06F9  026B               	subwf	_prec,w
  2732  06FA                     u1375:	
  2733  06FA  1803               	skipnc
  2734  06FB  2F02               	goto	l1574
  2735  06FC  3001               	movlw	1
  2736  06FD  0020               	movlb	0	; select bank0
  2737  06FE  00BE               	movwf	dtoa@p
  2738  06FF  3000               	movlw	0
  2739  0700  00BF               	movwf	dtoa@p+1
  2740  0701  2F07               	goto	l229
  2741  0702                     l1574:	
  2742  0702  0020               	movlb	0	; select bank0
  2743  0703  086C               	movf	_prec+1,w
  2744  0704  00BF               	movwf	dtoa@p+1
  2745  0705  086B               	movf	_prec,w
  2746  0706  00BE               	movwf	dtoa@p
  2747  0707                     l229:	
  2748                           
  2749                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 291:     w = width;
  2750  0707  0021               	movlb	1	; select bank1
  2751  0708  085B               	movf	(_width+1)^(0+128),w
  2752  0709  0020               	movlb	0	; select bank0
  2753  070A  00C1               	movwf	dtoa@w+1
  2754  070B  0021               	movlb	1	; select bank1
  2755  070C  085A               	movf	_width^(0+128),w
  2756  070D  0020               	movlb	0	; select bank0
  2757  070E  00C0               	movwf	dtoa@w
  2758                           
  2759                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 292:     if (s || (fla
      +                          gs & (1 << 2))) {
  2760  070F  0842               	movf	dtoa@s,w
  2761  0710  0443               	iorwf	dtoa@s+1,w
  2762  0711  1D03               	btfss	3,2
  2763  0712  2F15               	goto	l1580
  2764  0713  1D6D               	btfss	_flags,2
  2765  0714  2F19               	goto	l230
  2766  0715                     l1580:	
  2767                           
  2768                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 293:         --w;
  2769  0715  30FF               	movlw	255
  2770  0716  07C0               	addwf	dtoa@w,f
  2771  0717  30FF               	movlw	255
  2772  0718  3DC1               	addwfc	dtoa@w+1,f
  2773  0719                     l230:	
  2774                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 294:     }
  2775                           
  2776                           
  2777                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 297:     i = sizeof(db
      +                          uf) - 1;
  2778  0719  301F               	movlw	31
  2779  071A  00CC               	movwf	dtoa@i
  2780  071B  3000               	movlw	0
  2781  071C  00CD               	movwf	dtoa@i+1
  2782                           
  2783                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 298:     dbuf[i] = '\0
      +                          ';
  2784  071D  0022               	movlb	2	; select bank2
  2785  071E  01BF               	clrf	(_dbuf^(0+256)+31)
  2786                           
  2787                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 299:     while (!(i < 
      +                          1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2788  071F  2FAE               	goto	l233
  2789  0720                     l1594:	
  2790  0720  0020               	movlb	0	; select bank0
  2791  0721  0844               	movf	dtoa@n,w
  2792  0722  0445               	iorwf	dtoa@n+1,w
  2793  0723  0446               	iorwf	dtoa@n+2,w
  2794  0724  0447               	iorwf	dtoa@n+3,w
  2795  0725  0448               	iorwf	dtoa@n+4,w
  2796  0726  0449               	iorwf	dtoa@n+5,w
  2797  0727  044A               	iorwf	dtoa@n+6,w
  2798  0728  044B               	iorwf	dtoa@n+7,w
  2799  0729  1D03               	skipz
  2800  072A  2F45               	goto	l1584
  2801  072B  083F               	movf	dtoa@p+1,w
  2802  072C  3A80               	xorlw	128
  2803  072D  00B8               	movwf	??_dtoa
  2804  072E  3080               	movlw	128
  2805  072F  0238               	subwf	??_dtoa,w
  2806  0730  1D03               	skipz
  2807  0731  2F34               	goto	u1425
  2808  0732  3001               	movlw	1
  2809  0733  023E               	subwf	dtoa@p,w
  2810  0734                     u1425:	
  2811  0734  1803               	skipnc
  2812  0735  2F45               	goto	l1584
  2813  0736  0020               	movlb	0	; select bank0
  2814  0737  0841               	movf	dtoa@w+1,w
  2815  0738  3A80               	xorlw	128
  2816  0739  00B8               	movwf	??_dtoa
  2817  073A  3080               	movlw	128
  2818  073B  0238               	subwf	??_dtoa,w
  2819  073C  1D03               	skipz
  2820  073D  2F40               	goto	u1435
  2821  073E  3001               	movlw	1
  2822  073F  0240               	subwf	dtoa@w,w
  2823  0740                     u1435:	
  2824  0740  1C03               	skipc
  2825  0741  2FBA               	goto	l1602
  2826  0742  0020               	movlb	0	; select bank0
  2827  0743  1CED               	btfss	_flags,1
  2828  0744  2FBA               	goto	l1602
  2829  0745                     l1584:	
  2830                           
  2831                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 300:         --i;
  2832  0745  30FF               	movlw	255
  2833  0746  0020               	movlb	0	; select bank0
  2834  0747  07CC               	addwf	dtoa@i,f
  2835  0748  30FF               	movlw	255
  2836  0749  3DCD               	addwfc	dtoa@i+1,f
  2837                           
  2838                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 301:         dbuf[i] =
      +                           '0' + abs(n % 10);
  2839  074A  300A               	movlw	10
  2840  074B  00A0               	movwf	___aomod@divisor
  2841  074C  01A1               	clrf	___aomod@divisor+1
  2842  074D  01A2               	clrf	___aomod@divisor+2
  2843  074E  01A3               	clrf	___aomod@divisor+3
  2844  074F  01A4               	clrf	___aomod@divisor+4
  2845  0750  01A5               	clrf	___aomod@divisor+5
  2846  0751  01A6               	clrf	___aomod@divisor+6
  2847  0752  01A7               	clrf	___aomod@divisor+7
  2848  0753  0844               	movf	dtoa@n,w
  2849  0754  00A8               	movwf	___aomod@dividend
  2850  0755  0845               	movf	dtoa@n+1,w
  2851  0756  00A9               	movwf	___aomod@dividend+1
  2852  0757  0846               	movf	dtoa@n+2,w
  2853  0758  00AA               	movwf	___aomod@dividend+2
  2854  0759  0847               	movf	dtoa@n+3,w
  2855  075A  00AB               	movwf	___aomod@dividend+3
  2856  075B  0848               	movf	dtoa@n+4,w
  2857  075C  00AC               	movwf	___aomod@dividend+4
  2858  075D  0849               	movf	dtoa@n+5,w
  2859  075E  00AD               	movwf	___aomod@dividend+5
  2860  075F  084A               	movf	dtoa@n+6,w
  2861  0760  00AE               	movwf	___aomod@dividend+6
  2862  0761  084B               	movf	dtoa@n+7,w
  2863  0762  00AF               	movwf	___aomod@dividend+7
  2864  0763  3184  24D5  3186   	fcall	___aomod
  2865  0766  0020               	movlb	0	; select bank0
  2866  0767  0821               	movf	?___aomod+1,w
  2867  0768  00F4               	movwf	abs@a+1
  2868  0769  0820               	movf	?___aomod,w
  2869  076A  00F3               	movwf	abs@a
  2870  076B  3181  216F  3186   	fcall	_abs
  2871  076E  0873               	movf	?_abs,w
  2872  076F  3E30               	addlw	48
  2873  0770  0020               	movlb	0	; select bank0
  2874  0771  00B8               	movwf	??_dtoa
  2875  0772  084C               	movf	dtoa@i,w
  2876  0773  3E20               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2877  0774  0086               	movwf	6
  2878  0775  3001               	movlw	1	; select bank2/3
  2879  0776  0087               	movwf	7
  2880  0777  0838               	movf	??_dtoa,w
  2881  0778  0081               	movwf	1
  2882                           
  2883                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 302:         --p;
  2884  0779  30FF               	movlw	255
  2885  077A  07BE               	addwf	dtoa@p,f
  2886  077B  30FF               	movlw	255
  2887  077C  3DBF               	addwfc	dtoa@p+1,f
  2888                           
  2889                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 303:         --w;
  2890  077D  30FF               	movlw	255
  2891  077E  07C0               	addwf	dtoa@w,f
  2892  077F  30FF               	movlw	255
  2893  0780  3DC1               	addwfc	dtoa@w+1,f
  2894                           
  2895                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 304:         n = n / 1
      +                          0;
  2896  0781  300A               	movlw	10
  2897  0782  00A0               	movwf	___aodiv@divisor
  2898  0783  01A1               	clrf	___aodiv@divisor+1
  2899  0784  01A2               	clrf	___aodiv@divisor+2
  2900  0785  01A3               	clrf	___aodiv@divisor+3
  2901  0786  01A4               	clrf	___aodiv@divisor+4
  2902  0787  01A5               	clrf	___aodiv@divisor+5
  2903  0788  01A6               	clrf	___aodiv@divisor+6
  2904  0789  01A7               	clrf	___aodiv@divisor+7
  2905  078A  0844               	movf	dtoa@n,w
  2906  078B  00A8               	movwf	___aodiv@dividend
  2907  078C  0845               	movf	dtoa@n+1,w
  2908  078D  00A9               	movwf	___aodiv@dividend+1
  2909  078E  0846               	movf	dtoa@n+2,w
  2910  078F  00AA               	movwf	___aodiv@dividend+2
  2911  0790  0847               	movf	dtoa@n+3,w
  2912  0791  00AB               	movwf	___aodiv@dividend+3
  2913  0792  0848               	movf	dtoa@n+4,w
  2914  0793  00AC               	movwf	___aodiv@dividend+4
  2915  0794  0849               	movf	dtoa@n+5,w
  2916  0795  00AD               	movwf	___aodiv@dividend+5
  2917  0796  084A               	movf	dtoa@n+6,w
  2918  0797  00AE               	movwf	___aodiv@dividend+6
  2919  0798  084B               	movf	dtoa@n+7,w
  2920  0799  00AF               	movwf	___aodiv@dividend+7
  2921  079A  3185  25B1  3186   	fcall	___aodiv
  2922  079D  0020               	movlb	0	; select bank0
  2923  079E  0820               	movf	?___aodiv,w
  2924  079F  00C4               	movwf	dtoa@n
  2925  07A0  0821               	movf	?___aodiv+1,w
  2926  07A1  00C5               	movwf	dtoa@n+1
  2927  07A2  0822               	movf	?___aodiv+2,w
  2928  07A3  00C6               	movwf	dtoa@n+2
  2929  07A4  0823               	movf	?___aodiv+3,w
  2930  07A5  00C7               	movwf	dtoa@n+3
  2931  07A6  0824               	movf	?___aodiv+4,w
  2932  07A7  00C8               	movwf	dtoa@n+4
  2933  07A8  0825               	movf	?___aodiv+5,w
  2934  07A9  00C9               	movwf	dtoa@n+5
  2935  07AA  0826               	movf	?___aodiv+6,w
  2936  07AB  00CA               	movwf	dtoa@n+6
  2937  07AC  0827               	movf	?___aodiv+7,w
  2938  07AD  00CB               	movwf	dtoa@n+7
  2939  07AE                     l233:	
  2940                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 305:     }
  2941                           
  2942                           
  2943                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 299:     while (!(i < 
      +                          1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2944  07AE  0020               	movlb	0	; select bank0
  2945  07AF  084D               	movf	dtoa@i+1,w
  2946  07B0  3A80               	xorlw	128
  2947  07B1  00B8               	movwf	??_dtoa
  2948  07B2  3080               	movlw	128
  2949  07B3  0238               	subwf	??_dtoa,w
  2950  07B4  1D03               	skipz
  2951  07B5  2FB8               	goto	u1405
  2952  07B6  3001               	movlw	1
  2953  07B7  024C               	subwf	dtoa@i,w
  2954  07B8                     u1405:	
  2955  07B8  1803               	btfsc	3,0
  2956  07B9  2F20               	goto	l1594
  2957  07BA                     l1602:	
  2958                           
  2959                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 308:     if (s || (fla
      +                          gs & (1 << 2))) {
  2960  07BA  0020               	movlb	0	; select bank0
  2961  07BB  0842               	movf	dtoa@s,w
  2962  07BC  0443               	iorwf	dtoa@s+1,w
  2963  07BD  1D03               	btfss	3,2
  2964  07BE  2FC1               	goto	l1606
  2965  07BF  1D6D               	btfss	_flags,2
  2966  07C0  2FD8               	goto	l1616
  2967  07C1                     l1606:	
  2968                           
  2969                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 309:         --i;
  2970  07C1  30FF               	movlw	255
  2971  07C2  07CC               	addwf	dtoa@i,f
  2972  07C3  30FF               	movlw	255
  2973  07C4  3DCD               	addwfc	dtoa@i+1,f
  2974                           
  2975                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 310:         dbuf[i] =
      +                           s ? '-' : '+';
  2976  07C5  0842               	movf	dtoa@s,w
  2977  07C6  0443               	iorwf	dtoa@s+1,w
  2978  07C7  1D03               	btfss	3,2
  2979  07C8  2FCB               	goto	l1612
  2980  07C9  302B               	movlw	43
  2981  07CA  2FCC               	goto	L1
  2982  07CB                     l1612:	
  2983  07CB  302D               	movlw	45
  2984  07CC                     L1:	
  2985  07CC  00BC               	movwf	_dtoa$250
  2986  07CD  3000               	movlw	0
  2987  07CE  00BD               	movwf	_dtoa$250+1
  2988  07CF  083C               	movf	_dtoa$250,w
  2989  07D0  00B8               	movwf	??_dtoa
  2990  07D1  084C               	movf	dtoa@i,w
  2991  07D2  3E20               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2992  07D3  0086               	movwf	6
  2993  07D4  3001               	movlw	1	; select bank2/3
  2994  07D5  0087               	movwf	7
  2995  07D6  0838               	movf	??_dtoa,w
  2996  07D7  0081               	movwf	1
  2997  07D8                     l1616:	
  2998                           
  2999                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 314:     return pad(fp
      +                          , &dbuf[i], w);
  3000  07D8  084C               	movf	dtoa@i,w
  3001  07D9  3E20               	addlw	(low (_dbuf| (0+256)))& (0+255)
  3002  07DA  00B8               	movwf	??_dtoa
  3003  07DB  0838               	movf	??_dtoa,w
  3004  07DC  00A4               	movwf	pad@buf
  3005  07DD  0841               	movf	dtoa@w+1,w
  3006  07DE  00A6               	movwf	pad@p+1
  3007  07DF  0840               	movf	dtoa@w,w
  3008  07E0  00A5               	movwf	pad@p
  3009  07E1  083B               	movf	dtoa@fp,w
  3010  07E2  3182  22EE         	fcall	_pad
  3011  07E4  0020               	movlb	0	; select bank0
  3012  07E5  0825               	movf	?_pad+1,w
  3013  07E6  00B1               	movwf	?_dtoa+1
  3014  07E7  0824               	movf	?_pad,w
  3015  07E8  00B0               	movwf	?_dtoa
  3016  07E9  0008               	return
  3017  07EA                     __end_of_dtoa:	
  3018                           
  3019                           	psect	text5
  3020  02EE                     __ptext5:	
  3021 ;; *************** function _pad *****************
  3022 ;; Defined at:
  3023 ;;		line 72 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  fp              1    wreg     PTR struct _IO_FILE
  3026 ;;		 -> sprintf@f(5), 
  3027 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  3028 ;;		 -> dbuf(32), 
  3029 ;;  p               2    5[BANK0 ] int 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  3032 ;;		 -> sprintf@f(5), 
  3033 ;;  w               2    9[BANK0 ] int 
  3034 ;;  i               2    7[BANK0 ] int 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  2    4[BANK0 ] int 
  3037 ;; Registers used:
  3038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3044 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3045 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3047 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3048 ;;Total ram usage:        9 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    3
  3051 ;; This function calls:
  3052 ;;		_fputc
  3053 ;;		_fputs
  3054 ;;		_strlen
  3055 ;; This function is called by:
  3056 ;;		_dtoa
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           
  3061                           ;psect for function _pad
  3062  02EE                     _pad:	
  3063                           
  3064                           ;incstack = 0
  3065                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3066                           ;pad@fp stored from wreg
  3067  02EE  0020               	movlb	0	; select bank0
  3068  02EF  00AB               	movwf	pad@fp
  3069                           
  3070                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 72: static int pad(FIL
      +                          E *fp, char *buf, int p);K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c
      +                          : 73: {;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 74:     int i, 
      +                          w;;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 77:     if (flags & 
      +                          (1 << 0)) {
  3071  02F0  1C6D               	btfss	_flags,0
  3072  02F1  2AFA               	goto	l1544
  3073                           
  3074                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 78:         fputs((con
      +                          st char *)buf, fp);
  3075  02F2  082B               	movf	pad@fp,w
  3076  02F3  00FC               	movwf	??_pad
  3077  02F4  087C               	movf	??_pad,w
  3078  02F5  00F8               	movwf	fputs@fp
  3079  02F6  0824               	movf	pad@buf,w
  3080  02F7  3181  21E7  3182   	fcall	_fputs
  3081  02FA                     l1544:	
  3082                           
  3083                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 82:     w = (p < 0) ? 
      +                          0 : p;
  3084  02FA  0020               	movlb	0	; select bank0
  3085  02FB  1BA6               	btfsc	pad@p+1,7
  3086  02FC  2B02               	goto	l1548
  3087  02FD  0826               	movf	pad@p+1,w
  3088  02FE  00AA               	movwf	pad@w+1
  3089  02FF  0825               	movf	pad@p,w
  3090  0300  00A9               	movwf	pad@w
  3091  0301  2B04               	goto	l216
  3092  0302                     l1548:	
  3093  0302  01A9               	clrf	pad@w
  3094  0303  01AA               	clrf	pad@w+1
  3095  0304                     l216:	
  3096                           
  3097                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  3098  0304  01A7               	clrf	pad@i
  3099  0305  01A8               	clrf	pad@i+1
  3100  0306                     l1554:	
  3101                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 84:     while (i < w) 
      +                          {
  3102                           
  3103                           
  3104                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 84:     while (i < w) 
      +                          {
  3105  0306  0828               	movf	pad@i+1,w
  3106  0307  3A80               	xorlw	128
  3107  0308  00FC               	movwf	??_pad
  3108  0309  082A               	movf	pad@w+1,w
  3109  030A  3A80               	xorlw	128
  3110  030B  027C               	subwf	??_pad,w
  3111  030C  1D03               	skipz
  3112  030D  2B10               	goto	u1305
  3113  030E  0829               	movf	pad@w,w
  3114  030F  0227               	subwf	pad@i,w
  3115  0310                     u1305:	
  3116  0310  1803               	btfsc	3,0
  3117  0311  2B24               	goto	l219
  3118                           
  3119                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 85:         fputc(' ',
      +                           fp);
  3120  0312  3020               	movlw	32
  3121  0313  00F0               	movwf	fputc@c
  3122  0314  3000               	movlw	0
  3123  0315  00F1               	movwf	fputc@c+1
  3124  0316  0020               	movlb	0	; select bank0
  3125  0317  082B               	movf	pad@fp,w
  3126  0318  00FC               	movwf	??_pad
  3127  0319  087C               	movf	??_pad,w
  3128  031A  00F2               	movwf	fputc@fp
  3129  031B  3182  22A9  3182   	fcall	_fputc
  3130                           
  3131                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 86:         ++i;
  3132  031E  3001               	movlw	1
  3133  031F  0020               	movlb	0	; select bank0
  3134  0320  07A7               	addwf	pad@i,f
  3135  0321  3000               	movlw	0
  3136  0322  3DA8               	addwfc	pad@i+1,f
  3137  0323  2B06               	goto	l1554
  3138  0324                     l219:	
  3139                           
  3140                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 90:     if (!(flags & 
      +                          (1 << 0))) {
  3141  0324  0020               	movlb	0	; select bank0
  3142  0325  186D               	btfsc	_flags,0
  3143  0326  2B2F               	goto	l1558
  3144                           
  3145                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 91:         fputs((con
      +                          st char *)buf, fp);
  3146  0327  082B               	movf	pad@fp,w
  3147  0328  00FC               	movwf	??_pad
  3148  0329  087C               	movf	??_pad,w
  3149  032A  00F8               	movwf	fputs@fp
  3150  032B  0824               	movf	pad@buf,w
  3151  032C  3181  21E7  3182   	fcall	_fputs
  3152  032F                     l1558:	
  3153                           
  3154                           ;K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\doprnt.c: 94:     return strlen(
      +                          buf) + w;
  3155  032F  0020               	movlb	0	; select bank0
  3156  0330  0824               	movf	pad@buf,w
  3157  0331  00F0               	movwf	strlen@s
  3158  0332  3001               	movlw	1
  3159  0333  00F1               	movwf	strlen@s+1
  3160  0334  3181  2141         	fcall	_strlen
  3161  0336  0020               	movlb	0	; select bank0
  3162  0337  0829               	movf	pad@w,w
  3163  0338  0770               	addwf	?_strlen,w
  3164  0339  00A4               	movwf	?_pad
  3165  033A  082A               	movf	pad@w+1,w
  3166  033B  3D71               	addwfc	?_strlen+1,w
  3167  033C  00A5               	movwf	?_pad+1
  3168  033D  0008               	return
  3169  033E                     __end_of_pad:	
  3170                           
  3171                           	psect	text6
  3172  01E7                     __ptext6:	
  3173 ;; *************** function _fputs *****************
  3174 ;; Defined at:
  3175 ;;		line 8 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\nf_fputs.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;  s               1    wreg     PTR const unsigned char 
  3178 ;;		 -> dbuf(32), 
  3179 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  3180 ;;		 -> sprintf@f(5), 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  3183 ;;		 -> dbuf(32), 
  3184 ;;  i               2    1[BANK0 ] int 
  3185 ;;  c               1    0[BANK0 ] unsigned char 
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  2    8[COMMON] int 
  3188 ;; Registers used:
  3189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3195 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3196 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3197 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3198 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3199 ;;Total ram usage:        8 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    2
  3202 ;; This function calls:
  3203 ;;		_fputc
  3204 ;; This function is called by:
  3205 ;;		_pad
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           
  3210                           ;psect for function _fputs
  3211  01E7                     _fputs:	
  3212                           
  3213                           ;incstack = 0
  3214                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3215                           ;fputs@s stored from wreg
  3216  01E7  0020               	movlb	0	; select bank0
  3217  01E8  00A3               	movwf	fputs@s
  3218  01E9  01A1               	clrf	fputs@i
  3219  01EA  01A2               	clrf	fputs@i+1
  3220  01EB                     l1180:	
  3221  01EB  0821               	movf	fputs@i,w
  3222  01EC  0723               	addwf	fputs@s,w
  3223  01ED  00F9               	movwf	??_fputs
  3224  01EE  0879               	movf	??_fputs,w
  3225  01EF  0086               	movwf	6
  3226  01F0  3001               	movlw	1	; select bank2/3
  3227  01F1  0087               	movwf	7
  3228  01F2  0801               	movf	1,w
  3229  01F3  00FA               	movwf	??_fputs+1
  3230  01F4  087A               	movf	??_fputs+1,w
  3231  01F5  00A0               	movwf	fputs@c
  3232  01F6  0820               	movf	fputs@c,w
  3233  01F7  1903               	btfsc	3,2
  3234  01F8  0008               	return
  3235  01F9  0820               	movf	fputs@c,w
  3236  01FA  00F9               	movwf	??_fputs
  3237  01FB  01FA               	clrf	??_fputs+1
  3238  01FC  0879               	movf	??_fputs,w
  3239  01FD  00F0               	movwf	fputc@c
  3240  01FE  087A               	movf	??_fputs+1,w
  3241  01FF  00F1               	movwf	fputc@c+1
  3242  0200  0878               	movf	fputs@fp,w
  3243  0201  00FB               	movwf	??_fputs+2
  3244  0202  087B               	movf	??_fputs+2,w
  3245  0203  00F2               	movwf	fputc@fp
  3246  0204  3182  22A9  3181   	fcall	_fputc
  3247  0207  3001               	movlw	1
  3248  0208  0020               	movlb	0	; select bank0
  3249  0209  07A1               	addwf	fputs@i,f
  3250  020A  3000               	movlw	0
  3251  020B  3DA2               	addwfc	fputs@i+1,f
  3252  020C  29EB               	goto	l1180
  3253  020D                     __end_of_fputs:	
  3254                           
  3255                           	psect	text7
  3256  02A9                     __ptext7:	
  3257 ;; *************** function _fputc *****************
  3258 ;; Defined at:
  3259 ;;		line 8 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\nf_fputc.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  c               2    0[COMMON] int 
  3262 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  3263 ;;		 -> sprintf@f(5), 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;		None
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  2    0[COMMON] int 
  3268 ;; Registers used:
  3269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3275 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3277 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3278 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3279 ;;Total ram usage:        8 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    1
  3282 ;; This function calls:
  3283 ;;		_putch
  3284 ;; This function is called by:
  3285 ;;		_pad
  3286 ;;		_vfpfcnvrt
  3287 ;;		_fputs
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           
  3292                           ;psect for function _fputc
  3293  02A9                     _fputc:	
  3294                           
  3295                           ;incstack = 0
  3296                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3297  02A9  0872               	movf	fputc@fp,w
  3298  02AA  1D03               	btfss	3,2
  3299  02AB  0872               	movf	fputc@fp,w
  3300  02AC  1D03               	btfss	3,2
  3301  02AD  2AB2               	goto	l1154
  3302  02AE  0870               	movf	fputc@c,w
  3303  02AF  3181  212D         	fcall	_putch
  3304  02B1  0008               	return
  3305  02B2                     l1154:	
  3306  02B2  0872               	movf	fputc@fp,w
  3307  02B3  3E03               	addlw	3
  3308  02B4  0086               	movwf	6
  3309  02B5  0187               	clrf	7
  3310  02B6  0016               	moviw fsr1++
  3311  02B7  0401               	iorwf	1,w
  3312  02B8  1903               	btfsc	3,2
  3313  02B9  2AD5               	goto	l1158
  3314  02BA  0872               	movf	fputc@fp,w
  3315  02BB  3E03               	addlw	3
  3316  02BC  0086               	movwf	6
  3317  02BD  0187               	clrf	7
  3318  02BE  3F40               	moviw [0]fsr1
  3319  02BF  00F3               	movwf	??_fputc
  3320  02C0  3F41               	moviw [1]fsr1
  3321  02C1  00F4               	movwf	??_fputc+1
  3322  02C2  0A72               	incf	fputc@fp,w
  3323  02C3  0086               	movwf	6
  3324  02C4  0187               	clrf	7
  3325  02C5  3F40               	moviw [0]fsr1
  3326  02C6  00F5               	movwf	??_fputc+2
  3327  02C7  3F41               	moviw [1]fsr1
  3328  02C8  00F6               	movwf	??_fputc+3
  3329  02C9  0876               	movf	??_fputc+3,w
  3330  02CA  3A80               	xorlw	128
  3331  02CB  00F7               	movwf	??_fputc+4
  3332  02CC  0874               	movf	??_fputc+1,w
  3333  02CD  3A80               	xorlw	128
  3334  02CE  0277               	subwf	??_fputc+4,w
  3335  02CF  1D03               	skipz
  3336  02D0  2AD3               	goto	u675
  3337  02D1  0873               	movf	??_fputc,w
  3338  02D2  0275               	subwf	??_fputc+2,w
  3339  02D3                     u675:	
  3340  02D3  1803               	skipnc
  3341  02D4  0008               	return
  3342  02D5                     l1158:	
  3343  02D5  0870               	movf	fputc@c,w
  3344  02D6  00F3               	movwf	??_fputc
  3345  02D7  0872               	movf	fputc@fp,w
  3346  02D8  0086               	movwf	6
  3347  02D9  0187               	clrf	7
  3348  02DA  0A72               	incf	fputc@fp,w
  3349  02DB  0084               	movwf	4
  3350  02DC  0185               	clrf	5
  3351  02DD  0800               	movf	0,w
  3352  02DE  0701               	addwf	1,w
  3353  02DF  00F4               	movwf	??_fputc+1
  3354  02E0  0874               	movf	??_fputc+1,w
  3355  02E1  0086               	movwf	6
  3356  02E2  0187               	clrf	7
  3357  02E3  0873               	movf	??_fputc,w
  3358  02E4  0081               	movwf	1
  3359  02E5  0A72               	incf	fputc@fp,w
  3360  02E6  0086               	movwf	6
  3361  02E7  0187               	clrf	7
  3362  02E8  3001               	movlw	1
  3363  02E9  0781               	addwf	1,f
  3364  02EA  3141               	addfsr 1,1
  3365  02EB  1803               	skipnc
  3366  02EC  0A81               	incf	1,f
  3367  02ED  0008               	return
  3368  02EE                     __end_of_fputc:	
  3369                           
  3370                           	psect	text8
  3371  012D                     __ptext8:	
  3372 ;; *************** function _putch *****************
  3373 ;; Defined at:
  3374 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\putch.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  c               1    wreg     unsigned char 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  c               1    0[COMMON] unsigned char 
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      void 
  3381 ;; Registers used:
  3382 ;;		wreg
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3392 ;;Total ram usage:        0 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_fputc
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           
  3402                           ;psect for function _putch
  3403  012D                     _putch:	
  3404                           
  3405                           ;incstack = 0
  3406                           ; Regs used in _putch: [wreg]
  3407  012D  0008               	return
  3408  012E                     __end_of_putch:	
  3409                           
  3410                           	psect	text9
  3411  016F                     __ptext9:	
  3412 ;; *************** function _abs *****************
  3413 ;; Defined at:
  3414 ;;		line 1 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\abs.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  a               2    3[COMMON] int 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  2    3[COMMON] int 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3428 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3430 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3431 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3432 ;;Total ram usage:        4 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_dtoa
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           
  3442                           ;psect for function _abs
  3443  016F                     _abs:	
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in _abs: [wreg+status,2+status,0]
  3447  016F  0874               	movf	abs@a+1,w
  3448  0170  3A80               	xorlw	128
  3449  0171  00F5               	movwf	??_abs
  3450  0172  3080               	movlw	128
  3451  0173  0275               	subwf	??_abs,w
  3452  0174  1D03               	skipz
  3453  0175  2978               	goto	u745
  3454  0176  3001               	movlw	1
  3455  0177  0273               	subwf	abs@a,w
  3456  0178                     u745:	
  3457  0178  1803               	skipnc
  3458  0179  0008               	return
  3459  017A  0973               	comf	abs@a,w
  3460  017B  00F5               	movwf	??_abs
  3461  017C  0974               	comf	abs@a+1,w
  3462  017D  00F6               	movwf	??_abs+1
  3463  017E  0AF5               	incf	??_abs,f
  3464  017F  1903               	skipnz
  3465  0180  0AF6               	incf	??_abs+1,f
  3466  0181  0875               	movf	??_abs,w
  3467  0182  00F3               	movwf	?_abs
  3468  0183  0876               	movf	??_abs+1,w
  3469  0184  00F4               	movwf	?_abs+1
  3470  0185  0008               	return
  3471  0186                     __end_of_abs:	
  3472                           
  3473                           	psect	text10
  3474  04D5                     __ptext10:	
  3475 ;; *************** function ___aomod *****************
  3476 ;; Defined at:
  3477 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aomod.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  divisor         8    0[BANK0 ] long long 
  3480 ;;  dividend        8    8[BANK0 ] long long 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  sign            1    2[COMMON] unsigned char 
  3483 ;;  counter         1    1[COMMON] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  8    0[BANK0 ] long long 
  3486 ;; Registers used:
  3487 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3493 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3496 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3497 ;;Total ram usage:       19 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_dtoa
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           
  3507                           ;psect for function ___aomod
  3508  04D5                     ___aomod:	
  3509                           
  3510                           ;incstack = 0
  3511                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
  3512  04D5  01F2               	clrf	___aomod@sign
  3513  04D6  3028               	movlw	low ___aomod@dividend
  3514  04D7  0086               	movwf	6
  3515  04D8  3000               	movlw	high ___aomod@dividend
  3516  04D9  0087               	movwf	7
  3517  04DA  3F47               	moviw [7]fsr1
  3518  04DB  00F0               	movwf	??___aomod
  3519  04DC  1FF0               	btfss	??___aomod,7
  3520  04DD  2CFF               	goto	l1252
  3521  04DE  0020               	movlb	0	; select bank0
  3522  04DF  09A8               	comf	___aomod@dividend,f
  3523  04E0  09A9               	comf	___aomod@dividend+1,f
  3524  04E1  09AA               	comf	___aomod@dividend+2,f
  3525  04E2  09AB               	comf	___aomod@dividend+3,f
  3526  04E3  09AC               	comf	___aomod@dividend+4,f
  3527  04E4  09AD               	comf	___aomod@dividend+5,f
  3528  04E5  09AE               	comf	___aomod@dividend+6,f
  3529  04E6  09AF               	comf	___aomod@dividend+7,f
  3530  04E7  0AA8               	incf	___aomod@dividend,f
  3531  04E8  1D03               	skipz
  3532  04E9  2CFD               	goto	u87lld
  3533  04EA  0AA9               	incf	___aomod@dividend+1,f
  3534  04EB  1D03               	skipz
  3535  04EC  2CFD               	goto	u87lld
  3536  04ED  0AAA               	incf	___aomod@dividend+2,f
  3537  04EE  1D03               	skipz
  3538  04EF  2CFD               	goto	u87lld
  3539  04F0  0AAB               	incf	___aomod@dividend+3,f
  3540  04F1  1D03               	skipz
  3541  04F2  2CFD               	goto	u87lld
  3542  04F3  0AAC               	incf	___aomod@dividend+4,f
  3543  04F4  1D03               	skipz
  3544  04F5  2CFD               	goto	u87lld
  3545  04F6  0AAD               	incf	___aomod@dividend+5,f
  3546  04F7  1D03               	skipz
  3547  04F8  2CFD               	goto	u87lld
  3548  04F9  0AAE               	incf	___aomod@dividend+6,f
  3549  04FA  1D03               	skipz
  3550  04FB  2CFD               	goto	u87lld
  3551  04FC  0AAF               	incf	___aomod@dividend+7,f
  3552  04FD                     u87lld:	
  3553  04FD  01F2               	clrf	___aomod@sign
  3554  04FE  0AF2               	incf	___aomod@sign,f
  3555  04FF                     l1252:	
  3556  04FF  3020               	movlw	low ___aomod@divisor
  3557  0500  0086               	movwf	6
  3558  0501  3000               	movlw	high ___aomod@divisor
  3559  0502  0087               	movwf	7
  3560  0503  3F47               	moviw [7]fsr1
  3561  0504  00F0               	movwf	??___aomod
  3562  0505  1FF0               	btfss	??___aomod,7
  3563  0506  2D26               	goto	l1256
  3564  0507  0020               	movlb	0	; select bank0
  3565  0508  09A0               	comf	___aomod@divisor,f
  3566  0509  09A1               	comf	___aomod@divisor+1,f
  3567  050A  09A2               	comf	___aomod@divisor+2,f
  3568  050B  09A3               	comf	___aomod@divisor+3,f
  3569  050C  09A4               	comf	___aomod@divisor+4,f
  3570  050D  09A5               	comf	___aomod@divisor+5,f
  3571  050E  09A6               	comf	___aomod@divisor+6,f
  3572  050F  09A7               	comf	___aomod@divisor+7,f
  3573  0510  0AA0               	incf	___aomod@divisor,f
  3574  0511  1D03               	skipz
  3575  0512  2D26               	goto	l1256
  3576  0513  0AA1               	incf	___aomod@divisor+1,f
  3577  0514  1D03               	skipz
  3578  0515  2D26               	goto	l1256
  3579  0516  0AA2               	incf	___aomod@divisor+2,f
  3580  0517  1D03               	skipz
  3581  0518  2D26               	goto	l1256
  3582  0519  0AA3               	incf	___aomod@divisor+3,f
  3583  051A  1D03               	skipz
  3584  051B  2D26               	goto	l1256
  3585  051C  0AA4               	incf	___aomod@divisor+4,f
  3586  051D  1D03               	skipz
  3587  051E  2D26               	goto	l1256
  3588  051F  0AA5               	incf	___aomod@divisor+5,f
  3589  0520  1D03               	skipz
  3590  0521  2D26               	goto	l1256
  3591  0522  0AA6               	incf	___aomod@divisor+6,f
  3592  0523  1D03               	skipz
  3593  0524  2D26               	goto	l1256
  3594  0525  0AA7               	incf	___aomod@divisor+7,f
  3595  0526                     l1256:	
  3596  0526  0020               	movlb	0	; select bank0
  3597  0527  0820               	movf	___aomod@divisor,w
  3598  0528  0421               	iorwf	___aomod@divisor+1,w
  3599  0529  0422               	iorwf	___aomod@divisor+2,w
  3600  052A  0423               	iorwf	___aomod@divisor+3,w
  3601  052B  0424               	iorwf	___aomod@divisor+4,w
  3602  052C  0425               	iorwf	___aomod@divisor+5,w
  3603  052D  0426               	iorwf	___aomod@divisor+6,w
  3604  052E  0427               	iorwf	___aomod@divisor+7,w
  3605  052F  1903               	skipnz
  3606  0530  2D7E               	goto	l1272
  3607  0531  01F1               	clrf	___aomod@counter
  3608  0532  0AF1               	incf	___aomod@counter,f
  3609  0533                     l1264:	
  3610  0533  1BA7               	btfsc	___aomod@divisor+7,7
  3611  0534  2D42               	goto	l1266
  3612  0535  35A0               	lslf	___aomod@divisor,f
  3613  0536  0DA1               	rlf	___aomod@divisor+1,f
  3614  0537  0DA2               	rlf	___aomod@divisor+2,f
  3615  0538  0DA3               	rlf	___aomod@divisor+3,f
  3616  0539  0DA4               	rlf	___aomod@divisor+4,f
  3617  053A  0DA5               	rlf	___aomod@divisor+5,f
  3618  053B  0DA6               	rlf	___aomod@divisor+6,f
  3619  053C  0DA7               	rlf	___aomod@divisor+7,f
  3620  053D  3001               	movlw	1
  3621  053E  00F0               	movwf	??___aomod
  3622  053F  0870               	movf	??___aomod,w
  3623  0540  07F1               	addwf	___aomod@counter,f
  3624  0541  2D33               	goto	l1264
  3625  0542                     l1266:	
  3626  0542  0827               	movf	___aomod@divisor+7,w
  3627  0543  022F               	subwf	___aomod@dividend+7,w
  3628  0544  1D03               	skipz
  3629  0545  2D60               	goto	u925
  3630  0546  0826               	movf	___aomod@divisor+6,w
  3631  0547  022E               	subwf	___aomod@dividend+6,w
  3632  0548  1D03               	skipz
  3633  0549  2D60               	goto	u925
  3634  054A  0825               	movf	___aomod@divisor+5,w
  3635  054B  022D               	subwf	___aomod@dividend+5,w
  3636  054C  1D03               	skipz
  3637  054D  2D60               	goto	u925
  3638  054E  0824               	movf	___aomod@divisor+4,w
  3639  054F  022C               	subwf	___aomod@dividend+4,w
  3640  0550  1D03               	skipz
  3641  0551  2D60               	goto	u925
  3642  0552  0823               	movf	___aomod@divisor+3,w
  3643  0553  022B               	subwf	___aomod@dividend+3,w
  3644  0554  1D03               	skipz
  3645  0555  2D60               	goto	u925
  3646  0556  0822               	movf	___aomod@divisor+2,w
  3647  0557  022A               	subwf	___aomod@dividend+2,w
  3648  0558  1D03               	skipz
  3649  0559  2D60               	goto	u925
  3650  055A  0821               	movf	___aomod@divisor+1,w
  3651  055B  0229               	subwf	___aomod@dividend+1,w
  3652  055C  1D03               	skipz
  3653  055D  2D60               	goto	u925
  3654  055E  0820               	movf	___aomod@divisor,w
  3655  055F  0228               	subwf	___aomod@dividend,w
  3656  0560                     u925:	
  3657  0560  1C03               	skipc
  3658  0561  2D72               	goto	l1270
  3659  0562  0820               	movf	___aomod@divisor,w
  3660  0563  02A8               	subwf	___aomod@dividend,f
  3661  0564  0821               	movf	___aomod@divisor+1,w
  3662  0565  3BA9               	subwfb	___aomod@dividend+1,f
  3663  0566  0822               	movf	___aomod@divisor+2,w
  3664  0567  3BAA               	subwfb	___aomod@dividend+2,f
  3665  0568  0823               	movf	___aomod@divisor+3,w
  3666  0569  3BAB               	subwfb	___aomod@dividend+3,f
  3667  056A  0824               	movf	___aomod@divisor+4,w
  3668  056B  3BAC               	subwfb	___aomod@dividend+4,f
  3669  056C  0825               	movf	___aomod@divisor+5,w
  3670  056D  3BAD               	subwfb	___aomod@dividend+5,f
  3671  056E  0826               	movf	___aomod@divisor+6,w
  3672  056F  3BAE               	subwfb	___aomod@dividend+6,f
  3673  0570  0827               	movf	___aomod@divisor+7,w
  3674  0571  3BAF               	subwfb	___aomod@dividend+7,f
  3675  0572                     l1270:	
  3676  0572  36A7               	lsrf	___aomod@divisor+7,f
  3677  0573  0CA6               	rrf	___aomod@divisor+6,f
  3678  0574  0CA5               	rrf	___aomod@divisor+5,f
  3679  0575  0CA4               	rrf	___aomod@divisor+4,f
  3680  0576  0CA3               	rrf	___aomod@divisor+3,f
  3681  0577  0CA2               	rrf	___aomod@divisor+2,f
  3682  0578  0CA1               	rrf	___aomod@divisor+1,f
  3683  0579  0CA0               	rrf	___aomod@divisor,f
  3684  057A  3001               	movlw	1
  3685  057B  02F1               	subwf	___aomod@counter,f
  3686  057C  1D03               	btfss	3,2
  3687  057D  2D42               	goto	l1266
  3688  057E                     l1272:	
  3689  057E  0872               	movf	___aomod@sign,w
  3690  057F  1903               	btfsc	3,2
  3691  0580  2D9F               	goto	l378
  3692  0581  09A8               	comf	___aomod@dividend,f
  3693  0582  09A9               	comf	___aomod@dividend+1,f
  3694  0583  09AA               	comf	___aomod@dividend+2,f
  3695  0584  09AB               	comf	___aomod@dividend+3,f
  3696  0585  09AC               	comf	___aomod@dividend+4,f
  3697  0586  09AD               	comf	___aomod@dividend+5,f
  3698  0587  09AE               	comf	___aomod@dividend+6,f
  3699  0588  09AF               	comf	___aomod@dividend+7,f
  3700  0589  0AA8               	incf	___aomod@dividend,f
  3701  058A  1D03               	skipz
  3702  058B  2D9F               	goto	l378
  3703  058C  0AA9               	incf	___aomod@dividend+1,f
  3704  058D  1D03               	skipz
  3705  058E  2D9F               	goto	l378
  3706  058F  0AAA               	incf	___aomod@dividend+2,f
  3707  0590  1D03               	skipz
  3708  0591  2D9F               	goto	l378
  3709  0592  0AAB               	incf	___aomod@dividend+3,f
  3710  0593  1D03               	skipz
  3711  0594  2D9F               	goto	l378
  3712  0595  0AAC               	incf	___aomod@dividend+4,f
  3713  0596  1D03               	skipz
  3714  0597  2D9F               	goto	l378
  3715  0598  0AAD               	incf	___aomod@dividend+5,f
  3716  0599  1D03               	skipz
  3717  059A  2D9F               	goto	l378
  3718  059B  0AAE               	incf	___aomod@dividend+6,f
  3719  059C  1D03               	skipz
  3720  059D  2D9F               	goto	l378
  3721  059E  0AAF               	incf	___aomod@dividend+7,f
  3722  059F                     l378:	
  3723  059F  0020               	movlb	0	; select bank0
  3724  05A0  0828               	movf	___aomod@dividend,w
  3725  05A1  00A0               	movwf	?___aomod
  3726  05A2  0829               	movf	___aomod@dividend+1,w
  3727  05A3  00A1               	movwf	?___aomod+1
  3728  05A4  082A               	movf	___aomod@dividend+2,w
  3729  05A5  00A2               	movwf	?___aomod+2
  3730  05A6  082B               	movf	___aomod@dividend+3,w
  3731  05A7  00A3               	movwf	?___aomod+3
  3732  05A8  082C               	movf	___aomod@dividend+4,w
  3733  05A9  00A4               	movwf	?___aomod+4
  3734  05AA  082D               	movf	___aomod@dividend+5,w
  3735  05AB  00A5               	movwf	?___aomod+5
  3736  05AC  082E               	movf	___aomod@dividend+6,w
  3737  05AD  00A6               	movwf	?___aomod+6
  3738  05AE  082F               	movf	___aomod@dividend+7,w
  3739  05AF  00A7               	movwf	?___aomod+7
  3740  05B0  0008               	return
  3741  05B1                     __end_of___aomod:	
  3742                           
  3743                           	psect	text11
  3744  05B1                     __ptext11:	
  3745 ;; *************** function ___aodiv *****************
  3746 ;; Defined at:
  3747 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aodiv.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  divisor         8    0[BANK0 ] long long 
  3750 ;;  dividend        8    8[BANK0 ] long long 
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;  quotient        8    3[COMMON] long long 
  3753 ;;  sign            1    2[COMMON] unsigned char 
  3754 ;;  counter         1    1[COMMON] unsigned char 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  8    0[BANK0 ] long long 
  3757 ;; Registers used:
  3758 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3764 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3767 ;;      Totals:        11      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3768 ;;Total ram usage:       27 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_dtoa
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           
  3778                           ;psect for function ___aodiv
  3779  05B1                     ___aodiv:	
  3780                           
  3781                           ;incstack = 0
  3782                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
  3783  05B1  01F2               	clrf	___aodiv@sign
  3784  05B2  3020               	movlw	low ___aodiv@divisor
  3785  05B3  0086               	movwf	6
  3786  05B4  3000               	movlw	high ___aodiv@divisor
  3787  05B5  0087               	movwf	7
  3788  05B6  3F47               	moviw [7]fsr1
  3789  05B7  00F0               	movwf	??___aodiv
  3790  05B8  1FF0               	btfss	??___aodiv,7
  3791  05B9  2DDB               	goto	l1214
  3792  05BA  0020               	movlb	0	; select bank0
  3793  05BB  09A0               	comf	___aodiv@divisor,f
  3794  05BC  09A1               	comf	___aodiv@divisor+1,f
  3795  05BD  09A2               	comf	___aodiv@divisor+2,f
  3796  05BE  09A3               	comf	___aodiv@divisor+3,f
  3797  05BF  09A4               	comf	___aodiv@divisor+4,f
  3798  05C0  09A5               	comf	___aodiv@divisor+5,f
  3799  05C1  09A6               	comf	___aodiv@divisor+6,f
  3800  05C2  09A7               	comf	___aodiv@divisor+7,f
  3801  05C3  0AA0               	incf	___aodiv@divisor,f
  3802  05C4  1D03               	skipz
  3803  05C5  2DD9               	goto	u76lld
  3804  05C6  0AA1               	incf	___aodiv@divisor+1,f
  3805  05C7  1D03               	skipz
  3806  05C8  2DD9               	goto	u76lld
  3807  05C9  0AA2               	incf	___aodiv@divisor+2,f
  3808  05CA  1D03               	skipz
  3809  05CB  2DD9               	goto	u76lld
  3810  05CC  0AA3               	incf	___aodiv@divisor+3,f
  3811  05CD  1D03               	skipz
  3812  05CE  2DD9               	goto	u76lld
  3813  05CF  0AA4               	incf	___aodiv@divisor+4,f
  3814  05D0  1D03               	skipz
  3815  05D1  2DD9               	goto	u76lld
  3816  05D2  0AA5               	incf	___aodiv@divisor+5,f
  3817  05D3  1D03               	skipz
  3818  05D4  2DD9               	goto	u76lld
  3819  05D5  0AA6               	incf	___aodiv@divisor+6,f
  3820  05D6  1D03               	skipz
  3821  05D7  2DD9               	goto	u76lld
  3822  05D8  0AA7               	incf	___aodiv@divisor+7,f
  3823  05D9                     u76lld:	
  3824  05D9  01F2               	clrf	___aodiv@sign
  3825  05DA  0AF2               	incf	___aodiv@sign,f
  3826  05DB                     l1214:	
  3827  05DB  3028               	movlw	low ___aodiv@dividend
  3828  05DC  0086               	movwf	6
  3829  05DD  3000               	movlw	high ___aodiv@dividend
  3830  05DE  0087               	movwf	7
  3831  05DF  3F47               	moviw [7]fsr1
  3832  05E0  00F0               	movwf	??___aodiv
  3833  05E1  1FF0               	btfss	??___aodiv,7
  3834  05E2  2E06               	goto	l1220
  3835  05E3  0020               	movlb	0	; select bank0
  3836  05E4  09A8               	comf	___aodiv@dividend,f
  3837  05E5  09A9               	comf	___aodiv@dividend+1,f
  3838  05E6  09AA               	comf	___aodiv@dividend+2,f
  3839  05E7  09AB               	comf	___aodiv@dividend+3,f
  3840  05E8  09AC               	comf	___aodiv@dividend+4,f
  3841  05E9  09AD               	comf	___aodiv@dividend+5,f
  3842  05EA  09AE               	comf	___aodiv@dividend+6,f
  3843  05EB  09AF               	comf	___aodiv@dividend+7,f
  3844  05EC  0AA8               	incf	___aodiv@dividend,f
  3845  05ED  1D03               	skipz
  3846  05EE  2E02               	goto	l1218
  3847  05EF  0AA9               	incf	___aodiv@dividend+1,f
  3848  05F0  1D03               	skipz
  3849  05F1  2E02               	goto	l1218
  3850  05F2  0AAA               	incf	___aodiv@dividend+2,f
  3851  05F3  1D03               	skipz
  3852  05F4  2E02               	goto	l1218
  3853  05F5  0AAB               	incf	___aodiv@dividend+3,f
  3854  05F6  1D03               	skipz
  3855  05F7  2E02               	goto	l1218
  3856  05F8  0AAC               	incf	___aodiv@dividend+4,f
  3857  05F9  1D03               	skipz
  3858  05FA  2E02               	goto	l1218
  3859  05FB  0AAD               	incf	___aodiv@dividend+5,f
  3860  05FC  1D03               	skipz
  3861  05FD  2E02               	goto	l1218
  3862  05FE  0AAE               	incf	___aodiv@dividend+6,f
  3863  05FF  1D03               	skipz
  3864  0600  2E02               	goto	l1218
  3865  0601  0AAF               	incf	___aodiv@dividend+7,f
  3866  0602                     l1218:	
  3867  0602  3001               	movlw	1
  3868  0603  00F0               	movwf	??___aodiv
  3869  0604  0870               	movf	??___aodiv,w
  3870  0605  06F2               	xorwf	___aodiv@sign,f
  3871  0606                     l1220:	
  3872  0606  3073               	movlw	low ___aodiv@quotient
  3873  0607  0086               	movwf	6
  3874  0608  3000               	movlw	high ___aodiv@quotient
  3875  0609  0087               	movwf	7
  3876  060A  3008               	movlw	8
  3877  060B  00F0               	movwf	??___aodiv
  3878  060C  3000               	movlw	0
  3879  060D                     u790:	
  3880  060D  001E               	movwi fsr1++
  3881  060E  0BF0               	decfsz	??___aodiv,f
  3882  060F  2E0D               	goto	u790
  3883  0610  0020               	movlb	0	; select bank0
  3884  0611  0820               	movf	___aodiv@divisor,w
  3885  0612  0421               	iorwf	___aodiv@divisor+1,w
  3886  0613  0422               	iorwf	___aodiv@divisor+2,w
  3887  0614  0423               	iorwf	___aodiv@divisor+3,w
  3888  0615  0424               	iorwf	___aodiv@divisor+4,w
  3889  0616  0425               	iorwf	___aodiv@divisor+5,w
  3890  0617  0426               	iorwf	___aodiv@divisor+6,w
  3891  0618  0427               	iorwf	___aodiv@divisor+7,w
  3892  0619  1903               	skipnz
  3893  061A  2E71               	goto	l1242
  3894  061B  01F1               	clrf	___aodiv@counter
  3895  061C  0AF1               	incf	___aodiv@counter,f
  3896  061D                     l1230:	
  3897  061D  1BA7               	btfsc	___aodiv@divisor+7,7
  3898  061E  2E2C               	goto	l1232
  3899  061F  35A0               	lslf	___aodiv@divisor,f
  3900  0620  0DA1               	rlf	___aodiv@divisor+1,f
  3901  0621  0DA2               	rlf	___aodiv@divisor+2,f
  3902  0622  0DA3               	rlf	___aodiv@divisor+3,f
  3903  0623  0DA4               	rlf	___aodiv@divisor+4,f
  3904  0624  0DA5               	rlf	___aodiv@divisor+5,f
  3905  0625  0DA6               	rlf	___aodiv@divisor+6,f
  3906  0626  0DA7               	rlf	___aodiv@divisor+7,f
  3907  0627  3001               	movlw	1
  3908  0628  00F0               	movwf	??___aodiv
  3909  0629  0870               	movf	??___aodiv,w
  3910  062A  07F1               	addwf	___aodiv@counter,f
  3911  062B  2E1D               	goto	l1230
  3912  062C                     l1232:	
  3913  062C  35F3               	lslf	___aodiv@quotient,f
  3914  062D  0DF4               	rlf	___aodiv@quotient+1,f
  3915  062E  0DF5               	rlf	___aodiv@quotient+2,f
  3916  062F  0DF6               	rlf	___aodiv@quotient+3,f
  3917  0630  0DF7               	rlf	___aodiv@quotient+4,f
  3918  0631  0DF8               	rlf	___aodiv@quotient+5,f
  3919  0632  0DF9               	rlf	___aodiv@quotient+6,f
  3920  0633  0DFA               	rlf	___aodiv@quotient+7,f
  3921  0634  0827               	movf	___aodiv@divisor+7,w
  3922  0635  022F               	subwf	___aodiv@dividend+7,w
  3923  0636  1D03               	skipz
  3924  0637  2E52               	goto	u825
  3925  0638  0826               	movf	___aodiv@divisor+6,w
  3926  0639  022E               	subwf	___aodiv@dividend+6,w
  3927  063A  1D03               	skipz
  3928  063B  2E52               	goto	u825
  3929  063C  0825               	movf	___aodiv@divisor+5,w
  3930  063D  022D               	subwf	___aodiv@dividend+5,w
  3931  063E  1D03               	skipz
  3932  063F  2E52               	goto	u825
  3933  0640  0824               	movf	___aodiv@divisor+4,w
  3934  0641  022C               	subwf	___aodiv@dividend+4,w
  3935  0642  1D03               	skipz
  3936  0643  2E52               	goto	u825
  3937  0644  0823               	movf	___aodiv@divisor+3,w
  3938  0645  022B               	subwf	___aodiv@dividend+3,w
  3939  0646  1D03               	skipz
  3940  0647  2E52               	goto	u825
  3941  0648  0822               	movf	___aodiv@divisor+2,w
  3942  0649  022A               	subwf	___aodiv@dividend+2,w
  3943  064A  1D03               	skipz
  3944  064B  2E52               	goto	u825
  3945  064C  0821               	movf	___aodiv@divisor+1,w
  3946  064D  0229               	subwf	___aodiv@dividend+1,w
  3947  064E  1D03               	skipz
  3948  064F  2E52               	goto	u825
  3949  0650  0820               	movf	___aodiv@divisor,w
  3950  0651  0228               	subwf	___aodiv@dividend,w
  3951  0652                     u825:	
  3952  0652  1C03               	skipc
  3953  0653  2E65               	goto	l1240
  3954  0654  0820               	movf	___aodiv@divisor,w
  3955  0655  02A8               	subwf	___aodiv@dividend,f
  3956  0656  0821               	movf	___aodiv@divisor+1,w
  3957  0657  3BA9               	subwfb	___aodiv@dividend+1,f
  3958  0658  0822               	movf	___aodiv@divisor+2,w
  3959  0659  3BAA               	subwfb	___aodiv@dividend+2,f
  3960  065A  0823               	movf	___aodiv@divisor+3,w
  3961  065B  3BAB               	subwfb	___aodiv@dividend+3,f
  3962  065C  0824               	movf	___aodiv@divisor+4,w
  3963  065D  3BAC               	subwfb	___aodiv@dividend+4,f
  3964  065E  0825               	movf	___aodiv@divisor+5,w
  3965  065F  3BAD               	subwfb	___aodiv@dividend+5,f
  3966  0660  0826               	movf	___aodiv@divisor+6,w
  3967  0661  3BAE               	subwfb	___aodiv@dividend+6,f
  3968  0662  0827               	movf	___aodiv@divisor+7,w
  3969  0663  3BAF               	subwfb	___aodiv@dividend+7,f
  3970  0664  1473               	bsf	___aodiv@quotient,0
  3971  0665                     l1240:	
  3972  0665  36A7               	lsrf	___aodiv@divisor+7,f
  3973  0666  0CA6               	rrf	___aodiv@divisor+6,f
  3974  0667  0CA5               	rrf	___aodiv@divisor+5,f
  3975  0668  0CA4               	rrf	___aodiv@divisor+4,f
  3976  0669  0CA3               	rrf	___aodiv@divisor+3,f
  3977  066A  0CA2               	rrf	___aodiv@divisor+2,f
  3978  066B  0CA1               	rrf	___aodiv@divisor+1,f
  3979  066C  0CA0               	rrf	___aodiv@divisor,f
  3980  066D  3001               	movlw	1
  3981  066E  02F1               	subwf	___aodiv@counter,f
  3982  066F  1D03               	btfss	3,2
  3983  0670  2E2C               	goto	l1232
  3984  0671                     l1242:	
  3985  0671  0872               	movf	___aodiv@sign,w
  3986  0672  1903               	btfsc	3,2
  3987  0673  2E92               	goto	l365
  3988  0674  09F3               	comf	___aodiv@quotient,f
  3989  0675  09F4               	comf	___aodiv@quotient+1,f
  3990  0676  09F5               	comf	___aodiv@quotient+2,f
  3991  0677  09F6               	comf	___aodiv@quotient+3,f
  3992  0678  09F7               	comf	___aodiv@quotient+4,f
  3993  0679  09F8               	comf	___aodiv@quotient+5,f
  3994  067A  09F9               	comf	___aodiv@quotient+6,f
  3995  067B  09FA               	comf	___aodiv@quotient+7,f
  3996  067C  0AF3               	incf	___aodiv@quotient,f
  3997  067D  1D03               	skipz
  3998  067E  2E92               	goto	l365
  3999  067F  0AF4               	incf	___aodiv@quotient+1,f
  4000  0680  1D03               	skipz
  4001  0681  2E92               	goto	l365
  4002  0682  0AF5               	incf	___aodiv@quotient+2,f
  4003  0683  1D03               	skipz
  4004  0684  2E92               	goto	l365
  4005  0685  0AF6               	incf	___aodiv@quotient+3,f
  4006  0686  1D03               	skipz
  4007  0687  2E92               	goto	l365
  4008  0688  0AF7               	incf	___aodiv@quotient+4,f
  4009  0689  1D03               	skipz
  4010  068A  2E92               	goto	l365
  4011  068B  0AF8               	incf	___aodiv@quotient+5,f
  4012  068C  1D03               	skipz
  4013  068D  2E92               	goto	l365
  4014  068E  0AF9               	incf	___aodiv@quotient+6,f
  4015  068F  1D03               	skipz
  4016  0690  2E92               	goto	l365
  4017  0691  0AFA               	incf	___aodiv@quotient+7,f
  4018  0692                     l365:	
  4019  0692  0873               	movf	___aodiv@quotient,w
  4020  0693  0020               	movlb	0	; select bank0
  4021  0694  00A0               	movwf	?___aodiv
  4022  0695  0874               	movf	___aodiv@quotient+1,w
  4023  0696  00A1               	movwf	?___aodiv+1
  4024  0697  0875               	movf	___aodiv@quotient+2,w
  4025  0698  00A2               	movwf	?___aodiv+2
  4026  0699  0876               	movf	___aodiv@quotient+3,w
  4027  069A  00A3               	movwf	?___aodiv+3
  4028  069B  0877               	movf	___aodiv@quotient+4,w
  4029  069C  00A4               	movwf	?___aodiv+4
  4030  069D  0878               	movf	___aodiv@quotient+5,w
  4031  069E  00A5               	movwf	?___aodiv+5
  4032  069F  0879               	movf	___aodiv@quotient+6,w
  4033  06A0  00A6               	movwf	?___aodiv+6
  4034  06A1  087A               	movf	___aodiv@quotient+7,w
  4035  06A2  00A7               	movwf	?___aodiv+7
  4036  06A3  0008               	return
  4037  06A4                     __end_of___aodiv:	
  4038                           
  4039                           	psect	text12
  4040  0396                     __ptext12:	
  4041 ;; *************** function _crc16 *****************
  4042 ;; Defined at:
  4043 ;;		line 16 in file "main.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;  message         1    wreg     PTR const unsigned char 
  4046 ;;		 -> main@message(43), 
  4047 ;;  polynomial      2    4[COMMON] unsigned short 
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;  message         1    8[BANK0 ] PTR const unsigned char 
  4050 ;;		 -> main@message(43), 
  4051 ;;  i               2    6[BANK0 ] int 
  4052 ;;  byte            1    3[BANK0 ] unsigned char 
  4053 ;;  i               2    4[BANK0 ] unsigned int 
  4054 ;;  counti          2    1[BANK0 ] unsigned int 
  4055 ;;  crc             2    9[BANK0 ] unsigned int 
  4056 ;;  append          1    0        unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  2    4[COMMON] unsigned short 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4067 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4068 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Totals:         5      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;Total ram usage:       16 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    1
  4073 ;; This function calls:
  4074 ;;		_strlen
  4075 ;; This function is called by:
  4076 ;;		_main
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           
  4081                           ;psect for function _crc16
  4082  0396                     _crc16:	
  4083                           
  4084                           ;incstack = 0
  4085                           ; Regs used in _crc16: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4086                           ;crc16@message stored from wreg
  4087  0396  0020               	movlb	0	; select bank0
  4088  0397  00A8               	movwf	crc16@message
  4089                           
  4090                           ;main.c: 17:  unsigned int crc;;main.c: 19:  crc = 0xFFFF;
  4091  0398  30FF               	movlw	255
  4092  0399  00A9               	movwf	crc16@crc
  4093  039A  30FF               	movlw	255
  4094  039B  00AA               	movwf	crc16@crc+1
  4095                           
  4096                           ;main.c: 21:  if (strlen(message) == 0)
  4097  039C  0828               	movf	crc16@message,w
  4098  039D  00F0               	movwf	strlen@s
  4099  039E  3000               	movlw	0
  4100  039F  00F1               	movwf	strlen@s+1
  4101  03A0  3181  2141  3183   	fcall	_strlen
  4102  03A3  0870               	movf	?_strlen,w
  4103  03A4  0471               	iorwf	?_strlen+1,w
  4104  03A5  1D03               	btfss	3,2
  4105  03A6  2BAA               	goto	l1684
  4106                           
  4107                           ;main.c: 22:  {;main.c: 23:   return (~crc);
  4108  03A7  01F4               	clrf	?_crc16
  4109  03A8  01F5               	clrf	?_crc16+1
  4110  03A9  0008               	return
  4111  03AA                     l1684:	
  4112                           
  4113                           ;main.c: 26:  const unsigned short FRONT_BIT = 0x8000;;main.c: 27:  for (unsigned int i 
      +                          = 0, counti = strlen(message); i < counti; i++) {
  4114  03AA  0020               	movlb	0	; select bank0
  4115  03AB  01A4               	clrf	crc16@i
  4116  03AC  01A5               	clrf	crc16@i+1
  4117  03AD  0828               	movf	crc16@message,w
  4118  03AE  00F0               	movwf	strlen@s
  4119  03AF  3000               	movlw	0
  4120  03B0  00F1               	movwf	strlen@s+1
  4121  03B1  3181  2141  3183   	fcall	_strlen
  4122  03B4  0871               	movf	?_strlen+1,w
  4123  03B5  0020               	movlb	0	; select bank0
  4124  03B6  00A2               	movwf	crc16@counti+1
  4125  03B7  0870               	movf	?_strlen,w
  4126  03B8  00A1               	movwf	crc16@counti
  4127  03B9                     l81:	
  4128  03B9  0822               	movf	crc16@counti+1,w
  4129  03BA  0225               	subwf	crc16@i+1,w
  4130  03BB  1D03               	skipz
  4131  03BC  2BBF               	goto	u1565
  4132  03BD  0821               	movf	crc16@counti,w
  4133  03BE  0224               	subwf	crc16@i,w
  4134  03BF                     u1565:	
  4135  03BF  1803               	btfsc	3,0
  4136  03C0  2C00               	goto	l1704
  4137                           
  4138                           ;main.c: 28:   char byte = message[i];
  4139  03C1  0824               	movf	crc16@i,w
  4140  03C2  0728               	addwf	crc16@message,w
  4141  03C3  00F6               	movwf	??_crc16
  4142  03C4  0876               	movf	??_crc16,w
  4143  03C5  0086               	movwf	6
  4144  03C6  0187               	clrf	7
  4145  03C7  0801               	movf	1,w
  4146  03C8  00F7               	movwf	??_crc16+1
  4147  03C9  0877               	movf	??_crc16+1,w
  4148  03CA  00A3               	movwf	crc16@byte
  4149                           
  4150                           ;main.c: 30:   crc = crc ^ ((unsigned short)(byte << 8));
  4151  03CB  0823               	movf	crc16@byte,w
  4152  03CC  00F6               	movwf	??_crc16
  4153  03CD  01F7               	clrf	??_crc16+1
  4154  03CE  0876               	movf	??_crc16,w
  4155  03CF  00F7               	movwf	??_crc16+1
  4156  03D0  01F6               	clrf	??_crc16
  4157  03D1  0829               	movf	crc16@crc,w
  4158  03D2  0676               	xorwf	??_crc16,w
  4159  03D3  00A9               	movwf	crc16@crc
  4160  03D4  082A               	movf	crc16@crc+1,w
  4161  03D5  0677               	xorwf	??_crc16+1,w
  4162  03D6  00AA               	movwf	crc16@crc+1
  4163                           
  4164                           ;main.c: 32:   for (int i = 0; i < 8; i++) {
  4165  03D7  01A6               	clrf	crc16@i_139
  4166  03D8  01A7               	clrf	crc16@i_139+1
  4167  03D9                     l83:	
  4168                           
  4169                           ;main.c: 33:    if ((crc & FRONT_BIT) != 0) {
  4170  03D9  0020               	movlb	0	; select bank0
  4171  03DA  1FAA               	btfss	crc16@crc+1,7
  4172  03DB  2BE8               	goto	l1700
  4173                           
  4174                           ;main.c: 34:     crc = ((unsigned short)(crc << 1)) ^ polynomial;
  4175  03DC  082A               	movf	crc16@crc+1,w
  4176  03DD  00F7               	movwf	??_crc16+1
  4177  03DE  0829               	movf	crc16@crc,w
  4178  03DF  00F6               	movwf	??_crc16
  4179  03E0  35F6               	lslf	??_crc16,f
  4180  03E1  0DF7               	rlf	??_crc16+1,f
  4181  03E2  0874               	movf	crc16@polynomial,w
  4182  03E3  0676               	xorwf	??_crc16,w
  4183  03E4  00A9               	movwf	crc16@crc
  4184  03E5  0875               	movf	crc16@polynomial+1,w
  4185  03E6  0677               	xorwf	??_crc16+1,w
  4186  03E7  2BEB               	goto	L2
  4187  03E8                     l1700:	
  4188                           ;main.c: 35:    }
  4189                           
  4190                           
  4191                           ;main.c: 38:     crc = crc << 1;
  4192  03E8  3529               	lslf	crc16@crc,w
  4193  03E9  00A9               	movwf	crc16@crc
  4194  03EA  0D2A               	rlf	crc16@crc+1,w
  4195  03EB                     L2:	
  4196  03EB  00AA               	movwf	crc16@crc+1
  4197                           
  4198                           ;main.c: 40:   }
  4199                           
  4200                           ;main.c: 39:    }
  4201  03EC  3001               	movlw	1
  4202  03ED  07A6               	addwf	crc16@i_139,f
  4203  03EE  3000               	movlw	0
  4204  03EF  3DA7               	addwfc	crc16@i_139+1,f
  4205  03F0  0827               	movf	crc16@i_139+1,w
  4206  03F1  3A80               	xorlw	128
  4207  03F2  00F6               	movwf	??_crc16
  4208  03F3  3080               	movlw	128
  4209  03F4  0276               	subwf	??_crc16,w
  4210  03F5  3008               	movlw	8
  4211  03F6  1903               	btfsc	3,2
  4212  03F7  0226               	subwf	crc16@i_139,w
  4213  03F8  1C03               	skipc
  4214  03F9  2BD9               	goto	l83
  4215                           
  4216                           ;main.c: 41:  }
  4217  03FA  3001               	movlw	1
  4218  03FB  0020               	movlb	0	; select bank0
  4219  03FC  07A4               	addwf	crc16@i,f
  4220  03FD  3000               	movlw	0
  4221  03FE  3DA5               	addwfc	crc16@i+1,f
  4222  03FF  2BB9               	goto	l81
  4223  0400                     l1704:	
  4224                           
  4225                           ;main.c: 43:  return crc;
  4226  0400  082A               	movf	crc16@crc+1,w
  4227  0401  00F5               	movwf	?_crc16+1
  4228  0402  0829               	movf	crc16@crc,w
  4229  0403  00F4               	movwf	?_crc16
  4230  0404  0008               	return
  4231  0405                     __end_of_crc16:	
  4232                           
  4233                           	psect	text13
  4234  020D                     __ptext13:	
  4235 ;; *************** function _TransmitString *****************
  4236 ;; Defined at:
  4237 ;;		line 78 in file "main.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  message         1    wreg     PTR unsigned char 
  4240 ;;		 -> main@message(43), 
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;  message         1    9[COMMON] PTR unsigned char 
  4243 ;;		 -> main@message(43), 
  4244 ;;  i               2   10[COMMON] int 
  4245 ;;  counti          2    7[COMMON] int 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;Total ram usage:        6 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    2
  4262 ;; This function calls:
  4263 ;;		_TransmitByte
  4264 ;;		_strlen
  4265 ;; This function is called by:
  4266 ;;		_main
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function _TransmitString
  4272  020D                     _TransmitString:	
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _TransmitString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4276                           ;TransmitString@message stored from wreg
  4277  020D  00F9               	movwf	TransmitString@message
  4278                           
  4279                           ;main.c: 78: void TransmitString(char* message);main.c: 79: {;main.c: 80:     for (int i
      +                           = 0, counti = strlen(message); i < counti; i++)
  4280  020E  01FA               	clrf	TransmitString@i
  4281  020F  01FB               	clrf	TransmitString@i+1
  4282  0210  0879               	movf	TransmitString@message,w
  4283  0211  00F0               	movwf	strlen@s
  4284  0212  3000               	movlw	0
  4285  0213  00F1               	movwf	strlen@s+1
  4286  0214  3181  2141  3182   	fcall	_strlen
  4287  0217  0871               	movf	?_strlen+1,w
  4288  0218  00F8               	movwf	TransmitString@counti+1
  4289  0219  0870               	movf	?_strlen,w
  4290  021A  00F7               	movwf	TransmitString@counti
  4291  021B                     l1716:	
  4292  021B  087B               	movf	TransmitString@i+1,w
  4293  021C  3A80               	xorlw	128
  4294  021D  00F6               	movwf	??_TransmitString
  4295  021E  0878               	movf	TransmitString@counti+1,w
  4296  021F  3A80               	xorlw	128
  4297  0220  0276               	subwf	??_TransmitString,w
  4298  0221  1D03               	skipz
  4299  0222  2A25               	goto	u1575
  4300  0223  0877               	movf	TransmitString@counti,w
  4301  0224  027A               	subwf	TransmitString@i,w
  4302  0225                     u1575:	
  4303  0225  1803               	btfsc	3,0
  4304  0226  0008               	return
  4305                           
  4306                           ;main.c: 81:     {;main.c: 82:         TransmitByte(message[i]);
  4307  0227  087A               	movf	TransmitString@i,w
  4308  0228  0779               	addwf	TransmitString@message,w
  4309  0229  00F6               	movwf	??_TransmitString
  4310  022A  0876               	movf	??_TransmitString,w
  4311  022B  0086               	movwf	6
  4312  022C  0187               	clrf	7
  4313  022D  0801               	movf	1,w
  4314  022E  3181  2186  3182   	fcall	_TransmitByte
  4315                           
  4316                           ;main.c: 83:     }
  4317  0231  3001               	movlw	1
  4318  0232  07FA               	addwf	TransmitString@i,f
  4319  0233  3000               	movlw	0
  4320  0234  3DFB               	addwfc	TransmitString@i+1,f
  4321  0235  2A1B               	goto	l1716
  4322  0236                     __end_of_TransmitString:	
  4323                           
  4324                           	psect	text14
  4325  0186                     __ptext14:	
  4326 ;; *************** function _TransmitByte *****************
  4327 ;; Defined at:
  4328 ;;		line 62 in file "main.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  byte            1    wreg     unsigned char 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  byte            1    3[COMMON] unsigned char 
  4333 ;;  i               2    4[COMMON] int 
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, status,2, status,0, pclath, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;Total ram usage:        4 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    1
  4350 ;; This function calls:
  4351 ;;		_TransmitBit
  4352 ;; This function is called by:
  4353 ;;		_TransmitString
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           
  4358                           ;psect for function _TransmitByte
  4359  0186                     _TransmitByte:	
  4360                           
  4361                           ;incstack = 0
  4362                           ; Regs used in _TransmitByte: [wreg+status,2+status,0+pclath+cstack]
  4363                           ;TransmitByte@byte stored from wreg
  4364  0186  00F3               	movwf	TransmitByte@byte
  4365                           
  4366                           ;main.c: 62: void TransmitByte(char byte);main.c: 63: {;main.c: 64:     for (int i = 0; 
      +                          i < 8; i++)
  4367  0187  01F4               	clrf	TransmitByte@i
  4368  0188  01F5               	clrf	TransmitByte@i+1
  4369  0189                     l101:	
  4370                           
  4371                           ;main.c: 65:     {;main.c: 66:         if (byte & 1)
  4372  0189  1C73               	btfss	TransmitByte@byte,0
  4373  018A  298D               	goto	l1418
  4374                           
  4375                           ;main.c: 67:         {;main.c: 68:             TransmitBit(1);
  4376  018B  3001               	movlw	1
  4377  018C  298E               	goto	L3
  4378  018D                     l1418:	
  4379                           ;main.c: 69:         }
  4380                           
  4381                           
  4382                           ;main.c: 71:         {;main.c: 72:             TransmitBit(0);
  4383  018D  3000               	movlw	0
  4384  018E                     L3:	
  4385  018E  3181  2158  3181   	fcall	_TransmitBit
  4386                           
  4387                           ;main.c: 75:     }
  4388  0191  3001               	movlw	1
  4389  0192  07F4               	addwf	TransmitByte@i,f
  4390  0193  3000               	movlw	0
  4391  0194  3DF5               	addwfc	TransmitByte@i+1,f
  4392  0195  0875               	movf	TransmitByte@i+1,w
  4393  0196  3A80               	xorlw	128
  4394  0197  00F2               	movwf	??_TransmitByte
  4395  0198  3080               	movlw	128
  4396  0199  0272               	subwf	??_TransmitByte,w
  4397  019A  3008               	movlw	8
  4398  019B  1903               	btfsc	3,2
  4399  019C  0274               	subwf	TransmitByte@i,w
  4400  019D  1803               	btfsc	3,0
  4401  019E  0008               	return
  4402  019F  2989               	goto	l101
  4403  01A0                     __end_of_TransmitByte:	
  4404                           
  4405                           	psect	text15
  4406  0158                     __ptext15:	
  4407 ;; *************** function _TransmitBit *****************
  4408 ;; Defined at:
  4409 ;;		line 48 in file "main.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  b               1    wreg     _Bool 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;  b               1    1[COMMON] _Bool 
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  1    wreg      void 
  4416 ;; Registers used:
  4417 ;;		wreg, status,2, status,0
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4426 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4427 ;;Total ram usage:        2 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; This function calls:
  4430 ;;		Nothing
  4431 ;; This function is called by:
  4432 ;;		_TransmitByte
  4433 ;;		_main
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           
  4438                           ;psect for function _TransmitBit
  4439  0158                     _TransmitBit:	
  4440                           
  4441                           ;incstack = 0
  4442                           ; Regs used in _TransmitBit: [wreg+status,2+status,0]
  4443                           ;TransmitBit@b stored from wreg
  4444  0158  00F1               	movwf	TransmitBit@b
  4445                           
  4446                           ;main.c: 48: void TransmitBit(_Bool b);main.c: 49: {;main.c: 50:     if (b)
  4447  0159  0871               	movf	TransmitBit@b,w
  4448  015A  1903               	btfsc	3,2
  4449  015B  295F               	goto	l96
  4450                           
  4451                           ;main.c: 51:     {;main.c: 52:         do { LATAbits.LATA4 = 1; } while(0);
  4452  015C  0022               	movlb	2	; select bank2
  4453  015D  160C               	bsf	12,4	;volatile
  4454  015E  2961               	goto	l1336
  4455  015F                     l96:	
  4456                           ;main.c: 55:     {;main.c: 56:         do { LATAbits.LATA4 = 0; } while(0);
  4457                           
  4458  015F  0022               	movlb	2	; select bank2
  4459  0160  120C               	bcf	12,4	;volatile
  4460  0161                     l1336:	
  4461                           
  4462                           ;main.c: 58:     _delay((unsigned long)((BAUD_DELAY)*(4000000/4000.0)));
  4463  0161  301A               	movlw	26
  4464  0162  00F0               	movwf	??_TransmitBit
  4465  0163  30F8               	movlw	248
  4466  0164                     u1617:	
  4467  0164  0B89               	decfsz	9,f
  4468  0165  2964               	goto	u1617
  4469  0166  0BF0               	decfsz	??_TransmitBit,f
  4470  0167  2964               	goto	u1617
  4471  0168  3200               	nop2
  4472                           
  4473                           ;main.c: 59:     transmission_time += BAUD_DELAY;
  4474  0169  3014               	movlw	20
  4475  016A  0021               	movlb	1	; select bank1
  4476  016B  07DC               	addwf	_transmission_time^(0+128),f
  4477  016C  3000               	movlw	0
  4478  016D  3DDD               	addwfc	(_transmission_time+1)^(0+128),f
  4479  016E  0008               	return
  4480  016F                     __end_of_TransmitBit:	
  4481                           
  4482                           	psect	text16
  4483  012E                     __ptext16:	
  4484 ;; *************** function _SYSTEM_Initialize *****************
  4485 ;; Defined at:
  4486 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;		None
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;		None
  4491 ;; Return value:  Size  Location     Type
  4492 ;;                  1    wreg      void 
  4493 ;; Registers used:
  4494 ;;		wreg, status,2, status,0, pclath, cstack
  4495 ;; Tracked objects:
  4496 ;;		On entry : 0/0
  4497 ;;		On exit  : 0/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;Total ram usage:        0 bytes
  4505 ;; Hardware stack levels used:    1
  4506 ;; Hardware stack levels required when called:    1
  4507 ;; This function calls:
  4508 ;;		_OSCILLATOR_Initialize
  4509 ;;		_PIN_MANAGER_Initialize
  4510 ;; This function is called by:
  4511 ;;		_main
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _SYSTEM_Initialize
  4517  012E                     _SYSTEM_Initialize:	
  4518                           
  4519                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4523  012E  3181  21C3  3181   	fcall	_PIN_MANAGER_Initialize
  4524                           
  4525                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
  4526  0131  3181  213A         	fcall	_OSCILLATOR_Initialize
  4527  0133  0008               	return
  4528  0134                     __end_of_SYSTEM_Initialize:	
  4529                           
  4530                           	psect	text17
  4531  01C3                     __ptext17:	
  4532 ;; *************** function _PIN_MANAGER_Initialize *****************
  4533 ;; Defined at:
  4534 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;		None
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      void 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;Total ram usage:        0 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; This function calls:
  4555 ;;		Nothing
  4556 ;; This function is called by:
  4557 ;;		_SYSTEM_Initialize
  4558 ;;		_main
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _PIN_MANAGER_Initialize
  4564  01C3                     _PIN_MANAGER_Initialize:	
  4565                           
  4566                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4570  01C3  0022               	movlb	2	; select bank2
  4571  01C4  018C               	clrf	12	;volatile
  4572                           
  4573                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
  4574  01C5  018D               	clrf	13	;volatile
  4575                           
  4576                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
  4577  01C6  018E               	clrf	14	;volatile
  4578                           
  4579                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x27;
  4580  01C7  3027               	movlw	39
  4581  01C8  0021               	movlb	1	; select bank1
  4582  01C9  008C               	movwf	12	;volatile
  4583                           
  4584                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xF0;
  4585  01CA  30F0               	movlw	240
  4586  01CB  008D               	movwf	13	;volatile
  4587                           
  4588                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xFF;
  4589  01CC  30FF               	movlw	255
  4590  01CD  008E               	movwf	14	;volatile
  4591                           
  4592                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0xCF;
  4593  01CE  30CF               	movlw	207
  4594  01CF  0023               	movlb	3	; select bank3
  4595  01D0  008E               	movwf	14	;volatile
  4596                           
  4597                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0xF0;
  4598  01D1  30F0               	movlw	240
  4599  01D2  008D               	movwf	13	;volatile
  4600                           
  4601                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x07;
  4602  01D3  3007               	movlw	7
  4603  01D4  008C               	movwf	12	;volatile
  4604                           
  4605                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  4606  01D5  0024               	movlb	4	; select bank4
  4607  01D6  018D               	clrf	13	;volatile
  4608                           
  4609                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
  4610  01D7  018C               	clrf	12	;volatile
  4611                           
  4612                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
  4613  01D8  018E               	clrf	14	;volatile
  4614                           
  4615                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 1;
  4616  01D9  0021               	movlb	1	; select bank1
  4617  01DA  1795               	bsf	21,7	;volatile
  4618                           
  4619                           ;mcc_generated_files/pin_manager.c: 91:     ODCONA = 0x00;
  4620  01DB  0025               	movlb	5	; select bank5
  4621  01DC  018C               	clrf	12	;volatile
  4622                           
  4623                           ;mcc_generated_files/pin_manager.c: 92:     ODCONB = 0x00;
  4624  01DD  018D               	clrf	13	;volatile
  4625                           
  4626                           ;mcc_generated_files/pin_manager.c: 93:     ODCONC = 0x00;
  4627  01DE  018E               	clrf	14	;volatile
  4628                           
  4629                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONA = 0x37;
  4630  01DF  3037               	movlw	55
  4631  01E0  0026               	movlb	6	; select bank6
  4632  01E1  008C               	movwf	12	;volatile
  4633                           
  4634                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONB = 0xF0;
  4635  01E2  30F0               	movlw	240
  4636  01E3  008D               	movwf	13	;volatile
  4637                           
  4638                           ;mcc_generated_files/pin_manager.c: 100:     SLRCONC = 0xFF;
  4639  01E4  30FF               	movlw	255
  4640  01E5  008E               	movwf	14	;volatile
  4641  01E6  0008               	return
  4642  01E7                     __end_of_PIN_MANAGER_Initialize:	
  4643                           
  4644                           	psect	text18
  4645  013A                     __ptext18:	
  4646 ;; *************** function _OSCILLATOR_Initialize *****************
  4647 ;; Defined at:
  4648 ;;		line 56 in file "mcc_generated_files/mcc.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;		None
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;		None
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;Total ram usage:        0 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; This function calls:
  4669 ;;		Nothing
  4670 ;; This function is called by:
  4671 ;;		_SYSTEM_Initialize
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           
  4676                           ;psect for function _OSCILLATOR_Initialize
  4677  013A                     _OSCILLATOR_Initialize:	
  4678                           
  4679                           ;mcc_generated_files/mcc.c: 59:     OSCCON = 0x68;
  4680                           
  4681                           ;incstack = 0
  4682                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4683  013A  3068               	movlw	104
  4684  013B  0021               	movlb	1	; select bank1
  4685  013C  0099               	movwf	25	;volatile
  4686                           
  4687                           ;mcc_generated_files/mcc.c: 61:     OSCTUNE = 0x00;
  4688  013D  0198               	clrf	24	;volatile
  4689                           
  4690                           ;mcc_generated_files/mcc.c: 63:     BORCON = 0x00;
  4691  013E  0022               	movlb	2	; select bank2
  4692  013F  0196               	clrf	22	;volatile
  4693  0140  0008               	return
  4694  0141                     __end_of_OSCILLATOR_Initialize:	
  4695                           
  4696                           	psect	text19
  4697  0265                     __ptext19:	
  4698 ;; *************** function _AppendCRC *****************
  4699 ;; Defined at:
  4700 ;;		line 87 in file "main.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  data            1    wreg     PTR unsigned char 
  4703 ;;		 -> main@message(43), 
  4704 ;;  crc             2    9[COMMON] unsigned short 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  data            1   11[BANK0 ] PTR unsigned char 
  4707 ;;		 -> main@message(43), 
  4708 ;;  len             2   12[BANK0 ] int 
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      void 
  4711 ;; Registers used:
  4712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;Total ram usage:        7 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    1
  4725 ;; This function calls:
  4726 ;;		_strlen
  4727 ;; This function is called by:
  4728 ;;		_main
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           
  4733                           ;psect for function _AppendCRC
  4734  0265                     _AppendCRC:	
  4735                           
  4736                           ;incstack = 0
  4737                           ; Regs used in _AppendCRC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4738                           ;AppendCRC@data stored from wreg
  4739  0265  0020               	movlb	0	; select bank0
  4740  0266  00AB               	movwf	AppendCRC@data
  4741                           
  4742                           ;main.c: 87: void AppendCRC(char* data, unsigned short crc);main.c: 88: {;main.c: 89:   
      +                            int len = strlen(data);
  4743  0267  082B               	movf	AppendCRC@data,w
  4744  0268  00F0               	movwf	strlen@s
  4745  0269  3000               	movlw	0
  4746  026A  00F1               	movwf	strlen@s+1
  4747  026B  3181  2141  3182   	fcall	_strlen
  4748  026E  0871               	movf	?_strlen+1,w
  4749  026F  0020               	movlb	0	; select bank0
  4750  0270  00AD               	movwf	AppendCRC@len+1
  4751  0271  0870               	movf	?_strlen,w
  4752  0272  00AC               	movwf	AppendCRC@len
  4753                           
  4754                           ;main.c: 90:     if (len >= 40 - 1)
  4755  0273  082D               	movf	AppendCRC@len+1,w
  4756  0274  3A80               	xorlw	128
  4757  0275  00FB               	movwf	??_AppendCRC
  4758  0276  3080               	movlw	128
  4759  0277  027B               	subwf	??_AppendCRC,w
  4760  0278  1D03               	skipz
  4761  0279  2A7C               	goto	u1585
  4762  027A  3027               	movlw	39
  4763  027B  022C               	subwf	AppendCRC@len,w
  4764  027C                     u1585:	
  4765  027C  1C03               	skipc
  4766  027D  2A83               	goto	l1724
  4767                           
  4768                           ;main.c: 91:     {;main.c: 93:         len = 40 - 2;
  4769  027E  3026               	movlw	38
  4770  027F  0020               	movlb	0	; select bank0
  4771  0280  00AC               	movwf	AppendCRC@len
  4772  0281  3000               	movlw	0
  4773  0282  00AD               	movwf	AppendCRC@len+1
  4774  0283                     l1724:	
  4775                           
  4776                           ;main.c: 95:     data[len] = (char)(crc << 8);
  4777  0283  0020               	movlb	0	; select bank0
  4778  0284  082C               	movf	AppendCRC@len,w
  4779  0285  072B               	addwf	AppendCRC@data,w
  4780  0286  00FB               	movwf	??_AppendCRC
  4781  0287  087B               	movf	??_AppendCRC,w
  4782  0288  0086               	movwf	6
  4783  0289  0187               	clrf	7
  4784  028A  0181               	clrf	1
  4785                           
  4786                           ;main.c: 96:     data[len + 1] = (char)(crc);
  4787  028B  0879               	movf	AppendCRC@crc,w
  4788  028C  00FB               	movwf	??_AppendCRC
  4789  028D  082C               	movf	AppendCRC@len,w
  4790  028E  072B               	addwf	AppendCRC@data,w
  4791  028F  00FC               	movwf	??_AppendCRC+1
  4792  0290  0A7C               	incf	??_AppendCRC+1,w
  4793  0291  0086               	movwf	6
  4794  0292  0187               	clrf	7
  4795  0293  087B               	movf	??_AppendCRC,w
  4796  0294  0081               	movwf	1
  4797                           
  4798                           ;main.c: 97:     data[len + 2] = '\n';
  4799  0295  300A               	movlw	10
  4800  0296  00FB               	movwf	??_AppendCRC
  4801  0297  082C               	movf	AppendCRC@len,w
  4802  0298  072B               	addwf	AppendCRC@data,w
  4803  0299  00FC               	movwf	??_AppendCRC+1
  4804  029A  087C               	movf	??_AppendCRC+1,w
  4805  029B  3E02               	addlw	2
  4806  029C  0086               	movwf	6
  4807  029D  0187               	clrf	7
  4808  029E  087B               	movf	??_AppendCRC,w
  4809  029F  0081               	movwf	1
  4810                           
  4811                           ;main.c: 98:     data[len + 3] = '\0';
  4812  02A0  082C               	movf	AppendCRC@len,w
  4813  02A1  072B               	addwf	AppendCRC@data,w
  4814  02A2  00FB               	movwf	??_AppendCRC
  4815  02A3  087B               	movf	??_AppendCRC,w
  4816  02A4  3E03               	addlw	3
  4817  02A5  0086               	movwf	6
  4818  02A6  0187               	clrf	7
  4819  02A7  0181               	clrf	1
  4820  02A8  0008               	return
  4821  02A9                     __end_of_AppendCRC:	
  4822                           
  4823                           	psect	text20
  4824  0141                     __ptext20:	
  4825 ;; *************** function _strlen *****************
  4826 ;; Defined at:
  4827 ;;		line 12 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strlen.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  s               2    0[COMMON] PTR const unsigned char 
  4830 ;;		 -> dbuf(32), main@message(43), 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;  a               2    2[COMMON] PTR const unsigned char 
  4833 ;;		 -> dbuf(32), main@message(43), 
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  2    0[COMMON] unsigned int 
  4836 ;; Registers used:
  4837 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4843 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;Total ram usage:        4 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_crc16
  4853 ;;		_TransmitString
  4854 ;;		_AppendCRC
  4855 ;;		_pad
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           
  4860                           ;psect for function _strlen
  4861  0141                     _strlen:	
  4862                           
  4863                           ;incstack = 0
  4864                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  4865  0141  0871               	movf	strlen@s+1,w
  4866  0142  00F3               	movwf	strlen@a+1
  4867  0143  0870               	movf	strlen@s,w
  4868  0144  00F2               	movwf	strlen@a
  4869  0145                     l1534:	
  4870  0145  0870               	movf	strlen@s,w
  4871  0146  0086               	movwf	6
  4872  0147  0871               	movf	strlen@s+1,w
  4873  0148  0087               	movwf	7
  4874  0149  0801               	movf	1,w
  4875  014A  1903               	btfsc	3,2
  4876  014B  2951               	goto	l1536
  4877  014C  3001               	movlw	1
  4878  014D  07F0               	addwf	strlen@s,f
  4879  014E  3000               	movlw	0
  4880  014F  3DF1               	addwfc	strlen@s+1,f
  4881  0150  2945               	goto	l1534
  4882  0151                     l1536:	
  4883  0151  0872               	movf	strlen@a,w
  4884  0152  0270               	subwf	strlen@s,w
  4885  0153  00F0               	movwf	?_strlen
  4886  0154  0873               	movf	strlen@a+1,w
  4887  0155  3B71               	subwfb	strlen@s+1,w
  4888  0156  00F1               	movwf	?_strlen+1
  4889  0157  0008               	return
  4890  0158                     __end_of_strlen:	
  4891  007E                     btemp	set	126	;btemp
  4892  007E                     wtemp0	set	126


Data Sizes:
    Strings     46
    Constant    4
    Data        0
    BSS         42
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      79
    BANK1            80     56      62
    BANK2            80      0      32
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 43
		 -> dbuf(BANK2[32]), main@message(BANK1[43]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 43
		 -> dbuf(BANK2[32]), main@message(BANK1[43]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_1(CODE[46]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    S549_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_1(CODE[46]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 46
		 -> STR_1(CODE[46]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    AppendCRC@data	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    TransmitString@message	PTR unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 

    crc16@message	PTR const unsigned char  size(1) Largest target is 43
		 -> main@message(BANK1[43]), 


Critical Paths under _main in COMMON

    _main->_sprintf
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _crc16->_strlen
    _TransmitString->_TransmitByte
    _TransmitByte->_TransmitBit
    _AppendCRC->_crc16

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _dtoa->___aomod
    _pad->_fputs
    _abs->___aomod
    _AppendCRC->_crc16

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                48    48      0    9788
                                             74 BANK0      1     1      0
                                              9 BANK1     47    47      0
                          _AppendCRC
             _PIN_MANAGER_Initialize
                  _SYSTEM_Initialize
                        _TransmitBit
                     _TransmitString
                              _crc16
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             14    10      4    7084
                                             13 COMMON     1     1      0
                                             70 BANK0      4     0      4
                                              0 BANK1      9     9      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    6652
                                             62 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    6233
                                             46 BANK0     16    14      2
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                30    22      8    4715
                                             16 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2882
                                             12 COMMON     1     1      0
                                              4 BANK0      8     5      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1149
                                              8 COMMON     4     3      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     834
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              3 COMMON     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             19     3     16     448
                                              0 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             27    11     16     452
                                              0 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (1) _crc16                                               16    14      2     985
                                              4 COMMON     5     3      2
                                              0 BANK0     11    11      0
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _TransmitString                                       6     6      0     620
                                              6 COMMON     6     6      0
                       _TransmitByte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _TransmitByte                                         4     4      0      90
                                              2 COMMON     4     4      0
                        _TransmitBit
 ---------------------------------------------------------------------------------
 (3) _TransmitBit                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AppendCRC                                            7     5      2     803
                                              9 COMMON     4     2      2
                                             11 BANK0      3     3      0
                              _crc16 (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     330
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AppendCRC
     _crc16 (ARG)
       _strlen
     _strlen (ARG)
   _PIN_MANAGER_Initialize
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _TransmitBit
   _TransmitString
     _TransmitByte
       _TransmitBit
     _strlen
   _crc16
     _strlen
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     38      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      20       9       40.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BB      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BB      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Apr 26 20:38:06 2019

                    __CFG_CP$OFF 0000                               l81 03B9                               l83 03D9  
                             l96 015F                      __CFG_LVP$ON 0000                              l101 0189  
                            l230 0719                              l216 0304                              l224 06EA  
                            l233 07AE                              l225 06F1                              l219 0324  
                            l229 0707                              l365 0692                              l378 059F  
                            u825 0652                              u745 0178                              u675 02D3  
                            u925 0560                              u790 060D                              _abs 016F  
                            _pad 02EE                  crc16@polynomial 0074                     __CFG_BORV$LO 0000  
                            wreg 0009                     __CFG_IESO$ON 0000                     __CFG_ZCD$OFF 0000  
                           ?_abs 0073                             l1220 0606                             l1230 061D  
                           l1214 05DB                             l1240 0665                             l1232 062C  
                           l1242 0671                             l1218 0602                             l1154 02B2  
                           l1252 04FF                             l1180 01EB                             l1270 0572  
                           l1158 02D5                             l1336 0161                             l1264 0533  
                           l1272 057E                             l1256 0526                             l1418 018D  
                           l1266 0542                             l1602 07BA                             l1700 03E8  
                           l1612 07CB                             l1534 0145                             l1606 07C1  
                           l1536 0151                             l1704 0400                             l1544 02FA  
                           l1616 07D8                             l1640 0480                             l1632 0446  
                           l1554 0306                             l1650 04A7                             l1724 0283  
                           l1716 021B                             l1548 0302                             l1580 0715  
                           l1558 032F                             l1574 0702                             l1646 04A1  
                           l1670 023F                             l1584 0745                             l1656 04B2  
                           l1672 025C                             l1594 0720                             l1684 03AA  
                           l1764 0378                             l1748 0347                             ?_pad 0024  
                           STR_1 0802                             u1320 06C0                             u1305 0310  
                           u1330 06C1                             u1405 07B8                             _LATA 010C  
                           _LATB 010D                             _LATC 010E                             u1425 0734  
                           u1435 0740                             u1375 06FA                             u1607 037C  
                           u1617 0164                             u1565 03BF                             u1575 0225  
                           u1585 027C                             u1595 0390                             _WPUA 020C  
                           _WPUB 020D                             _WPUC 020E                      main@message 00A9  
                   __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000                             abs@a 0073  
                           _dbuf 0120                             _main 033E                             _dtoa 06A4  
                           _prec 006B                     TransmitBit@b 0071                             _nout 00D8  
                           pad@i 0027                             pad@p 0025                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             pad@w 0029  
                           btemp 007E                    __CFG_BOREN$ON 0000                             start 0002  
                  __CFG_MCLRE$ON 0000                            ??_abs 0075                            ??_pad 007C  
 __size_of_OSCILLATOR_Initialize 0007    __end_of_OSCILLATOR_Initialize 0141                  __end_of___aodiv 06A4  
                          ?_main 0070                            ?_dtoa 0030                  __end_of___aomod 05B1  
                  __CFG_WDTE$OFF 0000                     vfpfcnvrt@fmt 004E                            _TRISA 008C  
                          _TRISB 008D                            _TRISC 008E                            u76lld 05D9  
                          u87lld 04FD                            _crc16 0396                            _flags 006D  
                          _fputc 02A9                            _fputs 01E7                            pad@fp 002B  
                          _width 00DA                            _putch 012D                            main@i 00D6  
                          dtoa@d 0030                            dtoa@i 004C                            dtoa@n 0044  
                          dtoa@p 003E                            dtoa@s 0042                            dtoa@w 0040  
                  TransmitByte@i 0074                            status 0003                            wtemp0 007E  
                __end_of_sprintf 01C3                  __initialization 07EA                     __end_of_main 0396  
                   __end_of_dtoa 07EA                   __CFG_LPBOR$OFF 0000                           ??_main 006A  
                         ??_dtoa 0038               __size_of_AppendCRC 0044                   __CFG_PLLEN$OFF 0000  
                         ?_crc16 0074                           ?_fputc 0070                           ?_fputs 0078  
                         _ANSELA 018C                           ?_putch 0070                           _ANSELB 018D  
                         _ANSELC 018E                           _BORCON 0116                           _ODCONA 028C  
                         _ODCONB 028D                           _ODCONC 028E                           _OSCCON 0099  
                 __CFG_PWRTE$OFF 0000                     vfprintf@cfmt 0064                        ??___aodiv 0070  
                      ??___aomod 0070                           crc16@i 0024                   __CFG_STVREN$ON 0000  
                         pad@buf 0024                           main@id 00D4                           dtoa@fp 003B  
                         _strlen 0141               __end_of_BAUD_DELAY 0802                           fputc@c 0070  
                         fputs@c 0020                           fputs@i 0021                           fputs@s 0023  
               ??_TransmitString 0076                           putch@c 0070                 __end_of_vfprintf 0265  
                      ??_sprintf 007D                     crc16@message 0028                _SYSTEM_Initialize 012E  
        __end_of__initialization 07FD               ?_SYSTEM_Initialize 0070                __end_of_AppendCRC 02A9  
                 __pcstackCOMMON 0070                    __end_of_crc16 0405              ??_SYSTEM_Initialize 0070  
                  __end_of_fputc 02EE                    __end_of_fputs 020D                    ??_TransmitBit 0070  
                  __end_of_putch 012E                   _OPTION_REGbits 0095                       crc16@i_139 0026  
                        ??_crc16 0076                          ??_fputc 0073        __end_of_SYSTEM_Initialize 0134  
                        ??_fputs 0079                          ??_putch 0070                       __pbssBANK0 006B  
                     __pbssBANK1 00D8                       __pbssBANK2 0120                       __pmaintext 033E  
                __CFG_PPS1WAY$ON 0000                          ?_strlen 0070                  __CFG_WDTCCS$SWC 0000  
            __end_of_TransmitBit 016F               __size_of_vfpfcnvrt 00D0                          _OSCTUNE 0098  
                        _SLRCONA 030C                          _SLRCONB 030D                          _SLRCONC 030E  
                        ___aodiv 05B1                          ___aomod 04D5                        ?_vfprintf 005E  
                        __ptext1 01A0                          __ptext2 0236                          __ptext3 0405  
                        __ptext4 06A4                          __ptext5 02EE                          __ptext6 01E7  
                        __ptext7 02A9                          __ptext8 012D                          __ptext9 016F  
                __size_of_strlen 0017            _OSCILLATOR_Initialize 013A                     __size_of_abs 0017  
                   __size_of_pad 0050         ??_PIN_MANAGER_Initialize 0070       __size_of_SYSTEM_Initialize 0006  
                        _sprintf 01A0                          clrloop0 0135             end_of_initialization 07FD  
                        fputc@fp 0072                          fputs@fp 0078                __end_of_vfpfcnvrt 04D5  
                     ??_vfprintf 0061                      _TransmitBit 0158                          strlen@a 0072  
                        strlen@s 0070                  TransmitString@i 007A                    ?_TransmitByte 0070  
               __CFG_FOSC$INTOSC 0000            TransmitString@message 0079                        _AppendCRC 0265  
                    vfpfcnvrt@ap 004F                      vfpfcnvrt@fp 005D                      vfpfcnvrt@ll 0055  
                  AppendCRC@data 002B           ?_OSCILLATOR_Initialize 0070                   ??_TransmitByte 0072  
                 __end_of_strlen 0158              start_initialization 07EA  __size_of_PIN_MANAGER_Initialize 0024  
                    __end_of_abs 0186                      __end_of_pad 033E                _transmission_time 00DC  
                    vfprintf@fmt 005E                       ?_AppendCRC 0079                      crc16@counti 0021  
                       ??_strlen 0072                        ___latbits 0002                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                 ___aodiv@dividend 0028                        crc16@byte 0023  
        __size_of_TransmitString 0029           _PIN_MANAGER_Initialize 01C3                         ?___aodiv 0020  
                       ?___aomod 0020                 ___aodiv@quotient 0073                __size_of_vfprintf 002F  
                 __size_of_crc16 006F                         ?_sprintf 0066                   __size_of_fputc 0045  
                 __size_of_fputs 0026                   crc16@FRONT_BIT 0830                   __size_of_putch 0001  
                       _LATAbits 010C                        clear_ram0 0134             __end_of_TransmitByte 01A0  
           __CFG_WDTCPS$WDTCPS1F 0000                      ??_AppendCRC 007B                     ?_TransmitBit 0070  
                      _vfpfcnvrt 0405             TransmitString@counti 0077           __end_ofcrc16@FRONT_BIT 0832  
                   AppendCRC@crc 0079                     AppendCRC@len 002C                       _BAUD_DELAY 0800  
                     vfprintf@ap 0060                       vfprintf@fp 0063          ??_OSCILLATOR_Initialize 0070  
               __size_of___aodiv 00F3                 __size_of___aomod 00DC                       ?_vfpfcnvrt 004E  
                ___aodiv@divisor 0020                  ___aodiv@counter 0071                       sprintf@fmt 0066  
                       crc16@crc 0029                         _dtoa$250 003C                         __ptext10 04D5  
                       __ptext11 05B1                         __ptext20 0141                         __ptext12 0396  
                       __ptext13 020D                         __ptext14 0186                         __ptext15 0158  
                       __ptext16 012E                         __ptext17 01C3                         __ptext18 013A  
                       __ptext19 0265                 __size_of_sprintf 0023                   _TransmitString 020D  
                  __size_of_main 0058                    __size_of_dtoa 0146             __CFG_WDTCWS$WDTCWSSW 0000  
                       _vfprintf 0236                 ___aomod@dividend 0028           __end_of_TransmitString 0236  
          __size_of_TransmitByte 001A                        sprintf@ap 00A2                 TransmitByte@byte 0073  
        ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000                  ___aomod@divisor 0020  
                    ??_vfpfcnvrt 0050                  ___aomod@counter 0071                    __pstringtext1 0830  
                  __pstringtext2 0800                    __pstringtext3 0000             __size_of_TransmitBit 0017  
                       sprintf@f 00A4                         sprintf@s 00A3                     _TransmitByte 0186  
                   ___aodiv@sign 0072                  ?_TransmitString 0070   __end_of_PIN_MANAGER_Initialize 01E7  
                   ___aomod@sign 0072  
