

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Aug 31 19:03:13 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    13                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	intentry,global,class=CODE,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text23_split_1,local,class=CODE,merge=1,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.05
    71                           ; Generated 20/12/2018 GMT
    72                           ; 
    73                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F1619 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  008C                     	;# 
   139  008D                     	;# 
   140  008E                     	;# 
   141  0090                     	;# 
   142  0091                     	;# 
   143  0092                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009A                     	;# 
   151  009B                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  0111                     	;# 
   161  0112                     	;# 
   162  0113                     	;# 
   163  0114                     	;# 
   164  0115                     	;# 
   165  0116                     	;# 
   166  0117                     	;# 
   167  0118                     	;# 
   168  0119                     	;# 
   169  011C                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  018E                     	;# 
   173  0191                     	;# 
   174  0191                     	;# 
   175  0192                     	;# 
   176  0193                     	;# 
   177  0193                     	;# 
   178  0194                     	;# 
   179  0195                     	;# 
   180  0196                     	;# 
   181  0197                     	;# 
   182  0199                     	;# 
   183  0199                     	;# 
   184  0199                     	;# 
   185  019A                     	;# 
   186  019A                     	;# 
   187  019A                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019C                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019D                     	;# 
   197  019D                     	;# 
   198  019D                     	;# 
   199  019E                     	;# 
   200  019E                     	;# 
   201  019E                     	;# 
   202  019F                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  020C                     	;# 
   208  020D                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  028C                     	;# 
   227  028D                     	;# 
   228  028E                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0294                     	;# 
   234  0298                     	;# 
   235  0298                     	;# 
   236  0299                     	;# 
   237  029A                     	;# 
   238  029B                     	;# 
   239  029E                     	;# 
   240  030C                     	;# 
   241  030D                     	;# 
   242  030E                     	;# 
   243  038C                     	;# 
   244  038D                     	;# 
   245  038E                     	;# 
   246  0391                     	;# 
   247  0392                     	;# 
   248  0393                     	;# 
   249  0394                     	;# 
   250  0395                     	;# 
   251  0396                     	;# 
   252  0397                     	;# 
   253  0398                     	;# 
   254  0399                     	;# 
   255  040E                     	;# 
   256  0413                     	;# 
   257  0413                     	;# 
   258  0414                     	;# 
   259  0414                     	;# 
   260  0415                     	;# 
   261  0416                     	;# 
   262  0417                     	;# 
   263  0418                     	;# 
   264  041A                     	;# 
   265  041A                     	;# 
   266  041B                     	;# 
   267  041B                     	;# 
   268  041C                     	;# 
   269  041D                     	;# 
   270  041E                     	;# 
   271  041F                     	;# 
   272  0493                     	;# 
   273  0494                     	;# 
   274  0495                     	;# 
   275  0496                     	;# 
   276  049A                     	;# 
   277  049B                     	;# 
   278  049C                     	;# 
   279  049D                     	;# 
   280  058C                     	;# 
   281  058C                     	;# 
   282  058D                     	;# 
   283  058E                     	;# 
   284  058E                     	;# 
   285  058F                     	;# 
   286  0590                     	;# 
   287  0590                     	;# 
   288  0591                     	;# 
   289  0592                     	;# 
   290  0592                     	;# 
   291  0593                     	;# 
   292  0594                     	;# 
   293  0594                     	;# 
   294  0595                     	;# 
   295  0596                     	;# 
   296  0596                     	;# 
   297  0597                     	;# 
   298  0598                     	;# 
   299  0599                     	;# 
   300  059A                     	;# 
   301  059B                     	;# 
   302  059B                     	;# 
   303  059C                     	;# 
   304  059D                     	;# 
   305  060C                     	;# 
   306  060C                     	;# 
   307  060D                     	;# 
   308  060E                     	;# 
   309  060F                     	;# 
   310  060F                     	;# 
   311  0610                     	;# 
   312  0611                     	;# 
   313  0612                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0617                     	;# 
   317  0617                     	;# 
   318  0618                     	;# 
   319  0619                     	;# 
   320  061A                     	;# 
   321  061A                     	;# 
   322  061B                     	;# 
   323  061C                     	;# 
   324  0691                     	;# 
   325  0692                     	;# 
   326  0693                     	;# 
   327  0694                     	;# 
   328  0695                     	;# 
   329  0696                     	;# 
   330  0697                     	;# 
   331  0699                     	;# 
   332  069A                     	;# 
   333  0711                     	;# 
   334  0712                     	;# 
   335  0713                     	;# 
   336  0714                     	;# 
   337  0715                     	;# 
   338  0718                     	;# 
   339  0718                     	;# 
   340  0719                     	;# 
   341  071A                     	;# 
   342  071A                     	;# 
   343  071B                     	;# 
   344  071C                     	;# 
   345  071D                     	;# 
   346  0791                     	;# 
   347  0791                     	;# 
   348  0792                     	;# 
   349  0793                     	;# 
   350  0793                     	;# 
   351  0794                     	;# 
   352  0795                     	;# 
   353  0795                     	;# 
   354  0796                     	;# 
   355  0797                     	;# 
   356  0797                     	;# 
   357  0798                     	;# 
   358  0799                     	;# 
   359  079A                     	;# 
   360  080C                     	;# 
   361  080C                     	;# 
   362  080D                     	;# 
   363  080E                     	;# 
   364  080E                     	;# 
   365  080F                     	;# 
   366  0810                     	;# 
   367  0810                     	;# 
   368  0811                     	;# 
   369  0812                     	;# 
   370  0812                     	;# 
   371  0813                     	;# 
   372  0814                     	;# 
   373  0815                     	;# 
   374  0816                     	;# 
   375  0817                     	;# 
   376  0818                     	;# 
   377  0819                     	;# 
   378  081A                     	;# 
   379  081A                     	;# 
   380  081B                     	;# 
   381  081C                     	;# 
   382  081C                     	;# 
   383  081D                     	;# 
   384  088C                     	;# 
   385  088D                     	;# 
   386  088E                     	;# 
   387  088F                     	;# 
   388  088F                     	;# 
   389  0890                     	;# 
   390  0891                     	;# 
   391  0892                     	;# 
   392  0893                     	;# 
   393  0893                     	;# 
   394  0894                     	;# 
   395  0895                     	;# 
   396  0896                     	;# 
   397  0897                     	;# 
   398  0897                     	;# 
   399  0898                     	;# 
   400  0899                     	;# 
   401  0D8C                     	;# 
   402  0D8C                     	;# 
   403  0D8D                     	;# 
   404  0D8E                     	;# 
   405  0D8F                     	;# 
   406  0D8F                     	;# 
   407  0D90                     	;# 
   408  0D91                     	;# 
   409  0D92                     	;# 
   410  0D92                     	;# 
   411  0D93                     	;# 
   412  0D94                     	;# 
   413  0D95                     	;# 
   414  0D95                     	;# 
   415  0D96                     	;# 
   416  0D97                     	;# 
   417  0D98                     	;# 
   418  0D99                     	;# 
   419  0D9A                     	;# 
   420  0D9B                     	;# 
   421  0D9C                     	;# 
   422  0D9D                     	;# 
   423  0D9E                     	;# 
   424  0D9E                     	;# 
   425  0D9F                     	;# 
   426  0DA0                     	;# 
   427  0DA1                     	;# 
   428  0DA1                     	;# 
   429  0DA2                     	;# 
   430  0DA3                     	;# 
   431  0DA4                     	;# 
   432  0DA4                     	;# 
   433  0DA5                     	;# 
   434  0DA6                     	;# 
   435  0DA7                     	;# 
   436  0DA7                     	;# 
   437  0DA8                     	;# 
   438  0DA9                     	;# 
   439  0DAA                     	;# 
   440  0DAB                     	;# 
   441  0DAC                     	;# 
   442  0DAD                     	;# 
   443  0DAE                     	;# 
   444  0DAF                     	;# 
   445  0E0F                     	;# 
   446  0E10                     	;# 
   447  0E11                     	;# 
   448  0E12                     	;# 
   449  0E13                     	;# 
   450  0E14                     	;# 
   451  0E15                     	;# 
   452  0E16                     	;# 
   453  0E17                     	;# 
   454  0E18                     	;# 
   455  0E19                     	;# 
   456  0E1A                     	;# 
   457  0E1B                     	;# 
   458  0E1C                     	;# 
   459  0E1D                     	;# 
   460  0E1E                     	;# 
   461  0E1F                     	;# 
   462  0E20                     	;# 
   463  0E21                     	;# 
   464  0E22                     	;# 
   465  0E23                     	;# 
   466  0E24                     	;# 
   467  0E25                     	;# 
   468  0E26                     	;# 
   469  0E27                     	;# 
   470  0E28                     	;# 
   471  0E29                     	;# 
   472  0E2A                     	;# 
   473  0E2B                     	;# 
   474  0E2C                     	;# 
   475  0E2D                     	;# 
   476  0E2E                     	;# 
   477  0E90                     	;# 
   478  0E91                     	;# 
   479  0E92                     	;# 
   480  0E94                     	;# 
   481  0E95                     	;# 
   482  0E9C                     	;# 
   483  0E9D                     	;# 
   484  0E9E                     	;# 
   485  0E9F                     	;# 
   486  0EA0                     	;# 
   487  0EA1                     	;# 
   488  0EA2                     	;# 
   489  0EA3                     	;# 
   490  0EA4                     	;# 
   491  0EA5                     	;# 
   492  0EA6                     	;# 
   493  0EA7                     	;# 
   494  0F0F                     	;# 
   495  0F10                     	;# 
   496  0F11                     	;# 
   497  0F12                     	;# 
   498  0F13                     	;# 
   499  0F14                     	;# 
   500  0F15                     	;# 
   501  0F16                     	;# 
   502  0F17                     	;# 
   503  0F18                     	;# 
   504  0F19                     	;# 
   505  0F1A                     	;# 
   506  0F1B                     	;# 
   507  0F1C                     	;# 
   508  0F1D                     	;# 
   509  0F1E                     	;# 
   510  0F1F                     	;# 
   511  0F20                     	;# 
   512  0F21                     	;# 
   513  0F22                     	;# 
   514  0F23                     	;# 
   515  0F24                     	;# 
   516  0F25                     	;# 
   517  0F26                     	;# 
   518  0F27                     	;# 
   519  0F28                     	;# 
   520  0F29                     	;# 
   521  0F2A                     	;# 
   522  0F2B                     	;# 
   523  0F2C                     	;# 
   524  0F2D                     	;# 
   525  0F2E                     	;# 
   526  0F2F                     	;# 
   527  0F30                     	;# 
   528  0F31                     	;# 
   529  0F32                     	;# 
   530  0F33                     	;# 
   531  0F34                     	;# 
   532  0F35                     	;# 
   533  0F36                     	;# 
   534  0F37                     	;# 
   535  0FE4                     	;# 
   536  0FE5                     	;# 
   537  0FE6                     	;# 
   538  0FE7                     	;# 
   539  0FE8                     	;# 
   540  0FE9                     	;# 
   541  0FEA                     	;# 
   542  0FEB                     	;# 
   543  0FED                     	;# 
   544  0FEE                     	;# 
   545  0FEF                     	;# 
   546  0000                     	;# 
   547  0001                     	;# 
   548  0002                     	;# 
   549  0003                     	;# 
   550  0004                     	;# 
   551  0005                     	;# 
   552  0006                     	;# 
   553  0007                     	;# 
   554  0008                     	;# 
   555  0009                     	;# 
   556  000A                     	;# 
   557  000B                     	;# 
   558  000C                     	;# 
   559  000D                     	;# 
   560  000E                     	;# 
   561  0010                     	;# 
   562  0011                     	;# 
   563  0012                     	;# 
   564  0013                     	;# 
   565  0014                     	;# 
   566  0015                     	;# 
   567  0016                     	;# 
   568  0016                     	;# 
   569  0017                     	;# 
   570  0018                     	;# 
   571  0019                     	;# 
   572  001A                     	;# 
   573  001A                     	;# 
   574  001B                     	;# 
   575  001B                     	;# 
   576  001C                     	;# 
   577  001D                     	;# 
   578  001E                     	;# 
   579  001F                     	;# 
   580  008C                     	;# 
   581  008D                     	;# 
   582  008E                     	;# 
   583  0090                     	;# 
   584  0091                     	;# 
   585  0092                     	;# 
   586  0093                     	;# 
   587  0094                     	;# 
   588  0095                     	;# 
   589  0096                     	;# 
   590  0098                     	;# 
   591  0099                     	;# 
   592  009A                     	;# 
   593  009B                     	;# 
   594  009B                     	;# 
   595  009C                     	;# 
   596  009D                     	;# 
   597  009E                     	;# 
   598  009F                     	;# 
   599  010C                     	;# 
   600  010D                     	;# 
   601  010E                     	;# 
   602  0111                     	;# 
   603  0112                     	;# 
   604  0113                     	;# 
   605  0114                     	;# 
   606  0115                     	;# 
   607  0116                     	;# 
   608  0117                     	;# 
   609  0118                     	;# 
   610  0119                     	;# 
   611  011C                     	;# 
   612  018C                     	;# 
   613  018D                     	;# 
   614  018E                     	;# 
   615  0191                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0193                     	;# 
   619  0193                     	;# 
   620  0194                     	;# 
   621  0195                     	;# 
   622  0196                     	;# 
   623  0197                     	;# 
   624  0199                     	;# 
   625  0199                     	;# 
   626  0199                     	;# 
   627  019A                     	;# 
   628  019A                     	;# 
   629  019A                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019C                     	;# 
   636  019C                     	;# 
   637  019C                     	;# 
   638  019D                     	;# 
   639  019D                     	;# 
   640  019D                     	;# 
   641  019E                     	;# 
   642  019E                     	;# 
   643  019E                     	;# 
   644  019F                     	;# 
   645  019F                     	;# 
   646  019F                     	;# 
   647  019F                     	;# 
   648  019F                     	;# 
   649  020C                     	;# 
   650  020D                     	;# 
   651  020E                     	;# 
   652  0211                     	;# 
   653  0211                     	;# 
   654  0212                     	;# 
   655  0212                     	;# 
   656  0213                     	;# 
   657  0213                     	;# 
   658  0214                     	;# 
   659  0214                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0216                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0217                     	;# 
   668  028C                     	;# 
   669  028D                     	;# 
   670  028E                     	;# 
   671  0291                     	;# 
   672  0291                     	;# 
   673  0292                     	;# 
   674  0293                     	;# 
   675  0294                     	;# 
   676  0298                     	;# 
   677  0298                     	;# 
   678  0299                     	;# 
   679  029A                     	;# 
   680  029B                     	;# 
   681  029E                     	;# 
   682  030C                     	;# 
   683  030D                     	;# 
   684  030E                     	;# 
   685  038C                     	;# 
   686  038D                     	;# 
   687  038E                     	;# 
   688  0391                     	;# 
   689  0392                     	;# 
   690  0393                     	;# 
   691  0394                     	;# 
   692  0395                     	;# 
   693  0396                     	;# 
   694  0397                     	;# 
   695  0398                     	;# 
   696  0399                     	;# 
   697  040E                     	;# 
   698  0413                     	;# 
   699  0413                     	;# 
   700  0414                     	;# 
   701  0414                     	;# 
   702  0415                     	;# 
   703  0416                     	;# 
   704  0417                     	;# 
   705  0418                     	;# 
   706  041A                     	;# 
   707  041A                     	;# 
   708  041B                     	;# 
   709  041B                     	;# 
   710  041C                     	;# 
   711  041D                     	;# 
   712  041E                     	;# 
   713  041F                     	;# 
   714  0493                     	;# 
   715  0494                     	;# 
   716  0495                     	;# 
   717  0496                     	;# 
   718  049A                     	;# 
   719  049B                     	;# 
   720  049C                     	;# 
   721  049D                     	;# 
   722  058C                     	;# 
   723  058C                     	;# 
   724  058D                     	;# 
   725  058E                     	;# 
   726  058E                     	;# 
   727  058F                     	;# 
   728  0590                     	;# 
   729  0590                     	;# 
   730  0591                     	;# 
   731  0592                     	;# 
   732  0592                     	;# 
   733  0593                     	;# 
   734  0594                     	;# 
   735  0594                     	;# 
   736  0595                     	;# 
   737  0596                     	;# 
   738  0596                     	;# 
   739  0597                     	;# 
   740  0598                     	;# 
   741  0599                     	;# 
   742  059A                     	;# 
   743  059B                     	;# 
   744  059B                     	;# 
   745  059C                     	;# 
   746  059D                     	;# 
   747  060C                     	;# 
   748  060C                     	;# 
   749  060D                     	;# 
   750  060E                     	;# 
   751  060F                     	;# 
   752  060F                     	;# 
   753  0610                     	;# 
   754  0611                     	;# 
   755  0612                     	;# 
   756  0613                     	;# 
   757  0614                     	;# 
   758  0617                     	;# 
   759  0617                     	;# 
   760  0618                     	;# 
   761  0619                     	;# 
   762  061A                     	;# 
   763  061A                     	;# 
   764  061B                     	;# 
   765  061C                     	;# 
   766  0691                     	;# 
   767  0692                     	;# 
   768  0693                     	;# 
   769  0694                     	;# 
   770  0695                     	;# 
   771  0696                     	;# 
   772  0697                     	;# 
   773  0699                     	;# 
   774  069A                     	;# 
   775  0711                     	;# 
   776  0712                     	;# 
   777  0713                     	;# 
   778  0714                     	;# 
   779  0715                     	;# 
   780  0718                     	;# 
   781  0718                     	;# 
   782  0719                     	;# 
   783  071A                     	;# 
   784  071A                     	;# 
   785  071B                     	;# 
   786  071C                     	;# 
   787  071D                     	;# 
   788  0791                     	;# 
   789  0791                     	;# 
   790  0792                     	;# 
   791  0793                     	;# 
   792  0793                     	;# 
   793  0794                     	;# 
   794  0795                     	;# 
   795  0795                     	;# 
   796  0796                     	;# 
   797  0797                     	;# 
   798  0797                     	;# 
   799  0798                     	;# 
   800  0799                     	;# 
   801  079A                     	;# 
   802  080C                     	;# 
   803  080C                     	;# 
   804  080D                     	;# 
   805  080E                     	;# 
   806  080E                     	;# 
   807  080F                     	;# 
   808  0810                     	;# 
   809  0810                     	;# 
   810  0811                     	;# 
   811  0812                     	;# 
   812  0812                     	;# 
   813  0813                     	;# 
   814  0814                     	;# 
   815  0815                     	;# 
   816  0816                     	;# 
   817  0817                     	;# 
   818  0818                     	;# 
   819  0819                     	;# 
   820  081A                     	;# 
   821  081A                     	;# 
   822  081B                     	;# 
   823  081C                     	;# 
   824  081C                     	;# 
   825  081D                     	;# 
   826  088C                     	;# 
   827  088D                     	;# 
   828  088E                     	;# 
   829  088F                     	;# 
   830  088F                     	;# 
   831  0890                     	;# 
   832  0891                     	;# 
   833  0892                     	;# 
   834  0893                     	;# 
   835  0893                     	;# 
   836  0894                     	;# 
   837  0895                     	;# 
   838  0896                     	;# 
   839  0897                     	;# 
   840  0897                     	;# 
   841  0898                     	;# 
   842  0899                     	;# 
   843  0D8C                     	;# 
   844  0D8C                     	;# 
   845  0D8D                     	;# 
   846  0D8E                     	;# 
   847  0D8F                     	;# 
   848  0D8F                     	;# 
   849  0D90                     	;# 
   850  0D91                     	;# 
   851  0D92                     	;# 
   852  0D92                     	;# 
   853  0D93                     	;# 
   854  0D94                     	;# 
   855  0D95                     	;# 
   856  0D95                     	;# 
   857  0D96                     	;# 
   858  0D97                     	;# 
   859  0D98                     	;# 
   860  0D99                     	;# 
   861  0D9A                     	;# 
   862  0D9B                     	;# 
   863  0D9C                     	;# 
   864  0D9D                     	;# 
   865  0D9E                     	;# 
   866  0D9E                     	;# 
   867  0D9F                     	;# 
   868  0DA0                     	;# 
   869  0DA1                     	;# 
   870  0DA1                     	;# 
   871  0DA2                     	;# 
   872  0DA3                     	;# 
   873  0DA4                     	;# 
   874  0DA4                     	;# 
   875  0DA5                     	;# 
   876  0DA6                     	;# 
   877  0DA7                     	;# 
   878  0DA7                     	;# 
   879  0DA8                     	;# 
   880  0DA9                     	;# 
   881  0DAA                     	;# 
   882  0DAB                     	;# 
   883  0DAC                     	;# 
   884  0DAD                     	;# 
   885  0DAE                     	;# 
   886  0DAF                     	;# 
   887  0E0F                     	;# 
   888  0E10                     	;# 
   889  0E11                     	;# 
   890  0E12                     	;# 
   891  0E13                     	;# 
   892  0E14                     	;# 
   893  0E15                     	;# 
   894  0E16                     	;# 
   895  0E17                     	;# 
   896  0E18                     	;# 
   897  0E19                     	;# 
   898  0E1A                     	;# 
   899  0E1B                     	;# 
   900  0E1C                     	;# 
   901  0E1D                     	;# 
   902  0E1E                     	;# 
   903  0E1F                     	;# 
   904  0E20                     	;# 
   905  0E21                     	;# 
   906  0E22                     	;# 
   907  0E23                     	;# 
   908  0E24                     	;# 
   909  0E25                     	;# 
   910  0E26                     	;# 
   911  0E27                     	;# 
   912  0E28                     	;# 
   913  0E29                     	;# 
   914  0E2A                     	;# 
   915  0E2B                     	;# 
   916  0E2C                     	;# 
   917  0E2D                     	;# 
   918  0E2E                     	;# 
   919  0E90                     	;# 
   920  0E91                     	;# 
   921  0E92                     	;# 
   922  0E94                     	;# 
   923  0E95                     	;# 
   924  0E9C                     	;# 
   925  0E9D                     	;# 
   926  0E9E                     	;# 
   927  0E9F                     	;# 
   928  0EA0                     	;# 
   929  0EA1                     	;# 
   930  0EA2                     	;# 
   931  0EA3                     	;# 
   932  0EA4                     	;# 
   933  0EA5                     	;# 
   934  0EA6                     	;# 
   935  0EA7                     	;# 
   936  0F0F                     	;# 
   937  0F10                     	;# 
   938  0F11                     	;# 
   939  0F12                     	;# 
   940  0F13                     	;# 
   941  0F14                     	;# 
   942  0F15                     	;# 
   943  0F16                     	;# 
   944  0F17                     	;# 
   945  0F18                     	;# 
   946  0F19                     	;# 
   947  0F1A                     	;# 
   948  0F1B                     	;# 
   949  0F1C                     	;# 
   950  0F1D                     	;# 
   951  0F1E                     	;# 
   952  0F1F                     	;# 
   953  0F20                     	;# 
   954  0F21                     	;# 
   955  0F22                     	;# 
   956  0F23                     	;# 
   957  0F24                     	;# 
   958  0F25                     	;# 
   959  0F26                     	;# 
   960  0F27                     	;# 
   961  0F28                     	;# 
   962  0F29                     	;# 
   963  0F2A                     	;# 
   964  0F2B                     	;# 
   965  0F2C                     	;# 
   966  0F2D                     	;# 
   967  0F2E                     	;# 
   968  0F2F                     	;# 
   969  0F30                     	;# 
   970  0F31                     	;# 
   971  0F32                     	;# 
   972  0F33                     	;# 
   973  0F34                     	;# 
   974  0F35                     	;# 
   975  0F36                     	;# 
   976  0F37                     	;# 
   977  0FE4                     	;# 
   978  0FE5                     	;# 
   979  0FE6                     	;# 
   980  0FE7                     	;# 
   981  0FE8                     	;# 
   982  0FE9                     	;# 
   983  0FEA                     	;# 
   984  0FEB                     	;# 
   985  0FED                     	;# 
   986  0FEE                     	;# 
   987  0FEF                     	;# 
   988  0000                     	;# 
   989  0001                     	;# 
   990  0002                     	;# 
   991  0003                     	;# 
   992  0004                     	;# 
   993  0005                     	;# 
   994  0006                     	;# 
   995  0007                     	;# 
   996  0008                     	;# 
   997  0009                     	;# 
   998  000A                     	;# 
   999  000B                     	;# 
  1000  000C                     	;# 
  1001  000D                     	;# 
  1002  000E                     	;# 
  1003  0010                     	;# 
  1004  0011                     	;# 
  1005  0012                     	;# 
  1006  0013                     	;# 
  1007  0014                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001B                     	;# 
  1018  001C                     	;# 
  1019  001D                     	;# 
  1020  001E                     	;# 
  1021  001F                     	;# 
  1022  008C                     	;# 
  1023  008D                     	;# 
  1024  008E                     	;# 
  1025  0090                     	;# 
  1026  0091                     	;# 
  1027  0092                     	;# 
  1028  0093                     	;# 
  1029  0094                     	;# 
  1030  0095                     	;# 
  1031  0096                     	;# 
  1032  0098                     	;# 
  1033  0099                     	;# 
  1034  009A                     	;# 
  1035  009B                     	;# 
  1036  009B                     	;# 
  1037  009C                     	;# 
  1038  009D                     	;# 
  1039  009E                     	;# 
  1040  009F                     	;# 
  1041  010C                     	;# 
  1042  010D                     	;# 
  1043  010E                     	;# 
  1044  0111                     	;# 
  1045  0112                     	;# 
  1046  0113                     	;# 
  1047  0114                     	;# 
  1048  0115                     	;# 
  1049  0116                     	;# 
  1050  0117                     	;# 
  1051  0118                     	;# 
  1052  0119                     	;# 
  1053  011C                     	;# 
  1054  018C                     	;# 
  1055  018D                     	;# 
  1056  018E                     	;# 
  1057  0191                     	;# 
  1058  0191                     	;# 
  1059  0192                     	;# 
  1060  0193                     	;# 
  1061  0193                     	;# 
  1062  0194                     	;# 
  1063  0195                     	;# 
  1064  0196                     	;# 
  1065  0197                     	;# 
  1066  0199                     	;# 
  1067  0199                     	;# 
  1068  0199                     	;# 
  1069  019A                     	;# 
  1070  019A                     	;# 
  1071  019A                     	;# 
  1072  019B                     	;# 
  1073  019B                     	;# 
  1074  019B                     	;# 
  1075  019B                     	;# 
  1076  019B                     	;# 
  1077  019C                     	;# 
  1078  019C                     	;# 
  1079  019C                     	;# 
  1080  019D                     	;# 
  1081  019D                     	;# 
  1082  019D                     	;# 
  1083  019E                     	;# 
  1084  019E                     	;# 
  1085  019E                     	;# 
  1086  019F                     	;# 
  1087  019F                     	;# 
  1088  019F                     	;# 
  1089  019F                     	;# 
  1090  019F                     	;# 
  1091  020C                     	;# 
  1092  020D                     	;# 
  1093  020E                     	;# 
  1094  0211                     	;# 
  1095  0211                     	;# 
  1096  0212                     	;# 
  1097  0212                     	;# 
  1098  0213                     	;# 
  1099  0213                     	;# 
  1100  0214                     	;# 
  1101  0214                     	;# 
  1102  0215                     	;# 
  1103  0215                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0216                     	;# 
  1107  0216                     	;# 
  1108  0217                     	;# 
  1109  0217                     	;# 
  1110  028C                     	;# 
  1111  028D                     	;# 
  1112  028E                     	;# 
  1113  0291                     	;# 
  1114  0291                     	;# 
  1115  0292                     	;# 
  1116  0293                     	;# 
  1117  0294                     	;# 
  1118  0298                     	;# 
  1119  0298                     	;# 
  1120  0299                     	;# 
  1121  029A                     	;# 
  1122  029B                     	;# 
  1123  029E                     	;# 
  1124  030C                     	;# 
  1125  030D                     	;# 
  1126  030E                     	;# 
  1127  038C                     	;# 
  1128  038D                     	;# 
  1129  038E                     	;# 
  1130  0391                     	;# 
  1131  0392                     	;# 
  1132  0393                     	;# 
  1133  0394                     	;# 
  1134  0395                     	;# 
  1135  0396                     	;# 
  1136  0397                     	;# 
  1137  0398                     	;# 
  1138  0399                     	;# 
  1139  040E                     	;# 
  1140  0413                     	;# 
  1141  0413                     	;# 
  1142  0414                     	;# 
  1143  0414                     	;# 
  1144  0415                     	;# 
  1145  0416                     	;# 
  1146  0417                     	;# 
  1147  0418                     	;# 
  1148  041A                     	;# 
  1149  041A                     	;# 
  1150  041B                     	;# 
  1151  041B                     	;# 
  1152  041C                     	;# 
  1153  041D                     	;# 
  1154  041E                     	;# 
  1155  041F                     	;# 
  1156  0493                     	;# 
  1157  0494                     	;# 
  1158  0495                     	;# 
  1159  0496                     	;# 
  1160  049A                     	;# 
  1161  049B                     	;# 
  1162  049C                     	;# 
  1163  049D                     	;# 
  1164  058C                     	;# 
  1165  058C                     	;# 
  1166  058D                     	;# 
  1167  058E                     	;# 
  1168  058E                     	;# 
  1169  058F                     	;# 
  1170  0590                     	;# 
  1171  0590                     	;# 
  1172  0591                     	;# 
  1173  0592                     	;# 
  1174  0592                     	;# 
  1175  0593                     	;# 
  1176  0594                     	;# 
  1177  0594                     	;# 
  1178  0595                     	;# 
  1179  0596                     	;# 
  1180  0596                     	;# 
  1181  0597                     	;# 
  1182  0598                     	;# 
  1183  0599                     	;# 
  1184  059A                     	;# 
  1185  059B                     	;# 
  1186  059B                     	;# 
  1187  059C                     	;# 
  1188  059D                     	;# 
  1189  060C                     	;# 
  1190  060C                     	;# 
  1191  060D                     	;# 
  1192  060E                     	;# 
  1193  060F                     	;# 
  1194  060F                     	;# 
  1195  0610                     	;# 
  1196  0611                     	;# 
  1197  0612                     	;# 
  1198  0613                     	;# 
  1199  0614                     	;# 
  1200  0617                     	;# 
  1201  0617                     	;# 
  1202  0618                     	;# 
  1203  0619                     	;# 
  1204  061A                     	;# 
  1205  061A                     	;# 
  1206  061B                     	;# 
  1207  061C                     	;# 
  1208  0691                     	;# 
  1209  0692                     	;# 
  1210  0693                     	;# 
  1211  0694                     	;# 
  1212  0695                     	;# 
  1213  0696                     	;# 
  1214  0697                     	;# 
  1215  0699                     	;# 
  1216  069A                     	;# 
  1217  0711                     	;# 
  1218  0712                     	;# 
  1219  0713                     	;# 
  1220  0714                     	;# 
  1221  0715                     	;# 
  1222  0718                     	;# 
  1223  0718                     	;# 
  1224  0719                     	;# 
  1225  071A                     	;# 
  1226  071A                     	;# 
  1227  071B                     	;# 
  1228  071C                     	;# 
  1229  071D                     	;# 
  1230  0791                     	;# 
  1231  0791                     	;# 
  1232  0792                     	;# 
  1233  0793                     	;# 
  1234  0793                     	;# 
  1235  0794                     	;# 
  1236  0795                     	;# 
  1237  0795                     	;# 
  1238  0796                     	;# 
  1239  0797                     	;# 
  1240  0797                     	;# 
  1241  0798                     	;# 
  1242  0799                     	;# 
  1243  079A                     	;# 
  1244  080C                     	;# 
  1245  080C                     	;# 
  1246  080D                     	;# 
  1247  080E                     	;# 
  1248  080E                     	;# 
  1249  080F                     	;# 
  1250  0810                     	;# 
  1251  0810                     	;# 
  1252  0811                     	;# 
  1253  0812                     	;# 
  1254  0812                     	;# 
  1255  0813                     	;# 
  1256  0814                     	;# 
  1257  0815                     	;# 
  1258  0816                     	;# 
  1259  0817                     	;# 
  1260  0818                     	;# 
  1261  0819                     	;# 
  1262  081A                     	;# 
  1263  081A                     	;# 
  1264  081B                     	;# 
  1265  081C                     	;# 
  1266  081C                     	;# 
  1267  081D                     	;# 
  1268  088C                     	;# 
  1269  088D                     	;# 
  1270  088E                     	;# 
  1271  088F                     	;# 
  1272  088F                     	;# 
  1273  0890                     	;# 
  1274  0891                     	;# 
  1275  0892                     	;# 
  1276  0893                     	;# 
  1277  0893                     	;# 
  1278  0894                     	;# 
  1279  0895                     	;# 
  1280  0896                     	;# 
  1281  0897                     	;# 
  1282  0897                     	;# 
  1283  0898                     	;# 
  1284  0899                     	;# 
  1285  0D8C                     	;# 
  1286  0D8C                     	;# 
  1287  0D8D                     	;# 
  1288  0D8E                     	;# 
  1289  0D8F                     	;# 
  1290  0D8F                     	;# 
  1291  0D90                     	;# 
  1292  0D91                     	;# 
  1293  0D92                     	;# 
  1294  0D92                     	;# 
  1295  0D93                     	;# 
  1296  0D94                     	;# 
  1297  0D95                     	;# 
  1298  0D95                     	;# 
  1299  0D96                     	;# 
  1300  0D97                     	;# 
  1301  0D98                     	;# 
  1302  0D99                     	;# 
  1303  0D9A                     	;# 
  1304  0D9B                     	;# 
  1305  0D9C                     	;# 
  1306  0D9D                     	;# 
  1307  0D9E                     	;# 
  1308  0D9E                     	;# 
  1309  0D9F                     	;# 
  1310  0DA0                     	;# 
  1311  0DA1                     	;# 
  1312  0DA1                     	;# 
  1313  0DA2                     	;# 
  1314  0DA3                     	;# 
  1315  0DA4                     	;# 
  1316  0DA4                     	;# 
  1317  0DA5                     	;# 
  1318  0DA6                     	;# 
  1319  0DA7                     	;# 
  1320  0DA7                     	;# 
  1321  0DA8                     	;# 
  1322  0DA9                     	;# 
  1323  0DAA                     	;# 
  1324  0DAB                     	;# 
  1325  0DAC                     	;# 
  1326  0DAD                     	;# 
  1327  0DAE                     	;# 
  1328  0DAF                     	;# 
  1329  0E0F                     	;# 
  1330  0E10                     	;# 
  1331  0E11                     	;# 
  1332  0E12                     	;# 
  1333  0E13                     	;# 
  1334  0E14                     	;# 
  1335  0E15                     	;# 
  1336  0E16                     	;# 
  1337  0E17                     	;# 
  1338  0E18                     	;# 
  1339  0E19                     	;# 
  1340  0E1A                     	;# 
  1341  0E1B                     	;# 
  1342  0E1C                     	;# 
  1343  0E1D                     	;# 
  1344  0E1E                     	;# 
  1345  0E1F                     	;# 
  1346  0E20                     	;# 
  1347  0E21                     	;# 
  1348  0E22                     	;# 
  1349  0E23                     	;# 
  1350  0E24                     	;# 
  1351  0E25                     	;# 
  1352  0E26                     	;# 
  1353  0E27                     	;# 
  1354  0E28                     	;# 
  1355  0E29                     	;# 
  1356  0E2A                     	;# 
  1357  0E2B                     	;# 
  1358  0E2C                     	;# 
  1359  0E2D                     	;# 
  1360  0E2E                     	;# 
  1361  0E90                     	;# 
  1362  0E91                     	;# 
  1363  0E92                     	;# 
  1364  0E94                     	;# 
  1365  0E95                     	;# 
  1366  0E9C                     	;# 
  1367  0E9D                     	;# 
  1368  0E9E                     	;# 
  1369  0E9F                     	;# 
  1370  0EA0                     	;# 
  1371  0EA1                     	;# 
  1372  0EA2                     	;# 
  1373  0EA3                     	;# 
  1374  0EA4                     	;# 
  1375  0EA5                     	;# 
  1376  0EA6                     	;# 
  1377  0EA7                     	;# 
  1378  0F0F                     	;# 
  1379  0F10                     	;# 
  1380  0F11                     	;# 
  1381  0F12                     	;# 
  1382  0F13                     	;# 
  1383  0F14                     	;# 
  1384  0F15                     	;# 
  1385  0F16                     	;# 
  1386  0F17                     	;# 
  1387  0F18                     	;# 
  1388  0F19                     	;# 
  1389  0F1A                     	;# 
  1390  0F1B                     	;# 
  1391  0F1C                     	;# 
  1392  0F1D                     	;# 
  1393  0F1E                     	;# 
  1394  0F1F                     	;# 
  1395  0F20                     	;# 
  1396  0F21                     	;# 
  1397  0F22                     	;# 
  1398  0F23                     	;# 
  1399  0F24                     	;# 
  1400  0F25                     	;# 
  1401  0F26                     	;# 
  1402  0F27                     	;# 
  1403  0F28                     	;# 
  1404  0F29                     	;# 
  1405  0F2A                     	;# 
  1406  0F2B                     	;# 
  1407  0F2C                     	;# 
  1408  0F2D                     	;# 
  1409  0F2E                     	;# 
  1410  0F2F                     	;# 
  1411  0F30                     	;# 
  1412  0F31                     	;# 
  1413  0F32                     	;# 
  1414  0F33                     	;# 
  1415  0F34                     	;# 
  1416  0F35                     	;# 
  1417  0F36                     	;# 
  1418  0F37                     	;# 
  1419  0FE4                     	;# 
  1420  0FE5                     	;# 
  1421  0FE6                     	;# 
  1422  0FE7                     	;# 
  1423  0FE8                     	;# 
  1424  0FE9                     	;# 
  1425  0FEA                     	;# 
  1426  0FEB                     	;# 
  1427  0FED                     	;# 
  1428  0FEE                     	;# 
  1429  0FEF                     	;# 
  1430  0000                     	;# 
  1431  0001                     	;# 
  1432  0002                     	;# 
  1433  0003                     	;# 
  1434  0004                     	;# 
  1435  0005                     	;# 
  1436  0006                     	;# 
  1437  0007                     	;# 
  1438  0008                     	;# 
  1439  0009                     	;# 
  1440  000A                     	;# 
  1441  000B                     	;# 
  1442  000C                     	;# 
  1443  000D                     	;# 
  1444  000E                     	;# 
  1445  0010                     	;# 
  1446  0011                     	;# 
  1447  0012                     	;# 
  1448  0013                     	;# 
  1449  0014                     	;# 
  1450  0015                     	;# 
  1451  0016                     	;# 
  1452  0016                     	;# 
  1453  0017                     	;# 
  1454  0018                     	;# 
  1455  0019                     	;# 
  1456  001A                     	;# 
  1457  001A                     	;# 
  1458  001B                     	;# 
  1459  001B                     	;# 
  1460  001C                     	;# 
  1461  001D                     	;# 
  1462  001E                     	;# 
  1463  001F                     	;# 
  1464  008C                     	;# 
  1465  008D                     	;# 
  1466  008E                     	;# 
  1467  0090                     	;# 
  1468  0091                     	;# 
  1469  0092                     	;# 
  1470  0093                     	;# 
  1471  0094                     	;# 
  1472  0095                     	;# 
  1473  0096                     	;# 
  1474  0098                     	;# 
  1475  0099                     	;# 
  1476  009A                     	;# 
  1477  009B                     	;# 
  1478  009B                     	;# 
  1479  009C                     	;# 
  1480  009D                     	;# 
  1481  009E                     	;# 
  1482  009F                     	;# 
  1483  010C                     	;# 
  1484  010D                     	;# 
  1485  010E                     	;# 
  1486  0111                     	;# 
  1487  0112                     	;# 
  1488  0113                     	;# 
  1489  0114                     	;# 
  1490  0115                     	;# 
  1491  0116                     	;# 
  1492  0117                     	;# 
  1493  0118                     	;# 
  1494  0119                     	;# 
  1495  011C                     	;# 
  1496  018C                     	;# 
  1497  018D                     	;# 
  1498  018E                     	;# 
  1499  0191                     	;# 
  1500  0191                     	;# 
  1501  0192                     	;# 
  1502  0193                     	;# 
  1503  0193                     	;# 
  1504  0194                     	;# 
  1505  0195                     	;# 
  1506  0196                     	;# 
  1507  0197                     	;# 
  1508  0199                     	;# 
  1509  0199                     	;# 
  1510  0199                     	;# 
  1511  019A                     	;# 
  1512  019A                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019C                     	;# 
  1520  019C                     	;# 
  1521  019C                     	;# 
  1522  019D                     	;# 
  1523  019D                     	;# 
  1524  019D                     	;# 
  1525  019E                     	;# 
  1526  019E                     	;# 
  1527  019E                     	;# 
  1528  019F                     	;# 
  1529  019F                     	;# 
  1530  019F                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  020C                     	;# 
  1534  020D                     	;# 
  1535  020E                     	;# 
  1536  0211                     	;# 
  1537  0211                     	;# 
  1538  0212                     	;# 
  1539  0212                     	;# 
  1540  0213                     	;# 
  1541  0213                     	;# 
  1542  0214                     	;# 
  1543  0214                     	;# 
  1544  0215                     	;# 
  1545  0215                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0216                     	;# 
  1549  0216                     	;# 
  1550  0217                     	;# 
  1551  0217                     	;# 
  1552  028C                     	;# 
  1553  028D                     	;# 
  1554  028E                     	;# 
  1555  0291                     	;# 
  1556  0291                     	;# 
  1557  0292                     	;# 
  1558  0293                     	;# 
  1559  0294                     	;# 
  1560  0298                     	;# 
  1561  0298                     	;# 
  1562  0299                     	;# 
  1563  029A                     	;# 
  1564  029B                     	;# 
  1565  029E                     	;# 
  1566  030C                     	;# 
  1567  030D                     	;# 
  1568  030E                     	;# 
  1569  038C                     	;# 
  1570  038D                     	;# 
  1571  038E                     	;# 
  1572  0391                     	;# 
  1573  0392                     	;# 
  1574  0393                     	;# 
  1575  0394                     	;# 
  1576  0395                     	;# 
  1577  0396                     	;# 
  1578  0397                     	;# 
  1579  0398                     	;# 
  1580  0399                     	;# 
  1581  040E                     	;# 
  1582  0413                     	;# 
  1583  0413                     	;# 
  1584  0414                     	;# 
  1585  0414                     	;# 
  1586  0415                     	;# 
  1587  0416                     	;# 
  1588  0417                     	;# 
  1589  0418                     	;# 
  1590  041A                     	;# 
  1591  041A                     	;# 
  1592  041B                     	;# 
  1593  041B                     	;# 
  1594  041C                     	;# 
  1595  041D                     	;# 
  1596  041E                     	;# 
  1597  041F                     	;# 
  1598  0493                     	;# 
  1599  0494                     	;# 
  1600  0495                     	;# 
  1601  0496                     	;# 
  1602  049A                     	;# 
  1603  049B                     	;# 
  1604  049C                     	;# 
  1605  049D                     	;# 
  1606  058C                     	;# 
  1607  058C                     	;# 
  1608  058D                     	;# 
  1609  058E                     	;# 
  1610  058E                     	;# 
  1611  058F                     	;# 
  1612  0590                     	;# 
  1613  0590                     	;# 
  1614  0591                     	;# 
  1615  0592                     	;# 
  1616  0592                     	;# 
  1617  0593                     	;# 
  1618  0594                     	;# 
  1619  0594                     	;# 
  1620  0595                     	;# 
  1621  0596                     	;# 
  1622  0596                     	;# 
  1623  0597                     	;# 
  1624  0598                     	;# 
  1625  0599                     	;# 
  1626  059A                     	;# 
  1627  059B                     	;# 
  1628  059B                     	;# 
  1629  059C                     	;# 
  1630  059D                     	;# 
  1631  060C                     	;# 
  1632  060C                     	;# 
  1633  060D                     	;# 
  1634  060E                     	;# 
  1635  060F                     	;# 
  1636  060F                     	;# 
  1637  0610                     	;# 
  1638  0611                     	;# 
  1639  0612                     	;# 
  1640  0613                     	;# 
  1641  0614                     	;# 
  1642  0617                     	;# 
  1643  0617                     	;# 
  1644  0618                     	;# 
  1645  0619                     	;# 
  1646  061A                     	;# 
  1647  061A                     	;# 
  1648  061B                     	;# 
  1649  061C                     	;# 
  1650  0691                     	;# 
  1651  0692                     	;# 
  1652  0693                     	;# 
  1653  0694                     	;# 
  1654  0695                     	;# 
  1655  0696                     	;# 
  1656  0697                     	;# 
  1657  0699                     	;# 
  1658  069A                     	;# 
  1659  0711                     	;# 
  1660  0712                     	;# 
  1661  0713                     	;# 
  1662  0714                     	;# 
  1663  0715                     	;# 
  1664  0718                     	;# 
  1665  0718                     	;# 
  1666  0719                     	;# 
  1667  071A                     	;# 
  1668  071A                     	;# 
  1669  071B                     	;# 
  1670  071C                     	;# 
  1671  071D                     	;# 
  1672  0791                     	;# 
  1673  0791                     	;# 
  1674  0792                     	;# 
  1675  0793                     	;# 
  1676  0793                     	;# 
  1677  0794                     	;# 
  1678  0795                     	;# 
  1679  0795                     	;# 
  1680  0796                     	;# 
  1681  0797                     	;# 
  1682  0797                     	;# 
  1683  0798                     	;# 
  1684  0799                     	;# 
  1685  079A                     	;# 
  1686  080C                     	;# 
  1687  080C                     	;# 
  1688  080D                     	;# 
  1689  080E                     	;# 
  1690  080E                     	;# 
  1691  080F                     	;# 
  1692  0810                     	;# 
  1693  0810                     	;# 
  1694  0811                     	;# 
  1695  0812                     	;# 
  1696  0812                     	;# 
  1697  0813                     	;# 
  1698  0814                     	;# 
  1699  0815                     	;# 
  1700  0816                     	;# 
  1701  0817                     	;# 
  1702  0818                     	;# 
  1703  0819                     	;# 
  1704  081A                     	;# 
  1705  081A                     	;# 
  1706  081B                     	;# 
  1707  081C                     	;# 
  1708  081C                     	;# 
  1709  081D                     	;# 
  1710  088C                     	;# 
  1711  088D                     	;# 
  1712  088E                     	;# 
  1713  088F                     	;# 
  1714  088F                     	;# 
  1715  0890                     	;# 
  1716  0891                     	;# 
  1717  0892                     	;# 
  1718  0893                     	;# 
  1719  0893                     	;# 
  1720  0894                     	;# 
  1721  0895                     	;# 
  1722  0896                     	;# 
  1723  0897                     	;# 
  1724  0897                     	;# 
  1725  0898                     	;# 
  1726  0899                     	;# 
  1727  0D8C                     	;# 
  1728  0D8C                     	;# 
  1729  0D8D                     	;# 
  1730  0D8E                     	;# 
  1731  0D8F                     	;# 
  1732  0D8F                     	;# 
  1733  0D90                     	;# 
  1734  0D91                     	;# 
  1735  0D92                     	;# 
  1736  0D92                     	;# 
  1737  0D93                     	;# 
  1738  0D94                     	;# 
  1739  0D95                     	;# 
  1740  0D95                     	;# 
  1741  0D96                     	;# 
  1742  0D97                     	;# 
  1743  0D98                     	;# 
  1744  0D99                     	;# 
  1745  0D9A                     	;# 
  1746  0D9B                     	;# 
  1747  0D9C                     	;# 
  1748  0D9D                     	;# 
  1749  0D9E                     	;# 
  1750  0D9E                     	;# 
  1751  0D9F                     	;# 
  1752  0DA0                     	;# 
  1753  0DA1                     	;# 
  1754  0DA1                     	;# 
  1755  0DA2                     	;# 
  1756  0DA3                     	;# 
  1757  0DA4                     	;# 
  1758  0DA4                     	;# 
  1759  0DA5                     	;# 
  1760  0DA6                     	;# 
  1761  0DA7                     	;# 
  1762  0DA7                     	;# 
  1763  0DA8                     	;# 
  1764  0DA9                     	;# 
  1765  0DAA                     	;# 
  1766  0DAB                     	;# 
  1767  0DAC                     	;# 
  1768  0DAD                     	;# 
  1769  0DAE                     	;# 
  1770  0DAF                     	;# 
  1771  0E0F                     	;# 
  1772  0E10                     	;# 
  1773  0E11                     	;# 
  1774  0E12                     	;# 
  1775  0E13                     	;# 
  1776  0E14                     	;# 
  1777  0E15                     	;# 
  1778  0E16                     	;# 
  1779  0E17                     	;# 
  1780  0E18                     	;# 
  1781  0E19                     	;# 
  1782  0E1A                     	;# 
  1783  0E1B                     	;# 
  1784  0E1C                     	;# 
  1785  0E1D                     	;# 
  1786  0E1E                     	;# 
  1787  0E1F                     	;# 
  1788  0E20                     	;# 
  1789  0E21                     	;# 
  1790  0E22                     	;# 
  1791  0E23                     	;# 
  1792  0E24                     	;# 
  1793  0E25                     	;# 
  1794  0E26                     	;# 
  1795  0E27                     	;# 
  1796  0E28                     	;# 
  1797  0E29                     	;# 
  1798  0E2A                     	;# 
  1799  0E2B                     	;# 
  1800  0E2C                     	;# 
  1801  0E2D                     	;# 
  1802  0E2E                     	;# 
  1803  0E90                     	;# 
  1804  0E91                     	;# 
  1805  0E92                     	;# 
  1806  0E94                     	;# 
  1807  0E95                     	;# 
  1808  0E9C                     	;# 
  1809  0E9D                     	;# 
  1810  0E9E                     	;# 
  1811  0E9F                     	;# 
  1812  0EA0                     	;# 
  1813  0EA1                     	;# 
  1814  0EA2                     	;# 
  1815  0EA3                     	;# 
  1816  0EA4                     	;# 
  1817  0EA5                     	;# 
  1818  0EA6                     	;# 
  1819  0EA7                     	;# 
  1820  0F0F                     	;# 
  1821  0F10                     	;# 
  1822  0F11                     	;# 
  1823  0F12                     	;# 
  1824  0F13                     	;# 
  1825  0F14                     	;# 
  1826  0F15                     	;# 
  1827  0F16                     	;# 
  1828  0F17                     	;# 
  1829  0F18                     	;# 
  1830  0F19                     	;# 
  1831  0F1A                     	;# 
  1832  0F1B                     	;# 
  1833  0F1C                     	;# 
  1834  0F1D                     	;# 
  1835  0F1E                     	;# 
  1836  0F1F                     	;# 
  1837  0F20                     	;# 
  1838  0F21                     	;# 
  1839  0F22                     	;# 
  1840  0F23                     	;# 
  1841  0F24                     	;# 
  1842  0F25                     	;# 
  1843  0F26                     	;# 
  1844  0F27                     	;# 
  1845  0F28                     	;# 
  1846  0F29                     	;# 
  1847  0F2A                     	;# 
  1848  0F2B                     	;# 
  1849  0F2C                     	;# 
  1850  0F2D                     	;# 
  1851  0F2E                     	;# 
  1852  0F2F                     	;# 
  1853  0F30                     	;# 
  1854  0F31                     	;# 
  1855  0F32                     	;# 
  1856  0F33                     	;# 
  1857  0F34                     	;# 
  1858  0F35                     	;# 
  1859  0F36                     	;# 
  1860  0F37                     	;# 
  1861  0FE4                     	;# 
  1862  0FE5                     	;# 
  1863  0FE6                     	;# 
  1864  0FE7                     	;# 
  1865  0FE8                     	;# 
  1866  0FE9                     	;# 
  1867  0FEA                     	;# 
  1868  0FEB                     	;# 
  1869  0FED                     	;# 
  1870  0FEE                     	;# 
  1871  0FEF                     	;# 
  1872  0000                     	;# 
  1873  0001                     	;# 
  1874  0002                     	;# 
  1875  0003                     	;# 
  1876  0004                     	;# 
  1877  0005                     	;# 
  1878  0006                     	;# 
  1879  0007                     	;# 
  1880  0008                     	;# 
  1881  0009                     	;# 
  1882  000A                     	;# 
  1883  000B                     	;# 
  1884  000C                     	;# 
  1885  000D                     	;# 
  1886  000E                     	;# 
  1887  0010                     	;# 
  1888  0011                     	;# 
  1889  0012                     	;# 
  1890  0013                     	;# 
  1891  0014                     	;# 
  1892  0015                     	;# 
  1893  0016                     	;# 
  1894  0016                     	;# 
  1895  0017                     	;# 
  1896  0018                     	;# 
  1897  0019                     	;# 
  1898  001A                     	;# 
  1899  001A                     	;# 
  1900  001B                     	;# 
  1901  001B                     	;# 
  1902  001C                     	;# 
  1903  001D                     	;# 
  1904  001E                     	;# 
  1905  001F                     	;# 
  1906  008C                     	;# 
  1907  008D                     	;# 
  1908  008E                     	;# 
  1909  0090                     	;# 
  1910  0091                     	;# 
  1911  0092                     	;# 
  1912  0093                     	;# 
  1913  0094                     	;# 
  1914  0095                     	;# 
  1915  0096                     	;# 
  1916  0098                     	;# 
  1917  0099                     	;# 
  1918  009A                     	;# 
  1919  009B                     	;# 
  1920  009B                     	;# 
  1921  009C                     	;# 
  1922  009D                     	;# 
  1923  009E                     	;# 
  1924  009F                     	;# 
  1925  010C                     	;# 
  1926  010D                     	;# 
  1927  010E                     	;# 
  1928  0111                     	;# 
  1929  0112                     	;# 
  1930  0113                     	;# 
  1931  0114                     	;# 
  1932  0115                     	;# 
  1933  0116                     	;# 
  1934  0117                     	;# 
  1935  0118                     	;# 
  1936  0119                     	;# 
  1937  011C                     	;# 
  1938  018C                     	;# 
  1939  018D                     	;# 
  1940  018E                     	;# 
  1941  0191                     	;# 
  1942  0191                     	;# 
  1943  0192                     	;# 
  1944  0193                     	;# 
  1945  0193                     	;# 
  1946  0194                     	;# 
  1947  0195                     	;# 
  1948  0196                     	;# 
  1949  0197                     	;# 
  1950  0199                     	;# 
  1951  0199                     	;# 
  1952  0199                     	;# 
  1953  019A                     	;# 
  1954  019A                     	;# 
  1955  019A                     	;# 
  1956  019B                     	;# 
  1957  019B                     	;# 
  1958  019B                     	;# 
  1959  019B                     	;# 
  1960  019B                     	;# 
  1961  019C                     	;# 
  1962  019C                     	;# 
  1963  019C                     	;# 
  1964  019D                     	;# 
  1965  019D                     	;# 
  1966  019D                     	;# 
  1967  019E                     	;# 
  1968  019E                     	;# 
  1969  019E                     	;# 
  1970  019F                     	;# 
  1971  019F                     	;# 
  1972  019F                     	;# 
  1973  019F                     	;# 
  1974  019F                     	;# 
  1975  020C                     	;# 
  1976  020D                     	;# 
  1977  020E                     	;# 
  1978  0211                     	;# 
  1979  0211                     	;# 
  1980  0212                     	;# 
  1981  0212                     	;# 
  1982  0213                     	;# 
  1983  0213                     	;# 
  1984  0214                     	;# 
  1985  0214                     	;# 
  1986  0215                     	;# 
  1987  0215                     	;# 
  1988  0215                     	;# 
  1989  0215                     	;# 
  1990  0216                     	;# 
  1991  0216                     	;# 
  1992  0217                     	;# 
  1993  0217                     	;# 
  1994  028C                     	;# 
  1995  028D                     	;# 
  1996  028E                     	;# 
  1997  0291                     	;# 
  1998  0291                     	;# 
  1999  0292                     	;# 
  2000  0293                     	;# 
  2001  0294                     	;# 
  2002  0298                     	;# 
  2003  0298                     	;# 
  2004  0299                     	;# 
  2005  029A                     	;# 
  2006  029B                     	;# 
  2007  029E                     	;# 
  2008  030C                     	;# 
  2009  030D                     	;# 
  2010  030E                     	;# 
  2011  038C                     	;# 
  2012  038D                     	;# 
  2013  038E                     	;# 
  2014  0391                     	;# 
  2015  0392                     	;# 
  2016  0393                     	;# 
  2017  0394                     	;# 
  2018  0395                     	;# 
  2019  0396                     	;# 
  2020  0397                     	;# 
  2021  0398                     	;# 
  2022  0399                     	;# 
  2023  040E                     	;# 
  2024  0413                     	;# 
  2025  0413                     	;# 
  2026  0414                     	;# 
  2027  0414                     	;# 
  2028  0415                     	;# 
  2029  0416                     	;# 
  2030  0417                     	;# 
  2031  0418                     	;# 
  2032  041A                     	;# 
  2033  041A                     	;# 
  2034  041B                     	;# 
  2035  041B                     	;# 
  2036  041C                     	;# 
  2037  041D                     	;# 
  2038  041E                     	;# 
  2039  041F                     	;# 
  2040  0493                     	;# 
  2041  0494                     	;# 
  2042  0495                     	;# 
  2043  0496                     	;# 
  2044  049A                     	;# 
  2045  049B                     	;# 
  2046  049C                     	;# 
  2047  049D                     	;# 
  2048  058C                     	;# 
  2049  058C                     	;# 
  2050  058D                     	;# 
  2051  058E                     	;# 
  2052  058E                     	;# 
  2053  058F                     	;# 
  2054  0590                     	;# 
  2055  0590                     	;# 
  2056  0591                     	;# 
  2057  0592                     	;# 
  2058  0592                     	;# 
  2059  0593                     	;# 
  2060  0594                     	;# 
  2061  0594                     	;# 
  2062  0595                     	;# 
  2063  0596                     	;# 
  2064  0596                     	;# 
  2065  0597                     	;# 
  2066  0598                     	;# 
  2067  0599                     	;# 
  2068  059A                     	;# 
  2069  059B                     	;# 
  2070  059B                     	;# 
  2071  059C                     	;# 
  2072  059D                     	;# 
  2073  060C                     	;# 
  2074  060C                     	;# 
  2075  060D                     	;# 
  2076  060E                     	;# 
  2077  060F                     	;# 
  2078  060F                     	;# 
  2079  0610                     	;# 
  2080  0611                     	;# 
  2081  0612                     	;# 
  2082  0613                     	;# 
  2083  0614                     	;# 
  2084  0617                     	;# 
  2085  0617                     	;# 
  2086  0618                     	;# 
  2087  0619                     	;# 
  2088  061A                     	;# 
  2089  061A                     	;# 
  2090  061B                     	;# 
  2091  061C                     	;# 
  2092  0691                     	;# 
  2093  0692                     	;# 
  2094  0693                     	;# 
  2095  0694                     	;# 
  2096  0695                     	;# 
  2097  0696                     	;# 
  2098  0697                     	;# 
  2099  0699                     	;# 
  2100  069A                     	;# 
  2101  0711                     	;# 
  2102  0712                     	;# 
  2103  0713                     	;# 
  2104  0714                     	;# 
  2105  0715                     	;# 
  2106  0718                     	;# 
  2107  0718                     	;# 
  2108  0719                     	;# 
  2109  071A                     	;# 
  2110  071A                     	;# 
  2111  071B                     	;# 
  2112  071C                     	;# 
  2113  071D                     	;# 
  2114  0791                     	;# 
  2115  0791                     	;# 
  2116  0792                     	;# 
  2117  0793                     	;# 
  2118  0793                     	;# 
  2119  0794                     	;# 
  2120  0795                     	;# 
  2121  0795                     	;# 
  2122  0796                     	;# 
  2123  0797                     	;# 
  2124  0797                     	;# 
  2125  0798                     	;# 
  2126  0799                     	;# 
  2127  079A                     	;# 
  2128  080C                     	;# 
  2129  080C                     	;# 
  2130  080D                     	;# 
  2131  080E                     	;# 
  2132  080E                     	;# 
  2133  080F                     	;# 
  2134  0810                     	;# 
  2135  0810                     	;# 
  2136  0811                     	;# 
  2137  0812                     	;# 
  2138  0812                     	;# 
  2139  0813                     	;# 
  2140  0814                     	;# 
  2141  0815                     	;# 
  2142  0816                     	;# 
  2143  0817                     	;# 
  2144  0818                     	;# 
  2145  0819                     	;# 
  2146  081A                     	;# 
  2147  081A                     	;# 
  2148  081B                     	;# 
  2149  081C                     	;# 
  2150  081C                     	;# 
  2151  081D                     	;# 
  2152  088C                     	;# 
  2153  088D                     	;# 
  2154  088E                     	;# 
  2155  088F                     	;# 
  2156  088F                     	;# 
  2157  0890                     	;# 
  2158  0891                     	;# 
  2159  0892                     	;# 
  2160  0893                     	;# 
  2161  0893                     	;# 
  2162  0894                     	;# 
  2163  0895                     	;# 
  2164  0896                     	;# 
  2165  0897                     	;# 
  2166  0897                     	;# 
  2167  0898                     	;# 
  2168  0899                     	;# 
  2169  0D8C                     	;# 
  2170  0D8C                     	;# 
  2171  0D8D                     	;# 
  2172  0D8E                     	;# 
  2173  0D8F                     	;# 
  2174  0D8F                     	;# 
  2175  0D90                     	;# 
  2176  0D91                     	;# 
  2177  0D92                     	;# 
  2178  0D92                     	;# 
  2179  0D93                     	;# 
  2180  0D94                     	;# 
  2181  0D95                     	;# 
  2182  0D95                     	;# 
  2183  0D96                     	;# 
  2184  0D97                     	;# 
  2185  0D98                     	;# 
  2186  0D99                     	;# 
  2187  0D9A                     	;# 
  2188  0D9B                     	;# 
  2189  0D9C                     	;# 
  2190  0D9D                     	;# 
  2191  0D9E                     	;# 
  2192  0D9E                     	;# 
  2193  0D9F                     	;# 
  2194  0DA0                     	;# 
  2195  0DA1                     	;# 
  2196  0DA1                     	;# 
  2197  0DA2                     	;# 
  2198  0DA3                     	;# 
  2199  0DA4                     	;# 
  2200  0DA4                     	;# 
  2201  0DA5                     	;# 
  2202  0DA6                     	;# 
  2203  0DA7                     	;# 
  2204  0DA7                     	;# 
  2205  0DA8                     	;# 
  2206  0DA9                     	;# 
  2207  0DAA                     	;# 
  2208  0DAB                     	;# 
  2209  0DAC                     	;# 
  2210  0DAD                     	;# 
  2211  0DAE                     	;# 
  2212  0DAF                     	;# 
  2213  0E0F                     	;# 
  2214  0E10                     	;# 
  2215  0E11                     	;# 
  2216  0E12                     	;# 
  2217  0E13                     	;# 
  2218  0E14                     	;# 
  2219  0E15                     	;# 
  2220  0E16                     	;# 
  2221  0E17                     	;# 
  2222  0E18                     	;# 
  2223  0E19                     	;# 
  2224  0E1A                     	;# 
  2225  0E1B                     	;# 
  2226  0E1C                     	;# 
  2227  0E1D                     	;# 
  2228  0E1E                     	;# 
  2229  0E1F                     	;# 
  2230  0E20                     	;# 
  2231  0E21                     	;# 
  2232  0E22                     	;# 
  2233  0E23                     	;# 
  2234  0E24                     	;# 
  2235  0E25                     	;# 
  2236  0E26                     	;# 
  2237  0E27                     	;# 
  2238  0E28                     	;# 
  2239  0E29                     	;# 
  2240  0E2A                     	;# 
  2241  0E2B                     	;# 
  2242  0E2C                     	;# 
  2243  0E2D                     	;# 
  2244  0E2E                     	;# 
  2245  0E90                     	;# 
  2246  0E91                     	;# 
  2247  0E92                     	;# 
  2248  0E94                     	;# 
  2249  0E95                     	;# 
  2250  0E9C                     	;# 
  2251  0E9D                     	;# 
  2252  0E9E                     	;# 
  2253  0E9F                     	;# 
  2254  0EA0                     	;# 
  2255  0EA1                     	;# 
  2256  0EA2                     	;# 
  2257  0EA3                     	;# 
  2258  0EA4                     	;# 
  2259  0EA5                     	;# 
  2260  0EA6                     	;# 
  2261  0EA7                     	;# 
  2262  0F0F                     	;# 
  2263  0F10                     	;# 
  2264  0F11                     	;# 
  2265  0F12                     	;# 
  2266  0F13                     	;# 
  2267  0F14                     	;# 
  2268  0F15                     	;# 
  2269  0F16                     	;# 
  2270  0F17                     	;# 
  2271  0F18                     	;# 
  2272  0F19                     	;# 
  2273  0F1A                     	;# 
  2274  0F1B                     	;# 
  2275  0F1C                     	;# 
  2276  0F1D                     	;# 
  2277  0F1E                     	;# 
  2278  0F1F                     	;# 
  2279  0F20                     	;# 
  2280  0F21                     	;# 
  2281  0F22                     	;# 
  2282  0F23                     	;# 
  2283  0F24                     	;# 
  2284  0F25                     	;# 
  2285  0F26                     	;# 
  2286  0F27                     	;# 
  2287  0F28                     	;# 
  2288  0F29                     	;# 
  2289  0F2A                     	;# 
  2290  0F2B                     	;# 
  2291  0F2C                     	;# 
  2292  0F2D                     	;# 
  2293  0F2E                     	;# 
  2294  0F2F                     	;# 
  2295  0F30                     	;# 
  2296  0F31                     	;# 
  2297  0F32                     	;# 
  2298  0F33                     	;# 
  2299  0F34                     	;# 
  2300  0F35                     	;# 
  2301  0F36                     	;# 
  2302  0F37                     	;# 
  2303  0FE4                     	;# 
  2304  0FE5                     	;# 
  2305  0FE6                     	;# 
  2306  0FE7                     	;# 
  2307  0FE8                     	;# 
  2308  0FE9                     	;# 
  2309  0FEA                     	;# 
  2310  0FEB                     	;# 
  2311  0FED                     	;# 
  2312  0FEE                     	;# 
  2313  0FEF                     	;# 
  2314  0000                     	;# 
  2315  0001                     	;# 
  2316  0002                     	;# 
  2317  0003                     	;# 
  2318  0004                     	;# 
  2319  0005                     	;# 
  2320  0006                     	;# 
  2321  0007                     	;# 
  2322  0008                     	;# 
  2323  0009                     	;# 
  2324  000A                     	;# 
  2325  000B                     	;# 
  2326  000C                     	;# 
  2327  000D                     	;# 
  2328  000E                     	;# 
  2329  0010                     	;# 
  2330  0011                     	;# 
  2331  0012                     	;# 
  2332  0013                     	;# 
  2333  0014                     	;# 
  2334  0015                     	;# 
  2335  0016                     	;# 
  2336  0016                     	;# 
  2337  0017                     	;# 
  2338  0018                     	;# 
  2339  0019                     	;# 
  2340  001A                     	;# 
  2341  001A                     	;# 
  2342  001B                     	;# 
  2343  001B                     	;# 
  2344  001C                     	;# 
  2345  001D                     	;# 
  2346  001E                     	;# 
  2347  001F                     	;# 
  2348  008C                     	;# 
  2349  008D                     	;# 
  2350  008E                     	;# 
  2351  0090                     	;# 
  2352  0091                     	;# 
  2353  0092                     	;# 
  2354  0093                     	;# 
  2355  0094                     	;# 
  2356  0095                     	;# 
  2357  0096                     	;# 
  2358  0098                     	;# 
  2359  0099                     	;# 
  2360  009A                     	;# 
  2361  009B                     	;# 
  2362  009B                     	;# 
  2363  009C                     	;# 
  2364  009D                     	;# 
  2365  009E                     	;# 
  2366  009F                     	;# 
  2367  010C                     	;# 
  2368  010D                     	;# 
  2369  010E                     	;# 
  2370  0111                     	;# 
  2371  0112                     	;# 
  2372  0113                     	;# 
  2373  0114                     	;# 
  2374  0115                     	;# 
  2375  0116                     	;# 
  2376  0117                     	;# 
  2377  0118                     	;# 
  2378  0119                     	;# 
  2379  011C                     	;# 
  2380  018C                     	;# 
  2381  018D                     	;# 
  2382  018E                     	;# 
  2383  0191                     	;# 
  2384  0191                     	;# 
  2385  0192                     	;# 
  2386  0193                     	;# 
  2387  0193                     	;# 
  2388  0194                     	;# 
  2389  0195                     	;# 
  2390  0196                     	;# 
  2391  0197                     	;# 
  2392  0199                     	;# 
  2393  0199                     	;# 
  2394  0199                     	;# 
  2395  019A                     	;# 
  2396  019A                     	;# 
  2397  019A                     	;# 
  2398  019B                     	;# 
  2399  019B                     	;# 
  2400  019B                     	;# 
  2401  019B                     	;# 
  2402  019B                     	;# 
  2403  019C                     	;# 
  2404  019C                     	;# 
  2405  019C                     	;# 
  2406  019D                     	;# 
  2407  019D                     	;# 
  2408  019D                     	;# 
  2409  019E                     	;# 
  2410  019E                     	;# 
  2411  019E                     	;# 
  2412  019F                     	;# 
  2413  019F                     	;# 
  2414  019F                     	;# 
  2415  019F                     	;# 
  2416  019F                     	;# 
  2417  020C                     	;# 
  2418  020D                     	;# 
  2419  020E                     	;# 
  2420  0211                     	;# 
  2421  0211                     	;# 
  2422  0212                     	;# 
  2423  0212                     	;# 
  2424  0213                     	;# 
  2425  0213                     	;# 
  2426  0214                     	;# 
  2427  0214                     	;# 
  2428  0215                     	;# 
  2429  0215                     	;# 
  2430  0215                     	;# 
  2431  0215                     	;# 
  2432  0216                     	;# 
  2433  0216                     	;# 
  2434  0217                     	;# 
  2435  0217                     	;# 
  2436  028C                     	;# 
  2437  028D                     	;# 
  2438  028E                     	;# 
  2439  0291                     	;# 
  2440  0291                     	;# 
  2441  0292                     	;# 
  2442  0293                     	;# 
  2443  0294                     	;# 
  2444  0298                     	;# 
  2445  0298                     	;# 
  2446  0299                     	;# 
  2447  029A                     	;# 
  2448  029B                     	;# 
  2449  029E                     	;# 
  2450  030C                     	;# 
  2451  030D                     	;# 
  2452  030E                     	;# 
  2453  038C                     	;# 
  2454  038D                     	;# 
  2455  038E                     	;# 
  2456  0391                     	;# 
  2457  0392                     	;# 
  2458  0393                     	;# 
  2459  0394                     	;# 
  2460  0395                     	;# 
  2461  0396                     	;# 
  2462  0397                     	;# 
  2463  0398                     	;# 
  2464  0399                     	;# 
  2465  040E                     	;# 
  2466  0413                     	;# 
  2467  0413                     	;# 
  2468  0414                     	;# 
  2469  0414                     	;# 
  2470  0415                     	;# 
  2471  0416                     	;# 
  2472  0417                     	;# 
  2473  0418                     	;# 
  2474  041A                     	;# 
  2475  041A                     	;# 
  2476  041B                     	;# 
  2477  041B                     	;# 
  2478  041C                     	;# 
  2479  041D                     	;# 
  2480  041E                     	;# 
  2481  041F                     	;# 
  2482  0493                     	;# 
  2483  0494                     	;# 
  2484  0495                     	;# 
  2485  0496                     	;# 
  2486  049A                     	;# 
  2487  049B                     	;# 
  2488  049C                     	;# 
  2489  049D                     	;# 
  2490  058C                     	;# 
  2491  058C                     	;# 
  2492  058D                     	;# 
  2493  058E                     	;# 
  2494  058E                     	;# 
  2495  058F                     	;# 
  2496  0590                     	;# 
  2497  0590                     	;# 
  2498  0591                     	;# 
  2499  0592                     	;# 
  2500  0592                     	;# 
  2501  0593                     	;# 
  2502  0594                     	;# 
  2503  0594                     	;# 
  2504  0595                     	;# 
  2505  0596                     	;# 
  2506  0596                     	;# 
  2507  0597                     	;# 
  2508  0598                     	;# 
  2509  0599                     	;# 
  2510  059A                     	;# 
  2511  059B                     	;# 
  2512  059B                     	;# 
  2513  059C                     	;# 
  2514  059D                     	;# 
  2515  060C                     	;# 
  2516  060C                     	;# 
  2517  060D                     	;# 
  2518  060E                     	;# 
  2519  060F                     	;# 
  2520  060F                     	;# 
  2521  0610                     	;# 
  2522  0611                     	;# 
  2523  0612                     	;# 
  2524  0613                     	;# 
  2525  0614                     	;# 
  2526  0617                     	;# 
  2527  0617                     	;# 
  2528  0618                     	;# 
  2529  0619                     	;# 
  2530  061A                     	;# 
  2531  061A                     	;# 
  2532  061B                     	;# 
  2533  061C                     	;# 
  2534  0691                     	;# 
  2535  0692                     	;# 
  2536  0693                     	;# 
  2537  0694                     	;# 
  2538  0695                     	;# 
  2539  0696                     	;# 
  2540  0697                     	;# 
  2541  0699                     	;# 
  2542  069A                     	;# 
  2543  0711                     	;# 
  2544  0712                     	;# 
  2545  0713                     	;# 
  2546  0714                     	;# 
  2547  0715                     	;# 
  2548  0718                     	;# 
  2549  0718                     	;# 
  2550  0719                     	;# 
  2551  071A                     	;# 
  2552  071A                     	;# 
  2553  071B                     	;# 
  2554  071C                     	;# 
  2555  071D                     	;# 
  2556  0791                     	;# 
  2557  0791                     	;# 
  2558  0792                     	;# 
  2559  0793                     	;# 
  2560  0793                     	;# 
  2561  0794                     	;# 
  2562  0795                     	;# 
  2563  0795                     	;# 
  2564  0796                     	;# 
  2565  0797                     	;# 
  2566  0797                     	;# 
  2567  0798                     	;# 
  2568  0799                     	;# 
  2569  079A                     	;# 
  2570  080C                     	;# 
  2571  080C                     	;# 
  2572  080D                     	;# 
  2573  080E                     	;# 
  2574  080E                     	;# 
  2575  080F                     	;# 
  2576  0810                     	;# 
  2577  0810                     	;# 
  2578  0811                     	;# 
  2579  0812                     	;# 
  2580  0812                     	;# 
  2581  0813                     	;# 
  2582  0814                     	;# 
  2583  0815                     	;# 
  2584  0816                     	;# 
  2585  0817                     	;# 
  2586  0818                     	;# 
  2587  0819                     	;# 
  2588  081A                     	;# 
  2589  081A                     	;# 
  2590  081B                     	;# 
  2591  081C                     	;# 
  2592  081C                     	;# 
  2593  081D                     	;# 
  2594  088C                     	;# 
  2595  088D                     	;# 
  2596  088E                     	;# 
  2597  088F                     	;# 
  2598  088F                     	;# 
  2599  0890                     	;# 
  2600  0891                     	;# 
  2601  0892                     	;# 
  2602  0893                     	;# 
  2603  0893                     	;# 
  2604  0894                     	;# 
  2605  0895                     	;# 
  2606  0896                     	;# 
  2607  0897                     	;# 
  2608  0897                     	;# 
  2609  0898                     	;# 
  2610  0899                     	;# 
  2611  0D8C                     	;# 
  2612  0D8C                     	;# 
  2613  0D8D                     	;# 
  2614  0D8E                     	;# 
  2615  0D8F                     	;# 
  2616  0D8F                     	;# 
  2617  0D90                     	;# 
  2618  0D91                     	;# 
  2619  0D92                     	;# 
  2620  0D92                     	;# 
  2621  0D93                     	;# 
  2622  0D94                     	;# 
  2623  0D95                     	;# 
  2624  0D95                     	;# 
  2625  0D96                     	;# 
  2626  0D97                     	;# 
  2627  0D98                     	;# 
  2628  0D99                     	;# 
  2629  0D9A                     	;# 
  2630  0D9B                     	;# 
  2631  0D9C                     	;# 
  2632  0D9D                     	;# 
  2633  0D9E                     	;# 
  2634  0D9E                     	;# 
  2635  0D9F                     	;# 
  2636  0DA0                     	;# 
  2637  0DA1                     	;# 
  2638  0DA1                     	;# 
  2639  0DA2                     	;# 
  2640  0DA3                     	;# 
  2641  0DA4                     	;# 
  2642  0DA4                     	;# 
  2643  0DA5                     	;# 
  2644  0DA6                     	;# 
  2645  0DA7                     	;# 
  2646  0DA7                     	;# 
  2647  0DA8                     	;# 
  2648  0DA9                     	;# 
  2649  0DAA                     	;# 
  2650  0DAB                     	;# 
  2651  0DAC                     	;# 
  2652  0DAD                     	;# 
  2653  0DAE                     	;# 
  2654  0DAF                     	;# 
  2655  0E0F                     	;# 
  2656  0E10                     	;# 
  2657  0E11                     	;# 
  2658  0E12                     	;# 
  2659  0E13                     	;# 
  2660  0E14                     	;# 
  2661  0E15                     	;# 
  2662  0E16                     	;# 
  2663  0E17                     	;# 
  2664  0E18                     	;# 
  2665  0E19                     	;# 
  2666  0E1A                     	;# 
  2667  0E1B                     	;# 
  2668  0E1C                     	;# 
  2669  0E1D                     	;# 
  2670  0E1E                     	;# 
  2671  0E1F                     	;# 
  2672  0E20                     	;# 
  2673  0E21                     	;# 
  2674  0E22                     	;# 
  2675  0E23                     	;# 
  2676  0E24                     	;# 
  2677  0E25                     	;# 
  2678  0E26                     	;# 
  2679  0E27                     	;# 
  2680  0E28                     	;# 
  2681  0E29                     	;# 
  2682  0E2A                     	;# 
  2683  0E2B                     	;# 
  2684  0E2C                     	;# 
  2685  0E2D                     	;# 
  2686  0E2E                     	;# 
  2687  0E90                     	;# 
  2688  0E91                     	;# 
  2689  0E92                     	;# 
  2690  0E94                     	;# 
  2691  0E95                     	;# 
  2692  0E9C                     	;# 
  2693  0E9D                     	;# 
  2694  0E9E                     	;# 
  2695  0E9F                     	;# 
  2696  0EA0                     	;# 
  2697  0EA1                     	;# 
  2698  0EA2                     	;# 
  2699  0EA3                     	;# 
  2700  0EA4                     	;# 
  2701  0EA5                     	;# 
  2702  0EA6                     	;# 
  2703  0EA7                     	;# 
  2704  0F0F                     	;# 
  2705  0F10                     	;# 
  2706  0F11                     	;# 
  2707  0F12                     	;# 
  2708  0F13                     	;# 
  2709  0F14                     	;# 
  2710  0F15                     	;# 
  2711  0F16                     	;# 
  2712  0F17                     	;# 
  2713  0F18                     	;# 
  2714  0F19                     	;# 
  2715  0F1A                     	;# 
  2716  0F1B                     	;# 
  2717  0F1C                     	;# 
  2718  0F1D                     	;# 
  2719  0F1E                     	;# 
  2720  0F1F                     	;# 
  2721  0F20                     	;# 
  2722  0F21                     	;# 
  2723  0F22                     	;# 
  2724  0F23                     	;# 
  2725  0F24                     	;# 
  2726  0F25                     	;# 
  2727  0F26                     	;# 
  2728  0F27                     	;# 
  2729  0F28                     	;# 
  2730  0F29                     	;# 
  2731  0F2A                     	;# 
  2732  0F2B                     	;# 
  2733  0F2C                     	;# 
  2734  0F2D                     	;# 
  2735  0F2E                     	;# 
  2736  0F2F                     	;# 
  2737  0F30                     	;# 
  2738  0F31                     	;# 
  2739  0F32                     	;# 
  2740  0F33                     	;# 
  2741  0F34                     	;# 
  2742  0F35                     	;# 
  2743  0F36                     	;# 
  2744  0F37                     	;# 
  2745  0FE4                     	;# 
  2746  0FE5                     	;# 
  2747  0FE6                     	;# 
  2748  0FE7                     	;# 
  2749  0FE8                     	;# 
  2750  0FE9                     	;# 
  2751  0FEA                     	;# 
  2752  0FEB                     	;# 
  2753  0FED                     	;# 
  2754  0FEE                     	;# 
  2755  0FEF                     	;# 
  2756  0000                     	;# 
  2757  0001                     	;# 
  2758  0002                     	;# 
  2759  0003                     	;# 
  2760  0004                     	;# 
  2761  0005                     	;# 
  2762  0006                     	;# 
  2763  0007                     	;# 
  2764  0008                     	;# 
  2765  0009                     	;# 
  2766  000A                     	;# 
  2767  000B                     	;# 
  2768  000C                     	;# 
  2769  000D                     	;# 
  2770  000E                     	;# 
  2771  0010                     	;# 
  2772  0011                     	;# 
  2773  0012                     	;# 
  2774  0013                     	;# 
  2775  0014                     	;# 
  2776  0015                     	;# 
  2777  0016                     	;# 
  2778  0016                     	;# 
  2779  0017                     	;# 
  2780  0018                     	;# 
  2781  0019                     	;# 
  2782  001A                     	;# 
  2783  001A                     	;# 
  2784  001B                     	;# 
  2785  001B                     	;# 
  2786  001C                     	;# 
  2787  001D                     	;# 
  2788  001E                     	;# 
  2789  001F                     	;# 
  2790  008C                     	;# 
  2791  008D                     	;# 
  2792  008E                     	;# 
  2793  0090                     	;# 
  2794  0091                     	;# 
  2795  0092                     	;# 
  2796  0093                     	;# 
  2797  0094                     	;# 
  2798  0095                     	;# 
  2799  0096                     	;# 
  2800  0098                     	;# 
  2801  0099                     	;# 
  2802  009A                     	;# 
  2803  009B                     	;# 
  2804  009B                     	;# 
  2805  009C                     	;# 
  2806  009D                     	;# 
  2807  009E                     	;# 
  2808  009F                     	;# 
  2809  010C                     	;# 
  2810  010D                     	;# 
  2811  010E                     	;# 
  2812  0111                     	;# 
  2813  0112                     	;# 
  2814  0113                     	;# 
  2815  0114                     	;# 
  2816  0115                     	;# 
  2817  0116                     	;# 
  2818  0117                     	;# 
  2819  0118                     	;# 
  2820  0119                     	;# 
  2821  011C                     	;# 
  2822  018C                     	;# 
  2823  018D                     	;# 
  2824  018E                     	;# 
  2825  0191                     	;# 
  2826  0191                     	;# 
  2827  0192                     	;# 
  2828  0193                     	;# 
  2829  0193                     	;# 
  2830  0194                     	;# 
  2831  0195                     	;# 
  2832  0196                     	;# 
  2833  0197                     	;# 
  2834  0199                     	;# 
  2835  0199                     	;# 
  2836  0199                     	;# 
  2837  019A                     	;# 
  2838  019A                     	;# 
  2839  019A                     	;# 
  2840  019B                     	;# 
  2841  019B                     	;# 
  2842  019B                     	;# 
  2843  019B                     	;# 
  2844  019B                     	;# 
  2845  019C                     	;# 
  2846  019C                     	;# 
  2847  019C                     	;# 
  2848  019D                     	;# 
  2849  019D                     	;# 
  2850  019D                     	;# 
  2851  019E                     	;# 
  2852  019E                     	;# 
  2853  019E                     	;# 
  2854  019F                     	;# 
  2855  019F                     	;# 
  2856  019F                     	;# 
  2857  019F                     	;# 
  2858  019F                     	;# 
  2859  020C                     	;# 
  2860  020D                     	;# 
  2861  020E                     	;# 
  2862  0211                     	;# 
  2863  0211                     	;# 
  2864  0212                     	;# 
  2865  0212                     	;# 
  2866  0213                     	;# 
  2867  0213                     	;# 
  2868  0214                     	;# 
  2869  0214                     	;# 
  2870  0215                     	;# 
  2871  0215                     	;# 
  2872  0215                     	;# 
  2873  0215                     	;# 
  2874  0216                     	;# 
  2875  0216                     	;# 
  2876  0217                     	;# 
  2877  0217                     	;# 
  2878  028C                     	;# 
  2879  028D                     	;# 
  2880  028E                     	;# 
  2881  0291                     	;# 
  2882  0291                     	;# 
  2883  0292                     	;# 
  2884  0293                     	;# 
  2885  0294                     	;# 
  2886  0298                     	;# 
  2887  0298                     	;# 
  2888  0299                     	;# 
  2889  029A                     	;# 
  2890  029B                     	;# 
  2891  029E                     	;# 
  2892  030C                     	;# 
  2893  030D                     	;# 
  2894  030E                     	;# 
  2895  038C                     	;# 
  2896  038D                     	;# 
  2897  038E                     	;# 
  2898  0391                     	;# 
  2899  0392                     	;# 
  2900  0393                     	;# 
  2901  0394                     	;# 
  2902  0395                     	;# 
  2903  0396                     	;# 
  2904  0397                     	;# 
  2905  0398                     	;# 
  2906  0399                     	;# 
  2907  040E                     	;# 
  2908  0413                     	;# 
  2909  0413                     	;# 
  2910  0414                     	;# 
  2911  0414                     	;# 
  2912  0415                     	;# 
  2913  0416                     	;# 
  2914  0417                     	;# 
  2915  0418                     	;# 
  2916  041A                     	;# 
  2917  041A                     	;# 
  2918  041B                     	;# 
  2919  041B                     	;# 
  2920  041C                     	;# 
  2921  041D                     	;# 
  2922  041E                     	;# 
  2923  041F                     	;# 
  2924  0493                     	;# 
  2925  0494                     	;# 
  2926  0495                     	;# 
  2927  0496                     	;# 
  2928  049A                     	;# 
  2929  049B                     	;# 
  2930  049C                     	;# 
  2931  049D                     	;# 
  2932  058C                     	;# 
  2933  058C                     	;# 
  2934  058D                     	;# 
  2935  058E                     	;# 
  2936  058E                     	;# 
  2937  058F                     	;# 
  2938  0590                     	;# 
  2939  0590                     	;# 
  2940  0591                     	;# 
  2941  0592                     	;# 
  2942  0592                     	;# 
  2943  0593                     	;# 
  2944  0594                     	;# 
  2945  0594                     	;# 
  2946  0595                     	;# 
  2947  0596                     	;# 
  2948  0596                     	;# 
  2949  0597                     	;# 
  2950  0598                     	;# 
  2951  0599                     	;# 
  2952  059A                     	;# 
  2953  059B                     	;# 
  2954  059B                     	;# 
  2955  059C                     	;# 
  2956  059D                     	;# 
  2957  060C                     	;# 
  2958  060C                     	;# 
  2959  060D                     	;# 
  2960  060E                     	;# 
  2961  060F                     	;# 
  2962  060F                     	;# 
  2963  0610                     	;# 
  2964  0611                     	;# 
  2965  0612                     	;# 
  2966  0613                     	;# 
  2967  0614                     	;# 
  2968  0617                     	;# 
  2969  0617                     	;# 
  2970  0618                     	;# 
  2971  0619                     	;# 
  2972  061A                     	;# 
  2973  061A                     	;# 
  2974  061B                     	;# 
  2975  061C                     	;# 
  2976  0691                     	;# 
  2977  0692                     	;# 
  2978  0693                     	;# 
  2979  0694                     	;# 
  2980  0695                     	;# 
  2981  0696                     	;# 
  2982  0697                     	;# 
  2983  0699                     	;# 
  2984  069A                     	;# 
  2985  0711                     	;# 
  2986  0712                     	;# 
  2987  0713                     	;# 
  2988  0714                     	;# 
  2989  0715                     	;# 
  2990  0718                     	;# 
  2991  0718                     	;# 
  2992  0719                     	;# 
  2993  071A                     	;# 
  2994  071A                     	;# 
  2995  071B                     	;# 
  2996  071C                     	;# 
  2997  071D                     	;# 
  2998  0791                     	;# 
  2999  0791                     	;# 
  3000  0792                     	;# 
  3001  0793                     	;# 
  3002  0793                     	;# 
  3003  0794                     	;# 
  3004  0795                     	;# 
  3005  0795                     	;# 
  3006  0796                     	;# 
  3007  0797                     	;# 
  3008  0797                     	;# 
  3009  0798                     	;# 
  3010  0799                     	;# 
  3011  079A                     	;# 
  3012  080C                     	;# 
  3013  080C                     	;# 
  3014  080D                     	;# 
  3015  080E                     	;# 
  3016  080E                     	;# 
  3017  080F                     	;# 
  3018  0810                     	;# 
  3019  0810                     	;# 
  3020  0811                     	;# 
  3021  0812                     	;# 
  3022  0812                     	;# 
  3023  0813                     	;# 
  3024  0814                     	;# 
  3025  0815                     	;# 
  3026  0816                     	;# 
  3027  0817                     	;# 
  3028  0818                     	;# 
  3029  0819                     	;# 
  3030  081A                     	;# 
  3031  081A                     	;# 
  3032  081B                     	;# 
  3033  081C                     	;# 
  3034  081C                     	;# 
  3035  081D                     	;# 
  3036  088C                     	;# 
  3037  088D                     	;# 
  3038  088E                     	;# 
  3039  088F                     	;# 
  3040  088F                     	;# 
  3041  0890                     	;# 
  3042  0891                     	;# 
  3043  0892                     	;# 
  3044  0893                     	;# 
  3045  0893                     	;# 
  3046  0894                     	;# 
  3047  0895                     	;# 
  3048  0896                     	;# 
  3049  0897                     	;# 
  3050  0897                     	;# 
  3051  0898                     	;# 
  3052  0899                     	;# 
  3053  0D8C                     	;# 
  3054  0D8C                     	;# 
  3055  0D8D                     	;# 
  3056  0D8E                     	;# 
  3057  0D8F                     	;# 
  3058  0D8F                     	;# 
  3059  0D90                     	;# 
  3060  0D91                     	;# 
  3061  0D92                     	;# 
  3062  0D92                     	;# 
  3063  0D93                     	;# 
  3064  0D94                     	;# 
  3065  0D95                     	;# 
  3066  0D95                     	;# 
  3067  0D96                     	;# 
  3068  0D97                     	;# 
  3069  0D98                     	;# 
  3070  0D99                     	;# 
  3071  0D9A                     	;# 
  3072  0D9B                     	;# 
  3073  0D9C                     	;# 
  3074  0D9D                     	;# 
  3075  0D9E                     	;# 
  3076  0D9E                     	;# 
  3077  0D9F                     	;# 
  3078  0DA0                     	;# 
  3079  0DA1                     	;# 
  3080  0DA1                     	;# 
  3081  0DA2                     	;# 
  3082  0DA3                     	;# 
  3083  0DA4                     	;# 
  3084  0DA4                     	;# 
  3085  0DA5                     	;# 
  3086  0DA6                     	;# 
  3087  0DA7                     	;# 
  3088  0DA7                     	;# 
  3089  0DA8                     	;# 
  3090  0DA9                     	;# 
  3091  0DAA                     	;# 
  3092  0DAB                     	;# 
  3093  0DAC                     	;# 
  3094  0DAD                     	;# 
  3095  0DAE                     	;# 
  3096  0DAF                     	;# 
  3097  0E0F                     	;# 
  3098  0E10                     	;# 
  3099  0E11                     	;# 
  3100  0E12                     	;# 
  3101  0E13                     	;# 
  3102  0E14                     	;# 
  3103  0E15                     	;# 
  3104  0E16                     	;# 
  3105  0E17                     	;# 
  3106  0E18                     	;# 
  3107  0E19                     	;# 
  3108  0E1A                     	;# 
  3109  0E1B                     	;# 
  3110  0E1C                     	;# 
  3111  0E1D                     	;# 
  3112  0E1E                     	;# 
  3113  0E1F                     	;# 
  3114  0E20                     	;# 
  3115  0E21                     	;# 
  3116  0E22                     	;# 
  3117  0E23                     	;# 
  3118  0E24                     	;# 
  3119  0E25                     	;# 
  3120  0E26                     	;# 
  3121  0E27                     	;# 
  3122  0E28                     	;# 
  3123  0E29                     	;# 
  3124  0E2A                     	;# 
  3125  0E2B                     	;# 
  3126  0E2C                     	;# 
  3127  0E2D                     	;# 
  3128  0E2E                     	;# 
  3129  0E90                     	;# 
  3130  0E91                     	;# 
  3131  0E92                     	;# 
  3132  0E94                     	;# 
  3133  0E95                     	;# 
  3134  0E9C                     	;# 
  3135  0E9D                     	;# 
  3136  0E9E                     	;# 
  3137  0E9F                     	;# 
  3138  0EA0                     	;# 
  3139  0EA1                     	;# 
  3140  0EA2                     	;# 
  3141  0EA3                     	;# 
  3142  0EA4                     	;# 
  3143  0EA5                     	;# 
  3144  0EA6                     	;# 
  3145  0EA7                     	;# 
  3146  0F0F                     	;# 
  3147  0F10                     	;# 
  3148  0F11                     	;# 
  3149  0F12                     	;# 
  3150  0F13                     	;# 
  3151  0F14                     	;# 
  3152  0F15                     	;# 
  3153  0F16                     	;# 
  3154  0F17                     	;# 
  3155  0F18                     	;# 
  3156  0F19                     	;# 
  3157  0F1A                     	;# 
  3158  0F1B                     	;# 
  3159  0F1C                     	;# 
  3160  0F1D                     	;# 
  3161  0F1E                     	;# 
  3162  0F1F                     	;# 
  3163  0F20                     	;# 
  3164  0F21                     	;# 
  3165  0F22                     	;# 
  3166  0F23                     	;# 
  3167  0F24                     	;# 
  3168  0F25                     	;# 
  3169  0F26                     	;# 
  3170  0F27                     	;# 
  3171  0F28                     	;# 
  3172  0F29                     	;# 
  3173  0F2A                     	;# 
  3174  0F2B                     	;# 
  3175  0F2C                     	;# 
  3176  0F2D                     	;# 
  3177  0F2E                     	;# 
  3178  0F2F                     	;# 
  3179  0F30                     	;# 
  3180  0F31                     	;# 
  3181  0F32                     	;# 
  3182  0F33                     	;# 
  3183  0F34                     	;# 
  3184  0F35                     	;# 
  3185  0F36                     	;# 
  3186  0F37                     	;# 
  3187  0FE4                     	;# 
  3188  0FE5                     	;# 
  3189  0FE6                     	;# 
  3190  0FE7                     	;# 
  3191  0FE8                     	;# 
  3192  0FE9                     	;# 
  3193  0FEA                     	;# 
  3194  0FEB                     	;# 
  3195  0FED                     	;# 
  3196  0FEE                     	;# 
  3197  0FEF                     	;# 
  3198                           
  3199                           	psect	idataBANK3
  3200  1E98                     __pidataBANK3:	
  3201                           
  3202                           ;initializer for _messages
  3203  1E98  34A0               	retlw	low (_message_start| (0+512))
  3204  1E99  3402               	retlw	high (_message_start| (0+512))
  3205  1E9A  3420               	retlw	low (_message_end| (0+768))
  3206  1E9B  3403               	retlw	high (_message_end| (0+768))
  3207                           
  3208                           	psect	nvBANK2
  3209  0167                     __pnvBANK2:	
  3210  0167                     _TMR0_InterruptHandler:	
  3211  0167                     	ds	2
  3212  0169                     _timer0ReloadVal:	
  3213  0169                     	ds	1
  3214  0015                     _TMR0	set	21
  3215  0011                     _PIR2bits	set	17
  3216  000B                     _INTCONbits	set	11
  3217  0010                     _PIR1bits	set	16
  3218  0095                     _OPTION_REG	set	149
  3219  0090                     _PIE1bits	set	144
  3220  0091                     _PIE2bits	set	145
  3221  0095                     _OPTION_REGbits	set	149
  3222  008E                     _TRISC	set	142
  3223  008D                     _TRISB	set	141
  3224  008C                     _TRISA	set	140
  3225  0098                     _OSCTUNE	set	152
  3226  0099                     _OSCCON	set	153
  3227  010E                     _LATCbits	set	270
  3228  010E                     _LATC	set	270
  3229  010D                     _LATB	set	269
  3230  010C                     _LATA	set	268
  3231  0116                     _BORCON	set	278
  3232  019C                     _SPBRGH	set	412
  3233  019B                     _SPBRGL	set	411
  3234  019E                     _TX1STA	set	414
  3235  019D                     _RC1STA	set	413
  3236  019F                     _BAUD1CON	set	415
  3237  018C                     _ANSELA	set	396
  3238  018D                     _ANSELB	set	397
  3239  018E                     _ANSELC	set	398
  3240  0211                     _SSP1BUF	set	529
  3241  0216                     _SSP1CON2bits	set	534
  3242  0215                     _SSP1CON1bits	set	533
  3243  0212                     _SSP1ADD	set	530
  3244  0217                     _SSP1CON3	set	535
  3245  0215                     _SSP1CON1	set	533
  3246  0214                     _SSP1STAT	set	532
  3247  020E                     _WPUC	set	526
  3248  020C                     _WPUA	set	524
  3249  020D                     _WPUB	set	525
  3250  028E                     _ODCONC	set	654
  3251  028D                     _ODCONB	set	653
  3252  028C                     _ODCONA	set	652
  3253  030E                     _SLRCONC	set	782
  3254  030D                     _SLRCONB	set	781
  3255  030C                     _SLRCONA	set	780
  3256  0E20                     _SSPCLKPPS	set	3616
  3257  0E21                     _SSPDATPPS	set	3617
  3258  0E24                     _RXPPS	set	3620
  3259  0E9C                     _RB4PPS	set	3740
  3260  0E9F                     _RB7PPS	set	3743
  3261  0E9E                     _RB6PPS	set	3742
  3262                           
  3263                           ; #config settings
  3264  0000                     
  3265                           	psect	cinit
  3266  0025                     start_initialization:	
  3267  0025                     __initialization:	
  3268                           
  3269                           ; Initialize objects allocated to BANK3
  3270  0025  0023               	movlb	3	; select bank3
  3271  0026  319E  2698  3180   	fcall	__pidataBANK3	;fetch initializer
  3272  0029  00EC               	movwf	__pdataBANK3& (0+127)
  3273  002A  319E  2699  3180   	fcall	__pidataBANK3+1	;fetch initializer
  3274  002D  00ED               	movwf	(__pdataBANK3+1)& (0+127)
  3275  002E  319E  269A  3180   	fcall	__pidataBANK3+2	;fetch initializer
  3276  0031  00EE               	movwf	(__pdataBANK3+2)& (0+127)
  3277  0032  319E  269B  3180   	fcall	__pidataBANK3+3	;fetch initializer
  3278  0035  00EF               	movwf	(__pdataBANK3+3)& (0+127)
  3279                           
  3280                           ; Clear objects allocated to COMMON
  3281  0036  01F9               	clrf	__pbssCOMMON& (0+127)
  3282  0037  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  3283  0038  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  3284  0039  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  3285                           
  3286                           ; Clear objects allocated to BANK2
  3287  003A  3020               	movlw	low __pbssBANK2
  3288  003B  0084               	movwf	4
  3289  003C  3001               	movlw	high __pbssBANK2
  3290  003D  0085               	movwf	5
  3291  003E  302F               	movlw	47
  3292  003F  319E  26A2  3180   	fcall	clear_ram0
  3293                           
  3294                           ; Clear objects allocated to BANK3
  3295  0042  30E4               	movlw	low __pbssBANK3
  3296  0043  0084               	movwf	4
  3297  0044  3001               	movlw	high __pbssBANK3
  3298  0045  0085               	movwf	5
  3299  0046  3008               	movlw	8
  3300  0047  319E  26A2  3180   	fcall	clear_ram0
  3301                           
  3302                           ; Clear objects allocated to BANK4
  3303  004A  3020               	movlw	low __pbssBANK4
  3304  004B  0084               	movwf	4
  3305  004C  3002               	movlw	high __pbssBANK4
  3306  004D  0085               	movwf	5
  3307  004E  301A               	movlw	26
  3308  004F  319E  26A2  3180   	fcall	clear_ram0
  3309                           
  3310                           ; Clear objects allocated to BANK5
  3311  0052  30A0               	movlw	low __pbssBANK5
  3312  0053  0084               	movwf	4
  3313  0054  3002               	movlw	high __pbssBANK5
  3314  0055  0085               	movwf	5
  3315  0056  3046               	movlw	70
  3316  0057  319E  26A2  3180   	fcall	clear_ram0
  3317                           
  3318                           ; Clear objects allocated to BANK6
  3319  005A  3020               	movlw	low __pbssBANK6
  3320  005B  0084               	movwf	4
  3321  005C  3003               	movlw	high __pbssBANK6
  3322  005D  0085               	movwf	5
  3323  005E  3049               	movlw	73
  3324  005F  319E  26A2         	fcall	clear_ram0
  3325  0061                     end_of_initialization:	
  3326                           ;End of C runtime variable initialization code
  3327                           
  3328  0061                     __end_of__initialization:	
  3329  0061  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3330  0062  0020               	movlb	0
  3331  0063  3193  2B0C         	ljmp	_main	;jump to C main() function
  3332                           
  3333                           	psect	bssCOMMON
  3334  0079                     __pbssCOMMON:	
  3335  0079                     _p_i2c_current:	
  3336  0079                     	ds	1
  3337  007A                     _p_i2c_trb_current:	
  3338  007A                     	ds	1
  3339  007B                     I2C_ISR@i2c_address:	
  3340  007B                     	ds	2
  3341                           
  3342                           	psect	bssBANK2
  3343  0120                     __pbssBANK2:	
  3344  0120                     bme280_get_sensor_data@F273:	
  3345  0120                     	ds	12
  3346  012C                     _checksum:	
  3347  012C                     	ds	6
  3348  0132                     _i2c_object:	
  3349  0132                     	ds	5
  3350  0137                     _ticks:	
  3351  0137                     	ds	4
  3352  013B                     I2C_ISR@pi2c_buf_ptr:	
  3353  013B                     	ds	2
  3354  013D                     I2C_ISR@i2c_10bit_address_restart:	
  3355  013D                     	ds	1
  3356  013E                     I2C_ISR@i2c_bytes_left:	
  3357  013E                     	ds	1
  3358  013F                     _i2c_trb_count:	
  3359  013F                     	ds	1
  3360  0140                     _i2c_state:	
  3361  0140                     	ds	1
  3362  0141                     I2C_MasterRead@trBlock:	
  3363  0141                     	ds	5
  3364  0146                     I2C_MasterWrite@trBlock:	
  3365  0146                     	ds	5
  3366  014B                     _i2c_tr_queue:	
  3367  014B                     	ds	4
  3368                           
  3369                           	psect	bssBANK3
  3370  01E4                     __pbssBANK3:	
  3371  01E4                     bme280_get_sensor_data@F271:	
  3372  01E4                     	ds	8
  3373                           
  3374                           	psect	dataBANK3
  3375  01EC                     __pdataBANK3:	
  3376  01EC                     _messages:	
  3377  01EC                     	ds	4
  3378                           
  3379                           	psect	bssBANK4
  3380  0220                     __pbssBANK4:	
  3381  0220                     get_calib_data@F375:	
  3382  0220                     	ds	26
  3383                           
  3384                           	psect	bssBANK5
  3385  02A0                     __pbssBANK5:	
  3386  02A0                     _message_start:	
  3387  02A0                     	ds	70
  3388                           
  3389                           	psect	bssBANK6
  3390  0320                     __pbssBANK6:	
  3391  0320                     _message_end:	
  3392  0320                     	ds	73
  3393                           
  3394                           	psect	clrtext
  3395  1EA2                     clear_ram0:	
  3396                           ;	Called with FSR0 containing the base address, and
  3397                           ;	WREG with the size to clear
  3398                           
  3399  1EA2  0064               	clrwdt	;clear the watchdog before getting into this loop
  3400  1EA3                     clrloop0:	
  3401  1EA3  0180               	clrf	0	;clear RAM location pointed to by FSR
  3402  1EA4  3101               	addfsr 0,1
  3403  1EA5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3404  1EA6  2EA3               	goto	clrloop0	;have we reached the end yet?
  3405  1EA7  3400               	retlw	0	;all done for this memory range, return
  3406                           
  3407                           	psect	cstackBANK3
  3408  01A0                     __pcstackBANK3:	
  3409  01A0                     	ds	3
  3410  01A3                     main@i:	
  3411                           
  3412                           ; 2 bytes @ 0x3
  3413  01A3                     	ds	2
  3414  01A5                     main@sensor_data:	
  3415                           
  3416                           ; 12 bytes @ 0x5
  3417  01A5                     	ds	12
  3418  01B1                     main@env_sensor:	
  3419                           
  3420                           ; 51 bytes @ 0x11
  3421  01B1                     	ds	51
  3422                           
  3423                           	psect	cstackBANK2
  3424  014F                     __pcstackBANK2:	
  3425  014F                     bme280_get_sensor_data@reg_data:	
  3426                           
  3427                           ; 8 bytes @ 0x0
  3428  014F                     	ds	8
  3429  0157                     bme280_get_sensor_data@sensor_comp:	
  3430                           
  3431                           ; 1 bytes @ 0x8
  3432  0157                     	ds	1
  3433  0158                     bme280_get_sensor_data@rslt:	
  3434                           
  3435                           ; 1 bytes @ 0x9
  3436  0158                     	ds	1
  3437  0159                     bme280_get_sensor_data@uncomp_data:	
  3438                           
  3439                           ; 12 bytes @ 0xA
  3440  0159                     	ds	12
  3441  0165                     ??_main:	
  3442                           
  3443                           ; 1 bytes @ 0x16
  3444  0165                     	ds	2
  3445                           
  3446                           	psect	cstackBANK1
  3447  00A0                     __pcstackBANK1:	
  3448  00A0                     	ds	8
  3449  00A8                     _compensate_pressure$2394:	
  3450                           
  3451                           ; 8 bytes @ 0x8
  3452  00A8                     	ds	8
  3453  00B0                     _compensate_pressure$2395:	
  3454                           
  3455                           ; 8 bytes @ 0x10
  3456  00B0                     	ds	8
  3457  00B8                     compensate_pressure@uncomp_data:	
  3458                           
  3459                           ; 1 bytes @ 0x18
  3460  00B8                     	ds	1
  3461  00B9                     compensate_pressure@pressure_max:	
  3462                           
  3463                           ; 4 bytes @ 0x19
  3464  00B9                     	ds	8
  3465  00C1                     _compensate_pressure$2393:	
  3466                           
  3467                           ; 8 bytes @ 0x21
  3468  00C1                     	ds	8
  3469  00C9                     compensate_pressure@pressure:	
  3470                           
  3471                           ; 4 bytes @ 0x29
  3472  00C9                     	ds	4
  3473  00CD                     compensate_pressure@var2:	
  3474                           
  3475                           ; 8 bytes @ 0x2D
  3476  00CD                     	ds	8
  3477  00D5                     compensate_pressure@var4:	
  3478                           
  3479                           ; 8 bytes @ 0x35
  3480  00D5                     	ds	8
  3481  00DD                     compensate_pressure@var1:	
  3482                           
  3483                           ; 8 bytes @ 0x3D
  3484  00DD                     	ds	8
  3485  00E5                     ?_bme280_compensate_data:	
  3486  00E5                     bme280_compensate_data@uncomp_data:	
  3487                           ; 1 bytes @ 0x45
  3488                           
  3489                           
  3490                           ; 1 bytes @ 0x45
  3491  00E5                     	ds	1
  3492  00E6                     bme280_compensate_data@comp_data:	
  3493                           
  3494                           ; 1 bytes @ 0x46
  3495  00E6                     	ds	1
  3496  00E7                     bme280_compensate_data@calib_data:	
  3497                           
  3498                           ; 1 bytes @ 0x47
  3499  00E7                     	ds	1
  3500  00E8                     ??_bme280_compensate_data:	
  3501                           
  3502                           ; 1 bytes @ 0x48
  3503  00E8                     	ds	1
  3504  00E9                     bme280_compensate_data@rslt:	
  3505                           
  3506                           ; 1 bytes @ 0x49
  3507  00E9                     	ds	1
  3508  00EA                     bme280_compensate_data@sensor_comp:	
  3509                           
  3510                           ; 1 bytes @ 0x4A
  3511  00EA                     	ds	1
  3512  00EB                     ?_bme280_get_sensor_data:	
  3513  00EB                     bme280_get_sensor_data@comp_data:	
  3514                           ; 1 bytes @ 0x4B
  3515                           
  3516                           
  3517                           ; 1 bytes @ 0x4B
  3518  00EB                     	ds	1
  3519  00EC                     bme280_get_sensor_data@dev:	
  3520                           
  3521                           ; 1 bytes @ 0x4C
  3522  00EC                     	ds	1
  3523  00ED                     ??_bme280_get_sensor_data:	
  3524                           
  3525                           ; 1 bytes @ 0x4D
  3526  00ED                     	ds	3
  3527                           
  3528                           	psect	cstackCOMMON
  3529  0070                     __pcstackCOMMON:	
  3530  0070                     ?_null_ptr_check:	
  3531  0070                     ?_bme280_soft_reset:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534  0070                     ?_get_calib_data:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537  0070                     ?_PIN_MANAGER_Initialize:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540  0070                     ?_OSCILLATOR_Initialize:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0070                     ?_I2C_Initialize:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0070                     ?_TMR0_Initialize:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549  0070                     ?_EUSART_Initialize:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  0070                     ?_TMR0_ISR:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555  0070                     ??_TMR0_ISR:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558  0070                     ?_I2C_BusCollisionISR:	
  3559                           ; 1 bytes @ 0x0
  3560                           
  3561  0070                     ??_I2C_BusCollisionISR:	
  3562                           ; 1 bytes @ 0x0
  3563                           
  3564  0070                     ?_I2C_ISR:	
  3565                           ; 1 bytes @ 0x0
  3566                           
  3567  0070                     ?_TMR0_DefaultInterruptHandler:	
  3568                           ; 1 bytes @ 0x0
  3569                           
  3570  0070                     ??_TMR0_DefaultInterruptHandler:	
  3571                           ; 1 bytes @ 0x0
  3572                           
  3573  0070                     ?_I2C_Stop:	
  3574                           ; 1 bytes @ 0x0
  3575                           
  3576  0070                     ??_I2C_Stop:	
  3577                           ; 1 bytes @ 0x0
  3578                           
  3579  0070                     ?_I2C_FunctionComplete:	
  3580                           ; 1 bytes @ 0x0
  3581                           
  3582  0070                     ??_I2C_FunctionComplete:	
  3583                           ; 1 bytes @ 0x0
  3584                           
  3585  0070                     ?_bme280_init:	
  3586                           ; 1 bytes @ 0x0
  3587                           
  3588  0070                     ?_SYSTEM_Initialize:	
  3589                           ; 1 bytes @ 0x0
  3590                           
  3591  0070                     ?_INTERRUPT_InterruptManager:	
  3592                           ; 1 bytes @ 0x0
  3593                           
  3594  0070                     ?_TimerISR:	
  3595                           ; 1 bytes @ 0x0
  3596                           
  3597  0070                     ??_TimerISR:	
  3598                           ; 1 bytes @ 0x0
  3599                           
  3600  0070                     ?_FlashError:	
  3601                           ; 1 bytes @ 0x0
  3602                           
  3603  0070                     ?_main:	
  3604                           ; 1 bytes @ 0x0
  3605                           
  3606  0070                     ?_I2C_WaitForLastPacketToComplete:	
  3607                           ; 1 bytes @ 0x0
  3608                           
  3609                           
  3610                           ; 1 bytes @ 0x0
  3611  0070                     	ds	2
  3612  0072                     I2C_Stop@completion_code:	
  3613                           
  3614                           ; 1 bytes @ 0x2
  3615  0072                     	ds	1
  3616  0073                     ??_I2C_ISR:	
  3617                           
  3618                           ; 1 bytes @ 0x3
  3619  0073                     	ds	2
  3620  0075                     ??_null_ptr_check:	
  3621  0075                     ?_interleave_reg_addr:	
  3622                           ; 1 bytes @ 0x5
  3623                           
  3624  0075                     ?_bme280_parse_sensor_data:	
  3625                           ; 1 bytes @ 0x5
  3626                           
  3627  0075                     ?_parse_temp_press_calib_data:	
  3628                           ; 1 bytes @ 0x5
  3629                           
  3630  0075                     ?_parse_humidity_calib_data:	
  3631                           ; 1 bytes @ 0x5
  3632                           
  3633  0075                     ??_PIN_MANAGER_Initialize:	
  3634                           ; 1 bytes @ 0x5
  3635                           
  3636  0075                     ??_OSCILLATOR_Initialize:	
  3637                           ; 1 bytes @ 0x5
  3638                           
  3639  0075                     ??_I2C_Initialize:	
  3640                           ; 1 bytes @ 0x5
  3641                           
  3642  0075                     ??_EUSART_Initialize:	
  3643                           ; 1 bytes @ 0x5
  3644                           
  3645  0075                     ?_TMR0_SetInterruptHandler:	
  3646                           ; 1 bytes @ 0x5
  3647                           
  3648  0075                     ?_I2C_MasterWriteTRBBuild:	
  3649                           ; 1 bytes @ 0x5
  3650                           
  3651  0075                     ?_I2C_MasterTRBInsert:	
  3652                           ; 1 bytes @ 0x5
  3653                           
  3654  0075                     ??_I2C_MasterReadTRBBuild:	
  3655                           ; 1 bytes @ 0x5
  3656                           
  3657  0075                     ??_INTERRUPT_InterruptManager:	
  3658                           ; 1 bytes @ 0x5
  3659                           
  3660  0075                     ??_FlashError:	
  3661                           ; 1 bytes @ 0x5
  3662                           
  3663  0075                     ?_Sleep:	
  3664                           ; 1 bytes @ 0x5
  3665                           
  3666  0075                     ??_I2C_WaitForLastPacketToComplete:	
  3667                           ; 1 bytes @ 0x5
  3668                           
  3669  0075                     ??___lmul:	
  3670                           ; 1 bytes @ 0x5
  3671                           
  3672  0075                     ??___omul:	
  3673                           ; 1 bytes @ 0x5
  3674                           
  3675  0075                     ?_strlen:	
  3676                           ; 1 bytes @ 0x5
  3677                           
  3678  0075                     bme280_parse_sensor_data@uncomp_data:	
  3679                           ; 2 bytes @ 0x5
  3680                           
  3681  0075                     interleave_reg_addr@temp_buff:	
  3682                           ; 1 bytes @ 0x5
  3683                           
  3684  0075                     parse_temp_press_calib_data@dev:	
  3685                           ; 1 bytes @ 0x5
  3686                           
  3687  0075                     parse_humidity_calib_data@dev:	
  3688                           ; 1 bytes @ 0x5
  3689                           
  3690  0075                     I2C_MasterTRBInsert@ptrb_list:	
  3691                           ; 1 bytes @ 0x5
  3692                           
  3693  0075                     I2C_MasterWriteTRBBuild@pdata:	
  3694                           ; 1 bytes @ 0x5
  3695                           
  3696  0075                     TMR0_SetInterruptHandler@InterruptHandler:	
  3697                           ; 1 bytes @ 0x5
  3698                           
  3699  0075                     strlen@s:	
  3700                           ; 2 bytes @ 0x5
  3701                           
  3702  0075                     Sleep@ms:	
  3703                           ; 2 bytes @ 0x5
  3704                           
  3705  0075                     ___lmul@product:	
  3706                           ; 4 bytes @ 0x5
  3707                           
  3708                           
  3709                           ; 4 bytes @ 0x5
  3710  0075                     	ds	1
  3711  0076                     ??_parse_temp_press_calib_data:	
  3712  0076                     ??_parse_humidity_calib_data:	
  3713                           ; 1 bytes @ 0x6
  3714                           
  3715  0076                     ??___aodiv:	
  3716                           ; 1 bytes @ 0x6
  3717                           
  3718  0076                     interleave_reg_addr@reg_data:	
  3719                           ; 1 bytes @ 0x6
  3720                           
  3721  0076                     I2C_MasterTRBInsert@pflag:	
  3722                           ; 1 bytes @ 0x6
  3723                           
  3724  0076                     I2C_MasterWriteTRBBuild@length:	
  3725                           ; 1 bytes @ 0x6
  3726                           
  3727                           
  3728                           ; 1 bytes @ 0x6
  3729  0076                     	ds	1
  3730  0077                     ??_TMR0_Initialize:	
  3731  0077                     ??_TMR0_SetInterruptHandler:	
  3732                           ; 1 bytes @ 0x7
  3733                           
  3734  0077                     ??_strlen:	
  3735                           ; 1 bytes @ 0x7
  3736                           
  3737  0077                     ??_I2C_MasterTRBInsert:	
  3738                           ; 1 bytes @ 0x7
  3739                           
  3740  0077                     interleave_reg_addr@len:	
  3741                           ; 1 bytes @ 0x7
  3742                           
  3743  0077                     parse_temp_press_calib_data@calib_data:	
  3744                           ; 1 bytes @ 0x7
  3745                           
  3746  0077                     null_ptr_check@rslt:	
  3747                           ; 1 bytes @ 0x7
  3748                           
  3749  0077                     I2C_MasterReadTRBBuild@ptrb:	
  3750                           ; 1 bytes @ 0x7
  3751                           
  3752  0077                     FlashError@i:	
  3753                           ; 1 bytes @ 0x7
  3754                           
  3755  0077                     I2C_MasterWriteTRBBuild@address:	
  3756                           ; 2 bytes @ 0x7
  3757                           
  3758  0077                     strlen@a:	
  3759                           ; 2 bytes @ 0x7
  3760                           
  3761                           
  3762                           ; 2 bytes @ 0x7
  3763  0077                     	ds	1
  3764  0078                     ??_SYSTEM_Initialize:	
  3765  0078                     parse_temp_press_calib_data@reg_data:	
  3766                           ; 1 bytes @ 0x8
  3767                           
  3768  0078                     null_ptr_check@dev:	
  3769                           ; 1 bytes @ 0x8
  3770                           
  3771  0078                     I2C_MasterTRBInsert@count:	
  3772                           ; 1 bytes @ 0x8
  3773                           
  3774                           
  3775                           ; 1 bytes @ 0x8
  3776  0078                     	ds	1
  3777                           
  3778                           	psect	cstackBANK0
  3779  0020                     __pcstackBANK0:	
  3780  0020                     ??_interleave_reg_addr:	
  3781  0020                     ??_bme280_parse_sensor_data:	
  3782                           ; 1 bytes @ 0x0
  3783                           
  3784  0020                     ??_I2C_MasterWriteTRBBuild:	
  3785                           ; 1 bytes @ 0x0
  3786                           
  3787  0020                     ?_I2C_MasterReadTRBBuild:	
  3788                           ; 1 bytes @ 0x0
  3789                           
  3790  0020                     ?_ClearString:	
  3791                           ; 1 bytes @ 0x0
  3792                           
  3793  0020                     ??_Sleep:	
  3794                           ; 1 bytes @ 0x0
  3795                           
  3796  0020                     ?___lmul:	
  3797                           ; 1 bytes @ 0x0
  3798                           
  3799  0020                     ?___omul:	
  3800                           ; 4 bytes @ 0x0
  3801                           
  3802  0020                     parse_humidity_calib_data@dig_H4_lsb:	
  3803                           ; 8 bytes @ 0x0
  3804                           
  3805  0020                     ClearString@str:	
  3806                           ; 2 bytes @ 0x0
  3807                           
  3808  0020                     I2C_MasterReadTRBBuild@pdata:	
  3809                           ; 2 bytes @ 0x0
  3810                           
  3811  0020                     ___lmul@multiplier:	
  3812                           ; 2 bytes @ 0x0
  3813                           
  3814  0020                     ___omul@multiplier:	
  3815                           ; 4 bytes @ 0x0
  3816                           
  3817                           
  3818                           ; 8 bytes @ 0x0
  3819  0020                     	ds	2
  3820  0022                     ??_ClearString:	
  3821  0022                     I2C_MasterReadTRBBuild@length:	
  3822                           ; 1 bytes @ 0x2
  3823                           
  3824  0022                     I2C_MasterWriteTRBBuild@ptrb:	
  3825                           ; 1 bytes @ 0x2
  3826                           
  3827  0022                     parse_humidity_calib_data@dig_H4_msb:	
  3828                           ; 1 bytes @ 0x2
  3829                           
  3830                           
  3831                           ; 2 bytes @ 0x2
  3832  0022                     	ds	1
  3833  0023                     ?_I2C_MasterWrite:	
  3834  0023                     interleave_reg_addr@reg_addr:	
  3835                           ; 1 bytes @ 0x3
  3836                           
  3837  0023                     I2C_MasterWrite@length:	
  3838                           ; 1 bytes @ 0x3
  3839                           
  3840  0023                     ClearString@counti:	
  3841                           ; 1 bytes @ 0x3
  3842                           
  3843  0023                     I2C_MasterReadTRBBuild@address:	
  3844                           ; 2 bytes @ 0x3
  3845                           
  3846                           
  3847                           ; 2 bytes @ 0x3
  3848  0023                     	ds	1
  3849  0024                     interleave_reg_addr@index:	
  3850  0024                     parse_humidity_calib_data@dig_H5_lsb:	
  3851                           ; 1 bytes @ 0x4
  3852                           
  3853  0024                     I2C_MasterWrite@address:	
  3854                           ; 2 bytes @ 0x4
  3855                           
  3856  0024                     Sleep@start:	
  3857                           ; 2 bytes @ 0x4
  3858                           
  3859  0024                     ___lmul@multiplicand:	
  3860                           ; 4 bytes @ 0x4
  3861                           
  3862                           
  3863                           ; 4 bytes @ 0x4
  3864  0024                     	ds	1
  3865  0025                     ?_I2C_MasterRead:	
  3866  0025                     ClearString@i:	
  3867                           ; 1 bytes @ 0x5
  3868                           
  3869  0025                     I2C_MasterRead@pdata:	
  3870                           ; 2 bytes @ 0x5
  3871                           
  3872                           
  3873                           ; 2 bytes @ 0x5
  3874  0025                     	ds	1
  3875  0026                     I2C_MasterWrite@pflag:	
  3876  0026                     parse_humidity_calib_data@dig_H5_msb:	
  3877                           ; 1 bytes @ 0x6
  3878                           
  3879                           
  3880                           ; 2 bytes @ 0x6
  3881  0026                     	ds	1
  3882  0027                     ??_I2C_MasterWrite:	
  3883  0027                     I2C_MasterRead@length:	
  3884                           ; 1 bytes @ 0x7
  3885                           
  3886                           
  3887                           ; 1 bytes @ 0x7
  3888  0027                     	ds	1
  3889  0028                     ?___aldiv:	
  3890  0028                     parse_humidity_calib_data@calib_data:	
  3891                           ; 4 bytes @ 0x8
  3892                           
  3893  0028                     I2C_MasterRead@address:	
  3894                           ; 1 bytes @ 0x8
  3895                           
  3896  0028                     bme280_parse_sensor_data@data_xlsb:	
  3897                           ; 2 bytes @ 0x8
  3898                           
  3899  0028                     ___aldiv@divisor:	
  3900                           ; 4 bytes @ 0x8
  3901                           
  3902  0028                     ___omul@multiplicand:	
  3903                           ; 4 bytes @ 0x8
  3904                           
  3905                           
  3906                           ; 8 bytes @ 0x8
  3907  0028                     	ds	1
  3908  0029                     parse_humidity_calib_data@reg_data:	
  3909  0029                     I2C_MasterWrite@pdata:	
  3910                           ; 1 bytes @ 0x9
  3911                           
  3912                           
  3913                           ; 1 bytes @ 0x9
  3914  0029                     	ds	1
  3915  002A                     ?_WriteEnvSensor:	
  3916  002A                     WriteEnvSensor@dev_id:	
  3917                           ; 1 bytes @ 0xA
  3918                           
  3919  002A                     I2C_MasterRead@pflag:	
  3920                           ; 1 bytes @ 0xA
  3921                           
  3922                           
  3923                           ; 1 bytes @ 0xA
  3924  002A                     	ds	1
  3925  002B                     ??_I2C_MasterRead:	
  3926  002B                     WriteEnvSensor@reg_addr:	
  3927                           ; 1 bytes @ 0xB
  3928                           
  3929                           
  3930                           ; 1 bytes @ 0xB
  3931  002B                     	ds	1
  3932  002C                     WriteEnvSensor@reg_data:	
  3933  002C                     bme280_parse_sensor_data@data_lsb:	
  3934                           ; 1 bytes @ 0xC
  3935                           
  3936  002C                     ___aldiv@dividend:	
  3937                           ; 4 bytes @ 0xC
  3938                           
  3939                           
  3940                           ; 4 bytes @ 0xC
  3941  002C                     	ds	1
  3942  002D                     ?_ReadEnvSensor:	
  3943  002D                     ReadEnvSensor@dev_id:	
  3944                           ; 1 bytes @ 0xD
  3945                           
  3946  002D                     WriteEnvSensor@len:	
  3947                           ; 1 bytes @ 0xD
  3948                           
  3949                           
  3950                           ; 2 bytes @ 0xD
  3951  002D                     	ds	1
  3952  002E                     ReadEnvSensor@reg_addr:	
  3953                           
  3954                           ; 1 bytes @ 0xE
  3955  002E                     	ds	1
  3956  002F                     ??_WriteEnvSensor:	
  3957  002F                     ReadEnvSensor@data:	
  3958                           ; 1 bytes @ 0xF
  3959                           
  3960                           
  3961                           ; 2 bytes @ 0xF
  3962  002F                     	ds	1
  3963  0030                     ??___aldiv:	
  3964  0030                     bme280_parse_sensor_data@data_msb:	
  3965                           ; 1 bytes @ 0x10
  3966                           
  3967  0030                     ___omul@product:	
  3968                           ; 4 bytes @ 0x10
  3969                           
  3970                           
  3971                           ; 8 bytes @ 0x10
  3972  0030                     	ds	1
  3973  0031                     ___aldiv@counter:	
  3974  0031                     ReadEnvSensor@len:	
  3975                           ; 1 bytes @ 0x11
  3976                           
  3977                           
  3978                           ; 2 bytes @ 0x11
  3979  0031                     	ds	1
  3980  0032                     ___aldiv@sign:	
  3981                           
  3982                           ; 1 bytes @ 0x12
  3983  0032                     	ds	1
  3984  0033                     ??_ReadEnvSensor:	
  3985  0033                     WriteEnvSensor@local_address:	
  3986                           ; 1 bytes @ 0x13
  3987                           
  3988  0033                     ___aldiv@quotient:	
  3989                           ; 1 bytes @ 0x13
  3990                           
  3991                           
  3992                           ; 4 bytes @ 0x13
  3993  0033                     	ds	1
  3994  0034                     bme280_parse_sensor_data@reg_data:	
  3995  0034                     WriteEnvSensor@status:	
  3996                           ; 1 bytes @ 0x14
  3997                           
  3998                           
  3999                           ; 1 bytes @ 0x14
  4000  0034                     	ds	1
  4001  0035                     ?_bme280_set_regs:	
  4002  0035                     bme280_set_regs@reg_data:	
  4003                           ; 1 bytes @ 0x15
  4004                           
  4005                           
  4006                           ; 1 bytes @ 0x15
  4007  0035                     	ds	1
  4008  0036                     bme280_set_regs@len:	
  4009                           
  4010                           ; 1 bytes @ 0x16
  4011  0036                     	ds	1
  4012  0037                     ?_compensate_temperature:	
  4013  0037                     ?_compensate_humidity:	
  4014                           ; 4 bytes @ 0x17
  4015                           
  4016  0037                     bme280_set_regs@dev:	
  4017                           ; 4 bytes @ 0x17
  4018                           
  4019  0037                     compensate_temperature@calib_data:	
  4020                           ; 1 bytes @ 0x17
  4021                           
  4022  0037                     compensate_humidity@calib_data:	
  4023                           ; 1 bytes @ 0x17
  4024                           
  4025  0037                     ReadEnvSensor@status:	
  4026                           ; 1 bytes @ 0x17
  4027                           
  4028                           
  4029                           ; 1 bytes @ 0x17
  4030  0037                     	ds	1
  4031  0038                     ?_bme280_get_regs:	
  4032  0038                     ??_bme280_set_regs:	
  4033                           ; 1 bytes @ 0x18
  4034                           
  4035  0038                     ?___aodiv:	
  4036                           ; 1 bytes @ 0x18
  4037                           
  4038  0038                     bme280_get_regs@reg_data:	
  4039                           ; 8 bytes @ 0x18
  4040                           
  4041  0038                     ___aodiv@divisor:	
  4042                           ; 2 bytes @ 0x18
  4043                           
  4044                           
  4045                           ; 8 bytes @ 0x18
  4046  0038                     	ds	2
  4047  003A                     bme280_get_regs@len:	
  4048                           
  4049                           ; 2 bytes @ 0x1A
  4050  003A                     	ds	1
  4051  003B                     ??_compensate_temperature:	
  4052  003B                     ??_compensate_humidity:	
  4053                           ; 1 bytes @ 0x1B
  4054                           
  4055  003B                     bme280_set_regs@temp_buff:	
  4056                           ; 1 bytes @ 0x1B
  4057                           
  4058                           
  4059                           ; 20 bytes @ 0x1B
  4060  003B                     	ds	1
  4061  003C                     bme280_get_regs@dev:	
  4062                           
  4063                           ; 1 bytes @ 0x1C
  4064  003C                     	ds	1
  4065  003D                     ??_bme280_get_regs:	
  4066                           
  4067                           ; 1 bytes @ 0x1D
  4068  003D                     	ds	2
  4069  003F                     bme280_get_regs@reg_addr:	
  4070                           
  4071                           ; 1 bytes @ 0x1F
  4072  003F                     	ds	1
  4073  0040                     bme280_get_regs@rslt:	
  4074  0040                     ___aodiv@dividend:	
  4075                           ; 1 bytes @ 0x20
  4076                           
  4077                           
  4078                           ; 8 bytes @ 0x20
  4079  0040                     	ds	1
  4080  0041                     ??_get_calib_data:	
  4081                           
  4082                           ; 1 bytes @ 0x21
  4083  0041                     	ds	2
  4084  0043                     _compensate_humidity$2396:	
  4085  0043                     get_calib_data@calib_data:	
  4086                           ; 4 bytes @ 0x23
  4087                           
  4088                           
  4089                           ; 26 bytes @ 0x23
  4090  0043                     	ds	2
  4091  0045                     _compensate_temperature$2392:	
  4092                           
  4093                           ; 4 bytes @ 0x25
  4094  0045                     	ds	2
  4095  0047                     compensate_humidity@uncomp_data:	
  4096                           
  4097                           ; 1 bytes @ 0x27
  4098  0047                     	ds	1
  4099  0048                     ___aodiv@counter:	
  4100                           
  4101                           ; 1 bytes @ 0x28
  4102  0048                     	ds	1
  4103  0049                     ___aodiv@sign:	
  4104                           
  4105                           ; 1 bytes @ 0x29
  4106  0049                     	ds	1
  4107  004A                     ___aodiv@quotient:	
  4108                           
  4109                           ; 8 bytes @ 0x2A
  4110  004A                     	ds	2
  4111  004C                     compensate_humidity@humidity:	
  4112                           
  4113                           ; 4 bytes @ 0x2C
  4114  004C                     	ds	1
  4115  004D                     compensate_temperature@temperature_max:	
  4116                           
  4117                           ; 4 bytes @ 0x2D
  4118  004D                     	ds	2
  4119  004F                     bme280_set_regs@temp_len:	
  4120                           
  4121                           ; 2 bytes @ 0x2F
  4122  004F                     	ds	1
  4123  0050                     compensate_humidity@var1:	
  4124                           
  4125                           ; 4 bytes @ 0x30
  4126  0050                     	ds	1
  4127  0051                     bme280_set_regs@reg_addr_cnt:	
  4128  0051                     compensate_temperature@var1:	
  4129                           ; 1 bytes @ 0x31
  4130                           
  4131                           
  4132                           ; 4 bytes @ 0x31
  4133  0051                     	ds	1
  4134  0052                     ?_compensate_pressure:	
  4135  0052                     bme280_set_regs@rslt:	
  4136                           ; 4 bytes @ 0x32
  4137                           
  4138  0052                     compensate_pressure@calib_data:	
  4139                           ; 1 bytes @ 0x32
  4140                           
  4141                           
  4142                           ; 1 bytes @ 0x32
  4143  0052                     	ds	1
  4144  0053                     bme280_set_regs@reg_addr:	
  4145                           
  4146                           ; 1 bytes @ 0x33
  4147  0053                     	ds	1
  4148  0054                     ??_bme280_soft_reset:	
  4149  0054                     compensate_humidity@var2:	
  4150                           ; 1 bytes @ 0x34
  4151                           
  4152                           
  4153                           ; 4 bytes @ 0x34
  4154  0054                     	ds	1
  4155  0055                     compensate_temperature@uncomp_data:	
  4156                           
  4157                           ; 1 bytes @ 0x35
  4158  0055                     	ds	1
  4159  0056                     ??_compensate_pressure:	
  4160  0056                     compensate_temperature@var2:	
  4161                           ; 1 bytes @ 0x36
  4162                           
  4163                           
  4164                           ; 4 bytes @ 0x36
  4165  0056                     	ds	1
  4166  0057                     bme280_soft_reset@soft_rst_cmd:	
  4167                           
  4168                           ; 1 bytes @ 0x37
  4169  0057                     	ds	1
  4170  0058                     bme280_soft_reset@rslt:	
  4171  0058                     compensate_humidity@var4:	
  4172                           ; 1 bytes @ 0x38
  4173                           
  4174                           
  4175                           ; 4 bytes @ 0x38
  4176  0058                     	ds	1
  4177  0059                     bme280_soft_reset@reg_addr:	
  4178                           
  4179                           ; 1 bytes @ 0x39
  4180  0059                     	ds	1
  4181  005A                     bme280_soft_reset@dev:	
  4182  005A                     compensate_temperature@temperature:	
  4183                           ; 1 bytes @ 0x3A
  4184                           
  4185                           
  4186                           ; 4 bytes @ 0x3A
  4187  005A                     	ds	2
  4188  005C                     compensate_humidity@var5:	
  4189                           
  4190                           ; 4 bytes @ 0x3C
  4191  005C                     	ds	2
  4192  005E                     get_calib_data@rslt:	
  4193                           
  4194                           ; 1 bytes @ 0x3E
  4195  005E                     	ds	1
  4196  005F                     get_calib_data@dev:	
  4197                           
  4198                           ; 1 bytes @ 0x3F
  4199  005F                     	ds	1
  4200  0060                     ??_bme280_init:	
  4201  0060                     compensate_humidity@var3:	
  4202                           ; 1 bytes @ 0x40
  4203                           
  4204                           
  4205                           ; 4 bytes @ 0x40
  4206  0060                     	ds	2
  4207  0062                     bme280_init@try_count:	
  4208                           
  4209                           ; 1 bytes @ 0x42
  4210  0062                     	ds	1
  4211  0063                     bme280_init@chip_id:	
  4212                           
  4213                           ; 1 bytes @ 0x43
  4214  0063                     	ds	1
  4215  0064                     bme280_init@rslt:	
  4216                           
  4217                           ; 1 bytes @ 0x44
  4218  0064                     	ds	1
  4219  0065                     bme280_init@dev:	
  4220                           
  4221                           ; 1 bytes @ 0x45
  4222  0065                     	ds	11
  4223                           
  4224                           	psect	maintext
  4225  130C                     __pmaintext:	
  4226 ;;
  4227 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4228 ;;
  4229 ;; *************** function _main *****************
  4230 ;; Defined at:
  4231 ;;		line 650 in file "main.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  i               2    3[BANK3 ] int 
  4236 ;;  sensor_data    12    5[BANK3 ] struct bme280_data
  4237 ;;  env_sensor     51   17[BANK3 ] struct bme280_dev
  4238 ;;  id              2    0        int 
  4239 ;;  env_sensor_s    1    0        char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      void 
  4242 ;; Registers used:
  4243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : B1F/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Locals:         0       0       0       0      68       0       0       0       0       0       0       0       
      +0       0
  4251 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  4252 ;;      Totals:         0       0       0       2      68       0       0       0       0       0       0       0       
      +0       0
  4253 ;;Total ram usage:       70 bytes
  4254 ;; Hardware stack levels required when called:   10
  4255 ;; This function calls:
  4256 ;;		_ClearString
  4257 ;;		_FlashError
  4258 ;;		_SYSTEM_Initialize
  4259 ;;		_TMR0_SetInterruptHandler
  4260 ;;		_bme280_get_sensor_data
  4261 ;;		_bme280_init
  4262 ;; This function is called by:
  4263 ;;		Startup code after reset
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           
  4268                           ;psect for function _main
  4269  130C                     _main:	
  4270                           
  4271                           ;main.c: 653:     SYSTEM_Initialize();
  4272                           
  4273                           ;incstack = 0
  4274                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4275  130C  319E  26C3  3193   	fcall	_SYSTEM_Initialize
  4276                           
  4277                           ;main.c: 654:     (INTCONbits.GIE = 1);
  4278  130F  178B               	bsf	11,7	;volatile
  4279                           
  4280                           ;main.c: 655:     TMR0_SetInterruptHandler(TimerISR);
  4281  1310  30AF               	movlw	low _TimerISR
  4282  1311  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4283  1312  301E               	movlw	high _TimerISR
  4284  1313  00F6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4285  1314  319E  269C  3193   	fcall	_TMR0_SetInterruptHandler
  4286                           
  4287                           ;main.c: 661:     env_sensor.dev_id = 0x76;
  4288  1317  3076               	movlw	118
  4289  1318  00E5               	movwf	??_main^(0+256)
  4290  1319  0865               	movf	??_main^(0+256),w
  4291  131A  0023               	movlb	3	; select bank3
  4292  131B  00B2               	movwf	(main@env_sensor^(0+384)+1)
  4293                           
  4294                           ;main.c: 662:     env_sensor.intf = BME280_I2C_INTF;
  4295  131C  01B3               	clrf	(main@env_sensor^(0+384)+2)
  4296  131D  0AB3               	incf	(main@env_sensor^(0+384)+2),f
  4297                           
  4298                           ;main.c: 663:     env_sensor.read = ReadEnvSensor;
  4299  131E  309E               	movlw	low _ReadEnvSensor
  4300  131F  00B4               	movwf	(low ((main@env_sensor| (0+256)+3)))^(0+128)
  4301  1320  3010               	movlw	high _ReadEnvSensor
  4302  1321  00B5               	movwf	((low ((main@env_sensor| (0+256)+3)))^(0+128)+1)
  4303                           
  4304                           ;main.c: 664:     env_sensor.write = WriteEnvSensor;
  4305  1322  3060               	movlw	low _WriteEnvSensor
  4306  1323  00B6               	movwf	(low ((main@env_sensor| (0+256)+5)))^(0+128)
  4307  1324  3012               	movlw	high _WriteEnvSensor
  4308  1325  00B7               	movwf	((low ((main@env_sensor| (0+256)+5)))^(0+128)+1)
  4309                           
  4310                           ;main.c: 665:     env_sensor.delay_ms = Sleep;
  4311  1326  300D               	movlw	low _Sleep
  4312  1327  00B8               	movwf	(low ((main@env_sensor| (0+256)+7)))^(0+128)
  4313  1328  3011               	movlw	high _Sleep
  4314  1329  00B9               	movwf	((low ((main@env_sensor| (0+256)+7)))^(0+128)+1)
  4315  132A  30B1               	movlw	(low (main@env_sensor| (0+256)))& (0+255)
  4316  132B  3193  2372  3193   	fcall	_bme280_init
  4317  132E                     l3808:	
  4318                           
  4319                           ;main.c: 675:     {;main.c: 677:         ClearString(messages[0]);
  4320  132E  0023               	movlb	3	; select bank3
  4321  132F  086D               	movf	(_messages+1)^(0+384),w
  4322  1330  0020               	movlb	0	; select bank0
  4323  1331  00A1               	movwf	ClearString@str+1
  4324  1332  0023               	movlb	3	; select bank3
  4325  1333  086C               	movf	_messages^(0+384),w
  4326  1334  0020               	movlb	0	; select bank0
  4327  1335  00A0               	movwf	ClearString@str
  4328  1336  319F  2788  3193   	fcall	_ClearString
  4329                           
  4330                           ;main.c: 680:         if (
  4331  1339  0023               	movlb	3	; select bank3
  4332  133A  086F               	movf	((low ((_messages| (0+256)+2))+1))^(0+128),w
  4333  133B  0020               	movlb	0	; select bank0
  4334  133C  00A1               	movwf	ClearString@str+1
  4335  133D  0023               	movlb	3	; select bank3
  4336  133E  086E               	movf	(low ((_messages| (0+256)+2)))^(0+128),w
  4337  133F  0020               	movlb	0	; select bank0
  4338  1340  00A0               	movwf	ClearString@str
  4339  1341  319F  2788  3193   	fcall	_ClearString
  4340                           
  4341                           ;main.c: 687:         {;main.c: 689:             struct bme280_data sensor_data;;main.c:
      +                           690:             bme280_get_sensor_data(0x07, &sensor_data, &env_sensor);
  4342  1344  30A5               	movlw	(low (main@sensor_data| (0+256)))& (0+255)
  4343  1345  0022               	movlb	2	; select bank2
  4344  1346  00E5               	movwf	??_main^(0+256)
  4345  1347  0865               	movf	??_main^(0+256),w
  4346  1348  0021               	movlb	1	; select bank1
  4347  1349  00EB               	movwf	bme280_get_sensor_data@comp_data^(0+128)
  4348  134A  30B1               	movlw	(low (main@env_sensor| (0+256)))& (0+255)
  4349  134B  0022               	movlb	2	; select bank2
  4350  134C  00E6               	movwf	(??_main+1)^(0+256)
  4351  134D  0866               	movf	(??_main+1)^(0+256),w
  4352  134E  0021               	movlb	1	; select bank1
  4353  134F  00EC               	movwf	bme280_get_sensor_data@dev^(0+128)
  4354  1350  3007               	movlw	7
  4355  1351  3192  22AA  3193   	fcall	_bme280_get_sensor_data
  4356                           
  4357                           ;main.c: 722:         for (int i = 0; i < 1000; i++)
  4358                           
  4359                           ;main.c: 715:         }
  4360  1354  0023               	movlb	3	; select bank3
  4361  1355  01A3               	clrf	main@i^(0+384)
  4362  1356  01A4               	clrf	(main@i+1)^(0+384)
  4363  1357                     l3822:	
  4364                           
  4365                           ;main.c: 723:         {;main.c: 724:             _delay((unsigned long)((5)*(4000000/400
      +                          0.0)));
  4366  1357  3007               	movlw	7
  4367  1358  0022               	movlb	2	; select bank2
  4368  1359  00E5               	movwf	??_main^(0+256)
  4369  135A  307D               	movlw	125
  4370  135B                     u3967:	
  4371  135B  0B89               	decfsz	9,f
  4372  135C  2B5B               	goto	u3967
  4373  135D  0BE5               	decfsz	??_main^(0+256),f
  4374  135E  2B5B               	goto	u3967
  4375                           
  4376                           ;main.c: 725:         }
  4377  135F  3001               	movlw	1
  4378  1360  0023               	movlb	3	; select bank3
  4379  1361  07A3               	addwf	main@i^(0+384),f
  4380  1362  3000               	movlw	0
  4381  1363  3DA4               	addwfc	(main@i+1)^(0+384),f
  4382  1364  0824               	movf	(main@i+1)^(0+384),w
  4383  1365  3A80               	xorlw	128
  4384  1366  0022               	movlb	2	; select bank2
  4385  1367  00E5               	movwf	??_main^(0+256)
  4386  1368  3083               	movlw	131
  4387  1369  0265               	subwf	??_main^(0+256),w
  4388  136A  1D03               	skipz
  4389  136B  2B6F               	goto	u3955
  4390  136C  30E8               	movlw	232
  4391  136D  0023               	movlb	3	; select bank3
  4392  136E  0223               	subwf	main@i^(0+384),w
  4393  136F                     u3955:	
  4394  136F  1803               	btfsc	3,0
  4395  1370  2B2E               	goto	l3808
  4396  1371  2B57               	goto	l3822
  4397  1372                     __end_of_main:	
  4398                           
  4399                           	psect	text1
  4400  1372                     __ptext1:	
  4401 ;; *************** function _bme280_init *****************
  4402 ;; Defined at:
  4403 ;;		line 357 in file "BME280_driver/bme280.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  dev             1    wreg     PTR struct bme280_dev
  4406 ;;		 -> main@env_sensor(51), 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;  dev             1   69[BANK0 ] PTR struct bme280_dev
  4409 ;;		 -> main@env_sensor(51), 
  4410 ;;  rslt            1   68[BANK0 ] char 
  4411 ;;  chip_id         1   67[BANK0 ] unsigned char 
  4412 ;;  try_count       1   66[BANK0 ] unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      char 
  4415 ;; Registers used:
  4416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 1F/3
  4419 ;;		On exit  : 1F/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4423 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4426 ;;Total ram usage:        6 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    9
  4429 ;; This function calls:
  4430 ;;		_Sleep
  4431 ;;		_bme280_get_regs
  4432 ;;		_bme280_soft_reset
  4433 ;;		_get_calib_data
  4434 ;;		_null_ptr_check
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           
  4441                           ;psect for function _bme280_init
  4442  1372                     _bme280_init:	
  4443                           
  4444                           ;incstack = 0
  4445                           ; Regs used in _bme280_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4446                           ;bme280_init@dev stored from wreg
  4447  1372  0020               	movlb	0	; select bank0
  4448  1373  00E5               	movwf	bme280_init@dev
  4449                           
  4450                           ;BME280_driver/bme280.c: 357: int8_t bme280_init(struct bme280_dev *dev);BME280_driver/b
      +                          me280.c: 358: {;BME280_driver/bme280.c: 359:     int8_t rslt;;BME280_driver/bme280.c: 36
      +                          2:     uint8_t try_count = 5;
  4451  1374  3005               	movlw	5
  4452  1375  00E0               	movwf	??_bme280_init
  4453  1376  0860               	movf	??_bme280_init,w
  4454  1377  00E2               	movwf	bme280_init@try_count
  4455                           
  4456                           ;BME280_driver/bme280.c: 363:     uint8_t chip_id = 0;
  4457  1378  01E3               	clrf	bme280_init@chip_id
  4458                           
  4459                           ;BME280_driver/bme280.c: 366:     rslt = null_ptr_check(dev);
  4460  1379  0865               	movf	bme280_init@dev,w
  4461  137A  319F  2763  3193   	fcall	_null_ptr_check
  4462  137D  0020               	movlb	0	; select bank0
  4463  137E  00E0               	movwf	??_bme280_init
  4464  137F  0860               	movf	??_bme280_init,w
  4465  1380  00E4               	movwf	bme280_init@rslt
  4466                           
  4467                           ;BME280_driver/bme280.c: 369:     if (rslt == 0)
  4468  1381  0864               	movf	bme280_init@rslt,w
  4469  1382  1903               	btfsc	3,2
  4470  1383  2BCD               	goto	l3598
  4471  1384  2BD7               	goto	l55
  4472  1385                     l3580:	
  4473                           
  4474                           ;BME280_driver/bme280.c: 372:         {;BME280_driver/bme280.c: 374:             rslt = 
      +                          bme280_get_regs(0xD0, &chip_id, 1, dev);
  4475  1385  3063               	movlw	low bme280_init@chip_id
  4476  1386  00B8               	movwf	bme280_get_regs@reg_data
  4477  1387  3000               	movlw	high bme280_init@chip_id
  4478  1388  00B9               	movwf	bme280_get_regs@reg_data+1
  4479  1389  3001               	movlw	1
  4480  138A  00BA               	movwf	bme280_get_regs@len
  4481  138B  3000               	movlw	0
  4482  138C  00BB               	movwf	bme280_get_regs@len+1
  4483  138D  0865               	movf	bme280_init@dev,w
  4484  138E  00E0               	movwf	??_bme280_init
  4485  138F  0860               	movf	??_bme280_init,w
  4486  1390  00BC               	movwf	bme280_get_regs@dev
  4487  1391  30D0               	movlw	208
  4488  1392  3191  2147  3193   	fcall	_bme280_get_regs
  4489  1395  00E1               	movwf	??_bme280_init+1
  4490  1396  0861               	movf	??_bme280_init+1,w
  4491  1397  00E4               	movwf	bme280_init@rslt
  4492                           
  4493                           ;BME280_driver/bme280.c: 377:             if ((rslt == 0) && (chip_id == 0x60))
  4494  1398  0864               	movf	bme280_init@rslt,w
  4495  1399  1D03               	btfss	3,2
  4496  139A  2BB9               	goto	l3594
  4497  139B  3060               	movlw	96
  4498  139C  0663               	xorwf	bme280_init@chip_id,w
  4499  139D  1D03               	btfss	3,2
  4500  139E  2BB9               	goto	l3594
  4501                           
  4502                           ;BME280_driver/bme280.c: 378:             {;BME280_driver/bme280.c: 379:                
      +                           dev->chip_id = chip_id;
  4503  139F  0863               	movf	bme280_init@chip_id,w
  4504  13A0  00E0               	movwf	??_bme280_init
  4505  13A1  0865               	movf	bme280_init@dev,w
  4506  13A2  0086               	movwf	6
  4507  13A3  3001               	movlw	1	; select bank2/3
  4508  13A4  0087               	movwf	7
  4509  13A5  0860               	movf	??_bme280_init,w
  4510  13A6  0081               	movwf	1
  4511                           
  4512                           ;BME280_driver/bme280.c: 382:                 rslt = bme280_soft_reset(dev);
  4513  13A7  0865               	movf	bme280_init@dev,w
  4514  13A8  3190  20D4  3193   	fcall	_bme280_soft_reset
  4515  13AB  00E0               	movwf	??_bme280_init
  4516  13AC  0860               	movf	??_bme280_init,w
  4517  13AD  00E4               	movwf	bme280_init@rslt
  4518                           
  4519                           ;BME280_driver/bme280.c: 383:                 if (rslt == 0)
  4520  13AE  0864               	movf	bme280_init@rslt,w
  4521  13AF  1D03               	btfss	3,2
  4522  13B0  2BD0               	goto	l3600
  4523                           
  4524                           ;BME280_driver/bme280.c: 384:                 {;BME280_driver/bme280.c: 386:            
      +                                   rslt = get_calib_data(dev);
  4525  13B1  0865               	movf	bme280_init@dev,w
  4526  13B2  3192  2218  3193   	fcall	_get_calib_data
  4527  13B5  00E0               	movwf	??_bme280_init
  4528  13B6  0860               	movf	??_bme280_init,w
  4529  13B7  00E4               	movwf	bme280_init@rslt
  4530  13B8  2BD0               	goto	l3600
  4531  13B9                     l3594:	
  4532                           
  4533                           ;BME280_driver/bme280.c: 392:             dev->delay_ms(1);
  4534  13B9  3000               	movlw	0
  4535  13BA  00F8               	movwf	Sleep@ms+3
  4536  13BB  3000               	movlw	0
  4537  13BC  00F7               	movwf	Sleep@ms+2
  4538  13BD  3000               	movlw	0
  4539  13BE  00F6               	movwf	Sleep@ms+1
  4540  13BF  3001               	movlw	1
  4541  13C0  00F5               	movwf	Sleep@ms
  4542  13C1  0865               	movf	bme280_init@dev,w
  4543  13C2  3E07               	addlw	7
  4544  13C3  0086               	movwf	6
  4545  13C4  3001               	movlw	1	; select bank2/3
  4546  13C5  0087               	movwf	7
  4547  13C6  3F41               	moviw [1]fsr1
  4548  13C7  008A               	movwf	10
  4549  13C8  3F40               	moviw [0]fsr1
  4550  13C9  000A               	callw
  4551  13CA  3193               	pagesel	$
  4552                           
  4553                           ;BME280_driver/bme280.c: 393:             --try_count;
  4554  13CB  3001               	movlw	1
  4555  13CC  02E2               	subwf	bme280_init@try_count,f
  4556  13CD                     l3598:	
  4557                           
  4558                           ;BME280_driver/bme280.c: 371:         while (try_count)
  4559  13CD  0862               	movf	bme280_init@try_count,w
  4560  13CE  1D03               	btfss	3,2
  4561  13CF  2B85               	goto	l3580
  4562  13D0                     l3600:	
  4563                           
  4564                           ;BME280_driver/bme280.c: 397:         if (!try_count)
  4565  13D0  0862               	movf	bme280_init@try_count,w
  4566  13D1  1D03               	btfss	3,2
  4567  13D2  2BD7               	goto	l55
  4568                           
  4569                           ;BME280_driver/bme280.c: 398:         {;BME280_driver/bme280.c: 399:             rslt = 
      +                          -2;
  4570  13D3  30FE               	movlw	254
  4571  13D4  00E0               	movwf	??_bme280_init
  4572  13D5  0860               	movf	??_bme280_init,w
  4573  13D6  00E4               	movwf	bme280_init@rslt
  4574  13D7                     l55:	
  4575                           ;BME280_driver/bme280.c: 401:     }
  4576                           
  4577                           
  4578                           ;BME280_driver/bme280.c: 403:     return rslt;
  4579  13D7  0864               	movf	bme280_init@rslt,w
  4580  13D8  0008               	return
  4581  13D9                     __end_of_bme280_init:	
  4582                           
  4583                           	psect	text2
  4584  1218                     __ptext2:	
  4585 ;; *************** function _get_calib_data *****************
  4586 ;; Defined at:
  4587 ;;		line 1302 in file "BME280_driver/bme280.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  dev             1    wreg     PTR struct bme280_dev
  4590 ;;		 -> main@env_sensor(51), 
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  dev             1   63[BANK0 ] PTR struct bme280_dev
  4593 ;;		 -> main@env_sensor(51), 
  4594 ;;  calib_data     26   35[BANK0 ] unsigned char [26]
  4595 ;;  rslt            1   62[BANK0 ] char 
  4596 ;;  reg_addr        1    0        unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      char 
  4599 ;; Registers used:
  4600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 1F/0
  4603 ;;		On exit  : 1F/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;Total ram usage:       31 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    8
  4613 ;; This function calls:
  4614 ;;		_bme280_get_regs
  4615 ;;		_parse_humidity_calib_data
  4616 ;;		_parse_temp_press_calib_data
  4617 ;; This function is called by:
  4618 ;;		_bme280_init
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           
  4623                           ;psect for function _get_calib_data
  4624  1218                     _get_calib_data:	
  4625                           
  4626                           ;incstack = 0
  4627                           ; Regs used in _get_calib_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4628                           ;get_calib_data@dev stored from wreg
  4629  1218  00DF               	movwf	get_calib_data@dev
  4630                           
  4631                           ;BME280_driver/bme280.c: 1308:     uint8_t calib_data[26] = { 0 };
  4632  1219  3043               	movlw	low get_calib_data@calib_data
  4633  121A  0086               	movwf	6
  4634  121B  3000               	movlw	high get_calib_data@calib_data
  4635  121C  0087               	movwf	7
  4636  121D  301A               	movlw	26
  4637  121E  00C1               	movwf	??_get_calib_data
  4638  121F  3000               	movlw	0
  4639  1220                     u3430:	
  4640  1220  001E               	movwi fsr1++
  4641  1221  0BC1               	decfsz	??_get_calib_data,f
  4642  1222  2A20               	goto	u3430
  4643                           
  4644                           ;BME280_driver/bme280.c: 1311:     rslt = bme280_get_regs(reg_addr, calib_data, 26, dev)
      +                          ;
  4645  1223  3043               	movlw	low get_calib_data@calib_data
  4646  1224  00B8               	movwf	bme280_get_regs@reg_data
  4647  1225  3000               	movlw	high get_calib_data@calib_data
  4648  1226  00B9               	movwf	bme280_get_regs@reg_data+1
  4649  1227  301A               	movlw	26
  4650  1228  00BA               	movwf	bme280_get_regs@len
  4651  1229  3000               	movlw	0
  4652  122A  00BB               	movwf	bme280_get_regs@len+1
  4653  122B  085F               	movf	get_calib_data@dev,w
  4654  122C  00C1               	movwf	??_get_calib_data
  4655  122D  0841               	movf	??_get_calib_data,w
  4656  122E  00BC               	movwf	bme280_get_regs@dev
  4657  122F  3088               	movlw	136
  4658  1230  3191  2147  3192   	fcall	_bme280_get_regs
  4659  1233  00C2               	movwf	??_get_calib_data+1
  4660  1234  0842               	movf	??_get_calib_data+1,w
  4661  1235  00DE               	movwf	get_calib_data@rslt
  4662                           
  4663                           ;BME280_driver/bme280.c: 1312:     if (rslt == 0)
  4664  1236  085E               	movf	get_calib_data@rslt,w
  4665  1237  1D03               	btfss	3,2
  4666  1238  2A5E               	goto	l3512
  4667                           
  4668                           ;BME280_driver/bme280.c: 1313:     {;BME280_driver/bme280.c: 1317:         parse_temp_pr
      +                          ess_calib_data(calib_data, dev);
  4669  1239  085F               	movf	get_calib_data@dev,w
  4670  123A  00C1               	movwf	??_get_calib_data
  4671  123B  0841               	movf	??_get_calib_data,w
  4672  123C  00F5               	movwf	parse_temp_press_calib_data@dev
  4673  123D  3043               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  4674  123E  3197  270B  3192   	fcall	_parse_temp_press_calib_data
  4675                           
  4676                           ;BME280_driver/bme280.c: 1321:         rslt = bme280_get_regs(reg_addr, calib_data, 7, d
      +                          ev);
  4677  1241  3043               	movlw	low get_calib_data@calib_data
  4678  1242  00B8               	movwf	bme280_get_regs@reg_data
  4679  1243  3000               	movlw	high get_calib_data@calib_data
  4680  1244  00B9               	movwf	bme280_get_regs@reg_data+1
  4681  1245  3007               	movlw	7
  4682  1246  00BA               	movwf	bme280_get_regs@len
  4683  1247  3000               	movlw	0
  4684  1248  00BB               	movwf	bme280_get_regs@len+1
  4685  1249  085F               	movf	get_calib_data@dev,w
  4686  124A  00C1               	movwf	??_get_calib_data
  4687  124B  0841               	movf	??_get_calib_data,w
  4688  124C  00BC               	movwf	bme280_get_regs@dev
  4689  124D  30E1               	movlw	225
  4690  124E  3191  2147  3192   	fcall	_bme280_get_regs
  4691  1251  00C2               	movwf	??_get_calib_data+1
  4692  1252  0842               	movf	??_get_calib_data+1,w
  4693  1253  00DE               	movwf	get_calib_data@rslt
  4694                           
  4695                           ;BME280_driver/bme280.c: 1322:         if (rslt == 0)
  4696  1254  085E               	movf	get_calib_data@rslt,w
  4697  1255  1D03               	btfss	3,2
  4698  1256  2A5E               	goto	l3512
  4699                           
  4700                           ;BME280_driver/bme280.c: 1323:         {;BME280_driver/bme280.c: 1327:             parse
      +                          _humidity_calib_data(calib_data, dev);
  4701  1257  085F               	movf	get_calib_data@dev,w
  4702  1258  00C1               	movwf	??_get_calib_data
  4703  1259  0841               	movf	??_get_calib_data,w
  4704  125A  00F5               	movwf	parse_humidity_calib_data@dev
  4705  125B  3043               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  4706  125C  3194  24DF         	fcall	_parse_humidity_calib_data
  4707  125E                     l3512:	
  4708                           
  4709                           ;BME280_driver/bme280.c: 1331:     return rslt;
  4710  125E  085E               	movf	get_calib_data@rslt,w
  4711  125F  0008               	return
  4712  1260                     __end_of_get_calib_data:	
  4713                           
  4714                           	psect	text3
  4715  170B                     __ptext3:	
  4716 ;; *************** function _parse_temp_press_calib_data *****************
  4717 ;; Defined at:
  4718 ;;		line 1353 in file "BME280_driver/bme280.c"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;  reg_data        1    wreg     PTR const unsigned char 
  4721 ;;		 -> get_calib_data@calib_data(26), 
  4722 ;;  dev             1    5[COMMON] PTR struct bme280_dev
  4723 ;;		 -> main@env_sensor(51), 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  reg_data        1    8[COMMON] PTR const unsigned char 
  4726 ;;		 -> get_calib_data@calib_data(26), 
  4727 ;;  calib_data      1    7[COMMON] PTR struct bme280_calib_
  4728 ;;		 -> env_sensor.calib_data(37), main@env_sensor(51), 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4733 ;; Tracked objects:
  4734 ;;		On entry : 1F/0
  4735 ;;		On exit  : 1F/0
  4736 ;;		Unchanged: 1F/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4738 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;Total ram usage:        4 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    3
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_get_calib_data
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           
  4753                           ;psect for function _parse_temp_press_calib_data
  4754  170B                     _parse_temp_press_calib_data:	
  4755                           
  4756                           ;incstack = 0
  4757                           ; Regs used in _parse_temp_press_calib_data: [wreg-fsr1h+status,2+status,0]
  4758                           ;parse_temp_press_calib_data@reg_data stored from wreg
  4759  170B  00F8               	movwf	parse_temp_press_calib_data@reg_data
  4760                           
  4761                           ;BME280_driver/bme280.c: 1353: static void parse_temp_press_calib_data(const uint8_t *re
      +                          g_data, struct bme280_dev *dev);BME280_driver/bme280.c: 1354: {;BME280_driver/bme280.c: 
      +                          1355:     struct bme280_calib_data *calib_data = &dev->calib_data;
  4762  170C  0875               	movf	parse_temp_press_calib_data@dev,w
  4763  170D  3E09               	addlw	9
  4764  170E  00F6               	movwf	??_parse_temp_press_calib_data
  4765  170F  0876               	movf	??_parse_temp_press_calib_data,w
  4766  1710  00F7               	movwf	parse_temp_press_calib_data@calib_data
  4767                           
  4768                           ;BME280_driver/bme280.c: 1357:     calib_data->dig_T1 = (((uint16_t)reg_data[1] << 8) | 
      +                          (uint16_t)reg_data[0]);
  4769  1711  0A78               	incf	parse_temp_press_calib_data@reg_data,w
  4770  1712  0084               	movwf	4
  4771  1713  0185               	clrf	5
  4772  1714  0800               	movf	0,w
  4773  1715  00F6               	movwf	??_parse_temp_press_calib_data
  4774  1716  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4775  1717  0084               	movwf	4
  4776  1718  0185               	clrf	5
  4777  1719  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4778  171A  0086               	movwf	6
  4779  171B  3001               	movlw	1	; select bank2/3
  4780  171C  0087               	movwf	7
  4781  171D  0800               	movf	0,w
  4782  171E  3FC0               	movwi [0]fsr1
  4783  171F  0876               	movf	??_parse_temp_press_calib_data,w
  4784  1720  3FC1               	movwi [1]fsr1
  4785                           
  4786                           ;BME280_driver/bme280.c: 1358:     calib_data->dig_T2 = (int16_t)(((uint16_t)reg_data[3]
      +                           << 8) | (uint16_t)reg_data[2]);
  4787  1721  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4788  1722  3E03               	addlw	3
  4789  1723  0084               	movwf	4
  4790  1724  0185               	clrf	5
  4791  1725  0800               	movf	0,w
  4792  1726  00F6               	movwf	??_parse_temp_press_calib_data
  4793  1727  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4794  1728  3E02               	addlw	2
  4795  1729  0084               	movwf	4
  4796  172A  0185               	clrf	5
  4797  172B  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4798  172C  3E02               	addlw	2
  4799  172D  0086               	movwf	6
  4800  172E  3001               	movlw	1	; select bank2/3
  4801  172F  0087               	movwf	7
  4802  1730  0800               	movf	0,w
  4803  1731  3FC0               	movwi [0]fsr1
  4804  1732  0876               	movf	??_parse_temp_press_calib_data,w
  4805  1733  3FC1               	movwi [1]fsr1
  4806                           
  4807                           ;BME280_driver/bme280.c: 1359:     calib_data->dig_T3 = (int16_t)(((uint16_t)reg_data[5]
      +                           << 8) | (uint16_t)reg_data[4]);
  4808  1734  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4809  1735  3E05               	addlw	5
  4810  1736  0084               	movwf	4
  4811  1737  0185               	clrf	5
  4812  1738  0800               	movf	0,w
  4813  1739  00F6               	movwf	??_parse_temp_press_calib_data
  4814  173A  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4815  173B  3E04               	addlw	4
  4816  173C  0084               	movwf	4
  4817  173D  0185               	clrf	5
  4818  173E  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4819  173F  3E04               	addlw	4
  4820  1740  0086               	movwf	6
  4821  1741  3001               	movlw	1	; select bank2/3
  4822  1742  0087               	movwf	7
  4823  1743  0800               	movf	0,w
  4824  1744  3FC0               	movwi [0]fsr1
  4825  1745  0876               	movf	??_parse_temp_press_calib_data,w
  4826  1746  3FC1               	movwi [1]fsr1
  4827                           
  4828                           ;BME280_driver/bme280.c: 1360:     calib_data->dig_P1 = (((uint16_t)reg_data[7] << 8) | 
      +                          (uint16_t)reg_data[6]);
  4829  1747  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4830  1748  3E07               	addlw	7
  4831  1749  0084               	movwf	4
  4832  174A  0185               	clrf	5
  4833  174B  0800               	movf	0,w
  4834  174C  00F6               	movwf	??_parse_temp_press_calib_data
  4835  174D  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4836  174E  3E06               	addlw	6
  4837  174F  0084               	movwf	4
  4838  1750  0185               	clrf	5
  4839  1751  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4840  1752  3E06               	addlw	6
  4841  1753  0086               	movwf	6
  4842  1754  3001               	movlw	1	; select bank2/3
  4843  1755  0087               	movwf	7
  4844  1756  0800               	movf	0,w
  4845  1757  3FC0               	movwi [0]fsr1
  4846  1758  0876               	movf	??_parse_temp_press_calib_data,w
  4847  1759  3FC1               	movwi [1]fsr1
  4848                           
  4849                           ;BME280_driver/bme280.c: 1361:     calib_data->dig_P2 = (int16_t)(((uint16_t)reg_data[9]
      +                           << 8) | (uint16_t)reg_data[8]);
  4850  175A  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4851  175B  3E09               	addlw	9
  4852  175C  0084               	movwf	4
  4853  175D  0185               	clrf	5
  4854  175E  0800               	movf	0,w
  4855  175F  00F6               	movwf	??_parse_temp_press_calib_data
  4856  1760  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4857  1761  3E08               	addlw	8
  4858  1762  0084               	movwf	4
  4859  1763  0185               	clrf	5
  4860  1764  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4861  1765  3E08               	addlw	8
  4862  1766  0086               	movwf	6
  4863  1767  3001               	movlw	1	; select bank2/3
  4864  1768  0087               	movwf	7
  4865  1769  0800               	movf	0,w
  4866  176A  3FC0               	movwi [0]fsr1
  4867  176B  0876               	movf	??_parse_temp_press_calib_data,w
  4868  176C  3FC1               	movwi [1]fsr1
  4869                           
  4870                           ;BME280_driver/bme280.c: 1362:     calib_data->dig_P3 = (int16_t)(((uint16_t)reg_data[11
      +                          ] << 8) | (uint16_t)reg_data[10]);
  4871  176D  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4872  176E  3E0B               	addlw	11
  4873  176F  0084               	movwf	4
  4874  1770  0185               	clrf	5
  4875  1771  0800               	movf	0,w
  4876  1772  00F6               	movwf	??_parse_temp_press_calib_data
  4877  1773  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4878  1774  3E0A               	addlw	10
  4879  1775  0084               	movwf	4
  4880  1776  0185               	clrf	5
  4881  1777  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4882  1778  3E0A               	addlw	10
  4883  1779  0086               	movwf	6
  4884  177A  3001               	movlw	1	; select bank2/3
  4885  177B  0087               	movwf	7
  4886  177C  0800               	movf	0,w
  4887  177D  3FC0               	movwi [0]fsr1
  4888  177E  0876               	movf	??_parse_temp_press_calib_data,w
  4889  177F  3FC1               	movwi [1]fsr1
  4890                           
  4891                           ;BME280_driver/bme280.c: 1363:     calib_data->dig_P4 = (int16_t)(((uint16_t)reg_data[13
      +                          ] << 8) | (uint16_t)reg_data[12]);
  4892  1780  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4893  1781  3E0D               	addlw	13
  4894  1782  0084               	movwf	4
  4895  1783  0185               	clrf	5
  4896  1784  0800               	movf	0,w
  4897  1785  00F6               	movwf	??_parse_temp_press_calib_data
  4898  1786  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4899  1787  3E0C               	addlw	12
  4900  1788  0084               	movwf	4
  4901  1789  0185               	clrf	5
  4902  178A  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4903  178B  3E0C               	addlw	12
  4904  178C  0086               	movwf	6
  4905  178D  3001               	movlw	1	; select bank2/3
  4906  178E  0087               	movwf	7
  4907  178F  0800               	movf	0,w
  4908  1790  3FC0               	movwi [0]fsr1
  4909  1791  0876               	movf	??_parse_temp_press_calib_data,w
  4910  1792  3FC1               	movwi [1]fsr1
  4911                           
  4912                           ;BME280_driver/bme280.c: 1364:     calib_data->dig_P5 = (int16_t)(((uint16_t)reg_data[15
      +                          ] << 8) | (uint16_t)reg_data[14]);
  4913  1793  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4914  1794  3E0F               	addlw	15
  4915  1795  0084               	movwf	4
  4916  1796  0185               	clrf	5
  4917  1797  0800               	movf	0,w
  4918  1798  00F6               	movwf	??_parse_temp_press_calib_data
  4919  1799  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4920  179A  3E0E               	addlw	14
  4921  179B  0084               	movwf	4
  4922  179C  0185               	clrf	5
  4923  179D  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4924  179E  3E0E               	addlw	14
  4925  179F  0086               	movwf	6
  4926  17A0  3001               	movlw	1	; select bank2/3
  4927  17A1  0087               	movwf	7
  4928  17A2  0800               	movf	0,w
  4929  17A3  3FC0               	movwi [0]fsr1
  4930  17A4  0876               	movf	??_parse_temp_press_calib_data,w
  4931  17A5  3FC1               	movwi [1]fsr1
  4932                           
  4933                           ;BME280_driver/bme280.c: 1365:     calib_data->dig_P6 = (int16_t)(((uint16_t)reg_data[17
      +                          ] << 8) | (uint16_t)reg_data[16]);
  4934  17A6  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4935  17A7  3E11               	addlw	17
  4936  17A8  0084               	movwf	4
  4937  17A9  0185               	clrf	5
  4938  17AA  0800               	movf	0,w
  4939  17AB  00F6               	movwf	??_parse_temp_press_calib_data
  4940  17AC  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4941  17AD  3E10               	addlw	16
  4942  17AE  0084               	movwf	4
  4943  17AF  0185               	clrf	5
  4944  17B0  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4945  17B1  3E10               	addlw	16
  4946  17B2  0086               	movwf	6
  4947  17B3  3001               	movlw	1	; select bank2/3
  4948  17B4  0087               	movwf	7
  4949  17B5  0800               	movf	0,w
  4950  17B6  3FC0               	movwi [0]fsr1
  4951  17B7  0876               	movf	??_parse_temp_press_calib_data,w
  4952  17B8  3FC1               	movwi [1]fsr1
  4953                           
  4954                           ;BME280_driver/bme280.c: 1366:     calib_data->dig_P7 = (int16_t)(((uint16_t)reg_data[19
      +                          ] << 8) | (uint16_t)reg_data[18]);
  4955  17B9  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4956  17BA  3E13               	addlw	19
  4957  17BB  0084               	movwf	4
  4958  17BC  0185               	clrf	5
  4959  17BD  0800               	movf	0,w
  4960  17BE  00F6               	movwf	??_parse_temp_press_calib_data
  4961  17BF  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4962  17C0  3E12               	addlw	18
  4963  17C1  0084               	movwf	4
  4964  17C2  0185               	clrf	5
  4965  17C3  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4966  17C4  3E12               	addlw	18
  4967  17C5  0086               	movwf	6
  4968  17C6  3001               	movlw	1	; select bank2/3
  4969  17C7  0087               	movwf	7
  4970  17C8  0800               	movf	0,w
  4971  17C9  3FC0               	movwi [0]fsr1
  4972  17CA  0876               	movf	??_parse_temp_press_calib_data,w
  4973  17CB  3FC1               	movwi [1]fsr1
  4974                           
  4975                           ;BME280_driver/bme280.c: 1367:     calib_data->dig_P8 = (int16_t)(((uint16_t)reg_data[21
      +                          ] << 8) | (uint16_t)reg_data[20]);
  4976  17CC  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4977  17CD  3E15               	addlw	21
  4978  17CE  0084               	movwf	4
  4979  17CF  0185               	clrf	5
  4980  17D0  0800               	movf	0,w
  4981  17D1  00F6               	movwf	??_parse_temp_press_calib_data
  4982  17D2  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4983  17D3  3E14               	addlw	20
  4984  17D4  0084               	movwf	4
  4985  17D5  0185               	clrf	5
  4986  17D6  0877               	movf	parse_temp_press_calib_data@calib_data,w
  4987  17D7  3E14               	addlw	20
  4988  17D8  0086               	movwf	6
  4989  17D9  3001               	movlw	1	; select bank2/3
  4990  17DA  0087               	movwf	7
  4991  17DB  0800               	movf	0,w
  4992  17DC  3FC0               	movwi [0]fsr1
  4993  17DD  0876               	movf	??_parse_temp_press_calib_data,w
  4994  17DE  3FC1               	movwi [1]fsr1
  4995                           
  4996                           ;BME280_driver/bme280.c: 1368:     calib_data->dig_P9 = (int16_t)(((uint16_t)reg_data[23
      +                          ] << 8) | (uint16_t)reg_data[22]);
  4997  17DF  0878               	movf	parse_temp_press_calib_data@reg_data,w
  4998  17E0  3E17               	addlw	23
  4999  17E1  0084               	movwf	4
  5000  17E2  0185               	clrf	5
  5001  17E3  0800               	movf	0,w
  5002  17E4  00F6               	movwf	??_parse_temp_press_calib_data
  5003  17E5  0878               	movf	parse_temp_press_calib_data@reg_data,w
  5004  17E6  3E16               	addlw	22
  5005  17E7  0084               	movwf	4
  5006  17E8  0185               	clrf	5
  5007  17E9  0877               	movf	parse_temp_press_calib_data@calib_data,w
  5008  17EA  3E16               	addlw	22
  5009  17EB  0086               	movwf	6
  5010  17EC  3001               	movlw	1	; select bank2/3
  5011  17ED  0087               	movwf	7
  5012  17EE  0800               	movf	0,w
  5013  17EF  3FC0               	movwi [0]fsr1
  5014  17F0  0876               	movf	??_parse_temp_press_calib_data,w
  5015  17F1  3FC1               	movwi [1]fsr1
  5016                           
  5017                           ;BME280_driver/bme280.c: 1369:     calib_data->dig_H1 = reg_data[25];
  5018  17F2  0878               	movf	parse_temp_press_calib_data@reg_data,w
  5019  17F3  3E19               	addlw	25
  5020  17F4  0086               	movwf	6
  5021  17F5  0187               	clrf	7
  5022  17F6  0801               	movf	1,w
  5023  17F7  00F6               	movwf	??_parse_temp_press_calib_data
  5024  17F8  0877               	movf	parse_temp_press_calib_data@calib_data,w
  5025  17F9  3E18               	addlw	24
  5026  17FA  0086               	movwf	6
  5027  17FB  3001               	movlw	1	; select bank2/3
  5028  17FC  0087               	movwf	7
  5029  17FD  0876               	movf	??_parse_temp_press_calib_data,w
  5030  17FE  0081               	movwf	1
  5031  17FF  0008               	return
  5032  1800                     __end_of_parse_temp_press_calib_data:	
  5033                           
  5034                           	psect	text4
  5035  14DF                     __ptext4:	
  5036 ;; *************** function _parse_humidity_calib_data *****************
  5037 ;; Defined at:
  5038 ;;		line 1376 in file "BME280_driver/bme280.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;  reg_data        1    wreg     PTR const unsigned char 
  5041 ;;		 -> get_calib_data@calib_data(26), 
  5042 ;;  dev             1    5[COMMON] PTR struct bme280_dev
  5043 ;;		 -> main@env_sensor(51), 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;  reg_data        1    9[BANK0 ] PTR const unsigned char 
  5046 ;;		 -> get_calib_data@calib_data(26), 
  5047 ;;  dig_H5_msb      2    6[BANK0 ] short 
  5048 ;;  dig_H5_lsb      2    4[BANK0 ] short 
  5049 ;;  dig_H4_msb      2    2[BANK0 ] short 
  5050 ;;  dig_H4_lsb      2    0[BANK0 ] short 
  5051 ;;  calib_data      1    8[BANK0 ] PTR struct bme280_calib_
  5052 ;;		 -> env_sensor.calib_data(37), main@env_sensor(51), 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5057 ;; Tracked objects:
  5058 ;;		On entry : 1F/0
  5059 ;;		On exit  : 1F/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5062 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;Total ram usage:       14 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    3
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_get_calib_data
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function _parse_humidity_calib_data
  5078  14DF                     _parse_humidity_calib_data:	
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _parse_humidity_calib_data: [wreg-fsr1h+status,2+status,0]
  5082                           ;parse_humidity_calib_data@reg_data stored from wreg
  5083  14DF  00A9               	movwf	parse_humidity_calib_data@reg_data
  5084                           
  5085                           ;BME280_driver/bme280.c: 1376: static void parse_humidity_calib_data(const uint8_t *reg_
      +                          data, struct bme280_dev *dev);BME280_driver/bme280.c: 1377: {;BME280_driver/bme280.c: 13
      +                          78:     struct bme280_calib_data *calib_data = &dev->calib_data;
  5086  14E0  0875               	movf	parse_humidity_calib_data@dev,w
  5087  14E1  3E09               	addlw	9
  5088  14E2  00F6               	movwf	??_parse_humidity_calib_data
  5089  14E3  0876               	movf	??_parse_humidity_calib_data,w
  5090  14E4  00A8               	movwf	parse_humidity_calib_data@calib_data
  5091                           
  5092                           ;BME280_driver/bme280.c: 1379:     int16_t dig_H4_lsb;;BME280_driver/bme280.c: 1380:    
      +                           int16_t dig_H4_msb;;BME280_driver/bme280.c: 1381:     int16_t dig_H5_lsb;;BME280_driver
      +                          /bme280.c: 1382:     int16_t dig_H5_msb;;BME280_driver/bme280.c: 1384:     calib_data->d
      +                          ig_H2 = (int16_t)(((uint16_t)reg_data[1] << 8) | (uint16_t)reg_data[0]);
  5093  14E5  0A29               	incf	parse_humidity_calib_data@reg_data,w
  5094  14E6  0084               	movwf	4
  5095  14E7  0185               	clrf	5
  5096  14E8  0800               	movf	0,w
  5097  14E9  00F6               	movwf	??_parse_humidity_calib_data
  5098  14EA  0829               	movf	parse_humidity_calib_data@reg_data,w
  5099  14EB  0084               	movwf	4
  5100  14EC  0185               	clrf	5
  5101  14ED  0828               	movf	parse_humidity_calib_data@calib_data,w
  5102  14EE  3E19               	addlw	25
  5103  14EF  0086               	movwf	6
  5104  14F0  3001               	movlw	1	; select bank2/3
  5105  14F1  0087               	movwf	7
  5106  14F2  0800               	movf	0,w
  5107  14F3  3FC0               	movwi [0]fsr1
  5108  14F4  0876               	movf	??_parse_humidity_calib_data,w
  5109  14F5  3FC1               	movwi [1]fsr1
  5110                           
  5111                           ;BME280_driver/bme280.c: 1385:     calib_data->dig_H3 = reg_data[2];
  5112  14F6  0829               	movf	parse_humidity_calib_data@reg_data,w
  5113  14F7  3E02               	addlw	2
  5114  14F8  0086               	movwf	6
  5115  14F9  0187               	clrf	7
  5116  14FA  0801               	movf	1,w
  5117  14FB  00F6               	movwf	??_parse_humidity_calib_data
  5118  14FC  0828               	movf	parse_humidity_calib_data@calib_data,w
  5119  14FD  3E1B               	addlw	27
  5120  14FE  0086               	movwf	6
  5121  14FF  3001               	movlw	1	; select bank2/3
  5122  1500  0087               	movwf	7
  5123  1501  0876               	movf	??_parse_humidity_calib_data,w
  5124  1502  0081               	movwf	1
  5125                           
  5126                           ;BME280_driver/bme280.c: 1386:     dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
  5127  1503  0829               	movf	parse_humidity_calib_data@reg_data,w
  5128  1504  3E03               	addlw	3
  5129  1505  0086               	movwf	6
  5130  1506  0187               	clrf	7
  5131  1507  0801               	movf	1,w
  5132  1508  00F6               	movwf	??_parse_humidity_calib_data
  5133  1509  01F7               	clrf	??_parse_humidity_calib_data+1
  5134  150A  1BF6               	btfsc	??_parse_humidity_calib_data,7
  5135  150B  03F7               	decf	??_parse_humidity_calib_data+1,f
  5136  150C  0EF6               	swapf	??_parse_humidity_calib_data,f
  5137  150D  0EF7               	swapf	??_parse_humidity_calib_data+1,f
  5138  150E  30F0               	movlw	240
  5139  150F  05F7               	andwf	??_parse_humidity_calib_data+1,f
  5140  1510  0876               	movf	??_parse_humidity_calib_data,w
  5141  1511  390F               	andlw	15
  5142  1512  04F7               	iorwf	??_parse_humidity_calib_data+1,f
  5143  1513  30F0               	movlw	240
  5144  1514  05F6               	andwf	??_parse_humidity_calib_data,f
  5145  1515  0876               	movf	??_parse_humidity_calib_data,w
  5146  1516  00A2               	movwf	parse_humidity_calib_data@dig_H4_msb
  5147  1517  0877               	movf	??_parse_humidity_calib_data+1,w
  5148  1518  00A3               	movwf	parse_humidity_calib_data@dig_H4_msb+1
  5149                           
  5150                           ;BME280_driver/bme280.c: 1387:     dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
  5151  1519  0829               	movf	parse_humidity_calib_data@reg_data,w
  5152  151A  3E04               	addlw	4
  5153  151B  0086               	movwf	6
  5154  151C  0187               	clrf	7
  5155  151D  0801               	movf	1,w
  5156  151E  390F               	andlw	15
  5157  151F  00F6               	movwf	??_parse_humidity_calib_data
  5158  1520  01F7               	clrf	??_parse_humidity_calib_data+1
  5159  1521  0876               	movf	??_parse_humidity_calib_data,w
  5160  1522  00A0               	movwf	parse_humidity_calib_data@dig_H4_lsb
  5161  1523  0877               	movf	??_parse_humidity_calib_data+1,w
  5162  1524  00A1               	movwf	parse_humidity_calib_data@dig_H4_lsb+1
  5163                           
  5164                           ;BME280_driver/bme280.c: 1388:     calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
  5165  1525  0820               	movf	parse_humidity_calib_data@dig_H4_lsb,w
  5166  1526  0422               	iorwf	parse_humidity_calib_data@dig_H4_msb,w
  5167  1527  00F6               	movwf	??_parse_humidity_calib_data
  5168  1528  0821               	movf	parse_humidity_calib_data@dig_H4_lsb+1,w
  5169  1529  0423               	iorwf	parse_humidity_calib_data@dig_H4_msb+1,w
  5170  152A  00F7               	movwf	??_parse_humidity_calib_data+1
  5171  152B  0828               	movf	parse_humidity_calib_data@calib_data,w
  5172  152C  3E1C               	addlw	28
  5173  152D  0086               	movwf	6
  5174  152E  3001               	movlw	1	; select bank2/3
  5175  152F  0087               	movwf	7
  5176  1530  0876               	movf	??_parse_humidity_calib_data,w
  5177  1531  3FC0               	movwi [0]fsr1
  5178  1532  0877               	movf	??_parse_humidity_calib_data+1,w
  5179  1533  3FC1               	movwi [1]fsr1
  5180                           
  5181                           ;BME280_driver/bme280.c: 1389:     dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
  5182  1534  0829               	movf	parse_humidity_calib_data@reg_data,w
  5183  1535  3E05               	addlw	5
  5184  1536  0086               	movwf	6
  5185  1537  0187               	clrf	7
  5186  1538  0801               	movf	1,w
  5187  1539  00F6               	movwf	??_parse_humidity_calib_data
  5188  153A  01F7               	clrf	??_parse_humidity_calib_data+1
  5189  153B  1BF6               	btfsc	??_parse_humidity_calib_data,7
  5190  153C  03F7               	decf	??_parse_humidity_calib_data+1,f
  5191  153D  0EF6               	swapf	??_parse_humidity_calib_data,f
  5192  153E  0EF7               	swapf	??_parse_humidity_calib_data+1,f
  5193  153F  30F0               	movlw	240
  5194  1540  05F7               	andwf	??_parse_humidity_calib_data+1,f
  5195  1541  0876               	movf	??_parse_humidity_calib_data,w
  5196  1542  390F               	andlw	15
  5197  1543  04F7               	iorwf	??_parse_humidity_calib_data+1,f
  5198  1544  30F0               	movlw	240
  5199  1545  05F6               	andwf	??_parse_humidity_calib_data,f
  5200  1546  0876               	movf	??_parse_humidity_calib_data,w
  5201  1547  00A6               	movwf	parse_humidity_calib_data@dig_H5_msb
  5202  1548  0877               	movf	??_parse_humidity_calib_data+1,w
  5203  1549  00A7               	movwf	parse_humidity_calib_data@dig_H5_msb+1
  5204                           
  5205                           ;BME280_driver/bme280.c: 1390:     dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
  5206  154A  0829               	movf	parse_humidity_calib_data@reg_data,w
  5207  154B  3E04               	addlw	4
  5208  154C  0086               	movwf	6
  5209  154D  0187               	clrf	7
  5210  154E  0801               	movf	1,w
  5211  154F  00F6               	movwf	??_parse_humidity_calib_data
  5212  1550  3004               	movlw	4
  5213  1551                     u2095:	
  5214  1551  36F6               	lsrf	??_parse_humidity_calib_data,f
  5215  1552  0B89               	decfsz	9,f
  5216  1553  2D51               	goto	u2095
  5217  1554  0876               	movf	??_parse_humidity_calib_data,w
  5218  1555  00F7               	movwf	??_parse_humidity_calib_data+1
  5219  1556  01F8               	clrf	??_parse_humidity_calib_data+2
  5220  1557  0877               	movf	??_parse_humidity_calib_data+1,w
  5221  1558  00A4               	movwf	parse_humidity_calib_data@dig_H5_lsb
  5222  1559  0878               	movf	??_parse_humidity_calib_data+2,w
  5223  155A  00A5               	movwf	parse_humidity_calib_data@dig_H5_lsb+1
  5224                           
  5225                           ;BME280_driver/bme280.c: 1391:     calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
  5226  155B  0824               	movf	parse_humidity_calib_data@dig_H5_lsb,w
  5227  155C  0426               	iorwf	parse_humidity_calib_data@dig_H5_msb,w
  5228  155D  00F6               	movwf	??_parse_humidity_calib_data
  5229  155E  0825               	movf	parse_humidity_calib_data@dig_H5_lsb+1,w
  5230  155F  0427               	iorwf	parse_humidity_calib_data@dig_H5_msb+1,w
  5231  1560  00F7               	movwf	??_parse_humidity_calib_data+1
  5232  1561  0828               	movf	parse_humidity_calib_data@calib_data,w
  5233  1562  3E1E               	addlw	30
  5234  1563  0086               	movwf	6
  5235  1564  3001               	movlw	1	; select bank2/3
  5236  1565  0087               	movwf	7
  5237  1566  0876               	movf	??_parse_humidity_calib_data,w
  5238  1567  3FC0               	movwi [0]fsr1
  5239  1568  0877               	movf	??_parse_humidity_calib_data+1,w
  5240  1569  3FC1               	movwi [1]fsr1
  5241                           
  5242                           ;BME280_driver/bme280.c: 1392:     calib_data->dig_H6 = (int8_t)reg_data[6];
  5243  156A  0829               	movf	parse_humidity_calib_data@reg_data,w
  5244  156B  3E06               	addlw	6
  5245  156C  0086               	movwf	6
  5246  156D  0187               	clrf	7
  5247  156E  0801               	movf	1,w
  5248  156F  00F6               	movwf	??_parse_humidity_calib_data
  5249  1570  0828               	movf	parse_humidity_calib_data@calib_data,w
  5250  1571  3E20               	addlw	32
  5251  1572  0086               	movwf	6
  5252  1573  3001               	movlw	1	; select bank2/3
  5253  1574  0087               	movwf	7
  5254  1575  0876               	movf	??_parse_humidity_calib_data,w
  5255  1576  0081               	movwf	1
  5256  1577  0008               	return
  5257  1578                     __end_of_parse_humidity_calib_data:	
  5258                           
  5259                           	psect	text5
  5260  10D4                     __ptext5:	
  5261 ;; *************** function _bme280_soft_reset *****************
  5262 ;; Defined at:
  5263 ;;		line 631 in file "BME280_driver/bme280.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;  dev             1    wreg     PTR const struct bme280_
  5266 ;;		 -> main@env_sensor(51), 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  dev             1   58[BANK0 ] PTR const struct bme280_
  5269 ;;		 -> main@env_sensor(51), 
  5270 ;;  reg_addr        1   57[BANK0 ] unsigned char 
  5271 ;;  rslt            1   56[BANK0 ] char 
  5272 ;;  soft_rst_cmd    1   55[BANK0 ] unsigned char 
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  1    wreg      char 
  5275 ;; Registers used:
  5276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5277 ;; Tracked objects:
  5278 ;;		On entry : 1F/0
  5279 ;;		On exit  : 1F/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5284 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;Total ram usage:        7 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    8
  5289 ;; This function calls:
  5290 ;;		_Sleep
  5291 ;;		_bme280_set_regs
  5292 ;;		_null_ptr_check
  5293 ;; This function is called by:
  5294 ;;		_bme280_init
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _bme280_soft_reset
  5300  10D4                     _bme280_soft_reset:	
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _bme280_soft_reset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5304                           ;bme280_soft_reset@dev stored from wreg
  5305  10D4  00DA               	movwf	bme280_soft_reset@dev
  5306                           
  5307                           ;BME280_driver/bme280.c: 631: int8_t bme280_soft_reset(const struct bme280_dev *dev);BME
      +                          280_driver/bme280.c: 632: {;BME280_driver/bme280.c: 633:     int8_t rslt;;BME280_driver/
      +                          bme280.c: 634:     uint8_t reg_addr = 0xE0;
  5308  10D5  30E0               	movlw	224
  5309  10D6  00D4               	movwf	??_bme280_soft_reset
  5310  10D7  0854               	movf	??_bme280_soft_reset,w
  5311  10D8  00D9               	movwf	bme280_soft_reset@reg_addr
  5312                           
  5313                           ;BME280_driver/bme280.c: 637:     uint8_t soft_rst_cmd = 0xB6;
  5314  10D9  30B6               	movlw	182
  5315  10DA  00D4               	movwf	??_bme280_soft_reset
  5316  10DB  0854               	movf	??_bme280_soft_reset,w
  5317  10DC  00D7               	movwf	bme280_soft_reset@soft_rst_cmd
  5318                           
  5319                           ;BME280_driver/bme280.c: 640:     rslt = null_ptr_check(dev);
  5320  10DD  085A               	movf	bme280_soft_reset@dev,w
  5321  10DE  319F  2763  3190   	fcall	_null_ptr_check
  5322  10E1  0020               	movlb	0	; select bank0
  5323  10E2  00D4               	movwf	??_bme280_soft_reset
  5324  10E3  0854               	movf	??_bme280_soft_reset,w
  5325  10E4  00D8               	movwf	bme280_soft_reset@rslt
  5326                           
  5327                           ;BME280_driver/bme280.c: 643:     if (rslt == 0)
  5328  10E5  0858               	movf	bme280_soft_reset@rslt,w
  5329  10E6  1D03               	btfss	3,2
  5330  10E7  290B               	goto	l3490
  5331                           
  5332                           ;BME280_driver/bme280.c: 644:     {;BME280_driver/bme280.c: 646:         rslt = bme280_s
      +                          et_regs(&reg_addr, &soft_rst_cmd, 1, dev);
  5333  10E8  3057               	movlw	(low (bme280_soft_reset@soft_rst_cmd| 0))& (0+255)
  5334  10E9  00D4               	movwf	??_bme280_soft_reset
  5335  10EA  0854               	movf	??_bme280_soft_reset,w
  5336  10EB  00B5               	movwf	bme280_set_regs@reg_data
  5337  10EC  01B6               	clrf	bme280_set_regs@len
  5338  10ED  0AB6               	incf	bme280_set_regs@len,f
  5339  10EE  085A               	movf	bme280_soft_reset@dev,w
  5340  10EF  00D5               	movwf	??_bme280_soft_reset+1
  5341  10F0  0855               	movf	??_bme280_soft_reset+1,w
  5342  10F1  00B7               	movwf	bme280_set_regs@dev
  5343  10F2  3059               	movlw	(low (bme280_soft_reset@reg_addr| 0))& (0+255)
  5344  10F3  3195  2578  3190   	fcall	_bme280_set_regs
  5345  10F6  00D6               	movwf	??_bme280_soft_reset+2
  5346  10F7  0856               	movf	??_bme280_soft_reset+2,w
  5347  10F8  00D8               	movwf	bme280_soft_reset@rslt
  5348                           
  5349                           ;BME280_driver/bme280.c: 649:         dev->delay_ms(2);
  5350  10F9  3000               	movlw	0
  5351  10FA  00F8               	movwf	Sleep@ms+3
  5352  10FB  3000               	movlw	0
  5353  10FC  00F7               	movwf	Sleep@ms+2
  5354  10FD  3000               	movlw	0
  5355  10FE  00F6               	movwf	Sleep@ms+1
  5356  10FF  3002               	movlw	2
  5357  1100  00F5               	movwf	Sleep@ms
  5358  1101  085A               	movf	bme280_soft_reset@dev,w
  5359  1102  3E07               	addlw	7
  5360  1103  0086               	movwf	6
  5361  1104  3001               	movlw	1	; select bank2/3
  5362  1105  0087               	movwf	7
  5363  1106  3F41               	moviw [1]fsr1
  5364  1107  008A               	movwf	10
  5365  1108  3F40               	moviw [0]fsr1
  5366  1109  000A               	callw
  5367  110A  3190               	pagesel	$
  5368  110B                     l3490:	
  5369                           
  5370                           ;BME280_driver/bme280.c: 652:     return rslt;
  5371  110B  0858               	movf	bme280_soft_reset@rslt,w
  5372  110C  0008               	return
  5373  110D                     __end_of_bme280_soft_reset:	
  5374                           
  5375                           	psect	text6
  5376  1578                     __ptext6:	
  5377 ;; *************** function _bme280_set_regs *****************
  5378 ;; Defined at:
  5379 ;;		line 442 in file "BME280_driver/bme280.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  reg_addr        1    wreg     PTR unsigned char 
  5382 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  5383 ;;		 -> bme280_soft_reset@reg_addr(1), 
  5384 ;;  reg_data        1   21[BANK0 ] PTR const unsigned char 
  5385 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
  5386 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
  5387 ;;  len             1   22[BANK0 ] unsigned char 
  5388 ;;  dev             1   23[BANK0 ] PTR const struct bme280_
  5389 ;;		 -> main@env_sensor(51), 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  reg_addr        1   51[BANK0 ] PTR unsigned char 
  5392 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  5393 ;;		 -> bme280_soft_reset@reg_addr(1), 
  5394 ;;  temp_buff      20   27[BANK0 ] unsigned char [20]
  5395 ;;  temp_len        2   47[BANK0 ] unsigned short 
  5396 ;;  rslt            1   50[BANK0 ] char 
  5397 ;;  reg_addr_cnt    1   49[BANK0 ] unsigned char 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      char 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 1F/0
  5404 ;;		On exit  : 1F/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5407 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5409 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;Total ram usage:       31 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    7
  5414 ;; This function calls:
  5415 ;;		_WriteEnvSensor
  5416 ;;		_interleave_reg_addr
  5417 ;;		_null_ptr_check
  5418 ;; This function is called by:
  5419 ;;		_bme280_soft_reset
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           
  5424                           ;psect for function _bme280_set_regs
  5425  1578                     _bme280_set_regs:	
  5426                           
  5427                           ;incstack = 0
  5428                           ; Regs used in _bme280_set_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5429                           ;bme280_set_regs@reg_addr stored from wreg
  5430  1578  00D3               	movwf	bme280_set_regs@reg_addr
  5431                           
  5432                           ;BME280_driver/bme280.c: 442: int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *r
      +                          eg_data, uint8_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 443: {;BME28
      +                          0_driver/bme280.c: 444:     int8_t rslt;;BME280_driver/bme280.c: 445:     uint8_t temp_b
      +                          uff[20];;BME280_driver/bme280.c: 447:     if (len > 10)
  5433  1579  300B               	movlw	11
  5434  157A  0236               	subwf	bme280_set_regs@len,w
  5435  157B  1C03               	skipc
  5436  157C  2D81               	goto	l3316
  5437                           
  5438                           ;BME280_driver/bme280.c: 448:     {;BME280_driver/bme280.c: 449:         len = 10;
  5439  157D  300A               	movlw	10
  5440  157E  00B8               	movwf	??_bme280_set_regs
  5441  157F  0838               	movf	??_bme280_set_regs,w
  5442  1580  00B6               	movwf	bme280_set_regs@len
  5443  1581                     l3316:	
  5444                           
  5445                           ;BME280_driver/bme280.c: 451:     uint16_t temp_len;;BME280_driver/bme280.c: 452:     ui
      +                          nt8_t reg_addr_cnt;;BME280_driver/bme280.c: 455:     rslt = null_ptr_check(dev);
  5446  1581  0837               	movf	bme280_set_regs@dev,w
  5447  1582  319F  2763  3195   	fcall	_null_ptr_check
  5448  1585  0020               	movlb	0	; select bank0
  5449  1586  00B8               	movwf	??_bme280_set_regs
  5450  1587  0838               	movf	??_bme280_set_regs,w
  5451  1588  00D2               	movwf	bme280_set_regs@rslt
  5452                           
  5453                           ;BME280_driver/bme280.c: 458:     if ((rslt == 0) && (reg_addr != ((void*)0)) && (reg_da
      +                          ta != ((void*)0)))
  5454  1589  0852               	movf	bme280_set_regs@rslt,w
  5455  158A  1D03               	btfss	3,2
  5456  158B  2E12               	goto	l72
  5457  158C  0853               	movf	bme280_set_regs@reg_addr,w
  5458  158D  1903               	btfsc	3,2
  5459  158E  2E12               	goto	l72
  5460  158F  0835               	movf	bme280_set_regs@reg_data,w
  5461  1590  1903               	btfsc	3,2
  5462  1591  2E12               	goto	l72
  5463                           
  5464                           ;BME280_driver/bme280.c: 459:     {;BME280_driver/bme280.c: 460:         if (len != 0)
  5465  1592  0836               	movf	bme280_set_regs@len,w
  5466  1593  1903               	btfsc	3,2
  5467  1594  2E0D               	goto	l3352
  5468                           
  5469                           ;BME280_driver/bme280.c: 461:         {;BME280_driver/bme280.c: 462:             temp_bu
      +                          ff[0] = reg_data[0];
  5470  1595  0835               	movf	bme280_set_regs@reg_data,w
  5471  1596  0086               	movwf	6
  5472  1597  0187               	clrf	7
  5473  1598  0801               	movf	1,w
  5474  1599  00B8               	movwf	??_bme280_set_regs
  5475  159A  0838               	movf	??_bme280_set_regs,w
  5476  159B  00BB               	movwf	bme280_set_regs@temp_buff
  5477                           
  5478                           ;BME280_driver/bme280.c: 465:             if (dev->intf != BME280_I2C_INTF)
  5479  159C  0837               	movf	bme280_set_regs@dev,w
  5480  159D  3E02               	addlw	2
  5481  159E  0086               	movwf	6
  5482  159F  3001               	movlw	1	; select bank2/3
  5483  15A0  0087               	movwf	7
  5484  15A1  0301               	decf	1,w
  5485  15A2  1903               	btfsc	3,2
  5486  15A3  2DBF               	goto	l3338
  5487                           
  5488                           ;BME280_driver/bme280.c: 466:             {;BME280_driver/bme280.c: 467:                
      +                           for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
  5489  15A4  01D1               	clrf	bme280_set_regs@reg_addr_cnt
  5490  15A5                     l3336:	
  5491  15A5  0836               	movf	bme280_set_regs@len,w
  5492  15A6  0251               	subwf	bme280_set_regs@reg_addr_cnt,w
  5493  15A7  1803               	btfsc	3,0
  5494  15A8  2DBF               	goto	l3338
  5495                           
  5496                           ;BME280_driver/bme280.c: 468:                 {;BME280_driver/bme280.c: 469:            
      +                                   reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
  5497  15A9  0851               	movf	bme280_set_regs@reg_addr_cnt,w
  5498  15AA  0753               	addwf	bme280_set_regs@reg_addr,w
  5499  15AB  00B8               	movwf	??_bme280_set_regs
  5500  15AC  0838               	movf	??_bme280_set_regs,w
  5501  15AD  0086               	movwf	6
  5502  15AE  0187               	clrf	7
  5503  15AF  0801               	movf	1,w
  5504  15B0  397F               	andlw	127
  5505  15B1  00B9               	movwf	??_bme280_set_regs+1
  5506  15B2  0851               	movf	bme280_set_regs@reg_addr_cnt,w
  5507  15B3  0753               	addwf	bme280_set_regs@reg_addr,w
  5508  15B4  00BA               	movwf	??_bme280_set_regs+2
  5509  15B5  083A               	movf	??_bme280_set_regs+2,w
  5510  15B6  0086               	movwf	6
  5511  15B7  0187               	clrf	7
  5512  15B8  0839               	movf	??_bme280_set_regs+1,w
  5513  15B9  0081               	movwf	1
  5514                           
  5515                           ;BME280_driver/bme280.c: 470:                 }
  5516  15BA  3001               	movlw	1
  5517  15BB  00B8               	movwf	??_bme280_set_regs
  5518  15BC  0838               	movf	??_bme280_set_regs,w
  5519  15BD  07D1               	addwf	bme280_set_regs@reg_addr_cnt,f
  5520  15BE  2DA5               	goto	l3336
  5521  15BF                     l3338:	
  5522                           
  5523                           ;BME280_driver/bme280.c: 474:             if (len > 1)
  5524  15BF  3002               	movlw	2
  5525  15C0  0236               	subwf	bme280_set_regs@len,w
  5526  15C1  1C03               	skipc
  5527  15C2  2DDE               	goto	l3344
  5528                           
  5529                           ;BME280_driver/bme280.c: 475:             {;BME280_driver/bme280.c: 479:                
      +                           interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
  5530  15C3  303B               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
  5531  15C4  00B8               	movwf	??_bme280_set_regs
  5532  15C5  0838               	movf	??_bme280_set_regs,w
  5533  15C6  00F5               	movwf	interleave_reg_addr@temp_buff
  5534  15C7  0835               	movf	bme280_set_regs@reg_data,w
  5535  15C8  00B9               	movwf	??_bme280_set_regs+1
  5536  15C9  0839               	movf	??_bme280_set_regs+1,w
  5537  15CA  00F6               	movwf	interleave_reg_addr@reg_data
  5538  15CB  0836               	movf	bme280_set_regs@len,w
  5539  15CC  00BA               	movwf	??_bme280_set_regs+2
  5540  15CD  083A               	movf	??_bme280_set_regs+2,w
  5541  15CE  00F7               	movwf	interleave_reg_addr@len
  5542  15CF  0853               	movf	bme280_set_regs@reg_addr,w
  5543  15D0  3190  2042  3195   	fcall	_interleave_reg_addr
  5544                           
  5545                           ;BME280_driver/bme280.c: 480:                 temp_len = ((len * 2) - 1);
  5546  15D3  0836               	movf	bme280_set_regs@len,w
  5547  15D4  00B8               	movwf	??_bme280_set_regs
  5548  15D5  01B9               	clrf	??_bme280_set_regs+1
  5549  15D6  35B8               	lslf	??_bme280_set_regs,f
  5550  15D7  0DB9               	rlf	??_bme280_set_regs+1,f
  5551  15D8  0838               	movf	??_bme280_set_regs,w
  5552  15D9  3EFF               	addlw	255
  5553  15DA  00CF               	movwf	bme280_set_regs@temp_len
  5554  15DB  30FF               	movlw	255
  5555  15DC  3D39               	addwfc	??_bme280_set_regs+1,w
  5556  15DD  2DE4               	goto	L1
  5557  15DE                     l3344:	
  5558                           ;BME280_driver/bme280.c: 481:             }
  5559                           
  5560                           
  5561                           ;BME280_driver/bme280.c: 483:             {;BME280_driver/bme280.c: 484:                
      +                           temp_len = len;
  5562  15DE  0836               	movf	bme280_set_regs@len,w
  5563  15DF  00B8               	movwf	??_bme280_set_regs
  5564  15E0  01B9               	clrf	??_bme280_set_regs+1
  5565  15E1  0838               	movf	??_bme280_set_regs,w
  5566  15E2  00CF               	movwf	bme280_set_regs@temp_len
  5567  15E3  0839               	movf	??_bme280_set_regs+1,w
  5568  15E4                     L1:	
  5569  15E4  00D0               	movwf	bme280_set_regs@temp_len+1
  5570                           
  5571                           ;BME280_driver/bme280.c: 486:             rslt = dev->write(dev->dev_id, reg_addr[0], te
      +                          mp_buff, temp_len);
  5572  15E5  0837               	movf	bme280_set_regs@dev,w
  5573  15E6  0086               	movwf	6
  5574  15E7  3001               	movlw	1	; select bank2/3
  5575  15E8  0087               	movwf	7
  5576  15E9  3001               	movlw	1	; select bank2/3
  5577  15EA  3F41               	moviw [1]fsr1
  5578  15EB  00AA               	movwf	WriteEnvSensor@dev_id
  5579  15EC  0853               	movf	bme280_set_regs@reg_addr,w
  5580  15ED  0086               	movwf	6
  5581  15EE  0187               	clrf	7
  5582  15EF  0801               	movf	1,w
  5583  15F0  00B8               	movwf	??_bme280_set_regs
  5584  15F1  0838               	movf	??_bme280_set_regs,w
  5585  15F2  00AB               	movwf	WriteEnvSensor@reg_addr
  5586  15F3  303B               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
  5587  15F4  00B9               	movwf	??_bme280_set_regs+1
  5588  15F5  0839               	movf	??_bme280_set_regs+1,w
  5589  15F6  00AC               	movwf	WriteEnvSensor@reg_data
  5590  15F7  0850               	movf	bme280_set_regs@temp_len+1,w
  5591  15F8  00AE               	movwf	WriteEnvSensor@len+1
  5592  15F9  084F               	movf	bme280_set_regs@temp_len,w
  5593  15FA  00AD               	movwf	WriteEnvSensor@len
  5594  15FB  0837               	movf	bme280_set_regs@dev,w
  5595  15FC  3E05               	addlw	5
  5596  15FD  0086               	movwf	6
  5597  15FE  3001               	movlw	1	; select bank2/3
  5598  15FF  0087               	movwf	7
  5599  1600  3F41               	moviw [1]fsr1
  5600  1601  008A               	movwf	10
  5601  1602  3F40               	moviw [0]fsr1
  5602  1603  000A               	callw
  5603  1604  3195               	pagesel	$
  5604  1605  00BA               	movwf	??_bme280_set_regs+2
  5605  1606  083A               	movf	??_bme280_set_regs+2,w
  5606  1607  00D2               	movwf	bme280_set_regs@rslt
  5607                           
  5608                           ;BME280_driver/bme280.c: 489:             if (rslt != 0)
  5609  1608  0852               	movf	bme280_set_regs@rslt,w
  5610  1609  1903               	btfsc	3,2
  5611  160A  2E14               	goto	l3354
  5612                           
  5613                           ;BME280_driver/bme280.c: 490:             {;BME280_driver/bme280.c: 491:                
      +                           rslt = -4;
  5614  160B  30FC               	movlw	252
  5615  160C  2E0E               	goto	L2
  5616  160D                     l3352:	
  5617                           
  5618                           ;BME280_driver/bme280.c: 495:         {;BME280_driver/bme280.c: 496:             rslt = 
      +                          -3;
  5619  160D  30FD               	movlw	253
  5620  160E                     L2:	
  5621  160E  00B8               	movwf	??_bme280_set_regs
  5622  160F  0838               	movf	??_bme280_set_regs,w
  5623  1610  00D2               	movwf	bme280_set_regs@rslt
  5624  1611  2E14               	goto	l3354
  5625  1612                     l72:	
  5626                           ;BME280_driver/bme280.c: 499:     else
  5627                           
  5628                           
  5629                           ;BME280_driver/bme280.c: 500:     {;BME280_driver/bme280.c: 501:         rslt = -1;
  5630  1612  01D2               	clrf	bme280_set_regs@rslt
  5631  1613  03D2               	decf	bme280_set_regs@rslt,f
  5632  1614                     l3354:	
  5633                           
  5634                           ;BME280_driver/bme280.c: 504:     return rslt;
  5635  1614  0852               	movf	bme280_set_regs@rslt,w
  5636  1615  0008               	return
  5637  1616                     __end_of_bme280_set_regs:	
  5638                           
  5639                           	psect	text7
  5640  1042                     __ptext7:	
  5641 ;; *************** function _interleave_reg_addr *****************
  5642 ;; Defined at:
  5643 ;;		line 1338 in file "BME280_driver/bme280.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;  reg_addr        1    wreg     PTR const unsigned char 
  5646 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  5647 ;;		 -> bme280_soft_reset@reg_addr(1), 
  5648 ;;  temp_buff       1    5[COMMON] PTR unsigned char 
  5649 ;;		 -> bme280_set_regs@temp_buff(20), 
  5650 ;;  reg_data        1    6[COMMON] PTR const unsigned char 
  5651 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
  5652 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
  5653 ;;  len             1    7[COMMON] unsigned char 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  reg_addr        1    3[BANK0 ] PTR const unsigned char 
  5656 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  5657 ;;		 -> bme280_soft_reset@reg_addr(1), 
  5658 ;;  index           1    4[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5663 ;; Tracked objects:
  5664 ;;		On entry : 1F/0
  5665 ;;		On exit  : 1F/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5668 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5669 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5670 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5671 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;Total ram usage:        8 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    3
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		_bme280_set_regs
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           
  5683                           ;psect for function _interleave_reg_addr
  5684  1042                     _interleave_reg_addr:	
  5685                           
  5686                           ;incstack = 0
  5687                           ; Regs used in _interleave_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0]
  5688                           ;interleave_reg_addr@reg_addr stored from wreg
  5689  1042  00A3               	movwf	interleave_reg_addr@reg_addr
  5690                           
  5691                           ;BME280_driver/bme280.c: 1338: static void interleave_reg_addr(const uint8_t *reg_addr, 
      +                          uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len);BME280_driver/bme280.c: 1339: 
      +                          {;BME280_driver/bme280.c: 1340:     uint8_t index;;BME280_driver/bme280.c: 1342:     for
      +                           (index = 1; index < len; index++)
  5692  1043  01A4               	clrf	interleave_reg_addr@index
  5693  1044  0AA4               	incf	interleave_reg_addr@index,f
  5694  1045                     l3150:	
  5695  1045  0877               	movf	interleave_reg_addr@len,w
  5696  1046  0224               	subwf	interleave_reg_addr@index,w
  5697  1047  1803               	btfsc	3,0
  5698  1048  0008               	return
  5699                           
  5700                           ;BME280_driver/bme280.c: 1343:     {;BME280_driver/bme280.c: 1344:         temp_buff[(in
      +                          dex * 2) - 1] = reg_addr[index];
  5701  1049  0824               	movf	interleave_reg_addr@index,w
  5702  104A  0723               	addwf	interleave_reg_addr@reg_addr,w
  5703  104B  00A0               	movwf	??_interleave_reg_addr
  5704  104C  0820               	movf	??_interleave_reg_addr,w
  5705  104D  0086               	movwf	6
  5706  104E  0187               	clrf	7
  5707  104F  0801               	movf	1,w
  5708  1050  00A1               	movwf	??_interleave_reg_addr+1
  5709  1051  3524               	lslf	interleave_reg_addr@index,w
  5710  1052  0775               	addwf	interleave_reg_addr@temp_buff,w
  5711  1053  00A2               	movwf	??_interleave_reg_addr+2
  5712  1054  0822               	movf	??_interleave_reg_addr+2,w
  5713  1055  3EFF               	addlw	-1
  5714  1056  0086               	movwf	6
  5715  1057  0187               	clrf	7
  5716  1058  0821               	movf	??_interleave_reg_addr+1,w
  5717  1059  0081               	movwf	1
  5718                           
  5719                           ;BME280_driver/bme280.c: 1345:         temp_buff[index * 2] = reg_data[index];
  5720  105A  0824               	movf	interleave_reg_addr@index,w
  5721  105B  0776               	addwf	interleave_reg_addr@reg_data,w
  5722  105C  00A0               	movwf	??_interleave_reg_addr
  5723  105D  0820               	movf	??_interleave_reg_addr,w
  5724  105E  0086               	movwf	6
  5725  105F  0187               	clrf	7
  5726  1060  0801               	movf	1,w
  5727  1061  00A1               	movwf	??_interleave_reg_addr+1
  5728  1062  3524               	lslf	interleave_reg_addr@index,w
  5729  1063  0775               	addwf	interleave_reg_addr@temp_buff,w
  5730  1064  00A2               	movwf	??_interleave_reg_addr+2
  5731  1065  0822               	movf	??_interleave_reg_addr+2,w
  5732  1066  0086               	movwf	6
  5733  1067  0187               	clrf	7
  5734  1068  0821               	movf	??_interleave_reg_addr+1,w
  5735  1069  0081               	movwf	1
  5736                           
  5737                           ;BME280_driver/bme280.c: 1346:     }
  5738  106A  3001               	movlw	1
  5739  106B  00A0               	movwf	??_interleave_reg_addr
  5740  106C  0820               	movf	??_interleave_reg_addr,w
  5741  106D  07A4               	addwf	interleave_reg_addr@index,f
  5742  106E  2845               	goto	l3150
  5743  106F                     __end_of_interleave_reg_addr:	
  5744                           
  5745                           	psect	text8
  5746  1260                     __ptext8:	
  5747 ;; *************** function _WriteEnvSensor *****************
  5748 ;; Defined at:
  5749 ;;		line 623 in file "main.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;  dev_id          1   10[BANK0 ] unsigned char 
  5752 ;;  reg_addr        1   11[BANK0 ] unsigned char 
  5753 ;;  reg_data        1   12[BANK0 ] PTR unsigned char 
  5754 ;;		 -> bme280_set_regs@temp_buff(20), 
  5755 ;;  len             2   13[BANK0 ] unsigned short 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;  status          1   20[BANK0 ] enum E9633
  5758 ;;  local_addres    1   19[BANK0 ] unsigned char 
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  1    wreg      char 
  5761 ;; Registers used:
  5762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5763 ;; Tracked objects:
  5764 ;;		On entry : 1F/0
  5765 ;;		On exit  : 1F/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5768 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;Total ram usage:       11 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; Hardware stack levels required when called:    6
  5775 ;; This function calls:
  5776 ;;		_I2C_MasterWrite
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;;		_bme280_set_regs
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           
  5784                           ;psect for function _WriteEnvSensor
  5785  1260                     _WriteEnvSensor:	
  5786                           
  5787                           ;main.c: 623: int8_t WriteEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
      +                           uint16_t len);main.c: 624: {;main.c: 625:     I2C_MESSAGE_STATUS status = 0;
  5788                           
  5789                           ;incstack = 0
  5790                           ; Regs used in _WriteEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5791  1260  01B4               	clrf	WriteEnvSensor@status
  5792                           
  5793                           ;main.c: 626:     uint8_t local_address = reg_addr;
  5794  1261  082B               	movf	WriteEnvSensor@reg_addr,w
  5795  1262  00AF               	movwf	??_WriteEnvSensor
  5796  1263  082F               	movf	??_WriteEnvSensor,w
  5797  1264  00B3               	movwf	WriteEnvSensor@local_address
  5798  1265                     l546:	
  5799                           ;main.c: 643:     }
  5800                           
  5801                           ;main.c: 627:     while (local_address - reg_addr < len)
  5802                           
  5803                           
  5804                           ;main.c: 627:     while (local_address - reg_addr < len)
  5805  1265  0833               	movf	WriteEnvSensor@local_address,w
  5806  1266  00AF               	movwf	??_WriteEnvSensor
  5807  1267  01B0               	clrf	??_WriteEnvSensor+1
  5808  1268  0830               	movf	??_WriteEnvSensor+1,w
  5809  1269  00B2               	movwf	??_WriteEnvSensor+3
  5810  126A  082B               	movf	WriteEnvSensor@reg_addr,w
  5811  126B  022F               	subwf	??_WriteEnvSensor,w
  5812  126C  00B1               	movwf	??_WriteEnvSensor+2
  5813  126D  1C03               	skipc
  5814  126E  03B2               	decf	??_WriteEnvSensor+3,f
  5815  126F  082E               	movf	WriteEnvSensor@len+1,w
  5816  1270  0232               	subwf	??_WriteEnvSensor+3,w
  5817  1271  1D03               	skipz
  5818  1272  2A75               	goto	u2835
  5819  1273  082D               	movf	WriteEnvSensor@len,w
  5820  1274  0231               	subwf	??_WriteEnvSensor+2,w
  5821  1275                     u2835:	
  5822  1275  1803               	btfsc	3,0
  5823  1276  2AA8               	goto	l3190
  5824                           
  5825                           ;main.c: 628:     {;main.c: 629:         I2C_MasterWrite(&local_address, 1, dev_id, &sta
      +                          tus);
  5826  1277  01A3               	clrf	I2C_MasterWrite@length
  5827  1278  0AA3               	incf	I2C_MasterWrite@length,f
  5828  1279  082A               	movf	WriteEnvSensor@dev_id,w
  5829  127A  00AF               	movwf	??_WriteEnvSensor
  5830  127B  01B0               	clrf	??_WriteEnvSensor+1
  5831  127C  082F               	movf	??_WriteEnvSensor,w
  5832  127D  00A4               	movwf	I2C_MasterWrite@address
  5833  127E  0830               	movf	??_WriteEnvSensor+1,w
  5834  127F  00A5               	movwf	I2C_MasterWrite@address+1
  5835  1280  3034               	movlw	(low (WriteEnvSensor@status| 0))& (0+255)
  5836  1281  00B1               	movwf	??_WriteEnvSensor+2
  5837  1282  0831               	movf	??_WriteEnvSensor+2,w
  5838  1283  00A6               	movwf	I2C_MasterWrite@pflag
  5839  1284  3033               	movlw	(low (WriteEnvSensor@local_address| 0))& (0+255)
  5840  1285  3187  27D8  3192   	fcall	_I2C_MasterWrite
  5841                           
  5842                           ;main.c: 630:         if (status == 0)
  5843  1288  0020               	movlb	0	; select bank0
  5844  1289  0834               	movf	WriteEnvSensor@status,w
  5845  128A  1D03               	btfss	3,2
  5846  128B  2AA1               	goto	l3180
  5847                           
  5848                           ;main.c: 631:         {;main.c: 632:             I2C_MasterWrite(reg_data, 1, dev_id, &s
      +                          tatus);
  5849  128C  01A3               	clrf	I2C_MasterWrite@length
  5850  128D  0AA3               	incf	I2C_MasterWrite@length,f
  5851  128E  082A               	movf	WriteEnvSensor@dev_id,w
  5852  128F  00AF               	movwf	??_WriteEnvSensor
  5853  1290  01B0               	clrf	??_WriteEnvSensor+1
  5854  1291  082F               	movf	??_WriteEnvSensor,w
  5855  1292  00A4               	movwf	I2C_MasterWrite@address
  5856  1293  0830               	movf	??_WriteEnvSensor+1,w
  5857  1294  00A5               	movwf	I2C_MasterWrite@address+1
  5858  1295  3034               	movlw	(low (WriteEnvSensor@status| 0))& (0+255)
  5859  1296  00B1               	movwf	??_WriteEnvSensor+2
  5860  1297  0831               	movf	??_WriteEnvSensor+2,w
  5861  1298  00A6               	movwf	I2C_MasterWrite@pflag
  5862  1299  082C               	movf	WriteEnvSensor@reg_data,w
  5863  129A  3187  27D8  3192   	fcall	_I2C_MasterWrite
  5864                           
  5865                           ;main.c: 633:             if (status != 0)
  5866  129D  0020               	movlb	0	; select bank0
  5867  129E  0834               	movf	WriteEnvSensor@status,w
  5868  129F  1903               	btfsc	3,2
  5869  12A0  2AA3               	goto	l3188
  5870  12A1                     l3180:	
  5871                           
  5872                           ;main.c: 634:             {;main.c: 635:                 return -4;
  5873  12A1  30FC               	movlw	252
  5874  12A2  0008               	return
  5875  12A3                     l3188:	
  5876                           
  5877                           ;main.c: 642:         local_address++;
  5878  12A3  3001               	movlw	1
  5879  12A4  00AF               	movwf	??_WriteEnvSensor
  5880  12A5  082F               	movf	??_WriteEnvSensor,w
  5881  12A6  07B3               	addwf	WriteEnvSensor@local_address,f
  5882  12A7  2A65               	goto	l546
  5883  12A8                     l3190:	
  5884                           
  5885                           ;main.c: 644:     return 0;
  5886  12A8  3000               	movlw	0
  5887  12A9  0008               	return
  5888  12AA                     __end_of_WriteEnvSensor:	
  5889                           
  5890                           	psect	text9
  5891  110D                     __ptext9:	
  5892 ;; *************** function _Sleep *****************
  5893 ;; Defined at:
  5894 ;;		line 70 in file "main.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;  ms              4    5[COMMON] unsigned long 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;  start           4    4[BANK0 ] unsigned long 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  1    wreg      void 
  5901 ;; Registers used:
  5902 ;;		wreg
  5903 ;; Tracked objects:
  5904 ;;		On entry : 1F/0
  5905 ;;		On exit  : 1F/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;Total ram usage:       12 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    3
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_main
  5919 ;;		_bme280_soft_reset
  5920 ;;		_bme280_init
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function _Sleep
  5926  110D                     _Sleep:	
  5927                           
  5928                           ;main.c: 70: void Sleep(uint32_t ms);main.c: 71: {;main.c: 72:     unsigned long start =
      +                           ticks;
  5929                           
  5930                           ;incstack = 0
  5931                           ; Regs used in _Sleep: [wreg]
  5932  110D  0022               	movlb	2	; select bank2
  5933  110E  083A               	movf	(_ticks+3)^(0+256),w
  5934  110F  0020               	movlb	0	; select bank0
  5935  1110  00A7               	movwf	Sleep@start+3
  5936  1111  0022               	movlb	2	; select bank2
  5937  1112  0839               	movf	(_ticks+2)^(0+256),w
  5938  1113  0020               	movlb	0	; select bank0
  5939  1114  00A6               	movwf	Sleep@start+2
  5940  1115  0022               	movlb	2	; select bank2
  5941  1116  0838               	movf	(_ticks+1)^(0+256),w
  5942  1117  0020               	movlb	0	; select bank0
  5943  1118  00A5               	movwf	Sleep@start+1
  5944  1119  0022               	movlb	2	; select bank2
  5945  111A  0837               	movf	_ticks^(0+256),w
  5946  111B  0020               	movlb	0	; select bank0
  5947  111C  00A4               	movwf	Sleep@start
  5948  111D                     l488:	
  5949                           ;main.c: 76:     }
  5950                           
  5951                           ;main.c: 73:     while (ticks - start < ms)
  5952                           
  5953                           
  5954                           ;main.c: 73:     while (ticks - start < ms)
  5955  111D  0020               	movlb	0	; select bank0
  5956  111E  0824               	movf	Sleep@start,w
  5957  111F  0022               	movlb	2	; select bank2
  5958  1120  0237               	subwf	_ticks^(0+256),w
  5959  1121  0020               	movlb	0	; select bank0
  5960  1122  00A0               	movwf	??_Sleep
  5961  1123  0825               	movf	Sleep@start+1,w
  5962  1124  0022               	movlb	2	; select bank2
  5963  1125  3B38               	subwfb	(_ticks+1)^(0+256),w
  5964  1126  0020               	movlb	0	; select bank0
  5965  1127  00A1               	movwf	??_Sleep+1
  5966  1128  0826               	movf	Sleep@start+2,w
  5967  1129  0022               	movlb	2	; select bank2
  5968  112A  3B39               	subwfb	(_ticks+2)^(0+256),w
  5969  112B  0020               	movlb	0	; select bank0
  5970  112C  00A2               	movwf	??_Sleep+2
  5971  112D  0827               	movf	Sleep@start+3,w
  5972  112E  0022               	movlb	2	; select bank2
  5973  112F  3B3A               	subwfb	(_ticks+3)^(0+256),w
  5974  1130  0020               	movlb	0	; select bank0
  5975  1131  00A3               	movwf	??_Sleep+3
  5976  1132  0878               	movf	Sleep@ms+3,w
  5977  1133  0223               	subwf	??_Sleep+3,w
  5978  1134  1D03               	skipz
  5979  1135  2940               	goto	u2105
  5980  1136  0877               	movf	Sleep@ms+2,w
  5981  1137  0222               	subwf	??_Sleep+2,w
  5982  1138  1D03               	skipz
  5983  1139  2940               	goto	u2105
  5984  113A  0876               	movf	Sleep@ms+1,w
  5985  113B  0221               	subwf	??_Sleep+1,w
  5986  113C  1D03               	skipz
  5987  113D  2940               	goto	u2105
  5988  113E  0875               	movf	Sleep@ms,w
  5989  113F  0220               	subwf	??_Sleep,w
  5990  1140                     u2105:	
  5991  1140  1803               	btfsc	3,0
  5992  1141  0008               	return
  5993                           
  5994                           ;main.c: 74:     {;main.c: 75:         _delay((unsigned long)((1)*(4000000/4000.0)));
  5995  1142  30C8               	movlw	200
  5996  1143                     u3977:	
  5997  1143  3200               	nop2
  5998  1144  0B89               	decfsz	9,f
  5999  1145  2943               	goto	u3977
  6000  1146  291D               	goto	l488
  6001  1147                     __end_of_Sleep:	
  6002                           
  6003                           	psect	text10
  6004  12AA                     __ptext10:	
  6005 ;; *************** function _bme280_get_sensor_data *****************
  6006 ;; Defined at:
  6007 ;;		line 660 in file "BME280_driver/bme280.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  sensor_comp     1    wreg     unsigned char 
  6010 ;;  comp_data       1   75[BANK1 ] PTR struct bme280_data
  6011 ;;		 -> main@sensor_data(12), 
  6012 ;;  dev             1   76[BANK1 ] PTR struct bme280_dev
  6013 ;;		 -> main@env_sensor(51), 
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  sensor_comp     1    8[BANK2 ] unsigned char 
  6016 ;;  uncomp_data    12   10[BANK2 ] struct bme280_uncomp_dat
  6017 ;;  reg_data        8    0[BANK2 ] unsigned char [8]
  6018 ;;  rslt            1    9[BANK2 ] char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      char 
  6021 ;; Registers used:
  6022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 1F/1
  6025 ;;		On exit  : 1C/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6028 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Locals:         0       0       0      22       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Totals:         0       0       5      22       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;Total ram usage:       27 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    8
  6035 ;; This function calls:
  6036 ;;		_bme280_compensate_data
  6037 ;;		_bme280_get_regs
  6038 ;;		_bme280_parse_sensor_data
  6039 ;;		_null_ptr_check
  6040 ;; This function is called by:
  6041 ;;		_main
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           
  6046                           ;psect for function _bme280_get_sensor_data
  6047  12AA                     _bme280_get_sensor_data:	
  6048                           
  6049                           ;incstack = 0
  6050                           ; Regs used in _bme280_get_sensor_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6051                           ;bme280_get_sensor_data@sensor_comp stored from wreg
  6052  12AA  0022               	movlb	2	; select bank2
  6053  12AB  00D7               	movwf	bme280_get_sensor_data@sensor_comp^(0+256)
  6054                           
  6055                           ;BME280_driver/bme280.c: 660: int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct 
      +                          bme280_data *comp_data, struct bme280_dev *dev);BME280_driver/bme280.c: 661: {;BME280_dr
      +                          iver/bme280.c: 662:     int8_t rslt;;BME280_driver/bme280.c: 667:     uint8_t reg_data[8
      +                          ] = { 0 };
  6056  12AC  304F               	movlw	low bme280_get_sensor_data@reg_data
  6057  12AD  0086               	movwf	6
  6058  12AE  3001               	movlw	high bme280_get_sensor_data@reg_data
  6059  12AF  0087               	movwf	7
  6060  12B0  3008               	movlw	8
  6061  12B1  0021               	movlb	1	; select bank1
  6062  12B2  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  6063  12B3  3000               	movlw	0
  6064  12B4                     u3680:	
  6065  12B4  001E               	movwi fsr1++
  6066  12B5  0BED               	decfsz	??_bme280_get_sensor_data^(0+128),f
  6067  12B6  2AB4               	goto	u3680
  6068                           
  6069                           ;BME280_driver/bme280.c: 668:     struct bme280_uncomp_data uncomp_data = { 0 };
  6070  12B7  3020               	movlw	low bme280_get_sensor_data@F273
  6071  12B8  0086               	movwf	6
  6072  12B9  3001               	movlw	high bme280_get_sensor_data@F273
  6073  12BA  0087               	movwf	7
  6074  12BB  3059               	movlw	low bme280_get_sensor_data@uncomp_data
  6075  12BC  0084               	movwf	4
  6076  12BD  3001               	movlw	high bme280_get_sensor_data@uncomp_data
  6077  12BE  0085               	movwf	5
  6078  12BF  300C               	movlw	12
  6079  12C0  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  6080  12C1                     u3690:	
  6081  12C1  0016               	moviw fsr1++
  6082  12C2  001A               	movwi fsr0++
  6083  12C3  0BED               	decfsz	??_bme280_get_sensor_data^(0+128),f
  6084  12C4  2AC1               	goto	u3690
  6085                           
  6086                           ;BME280_driver/bme280.c: 671:     rslt = null_ptr_check(dev);
  6087  12C5  086C               	movf	bme280_get_sensor_data@dev^(0+128),w
  6088  12C6  319F  2763  3192   	fcall	_null_ptr_check
  6089  12C9  0021               	movlb	1	; select bank1
  6090  12CA  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  6091  12CB  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  6092  12CC  0022               	movlb	2	; select bank2
  6093  12CD  00D8               	movwf	bme280_get_sensor_data@rslt^(0+256)
  6094                           
  6095                           ;BME280_driver/bme280.c: 672:     if ((rslt == 0) && (comp_data != ((void*)0)))
  6096  12CE  0858               	movf	bme280_get_sensor_data@rslt^(0+256),w
  6097  12CF  1D03               	btfss	3,2
  6098  12D0  0008               	return
  6099  12D1  0021               	movlb	1	; select bank1
  6100  12D2  086B               	movf	bme280_get_sensor_data@comp_data^(0+128),w
  6101  12D3  1903               	btfsc	3,2
  6102  12D4  0008               	return
  6103                           
  6104                           ;BME280_driver/bme280.c: 673:     {;BME280_driver/bme280.c: 675:         rslt = bme280_g
      +                          et_regs(0xF7, reg_data, 8, dev);
  6105  12D5  304F               	movlw	low bme280_get_sensor_data@reg_data
  6106  12D6  0020               	movlb	0	; select bank0
  6107  12D7  00B8               	movwf	bme280_get_regs@reg_data
  6108  12D8  3001               	movlw	high bme280_get_sensor_data@reg_data
  6109  12D9  00B9               	movwf	bme280_get_regs@reg_data+1
  6110  12DA  3008               	movlw	8
  6111  12DB  00BA               	movwf	bme280_get_regs@len
  6112  12DC  3000               	movlw	0
  6113  12DD  00BB               	movwf	bme280_get_regs@len+1
  6114  12DE  0021               	movlb	1	; select bank1
  6115  12DF  086C               	movf	bme280_get_sensor_data@dev^(0+128),w
  6116  12E0  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  6117  12E1  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  6118  12E2  0020               	movlb	0	; select bank0
  6119  12E3  00BC               	movwf	bme280_get_regs@dev
  6120  12E4  30F7               	movlw	247
  6121  12E5  3191  2147  3192   	fcall	_bme280_get_regs
  6122  12E8  0021               	movlb	1	; select bank1
  6123  12E9  00EE               	movwf	(??_bme280_get_sensor_data+1)^(0+128)
  6124  12EA  086E               	movf	(??_bme280_get_sensor_data+1)^(0+128),w
  6125  12EB  0022               	movlb	2	; select bank2
  6126  12EC  00D8               	movwf	bme280_get_sensor_data@rslt^(0+256)
  6127                           
  6128                           ;BME280_driver/bme280.c: 676:         if (rslt == 0)
  6129  12ED  0858               	movf	bme280_get_sensor_data@rslt^(0+256),w
  6130  12EE  1D03               	btfss	3,2
  6131  12EF  0008               	return
  6132                           
  6133                           ;BME280_driver/bme280.c: 677:         {;BME280_driver/bme280.c: 679:             bme280_
      +                          parse_sensor_data(reg_data, &uncomp_data);
  6134  12F0  3059               	movlw	(low (bme280_get_sensor_data@uncomp_data| (0+256)))& (0+255)
  6135  12F1  0021               	movlb	1	; select bank1
  6136  12F2  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  6137  12F3  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  6138  12F4  00F5               	movwf	bme280_parse_sensor_data@uncomp_data
  6139  12F5  304F               	movlw	(low (bme280_get_sensor_data@reg_data| (0+256)))& (0+255)
  6140  12F6  3186  260D  3192   	fcall	_bme280_parse_sensor_data
  6141  12F9  3059               	movlw	(low (bme280_get_sensor_data@uncomp_data| (0+256)))& (0+255)
  6142  12FA  0021               	movlb	1	; select bank1
  6143  12FB  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  6144  12FC  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  6145  12FD  00E5               	movwf	bme280_compensate_data@uncomp_data^(0+128)
  6146  12FE  086B               	movf	bme280_get_sensor_data@comp_data^(0+128),w
  6147  12FF  00EE               	movwf	(??_bme280_get_sensor_data+1)^(0+128)
  6148  1300  086E               	movf	(??_bme280_get_sensor_data+1)^(0+128),w
  6149  1301  00E6               	movwf	bme280_compensate_data@comp_data^(0+128)
  6150  1302  086C               	movf	bme280_get_sensor_data@dev^(0+128),w
  6151  1303  3E09               	addlw	9
  6152  1304  00EF               	movwf	(??_bme280_get_sensor_data+2)^(0+128)
  6153  1305  086F               	movf	(??_bme280_get_sensor_data+2)^(0+128),w
  6154  1306  00E7               	movwf	bme280_compensate_data@calib_data^(0+128)
  6155  1307  0022               	movlb	2	; select bank2
  6156  1308  0857               	movf	bme280_get_sensor_data@sensor_comp^(0+256),w
  6157  1309  3194  245A         	fcall	_bme280_compensate_data
  6158  130B  0008               	return
  6159  130C                     __end_of_bme280_get_sensor_data:	
  6160                           ;BME280_driver/bme280.c: 687:     else
  6161                           
  6162                           
  6163                           	psect	text11
  6164  060D                     __ptext11:	
  6165 ;; *************** function _bme280_parse_sensor_data *****************
  6166 ;; Defined at:
  6167 ;;		line 699 in file "BME280_driver/bme280.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  reg_data        1    wreg     PTR const unsigned char 
  6170 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  6171 ;;  uncomp_data     1    5[COMMON] PTR struct bme280_uncomp
  6172 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  reg_data        1   20[BANK0 ] PTR const unsigned char 
  6175 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  6176 ;;  data_msb        4   16[BANK0 ] unsigned long 
  6177 ;;  data_lsb        4   12[BANK0 ] unsigned long 
  6178 ;;  data_xlsb       4    8[BANK0 ] unsigned long 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6183 ;; Tracked objects:
  6184 ;;		On entry : 1F/1
  6185 ;;		On exit  : 1F/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6188 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Totals:         1      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;Total ram usage:       22 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    3
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_bme280_get_sensor_data
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           
  6203                           ;psect for function _bme280_parse_sensor_data
  6204  060D                     _bme280_parse_sensor_data:	
  6205                           
  6206                           ;incstack = 0
  6207                           ; Regs used in _bme280_parse_sensor_data: [wreg+fsr1l+fsr1h+status,2+status,0]
  6208                           ;bme280_parse_sensor_data@reg_data stored from wreg
  6209  060D  0020               	movlb	0	; select bank0
  6210  060E  00B4               	movwf	bme280_parse_sensor_data@reg_data
  6211                           
  6212                           ;BME280_driver/bme280.c: 699: void bme280_parse_sensor_data(const uint8_t *reg_data, str
      +                          uct bme280_uncomp_data *uncomp_data);BME280_driver/bme280.c: 700: {;BME280_driver/bme280
      +                          .c: 702:     uint32_t data_xlsb;;BME280_driver/bme280.c: 703:     uint32_t data_lsb;;BME
      +                          280_driver/bme280.c: 704:     uint32_t data_msb;;BME280_driver/bme280.c: 707:     data_m
      +                          sb = (uint32_t)reg_data[0] << 12;
  6213  060F  0834               	movf	bme280_parse_sensor_data@reg_data,w
  6214  0610  0086               	movwf	6
  6215  0611  3001               	movlw	1	; select bank2/3
  6216  0612  0087               	movwf	7
  6217  0613  0801               	movf	1,w
  6218  0614  00A0               	movwf	??_bme280_parse_sensor_data
  6219  0615  01A1               	clrf	??_bme280_parse_sensor_data+1
  6220  0616  01A2               	clrf	??_bme280_parse_sensor_data+2
  6221  0617  01A3               	clrf	??_bme280_parse_sensor_data+3
  6222  0618  300C               	movlw	12
  6223  0619                     u3465:	
  6224  0619  35A0               	lslf	??_bme280_parse_sensor_data,f
  6225  061A  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  6226  061B  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  6227  061C  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  6228  061D  0B89               	decfsz	9,f
  6229  061E  2E19               	goto	u3465
  6230  061F  0823               	movf	??_bme280_parse_sensor_data+3,w
  6231  0620  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  6232  0621  0822               	movf	??_bme280_parse_sensor_data+2,w
  6233  0622  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  6234  0623  0821               	movf	??_bme280_parse_sensor_data+1,w
  6235  0624  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  6236  0625  0820               	movf	??_bme280_parse_sensor_data,w
  6237  0626  00B0               	movwf	bme280_parse_sensor_data@data_msb
  6238                           
  6239                           ;BME280_driver/bme280.c: 708:     data_lsb = (uint32_t)reg_data[1] << 4;
  6240  0627  0A34               	incf	bme280_parse_sensor_data@reg_data,w
  6241  0628  0086               	movwf	6
  6242  0629  3001               	movlw	1	; select bank2/3
  6243  062A  0087               	movwf	7
  6244  062B  0801               	movf	1,w
  6245  062C  00A0               	movwf	??_bme280_parse_sensor_data
  6246  062D  01A1               	clrf	??_bme280_parse_sensor_data+1
  6247  062E  01A2               	clrf	??_bme280_parse_sensor_data+2
  6248  062F  01A3               	clrf	??_bme280_parse_sensor_data+3
  6249  0630  3004               	movlw	4
  6250  0631                     u3475:	
  6251  0631  35A0               	lslf	??_bme280_parse_sensor_data,f
  6252  0632  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  6253  0633  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  6254  0634  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  6255  0635  0B89               	decfsz	9,f
  6256  0636  2E31               	goto	u3475
  6257  0637  0823               	movf	??_bme280_parse_sensor_data+3,w
  6258  0638  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  6259  0639  0822               	movf	??_bme280_parse_sensor_data+2,w
  6260  063A  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  6261  063B  0821               	movf	??_bme280_parse_sensor_data+1,w
  6262  063C  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  6263  063D  0820               	movf	??_bme280_parse_sensor_data,w
  6264  063E  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  6265                           
  6266                           ;BME280_driver/bme280.c: 709:     data_xlsb = (uint32_t)reg_data[2] >> 4;
  6267  063F  0834               	movf	bme280_parse_sensor_data@reg_data,w
  6268  0640  3E02               	addlw	2
  6269  0641  0086               	movwf	6
  6270  0642  3001               	movlw	1	; select bank2/3
  6271  0643  0087               	movwf	7
  6272  0644  0801               	movf	1,w
  6273  0645  00A0               	movwf	??_bme280_parse_sensor_data
  6274  0646  3004               	movlw	4
  6275  0647                     u3485:	
  6276  0647  36A0               	lsrf	??_bme280_parse_sensor_data,f
  6277  0648  0B89               	decfsz	9,f
  6278  0649  2E47               	goto	u3485
  6279  064A  0820               	movf	??_bme280_parse_sensor_data,w
  6280  064B  00A1               	movwf	??_bme280_parse_sensor_data+1
  6281  064C  01A2               	clrf	??_bme280_parse_sensor_data+2
  6282  064D  01A3               	clrf	??_bme280_parse_sensor_data+3
  6283  064E  01A4               	clrf	??_bme280_parse_sensor_data+4
  6284  064F  0824               	movf	??_bme280_parse_sensor_data+4,w
  6285  0650  00AB               	movwf	bme280_parse_sensor_data@data_xlsb+3
  6286  0651  0823               	movf	??_bme280_parse_sensor_data+3,w
  6287  0652  00AA               	movwf	bme280_parse_sensor_data@data_xlsb+2
  6288  0653  0822               	movf	??_bme280_parse_sensor_data+2,w
  6289  0654  00A9               	movwf	bme280_parse_sensor_data@data_xlsb+1
  6290  0655  0821               	movf	??_bme280_parse_sensor_data+1,w
  6291  0656  00A8               	movwf	bme280_parse_sensor_data@data_xlsb
  6292                           
  6293                           ;BME280_driver/bme280.c: 710:     uncomp_data->pressure = data_msb | data_lsb | data_xls
      +                          b;
  6294  0657  0828               	movf	bme280_parse_sensor_data@data_xlsb,w
  6295  0658  00A0               	movwf	??_bme280_parse_sensor_data
  6296  0659  0829               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  6297  065A  00A1               	movwf	??_bme280_parse_sensor_data+1
  6298  065B  082A               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  6299  065C  00A2               	movwf	??_bme280_parse_sensor_data+2
  6300  065D  082B               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  6301  065E  00A3               	movwf	??_bme280_parse_sensor_data+3
  6302  065F  0830               	movf	bme280_parse_sensor_data@data_msb,w
  6303  0660  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  6304  0661  00A4               	movwf	??_bme280_parse_sensor_data+4
  6305  0662  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  6306  0663  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  6307  0664  00A5               	movwf	??_bme280_parse_sensor_data+5
  6308  0665  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  6309  0666  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  6310  0667  00A6               	movwf	??_bme280_parse_sensor_data+6
  6311  0668  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  6312  0669  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  6313  066A  00A7               	movwf	??_bme280_parse_sensor_data+7
  6314  066B  0824               	movf	??_bme280_parse_sensor_data+4,w
  6315  066C  04A0               	iorwf	??_bme280_parse_sensor_data,f
  6316  066D  0825               	movf	??_bme280_parse_sensor_data+5,w
  6317  066E  04A1               	iorwf	??_bme280_parse_sensor_data+1,f
  6318  066F  0826               	movf	??_bme280_parse_sensor_data+6,w
  6319  0670  04A2               	iorwf	??_bme280_parse_sensor_data+2,f
  6320  0671  0827               	movf	??_bme280_parse_sensor_data+7,w
  6321  0672  04A3               	iorwf	??_bme280_parse_sensor_data+3,f
  6322  0673  0875               	movf	bme280_parse_sensor_data@uncomp_data,w
  6323  0674  0086               	movwf	6
  6324  0675  3001               	movlw	1	; select bank2/3
  6325  0676  0087               	movwf	7
  6326  0677  0820               	movf	??_bme280_parse_sensor_data,w
  6327  0678  3FC0               	movwi [0]fsr1
  6328  0679  0821               	movf	??_bme280_parse_sensor_data+1,w
  6329  067A  3FC1               	movwi [1]fsr1
  6330  067B  0822               	movf	??_bme280_parse_sensor_data+2,w
  6331  067C  3FC2               	movwi [2]fsr1
  6332  067D  0823               	movf	??_bme280_parse_sensor_data+3,w
  6333  067E  3FC3               	movwi [3]fsr1
  6334                           
  6335                           ;BME280_driver/bme280.c: 713:     data_msb = (uint32_t)reg_data[3] << 12;
  6336  067F  0834               	movf	bme280_parse_sensor_data@reg_data,w
  6337  0680  3E03               	addlw	3
  6338  0681  0086               	movwf	6
  6339  0682  3001               	movlw	1	; select bank2/3
  6340  0683  0087               	movwf	7
  6341  0684  0801               	movf	1,w
  6342  0685  00A0               	movwf	??_bme280_parse_sensor_data
  6343  0686  01A1               	clrf	??_bme280_parse_sensor_data+1
  6344  0687  01A2               	clrf	??_bme280_parse_sensor_data+2
  6345  0688  01A3               	clrf	??_bme280_parse_sensor_data+3
  6346  0689  300C               	movlw	12
  6347  068A                     u3495:	
  6348  068A  35A0               	lslf	??_bme280_parse_sensor_data,f
  6349  068B  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  6350  068C  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  6351  068D  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  6352  068E  0B89               	decfsz	9,f
  6353  068F  2E8A               	goto	u3495
  6354  0690  0823               	movf	??_bme280_parse_sensor_data+3,w
  6355  0691  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  6356  0692  0822               	movf	??_bme280_parse_sensor_data+2,w
  6357  0693  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  6358  0694  0821               	movf	??_bme280_parse_sensor_data+1,w
  6359  0695  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  6360  0696  0820               	movf	??_bme280_parse_sensor_data,w
  6361  0697  00B0               	movwf	bme280_parse_sensor_data@data_msb
  6362                           
  6363                           ;BME280_driver/bme280.c: 714:     data_lsb = (uint32_t)reg_data[4] << 4;
  6364  0698  0834               	movf	bme280_parse_sensor_data@reg_data,w
  6365  0699  3E04               	addlw	4
  6366  069A  0086               	movwf	6
  6367  069B  3001               	movlw	1	; select bank2/3
  6368  069C  0087               	movwf	7
  6369  069D  0801               	movf	1,w
  6370  069E  00A0               	movwf	??_bme280_parse_sensor_data
  6371  069F  01A1               	clrf	??_bme280_parse_sensor_data+1
  6372  06A0  01A2               	clrf	??_bme280_parse_sensor_data+2
  6373  06A1  01A3               	clrf	??_bme280_parse_sensor_data+3
  6374  06A2  3004               	movlw	4
  6375  06A3                     u3505:	
  6376  06A3  35A0               	lslf	??_bme280_parse_sensor_data,f
  6377  06A4  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  6378  06A5  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  6379  06A6  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  6380  06A7  0B89               	decfsz	9,f
  6381  06A8  2EA3               	goto	u3505
  6382  06A9  0823               	movf	??_bme280_parse_sensor_data+3,w
  6383  06AA  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  6384  06AB  0822               	movf	??_bme280_parse_sensor_data+2,w
  6385  06AC  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  6386  06AD  0821               	movf	??_bme280_parse_sensor_data+1,w
  6387  06AE  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  6388  06AF  0820               	movf	??_bme280_parse_sensor_data,w
  6389  06B0  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  6390                           
  6391                           ;BME280_driver/bme280.c: 715:     data_xlsb = (uint32_t)reg_data[5] >> 4;
  6392  06B1  0834               	movf	bme280_parse_sensor_data@reg_data,w
  6393  06B2  3E05               	addlw	5
  6394  06B3  0086               	movwf	6
  6395  06B4  3001               	movlw	1	; select bank2/3
  6396  06B5  0087               	movwf	7
  6397  06B6  0801               	movf	1,w
  6398  06B7  00A0               	movwf	??_bme280_parse_sensor_data
  6399  06B8  3004               	movlw	4
  6400  06B9                     u3515:	
  6401  06B9  36A0               	lsrf	??_bme280_parse_sensor_data,f
  6402  06BA  0B89               	decfsz	9,f
  6403  06BB  2EB9               	goto	u3515
  6404  06BC  0820               	movf	??_bme280_parse_sensor_data,w
  6405  06BD  00A1               	movwf	??_bme280_parse_sensor_data+1
  6406  06BE  01A2               	clrf	??_bme280_parse_sensor_data+2
  6407  06BF  01A3               	clrf	??_bme280_parse_sensor_data+3
  6408  06C0  01A4               	clrf	??_bme280_parse_sensor_data+4
  6409  06C1  0824               	movf	??_bme280_parse_sensor_data+4,w
  6410  06C2  00AB               	movwf	bme280_parse_sensor_data@data_xlsb+3
  6411  06C3  0823               	movf	??_bme280_parse_sensor_data+3,w
  6412  06C4  00AA               	movwf	bme280_parse_sensor_data@data_xlsb+2
  6413  06C5  0822               	movf	??_bme280_parse_sensor_data+2,w
  6414  06C6  00A9               	movwf	bme280_parse_sensor_data@data_xlsb+1
  6415  06C7  0821               	movf	??_bme280_parse_sensor_data+1,w
  6416  06C8  00A8               	movwf	bme280_parse_sensor_data@data_xlsb
  6417                           
  6418                           ;BME280_driver/bme280.c: 716:     uncomp_data->temperature = data_msb | data_lsb | data_
      +                          xlsb;
  6419  06C9  0828               	movf	bme280_parse_sensor_data@data_xlsb,w
  6420  06CA  00A0               	movwf	??_bme280_parse_sensor_data
  6421  06CB  0829               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  6422  06CC  00A1               	movwf	??_bme280_parse_sensor_data+1
  6423  06CD  082A               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  6424  06CE  00A2               	movwf	??_bme280_parse_sensor_data+2
  6425  06CF  082B               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  6426  06D0  00A3               	movwf	??_bme280_parse_sensor_data+3
  6427  06D1  0830               	movf	bme280_parse_sensor_data@data_msb,w
  6428  06D2  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  6429  06D3  00A4               	movwf	??_bme280_parse_sensor_data+4
  6430  06D4  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  6431  06D5  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  6432  06D6  00A5               	movwf	??_bme280_parse_sensor_data+5
  6433  06D7  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  6434  06D8  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  6435  06D9  00A6               	movwf	??_bme280_parse_sensor_data+6
  6436  06DA  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  6437  06DB  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  6438  06DC  00A7               	movwf	??_bme280_parse_sensor_data+7
  6439  06DD  0824               	movf	??_bme280_parse_sensor_data+4,w
  6440  06DE  04A0               	iorwf	??_bme280_parse_sensor_data,f
  6441  06DF  0825               	movf	??_bme280_parse_sensor_data+5,w
  6442  06E0  04A1               	iorwf	??_bme280_parse_sensor_data+1,f
  6443  06E1  0826               	movf	??_bme280_parse_sensor_data+6,w
  6444  06E2  04A2               	iorwf	??_bme280_parse_sensor_data+2,f
  6445  06E3  0827               	movf	??_bme280_parse_sensor_data+7,w
  6446  06E4  04A3               	iorwf	??_bme280_parse_sensor_data+3,f
  6447  06E5  0875               	movf	bme280_parse_sensor_data@uncomp_data,w
  6448  06E6  3E04               	addlw	4
  6449  06E7  0086               	movwf	6
  6450  06E8  3001               	movlw	1	; select bank2/3
  6451  06E9  0087               	movwf	7
  6452  06EA  0820               	movf	??_bme280_parse_sensor_data,w
  6453  06EB  3FC0               	movwi [0]fsr1
  6454  06EC  0821               	movf	??_bme280_parse_sensor_data+1,w
  6455  06ED  3FC1               	movwi [1]fsr1
  6456  06EE  0822               	movf	??_bme280_parse_sensor_data+2,w
  6457  06EF  3FC2               	movwi [2]fsr1
  6458  06F0  0823               	movf	??_bme280_parse_sensor_data+3,w
  6459  06F1  3FC3               	movwi [3]fsr1
  6460                           
  6461                           ;BME280_driver/bme280.c: 719:     data_lsb = (uint32_t)reg_data[6] << 8;
  6462  06F2  0834               	movf	bme280_parse_sensor_data@reg_data,w
  6463  06F3  3E06               	addlw	6
  6464  06F4  0086               	movwf	6
  6465  06F5  3001               	movlw	1	; select bank2/3
  6466  06F6  0087               	movwf	7
  6467  06F7  0801               	movf	1,w
  6468  06F8  00A0               	movwf	??_bme280_parse_sensor_data
  6469  06F9  01A1               	clrf	??_bme280_parse_sensor_data+1
  6470  06FA  01A2               	clrf	??_bme280_parse_sensor_data+2
  6471  06FB  01A3               	clrf	??_bme280_parse_sensor_data+3
  6472  06FC  3008               	movlw	8
  6473  06FD                     u3525:	
  6474  06FD  35A0               	lslf	??_bme280_parse_sensor_data,f
  6475  06FE  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  6476  06FF  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  6477  0700  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  6478  0701  0B89               	decfsz	9,f
  6479  0702  2EFD               	goto	u3525
  6480  0703  0823               	movf	??_bme280_parse_sensor_data+3,w
  6481  0704  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  6482  0705  0822               	movf	??_bme280_parse_sensor_data+2,w
  6483  0706  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  6484  0707  0821               	movf	??_bme280_parse_sensor_data+1,w
  6485  0708  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  6486  0709  0820               	movf	??_bme280_parse_sensor_data,w
  6487  070A  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  6488                           
  6489                           ;BME280_driver/bme280.c: 720:     data_msb = (uint32_t)reg_data[7];
  6490  070B  0834               	movf	bme280_parse_sensor_data@reg_data,w
  6491  070C  3E07               	addlw	7
  6492  070D  0086               	movwf	6
  6493  070E  3001               	movlw	1	; select bank2/3
  6494  070F  0087               	movwf	7
  6495  0710  0801               	movf	1,w
  6496  0711  00A0               	movwf	??_bme280_parse_sensor_data
  6497  0712  01A1               	clrf	??_bme280_parse_sensor_data+1
  6498  0713  01A2               	clrf	??_bme280_parse_sensor_data+2
  6499  0714  01A3               	clrf	??_bme280_parse_sensor_data+3
  6500  0715  0823               	movf	??_bme280_parse_sensor_data+3,w
  6501  0716  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  6502  0717  0822               	movf	??_bme280_parse_sensor_data+2,w
  6503  0718  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  6504  0719  0821               	movf	??_bme280_parse_sensor_data+1,w
  6505  071A  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  6506  071B  0820               	movf	??_bme280_parse_sensor_data,w
  6507  071C  00B0               	movwf	bme280_parse_sensor_data@data_msb
  6508                           
  6509                           ;BME280_driver/bme280.c: 721:     uncomp_data->humidity = data_msb | data_lsb;
  6510  071D  0830               	movf	bme280_parse_sensor_data@data_msb,w
  6511  071E  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  6512  071F  00A0               	movwf	??_bme280_parse_sensor_data
  6513  0720  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  6514  0721  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  6515  0722  00A1               	movwf	??_bme280_parse_sensor_data+1
  6516  0723  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  6517  0724  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  6518  0725  00A2               	movwf	??_bme280_parse_sensor_data+2
  6519  0726  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  6520  0727  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  6521  0728  00A3               	movwf	??_bme280_parse_sensor_data+3
  6522  0729  0875               	movf	bme280_parse_sensor_data@uncomp_data,w
  6523  072A  3E08               	addlw	8
  6524  072B  0086               	movwf	6
  6525  072C  3001               	movlw	1	; select bank2/3
  6526  072D  0087               	movwf	7
  6527  072E  0820               	movf	??_bme280_parse_sensor_data,w
  6528  072F  3FC0               	movwi [0]fsr1
  6529  0730  0821               	movf	??_bme280_parse_sensor_data+1,w
  6530  0731  3FC1               	movwi [1]fsr1
  6531  0732  0822               	movf	??_bme280_parse_sensor_data+2,w
  6532  0733  3FC2               	movwi [2]fsr1
  6533  0734  0823               	movf	??_bme280_parse_sensor_data+3,w
  6534  0735  3FC3               	movwi [3]fsr1
  6535  0736  0008               	return
  6536  0737                     __end_of_bme280_parse_sensor_data:	
  6537                           
  6538                           	psect	text12
  6539  1147                     __ptext12:	
  6540 ;; *************** function _bme280_get_regs *****************
  6541 ;; Defined at:
  6542 ;;		line 409 in file "BME280_driver/bme280.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  reg_addr        1    wreg     unsigned char 
  6545 ;;  reg_data        2   24[BANK0 ] PTR unsigned char 
  6546 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  6547 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  6548 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  6549 ;;  len             2   26[BANK0 ] unsigned short 
  6550 ;;  dev             1   28[BANK0 ] PTR const struct bme280_
  6551 ;;		 -> main@env_sensor(51), 
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;  reg_addr        1   31[BANK0 ] unsigned char 
  6554 ;;  rslt            1   32[BANK0 ] char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  1    wreg      char 
  6557 ;; Registers used:
  6558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 1F/0
  6561 ;;		On exit  : 1F/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6564 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;Total ram usage:        9 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    7
  6571 ;; This function calls:
  6572 ;;		_ReadEnvSensor
  6573 ;;		_null_ptr_check
  6574 ;; This function is called by:
  6575 ;;		_bme280_init
  6576 ;;		_bme280_get_sensor_data
  6577 ;;		_get_calib_data
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _bme280_get_regs
  6583  1147                     _bme280_get_regs:	
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in _bme280_get_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6587                           ;bme280_get_regs@reg_addr stored from wreg
  6588  1147  00BF               	movwf	bme280_get_regs@reg_addr
  6589                           
  6590                           ;BME280_driver/bme280.c: 409: int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data
      +                          , uint16_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 410: {;BME280_driv
      +                          er/bme280.c: 411:     int8_t rslt;;BME280_driver/bme280.c: 414:     rslt = null_ptr_chec
      +                          k(dev);
  6591  1148  083C               	movf	bme280_get_regs@dev,w
  6592  1149  319F  2763  3191   	fcall	_null_ptr_check
  6593  114C  0020               	movlb	0	; select bank0
  6594  114D  00BD               	movwf	??_bme280_get_regs
  6595  114E  083D               	movf	??_bme280_get_regs,w
  6596  114F  00C0               	movwf	bme280_get_regs@rslt
  6597                           
  6598                           ;BME280_driver/bme280.c: 417:     if (rslt == 0)
  6599  1150  0840               	movf	bme280_get_regs@rslt,w
  6600  1151  1D03               	btfss	3,2
  6601  1152  2987               	goto	l65
  6602                           
  6603                           ;BME280_driver/bme280.c: 418:     {;BME280_driver/bme280.c: 420:         if (dev->intf !
      +                          = BME280_I2C_INTF)
  6604  1153  083C               	movf	bme280_get_regs@dev,w
  6605  1154  3E02               	addlw	2
  6606  1155  0086               	movwf	6
  6607  1156  3001               	movlw	1	; select bank2/3
  6608  1157  0087               	movwf	7
  6609  1158  0301               	decf	1,w
  6610  1159  1903               	btfsc	3,2
  6611  115A  2960               	goto	l3304
  6612                           
  6613                           ;BME280_driver/bme280.c: 421:         {;BME280_driver/bme280.c: 422:             reg_add
      +                          r = reg_addr | 0x80;
  6614  115B  083F               	movf	bme280_get_regs@reg_addr,w
  6615  115C  3880               	iorlw	128
  6616  115D  00BD               	movwf	??_bme280_get_regs
  6617  115E  083D               	movf	??_bme280_get_regs,w
  6618  115F  00BF               	movwf	bme280_get_regs@reg_addr
  6619  1160                     l3304:	
  6620                           
  6621                           ;BME280_driver/bme280.c: 426:         rslt = dev->read(dev->dev_id, reg_addr, reg_data, 
      +                          len);
  6622  1160  083C               	movf	bme280_get_regs@dev,w
  6623  1161  0086               	movwf	6
  6624  1162  3001               	movlw	1	; select bank2/3
  6625  1163  0087               	movwf	7
  6626  1164  3001               	movlw	1	; select bank2/3
  6627  1165  3F41               	moviw [1]fsr1
  6628  1166  00AD               	movwf	ReadEnvSensor@dev_id
  6629  1167  083F               	movf	bme280_get_regs@reg_addr,w
  6630  1168  00BD               	movwf	??_bme280_get_regs
  6631  1169  083D               	movf	??_bme280_get_regs,w
  6632  116A  00AE               	movwf	ReadEnvSensor@reg_addr
  6633  116B  0839               	movf	bme280_get_regs@reg_data+1,w
  6634  116C  00B0               	movwf	ReadEnvSensor@data+1
  6635  116D  0838               	movf	bme280_get_regs@reg_data,w
  6636  116E  00AF               	movwf	ReadEnvSensor@data
  6637  116F  083B               	movf	bme280_get_regs@len+1,w
  6638  1170  00B2               	movwf	ReadEnvSensor@len+1
  6639  1171  083A               	movf	bme280_get_regs@len,w
  6640  1172  00B1               	movwf	ReadEnvSensor@len
  6641  1173  083C               	movf	bme280_get_regs@dev,w
  6642  1174  3E03               	addlw	3
  6643  1175  0086               	movwf	6
  6644  1176  3001               	movlw	1	; select bank2/3
  6645  1177  0087               	movwf	7
  6646  1178  3F41               	moviw [1]fsr1
  6647  1179  008A               	movwf	10
  6648  117A  3F40               	moviw [0]fsr1
  6649  117B  000A               	callw
  6650  117C  3191               	pagesel	$
  6651  117D  00BE               	movwf	??_bme280_get_regs+1
  6652  117E  083E               	movf	??_bme280_get_regs+1,w
  6653  117F  00C0               	movwf	bme280_get_regs@rslt
  6654                           
  6655                           ;BME280_driver/bme280.c: 429:         if (rslt != 0)
  6656  1180  0840               	movf	bme280_get_regs@rslt,w
  6657  1181  1903               	btfsc	3,2
  6658  1182  2987               	goto	l65
  6659                           
  6660                           ;BME280_driver/bme280.c: 430:         {;BME280_driver/bme280.c: 431:             rslt = 
      +                          -4;
  6661  1183  30FC               	movlw	252
  6662  1184  00BD               	movwf	??_bme280_get_regs
  6663  1185  083D               	movf	??_bme280_get_regs,w
  6664  1186  00C0               	movwf	bme280_get_regs@rslt
  6665  1187                     l65:	
  6666                           ;BME280_driver/bme280.c: 433:     }
  6667                           
  6668                           
  6669                           ;BME280_driver/bme280.c: 435:     return rslt;
  6670  1187  0840               	movf	bme280_get_regs@rslt,w
  6671  1188  0008               	return
  6672  1189                     __end_of_bme280_get_regs:	
  6673                           
  6674                           	psect	text13
  6675  1F63                     __ptext13:	
  6676 ;; *************** function _null_ptr_check *****************
  6677 ;; Defined at:
  6678 ;;		line 1421 in file "BME280_driver/bme280.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  dev             1    wreg     PTR const struct bme280_
  6681 ;;		 -> main@env_sensor(51), 
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;  dev             1    8[COMMON] PTR const struct bme280_
  6684 ;;		 -> main@env_sensor(51), 
  6685 ;;  rslt            1    7[COMMON] char 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      char 
  6688 ;; Registers used:
  6689 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6690 ;; Tracked objects:
  6691 ;;		On entry : 1E/0
  6692 ;;		On exit  : 1E/0
  6693 ;;		Unchanged: 1E/0
  6694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;Total ram usage:        4 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    3
  6702 ;; This function calls:
  6703 ;;		Nothing
  6704 ;; This function is called by:
  6705 ;;		_bme280_init
  6706 ;;		_bme280_get_regs
  6707 ;;		_bme280_set_regs
  6708 ;;		_bme280_soft_reset
  6709 ;;		_bme280_get_sensor_data
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _null_ptr_check
  6715  1F63                     _null_ptr_check:	
  6716                           
  6717                           ;incstack = 0
  6718                           ; Regs used in _null_ptr_check: [wreg+fsr1l+fsr1h+status,2+status,0]
  6719                           ;null_ptr_check@dev stored from wreg
  6720  1F63  00F8               	movwf	null_ptr_check@dev
  6721                           
  6722                           ;BME280_driver/bme280.c: 1421: static int8_t null_ptr_check(const struct bme280_dev *dev
      +                          );BME280_driver/bme280.c: 1422: {;BME280_driver/bme280.c: 1423:     int8_t rslt;;BME280_
      +                          driver/bme280.c: 1425:     if ((dev == ((void*)0)) || (dev->read == ((void*)0)) || (dev-
      +                          >write == ((void*)0)) || (dev->delay_ms == ((void*)0)))
  6723  1F64  0878               	movf	null_ptr_check@dev,w
  6724  1F65  1903               	btfsc	3,2
  6725  1F66  2F82               	goto	l236
  6726  1F67  0878               	movf	null_ptr_check@dev,w
  6727  1F68  3E03               	addlw	3
  6728  1F69  0086               	movwf	6
  6729  1F6A  3001               	movlw	1	; select bank2/3
  6730  1F6B  0087               	movwf	7
  6731  1F6C  0016               	moviw fsr1++
  6732  1F6D  0401               	iorwf	1,w
  6733  1F6E  1903               	btfsc	3,2
  6734  1F6F  2F82               	goto	l236
  6735  1F70  0878               	movf	null_ptr_check@dev,w
  6736  1F71  3E05               	addlw	5
  6737  1F72  0086               	movwf	6
  6738  1F73  3001               	movlw	1	; select bank2/3
  6739  1F74  0087               	movwf	7
  6740  1F75  0016               	moviw fsr1++
  6741  1F76  0401               	iorwf	1,w
  6742  1F77  1903               	btfsc	3,2
  6743  1F78  2F82               	goto	l236
  6744  1F79  0878               	movf	null_ptr_check@dev,w
  6745  1F7A  3E07               	addlw	7
  6746  1F7B  0086               	movwf	6
  6747  1F7C  3001               	movlw	1	; select bank2/3
  6748  1F7D  0087               	movwf	7
  6749  1F7E  0016               	moviw fsr1++
  6750  1F7F  0401               	iorwf	1,w
  6751  1F80  1D03               	btfss	3,2
  6752  1F81  2F85               	goto	l3138
  6753  1F82                     l236:	
  6754                           
  6755                           ;BME280_driver/bme280.c: 1426:     {;BME280_driver/bme280.c: 1428:         rslt = -1;
  6756  1F82  01F7               	clrf	null_ptr_check@rslt
  6757  1F83  03F7               	decf	null_ptr_check@rslt,f
  6758                           
  6759                           ;BME280_driver/bme280.c: 1429:     }
  6760  1F84  2F86               	goto	l3140
  6761  1F85                     l3138:	
  6762                           
  6763                           ;BME280_driver/bme280.c: 1431:     {;BME280_driver/bme280.c: 1433:         rslt = 0;
  6764  1F85  01F7               	clrf	null_ptr_check@rslt
  6765  1F86                     l3140:	
  6766                           
  6767                           ;BME280_driver/bme280.c: 1436:     return rslt;
  6768  1F86  0877               	movf	null_ptr_check@rslt,w
  6769  1F87  0008               	return
  6770  1F88                     __end_of_null_ptr_check:	
  6771                           
  6772                           	psect	text14
  6773  109E                     __ptext14:	
  6774 ;; *************** function _ReadEnvSensor *****************
  6775 ;; Defined at:
  6776 ;;		line 605 in file "main.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  dev_id          1   13[BANK0 ] unsigned char 
  6779 ;;  reg_addr        1   14[BANK0 ] unsigned char 
  6780 ;;  data            2   15[BANK0 ] PTR unsigned char 
  6781 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  6782 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  6783 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  6784 ;;  len             2   17[BANK0 ] unsigned short 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  status          1   23[BANK0 ] enum E9633
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      char 
  6789 ;; Registers used:
  6790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 1F/0
  6793 ;;		On exit  : 1F/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6796 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;Total ram usage:       11 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    6
  6803 ;; This function calls:
  6804 ;;		_I2C_MasterRead
  6805 ;;		_I2C_MasterWrite
  6806 ;; This function is called by:
  6807 ;;		_main
  6808 ;;		_bme280_get_regs
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _ReadEnvSensor
  6814  109E                     _ReadEnvSensor:	
  6815                           
  6816                           ;main.c: 605: int8_t ReadEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint
      +                          16_t len);main.c: 606: {;main.c: 607:     I2C_MESSAGE_STATUS status = 0;
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in _ReadEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6820  109E  01B7               	clrf	ReadEnvSensor@status
  6821                           
  6822                           ;main.c: 608:     I2C_MasterWrite(&reg_addr, 1, dev_id, &status);
  6823  109F  01A3               	clrf	I2C_MasterWrite@length
  6824  10A0  0AA3               	incf	I2C_MasterWrite@length,f
  6825  10A1  082D               	movf	ReadEnvSensor@dev_id,w
  6826  10A2  00B3               	movwf	??_ReadEnvSensor
  6827  10A3  01B4               	clrf	??_ReadEnvSensor+1
  6828  10A4  0833               	movf	??_ReadEnvSensor,w
  6829  10A5  00A4               	movwf	I2C_MasterWrite@address
  6830  10A6  0834               	movf	??_ReadEnvSensor+1,w
  6831  10A7  00A5               	movwf	I2C_MasterWrite@address+1
  6832  10A8  3037               	movlw	(low (ReadEnvSensor@status| 0))& (0+255)
  6833  10A9  00B5               	movwf	??_ReadEnvSensor+2
  6834  10AA  0835               	movf	??_ReadEnvSensor+2,w
  6835  10AB  00A6               	movwf	I2C_MasterWrite@pflag
  6836  10AC  302E               	movlw	(low (ReadEnvSensor@reg_addr| 0))& (0+255)
  6837  10AD  3187  27D8  3190   	fcall	_I2C_MasterWrite
  6838                           
  6839                           ;main.c: 609:     if (status == 0)
  6840  10B0  0020               	movlb	0	; select bank0
  6841  10B1  0837               	movf	ReadEnvSensor@status,w
  6842  10B2  1D03               	btfss	3,2
  6843  10B3  28CE               	goto	l3162
  6844                           
  6845                           ;main.c: 610:     {;main.c: 611:         I2C_MasterRead(data, len, dev_id, &status);
  6846  10B4  0830               	movf	ReadEnvSensor@data+1,w
  6847  10B5  00A6               	movwf	I2C_MasterRead@pdata+1
  6848  10B6  082F               	movf	ReadEnvSensor@data,w
  6849  10B7  00A5               	movwf	I2C_MasterRead@pdata
  6850  10B8  0831               	movf	ReadEnvSensor@len,w
  6851  10B9  00B3               	movwf	??_ReadEnvSensor
  6852  10BA  0833               	movf	??_ReadEnvSensor,w
  6853  10BB  00A7               	movwf	I2C_MasterRead@length
  6854  10BC  082D               	movf	ReadEnvSensor@dev_id,w
  6855  10BD  00B4               	movwf	??_ReadEnvSensor+1
  6856  10BE  01B5               	clrf	??_ReadEnvSensor+2
  6857  10BF  0834               	movf	??_ReadEnvSensor+1,w
  6858  10C0  00A8               	movwf	I2C_MasterRead@address
  6859  10C1  0835               	movf	??_ReadEnvSensor+2,w
  6860  10C2  00A9               	movwf	I2C_MasterRead@address+1
  6861  10C3  3037               	movlw	(low (ReadEnvSensor@status| 0))& (0+255)
  6862  10C4  00B6               	movwf	??_ReadEnvSensor+3
  6863  10C5  0836               	movf	??_ReadEnvSensor+3,w
  6864  10C6  00AA               	movwf	I2C_MasterRead@pflag
  6865  10C7  319F  27AE  3190   	fcall	_I2C_MasterRead
  6866                           
  6867                           ;main.c: 612:         if (status != 0)
  6868  10CA  0020               	movlb	0	; select bank0
  6869  10CB  0837               	movf	ReadEnvSensor@status,w
  6870  10CC  1903               	btfsc	3,2
  6871  10CD  28D2               	goto	l542
  6872  10CE                     l3162:	
  6873                           
  6874                           ;main.c: 613:         {;main.c: 614:             status = -4;
  6875  10CE  30FC               	movlw	252
  6876  10CF  00B3               	movwf	??_ReadEnvSensor
  6877  10D0  0833               	movf	??_ReadEnvSensor,w
  6878  10D1  00B7               	movwf	ReadEnvSensor@status
  6879  10D2                     l542:	
  6880                           ;main.c: 620:     }
  6881                           
  6882                           
  6883                           ;main.c: 621:     return status;
  6884  10D2  0837               	movf	ReadEnvSensor@status,w
  6885  10D3  0008               	return
  6886  10D4                     __end_of_ReadEnvSensor:	
  6887                           
  6888                           	psect	text15
  6889  07D8                     __ptext15:	
  6890 ;; *************** function _I2C_MasterWrite *****************
  6891 ;; Defined at:
  6892 ;;		line 600 in file "mcc_generated_files/i2c.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;  pdata           1    wreg     PTR unsigned char 
  6895 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  6896 ;;  length          1    3[BANK0 ] unsigned char 
  6897 ;;  address         2    4[BANK0 ] unsigned short 
  6898 ;;  pflag           1    6[BANK0 ] PTR enum E9631
  6899 ;;		 -> WriteEnvSensor@status(1), ReadEnvSensor@status(1), 
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;  pdata           1    9[BANK0 ] PTR unsigned char 
  6902 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  6903 ;; Return value:  Size  Location     Type
  6904 ;;                  1    wreg      void 
  6905 ;; Registers used:
  6906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6907 ;; Tracked objects:
  6908 ;;		On entry : 1F/0
  6909 ;;		On exit  : 1D/0
  6910 ;;		Unchanged: 0/0
  6911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6912 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6916 ;;Total ram usage:        7 bytes
  6917 ;; Hardware stack levels used:    1
  6918 ;; Hardware stack levels required when called:    5
  6919 ;; This function calls:
  6920 ;;		_I2C_MasterTRBInsert
  6921 ;;		_I2C_MasterWriteTRBBuild
  6922 ;; This function is called by:
  6923 ;;		_ReadEnvSensor
  6924 ;;		_WriteEnvSensor
  6925 ;; This function uses a non-reentrant model
  6926 ;;
  6927                           
  6928                           
  6929                           ;psect for function _I2C_MasterWrite
  6930  07D8                     _I2C_MasterWrite:	
  6931                           
  6932                           ;incstack = 0
  6933                           ; Regs used in _I2C_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6934                           ;I2C_MasterWrite@pdata stored from wreg
  6935  07D8  00A9               	movwf	I2C_MasterWrite@pdata
  6936                           
  6937                           ;mcc_generated_files/i2c.c: 601:                                 uint8_t *pdata,;mcc_gen
      +                          erated_files/i2c.c: 602:                                 uint8_t length,;mcc_generated_f
      +                          iles/i2c.c: 603:                                 uint16_t address,;mcc_generated_files/i
      +                          2c.c: 604:                                 I2C_MESSAGE_STATUS *pflag);mcc_generated_file
      +                          s/i2c.c: 605: {;mcc_generated_files/i2c.c: 606:     static I2C_TRANSACTION_REQUEST_BLOCK
      +                           trBlock;;mcc_generated_files/i2c.c: 609:     if (i2c_object.trStatus.s.full != 1)
  6938  07D9  0022               	movlb	2	; select bank2
  6939  07DA  1834               	btfsc	(_i2c_object^(0+256)+2),0
  6940  07DB  2FF9               	goto	l3122
  6941                           
  6942                           ;mcc_generated_files/i2c.c: 610:     {;mcc_generated_files/i2c.c: 611:         I2C_Maste
      +                          rWriteTRBBuild(&trBlock, pdata, length, address);
  6943  07DC  0020               	movlb	0	; select bank0
  6944  07DD  0829               	movf	I2C_MasterWrite@pdata,w
  6945  07DE  00A7               	movwf	??_I2C_MasterWrite
  6946  07DF  0827               	movf	??_I2C_MasterWrite,w
  6947  07E0  00F5               	movwf	I2C_MasterWriteTRBBuild@pdata
  6948  07E1  0823               	movf	I2C_MasterWrite@length,w
  6949  07E2  00A8               	movwf	??_I2C_MasterWrite+1
  6950  07E3  0828               	movf	??_I2C_MasterWrite+1,w
  6951  07E4  00F6               	movwf	I2C_MasterWriteTRBBuild@length
  6952  07E5  0825               	movf	I2C_MasterWrite@address+1,w
  6953  07E6  00F8               	movwf	I2C_MasterWriteTRBBuild@address+1
  6954  07E7  0824               	movf	I2C_MasterWrite@address,w
  6955  07E8  00F7               	movwf	I2C_MasterWriteTRBBuild@address
  6956  07E9  3046               	movlw	(low (I2C_MasterWrite@trBlock| (0+256)))& (0+255)
  6957  07EA  319F  2741  3187   	fcall	_I2C_MasterWriteTRBBuild
  6958                           
  6959                           ;mcc_generated_files/i2c.c: 612:         I2C_MasterTRBInsert(1, &trBlock, pflag);
  6960  07ED  3046               	movlw	(low (I2C_MasterWrite@trBlock| (0+256)))& (0+255)
  6961  07EE  00A7               	movwf	??_I2C_MasterWrite
  6962  07EF  0827               	movf	??_I2C_MasterWrite,w
  6963  07F0  00F5               	movwf	I2C_MasterTRBInsert@ptrb_list
  6964  07F1  0826               	movf	I2C_MasterWrite@pflag,w
  6965  07F2  00A8               	movwf	??_I2C_MasterWrite+1
  6966  07F3  0828               	movf	??_I2C_MasterWrite+1,w
  6967  07F4  00F6               	movwf	I2C_MasterTRBInsert@pflag
  6968  07F5  3001               	movlw	1
  6969  07F6  3191  21D0         	fcall	_I2C_MasterTRBInsert
  6970                           
  6971                           ;mcc_generated_files/i2c.c: 613:     }
  6972  07F8  0008               	return
  6973  07F9                     l3122:	
  6974                           
  6975                           ;mcc_generated_files/i2c.c: 615:     {;mcc_generated_files/i2c.c: 616:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  6976  07F9  0020               	movlb	0	; select bank0
  6977  07FA  0826               	movf	I2C_MasterWrite@pflag,w
  6978  07FB  0086               	movwf	6
  6979  07FC  0187               	clrf	7
  6980  07FD  0181               	clrf	1
  6981  07FE  0A81               	incf	1,f
  6982  07FF  0008               	return
  6983  0800                     __end_of_I2C_MasterWrite:	
  6984                           
  6985                           	psect	text16
  6986  1F41                     __ptext16:	
  6987 ;; *************** function _I2C_MasterWriteTRBBuild *****************
  6988 ;; Defined at:
  6989 ;;		line 721 in file "mcc_generated_files/i2c.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;  ptrb            1    wreg     PTR struct .
  6992 ;;		 -> I2C_MasterWrite@trBlock(5), 
  6993 ;;  pdata           1    5[COMMON] PTR unsigned char 
  6994 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  6995 ;;  length          1    6[COMMON] unsigned char 
  6996 ;;  address         2    7[COMMON] unsigned short 
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;  ptrb            1    2[BANK0 ] PTR struct .
  6999 ;;		 -> I2C_MasterWrite@trBlock(5), 
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      void 
  7002 ;; Registers used:
  7003 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7004 ;; Tracked objects:
  7005 ;;		On entry : 1F/0
  7006 ;;		On exit  : 1F/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7009 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7012 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;Total ram usage:        7 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    3
  7016 ;; This function calls:
  7017 ;;		Nothing
  7018 ;; This function is called by:
  7019 ;;		_I2C_MasterWrite
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           
  7024                           ;psect for function _I2C_MasterWriteTRBBuild
  7025  1F41                     _I2C_MasterWriteTRBBuild:	
  7026                           
  7027                           ;incstack = 0
  7028                           ; Regs used in _I2C_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  7029                           ;I2C_MasterWriteTRBBuild@ptrb stored from wreg
  7030  1F41  00A2               	movwf	I2C_MasterWriteTRBBuild@ptrb
  7031                           
  7032                           ;mcc_generated_files/i2c.c: 722:                                 I2C_TRANSACTION_REQUEST
      +                          _BLOCK *ptrb,;mcc_generated_files/i2c.c: 723:                                 uint8_t *p
      +                          data,;mcc_generated_files/i2c.c: 724:                                 uint8_t length,;mc
      +                          c_generated_files/i2c.c: 725:                                 uint16_t address);mcc_gene
      +                          rated_files/i2c.c: 726: {;mcc_generated_files/i2c.c: 727:     ptrb->address = address <<
      +                           1;
  7033  1F42  0878               	movf	I2C_MasterWriteTRBBuild@address+1,w
  7034  1F43  00A1               	movwf	??_I2C_MasterWriteTRBBuild+1
  7035  1F44  0877               	movf	I2C_MasterWriteTRBBuild@address,w
  7036  1F45  00A0               	movwf	??_I2C_MasterWriteTRBBuild
  7037  1F46  35A0               	lslf	??_I2C_MasterWriteTRBBuild,f
  7038  1F47  0DA1               	rlf	??_I2C_MasterWriteTRBBuild+1,f
  7039  1F48  0822               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  7040  1F49  0086               	movwf	6
  7041  1F4A  3001               	movlw	1	; select bank2/3
  7042  1F4B  0087               	movwf	7
  7043  1F4C  0820               	movf	??_I2C_MasterWriteTRBBuild,w
  7044  1F4D  3FC0               	movwi [0]fsr1
  7045  1F4E  0821               	movf	??_I2C_MasterWriteTRBBuild+1,w
  7046  1F4F  3FC1               	movwi [1]fsr1
  7047                           
  7048                           ;mcc_generated_files/i2c.c: 728:     ptrb->length = length;
  7049  1F50  0876               	movf	I2C_MasterWriteTRBBuild@length,w
  7050  1F51  00A0               	movwf	??_I2C_MasterWriteTRBBuild
  7051  1F52  0822               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  7052  1F53  3E02               	addlw	2
  7053  1F54  0086               	movwf	6
  7054  1F55  3001               	movlw	1	; select bank2/3
  7055  1F56  0087               	movwf	7
  7056  1F57  0820               	movf	??_I2C_MasterWriteTRBBuild,w
  7057  1F58  0081               	movwf	1
  7058                           
  7059                           ;mcc_generated_files/i2c.c: 729:     ptrb->pbuffer = pdata;
  7060  1F59  0822               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  7061  1F5A  3E03               	addlw	3
  7062  1F5B  0086               	movwf	6
  7063  1F5C  3001               	movlw	1	; select bank2/3
  7064  1F5D  0087               	movwf	7
  7065  1F5E  0875               	movf	I2C_MasterWriteTRBBuild@pdata,w
  7066  1F5F  3FC0               	movwi [0]fsr1
  7067  1F60  3000               	movlw	0
  7068  1F61  3FC1               	movwi [1]fsr1
  7069  1F62  0008               	return
  7070  1F63                     __end_of_I2C_MasterWriteTRBBuild:	
  7071                           
  7072                           	psect	text17
  7073  1FAE                     __ptext17:	
  7074 ;; *************** function _I2C_MasterRead *****************
  7075 ;; Defined at:
  7076 ;;		line 621 in file "mcc_generated_files/i2c.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;  pdata           2    5[BANK0 ] PTR unsigned char 
  7079 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  7080 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  7081 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  7082 ;;  length          1    7[BANK0 ] unsigned char 
  7083 ;;  address         2    8[BANK0 ] unsigned short 
  7084 ;;  pflag           1   10[BANK0 ] PTR enum E9631
  7085 ;;		 -> ReadEnvSensor@status(1), 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;		None
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      void 
  7090 ;; Registers used:
  7091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 1F/0
  7094 ;;		On exit  : 1D/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7097 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;Total ram usage:        8 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    5
  7104 ;; This function calls:
  7105 ;;		_I2C_MasterReadTRBBuild
  7106 ;;		_I2C_MasterTRBInsert
  7107 ;; This function is called by:
  7108 ;;		_ReadEnvSensor
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           
  7113                           ;psect for function _I2C_MasterRead
  7114  1FAE                     _I2C_MasterRead:	
  7115                           
  7116                           ;mcc_generated_files/i2c.c: 622:                                 uint8_t *pdata,;mcc_gen
      +                          erated_files/i2c.c: 623:                                 uint8_t length,;mcc_generated_f
      +                          iles/i2c.c: 624:                                 uint16_t address,;mcc_generated_files/i
      +                          2c.c: 625:                                 I2C_MESSAGE_STATUS *pflag);mcc_generated_file
      +                          s/i2c.c: 626: {;mcc_generated_files/i2c.c: 627:     static I2C_TRANSACTION_REQUEST_BLOCK
      +                           trBlock;;mcc_generated_files/i2c.c: 631:     if (i2c_object.trStatus.s.full != 1)
  7117                           
  7118                           ;incstack = 0
  7119                           ; Regs used in _I2C_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7120  1FAE  0022               	movlb	2	; select bank2
  7121  1FAF  1834               	btfsc	(_i2c_object^(0+256)+2),0
  7122  1FB0  2FCE               	goto	l3128
  7123                           
  7124                           ;mcc_generated_files/i2c.c: 632:     {;mcc_generated_files/i2c.c: 633:         I2C_Maste
      +                          rReadTRBBuild(&trBlock, pdata, length, address);
  7125  1FB1  0020               	movlb	0	; select bank0
  7126  1FB2  0826               	movf	I2C_MasterRead@pdata+1,w
  7127  1FB3  00A1               	movwf	I2C_MasterReadTRBBuild@pdata+1
  7128  1FB4  0825               	movf	I2C_MasterRead@pdata,w
  7129  1FB5  00A0               	movwf	I2C_MasterReadTRBBuild@pdata
  7130  1FB6  0827               	movf	I2C_MasterRead@length,w
  7131  1FB7  00AB               	movwf	??_I2C_MasterRead
  7132  1FB8  082B               	movf	??_I2C_MasterRead,w
  7133  1FB9  00A2               	movwf	I2C_MasterReadTRBBuild@length
  7134  1FBA  0829               	movf	I2C_MasterRead@address+1,w
  7135  1FBB  00A4               	movwf	I2C_MasterReadTRBBuild@address+1
  7136  1FBC  0828               	movf	I2C_MasterRead@address,w
  7137  1FBD  00A3               	movwf	I2C_MasterReadTRBBuild@address
  7138  1FBE  3041               	movlw	(low (I2C_MasterRead@trBlock| (0+256)))& (0+255)
  7139  1FBF  319F  27D5  319F   	fcall	_I2C_MasterReadTRBBuild
  7140                           
  7141                           ;mcc_generated_files/i2c.c: 634:         I2C_MasterTRBInsert(1, &trBlock, pflag);
  7142  1FC2  3041               	movlw	(low (I2C_MasterRead@trBlock| (0+256)))& (0+255)
  7143  1FC3  00AB               	movwf	??_I2C_MasterRead
  7144  1FC4  082B               	movf	??_I2C_MasterRead,w
  7145  1FC5  00F5               	movwf	I2C_MasterTRBInsert@ptrb_list
  7146  1FC6  082A               	movf	I2C_MasterRead@pflag,w
  7147  1FC7  00AC               	movwf	??_I2C_MasterRead+1
  7148  1FC8  082C               	movf	??_I2C_MasterRead+1,w
  7149  1FC9  00F6               	movwf	I2C_MasterTRBInsert@pflag
  7150  1FCA  3001               	movlw	1
  7151  1FCB  3191  21D0         	fcall	_I2C_MasterTRBInsert
  7152                           
  7153                           ;mcc_generated_files/i2c.c: 635:     }
  7154  1FCD  0008               	return
  7155  1FCE                     l3128:	
  7156                           
  7157                           ;mcc_generated_files/i2c.c: 637:     {;mcc_generated_files/i2c.c: 638:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  7158  1FCE  0020               	movlb	0	; select bank0
  7159  1FCF  082A               	movf	I2C_MasterRead@pflag,w
  7160  1FD0  0086               	movwf	6
  7161  1FD1  0187               	clrf	7
  7162  1FD2  0181               	clrf	1
  7163  1FD3  0A81               	incf	1,f
  7164  1FD4  0008               	return
  7165  1FD5                     __end_of_I2C_MasterRead:	
  7166                           
  7167                           	psect	text18
  7168  11D0                     __ptext18:	
  7169 ;; *************** function _I2C_MasterTRBInsert *****************
  7170 ;; Defined at:
  7171 ;;		line 654 in file "mcc_generated_files/i2c.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;  count           1    wreg     unsigned char 
  7174 ;;  ptrb_list       1    5[COMMON] PTR struct .
  7175 ;;		 -> I2C_MasterRead@trBlock(5), I2C_MasterWrite@trBlock(5), 
  7176 ;;  pflag           1    6[COMMON] PTR enum E9631
  7177 ;;		 -> WriteEnvSensor@status(1), ReadEnvSensor@status(1), 
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;  count           1    8[COMMON] unsigned char 
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  1    wreg      void 
  7182 ;; Registers used:
  7183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7184 ;; Tracked objects:
  7185 ;;		On entry : 1F/0
  7186 ;;		On exit  : 1D/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7189 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;Total ram usage:        4 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:    4
  7196 ;; This function calls:
  7197 ;;		_I2C_WaitForLastPacketToComplete
  7198 ;; This function is called by:
  7199 ;;		_I2C_MasterWrite
  7200 ;;		_I2C_MasterRead
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           
  7205                           ;psect for function _I2C_MasterTRBInsert
  7206  11D0                     _I2C_MasterTRBInsert:	
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in _I2C_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7210                           ;I2C_MasterTRBInsert@count stored from wreg
  7211  11D0  00F8               	movwf	I2C_MasterTRBInsert@count
  7212                           
  7213                           ;mcc_generated_files/i2c.c: 655:                                 uint8_t count,;mcc_gene
      +                          rated_files/i2c.c: 656:                                 I2C_TRANSACTION_REQUEST_BLOCK *p
      +                          trb_list,;mcc_generated_files/i2c.c: 657:                                 I2C_MESSAGE_ST
      +                          ATUS *pflag);mcc_generated_files/i2c.c: 658: {;mcc_generated_files/i2c.c: 661:     if (i
      +                          2c_object.trStatus.s.full != 1)
  7214  11D1  0022               	movlb	2	; select bank2
  7215  11D2  1834               	btfsc	(_i2c_object^(0+256)+2),0
  7216  11D3  2A07               	goto	l3108
  7217                           
  7218                           ;mcc_generated_files/i2c.c: 662:     {;mcc_generated_files/i2c.c: 663:         *pflag = 
      +                          I2C_MESSAGE_PENDING;
  7219  11D4  3002               	movlw	2
  7220  11D5  00F7               	movwf	??_I2C_MasterTRBInsert
  7221  11D6  0876               	movf	I2C_MasterTRBInsert@pflag,w
  7222  11D7  0086               	movwf	6
  7223  11D8  0187               	clrf	7
  7224  11D9  0877               	movf	??_I2C_MasterTRBInsert,w
  7225  11DA  0081               	movwf	1
  7226                           
  7227                           ;mcc_generated_files/i2c.c: 665:         i2c_object.pTrTail->ptrb_list = ptrb_list;
  7228  11DB  0875               	movf	I2C_MasterTRBInsert@ptrb_list,w
  7229  11DC  00F7               	movwf	??_I2C_MasterTRBInsert
  7230  11DD  0A32               	incf	_i2c_object^(0+256),w
  7231  11DE  0086               	movwf	6
  7232  11DF  3001               	movlw	1	; select bank2/3
  7233  11E0  0087               	movwf	7
  7234  11E1  0877               	movf	??_I2C_MasterTRBInsert,w
  7235  11E2  0081               	movwf	1
  7236                           
  7237                           ;mcc_generated_files/i2c.c: 666:         i2c_object.pTrTail->count = count;
  7238  11E3  0878               	movf	I2C_MasterTRBInsert@count,w
  7239  11E4  00F7               	movwf	??_I2C_MasterTRBInsert
  7240  11E5  0832               	movf	_i2c_object^(0+256),w
  7241  11E6  0086               	movwf	6
  7242  11E7  3001               	movlw	1	; select bank2/3
  7243  11E8  0087               	movwf	7
  7244  11E9  0877               	movf	??_I2C_MasterTRBInsert,w
  7245  11EA  0081               	movwf	1
  7246                           
  7247                           ;mcc_generated_files/i2c.c: 667:         i2c_object.pTrTail->pTrFlag = pflag;
  7248  11EB  0832               	movf	_i2c_object^(0+256),w
  7249  11EC  3E02               	addlw	2
  7250  11ED  0086               	movwf	6
  7251  11EE  3001               	movlw	1	; select bank2/3
  7252  11EF  0087               	movwf	7
  7253  11F0  0876               	movf	I2C_MasterTRBInsert@pflag,w
  7254  11F1  3FC0               	movwi [0]fsr1
  7255  11F2  3000               	movlw	0
  7256  11F3  3FC1               	movwi [1]fsr1
  7257                           
  7258                           ;mcc_generated_files/i2c.c: 668:         i2c_object.pTrTail++;
  7259  11F4  3004               	movlw	4
  7260  11F5  00F7               	movwf	??_I2C_MasterTRBInsert
  7261  11F6  0877               	movf	??_I2C_MasterTRBInsert,w
  7262  11F7  07B2               	addwf	_i2c_object^(0+256),f
  7263                           
  7264                           ;mcc_generated_files/i2c.c: 671:         if (i2c_object.pTrTail == (i2c_tr_queue + 1))
  7265  11F8  0832               	movf	_i2c_object^(0+256),w
  7266  11F9  3A4F               	xorlw	(low ((_i2c_tr_queue| (0+256)+4)))& (0+255)
  7267  11FA  1D03               	skipz
  7268  11FB  2A00               	goto	l3104
  7269                           
  7270                           ;mcc_generated_files/i2c.c: 672:         {;mcc_generated_files/i2c.c: 674:             i
      +                          2c_object.pTrTail = i2c_tr_queue;
  7271  11FC  304B               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
  7272  11FD  00F7               	movwf	??_I2C_MasterTRBInsert
  7273  11FE  0877               	movf	??_I2C_MasterTRBInsert,w
  7274  11FF  00B2               	movwf	_i2c_object^(0+256)
  7275  1200                     l3104:	
  7276                           
  7277                           ;mcc_generated_files/i2c.c: 679:         i2c_object.trStatus.s.empty = 0;
  7278  1200  10B4               	bcf	(_i2c_object^(0+256)+2),1
  7279                           
  7280                           ;mcc_generated_files/i2c.c: 682:         if (i2c_object.pTrHead == i2c_object.pTrTail)
  7281  1201  0833               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
  7282  1202  0632               	xorwf	_i2c_object^(0+256),w
  7283  1203  1D03               	skipz
  7284  1204  2A0C               	goto	l3110
  7285                           
  7286                           ;mcc_generated_files/i2c.c: 683:         {;mcc_generated_files/i2c.c: 685:             i
      +                          2c_object.trStatus.s.full = 1;
  7287  1205  1434               	bsf	(_i2c_object^(0+256)+2),0
  7288  1206  2A0C               	goto	l3110
  7289  1207                     l3108:	
  7290                           
  7291                           ;mcc_generated_files/i2c.c: 690:     {;mcc_generated_files/i2c.c: 691:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  7292  1207  0876               	movf	I2C_MasterTRBInsert@pflag,w
  7293  1208  0086               	movwf	6
  7294  1209  0187               	clrf	7
  7295  120A  0181               	clrf	1
  7296  120B  0A81               	incf	1,f
  7297  120C                     l3110:	
  7298                           
  7299                           ;mcc_generated_files/i2c.c: 695:     if (*pflag == I2C_MESSAGE_PENDING)
  7300  120C  0876               	movf	I2C_MasterTRBInsert@pflag,w
  7301  120D  0086               	movwf	6
  7302  120E  0187               	clrf	7
  7303  120F  3002               	movlw	2
  7304  1210  0601               	xorwf	1,w
  7305  1211  1D03               	btfss	3,2
  7306  1212  0008               	return
  7307                           
  7308                           ;mcc_generated_files/i2c.c: 696:     {;mcc_generated_files/i2c.c: 697:         I2C_WaitF
      +                          orLastPacketToComplete();
  7309  1213  319E  2694         	fcall	_I2C_WaitForLastPacketToComplete
  7310                           
  7311                           ;mcc_generated_files/i2c.c: 702:         PIR1bits.SSP1IF = 1;
  7312  1215  0020               	movlb	0	; select bank0
  7313  1216  1590               	bsf	16,3	;volatile
  7314  1217  0008               	return
  7315  1218                     __end_of_I2C_MasterTRBInsert:	
  7316                           
  7317                           	psect	text19
  7318  1E94                     __ptext19:	
  7319 ;; *************** function _I2C_WaitForLastPacketToComplete *****************
  7320 ;; Defined at:
  7321 ;;		line 644 in file "mcc_generated_files/i2c.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;		None
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;		None
  7326 ;; Return value:  Size  Location     Type
  7327 ;;                  1    wreg      void 
  7328 ;; Registers used:
  7329 ;;		wreg, status,2, status,0
  7330 ;; Tracked objects:
  7331 ;;		On entry : 1F/2
  7332 ;;		On exit  : 1F/2
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;Total ram usage:        0 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; Hardware stack levels required when called:    3
  7342 ;; This function calls:
  7343 ;;		Nothing
  7344 ;; This function is called by:
  7345 ;;		_I2C_MasterTRBInsert
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           
  7350                           ;psect for function _I2C_WaitForLastPacketToComplete
  7351  1E94                     _I2C_WaitForLastPacketToComplete:	
  7352  1E94                     l3090:	
  7353                           ;mcc_generated_files/i2c.c: 646:     while(i2c_state != S_MASTER_IDLE)
  7354                           
  7355                           ;incstack = 0
  7356                           ; Regs used in _I2C_WaitForLastPacketToComplete: [wreg+status,2+status,0]
  7357                           
  7358                           
  7359                           ;mcc_generated_files/i2c.c: 646:     while(i2c_state != S_MASTER_IDLE)
  7360  1E94  0840               	movf	_i2c_state^(0+256),w
  7361  1E95  1903               	btfsc	3,2
  7362  1E96  0008               	return
  7363  1E97  2E94               	goto	l3090
  7364  1E98                     __end_of_I2C_WaitForLastPacketToComplete:	
  7365                           
  7366                           	psect	text20
  7367  1FD5                     __ptext20:	
  7368 ;; *************** function _I2C_MasterReadTRBBuild *****************
  7369 ;; Defined at:
  7370 ;;		line 708 in file "mcc_generated_files/i2c.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  ptrb            1    wreg     PTR struct .
  7373 ;;		 -> I2C_MasterRead@trBlock(5), 
  7374 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
  7375 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  7376 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  7377 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  7378 ;;  length          1    2[BANK0 ] unsigned char 
  7379 ;;  address         2    3[BANK0 ] unsigned short 
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;  ptrb            1    7[COMMON] PTR struct .
  7382 ;;		 -> I2C_MasterRead@trBlock(5), 
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  1    wreg      void 
  7385 ;; Registers used:
  7386 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7387 ;; Tracked objects:
  7388 ;;		On entry : 1F/0
  7389 ;;		On exit  : 1F/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7392 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;Total ram usage:        8 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:    3
  7399 ;; This function calls:
  7400 ;;		Nothing
  7401 ;; This function is called by:
  7402 ;;		_I2C_MasterRead
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           
  7407                           ;psect for function _I2C_MasterReadTRBBuild
  7408  1FD5                     _I2C_MasterReadTRBBuild:	
  7409                           
  7410                           ;incstack = 0
  7411                           ; Regs used in _I2C_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  7412                           ;I2C_MasterReadTRBBuild@ptrb stored from wreg
  7413  1FD5  00F7               	movwf	I2C_MasterReadTRBBuild@ptrb
  7414                           
  7415                           ;mcc_generated_files/i2c.c: 709:                                 I2C_TRANSACTION_REQUEST
      +                          _BLOCK *ptrb,;mcc_generated_files/i2c.c: 710:                                 uint8_t *p
      +                          data,;mcc_generated_files/i2c.c: 711:                                 uint8_t length,;mc
      +                          c_generated_files/i2c.c: 712:                                 uint16_t address);mcc_gene
      +                          rated_files/i2c.c: 713: {;mcc_generated_files/i2c.c: 714:     ptrb->address = address <<
      +                           1;
  7416  1FD6  0824               	movf	I2C_MasterReadTRBBuild@address+1,w
  7417  1FD7  00F6               	movwf	??_I2C_MasterReadTRBBuild+1
  7418  1FD8  0823               	movf	I2C_MasterReadTRBBuild@address,w
  7419  1FD9  00F5               	movwf	??_I2C_MasterReadTRBBuild
  7420  1FDA  35F5               	lslf	??_I2C_MasterReadTRBBuild,f
  7421  1FDB  0DF6               	rlf	??_I2C_MasterReadTRBBuild+1,f
  7422  1FDC  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  7423  1FDD  0086               	movwf	6
  7424  1FDE  3001               	movlw	1	; select bank2/3
  7425  1FDF  0087               	movwf	7
  7426  1FE0  0875               	movf	??_I2C_MasterReadTRBBuild,w
  7427  1FE1  3FC0               	movwi [0]fsr1
  7428  1FE2  0876               	movf	??_I2C_MasterReadTRBBuild+1,w
  7429  1FE3  3FC1               	movwi [1]fsr1
  7430                           
  7431                           ;mcc_generated_files/i2c.c: 716:     ptrb->address |= 0x01;
  7432  1FE4  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  7433  1FE5  0086               	movwf	6
  7434  1FE6  3001               	movlw	1	; select bank2/3
  7435  1FE7  0087               	movwf	7
  7436  1FE8  3001               	movlw	1
  7437  1FE9  0481               	iorwf	1,f
  7438  1FEA  3141               	addfsr 1,1
  7439  1FEB  3000               	movlw	0
  7440  1FEC  0481               	iorwf	1,f
  7441                           
  7442                           ;mcc_generated_files/i2c.c: 717:     ptrb->length = length;
  7443  1FED  0822               	movf	I2C_MasterReadTRBBuild@length,w
  7444  1FEE  00F5               	movwf	??_I2C_MasterReadTRBBuild
  7445  1FEF  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  7446  1FF0  3E02               	addlw	2
  7447  1FF1  0086               	movwf	6
  7448  1FF2  3001               	movlw	1	; select bank2/3
  7449  1FF3  0087               	movwf	7
  7450  1FF4  0875               	movf	??_I2C_MasterReadTRBBuild,w
  7451  1FF5  0081               	movwf	1
  7452                           
  7453                           ;mcc_generated_files/i2c.c: 718:     ptrb->pbuffer = pdata;
  7454  1FF6  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  7455  1FF7  3E03               	addlw	3
  7456  1FF8  0086               	movwf	6
  7457  1FF9  3001               	movlw	1	; select bank2/3
  7458  1FFA  0087               	movwf	7
  7459  1FFB  0820               	movf	I2C_MasterReadTRBBuild@pdata,w
  7460  1FFC  3FC0               	movwi [0]fsr1
  7461  1FFD  0821               	movf	I2C_MasterReadTRBBuild@pdata+1,w
  7462  1FFE  3FC1               	movwi [1]fsr1
  7463  1FFF  0008               	return
  7464  2000                     __end_of_I2C_MasterReadTRBBuild:	
  7465                           
  7466                           	psect	text21
  7467  145A                     __ptext21:	
  7468 ;; *************** function _bme280_compensate_data *****************
  7469 ;; Defined at:
  7470 ;;		line 729 in file "BME280_driver/bme280.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  sensor_comp     1    wreg     unsigned char 
  7473 ;;  uncomp_data     1   69[BANK1 ] PTR const struct bme280_
  7474 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7475 ;;  comp_data       1   70[BANK1 ] PTR struct bme280_data
  7476 ;;		 -> main@sensor_data(12), 
  7477 ;;  calib_data      1   71[BANK1 ] PTR struct bme280_calib_
  7478 ;;		 -> main@env_sensor(51), 
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;  sensor_comp     1   74[BANK1 ] unsigned char 
  7481 ;;  rslt            1   73[BANK1 ] char 
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  1    wreg      char 
  7484 ;; Registers used:
  7485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7486 ;; Tracked objects:
  7487 ;;		On entry : 1F/2
  7488 ;;		On exit  : 1F/1
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7491 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;Total ram usage:        6 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    5
  7498 ;; This function calls:
  7499 ;;		_compensate_humidity
  7500 ;;		_compensate_pressure
  7501 ;;		_compensate_temperature
  7502 ;; This function is called by:
  7503 ;;		_bme280_get_sensor_data
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           
  7508                           ;psect for function _bme280_compensate_data
  7509  145A                     _bme280_compensate_data:	
  7510                           
  7511                           ;incstack = 0
  7512                           ; Regs used in _bme280_compensate_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7513                           ;bme280_compensate_data@sensor_comp stored from wreg
  7514  145A  0021               	movlb	1	; select bank1
  7515  145B  00EA               	movwf	bme280_compensate_data@sensor_comp^(0+128)
  7516                           
  7517                           ;BME280_driver/bme280.c: 729: int8_t bme280_compensate_data(uint8_t sensor_comp,;BME280_
      +                          driver/bme280.c: 730:                               const struct bme280_uncomp_data *unc
      +                          omp_data,;BME280_driver/bme280.c: 731:                               struct bme280_data 
      +                          *comp_data,;BME280_driver/bme280.c: 732:                               struct bme280_cal
      +                          ib_data *calib_data);BME280_driver/bme280.c: 733: {;BME280_driver/bme280.c: 734:     int
      +                          8_t rslt = 0;
  7518  145C  01E9               	clrf	bme280_compensate_data@rslt^(0+128)
  7519                           
  7520                           ;BME280_driver/bme280.c: 736:     if ((uncomp_data != ((void*)0)) && (comp_data != ((voi
      +                          d*)0)) && (calib_data != ((void*)0)))
  7521  145D  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  7522  145E  1903               	btfsc	3,2
  7523  145F  2CDA               	goto	l126
  7524  1460  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  7525  1461  1903               	btfsc	3,2
  7526  1462  2CDA               	goto	l126
  7527  1463  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  7528  1464  1903               	btfsc	3,2
  7529  1465  2CDA               	goto	l126
  7530                           
  7531                           ;BME280_driver/bme280.c: 737:     {;BME280_driver/bme280.c: 739:         comp_data->temp
      +                          erature = 0;
  7532  1466  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  7533  1467  3E04               	addlw	4
  7534  1468  0086               	movwf	6
  7535  1469  3001               	movlw	1	; select bank2/3
  7536  146A  0087               	movwf	7
  7537  146B  3000               	movlw	0
  7538  146C  3FC0               	movwi [0]fsr1
  7539  146D  3000               	movlw	0
  7540  146E  3FC1               	movwi [1]fsr1
  7541  146F  3FC2               	movwi [2]fsr1
  7542  1470  3FC3               	movwi [3]fsr1
  7543                           
  7544                           ;BME280_driver/bme280.c: 740:         comp_data->pressure = 0;
  7545  1471  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  7546  1472  0086               	movwf	6
  7547  1473  3001               	movlw	1	; select bank2/3
  7548  1474  0087               	movwf	7
  7549  1475  3000               	movlw	0
  7550  1476  3FC0               	movwi [0]fsr1
  7551  1477  3FC1               	movwi [1]fsr1
  7552  1478  3FC2               	movwi [2]fsr1
  7553  1479  3FC3               	movwi [3]fsr1
  7554                           
  7555                           ;BME280_driver/bme280.c: 741:         comp_data->humidity = 0;
  7556  147A  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  7557  147B  3E08               	addlw	8
  7558  147C  0086               	movwf	6
  7559  147D  3001               	movlw	1	; select bank2/3
  7560  147E  0087               	movwf	7
  7561  147F  3000               	movlw	0
  7562  1480  3FC0               	movwi [0]fsr1
  7563  1481  3000               	movlw	0
  7564  1482  3FC1               	movwi [1]fsr1
  7565  1483  3FC2               	movwi [2]fsr1
  7566  1484  3FC3               	movwi [3]fsr1
  7567                           
  7568                           ;BME280_driver/bme280.c: 744:         if (sensor_comp & (1 | 1 << 1 | 1 << 2))
  7569  1485  086A               	movf	bme280_compensate_data@sensor_comp^(0+128),w
  7570  1486  3907               	andlw	7
  7571  1487  1903               	btfsc	3,2
  7572  1488  2CA2               	goto	l3536
  7573                           
  7574                           ;BME280_driver/bme280.c: 745:         {;BME280_driver/bme280.c: 747:             comp_da
      +                          ta->temperature = compensate_temperature(uncomp_data, calib_data);
  7575  1489  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  7576  148A  00E8               	movwf	??_bme280_compensate_data^(0+128)
  7577  148B  0868               	movf	??_bme280_compensate_data^(0+128),w
  7578  148C  0020               	movlb	0	; select bank0
  7579  148D  00B7               	movwf	compensate_temperature@calib_data
  7580  148E  0021               	movlb	1	; select bank1
  7581  148F  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  7582  1490  3183  231E  3194   	fcall	_compensate_temperature
  7583  1493  0021               	movlb	1	; select bank1
  7584  1494  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  7585  1495  3E04               	addlw	4
  7586  1496  0086               	movwf	6
  7587  1497  3001               	movlw	1	; select bank2/3
  7588  1498  0087               	movwf	7
  7589  1499  0020               	movlb	0	; select bank0
  7590  149A  0837               	movf	?_compensate_temperature,w
  7591  149B  3FC0               	movwi [0]fsr1
  7592  149C  0838               	movf	?_compensate_temperature+1,w
  7593  149D  3FC1               	movwi [1]fsr1
  7594  149E  0839               	movf	?_compensate_temperature+2,w
  7595  149F  3FC2               	movwi [2]fsr1
  7596  14A0  083A               	movf	?_compensate_temperature+3,w
  7597  14A1  3FC3               	movwi [3]fsr1
  7598  14A2                     l3536:	
  7599                           
  7600                           ;BME280_driver/bme280.c: 749:         if (sensor_comp & 1)
  7601  14A2  0021               	movlb	1	; select bank1
  7602  14A3  1C6A               	btfss	bme280_compensate_data@sensor_comp^(0+128),0
  7603  14A4  2CBD               	goto	l3540
  7604                           
  7605                           ;BME280_driver/bme280.c: 750:         {;BME280_driver/bme280.c: 752:             comp_da
      +                          ta->pressure = compensate_pressure(uncomp_data, calib_data);
  7606  14A5  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  7607  14A6  00E8               	movwf	??_bme280_compensate_data^(0+128)
  7608  14A7  0868               	movf	??_bme280_compensate_data^(0+128),w
  7609  14A8  0020               	movlb	0	; select bank0
  7610  14A9  00D2               	movwf	compensate_pressure@calib_data
  7611  14AA  0021               	movlb	1	; select bank1
  7612  14AB  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  7613  14AC  3187  2737  3194   	fcall	_compensate_pressure
  7614  14AF  0021               	movlb	1	; select bank1
  7615  14B0  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  7616  14B1  0086               	movwf	6
  7617  14B2  3001               	movlw	1	; select bank2/3
  7618  14B3  0087               	movwf	7
  7619  14B4  0020               	movlb	0	; select bank0
  7620  14B5  0852               	movf	?_compensate_pressure,w
  7621  14B6  3FC0               	movwi [0]fsr1
  7622  14B7  0853               	movf	?_compensate_pressure+1,w
  7623  14B8  3FC1               	movwi [1]fsr1
  7624  14B9  0854               	movf	?_compensate_pressure+2,w
  7625  14BA  3FC2               	movwi [2]fsr1
  7626  14BB  0855               	movf	?_compensate_pressure+3,w
  7627  14BC  3FC3               	movwi [3]fsr1
  7628  14BD                     l3540:	
  7629                           
  7630                           ;BME280_driver/bme280.c: 754:         if (sensor_comp & 1 << 2)
  7631  14BD  0021               	movlb	1	; select bank1
  7632  14BE  1D6A               	btfss	bme280_compensate_data@sensor_comp^(0+128),2
  7633  14BF  2CDC               	goto	l3544
  7634                           
  7635                           ;BME280_driver/bme280.c: 755:         {;BME280_driver/bme280.c: 757:             comp_da
      +                          ta->humidity = compensate_humidity(uncomp_data, calib_data);
  7636  14C0  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  7637  14C1  00E8               	movwf	??_bme280_compensate_data^(0+128)
  7638  14C2  0868               	movf	??_bme280_compensate_data^(0+128),w
  7639  14C3  0020               	movlb	0	; select bank0
  7640  14C4  00B7               	movwf	compensate_humidity@calib_data
  7641  14C5  0021               	movlb	1	; select bank1
  7642  14C6  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  7643  14C7  3180  2065  3194   	fcall	_compensate_humidity
  7644  14CA  0021               	movlb	1	; select bank1
  7645  14CB  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  7646  14CC  3E08               	addlw	8
  7647  14CD  0086               	movwf	6
  7648  14CE  3001               	movlw	1	; select bank2/3
  7649  14CF  0087               	movwf	7
  7650  14D0  0020               	movlb	0	; select bank0
  7651  14D1  0837               	movf	?_compensate_humidity,w
  7652  14D2  3FC0               	movwi [0]fsr1
  7653  14D3  0838               	movf	?_compensate_humidity+1,w
  7654  14D4  3FC1               	movwi [1]fsr1
  7655  14D5  0839               	movf	?_compensate_humidity+2,w
  7656  14D6  3FC2               	movwi [2]fsr1
  7657  14D7  083A               	movf	?_compensate_humidity+3,w
  7658  14D8  3FC3               	movwi [3]fsr1
  7659  14D9  2CDC               	goto	l3544
  7660  14DA                     l126:	
  7661                           ;BME280_driver/bme280.c: 760:     else
  7662                           
  7663                           
  7664                           ;BME280_driver/bme280.c: 761:     {;BME280_driver/bme280.c: 762:         rslt = -1;
  7665  14DA  01E9               	clrf	bme280_compensate_data@rslt^(0+128)
  7666  14DB  03E9               	decf	bme280_compensate_data@rslt^(0+128),f
  7667  14DC                     l3544:	
  7668                           
  7669                           ;BME280_driver/bme280.c: 765:     return rslt;
  7670  14DC  0021               	movlb	1	; select bank1
  7671  14DD  0869               	movf	bme280_compensate_data@rslt^(0+128),w
  7672  14DE  0008               	return
  7673  14DF                     __end_of_bme280_compensate_data:	
  7674                           
  7675                           	psect	text22
  7676  031E                     __ptext22:	
  7677 ;; *************** function _compensate_temperature *****************
  7678 ;; Defined at:
  7679 ;;		line 1121 in file "BME280_driver/bme280.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  7682 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7683 ;;  calib_data      1   23[BANK0 ] PTR struct bme280_calib_
  7684 ;;		 -> main@env_sensor(51), 
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  uncomp_data     1   53[BANK0 ] PTR const struct bme280_
  7687 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7688 ;;  temperature     4   58[BANK0 ] long 
  7689 ;;  var2            4   54[BANK0 ] long 
  7690 ;;  var1            4   49[BANK0 ] long 
  7691 ;;  temperature_    4   45[BANK0 ] long 
  7692 ;;  temperature_    4    0        long 
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  4   23[BANK0 ] long 
  7695 ;; Registers used:
  7696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 1F/1
  7699 ;;		On exit  : 1F/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7702 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;Total ram usage:       39 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    4
  7709 ;; This function calls:
  7710 ;;		___aldiv
  7711 ;;		___lmul
  7712 ;; This function is called by:
  7713 ;;		_bme280_compensate_data
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           
  7718                           ;psect for function _compensate_temperature
  7719  031E                     _compensate_temperature:	
  7720                           
  7721                           ;incstack = 0
  7722                           ; Regs used in _compensate_temperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7723                           ;compensate_temperature@uncomp_data stored from wreg
  7724  031E  0020               	movlb	0	; select bank0
  7725  031F  00D5               	movwf	compensate_temperature@uncomp_data
  7726                           
  7727                           ;BME280_driver/bme280.c: 1128:     int32_t temperature_max = 8500;
  7728  0320  3000               	movlw	0
  7729  0321  00D0               	movwf	compensate_temperature@temperature_max+3
  7730  0322  3000               	movlw	0
  7731  0323  00CF               	movwf	compensate_temperature@temperature_max+2
  7732  0324  3021               	movlw	33
  7733  0325  00CE               	movwf	compensate_temperature@temperature_max+1
  7734  0326  3034               	movlw	52
  7735  0327  00CD               	movwf	compensate_temperature@temperature_max
  7736                           
  7737                           ;BME280_driver/bme280.c: 1130:     var1 = (int32_t)((uncomp_data->temperature / 8) - ((i
      +                          nt32_t)calib_data->dig_T1 * 2));
  7738  0328  0837               	movf	compensate_temperature@calib_data,w
  7739  0329  0086               	movwf	6
  7740  032A  3001               	movlw	1	; select bank2/3
  7741  032B  0087               	movwf	7
  7742  032C  3F40               	moviw [0]fsr1
  7743  032D  00BB               	movwf	??_compensate_temperature
  7744  032E  3F41               	moviw [1]fsr1
  7745  032F  00BC               	movwf	??_compensate_temperature+1
  7746  0330  083B               	movf	??_compensate_temperature,w
  7747  0331  00BD               	movwf	??_compensate_temperature+2
  7748  0332  083C               	movf	??_compensate_temperature+1,w
  7749  0333  00BE               	movwf	??_compensate_temperature+3
  7750  0334  01BF               	clrf	??_compensate_temperature+4
  7751  0335  01C0               	clrf	??_compensate_temperature+5
  7752  0336  3001               	movlw	1
  7753  0337                     u3245:	
  7754  0337  35BD               	lslf	??_compensate_temperature+2,f
  7755  0338  0DBE               	rlf	??_compensate_temperature+3,f
  7756  0339  0DBF               	rlf	??_compensate_temperature+4,f
  7757  033A  0DC0               	rlf	??_compensate_temperature+5,f
  7758  033B  0B89               	decfsz	9,f
  7759  033C  2B37               	goto	u3245
  7760  033D  0855               	movf	compensate_temperature@uncomp_data,w
  7761  033E  3E04               	addlw	4
  7762  033F  0086               	movwf	6
  7763  0340  3001               	movlw	1	; select bank2/3
  7764  0341  0087               	movwf	7
  7765  0342  3F40               	moviw [0]fsr1
  7766  0343  00C1               	movwf	??_compensate_temperature+6
  7767  0344  3F41               	moviw [1]fsr1
  7768  0345  00C2               	movwf	??_compensate_temperature+7
  7769  0346  3F42               	moviw [2]fsr1
  7770  0347  00C3               	movwf	??_compensate_temperature+8
  7771  0348  3F43               	moviw [3]fsr1
  7772  0349  00C4               	movwf	??_compensate_temperature+9
  7773  034A  3003               	movlw	3
  7774  034B                     u3255:	
  7775  034B  36C4               	lsrf	??_compensate_temperature+9,f
  7776  034C  0CC3               	rrf	??_compensate_temperature+8,f
  7777  034D  0CC2               	rrf	??_compensate_temperature+7,f
  7778  034E  0CC1               	rrf	??_compensate_temperature+6,f
  7779  034F  0B89               	decfsz	9,f
  7780  0350  2B4B               	goto	u3255
  7781  0351  083D               	movf	??_compensate_temperature+2,w
  7782  0352  02C1               	subwf	??_compensate_temperature+6,f
  7783  0353  083E               	movf	??_compensate_temperature+3,w
  7784  0354  3BC2               	subwfb	??_compensate_temperature+7,f
  7785  0355  083F               	movf	??_compensate_temperature+4,w
  7786  0356  3BC3               	subwfb	??_compensate_temperature+8,f
  7787  0357  0840               	movf	??_compensate_temperature+5,w
  7788  0358  3BC4               	subwfb	??_compensate_temperature+9,f
  7789  0359  0844               	movf	??_compensate_temperature+9,w
  7790  035A  00D4               	movwf	compensate_temperature@var1+3
  7791  035B  0843               	movf	??_compensate_temperature+8,w
  7792  035C  00D3               	movwf	compensate_temperature@var1+2
  7793  035D  0842               	movf	??_compensate_temperature+7,w
  7794  035E  00D2               	movwf	compensate_temperature@var1+1
  7795  035F  0841               	movf	??_compensate_temperature+6,w
  7796  0360  00D1               	movwf	compensate_temperature@var1
  7797                           
  7798                           ;BME280_driver/bme280.c: 1131:     var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
  7799  0361  3000               	movlw	0
  7800  0362  00AB               	movwf	___aldiv@divisor+3
  7801  0363  3000               	movlw	0
  7802  0364  00AA               	movwf	___aldiv@divisor+2
  7803  0365  3008               	movlw	8
  7804  0366  00A9               	movwf	___aldiv@divisor+1
  7805  0367  3000               	movlw	0
  7806  0368  00A8               	movwf	___aldiv@divisor
  7807  0369  0837               	movf	compensate_temperature@calib_data,w
  7808  036A  3E02               	addlw	2
  7809  036B  0086               	movwf	6
  7810  036C  3001               	movlw	1	; select bank2/3
  7811  036D  0087               	movwf	7
  7812  036E  3F40               	moviw [0]fsr1
  7813  036F  00BB               	movwf	??_compensate_temperature
  7814  0370  3F41               	moviw [1]fsr1
  7815  0371  00BC               	movwf	??_compensate_temperature+1
  7816  0372  083B               	movf	??_compensate_temperature,w
  7817  0373  00A0               	movwf	___lmul@multiplier
  7818  0374  083C               	movf	??_compensate_temperature+1,w
  7819  0375  00A1               	movwf	___lmul@multiplier+1
  7820  0376  0D89               	rlf	9,f
  7821  0377  3B89               	subwfb	9,f
  7822  0378  0989               	comf	9,f
  7823  0379  00A2               	movwf	___lmul@multiplier+2
  7824  037A  00A3               	movwf	___lmul@multiplier+3
  7825  037B  0854               	movf	compensate_temperature@var1+3,w
  7826  037C  00A7               	movwf	___lmul@multiplicand+3
  7827  037D  0853               	movf	compensate_temperature@var1+2,w
  7828  037E  00A6               	movwf	___lmul@multiplicand+2
  7829  037F  0852               	movf	compensate_temperature@var1+1,w
  7830  0380  00A5               	movwf	___lmul@multiplicand+1
  7831  0381  0851               	movf	compensate_temperature@var1,w
  7832  0382  00A4               	movwf	___lmul@multiplicand
  7833  0383  3190  206F  3183   	fcall	___lmul
  7834  0386  0823               	movf	?___lmul+3,w
  7835  0387  00AF               	movwf	___aldiv@dividend+3
  7836  0388  0822               	movf	?___lmul+2,w
  7837  0389  00AE               	movwf	___aldiv@dividend+2
  7838  038A  0821               	movf	?___lmul+1,w
  7839  038B  00AD               	movwf	___aldiv@dividend+1
  7840  038C  0820               	movf	?___lmul,w
  7841  038D  00AC               	movwf	___aldiv@dividend
  7842  038E  3193  23D9  3183   	fcall	___aldiv
  7843  0391  082B               	movf	?___aldiv+3,w
  7844  0392  00D4               	movwf	compensate_temperature@var1+3
  7845  0393  082A               	movf	?___aldiv+2,w
  7846  0394  00D3               	movwf	compensate_temperature@var1+2
  7847  0395  0829               	movf	?___aldiv+1,w
  7848  0396  00D2               	movwf	compensate_temperature@var1+1
  7849  0397  0828               	movf	?___aldiv,w
  7850  0398  00D1               	movwf	compensate_temperature@var1
  7851                           
  7852                           ;BME280_driver/bme280.c: 1132:     var2 = (int32_t)((uncomp_data->temperature / 16) - ((
      +                          int32_t)calib_data->dig_T1));
  7853  0399  0837               	movf	compensate_temperature@calib_data,w
  7854  039A  0086               	movwf	6
  7855  039B  3001               	movlw	1	; select bank2/3
  7856  039C  0087               	movwf	7
  7857  039D  3F40               	moviw [0]fsr1
  7858  039E  00BB               	movwf	??_compensate_temperature
  7859  039F  3F41               	moviw [1]fsr1
  7860  03A0  00BC               	movwf	??_compensate_temperature+1
  7861  03A1  083B               	movf	??_compensate_temperature,w
  7862  03A2  00BD               	movwf	??_compensate_temperature+2
  7863  03A3  083C               	movf	??_compensate_temperature+1,w
  7864  03A4  00BE               	movwf	??_compensate_temperature+3
  7865  03A5  01BF               	clrf	??_compensate_temperature+4
  7866  03A6  01C0               	clrf	??_compensate_temperature+5
  7867  03A7  0855               	movf	compensate_temperature@uncomp_data,w
  7868  03A8  3E04               	addlw	4
  7869  03A9  0086               	movwf	6
  7870  03AA  3001               	movlw	1	; select bank2/3
  7871  03AB  0087               	movwf	7
  7872  03AC  3F40               	moviw [0]fsr1
  7873  03AD  00C1               	movwf	??_compensate_temperature+6
  7874  03AE  3F41               	moviw [1]fsr1
  7875  03AF  00C2               	movwf	??_compensate_temperature+7
  7876  03B0  3F42               	moviw [2]fsr1
  7877  03B1  00C3               	movwf	??_compensate_temperature+8
  7878  03B2  3F43               	moviw [3]fsr1
  7879  03B3  00C4               	movwf	??_compensate_temperature+9
  7880  03B4  3004               	movlw	4
  7881  03B5                     u3265:	
  7882  03B5  36C4               	lsrf	??_compensate_temperature+9,f
  7883  03B6  0CC3               	rrf	??_compensate_temperature+8,f
  7884  03B7  0CC2               	rrf	??_compensate_temperature+7,f
  7885  03B8  0CC1               	rrf	??_compensate_temperature+6,f
  7886  03B9  0B89               	decfsz	9,f
  7887  03BA  2BB5               	goto	u3265
  7888  03BB  083D               	movf	??_compensate_temperature+2,w
  7889  03BC  02C1               	subwf	??_compensate_temperature+6,f
  7890  03BD  083E               	movf	??_compensate_temperature+3,w
  7891  03BE  3BC2               	subwfb	??_compensate_temperature+7,f
  7892  03BF  083F               	movf	??_compensate_temperature+4,w
  7893  03C0  3BC3               	subwfb	??_compensate_temperature+8,f
  7894  03C1  0840               	movf	??_compensate_temperature+5,w
  7895  03C2  3BC4               	subwfb	??_compensate_temperature+9,f
  7896  03C3  0844               	movf	??_compensate_temperature+9,w
  7897  03C4  00D9               	movwf	compensate_temperature@var2+3
  7898  03C5  0843               	movf	??_compensate_temperature+8,w
  7899  03C6  00D8               	movwf	compensate_temperature@var2+2
  7900  03C7  0842               	movf	??_compensate_temperature+7,w
  7901  03C8  00D7               	movwf	compensate_temperature@var2+1
  7902  03C9  0841               	movf	??_compensate_temperature+6,w
  7903  03CA  00D6               	movwf	compensate_temperature@var2
  7904                           
  7905                           ;BME280_driver/bme280.c: 1133:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  7906  03CB  3000               	movlw	0
  7907  03CC  00AB               	movwf	___aldiv@divisor+3
  7908  03CD  3000               	movlw	0
  7909  03CE  00AA               	movwf	___aldiv@divisor+2
  7910  03CF  3010               	movlw	16
  7911  03D0  00A9               	movwf	___aldiv@divisor+1
  7912  03D1  3000               	movlw	0
  7913  03D2  00A8               	movwf	___aldiv@divisor
  7914  03D3  0859               	movf	compensate_temperature@var2+3,w
  7915  03D4  00A3               	movwf	___lmul@multiplier+3
  7916  03D5  0858               	movf	compensate_temperature@var2+2,w
  7917  03D6  00A2               	movwf	___lmul@multiplier+2
  7918  03D7  0857               	movf	compensate_temperature@var2+1,w
  7919  03D8  00A1               	movwf	___lmul@multiplier+1
  7920  03D9  0856               	movf	compensate_temperature@var2,w
  7921  03DA  00A0               	movwf	___lmul@multiplier
  7922  03DB  0859               	movf	compensate_temperature@var2+3,w
  7923  03DC  00A7               	movwf	___lmul@multiplicand+3
  7924  03DD  0858               	movf	compensate_temperature@var2+2,w
  7925  03DE  00A6               	movwf	___lmul@multiplicand+2
  7926  03DF  0857               	movf	compensate_temperature@var2+1,w
  7927  03E0  00A5               	movwf	___lmul@multiplicand+1
  7928  03E1  0856               	movf	compensate_temperature@var2,w
  7929  03E2  00A4               	movwf	___lmul@multiplicand
  7930  03E3  3190  206F  3183   	fcall	___lmul
  7931  03E6  0823               	movf	?___lmul+3,w
  7932  03E7  00AF               	movwf	___aldiv@dividend+3
  7933  03E8  0822               	movf	?___lmul+2,w
  7934  03E9  00AE               	movwf	___aldiv@dividend+2
  7935  03EA  0821               	movf	?___lmul+1,w
  7936  03EB  00AD               	movwf	___aldiv@dividend+1
  7937  03EC  0820               	movf	?___lmul,w
  7938  03ED  00AC               	movwf	___aldiv@dividend
  7939  03EE  3193  23D9  3183   	fcall	___aldiv
  7940  03F1  082B               	movf	?___aldiv+3,w
  7941  03F2  00C8               	movwf	_compensate_temperature$2392+3
  7942  03F3  082A               	movf	?___aldiv+2,w
  7943  03F4  00C7               	movwf	_compensate_temperature$2392+2
  7944  03F5  0829               	movf	?___aldiv+1,w
  7945  03F6  00C6               	movwf	_compensate_temperature$2392+1
  7946  03F7  0828               	movf	?___aldiv,w
  7947  03F8  00C5               	movwf	_compensate_temperature$2392
  7948                           
  7949                           ;BME280_driver/bme280.c: 1133:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  7950  03F9  3000               	movlw	0
  7951  03FA  00AB               	movwf	___aldiv@divisor+3
  7952  03FB  3000               	movlw	0
  7953  03FC  00AA               	movwf	___aldiv@divisor+2
  7954  03FD  3040               	movlw	64
  7955  03FE  00A9               	movwf	___aldiv@divisor+1
  7956  03FF  3000               	movlw	0
  7957  0400  00A8               	movwf	___aldiv@divisor
  7958  0401  0848               	movf	_compensate_temperature$2392+3,w
  7959  0402  00A3               	movwf	___lmul@multiplier+3
  7960  0403  0847               	movf	_compensate_temperature$2392+2,w
  7961  0404  00A2               	movwf	___lmul@multiplier+2
  7962  0405  0846               	movf	_compensate_temperature$2392+1,w
  7963  0406  00A1               	movwf	___lmul@multiplier+1
  7964  0407  0845               	movf	_compensate_temperature$2392,w
  7965  0408  00A0               	movwf	___lmul@multiplier
  7966  0409  0837               	movf	compensate_temperature@calib_data,w
  7967  040A  3E04               	addlw	4
  7968  040B  0086               	movwf	6
  7969  040C  3001               	movlw	1	; select bank2/3
  7970  040D  0087               	movwf	7
  7971  040E  3F40               	moviw [0]fsr1
  7972  040F  00BB               	movwf	??_compensate_temperature
  7973  0410  3F41               	moviw [1]fsr1
  7974  0411  00BC               	movwf	??_compensate_temperature+1
  7975  0412  083B               	movf	??_compensate_temperature,w
  7976  0413  00A4               	movwf	___lmul@multiplicand
  7977  0414  083C               	movf	??_compensate_temperature+1,w
  7978  0415  00A5               	movwf	___lmul@multiplicand+1
  7979  0416  0D89               	rlf	9,f
  7980  0417  3B89               	subwfb	9,f
  7981  0418  0989               	comf	9,f
  7982  0419  00A6               	movwf	___lmul@multiplicand+2
  7983  041A  00A7               	movwf	___lmul@multiplicand+3
  7984  041B  3190  206F  3183   	fcall	___lmul
  7985  041E  0823               	movf	?___lmul+3,w
  7986  041F  00AF               	movwf	___aldiv@dividend+3
  7987  0420  0822               	movf	?___lmul+2,w
  7988  0421  00AE               	movwf	___aldiv@dividend+2
  7989  0422  0821               	movf	?___lmul+1,w
  7990  0423  00AD               	movwf	___aldiv@dividend+1
  7991  0424  0820               	movf	?___lmul,w
  7992  0425  00AC               	movwf	___aldiv@dividend
  7993  0426  3193  23D9  3183   	fcall	___aldiv
  7994  0429  082B               	movf	?___aldiv+3,w
  7995  042A  00D9               	movwf	compensate_temperature@var2+3
  7996  042B  082A               	movf	?___aldiv+2,w
  7997  042C  00D8               	movwf	compensate_temperature@var2+2
  7998  042D  0829               	movf	?___aldiv+1,w
  7999  042E  00D7               	movwf	compensate_temperature@var2+1
  8000  042F  0828               	movf	?___aldiv,w
  8001  0430  00D6               	movwf	compensate_temperature@var2
  8002                           
  8003                           ;BME280_driver/bme280.c: 1134:     calib_data->t_fine = var1 + var2;
  8004  0431  0851               	movf	compensate_temperature@var1,w
  8005  0432  0756               	addwf	compensate_temperature@var2,w
  8006  0433  00BB               	movwf	??_compensate_temperature
  8007  0434  0852               	movf	compensate_temperature@var1+1,w
  8008  0435  3D57               	addwfc	compensate_temperature@var2+1,w
  8009  0436  00BC               	movwf	??_compensate_temperature+1
  8010  0437  0853               	movf	compensate_temperature@var1+2,w
  8011  0438  3D58               	addwfc	compensate_temperature@var2+2,w
  8012  0439  00BD               	movwf	??_compensate_temperature+2
  8013  043A  0854               	movf	compensate_temperature@var1+3,w
  8014  043B  3D59               	addwfc	compensate_temperature@var2+3,w
  8015  043C  00BE               	movwf	??_compensate_temperature+3
  8016  043D  0837               	movf	compensate_temperature@calib_data,w
  8017  043E  3E21               	addlw	33
  8018  043F  0086               	movwf	6
  8019  0440  3001               	movlw	1	; select bank2/3
  8020  0441  0087               	movwf	7
  8021  0442  083B               	movf	??_compensate_temperature,w
  8022  0443  3FC0               	movwi [0]fsr1
  8023  0444  083C               	movf	??_compensate_temperature+1,w
  8024  0445  3FC1               	movwi [1]fsr1
  8025  0446  083D               	movf	??_compensate_temperature+2,w
  8026  0447  3FC2               	movwi [2]fsr1
  8027  0448  083E               	movf	??_compensate_temperature+3,w
  8028  0449  3FC3               	movwi [3]fsr1
  8029                           
  8030                           ;BME280_driver/bme280.c: 1135:     temperature = (calib_data->t_fine * 5 + 128) / 256;
  8031  044A  3000               	movlw	0
  8032  044B  00AB               	movwf	___aldiv@divisor+3
  8033  044C  3000               	movlw	0
  8034  044D  00AA               	movwf	___aldiv@divisor+2
  8035  044E  3001               	movlw	1
  8036  044F  00A9               	movwf	___aldiv@divisor+1
  8037  0450  3000               	movlw	0
  8038  0451  00A8               	movwf	___aldiv@divisor
  8039  0452  3080               	movlw	128
  8040  0453  00BB               	movwf	??_compensate_temperature
  8041  0454  3000               	movlw	0
  8042  0455  00BC               	movwf	??_compensate_temperature+1
  8043  0456  3000               	movlw	0
  8044  0457  00BD               	movwf	??_compensate_temperature+2
  8045  0458  3000               	movlw	0
  8046  0459  00BE               	movwf	??_compensate_temperature+3
  8047  045A  0837               	movf	compensate_temperature@calib_data,w
  8048  045B  3E21               	addlw	33
  8049  045C  0086               	movwf	6
  8050  045D  3001               	movlw	1	; select bank2/3
  8051  045E  0087               	movwf	7
  8052  045F  3F40               	moviw [0]fsr1
  8053  0460  00A0               	movwf	___lmul@multiplier
  8054  0461  3F41               	moviw [1]fsr1
  8055  0462  00A1               	movwf	___lmul@multiplier+1
  8056  0463  3F42               	moviw [2]fsr1
  8057  0464  00A2               	movwf	___lmul@multiplier+2
  8058  0465  3F43               	moviw [3]fsr1
  8059  0466  00A3               	movwf	___lmul@multiplier+3
  8060  0467  3000               	movlw	0
  8061  0468  00A7               	movwf	___lmul@multiplicand+3
  8062  0469  3000               	movlw	0
  8063  046A  00A6               	movwf	___lmul@multiplicand+2
  8064  046B  3000               	movlw	0
  8065  046C  00A5               	movwf	___lmul@multiplicand+1
  8066  046D  3005               	movlw	5
  8067  046E  00A4               	movwf	___lmul@multiplicand
  8068  046F  3190  206F  3183   	fcall	___lmul
  8069  0472  0820               	movf	?___lmul,w
  8070  0473  07BB               	addwf	??_compensate_temperature,f
  8071  0474  0821               	movf	?___lmul+1,w
  8072  0475  3DBC               	addwfc	??_compensate_temperature+1,f
  8073  0476  0822               	movf	?___lmul+2,w
  8074  0477  3DBD               	addwfc	??_compensate_temperature+2,f
  8075  0478  0823               	movf	?___lmul+3,w
  8076  0479  3DBE               	addwfc	??_compensate_temperature+3,f
  8077  047A  083E               	movf	??_compensate_temperature+3,w
  8078  047B  00AF               	movwf	___aldiv@dividend+3
  8079  047C  083D               	movf	??_compensate_temperature+2,w
  8080  047D  00AE               	movwf	___aldiv@dividend+2
  8081  047E  083C               	movf	??_compensate_temperature+1,w
  8082  047F  00AD               	movwf	___aldiv@dividend+1
  8083  0480  083B               	movf	??_compensate_temperature,w
  8084  0481  00AC               	movwf	___aldiv@dividend
  8085  0482  3193  23D9  3183   	fcall	___aldiv
  8086  0485  082B               	movf	?___aldiv+3,w
  8087  0486  00DD               	movwf	compensate_temperature@temperature+3
  8088  0487  082A               	movf	?___aldiv+2,w
  8089  0488  00DC               	movwf	compensate_temperature@temperature+2
  8090  0489  0829               	movf	?___aldiv+1,w
  8091  048A  00DB               	movwf	compensate_temperature@temperature+1
  8092  048B  0828               	movf	?___aldiv,w
  8093  048C  00DA               	movwf	compensate_temperature@temperature
  8094                           
  8095                           ;BME280_driver/bme280.c: 1136:     if (temperature < temperature_min)
  8096  048D  1FDD               	btfss	compensate_temperature@temperature+3,7
  8097  048E  2CA1               	goto	l3378
  8098  048F  3060               	movlw	96
  8099  0490  025A               	subwf	compensate_temperature@temperature,w
  8100  0491  30F0               	movlw	240
  8101  0492  3B5B               	subwfb	compensate_temperature@temperature+1,w
  8102  0493  30FF               	movlw	255
  8103  0494  3B5C               	subwfb	compensate_temperature@temperature+2,w
  8104  0495  30FF               	movlw	255
  8105  0496  3B5D               	subwfb	compensate_temperature@temperature+3,w
  8106  0497  1803               	btfsc	3,0
  8107  0498  2CA1               	goto	l3378
  8108                           
  8109                           ;BME280_driver/bme280.c: 1137:     {;BME280_driver/bme280.c: 1138:         temperature =
      +                           temperature_min;
  8110  0499  30FF               	movlw	255
  8111  049A  00DD               	movwf	compensate_temperature@temperature+3
  8112  049B  30FF               	movlw	255
  8113  049C  00DC               	movwf	compensate_temperature@temperature+2
  8114  049D  30F0               	movlw	240
  8115  049E  00DB               	movwf	compensate_temperature@temperature+1
  8116  049F  3060               	movlw	96
  8117  04A0  2CB6               	goto	L3
  8118  04A1                     l3378:	
  8119                           ;BME280_driver/bme280.c: 1139:     }
  8120                           
  8121  04A1  1BDD               	btfsc	compensate_temperature@temperature+3,7
  8122  04A2  2CB7               	goto	l185
  8123  04A3  085D               	movf	compensate_temperature@temperature+3,w
  8124  04A4  1D03               	btfss	3,2
  8125  04A5  2CAF               	goto	l3380
  8126  04A6  085C               	movf	compensate_temperature@temperature+2,w
  8127  04A7  1D03               	btfss	3,2
  8128  04A8  2CAF               	goto	l3380
  8129  04A9  3035               	movlw	53
  8130  04AA  025A               	subwf	compensate_temperature@temperature,w
  8131  04AB  3021               	movlw	33
  8132  04AC  3B5B               	subwfb	compensate_temperature@temperature+1,w
  8133  04AD  1C03               	btfss	3,0
  8134  04AE  2CB7               	goto	l185
  8135  04AF                     l3380:	
  8136                           
  8137                           ;BME280_driver/bme280.c: 1141:     {;BME280_driver/bme280.c: 1142:         temperature =
      +                           temperature_max;
  8138  04AF  3000               	movlw	0
  8139  04B0  00DD               	movwf	compensate_temperature@temperature+3
  8140  04B1  3000               	movlw	0
  8141  04B2  00DC               	movwf	compensate_temperature@temperature+2
  8142  04B3  3021               	movlw	33
  8143  04B4  00DB               	movwf	compensate_temperature@temperature+1
  8144  04B5  3034               	movlw	52
  8145  04B6                     L3:	
  8146  04B6  00DA               	movwf	compensate_temperature@temperature
  8147  04B7                     l185:	
  8148                           
  8149                           ;BME280_driver/bme280.c: 1145:     return temperature;
  8150  04B7  085D               	movf	compensate_temperature@temperature+3,w
  8151  04B8  00BA               	movwf	?_compensate_temperature+3
  8152  04B9  085C               	movf	compensate_temperature@temperature+2,w
  8153  04BA  00B9               	movwf	?_compensate_temperature+2
  8154  04BB  085B               	movf	compensate_temperature@temperature+1,w
  8155  04BC  00B8               	movwf	?_compensate_temperature+1
  8156  04BD  085A               	movf	compensate_temperature@temperature,w
  8157  04BE  00B7               	movwf	?_compensate_temperature
  8158  04BF  0008               	return
  8159  04C0                     __end_of_compensate_temperature:	
  8160                           
  8161                           	psect	text23
  8162  0737                     __ptext23:	
  8163 ;; *************** function _compensate_pressure *****************
  8164 ;; Defined at:
  8165 ;;		line 1154 in file "BME280_driver/bme280.c"
  8166 ;; Parameters:    Size  Location     Type
  8167 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  8168 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8169 ;;  calib_data      1   50[BANK0 ] PTR const struct bme280_
  8170 ;;		 -> main@env_sensor(51), 
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;  uncomp_data     1   24[BANK1 ] PTR const struct bme280_
  8173 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8174 ;;  var1            8   61[BANK1 ] long long 
  8175 ;;  var4            8   53[BANK1 ] long long 
  8176 ;;  var2            8   45[BANK1 ] long long 
  8177 ;;  var3            8    0        long long 
  8178 ;;  pressure        4   41[BANK1 ] unsigned long 
  8179 ;;  pressure_min    4    0        unsigned long 
  8180 ;;  pressure_max    4   25[BANK1 ] unsigned long 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;                  4   50[BANK0 ] unsigned long 
  8183 ;; Registers used:
  8184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8185 ;; Tracked objects:
  8186 ;;		On entry : 1F/1
  8187 ;;		On exit  : 1F/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8190 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Temps:          0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Totals:         0      30      69       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;Total ram usage:       99 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    4
  8197 ;; This function calls:
  8198 ;;		___aodiv
  8199 ;;		___omul
  8200 ;; This function is called by:
  8201 ;;		_bme280_compensate_data
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           
  8206                           ;psect for function _compensate_pressure
  8207  0737                     _compensate_pressure:	
  8208                           
  8209                           ;incstack = 0
  8210                           ; Regs used in _compensate_pressure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8211                           ;compensate_pressure@uncomp_data stored from wreg
  8212  0737  00B8               	movwf	compensate_pressure@uncomp_data^(0+128)
  8213                           
  8214                           ;BME280_driver/bme280.c: 1163:     uint32_t pressure_max = 11000000;
  8215  0738  3000               	movlw	0
  8216  0739  00BC               	movwf	(compensate_pressure@pressure_max+3)^(0+128)
  8217  073A  30A7               	movlw	167
  8218  073B  00BB               	movwf	(compensate_pressure@pressure_max+2)^(0+128)
  8219  073C  30D8               	movlw	216
  8220  073D  00BA               	movwf	(compensate_pressure@pressure_max+1)^(0+128)
  8221  073E  30C0               	movlw	192
  8222  073F  00B9               	movwf	compensate_pressure@pressure_max^(0+128)
  8223                           
  8224                           ;BME280_driver/bme280.c: 1165:     var1 = ((int64_t)calib_data->t_fine) - 128000;
  8225  0740  3000               	movlw	0
  8226  0741  0020               	movlb	0	; select bank0
  8227  0742  00D6               	movwf	??_compensate_pressure
  8228  0743  300C               	movlw	12
  8229  0744  00D7               	movwf	??_compensate_pressure+1
  8230  0745  30FE               	movlw	254
  8231  0746  00D8               	movwf	??_compensate_pressure+2
  8232  0747  30FF               	movlw	255
  8233  0748  00D9               	movwf	??_compensate_pressure+3
  8234  0749  30FF               	movlw	255
  8235  074A  00DA               	movwf	??_compensate_pressure+4
  8236  074B  30FF               	movlw	255
  8237  074C  00DB               	movwf	??_compensate_pressure+5
  8238  074D  30FF               	movlw	255
  8239  074E  00DC               	movwf	??_compensate_pressure+6
  8240  074F  30FF               	movlw	255
  8241  0750  00DD               	movwf	??_compensate_pressure+7
  8242  0751  0852               	movf	compensate_pressure@calib_data,w
  8243  0752  3E21               	addlw	33
  8244  0753  0086               	movwf	6
  8245  0754  3001               	movlw	1	; select bank2/3
  8246  0755  0087               	movwf	7
  8247  0756  3F40               	moviw [0]fsr1
  8248  0757  00DE               	movwf	??_compensate_pressure+8
  8249  0758  3F41               	moviw [1]fsr1
  8250  0759  00DF               	movwf	??_compensate_pressure+9
  8251  075A  3F42               	moviw [2]fsr1
  8252  075B  00E0               	movwf	??_compensate_pressure+10
  8253  075C  3F43               	moviw [3]fsr1
  8254  075D  00E1               	movwf	??_compensate_pressure+11
  8255  075E  085E               	movf	??_compensate_pressure+8,w
  8256  075F  00E2               	movwf	??_compensate_pressure+12
  8257  0760  085F               	movf	??_compensate_pressure+9,w
  8258  0761  00E3               	movwf	??_compensate_pressure+13
  8259  0762  0860               	movf	??_compensate_pressure+10,w
  8260  0763  00E4               	movwf	??_compensate_pressure+14
  8261  0764  0861               	movf	??_compensate_pressure+11,w
  8262  0765  00E5               	movwf	??_compensate_pressure+15
  8263  0766  3000               	movlw	0
  8264  0767  1BE5               	btfsc	??_compensate_pressure+15,7
  8265  0768  30FF               	movlw	255
  8266  0769  00E6               	movwf	??_compensate_pressure+16
  8267  076A  00E7               	movwf	??_compensate_pressure+17
  8268  076B  00E8               	movwf	??_compensate_pressure+18
  8269  076C  00E9               	movwf	??_compensate_pressure+19
  8270  076D  0862               	movf	??_compensate_pressure+12,w
  8271  076E  07D6               	addwf	??_compensate_pressure,f
  8272  076F  0863               	movf	??_compensate_pressure+13,w
  8273  0770  3DD7               	addwfc	??_compensate_pressure+1,f
  8274  0771  0864               	movf	??_compensate_pressure+14,w
  8275  0772  3DD8               	addwfc	??_compensate_pressure+2,f
  8276  0773  0865               	movf	??_compensate_pressure+15,w
  8277  0774  3DD9               	addwfc	??_compensate_pressure+3,f
  8278  0775  0866               	movf	??_compensate_pressure+16,w
  8279  0776  3DDA               	addwfc	??_compensate_pressure+4,f
  8280  0777  0867               	movf	??_compensate_pressure+17,w
  8281  0778  3DDB               	addwfc	??_compensate_pressure+5,f
  8282  0779  0868               	movf	??_compensate_pressure+18,w
  8283  077A  3DDC               	addwfc	??_compensate_pressure+6,f
  8284  077B  0869               	movf	??_compensate_pressure+19,w
  8285  077C  3DDD               	addwfc	??_compensate_pressure+7,f
  8286  077D  085D               	movf	??_compensate_pressure+7,w
  8287  077E  0021               	movlb	1	; select bank1
  8288  077F  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
  8289  0780  0020               	movlb	0	; select bank0
  8290  0781  085C               	movf	??_compensate_pressure+6,w
  8291  0782  0021               	movlb	1	; select bank1
  8292  0783  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
  8293  0784  0020               	movlb	0	; select bank0
  8294  0785  085B               	movf	??_compensate_pressure+5,w
  8295  0786  0021               	movlb	1	; select bank1
  8296  0787  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
  8297  0788  0020               	movlb	0	; select bank0
  8298  0789  085A               	movf	??_compensate_pressure+4,w
  8299  078A  0021               	movlb	1	; select bank1
  8300  078B  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
  8301  078C  0020               	movlb	0	; select bank0
  8302  078D  0859               	movf	??_compensate_pressure+3,w
  8303  078E  0021               	movlb	1	; select bank1
  8304  078F  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
  8305  0790  0020               	movlb	0	; select bank0
  8306  0791  0858               	movf	??_compensate_pressure+2,w
  8307  0792  0021               	movlb	1	; select bank1
  8308  0793  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
  8309  0794  0020               	movlb	0	; select bank0
  8310  0795  0857               	movf	??_compensate_pressure+1,w
  8311  0796  0021               	movlb	1	; select bank1
  8312  0797  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
  8313  0798  0020               	movlb	0	; select bank0
  8314  0799  0856               	movf	??_compensate_pressure,w
  8315  079A  0021               	movlb	1	; select bank1
  8316  079B  00DD               	movwf	compensate_pressure@var1^(0+128)
  8317                           
  8318                           ;BME280_driver/bme280.c: 1166:     var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
  8319  079C  0020               	movlb	0	; select bank0
  8320  079D  0852               	movf	compensate_pressure@calib_data,w
  8321  079E  3E10               	addlw	16
  8322  079F  0086               	movwf	6
  8323  07A0  3001               	movlw	1	; select bank2/3
  8324  07A1  0087               	movwf	7
  8325  07A2  3F40               	moviw [0]fsr1
  8326  07A3  00D6               	movwf	??_compensate_pressure
  8327  07A4  3F41               	moviw [1]fsr1
  8328  07A5  00D7               	movwf	??_compensate_pressure+1
  8329  07A6  0856               	movf	??_compensate_pressure,w
  8330  07A7  00A0               	movwf	___omul@multiplier
  8331  07A8  0857               	movf	??_compensate_pressure+1,w
  8332  07A9  00A1               	movwf	___omul@multiplier+1
  8333  07AA  0D89               	rlf	9,f
  8334  07AB  3B89               	subwfb	9,f
  8335  07AC  0989               	comf	9,f
  8336  07AD  00A2               	movwf	___omul@multiplier+2
  8337  07AE  00A3               	movwf	___omul@multiplier+3
  8338  07AF  00A4               	movwf	___omul@multiplier+4
  8339  07B0  00A5               	movwf	___omul@multiplier+5
  8340  07B1  00A6               	movwf	___omul@multiplier+6
  8341  07B2  00A7               	movwf	___omul@multiplier+7
  8342  07B3  0021               	movlb	1	; select bank1
  8343  07B4  085D               	movf	compensate_pressure@var1^(0+128),w
  8344  07B5  0020               	movlb	0	; select bank0
  8345  07B6  00A8               	movwf	___omul@multiplicand
  8346  07B7  0021               	movlb	1	; select bank1
  8347  07B8  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
  8348  07B9  0020               	movlb	0	; select bank0
  8349  07BA  00A9               	movwf	___omul@multiplicand+1
  8350  07BB  0021               	movlb	1	; select bank1
  8351  07BC  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
  8352  07BD  0020               	movlb	0	; select bank0
  8353  07BE  00AA               	movwf	___omul@multiplicand+2
  8354  07BF  0021               	movlb	1	; select bank1
  8355  07C0  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
  8356  07C1  0020               	movlb	0	; select bank0
  8357  07C2  00AB               	movwf	___omul@multiplicand+3
  8358  07C3  0021               	movlb	1	; select bank1
  8359  07C4  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
  8360  07C5  0020               	movlb	0	; select bank0
  8361  07C6  00AC               	movwf	___omul@multiplicand+4
  8362  07C7  0021               	movlb	1	; select bank1
  8363  07C8  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
  8364  07C9  0020               	movlb	0	; select bank0
  8365  07CA  00AD               	movwf	___omul@multiplicand+5
  8366  07CB  0021               	movlb	1	; select bank1
  8367  07CC  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
  8368  07CD  0020               	movlb	0	; select bank0
  8369  07CE  00AE               	movwf	___omul@multiplicand+6
  8370  07CF  0021               	movlb	1	; select bank1
  8371  07D0  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
  8372  07D1  0020               	movlb	0	; select bank0
  8373  07D2  00AF               	movwf	___omul@multiplicand+7
  8374  07D3  3191  2189         	fcall	___omul
  8375  07D5  0820               	movf	?___omul,w
  8376  07D6  3188  2833         	ljmp	L5
  8377                           
  8378                           	psect	text24
  8379  1189                     __ptext24:	
  8380 ;; *************** function ___omul *****************
  8381 ;; Defined at:
  8382 ;;		line 91 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\Umul64.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  8385 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;  product         8   16[BANK0 ] unsigned long long 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  8    0[BANK0 ] unsigned long long 
  8390 ;; Registers used:
  8391 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8392 ;; Tracked objects:
  8393 ;;		On entry : 1F/0
  8394 ;;		On exit  : 1F/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8397 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Totals:         1      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;Total ram usage:       25 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    3
  8404 ;; This function calls:
  8405 ;;		Nothing
  8406 ;; This function is called by:
  8407 ;;		_compensate_pressure
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           
  8412                           ;psect for function ___omul
  8413  1189                     ___omul:	
  8414                           
  8415                           ;incstack = 0
  8416                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  8417  1189  3030               	movlw	low ___omul@product
  8418  118A  0086               	movwf	6
  8419  118B  3000               	movlw	high ___omul@product
  8420  118C  0087               	movwf	7
  8421  118D  3008               	movlw	8
  8422  118E  00F5               	movwf	??___omul
  8423  118F  3000               	movlw	0
  8424  1190                     u2880:	
  8425  1190  001E               	movwi fsr1++
  8426  1191  0BF5               	decfsz	??___omul,f
  8427  1192  2990               	goto	u2880
  8428  1193                     l3210:	
  8429  1193  1C20               	btfss	___omul@multiplier,0
  8430  1194  29A5               	goto	l3214
  8431  1195  0828               	movf	___omul@multiplicand,w
  8432  1196  07B0               	addwf	___omul@product,f
  8433  1197  0829               	movf	___omul@multiplicand+1,w
  8434  1198  3DB1               	addwfc	___omul@product+1,f
  8435  1199  082A               	movf	___omul@multiplicand+2,w
  8436  119A  3DB2               	addwfc	___omul@product+2,f
  8437  119B  082B               	movf	___omul@multiplicand+3,w
  8438  119C  3DB3               	addwfc	___omul@product+3,f
  8439  119D  082C               	movf	___omul@multiplicand+4,w
  8440  119E  3DB4               	addwfc	___omul@product+4,f
  8441  119F  082D               	movf	___omul@multiplicand+5,w
  8442  11A0  3DB5               	addwfc	___omul@product+5,f
  8443  11A1  082E               	movf	___omul@multiplicand+6,w
  8444  11A2  3DB6               	addwfc	___omul@product+6,f
  8445  11A3  082F               	movf	___omul@multiplicand+7,w
  8446  11A4  3DB7               	addwfc	___omul@product+7,f
  8447  11A5                     l3214:	
  8448  11A5  35A8               	lslf	___omul@multiplicand,f
  8449  11A6  0DA9               	rlf	___omul@multiplicand+1,f
  8450  11A7  0DAA               	rlf	___omul@multiplicand+2,f
  8451  11A8  0DAB               	rlf	___omul@multiplicand+3,f
  8452  11A9  0DAC               	rlf	___omul@multiplicand+4,f
  8453  11AA  0DAD               	rlf	___omul@multiplicand+5,f
  8454  11AB  0DAE               	rlf	___omul@multiplicand+6,f
  8455  11AC  0DAF               	rlf	___omul@multiplicand+7,f
  8456  11AD  36A7               	lsrf	___omul@multiplier+7,f
  8457  11AE  0CA6               	rrf	___omul@multiplier+6,f
  8458  11AF  0CA5               	rrf	___omul@multiplier+5,f
  8459  11B0  0CA4               	rrf	___omul@multiplier+4,f
  8460  11B1  0CA3               	rrf	___omul@multiplier+3,f
  8461  11B2  0CA2               	rrf	___omul@multiplier+2,f
  8462  11B3  0CA1               	rrf	___omul@multiplier+1,f
  8463  11B4  0CA0               	rrf	___omul@multiplier,f
  8464  11B5  0820               	movf	___omul@multiplier,w
  8465  11B6  0421               	iorwf	___omul@multiplier+1,w
  8466  11B7  0422               	iorwf	___omul@multiplier+2,w
  8467  11B8  0423               	iorwf	___omul@multiplier+3,w
  8468  11B9  0424               	iorwf	___omul@multiplier+4,w
  8469  11BA  0425               	iorwf	___omul@multiplier+5,w
  8470  11BB  0426               	iorwf	___omul@multiplier+6,w
  8471  11BC  0427               	iorwf	___omul@multiplier+7,w
  8472  11BD  1D03               	skipz
  8473  11BE  2993               	goto	l3210
  8474  11BF  0830               	movf	___omul@product,w
  8475  11C0  00A0               	movwf	?___omul
  8476  11C1  0831               	movf	___omul@product+1,w
  8477  11C2  00A1               	movwf	?___omul+1
  8478  11C3  0832               	movf	___omul@product+2,w
  8479  11C4  00A2               	movwf	?___omul+2
  8480  11C5  0833               	movf	___omul@product+3,w
  8481  11C6  00A3               	movwf	?___omul+3
  8482  11C7  0834               	movf	___omul@product+4,w
  8483  11C8  00A4               	movwf	?___omul+4
  8484  11C9  0835               	movf	___omul@product+5,w
  8485  11CA  00A5               	movwf	?___omul+5
  8486  11CB  0836               	movf	___omul@product+6,w
  8487  11CC  00A6               	movwf	?___omul+6
  8488  11CD  0837               	movf	___omul@product+7,w
  8489  11CE  00A7               	movwf	?___omul+7
  8490  11CF  0008               	return
  8491  11D0                     __end_of___omul:	
  8492                           
  8493                           	psect	text25
  8494  1616                     __ptext25:	
  8495 ;; *************** function ___aodiv *****************
  8496 ;; Defined at:
  8497 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aodiv.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  divisor         8   24[BANK0 ] long long 
  8500 ;;  dividend        8   32[BANK0 ] long long 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  quotient        8   42[BANK0 ] long long 
  8503 ;;  sign            1   41[BANK0 ] unsigned char 
  8504 ;;  counter         1   40[BANK0 ] unsigned char 
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  8   24[BANK0 ] long long 
  8507 ;; Registers used:
  8508 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8509 ;; Tracked objects:
  8510 ;;		On entry : 1F/0
  8511 ;;		On exit  : 1F/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8514 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;      Totals:         1      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;Total ram usage:       27 bytes
  8519 ;; Hardware stack levels used:    1
  8520 ;; Hardware stack levels required when called:    3
  8521 ;; This function calls:
  8522 ;;		Nothing
  8523 ;; This function is called by:
  8524 ;;		_compensate_pressure
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           
  8529                           ;psect for function ___aodiv
  8530  1616                     ___aodiv:	
  8531                           
  8532                           ;incstack = 0
  8533                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
  8534  1616  01C9               	clrf	___aodiv@sign
  8535  1617  3038               	movlw	low ___aodiv@divisor
  8536  1618  0086               	movwf	6
  8537  1619  3000               	movlw	high ___aodiv@divisor
  8538  161A  0087               	movwf	7
  8539  161B  3F47               	moviw [7]fsr1
  8540  161C  00F6               	movwf	??___aodiv
  8541  161D  1FF6               	btfss	??___aodiv,7
  8542  161E  2E41               	goto	l3264
  8543  161F  0020               	movlb	0	; select bank0
  8544  1620  09B8               	comf	___aodiv@divisor,f
  8545  1621  09B9               	comf	___aodiv@divisor+1,f
  8546  1622  09BA               	comf	___aodiv@divisor+2,f
  8547  1623  09BB               	comf	___aodiv@divisor+3,f
  8548  1624  09BC               	comf	___aodiv@divisor+4,f
  8549  1625  09BD               	comf	___aodiv@divisor+5,f
  8550  1626  09BE               	comf	___aodiv@divisor+6,f
  8551  1627  09BF               	comf	___aodiv@divisor+7,f
  8552  1628  0AB8               	incf	___aodiv@divisor,f
  8553  1629  1D03               	skipz
  8554  162A  2E3E               	goto	u302lld
  8555  162B  0AB9               	incf	___aodiv@divisor+1,f
  8556  162C  1D03               	skipz
  8557  162D  2E3E               	goto	u302lld
  8558  162E  0ABA               	incf	___aodiv@divisor+2,f
  8559  162F  1D03               	skipz
  8560  1630  2E3E               	goto	u302lld
  8561  1631  0ABB               	incf	___aodiv@divisor+3,f
  8562  1632  1D03               	skipz
  8563  1633  2E3E               	goto	u302lld
  8564  1634  0ABC               	incf	___aodiv@divisor+4,f
  8565  1635  1D03               	skipz
  8566  1636  2E3E               	goto	u302lld
  8567  1637  0ABD               	incf	___aodiv@divisor+5,f
  8568  1638  1D03               	skipz
  8569  1639  2E3E               	goto	u302lld
  8570  163A  0ABE               	incf	___aodiv@divisor+6,f
  8571  163B  1D03               	skipz
  8572  163C  2E3E               	goto	u302lld
  8573  163D  0ABF               	incf	___aodiv@divisor+7,f
  8574  163E                     u302lld:	
  8575  163E  0020               	movlb	0	; select bank0
  8576  163F  01C9               	clrf	___aodiv@sign
  8577  1640  0AC9               	incf	___aodiv@sign,f
  8578  1641                     l3264:	
  8579  1641  3040               	movlw	low ___aodiv@dividend
  8580  1642  0086               	movwf	6
  8581  1643  3000               	movlw	high ___aodiv@dividend
  8582  1644  0087               	movwf	7
  8583  1645  3F47               	moviw [7]fsr1
  8584  1646  00F6               	movwf	??___aodiv
  8585  1647  1FF6               	btfss	??___aodiv,7
  8586  1648  2E6D               	goto	l3270
  8587  1649  0020               	movlb	0	; select bank0
  8588  164A  09C0               	comf	___aodiv@dividend,f
  8589  164B  09C1               	comf	___aodiv@dividend+1,f
  8590  164C  09C2               	comf	___aodiv@dividend+2,f
  8591  164D  09C3               	comf	___aodiv@dividend+3,f
  8592  164E  09C4               	comf	___aodiv@dividend+4,f
  8593  164F  09C5               	comf	___aodiv@dividend+5,f
  8594  1650  09C6               	comf	___aodiv@dividend+6,f
  8595  1651  09C7               	comf	___aodiv@dividend+7,f
  8596  1652  0AC0               	incf	___aodiv@dividend,f
  8597  1653  1D03               	skipz
  8598  1654  2E68               	goto	l3268
  8599  1655  0AC1               	incf	___aodiv@dividend+1,f
  8600  1656  1D03               	skipz
  8601  1657  2E68               	goto	l3268
  8602  1658  0AC2               	incf	___aodiv@dividend+2,f
  8603  1659  1D03               	skipz
  8604  165A  2E68               	goto	l3268
  8605  165B  0AC3               	incf	___aodiv@dividend+3,f
  8606  165C  1D03               	skipz
  8607  165D  2E68               	goto	l3268
  8608  165E  0AC4               	incf	___aodiv@dividend+4,f
  8609  165F  1D03               	skipz
  8610  1660  2E68               	goto	l3268
  8611  1661  0AC5               	incf	___aodiv@dividend+5,f
  8612  1662  1D03               	skipz
  8613  1663  2E68               	goto	l3268
  8614  1664  0AC6               	incf	___aodiv@dividend+6,f
  8615  1665  1D03               	skipz
  8616  1666  2E68               	goto	l3268
  8617  1667  0AC7               	incf	___aodiv@dividend+7,f
  8618  1668                     l3268:	
  8619  1668  3001               	movlw	1
  8620  1669  00F6               	movwf	??___aodiv
  8621  166A  0876               	movf	??___aodiv,w
  8622  166B  0020               	movlb	0	; select bank0
  8623  166C  06C9               	xorwf	___aodiv@sign,f
  8624  166D                     l3270:	
  8625  166D  304A               	movlw	low ___aodiv@quotient
  8626  166E  0086               	movwf	6
  8627  166F  3000               	movlw	high ___aodiv@quotient
  8628  1670  0087               	movwf	7
  8629  1671  3008               	movlw	8
  8630  1672  00F6               	movwf	??___aodiv
  8631  1673  3000               	movlw	0
  8632  1674                     u3050:	
  8633  1674  001E               	movwi fsr1++
  8634  1675  0BF6               	decfsz	??___aodiv,f
  8635  1676  2E74               	goto	u3050
  8636  1677  0020               	movlb	0	; select bank0
  8637  1678  0838               	movf	___aodiv@divisor,w
  8638  1679  0439               	iorwf	___aodiv@divisor+1,w
  8639  167A  043A               	iorwf	___aodiv@divisor+2,w
  8640  167B  043B               	iorwf	___aodiv@divisor+3,w
  8641  167C  043C               	iorwf	___aodiv@divisor+4,w
  8642  167D  043D               	iorwf	___aodiv@divisor+5,w
  8643  167E  043E               	iorwf	___aodiv@divisor+6,w
  8644  167F  043F               	iorwf	___aodiv@divisor+7,w
  8645  1680  1903               	skipnz
  8646  1681  2ED8               	goto	l3292
  8647  1682  01C8               	clrf	___aodiv@counter
  8648  1683  0AC8               	incf	___aodiv@counter,f
  8649  1684                     l3280:	
  8650  1684  1BBF               	btfsc	___aodiv@divisor+7,7
  8651  1685  2E93               	goto	l3282
  8652  1686  35B8               	lslf	___aodiv@divisor,f
  8653  1687  0DB9               	rlf	___aodiv@divisor+1,f
  8654  1688  0DBA               	rlf	___aodiv@divisor+2,f
  8655  1689  0DBB               	rlf	___aodiv@divisor+3,f
  8656  168A  0DBC               	rlf	___aodiv@divisor+4,f
  8657  168B  0DBD               	rlf	___aodiv@divisor+5,f
  8658  168C  0DBE               	rlf	___aodiv@divisor+6,f
  8659  168D  0DBF               	rlf	___aodiv@divisor+7,f
  8660  168E  3001               	movlw	1
  8661  168F  00F6               	movwf	??___aodiv
  8662  1690  0876               	movf	??___aodiv,w
  8663  1691  07C8               	addwf	___aodiv@counter,f
  8664  1692  2E84               	goto	l3280
  8665  1693                     l3282:	
  8666  1693  35CA               	lslf	___aodiv@quotient,f
  8667  1694  0DCB               	rlf	___aodiv@quotient+1,f
  8668  1695  0DCC               	rlf	___aodiv@quotient+2,f
  8669  1696  0DCD               	rlf	___aodiv@quotient+3,f
  8670  1697  0DCE               	rlf	___aodiv@quotient+4,f
  8671  1698  0DCF               	rlf	___aodiv@quotient+5,f
  8672  1699  0DD0               	rlf	___aodiv@quotient+6,f
  8673  169A  0DD1               	rlf	___aodiv@quotient+7,f
  8674  169B  083F               	movf	___aodiv@divisor+7,w
  8675  169C  0247               	subwf	___aodiv@dividend+7,w
  8676  169D  1D03               	skipz
  8677  169E  2EB9               	goto	u3085
  8678  169F  083E               	movf	___aodiv@divisor+6,w
  8679  16A0  0246               	subwf	___aodiv@dividend+6,w
  8680  16A1  1D03               	skipz
  8681  16A2  2EB9               	goto	u3085
  8682  16A3  083D               	movf	___aodiv@divisor+5,w
  8683  16A4  0245               	subwf	___aodiv@dividend+5,w
  8684  16A5  1D03               	skipz
  8685  16A6  2EB9               	goto	u3085
  8686  16A7  083C               	movf	___aodiv@divisor+4,w
  8687  16A8  0244               	subwf	___aodiv@dividend+4,w
  8688  16A9  1D03               	skipz
  8689  16AA  2EB9               	goto	u3085
  8690  16AB  083B               	movf	___aodiv@divisor+3,w
  8691  16AC  0243               	subwf	___aodiv@dividend+3,w
  8692  16AD  1D03               	skipz
  8693  16AE  2EB9               	goto	u3085
  8694  16AF  083A               	movf	___aodiv@divisor+2,w
  8695  16B0  0242               	subwf	___aodiv@dividend+2,w
  8696  16B1  1D03               	skipz
  8697  16B2  2EB9               	goto	u3085
  8698  16B3  0839               	movf	___aodiv@divisor+1,w
  8699  16B4  0241               	subwf	___aodiv@dividend+1,w
  8700  16B5  1D03               	skipz
  8701  16B6  2EB9               	goto	u3085
  8702  16B7  0838               	movf	___aodiv@divisor,w
  8703  16B8  0240               	subwf	___aodiv@dividend,w
  8704  16B9                     u3085:	
  8705  16B9  1C03               	skipc
  8706  16BA  2ECC               	goto	l3290
  8707  16BB  0838               	movf	___aodiv@divisor,w
  8708  16BC  02C0               	subwf	___aodiv@dividend,f
  8709  16BD  0839               	movf	___aodiv@divisor+1,w
  8710  16BE  3BC1               	subwfb	___aodiv@dividend+1,f
  8711  16BF  083A               	movf	___aodiv@divisor+2,w
  8712  16C0  3BC2               	subwfb	___aodiv@dividend+2,f
  8713  16C1  083B               	movf	___aodiv@divisor+3,w
  8714  16C2  3BC3               	subwfb	___aodiv@dividend+3,f
  8715  16C3  083C               	movf	___aodiv@divisor+4,w
  8716  16C4  3BC4               	subwfb	___aodiv@dividend+4,f
  8717  16C5  083D               	movf	___aodiv@divisor+5,w
  8718  16C6  3BC5               	subwfb	___aodiv@dividend+5,f
  8719  16C7  083E               	movf	___aodiv@divisor+6,w
  8720  16C8  3BC6               	subwfb	___aodiv@dividend+6,f
  8721  16C9  083F               	movf	___aodiv@divisor+7,w
  8722  16CA  3BC7               	subwfb	___aodiv@dividend+7,f
  8723  16CB  144A               	bsf	___aodiv@quotient,0
  8724  16CC                     l3290:	
  8725  16CC  36BF               	lsrf	___aodiv@divisor+7,f
  8726  16CD  0CBE               	rrf	___aodiv@divisor+6,f
  8727  16CE  0CBD               	rrf	___aodiv@divisor+5,f
  8728  16CF  0CBC               	rrf	___aodiv@divisor+4,f
  8729  16D0  0CBB               	rrf	___aodiv@divisor+3,f
  8730  16D1  0CBA               	rrf	___aodiv@divisor+2,f
  8731  16D2  0CB9               	rrf	___aodiv@divisor+1,f
  8732  16D3  0CB8               	rrf	___aodiv@divisor,f
  8733  16D4  3001               	movlw	1
  8734  16D5  02C8               	subwf	___aodiv@counter,f
  8735  16D6  1D03               	btfss	3,2
  8736  16D7  2E93               	goto	l3282
  8737  16D8                     l3292:	
  8738  16D8  0849               	movf	___aodiv@sign,w
  8739  16D9  1903               	btfsc	3,2
  8740  16DA  2EF9               	goto	l888
  8741  16DB  09CA               	comf	___aodiv@quotient,f
  8742  16DC  09CB               	comf	___aodiv@quotient+1,f
  8743  16DD  09CC               	comf	___aodiv@quotient+2,f
  8744  16DE  09CD               	comf	___aodiv@quotient+3,f
  8745  16DF  09CE               	comf	___aodiv@quotient+4,f
  8746  16E0  09CF               	comf	___aodiv@quotient+5,f
  8747  16E1  09D0               	comf	___aodiv@quotient+6,f
  8748  16E2  09D1               	comf	___aodiv@quotient+7,f
  8749  16E3  0ACA               	incf	___aodiv@quotient,f
  8750  16E4  1D03               	skipz
  8751  16E5  2EF9               	goto	l888
  8752  16E6  0ACB               	incf	___aodiv@quotient+1,f
  8753  16E7  1D03               	skipz
  8754  16E8  2EF9               	goto	l888
  8755  16E9  0ACC               	incf	___aodiv@quotient+2,f
  8756  16EA  1D03               	skipz
  8757  16EB  2EF9               	goto	l888
  8758  16EC  0ACD               	incf	___aodiv@quotient+3,f
  8759  16ED  1D03               	skipz
  8760  16EE  2EF9               	goto	l888
  8761  16EF  0ACE               	incf	___aodiv@quotient+4,f
  8762  16F0  1D03               	skipz
  8763  16F1  2EF9               	goto	l888
  8764  16F2  0ACF               	incf	___aodiv@quotient+5,f
  8765  16F3  1D03               	skipz
  8766  16F4  2EF9               	goto	l888
  8767  16F5  0AD0               	incf	___aodiv@quotient+6,f
  8768  16F6  1D03               	skipz
  8769  16F7  2EF9               	goto	l888
  8770  16F8  0AD1               	incf	___aodiv@quotient+7,f
  8771  16F9                     l888:	
  8772  16F9  0020               	movlb	0	; select bank0
  8773  16FA  084A               	movf	___aodiv@quotient,w
  8774  16FB  00B8               	movwf	?___aodiv
  8775  16FC  084B               	movf	___aodiv@quotient+1,w
  8776  16FD  00B9               	movwf	?___aodiv+1
  8777  16FE  084C               	movf	___aodiv@quotient+2,w
  8778  16FF  00BA               	movwf	?___aodiv+2
  8779  1700  084D               	movf	___aodiv@quotient+3,w
  8780  1701  00BB               	movwf	?___aodiv+3
  8781  1702  084E               	movf	___aodiv@quotient+4,w
  8782  1703  00BC               	movwf	?___aodiv+4
  8783  1704  084F               	movf	___aodiv@quotient+5,w
  8784  1705  00BD               	movwf	?___aodiv+5
  8785  1706  0850               	movf	___aodiv@quotient+6,w
  8786  1707  00BE               	movwf	?___aodiv+6
  8787  1708  0851               	movf	___aodiv@quotient+7,w
  8788  1709  00BF               	movwf	?___aodiv+7
  8789  170A  0008               	return
  8790  170B                     __end_of___aodiv:	
  8791                           
  8792                           	psect	text26
  8793  0065                     __ptext26:	
  8794 ;; *************** function _compensate_humidity *****************
  8795 ;; Defined at:
  8796 ;;		line 1263 in file "BME280_driver/bme280.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  8799 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8800 ;;  calib_data      1   23[BANK0 ] PTR const struct bme280_
  8801 ;;		 -> main@env_sensor(51), 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  uncomp_data     1   39[BANK0 ] PTR const struct bme280_
  8804 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8805 ;;  var3            4   64[BANK0 ] long 
  8806 ;;  var5            4   60[BANK0 ] long 
  8807 ;;  var4            4   56[BANK0 ] long 
  8808 ;;  var2            4   52[BANK0 ] long 
  8809 ;;  var1            4   48[BANK0 ] long 
  8810 ;;  humidity        4   44[BANK0 ] unsigned long 
  8811 ;;  humidity_max    4    0        unsigned long 
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  4   23[BANK0 ] unsigned long 
  8814 ;; Registers used:
  8815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8816 ;; Tracked objects:
  8817 ;;		On entry : 1F/1
  8818 ;;		On exit  : 1F/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8821 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Totals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;Total ram usage:       45 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; Hardware stack levels required when called:    4
  8828 ;; This function calls:
  8829 ;;		___aldiv
  8830 ;;		___lmul
  8831 ;; This function is called by:
  8832 ;;		_bme280_compensate_data
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           
  8837                           ;psect for function _compensate_humidity
  8838  0065                     _compensate_humidity:	
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in _compensate_humidity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8842                           ;compensate_humidity@uncomp_data stored from wreg
  8843  0065  0020               	movlb	0	; select bank0
  8844  0066  00C7               	movwf	compensate_humidity@uncomp_data
  8845                           
  8846                           ;BME280_driver/bme280.c: 1274:     var1 = calib_data->t_fine - ((int32_t)76800);
  8847  0067  0837               	movf	compensate_humidity@calib_data,w
  8848  0068  3E21               	addlw	33
  8849  0069  0086               	movwf	6
  8850  006A  3001               	movlw	1	; select bank2/3
  8851  006B  0087               	movwf	7
  8852  006C  3F40               	moviw [0]fsr1
  8853  006D  00BB               	movwf	??_compensate_humidity
  8854  006E  3F41               	moviw [1]fsr1
  8855  006F  00BC               	movwf	??_compensate_humidity+1
  8856  0070  3F42               	moviw [2]fsr1
  8857  0071  00BD               	movwf	??_compensate_humidity+2
  8858  0072  3F43               	moviw [3]fsr1
  8859  0073  00BE               	movwf	??_compensate_humidity+3
  8860  0074  3000               	movlw	0
  8861  0075  073B               	addwf	??_compensate_humidity,w
  8862  0076  00D0               	movwf	compensate_humidity@var1
  8863  0077  30D4               	movlw	212
  8864  0078  3D3C               	addwfc	??_compensate_humidity+1,w
  8865  0079  00D1               	movwf	compensate_humidity@var1+1
  8866  007A  30FE               	movlw	254
  8867  007B  3D3D               	addwfc	??_compensate_humidity+2,w
  8868  007C  00D2               	movwf	compensate_humidity@var1+2
  8869  007D  30FF               	movlw	255
  8870  007E  3D3E               	addwfc	??_compensate_humidity+3,w
  8871  007F  00D3               	movwf	compensate_humidity@var1+3
  8872                           
  8873                           ;BME280_driver/bme280.c: 1275:     var2 = (int32_t)(uncomp_data->humidity * 16384);
  8874  0080  0847               	movf	compensate_humidity@uncomp_data,w
  8875  0081  3E08               	addlw	8
  8876  0082  0086               	movwf	6
  8877  0083  3001               	movlw	1	; select bank2/3
  8878  0084  0087               	movwf	7
  8879  0085  3F40               	moviw [0]fsr1
  8880  0086  00BB               	movwf	??_compensate_humidity
  8881  0087  3F41               	moviw [1]fsr1
  8882  0088  00BC               	movwf	??_compensate_humidity+1
  8883  0089  3F42               	moviw [2]fsr1
  8884  008A  00BD               	movwf	??_compensate_humidity+2
  8885  008B  3F43               	moviw [3]fsr1
  8886  008C  00BE               	movwf	??_compensate_humidity+3
  8887  008D  300E               	movlw	14
  8888  008E                     u3375:	
  8889  008E  35BB               	lslf	??_compensate_humidity,f
  8890  008F  0DBC               	rlf	??_compensate_humidity+1,f
  8891  0090  0DBD               	rlf	??_compensate_humidity+2,f
  8892  0091  0DBE               	rlf	??_compensate_humidity+3,f
  8893  0092  0B89               	decfsz	9,f
  8894  0093  288E               	goto	u3375
  8895  0094  083E               	movf	??_compensate_humidity+3,w
  8896  0095  00D7               	movwf	compensate_humidity@var2+3
  8897  0096  083D               	movf	??_compensate_humidity+2,w
  8898  0097  00D6               	movwf	compensate_humidity@var2+2
  8899  0098  083C               	movf	??_compensate_humidity+1,w
  8900  0099  00D5               	movwf	compensate_humidity@var2+1
  8901  009A  083B               	movf	??_compensate_humidity,w
  8902  009B  00D4               	movwf	compensate_humidity@var2
  8903                           
  8904                           ;BME280_driver/bme280.c: 1276:     var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048
      +                          576);
  8905  009C  0837               	movf	compensate_humidity@calib_data,w
  8906  009D  3E1C               	addlw	28
  8907  009E  0086               	movwf	6
  8908  009F  3001               	movlw	1	; select bank2/3
  8909  00A0  0087               	movwf	7
  8910  00A1  3F40               	moviw [0]fsr1
  8911  00A2  00BB               	movwf	??_compensate_humidity
  8912  00A3  3F41               	moviw [1]fsr1
  8913  00A4  00BC               	movwf	??_compensate_humidity+1
  8914  00A5  083B               	movf	??_compensate_humidity,w
  8915  00A6  00BD               	movwf	??_compensate_humidity+2
  8916  00A7  083C               	movf	??_compensate_humidity+1,w
  8917  00A8  00BE               	movwf	??_compensate_humidity+3
  8918  00A9  01BF               	clrf	??_compensate_humidity+4
  8919  00AA  01C0               	clrf	??_compensate_humidity+5
  8920  00AB  3014               	movlw	20
  8921  00AC                     u3385:	
  8922  00AC  35BD               	lslf	??_compensate_humidity+2,f
  8923  00AD  0DBE               	rlf	??_compensate_humidity+3,f
  8924  00AE  0DBF               	rlf	??_compensate_humidity+4,f
  8925  00AF  0DC0               	rlf	??_compensate_humidity+5,f
  8926  00B0  0B89               	decfsz	9,f
  8927  00B1  28AC               	goto	u3385
  8928  00B2  0840               	movf	??_compensate_humidity+5,w
  8929  00B3  00E3               	movwf	compensate_humidity@var3+3
  8930  00B4  083F               	movf	??_compensate_humidity+4,w
  8931  00B5  00E2               	movwf	compensate_humidity@var3+2
  8932  00B6  083E               	movf	??_compensate_humidity+3,w
  8933  00B7  00E1               	movwf	compensate_humidity@var3+1
  8934  00B8  083D               	movf	??_compensate_humidity+2,w
  8935  00B9  00E0               	movwf	compensate_humidity@var3
  8936                           
  8937                           ;BME280_driver/bme280.c: 1277:     var4 = ((int32_t)calib_data->dig_H5) * var1;
  8938  00BA  0837               	movf	compensate_humidity@calib_data,w
  8939  00BB  3E1E               	addlw	30
  8940  00BC  0086               	movwf	6
  8941  00BD  3001               	movlw	1	; select bank2/3
  8942  00BE  0087               	movwf	7
  8943  00BF  3F40               	moviw [0]fsr1
  8944  00C0  00BB               	movwf	??_compensate_humidity
  8945  00C1  3F41               	moviw [1]fsr1
  8946  00C2  00BC               	movwf	??_compensate_humidity+1
  8947  00C3  083B               	movf	??_compensate_humidity,w
  8948  00C4  00A0               	movwf	___lmul@multiplier
  8949  00C5  083C               	movf	??_compensate_humidity+1,w
  8950  00C6  00A1               	movwf	___lmul@multiplier+1
  8951  00C7  0D89               	rlf	9,f
  8952  00C8  3B89               	subwfb	9,f
  8953  00C9  0989               	comf	9,f
  8954  00CA  00A2               	movwf	___lmul@multiplier+2
  8955  00CB  00A3               	movwf	___lmul@multiplier+3
  8956  00CC  0853               	movf	compensate_humidity@var1+3,w
  8957  00CD  00A7               	movwf	___lmul@multiplicand+3
  8958  00CE  0852               	movf	compensate_humidity@var1+2,w
  8959  00CF  00A6               	movwf	___lmul@multiplicand+2
  8960  00D0  0851               	movf	compensate_humidity@var1+1,w
  8961  00D1  00A5               	movwf	___lmul@multiplicand+1
  8962  00D2  0850               	movf	compensate_humidity@var1,w
  8963  00D3  00A4               	movwf	___lmul@multiplicand
  8964  00D4  3190  206F  3180   	fcall	___lmul
  8965  00D7  0823               	movf	?___lmul+3,w
  8966  00D8  00DB               	movwf	compensate_humidity@var4+3
  8967  00D9  0822               	movf	?___lmul+2,w
  8968  00DA  00DA               	movwf	compensate_humidity@var4+2
  8969  00DB  0821               	movf	?___lmul+1,w
  8970  00DC  00D9               	movwf	compensate_humidity@var4+1
  8971  00DD  0820               	movf	?___lmul,w
  8972  00DE  00D8               	movwf	compensate_humidity@var4
  8973                           
  8974                           ;BME280_driver/bme280.c: 1278:     var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32
      +                          768;
  8975  00DF  3000               	movlw	0
  8976  00E0  00AB               	movwf	___aldiv@divisor+3
  8977  00E1  3000               	movlw	0
  8978  00E2  00AA               	movwf	___aldiv@divisor+2
  8979  00E3  3080               	movlw	128
  8980  00E4  00A9               	movwf	___aldiv@divisor+1
  8981  00E5  3000               	movlw	0
  8982  00E6  00A8               	movwf	___aldiv@divisor
  8983  00E7  0854               	movf	compensate_humidity@var2,w
  8984  00E8  00BB               	movwf	??_compensate_humidity
  8985  00E9  0855               	movf	compensate_humidity@var2+1,w
  8986  00EA  00BC               	movwf	??_compensate_humidity+1
  8987  00EB  0856               	movf	compensate_humidity@var2+2,w
  8988  00EC  00BD               	movwf	??_compensate_humidity+2
  8989  00ED  0857               	movf	compensate_humidity@var2+3,w
  8990  00EE  00BE               	movwf	??_compensate_humidity+3
  8991  00EF  0960               	comf	compensate_humidity@var3,w
  8992  00F0  00BF               	movwf	??_compensate_humidity+4
  8993  00F1  0961               	comf	compensate_humidity@var3+1,w
  8994  00F2  00C0               	movwf	??_compensate_humidity+5
  8995  00F3  0962               	comf	compensate_humidity@var3+2,w
  8996  00F4  00C1               	movwf	??_compensate_humidity+6
  8997  00F5  0963               	comf	compensate_humidity@var3+3,w
  8998  00F6  00C2               	movwf	??_compensate_humidity+7
  8999  00F7  0ABF               	incf	??_compensate_humidity+4,f
  9000  00F8  1903               	skipnz
  9001  00F9  0AC0               	incf	??_compensate_humidity+5,f
  9002  00FA  1903               	skipnz
  9003  00FB  0AC1               	incf	??_compensate_humidity+6,f
  9004  00FC  1903               	skipnz
  9005  00FD  0AC2               	incf	??_compensate_humidity+7,f
  9006  00FE  0858               	movf	compensate_humidity@var4,w
  9007  00FF  02BF               	subwf	??_compensate_humidity+4,f
  9008  0100  0859               	movf	compensate_humidity@var4+1,w
  9009  0101  3BC0               	subwfb	??_compensate_humidity+5,f
  9010  0102  085A               	movf	compensate_humidity@var4+2,w
  9011  0103  3BC1               	subwfb	??_compensate_humidity+6,f
  9012  0104  085B               	movf	compensate_humidity@var4+3,w
  9013  0105  3BC2               	subwfb	??_compensate_humidity+7,f
  9014  0106  083F               	movf	??_compensate_humidity+4,w
  9015  0107  07BB               	addwf	??_compensate_humidity,f
  9016  0108  0840               	movf	??_compensate_humidity+5,w
  9017  0109  3DBC               	addwfc	??_compensate_humidity+1,f
  9018  010A  0841               	movf	??_compensate_humidity+6,w
  9019  010B  3DBD               	addwfc	??_compensate_humidity+2,f
  9020  010C  0842               	movf	??_compensate_humidity+7,w
  9021  010D  3DBE               	addwfc	??_compensate_humidity+3,f
  9022  010E  3000               	movlw	0
  9023  010F  073B               	addwf	??_compensate_humidity,w
  9024  0110  00AC               	movwf	___aldiv@dividend
  9025  0111  3040               	movlw	64
  9026  0112  3D3C               	addwfc	??_compensate_humidity+1,w
  9027  0113  00AD               	movwf	___aldiv@dividend+1
  9028  0114  3000               	movlw	0
  9029  0115  3D3D               	addwfc	??_compensate_humidity+2,w
  9030  0116  00AE               	movwf	___aldiv@dividend+2
  9031  0117  3000               	movlw	0
  9032  0118  3D3E               	addwfc	??_compensate_humidity+3,w
  9033  0119  00AF               	movwf	___aldiv@dividend+3
  9034  011A  3193  23D9  3180   	fcall	___aldiv
  9035  011D  082B               	movf	?___aldiv+3,w
  9036  011E  00DF               	movwf	compensate_humidity@var5+3
  9037  011F  082A               	movf	?___aldiv+2,w
  9038  0120  00DE               	movwf	compensate_humidity@var5+2
  9039  0121  0829               	movf	?___aldiv+1,w
  9040  0122  00DD               	movwf	compensate_humidity@var5+1
  9041  0123  0828               	movf	?___aldiv,w
  9042  0124  00DC               	movwf	compensate_humidity@var5
  9043                           
  9044                           ;BME280_driver/bme280.c: 1279:     var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
  9045  0125  3000               	movlw	0
  9046  0126  00AB               	movwf	___aldiv@divisor+3
  9047  0127  3000               	movlw	0
  9048  0128  00AA               	movwf	___aldiv@divisor+2
  9049  0129  3004               	movlw	4
  9050  012A  00A9               	movwf	___aldiv@divisor+1
  9051  012B  3000               	movlw	0
  9052  012C  00A8               	movwf	___aldiv@divisor
  9053  012D  0837               	movf	compensate_humidity@calib_data,w
  9054  012E  3E20               	addlw	32
  9055  012F  0086               	movwf	6
  9056  0130  3001               	movlw	1	; select bank2/3
  9057  0131  0087               	movwf	7
  9058  0132  0801               	movf	1,w
  9059  0133  00A0               	movwf	___lmul@multiplier
  9060  0134  3980               	andlw	128
  9061  0135  1D03               	skipz
  9062  0136  30FF               	movlw	255
  9063  0137  00A1               	movwf	___lmul@multiplier+1
  9064  0138  00A2               	movwf	___lmul@multiplier+2
  9065  0139  00A3               	movwf	___lmul@multiplier+3
  9066  013A  0853               	movf	compensate_humidity@var1+3,w
  9067  013B  00A7               	movwf	___lmul@multiplicand+3
  9068  013C  0852               	movf	compensate_humidity@var1+2,w
  9069  013D  00A6               	movwf	___lmul@multiplicand+2
  9070  013E  0851               	movf	compensate_humidity@var1+1,w
  9071  013F  00A5               	movwf	___lmul@multiplicand+1
  9072  0140  0850               	movf	compensate_humidity@var1,w
  9073  0141  00A4               	movwf	___lmul@multiplicand
  9074  0142  3190  206F  3180   	fcall	___lmul
  9075  0145  0823               	movf	?___lmul+3,w
  9076  0146  00AF               	movwf	___aldiv@dividend+3
  9077  0147  0822               	movf	?___lmul+2,w
  9078  0148  00AE               	movwf	___aldiv@dividend+2
  9079  0149  0821               	movf	?___lmul+1,w
  9080  014A  00AD               	movwf	___aldiv@dividend+1
  9081  014B  0820               	movf	?___lmul,w
  9082  014C  00AC               	movwf	___aldiv@dividend
  9083  014D  3193  23D9  3180   	fcall	___aldiv
  9084  0150  082B               	movf	?___aldiv+3,w
  9085  0151  00D7               	movwf	compensate_humidity@var2+3
  9086  0152  082A               	movf	?___aldiv+2,w
  9087  0153  00D6               	movwf	compensate_humidity@var2+2
  9088  0154  0829               	movf	?___aldiv+1,w
  9089  0155  00D5               	movwf	compensate_humidity@var2+1
  9090  0156  0828               	movf	?___aldiv,w
  9091  0157  00D4               	movwf	compensate_humidity@var2
  9092                           
  9093                           ;BME280_driver/bme280.c: 1280:     var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
  9094  0158  3000               	movlw	0
  9095  0159  00AB               	movwf	___aldiv@divisor+3
  9096  015A  3000               	movlw	0
  9097  015B  00AA               	movwf	___aldiv@divisor+2
  9098  015C  3008               	movlw	8
  9099  015D  00A9               	movwf	___aldiv@divisor+1
  9100  015E  3000               	movlw	0
  9101  015F  00A8               	movwf	___aldiv@divisor
  9102  0160  0837               	movf	compensate_humidity@calib_data,w
  9103  0161  3E1B               	addlw	27
  9104  0162  0086               	movwf	6
  9105  0163  3001               	movlw	1	; select bank2/3
  9106  0164  0087               	movwf	7
  9107  0165  0801               	movf	1,w
  9108  0166  00BB               	movwf	??_compensate_humidity
  9109  0167  01BC               	clrf	??_compensate_humidity+1
  9110  0168  01BD               	clrf	??_compensate_humidity+2
  9111  0169  01BE               	clrf	??_compensate_humidity+3
  9112  016A  083E               	movf	??_compensate_humidity+3,w
  9113  016B  00A3               	movwf	___lmul@multiplier+3
  9114  016C  083D               	movf	??_compensate_humidity+2,w
  9115  016D  00A2               	movwf	___lmul@multiplier+2
  9116  016E  083C               	movf	??_compensate_humidity+1,w
  9117  016F  00A1               	movwf	___lmul@multiplier+1
  9118  0170  083B               	movf	??_compensate_humidity,w
  9119  0171  00A0               	movwf	___lmul@multiplier
  9120  0172  0853               	movf	compensate_humidity@var1+3,w
  9121  0173  00A7               	movwf	___lmul@multiplicand+3
  9122  0174  0852               	movf	compensate_humidity@var1+2,w
  9123  0175  00A6               	movwf	___lmul@multiplicand+2
  9124  0176  0851               	movf	compensate_humidity@var1+1,w
  9125  0177  00A5               	movwf	___lmul@multiplicand+1
  9126  0178  0850               	movf	compensate_humidity@var1,w
  9127  0179  00A4               	movwf	___lmul@multiplicand
  9128  017A  3190  206F  3180   	fcall	___lmul
  9129  017D  0823               	movf	?___lmul+3,w
  9130  017E  00AF               	movwf	___aldiv@dividend+3
  9131  017F  0822               	movf	?___lmul+2,w
  9132  0180  00AE               	movwf	___aldiv@dividend+2
  9133  0181  0821               	movf	?___lmul+1,w
  9134  0182  00AD               	movwf	___aldiv@dividend+1
  9135  0183  0820               	movf	?___lmul,w
  9136  0184  00AC               	movwf	___aldiv@dividend
  9137  0185  3193  23D9  3180   	fcall	___aldiv
  9138  0188  082B               	movf	?___aldiv+3,w
  9139  0189  00E3               	movwf	compensate_humidity@var3+3
  9140  018A  082A               	movf	?___aldiv+2,w
  9141  018B  00E2               	movwf	compensate_humidity@var3+2
  9142  018C  0829               	movf	?___aldiv+1,w
  9143  018D  00E1               	movwf	compensate_humidity@var3+1
  9144  018E  0828               	movf	?___aldiv,w
  9145  018F  00E0               	movwf	compensate_humidity@var3
  9146                           
  9147                           ;BME280_driver/bme280.c: 1281:     var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (i
      +                          nt32_t)2097152;
  9148  0190  3000               	movlw	0
  9149  0191  00AB               	movwf	___aldiv@divisor+3
  9150  0192  3000               	movlw	0
  9151  0193  00AA               	movwf	___aldiv@divisor+2
  9152  0194  3004               	movlw	4
  9153  0195  00A9               	movwf	___aldiv@divisor+1
  9154  0196  3000               	movlw	0
  9155  0197  00A8               	movwf	___aldiv@divisor
  9156  0198  3000               	movlw	0
  9157  0199  0760               	addwf	compensate_humidity@var3,w
  9158  019A  00A0               	movwf	___lmul@multiplier
  9159  019B  3080               	movlw	128
  9160  019C  3D61               	addwfc	compensate_humidity@var3+1,w
  9161  019D  00A1               	movwf	___lmul@multiplier+1
  9162  019E  3000               	movlw	0
  9163  019F  3D62               	addwfc	compensate_humidity@var3+2,w
  9164  01A0  00A2               	movwf	___lmul@multiplier+2
  9165  01A1  3000               	movlw	0
  9166  01A2  3D63               	addwfc	compensate_humidity@var3+3,w
  9167  01A3  00A3               	movwf	___lmul@multiplier+3
  9168  01A4  0857               	movf	compensate_humidity@var2+3,w
  9169  01A5  00A7               	movwf	___lmul@multiplicand+3
  9170  01A6  0856               	movf	compensate_humidity@var2+2,w
  9171  01A7  00A6               	movwf	___lmul@multiplicand+2
  9172  01A8  0855               	movf	compensate_humidity@var2+1,w
  9173  01A9  00A5               	movwf	___lmul@multiplicand+1
  9174  01AA  0854               	movf	compensate_humidity@var2,w
  9175  01AB  00A4               	movwf	___lmul@multiplicand
  9176  01AC  3190  206F  3180   	fcall	___lmul
  9177  01AF  0823               	movf	?___lmul+3,w
  9178  01B0  00AF               	movwf	___aldiv@dividend+3
  9179  01B1  0822               	movf	?___lmul+2,w
  9180  01B2  00AE               	movwf	___aldiv@dividend+2
  9181  01B3  0821               	movf	?___lmul+1,w
  9182  01B4  00AD               	movwf	___aldiv@dividend+1
  9183  01B5  0820               	movf	?___lmul,w
  9184  01B6  00AC               	movwf	___aldiv@dividend
  9185  01B7  3193  23D9  3180   	fcall	___aldiv
  9186  01BA  3000               	movlw	0
  9187  01BB  0728               	addwf	?___aldiv,w
  9188  01BC  00D8               	movwf	compensate_humidity@var4
  9189  01BD  3000               	movlw	0
  9190  01BE  3D29               	addwfc	?___aldiv+1,w
  9191  01BF  00D9               	movwf	compensate_humidity@var4+1
  9192  01C0  3020               	movlw	32
  9193  01C1  3D2A               	addwfc	?___aldiv+2,w
  9194  01C2  00DA               	movwf	compensate_humidity@var4+2
  9195  01C3  3000               	movlw	0
  9196  01C4  3D2B               	addwfc	?___aldiv+3,w
  9197  01C5  00DB               	movwf	compensate_humidity@var4+3
  9198                           
  9199                           ;BME280_driver/bme280.c: 1282:     var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192
      +                          ) / 16384;
  9200  01C6  3000               	movlw	0
  9201  01C7  00AB               	movwf	___aldiv@divisor+3
  9202  01C8  3000               	movlw	0
  9203  01C9  00AA               	movwf	___aldiv@divisor+2
  9204  01CA  3040               	movlw	64
  9205  01CB  00A9               	movwf	___aldiv@divisor+1
  9206  01CC  3000               	movlw	0
  9207  01CD  00A8               	movwf	___aldiv@divisor
  9208  01CE  3000               	movlw	0
  9209  01CF  00BB               	movwf	??_compensate_humidity
  9210  01D0  3020               	movlw	32
  9211  01D1  00BC               	movwf	??_compensate_humidity+1
  9212  01D2  3000               	movlw	0
  9213  01D3  00BD               	movwf	??_compensate_humidity+2
  9214  01D4  3000               	movlw	0
  9215  01D5  00BE               	movwf	??_compensate_humidity+3
  9216  01D6  0837               	movf	compensate_humidity@calib_data,w
  9217  01D7  3E19               	addlw	25
  9218  01D8  0086               	movwf	6
  9219  01D9  3001               	movlw	1	; select bank2/3
  9220  01DA  0087               	movwf	7
  9221  01DB  3F40               	moviw [0]fsr1
  9222  01DC  00BF               	movwf	??_compensate_humidity+4
  9223  01DD  3F41               	moviw [1]fsr1
  9224  01DE  00C0               	movwf	??_compensate_humidity+5
  9225  01DF  083F               	movf	??_compensate_humidity+4,w
  9226  01E0  00A0               	movwf	___lmul@multiplier
  9227  01E1  0840               	movf	??_compensate_humidity+5,w
  9228  01E2  00A1               	movwf	___lmul@multiplier+1
  9229  01E3  0D89               	rlf	9,f
  9230  01E4  3B89               	subwfb	9,f
  9231  01E5  0989               	comf	9,f
  9232  01E6  00A2               	movwf	___lmul@multiplier+2
  9233  01E7  00A3               	movwf	___lmul@multiplier+3
  9234  01E8  085B               	movf	compensate_humidity@var4+3,w
  9235  01E9  00A7               	movwf	___lmul@multiplicand+3
  9236  01EA  085A               	movf	compensate_humidity@var4+2,w
  9237  01EB  00A6               	movwf	___lmul@multiplicand+2
  9238  01EC  0859               	movf	compensate_humidity@var4+1,w
  9239  01ED  00A5               	movwf	___lmul@multiplicand+1
  9240  01EE  0858               	movf	compensate_humidity@var4,w
  9241  01EF  00A4               	movwf	___lmul@multiplicand
  9242  01F0  3190  206F  3180   	fcall	___lmul
  9243  01F3  0820               	movf	?___lmul,w
  9244  01F4  07BB               	addwf	??_compensate_humidity,f
  9245  01F5  0821               	movf	?___lmul+1,w
  9246  01F6  3DBC               	addwfc	??_compensate_humidity+1,f
  9247  01F7  0822               	movf	?___lmul+2,w
  9248  01F8  3DBD               	addwfc	??_compensate_humidity+2,f
  9249  01F9  0823               	movf	?___lmul+3,w
  9250  01FA  3DBE               	addwfc	??_compensate_humidity+3,f
  9251  01FB  083E               	movf	??_compensate_humidity+3,w
  9252  01FC  00AF               	movwf	___aldiv@dividend+3
  9253  01FD  083D               	movf	??_compensate_humidity+2,w
  9254  01FE  00AE               	movwf	___aldiv@dividend+2
  9255  01FF  083C               	movf	??_compensate_humidity+1,w
  9256  0200  00AD               	movwf	___aldiv@dividend+1
  9257  0201  083B               	movf	??_compensate_humidity,w
  9258  0202  00AC               	movwf	___aldiv@dividend
  9259  0203  3193  23D9  3180   	fcall	___aldiv
  9260  0206  082B               	movf	?___aldiv+3,w
  9261  0207  00D7               	movwf	compensate_humidity@var2+3
  9262  0208  082A               	movf	?___aldiv+2,w
  9263  0209  00D6               	movwf	compensate_humidity@var2+2
  9264  020A  0829               	movf	?___aldiv+1,w
  9265  020B  00D5               	movwf	compensate_humidity@var2+1
  9266  020C  0828               	movf	?___aldiv,w
  9267  020D  00D4               	movwf	compensate_humidity@var2
  9268                           
  9269                           ;BME280_driver/bme280.c: 1283:     var3 = var5 * var2;
  9270  020E  085F               	movf	compensate_humidity@var5+3,w
  9271  020F  00A3               	movwf	___lmul@multiplier+3
  9272  0210  085E               	movf	compensate_humidity@var5+2,w
  9273  0211  00A2               	movwf	___lmul@multiplier+2
  9274  0212  085D               	movf	compensate_humidity@var5+1,w
  9275  0213  00A1               	movwf	___lmul@multiplier+1
  9276  0214  085C               	movf	compensate_humidity@var5,w
  9277  0215  00A0               	movwf	___lmul@multiplier
  9278  0216  0857               	movf	compensate_humidity@var2+3,w
  9279  0217  00A7               	movwf	___lmul@multiplicand+3
  9280  0218  0856               	movf	compensate_humidity@var2+2,w
  9281  0219  00A6               	movwf	___lmul@multiplicand+2
  9282  021A  0855               	movf	compensate_humidity@var2+1,w
  9283  021B  00A5               	movwf	___lmul@multiplicand+1
  9284  021C  0854               	movf	compensate_humidity@var2,w
  9285  021D  00A4               	movwf	___lmul@multiplicand
  9286  021E  3190  206F  3180   	fcall	___lmul
  9287  0221  0823               	movf	?___lmul+3,w
  9288  0222  00E3               	movwf	compensate_humidity@var3+3
  9289  0223  0822               	movf	?___lmul+2,w
  9290  0224  00E2               	movwf	compensate_humidity@var3+2
  9291  0225  0821               	movf	?___lmul+1,w
  9292  0226  00E1               	movwf	compensate_humidity@var3+1
  9293  0227  0820               	movf	?___lmul,w
  9294  0228  00E0               	movwf	compensate_humidity@var3
  9295                           
  9296                           ;BME280_driver/bme280.c: 1284:     var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
  9297  0229  3000               	movlw	0
  9298  022A  00AB               	movwf	___aldiv@divisor+3
  9299  022B  3000               	movlw	0
  9300  022C  00AA               	movwf	___aldiv@divisor+2
  9301  022D  3080               	movlw	128
  9302  022E  00A9               	movwf	___aldiv@divisor+1
  9303  022F  3000               	movlw	0
  9304  0230  00A8               	movwf	___aldiv@divisor
  9305  0231  0863               	movf	compensate_humidity@var3+3,w
  9306  0232  00AF               	movwf	___aldiv@dividend+3
  9307  0233  0862               	movf	compensate_humidity@var3+2,w
  9308  0234  00AE               	movwf	___aldiv@dividend+2
  9309  0235  0861               	movf	compensate_humidity@var3+1,w
  9310  0236  00AD               	movwf	___aldiv@dividend+1
  9311  0237  0860               	movf	compensate_humidity@var3,w
  9312  0238  00AC               	movwf	___aldiv@dividend
  9313  0239  3193  23D9  3180   	fcall	___aldiv
  9314  023C  082B               	movf	?___aldiv+3,w
  9315  023D  00A3               	movwf	___lmul@multiplier+3
  9316  023E  082A               	movf	?___aldiv+2,w
  9317  023F  00A2               	movwf	___lmul@multiplier+2
  9318  0240  0829               	movf	?___aldiv+1,w
  9319  0241  00A1               	movwf	___lmul@multiplier+1
  9320  0242  0828               	movf	?___aldiv,w
  9321  0243  00A0               	movwf	___lmul@multiplier
  9322  0244  3000               	movlw	0
  9323  0245  00AB               	movwf	___aldiv@divisor+3
  9324  0246  3000               	movlw	0
  9325  0247  00AA               	movwf	___aldiv@divisor+2
  9326  0248  3080               	movlw	128
  9327  0249  00A9               	movwf	___aldiv@divisor+1
  9328  024A  3000               	movlw	0
  9329  024B  00A8               	movwf	___aldiv@divisor
  9330  024C  0863               	movf	compensate_humidity@var3+3,w
  9331  024D  00AF               	movwf	___aldiv@dividend+3
  9332  024E  0862               	movf	compensate_humidity@var3+2,w
  9333  024F  00AE               	movwf	___aldiv@dividend+2
  9334  0250  0861               	movf	compensate_humidity@var3+1,w
  9335  0251  00AD               	movwf	___aldiv@dividend+1
  9336  0252  0860               	movf	compensate_humidity@var3,w
  9337  0253  00AC               	movwf	___aldiv@dividend
  9338  0254  3193  23D9  3180   	fcall	___aldiv
  9339  0257  082B               	movf	?___aldiv+3,w
  9340  0258  00A7               	movwf	___lmul@multiplicand+3
  9341  0259  082A               	movf	?___aldiv+2,w
  9342  025A  00A6               	movwf	___lmul@multiplicand+2
  9343  025B  0829               	movf	?___aldiv+1,w
  9344  025C  00A5               	movwf	___lmul@multiplicand+1
  9345  025D  0828               	movf	?___aldiv,w
  9346  025E  00A4               	movwf	___lmul@multiplicand
  9347  025F  3190  206F  3180   	fcall	___lmul
  9348  0262  0823               	movf	?___lmul+3,w
  9349  0263  00C6               	movwf	_compensate_humidity$2396+3
  9350  0264  0822               	movf	?___lmul+2,w
  9351  0265  00C5               	movwf	_compensate_humidity$2396+2
  9352  0266  0821               	movf	?___lmul+1,w
  9353  0267  00C4               	movwf	_compensate_humidity$2396+1
  9354  0268  0820               	movf	?___lmul,w
  9355  0269  00C3               	movwf	_compensate_humidity$2396
  9356                           
  9357                           ;BME280_driver/bme280.c: 1284:     var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
  9358  026A  3000               	movlw	0
  9359  026B  00AB               	movwf	___aldiv@divisor+3
  9360  026C  3000               	movlw	0
  9361  026D  00AA               	movwf	___aldiv@divisor+2
  9362  026E  3000               	movlw	0
  9363  026F  00A9               	movwf	___aldiv@divisor+1
  9364  0270  3080               	movlw	128
  9365  0271  00A8               	movwf	___aldiv@divisor
  9366  0272  0846               	movf	_compensate_humidity$2396+3,w
  9367  0273  00AF               	movwf	___aldiv@dividend+3
  9368  0274  0845               	movf	_compensate_humidity$2396+2,w
  9369  0275  00AE               	movwf	___aldiv@dividend+2
  9370  0276  0844               	movf	_compensate_humidity$2396+1,w
  9371  0277  00AD               	movwf	___aldiv@dividend+1
  9372  0278  0843               	movf	_compensate_humidity$2396,w
  9373  0279  00AC               	movwf	___aldiv@dividend
  9374  027A  3193  23D9  3180   	fcall	___aldiv
  9375  027D  082B               	movf	?___aldiv+3,w
  9376  027E  00DB               	movwf	compensate_humidity@var4+3
  9377  027F  082A               	movf	?___aldiv+2,w
  9378  0280  00DA               	movwf	compensate_humidity@var4+2
  9379  0281  0829               	movf	?___aldiv+1,w
  9380  0282  00D9               	movwf	compensate_humidity@var4+1
  9381  0283  0828               	movf	?___aldiv,w
  9382  0284  00D8               	movwf	compensate_humidity@var4
  9383                           
  9384                           ;BME280_driver/bme280.c: 1285:     var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1))
      +                           / 16);
  9385  0285  3000               	movlw	0
  9386  0286  00AB               	movwf	___aldiv@divisor+3
  9387  0287  3000               	movlw	0
  9388  0288  00AA               	movwf	___aldiv@divisor+2
  9389  0289  3000               	movlw	0
  9390  028A  00A9               	movwf	___aldiv@divisor+1
  9391  028B  3010               	movlw	16
  9392  028C  00A8               	movwf	___aldiv@divisor
  9393  028D  0837               	movf	compensate_humidity@calib_data,w
  9394  028E  3E18               	addlw	24
  9395  028F  0086               	movwf	6
  9396  0290  3001               	movlw	1	; select bank2/3
  9397  0291  0087               	movwf	7
  9398  0292  0801               	movf	1,w
  9399  0293  00BB               	movwf	??_compensate_humidity
  9400  0294  01BC               	clrf	??_compensate_humidity+1
  9401  0295  01BD               	clrf	??_compensate_humidity+2
  9402  0296  01BE               	clrf	??_compensate_humidity+3
  9403  0297  083E               	movf	??_compensate_humidity+3,w
  9404  0298  00A3               	movwf	___lmul@multiplier+3
  9405  0299  083D               	movf	??_compensate_humidity+2,w
  9406  029A  00A2               	movwf	___lmul@multiplier+2
  9407  029B  083C               	movf	??_compensate_humidity+1,w
  9408  029C  00A1               	movwf	___lmul@multiplier+1
  9409  029D  083B               	movf	??_compensate_humidity,w
  9410  029E  00A0               	movwf	___lmul@multiplier
  9411  029F  085B               	movf	compensate_humidity@var4+3,w
  9412  02A0  00A7               	movwf	___lmul@multiplicand+3
  9413  02A1  085A               	movf	compensate_humidity@var4+2,w
  9414  02A2  00A6               	movwf	___lmul@multiplicand+2
  9415  02A3  0859               	movf	compensate_humidity@var4+1,w
  9416  02A4  00A5               	movwf	___lmul@multiplicand+1
  9417  02A5  0858               	movf	compensate_humidity@var4,w
  9418  02A6  00A4               	movwf	___lmul@multiplicand
  9419  02A7  3190  206F  3180   	fcall	___lmul
  9420  02AA  0823               	movf	?___lmul+3,w
  9421  02AB  00AF               	movwf	___aldiv@dividend+3
  9422  02AC  0822               	movf	?___lmul+2,w
  9423  02AD  00AE               	movwf	___aldiv@dividend+2
  9424  02AE  0821               	movf	?___lmul+1,w
  9425  02AF  00AD               	movwf	___aldiv@dividend+1
  9426  02B0  0820               	movf	?___lmul,w
  9427  02B1  00AC               	movwf	___aldiv@dividend
  9428  02B2  3193  23D9  3180   	fcall	___aldiv
  9429  02B5  0828               	movf	?___aldiv,w
  9430  02B6  0260               	subwf	compensate_humidity@var3,w
  9431  02B7  00BF               	movwf	??_compensate_humidity+4
  9432  02B8  0829               	movf	?___aldiv+1,w
  9433  02B9  3B61               	subwfb	compensate_humidity@var3+1,w
  9434  02BA  00C0               	movwf	??_compensate_humidity+5
  9435  02BB  082A               	movf	?___aldiv+2,w
  9436  02BC  3B62               	subwfb	compensate_humidity@var3+2,w
  9437  02BD  00C1               	movwf	??_compensate_humidity+6
  9438  02BE  082B               	movf	?___aldiv+3,w
  9439  02BF  3B63               	subwfb	compensate_humidity@var3+3,w
  9440  02C0  00C2               	movwf	??_compensate_humidity+7
  9441  02C1  0842               	movf	??_compensate_humidity+7,w
  9442  02C2  00DF               	movwf	compensate_humidity@var5+3
  9443  02C3  0841               	movf	??_compensate_humidity+6,w
  9444  02C4  00DE               	movwf	compensate_humidity@var5+2
  9445  02C5  0840               	movf	??_compensate_humidity+5,w
  9446  02C6  00DD               	movwf	compensate_humidity@var5+1
  9447  02C7  083F               	movf	??_compensate_humidity+4,w
  9448  02C8  00DC               	movwf	compensate_humidity@var5
  9449                           
  9450                           ;BME280_driver/bme280.c: 1286:     var5 = (var5 < 0 ? 0 : var5);
  9451  02C9  1FDF               	btfss	compensate_humidity@var5+3,7
  9452  02CA  2AD3               	goto	l3468
  9453  02CB  3000               	movlw	0
  9454  02CC  00DF               	movwf	compensate_humidity@var5+3
  9455  02CD  3000               	movlw	0
  9456  02CE  00DE               	movwf	compensate_humidity@var5+2
  9457  02CF  3000               	movlw	0
  9458  02D0  00DD               	movwf	compensate_humidity@var5+1
  9459  02D1  3000               	movlw	0
  9460  02D2  00DC               	movwf	compensate_humidity@var5
  9461  02D3                     l3468:	
  9462                           
  9463                           ;BME280_driver/bme280.c: 1287:     var5 = (var5 > 419430400 ? 419430400 : var5);
  9464  02D3  1BDF               	btfsc	compensate_humidity@var5+3,7
  9465  02D4  2AE7               	goto	l3474
  9466  02D5  3001               	movlw	1
  9467  02D6  025C               	subwf	compensate_humidity@var5,w
  9468  02D7  3000               	movlw	0
  9469  02D8  3B5D               	subwfb	compensate_humidity@var5+1,w
  9470  02D9  3000               	movlw	0
  9471  02DA  3B5E               	subwfb	compensate_humidity@var5+2,w
  9472  02DB  3019               	movlw	25
  9473  02DC  3B5F               	subwfb	compensate_humidity@var5+3,w
  9474  02DD  1C03               	btfss	3,0
  9475  02DE  2AE7               	goto	l3474
  9476  02DF  3019               	movlw	25
  9477  02E0  00DF               	movwf	compensate_humidity@var5+3
  9478  02E1  3000               	movlw	0
  9479  02E2  00DE               	movwf	compensate_humidity@var5+2
  9480  02E3  3000               	movlw	0
  9481  02E4  00DD               	movwf	compensate_humidity@var5+1
  9482  02E5  3000               	movlw	0
  9483  02E6  00DC               	movwf	compensate_humidity@var5
  9484  02E7                     l3474:	
  9485                           
  9486                           ;BME280_driver/bme280.c: 1288:     humidity = (uint32_t)(var5 / 4096);
  9487  02E7  3000               	movlw	0
  9488  02E8  00AB               	movwf	___aldiv@divisor+3
  9489  02E9  3000               	movlw	0
  9490  02EA  00AA               	movwf	___aldiv@divisor+2
  9491  02EB  3010               	movlw	16
  9492  02EC  00A9               	movwf	___aldiv@divisor+1
  9493  02ED  3000               	movlw	0
  9494  02EE  00A8               	movwf	___aldiv@divisor
  9495  02EF  085F               	movf	compensate_humidity@var5+3,w
  9496  02F0  00AF               	movwf	___aldiv@dividend+3
  9497  02F1  085E               	movf	compensate_humidity@var5+2,w
  9498  02F2  00AE               	movwf	___aldiv@dividend+2
  9499  02F3  085D               	movf	compensate_humidity@var5+1,w
  9500  02F4  00AD               	movwf	___aldiv@dividend+1
  9501  02F5  085C               	movf	compensate_humidity@var5,w
  9502  02F6  00AC               	movwf	___aldiv@dividend
  9503  02F7  3193  23D9  3180   	fcall	___aldiv
  9504  02FA  082B               	movf	?___aldiv+3,w
  9505  02FB  00CF               	movwf	compensate_humidity@humidity+3
  9506  02FC  082A               	movf	?___aldiv+2,w
  9507  02FD  00CE               	movwf	compensate_humidity@humidity+2
  9508  02FE  0829               	movf	?___aldiv+1,w
  9509  02FF  00CD               	movwf	compensate_humidity@humidity+1
  9510  0300  0828               	movf	?___aldiv,w
  9511  0301  00CC               	movwf	compensate_humidity@humidity
  9512                           
  9513                           ;BME280_driver/bme280.c: 1289:     if (humidity > humidity_max)
  9514  0302  084F               	movf	compensate_humidity@humidity+3,w
  9515  0303  1D03               	btfss	3,2
  9516  0304  2B0D               	goto	l3478
  9517  0305  3001               	movlw	1
  9518  0306  024C               	subwf	compensate_humidity@humidity,w
  9519  0307  3090               	movlw	144
  9520  0308  3B4D               	subwfb	compensate_humidity@humidity+1,w
  9521  0309  3001               	movlw	1
  9522  030A  3B4E               	subwfb	compensate_humidity@humidity+2,w
  9523  030B  1C03               	btfss	3,0
  9524  030C  2B15               	goto	l206
  9525  030D                     l3478:	
  9526                           
  9527                           ;BME280_driver/bme280.c: 1290:     {;BME280_driver/bme280.c: 1291:         humidity = hu
      +                          midity_max;
  9528  030D  3000               	movlw	0
  9529  030E  00CF               	movwf	compensate_humidity@humidity+3
  9530  030F  3001               	movlw	1
  9531  0310  00CE               	movwf	compensate_humidity@humidity+2
  9532  0311  3090               	movlw	144
  9533  0312  00CD               	movwf	compensate_humidity@humidity+1
  9534  0313  3000               	movlw	0
  9535  0314  00CC               	movwf	compensate_humidity@humidity
  9536  0315                     l206:	
  9537                           ;BME280_driver/bme280.c: 1292:     }
  9538                           
  9539                           
  9540                           ;BME280_driver/bme280.c: 1294:     return humidity;
  9541  0315  084F               	movf	compensate_humidity@humidity+3,w
  9542  0316  00BA               	movwf	?_compensate_humidity+3
  9543  0317  084E               	movf	compensate_humidity@humidity+2,w
  9544  0318  00B9               	movwf	?_compensate_humidity+2
  9545  0319  084D               	movf	compensate_humidity@humidity+1,w
  9546  031A  00B8               	movwf	?_compensate_humidity+1
  9547  031B  084C               	movf	compensate_humidity@humidity,w
  9548  031C  00B7               	movwf	?_compensate_humidity
  9549  031D  0008               	return
  9550  031E                     __end_of_compensate_humidity:	
  9551                           
  9552                           	psect	text27
  9553  106F                     __ptext27:	
  9554 ;; *************** function ___lmul *****************
  9555 ;; Defined at:
  9556 ;;		line 15 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\Umul32.c"
  9557 ;; Parameters:    Size  Location     Type
  9558 ;;  multiplier      4    0[BANK0 ] unsigned long 
  9559 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;  product         4    5[COMMON] unsigned long 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;                  4    0[BANK0 ] unsigned long 
  9564 ;; Registers used:
  9565 ;;		wreg, status,2, status,0
  9566 ;; Tracked objects:
  9567 ;;		On entry : 1F/0
  9568 ;;		On exit  : 1F/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9571 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;Total ram usage:       12 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    3
  9578 ;; This function calls:
  9579 ;;		Nothing
  9580 ;; This function is called by:
  9581 ;;		_compensate_temperature
  9582 ;;		_compensate_humidity
  9583 ;; This function uses a non-reentrant model
  9584 ;;
  9585                           
  9586                           
  9587                           ;psect for function ___lmul
  9588  106F                     ___lmul:	
  9589                           
  9590                           ;incstack = 0
  9591                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9592  106F  3000               	movlw	0
  9593  1070  00F8               	movwf	___lmul@product+3
  9594  1071  3000               	movlw	0
  9595  1072  00F7               	movwf	___lmul@product+2
  9596  1073  3000               	movlw	0
  9597  1074  00F6               	movwf	___lmul@product+1
  9598  1075  3000               	movlw	0
  9599  1076  00F5               	movwf	___lmul@product
  9600  1077                     l3196:	
  9601  1077  1C20               	btfss	___lmul@multiplier,0
  9602  1078  2881               	goto	l3200
  9603  1079  0824               	movf	___lmul@multiplicand,w
  9604  107A  07F5               	addwf	___lmul@product,f
  9605  107B  0825               	movf	___lmul@multiplicand+1,w
  9606  107C  3DF6               	addwfc	___lmul@product+1,f
  9607  107D  0826               	movf	___lmul@multiplicand+2,w
  9608  107E  3DF7               	addwfc	___lmul@product+2,f
  9609  107F  0827               	movf	___lmul@multiplicand+3,w
  9610  1080  3DF8               	addwfc	___lmul@product+3,f
  9611  1081                     l3200:	
  9612  1081  3001               	movlw	1
  9613  1082                     u2855:	
  9614  1082  35A4               	lslf	___lmul@multiplicand,f
  9615  1083  0DA5               	rlf	___lmul@multiplicand+1,f
  9616  1084  0DA6               	rlf	___lmul@multiplicand+2,f
  9617  1085  0DA7               	rlf	___lmul@multiplicand+3,f
  9618  1086  0B89               	decfsz	9,f
  9619  1087  2882               	goto	u2855
  9620  1088  3001               	movlw	1
  9621  1089                     u2865:	
  9622  1089  36A3               	lsrf	___lmul@multiplier+3,f
  9623  108A  0CA2               	rrf	___lmul@multiplier+2,f
  9624  108B  0CA1               	rrf	___lmul@multiplier+1,f
  9625  108C  0CA0               	rrf	___lmul@multiplier,f
  9626  108D  0B89               	decfsz	9,f
  9627  108E  2889               	goto	u2865
  9628  108F  0823               	movf	___lmul@multiplier+3,w
  9629  1090  0422               	iorwf	___lmul@multiplier+2,w
  9630  1091  0421               	iorwf	___lmul@multiplier+1,w
  9631  1092  0420               	iorwf	___lmul@multiplier,w
  9632  1093  1D03               	skipz
  9633  1094  2877               	goto	l3196
  9634  1095  0878               	movf	___lmul@product+3,w
  9635  1096  00A3               	movwf	?___lmul+3
  9636  1097  0877               	movf	___lmul@product+2,w
  9637  1098  00A2               	movwf	?___lmul+2
  9638  1099  0876               	movf	___lmul@product+1,w
  9639  109A  00A1               	movwf	?___lmul+1
  9640  109B  0875               	movf	___lmul@product,w
  9641  109C  00A0               	movwf	?___lmul
  9642  109D  0008               	return
  9643  109E                     __end_of___lmul:	
  9644                           
  9645                           	psect	text28
  9646  13D9                     __ptext28:	
  9647 ;; *************** function ___aldiv *****************
  9648 ;; Defined at:
  9649 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aldiv.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;  divisor         4    8[BANK0 ] long 
  9652 ;;  dividend        4   12[BANK0 ] long 
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  quotient        4   19[BANK0 ] long 
  9655 ;;  sign            1   18[BANK0 ] unsigned char 
  9656 ;;  counter         1   17[BANK0 ] unsigned char 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  4    8[BANK0 ] long 
  9659 ;; Registers used:
  9660 ;;		wreg, status,2, status,0
  9661 ;; Tracked objects:
  9662 ;;		On entry : 1F/0
  9663 ;;		On exit  : 1F/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9666 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9670 ;;Total ram usage:       15 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    3
  9673 ;; This function calls:
  9674 ;;		Nothing
  9675 ;; This function is called by:
  9676 ;;		_compensate_temperature
  9677 ;;		_compensate_humidity
  9678 ;; This function uses a non-reentrant model
  9679 ;;
  9680                           
  9681                           
  9682                           ;psect for function ___aldiv
  9683  13D9                     ___aldiv:	
  9684                           
  9685                           ;incstack = 0
  9686                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9687  13D9  01B2               	clrf	___aldiv@sign
  9688  13DA  1FAB               	btfss	___aldiv@divisor+3,7
  9689  13DB  2BE9               	goto	l853
  9690  13DC  09A8               	comf	___aldiv@divisor,f
  9691  13DD  09A9               	comf	___aldiv@divisor+1,f
  9692  13DE  09AA               	comf	___aldiv@divisor+2,f
  9693  13DF  09AB               	comf	___aldiv@divisor+3,f
  9694  13E0  0AA8               	incf	___aldiv@divisor,f
  9695  13E1  1903               	skipnz
  9696  13E2  0AA9               	incf	___aldiv@divisor+1,f
  9697  13E3  1903               	skipnz
  9698  13E4  0AAA               	incf	___aldiv@divisor+2,f
  9699  13E5  1903               	skipnz
  9700  13E6  0AAB               	incf	___aldiv@divisor+3,f
  9701  13E7  01B2               	clrf	___aldiv@sign
  9702  13E8  0AB2               	incf	___aldiv@sign,f
  9703  13E9                     l853:	
  9704  13E9  1FAF               	btfss	___aldiv@dividend+3,7
  9705  13EA  2BFA               	goto	l3228
  9706  13EB  09AC               	comf	___aldiv@dividend,f
  9707  13EC  09AD               	comf	___aldiv@dividend+1,f
  9708  13ED  09AE               	comf	___aldiv@dividend+2,f
  9709  13EE  09AF               	comf	___aldiv@dividend+3,f
  9710  13EF  0AAC               	incf	___aldiv@dividend,f
  9711  13F0  1903               	skipnz
  9712  13F1  0AAD               	incf	___aldiv@dividend+1,f
  9713  13F2  1903               	skipnz
  9714  13F3  0AAE               	incf	___aldiv@dividend+2,f
  9715  13F4  1903               	skipnz
  9716  13F5  0AAF               	incf	___aldiv@dividend+3,f
  9717  13F6  3001               	movlw	1
  9718  13F7  00B0               	movwf	??___aldiv
  9719  13F8  0830               	movf	??___aldiv,w
  9720  13F9  06B2               	xorwf	___aldiv@sign,f
  9721  13FA                     l3228:	
  9722  13FA  3000               	movlw	0
  9723  13FB  00B6               	movwf	___aldiv@quotient+3
  9724  13FC  3000               	movlw	0
  9725  13FD  00B5               	movwf	___aldiv@quotient+2
  9726  13FE  3000               	movlw	0
  9727  13FF  00B4               	movwf	___aldiv@quotient+1
  9728  1400  3000               	movlw	0
  9729  1401  00B3               	movwf	___aldiv@quotient
  9730  1402  082B               	movf	___aldiv@divisor+3,w
  9731  1403  042A               	iorwf	___aldiv@divisor+2,w
  9732  1404  0429               	iorwf	___aldiv@divisor+1,w
  9733  1405  0428               	iorwf	___aldiv@divisor,w
  9734  1406  1903               	skipnz
  9735  1407  2C43               	goto	l3250
  9736  1408  01B1               	clrf	___aldiv@counter
  9737  1409  0AB1               	incf	___aldiv@counter,f
  9738  140A                     l3236:	
  9739  140A  1BAB               	btfsc	___aldiv@divisor+3,7
  9740  140B  2C18               	goto	l3238
  9741  140C  3001               	movlw	1
  9742  140D                     u2945:	
  9743  140D  35A8               	lslf	___aldiv@divisor,f
  9744  140E  0DA9               	rlf	___aldiv@divisor+1,f
  9745  140F  0DAA               	rlf	___aldiv@divisor+2,f
  9746  1410  0DAB               	rlf	___aldiv@divisor+3,f
  9747  1411  0B89               	decfsz	9,f
  9748  1412  2C0D               	goto	u2945
  9749  1413  3001               	movlw	1
  9750  1414  00B0               	movwf	??___aldiv
  9751  1415  0830               	movf	??___aldiv,w
  9752  1416  07B1               	addwf	___aldiv@counter,f
  9753  1417  2C0A               	goto	l3236
  9754  1418                     l3238:	
  9755  1418  3001               	movlw	1
  9756  1419                     u2965:	
  9757  1419  35B3               	lslf	___aldiv@quotient,f
  9758  141A  0DB4               	rlf	___aldiv@quotient+1,f
  9759  141B  0DB5               	rlf	___aldiv@quotient+2,f
  9760  141C  0DB6               	rlf	___aldiv@quotient+3,f
  9761  141D  0B89               	decfsz	9,f
  9762  141E  2C19               	goto	u2965
  9763  141F  082B               	movf	___aldiv@divisor+3,w
  9764  1420  022F               	subwf	___aldiv@dividend+3,w
  9765  1421  1D03               	skipz
  9766  1422  2C2D               	goto	u2975
  9767  1423  082A               	movf	___aldiv@divisor+2,w
  9768  1424  022E               	subwf	___aldiv@dividend+2,w
  9769  1425  1D03               	skipz
  9770  1426  2C2D               	goto	u2975
  9771  1427  0829               	movf	___aldiv@divisor+1,w
  9772  1428  022D               	subwf	___aldiv@dividend+1,w
  9773  1429  1D03               	skipz
  9774  142A  2C2D               	goto	u2975
  9775  142B  0828               	movf	___aldiv@divisor,w
  9776  142C  022C               	subwf	___aldiv@dividend,w
  9777  142D                     u2975:	
  9778  142D  1C03               	skipc
  9779  142E  2C38               	goto	l3246
  9780  142F  0828               	movf	___aldiv@divisor,w
  9781  1430  02AC               	subwf	___aldiv@dividend,f
  9782  1431  0829               	movf	___aldiv@divisor+1,w
  9783  1432  3BAD               	subwfb	___aldiv@dividend+1,f
  9784  1433  082A               	movf	___aldiv@divisor+2,w
  9785  1434  3BAE               	subwfb	___aldiv@dividend+2,f
  9786  1435  082B               	movf	___aldiv@divisor+3,w
  9787  1436  3BAF               	subwfb	___aldiv@dividend+3,f
  9788  1437  1433               	bsf	___aldiv@quotient,0
  9789  1438                     l3246:	
  9790  1438  3001               	movlw	1
  9791  1439                     u2985:	
  9792  1439  36AB               	lsrf	___aldiv@divisor+3,f
  9793  143A  0CAA               	rrf	___aldiv@divisor+2,f
  9794  143B  0CA9               	rrf	___aldiv@divisor+1,f
  9795  143C  0CA8               	rrf	___aldiv@divisor,f
  9796  143D  0B89               	decfsz	9,f
  9797  143E  2C39               	goto	u2985
  9798  143F  3001               	movlw	1
  9799  1440  02B1               	subwf	___aldiv@counter,f
  9800  1441  1D03               	btfss	3,2
  9801  1442  2C18               	goto	l3238
  9802  1443                     l3250:	
  9803  1443  0832               	movf	___aldiv@sign,w
  9804  1444  1903               	btfsc	3,2
  9805  1445  2C51               	goto	l3254
  9806  1446  09B3               	comf	___aldiv@quotient,f
  9807  1447  09B4               	comf	___aldiv@quotient+1,f
  9808  1448  09B5               	comf	___aldiv@quotient+2,f
  9809  1449  09B6               	comf	___aldiv@quotient+3,f
  9810  144A  0AB3               	incf	___aldiv@quotient,f
  9811  144B  1903               	skipnz
  9812  144C  0AB4               	incf	___aldiv@quotient+1,f
  9813  144D  1903               	skipnz
  9814  144E  0AB5               	incf	___aldiv@quotient+2,f
  9815  144F  1903               	skipnz
  9816  1450  0AB6               	incf	___aldiv@quotient+3,f
  9817  1451                     l3254:	
  9818  1451  0836               	movf	___aldiv@quotient+3,w
  9819  1452  00AB               	movwf	?___aldiv+3
  9820  1453  0835               	movf	___aldiv@quotient+2,w
  9821  1454  00AA               	movwf	?___aldiv+2
  9822  1455  0834               	movf	___aldiv@quotient+1,w
  9823  1456  00A9               	movwf	?___aldiv+1
  9824  1457  0833               	movf	___aldiv@quotient,w
  9825  1458  00A8               	movwf	?___aldiv
  9826  1459  0008               	return
  9827  145A                     __end_of___aldiv:	
  9828                           
  9829                           	psect	text29
  9830  1EC3                     __ptext29:	
  9831 ;; *************** function _SYSTEM_Initialize *****************
  9832 ;; Defined at:
  9833 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;		None
  9836 ;; Auto vars:     Size  Location     Type
  9837 ;;		None
  9838 ;; Return value:  Size  Location     Type
  9839 ;;                  1    wreg      void 
  9840 ;; Registers used:
  9841 ;;		wreg, status,2, status,0, pclath, cstack
  9842 ;; Tracked objects:
  9843 ;;		On entry : B1F/0
  9844 ;;		On exit  : 1F/3
  9845 ;;		Unchanged: 0/0
  9846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;Total ram usage:        0 bytes
  9852 ;; Hardware stack levels used:    1
  9853 ;; Hardware stack levels required when called:    5
  9854 ;; This function calls:
  9855 ;;		_EUSART_Initialize
  9856 ;;		_I2C_Initialize
  9857 ;;		_OSCILLATOR_Initialize
  9858 ;;		_PIN_MANAGER_Initialize
  9859 ;;		_TMR0_Initialize
  9860 ;; This function is called by:
  9861 ;;		_main
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865                           
  9866                           ;psect for function _SYSTEM_Initialize
  9867  1EC3                     _SYSTEM_Initialize:	
  9868                           
  9869                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
  9870                           
  9871                           ;incstack = 0
  9872                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9873  1EC3  3188  2000  319E   	fcall	_PIN_MANAGER_Initialize
  9874                           
  9875                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
  9876  1EC6  319E  26A8  319E   	fcall	_OSCILLATOR_Initialize
  9877                           
  9878                           ;mcc_generated_files/mcc.c: 54:     I2C_Initialize();
  9879  1EC9  319F  270A  319E   	fcall	_I2C_Initialize
  9880                           
  9881                           ;mcc_generated_files/mcc.c: 55:     TMR0_Initialize();
  9882  1ECC  3190  2001  319E   	fcall	_TMR0_Initialize
  9883                           
  9884                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
  9885  1ECF  319E  26B8         	fcall	_EUSART_Initialize
  9886  1ED1  0008               	return
  9887  1ED2                     __end_of_SYSTEM_Initialize:	
  9888                           
  9889                           	psect	text30
  9890  1001                     __ptext30:	
  9891 ;; *************** function _TMR0_Initialize *****************
  9892 ;; Defined at:
  9893 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  9894 ;; Parameters:    Size  Location     Type
  9895 ;;		None
  9896 ;; Auto vars:     Size  Location     Type
  9897 ;;		None
  9898 ;; Return value:  Size  Location     Type
  9899 ;;                  1    wreg      void 
  9900 ;; Registers used:
  9901 ;;		wreg, status,2, status,0, pclath, cstack
  9902 ;; Tracked objects:
  9903 ;;		On entry : B1F/1
  9904 ;;		On exit  : 1F/2
  9905 ;;		Unchanged: 0/0
  9906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;Total ram usage:        1 bytes
  9912 ;; Hardware stack levels used:    1
  9913 ;; Hardware stack levels required when called:    4
  9914 ;; This function calls:
  9915 ;;		_TMR0_SetInterruptHandler
  9916 ;; This function is called by:
  9917 ;;		_SYSTEM_Initialize
  9918 ;; This function uses a non-reentrant model
  9919 ;;
  9920                           
  9921                           
  9922                           ;psect for function _TMR0_Initialize
  9923  1001                     _TMR0_Initialize:	
  9924                           
  9925                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
  9926                           
  9927                           ;incstack = 0
  9928                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9929  1001  0815               	movf	21,w	;volatile
  9930  1002  39C0               	andlw	192
  9931  1003  3812               	iorlw	18
  9932  1004  0095               	movwf	21	;volatile
  9933                           
  9934                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
  9935  1005  3083               	movlw	131
  9936  1006  0020               	movlb	0	; select bank0
  9937  1007  0095               	movwf	21	;volatile
  9938                           
  9939                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
  9940  1008  3083               	movlw	131
  9941  1009  00F7               	movwf	??_TMR0_Initialize
  9942  100A  0877               	movf	??_TMR0_Initialize,w
  9943  100B  0022               	movlb	2	; select bank2
  9944  100C  00E9               	movwf	_timer0ReloadVal^(0+256)	;volatile
  9945                           
  9946                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  9947  100D  110B               	bcf	11,2	;volatile
  9948                           
  9949                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  9950  100E  168B               	bsf	11,5	;volatile
  9951                           
  9952                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  9953  100F  3000               	movlw	low _TMR0_DefaultInterruptHandler
  9954  1010  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  9955  1011  3010               	movlw	high _TMR0_DefaultInterruptHandler
  9956  1012  00F6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  9957  1013  319E  269C         	fcall	_TMR0_SetInterruptHandler
  9958  1015  0008               	return
  9959  1016                     __end_of_TMR0_Initialize:	
  9960                           
  9961                           	psect	text31
  9962  1E9C                     __ptext31:	
  9963 ;; *************** function _TMR0_SetInterruptHandler *****************
  9964 ;; Defined at:
  9965 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;  InterruptHan    2    5[COMMON] PTR FTN()void 
  9968 ;;		 -> TimerISR(1), TMR0_DefaultInterruptHandler(1), 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  1    wreg      void 
  9973 ;; Registers used:
  9974 ;;		wreg
  9975 ;; Tracked objects:
  9976 ;;		On entry : 1E/3
  9977 ;;		On exit  : 1F/2
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9980 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;Total ram usage:        2 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    3
  9987 ;; This function calls:
  9988 ;;		Nothing
  9989 ;; This function is called by:
  9990 ;;		_TMR0_Initialize
  9991 ;;		_main
  9992 ;; This function uses a non-reentrant model
  9993 ;;
  9994                           
  9995                           
  9996                           ;psect for function _TMR0_SetInterruptHandler
  9997  1E9C                     _TMR0_SetInterruptHandler:	
  9998                           
  9999                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
 10000                           
 10001                           ;incstack = 0
 10002                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 10003  1E9C  0876               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 10004  1E9D  0022               	movlb	2	; select bank2
 10005  1E9E  00E8               	movwf	(_TMR0_InterruptHandler+1)^(0+256)
 10006  1E9F  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 10007  1EA0  00E7               	movwf	_TMR0_InterruptHandler^(0+256)
 10008  1EA1  0008               	return
 10009  1EA2                     __end_of_TMR0_SetInterruptHandler:	
 10010                           
 10011                           	psect	text32
 10012  0800                     __ptext32:	
 10013 ;; *************** function _PIN_MANAGER_Initialize *****************
 10014 ;; Defined at:
 10015 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 10016 ;; Parameters:    Size  Location     Type
 10017 ;;		None
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;		None
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  1    wreg      void 
 10022 ;; Registers used:
 10023 ;;		wreg, status,2
 10024 ;; Tracked objects:
 10025 ;;		On entry : B1F/0
 10026 ;;		On exit  : B1F/1C
 10027 ;;		Unchanged: B00/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;Total ram usage:        0 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    3
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_SYSTEM_Initialize
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           
 10044                           ;psect for function _PIN_MANAGER_Initialize
 10045  0800                     _PIN_MANAGER_Initialize:	
 10046                           
 10047                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 10048                           
 10049                           ;incstack = 0
 10050                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 10051  0800  0022               	movlb	2	; select bank2
 10052  0801  018C               	clrf	12	;volatile
 10053                           
 10054                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 10055  0802  018D               	clrf	13	;volatile
 10056                           
 10057                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 10058  0803  018E               	clrf	14	;volatile
 10059                           
 10060                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x03;
 10061  0804  3003               	movlw	3
 10062  0805  0021               	movlb	1	; select bank1
 10063  0806  008C               	movwf	12	;volatile
 10064                           
 10065                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x70;
 10066  0807  3070               	movlw	112
 10067  0808  008D               	movwf	13	;volatile
 10068                           
 10069                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xDF;
 10070  0809  30DF               	movlw	223
 10071  080A  008E               	movwf	14	;volatile
 10072                           
 10073                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x4F;
 10074  080B  304F               	movlw	79
 10075  080C  0023               	movlb	3	; select bank3
 10076  080D  008E               	movwf	14	;volatile
 10077                           
 10078                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x80;
 10079  080E  3080               	movlw	128
 10080  080F  008D               	movwf	13	;volatile
 10081                           
 10082                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x03;
 10083  0810  3003               	movlw	3
 10084  0811  008C               	movwf	12	;volatile
 10085                           
 10086                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 10087  0812  0024               	movlb	4	; select bank4
 10088  0813  018D               	clrf	13	;volatile
 10089                           
 10090                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 10091  0814  018C               	clrf	12	;volatile
 10092                           
 10093                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
 10094  0815  018E               	clrf	14	;volatile
 10095                           
 10096                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 1;
 10097  0816  0021               	movlb	1	; select bank1
 10098  0817  1795               	bsf	21,7	;volatile
 10099                           
 10100                           ;mcc_generated_files/pin_manager.c: 91:     ODCONA = 0x00;
 10101  0818  0025               	movlb	5	; select bank5
 10102  0819  018C               	clrf	12	;volatile
 10103                           
 10104                           ;mcc_generated_files/pin_manager.c: 92:     ODCONB = 0x00;
 10105  081A  018D               	clrf	13	;volatile
 10106                           
 10107                           ;mcc_generated_files/pin_manager.c: 93:     ODCONC = 0x00;
 10108  081B  018E               	clrf	14	;volatile
 10109                           
 10110                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONA = 0x37;
 10111  081C  3037               	movlw	55
 10112  081D  0026               	movlb	6	; select bank6
 10113  081E  008C               	movwf	12	;volatile
 10114                           
 10115                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONB = 0xF0;
 10116  081F  30F0               	movlw	240
 10117  0820  008D               	movwf	13	;volatile
 10118                           
 10119                           ;mcc_generated_files/pin_manager.c: 100:     SLRCONC = 0xFF;
 10120  0821  30FF               	movlw	255
 10121  0822  008E               	movwf	14	;volatile
 10122                           
 10123                           ;mcc_generated_files/pin_manager.c: 109:     RXPPS = 0x0D;
 10124  0823  300D               	movlw	13
 10125  0824  003C               	movlb	28	; select bank28
 10126  0825  00A4               	movwf	36	;volatile
 10127                           
 10128                           ;mcc_generated_files/pin_manager.c: 110:     SSPDATPPS = 0x0C;
 10129  0826  300C               	movlw	12
 10130  0827  00A1               	movwf	33	;volatile
 10131                           
 10132                           ;mcc_generated_files/pin_manager.c: 111:     RB6PPS = 0x10;
 10133  0828  3010               	movlw	16
 10134  0829  003D               	movlb	29	; select bank29
 10135  082A  009E               	movwf	30	;volatile
 10136                           
 10137                           ;mcc_generated_files/pin_manager.c: 112:     RB7PPS = 0x12;
 10138  082B  3012               	movlw	18
 10139  082C  009F               	movwf	31	;volatile
 10140                           
 10141                           ;mcc_generated_files/pin_manager.c: 113:     RB4PPS = 0x11;
 10142  082D  3011               	movlw	17
 10143  082E  009C               	movwf	28	;volatile
 10144                           
 10145                           ;mcc_generated_files/pin_manager.c: 114:     SSPCLKPPS = 0x0E;
 10146  082F  300E               	movlw	14
 10147  0830  003C               	movlb	28	; select bank28
 10148  0831  00A0               	movwf	32	;volatile
 10149  0832  0008               	return
 10150  0833                     __end_of_PIN_MANAGER_Initialize:	
 10151                           
 10152                           	psect	text33
 10153  1EA8                     __ptext33:	
 10154 ;; *************** function _OSCILLATOR_Initialize *****************
 10155 ;; Defined at:
 10156 ;;		line 59 in file "mcc_generated_files/mcc.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;		None
 10159 ;; Auto vars:     Size  Location     Type
 10160 ;;		None
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  1    wreg      void 
 10163 ;; Registers used:
 10164 ;;		wreg, status,2
 10165 ;; Tracked objects:
 10166 ;;		On entry : B1F/1C
 10167 ;;		On exit  : B1F/2
 10168 ;;		Unchanged: B00/0
 10169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10174 ;;Total ram usage:        0 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; Hardware stack levels required when called:    3
 10177 ;; This function calls:
 10178 ;;		Nothing
 10179 ;; This function is called by:
 10180 ;;		_SYSTEM_Initialize
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           
 10185                           ;psect for function _OSCILLATOR_Initialize
 10186  1EA8                     _OSCILLATOR_Initialize:	
 10187                           
 10188                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x68;
 10189                           
 10190                           ;incstack = 0
 10191                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10192  1EA8  3068               	movlw	104
 10193  1EA9  0021               	movlb	1	; select bank1
 10194  1EAA  0099               	movwf	25	;volatile
 10195                           
 10196                           ;mcc_generated_files/mcc.c: 64:     OSCTUNE = 0x00;
 10197  1EAB  0198               	clrf	24	;volatile
 10198                           
 10199                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
 10200  1EAC  0022               	movlb	2	; select bank2
 10201  1EAD  0196               	clrf	22	;volatile
 10202  1EAE  0008               	return
 10203  1EAF                     __end_of_OSCILLATOR_Initialize:	
 10204                           
 10205                           	psect	text34
 10206  1F0A                     __ptext34:	
 10207 ;; *************** function _I2C_Initialize *****************
 10208 ;; Defined at:
 10209 ;;		line 198 in file "mcc_generated_files/i2c.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;		None
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;		None
 10214 ;; Return value:  Size  Location     Type
 10215 ;;                  1    wreg      void 
 10216 ;; Registers used:
 10217 ;;		wreg, status,2
 10218 ;; Tracked objects:
 10219 ;;		On entry : B1F/2
 10220 ;;		On exit  : B1F/1
 10221 ;;		Unchanged: B00/0
 10222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;Total ram usage:        1 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    3
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_SYSTEM_Initialize
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function _I2C_Initialize
 10239  1F0A                     _I2C_Initialize:	
 10240                           
 10241                           ;mcc_generated_files/i2c.c: 200:     i2c_object.pTrHead = i2c_tr_queue;
 10242                           
 10243                           ;incstack = 0
 10244                           ; Regs used in _I2C_Initialize: [wreg+status,2]
 10245  1F0A  304B               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
 10246  1F0B  00F5               	movwf	??_I2C_Initialize
 10247  1F0C  0875               	movf	??_I2C_Initialize,w
 10248  1F0D  00B3               	movwf	(low ((_i2c_object| (0+256)+1)))^0
 10249                           
 10250                           ;mcc_generated_files/i2c.c: 201:     i2c_object.pTrTail = i2c_tr_queue;
 10251  1F0E  304B               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
 10252  1F0F  00F5               	movwf	??_I2C_Initialize
 10253  1F10  0875               	movf	??_I2C_Initialize,w
 10254  1F11  00B2               	movwf	_i2c_object^(0+256)
 10255                           
 10256                           ;mcc_generated_files/i2c.c: 202:     i2c_object.trStatus.s.empty = 1;
 10257  1F12  14B4               	bsf	(_i2c_object^(0+256)+2),1
 10258                           
 10259                           ;mcc_generated_files/i2c.c: 203:     i2c_object.trStatus.s.full = 0;
 10260  1F13  1034               	bcf	(_i2c_object^(0+256)+2),0
 10261                           
 10262                           ;mcc_generated_files/i2c.c: 205:     i2c_object.i2cErrors = 0;
 10263  1F14  01B6               	clrf	(_i2c_object^(0+256)+4)
 10264                           
 10265                           ;mcc_generated_files/i2c.c: 208:     SSP1STAT = 0x00;
 10266  1F15  0024               	movlb	4	; select bank4
 10267  1F16  0194               	clrf	20	;volatile
 10268                           
 10269                           ;mcc_generated_files/i2c.c: 210:     SSP1CON1 = 0x28;
 10270  1F17  3028               	movlw	40
 10271  1F18  0095               	movwf	21	;volatile
 10272                           
 10273                           ;mcc_generated_files/i2c.c: 212:     SSP1CON3 = 0x00;
 10274  1F19  0197               	clrf	23	;volatile
 10275                           
 10276                           ;mcc_generated_files/i2c.c: 214:     SSP1ADD = 0x03;
 10277  1F1A  3003               	movlw	3
 10278  1F1B  0092               	movwf	18	;volatile
 10279                           
 10280                           ;mcc_generated_files/i2c.c: 217:     PIR1bits.SSP1IF = 0;
 10281  1F1C  0020               	movlb	0	; select bank0
 10282  1F1D  1190               	bcf	16,3	;volatile
 10283                           
 10284                           ;mcc_generated_files/i2c.c: 218:     PIR2bits.BCL1IF = 0;
 10285  1F1E  1191               	bcf	17,3	;volatile
 10286                           
 10287                           ;mcc_generated_files/i2c.c: 221:     PIE1bits.SSP1IE = 1;
 10288  1F1F  0021               	movlb	1	; select bank1
 10289  1F20  1590               	bsf	16,3	;volatile
 10290                           
 10291                           ;mcc_generated_files/i2c.c: 222:     PIE2bits.BCL1IE = 1;
 10292  1F21  1591               	bsf	17,3	;volatile
 10293  1F22  0008               	return
 10294  1F23                     __end_of_I2C_Initialize:	
 10295                           
 10296                           	psect	text35
 10297  1EB8                     __ptext35:	
 10298 ;; *************** function _EUSART_Initialize *****************
 10299 ;; Defined at:
 10300 ;;		line 56 in file "mcc_generated_files/eusart.c"
 10301 ;; Parameters:    Size  Location     Type
 10302 ;;		None
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;		None
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  1    wreg      void 
 10307 ;; Registers used:
 10308 ;;		wreg, status,2
 10309 ;; Tracked objects:
 10310 ;;		On entry : 1F/2
 10311 ;;		On exit  : 1F/3
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;Total ram usage:        0 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    3
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_SYSTEM_Initialize
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           
 10329                           ;psect for function _EUSART_Initialize
 10330  1EB8                     _EUSART_Initialize:	
 10331                           
 10332                           ;mcc_generated_files/eusart.c: 61:     BAUD1CON = 0x08;
 10333                           
 10334                           ;incstack = 0
 10335                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 10336  1EB8  3008               	movlw	8
 10337  1EB9  0023               	movlb	3	; select bank3
 10338  1EBA  009F               	movwf	31	;volatile
 10339                           
 10340                           ;mcc_generated_files/eusart.c: 64:     RC1STA = 0x90;
 10341  1EBB  3090               	movlw	144
 10342  1EBC  009D               	movwf	29	;volatile
 10343                           
 10344                           ;mcc_generated_files/eusart.c: 67:     TX1STA = 0x24;
 10345  1EBD  3024               	movlw	36
 10346  1EBE  009E               	movwf	30	;volatile
 10347                           
 10348                           ;mcc_generated_files/eusart.c: 70:     SPBRGL = 0x67;
 10349  1EBF  3067               	movlw	103
 10350  1EC0  009B               	movwf	27	;volatile
 10351                           
 10352                           ;mcc_generated_files/eusart.c: 73:     SPBRGH = 0x00;
 10353  1EC1  019C               	clrf	28	;volatile
 10354  1EC2  0008               	return
 10355  1EC3                     __end_of_EUSART_Initialize:	
 10356                           
 10357                           	psect	text36
 10358  1016                     __ptext36:	
 10359 ;; *************** function _FlashError *****************
 10360 ;; Defined at:
 10361 ;;		line 27 in file "main.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;		None
 10364 ;; Auto vars:     Size  Location     Type
 10365 ;;  i               2    7[COMMON] int 
 10366 ;; Return value:  Size  Location     Type
 10367 ;;                  1    wreg      void 
 10368 ;; Registers used:
 10369 ;;		wreg, status,2
 10370 ;; Tracked objects:
 10371 ;;		On entry : 0/0
 10372 ;;		On exit  : 0/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;Total ram usage:        4 bytes
 10380 ;; Hardware stack levels used:    1
 10381 ;; Hardware stack levels required when called:    3
 10382 ;; This function calls:
 10383 ;;		Nothing
 10384 ;; This function is called by:
 10385 ;;		_main
 10386 ;; This function uses a non-reentrant model
 10387 ;;
 10388                           
 10389                           
 10390                           ;psect for function _FlashError
 10391  1016                     _FlashError:	
 10392                           
 10393                           ;main.c: 29:     for (int i = 0; i < 3; i++)
 10394                           
 10395                           ;incstack = 0
 10396                           ; Regs used in _FlashError: [wreg+status,2]
 10397  1016  01F7               	clrf	FlashError@i
 10398  1017  01F8               	clrf	FlashError@i+1
 10399  1018                     l466:	
 10400                           ;main.c: 30:     {;main.c: 31:         do { LATCbits.LATC5 = 1; } while(0);
 10401                           
 10402  1018  0022               	movlb	2	; select bank2
 10403  1019  168E               	bsf	14,5	;volatile
 10404                           
 10405                           ;main.c: 32:         _delay((unsigned long)((250)*(4000000/4000.0)));
 10406  101A  3002               	movlw	2
 10407  101B  00F6               	movwf	??_FlashError+1
 10408  101C  3045               	movlw	69
 10409  101D  00F5               	movwf	??_FlashError
 10410  101E  30AA               	movlw	170
 10411  101F                     u3987:	
 10412  101F  0B89               	decfsz	9,f
 10413  1020  281F               	goto	u3987
 10414  1021  0BF5               	decfsz	??_FlashError,f
 10415  1022  281F               	goto	u3987
 10416  1023  0BF6               	decfsz	??_FlashError+1,f
 10417  1024  281F               	goto	u3987
 10418  1025  0022               	movlb	2	; select bank2
 10419  1026  128E               	bcf	14,5	;volatile
 10420                           
 10421                           ;main.c: 34:         _delay((unsigned long)((250)*(4000000/4000.0)));
 10422  1027  3002               	movlw	2
 10423  1028  00F6               	movwf	??_FlashError+1
 10424  1029  3045               	movlw	69
 10425  102A  00F5               	movwf	??_FlashError
 10426  102B  30AA               	movlw	170
 10427  102C                     u3997:	
 10428  102C  0B89               	decfsz	9,f
 10429  102D  282C               	goto	u3997
 10430  102E  0BF5               	decfsz	??_FlashError,f
 10431  102F  282C               	goto	u3997
 10432  1030  0BF6               	decfsz	??_FlashError+1,f
 10433  1031  282C               	goto	u3997
 10434                           
 10435                           ;main.c: 35:     }
 10436  1032  3001               	movlw	1
 10437  1033  07F7               	addwf	FlashError@i,f
 10438  1034  3000               	movlw	0
 10439  1035  3DF8               	addwfc	FlashError@i+1,f
 10440  1036  0878               	movf	FlashError@i+1,w
 10441  1037  3A80               	xorlw	128
 10442  1038  00F5               	movwf	??_FlashError
 10443  1039  3080               	movlw	128
 10444  103A  0275               	subwf	??_FlashError,w
 10445  103B  1D03               	skipz
 10446  103C  283F               	goto	u2575
 10447  103D  3003               	movlw	3
 10448  103E  0277               	subwf	FlashError@i,w
 10449  103F                     u2575:	
 10450  103F  1803               	btfsc	3,0
 10451  1040  0008               	return
 10452  1041  2818               	goto	l466
 10453  1042                     __end_of_FlashError:	
 10454                           
 10455                           	psect	text37
 10456  1F88                     __ptext37:	
 10457 ;; *************** function _ClearString *****************
 10458 ;; Defined at:
 10459 ;;		line 39 in file "main.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;  str             2    0[BANK0 ] PTR unsigned char 
 10462 ;;		 -> message_end(73), message_start(70), 
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;  i               2    5[BANK0 ] int 
 10465 ;;  counti          2    3[BANK0 ] int 
 10466 ;; Return value:  Size  Location     Type
 10467 ;;                  1    wreg      void 
 10468 ;; Registers used:
 10469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10470 ;; Tracked objects:
 10471 ;;		On entry : 1F/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10475 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;Total ram usage:        7 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    4
 10482 ;; This function calls:
 10483 ;;		_strlen
 10484 ;; This function is called by:
 10485 ;;		_main
 10486 ;; This function uses a non-reentrant model
 10487 ;;
 10488                           
 10489                           
 10490                           ;psect for function _ClearString
 10491  1F88                     _ClearString:	
 10492                           
 10493                           ;main.c: 39: void ClearString(char* str);main.c: 40: {;main.c: 41:     for (int i = 0, c
      +                          ounti = strlen(str); i < counti; i++)
 10494                           
 10495                           ;incstack = 0
 10496                           ; Regs used in _ClearString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10497  1F88  01A5               	clrf	ClearString@i
 10498  1F89  01A6               	clrf	ClearString@i+1
 10499  1F8A  0821               	movf	ClearString@str+1,w
 10500  1F8B  00F6               	movwf	strlen@s+1
 10501  1F8C  0820               	movf	ClearString@str,w
 10502  1F8D  00F5               	movwf	strlen@s
 10503  1F8E  319E  26F3  319F   	fcall	_strlen
 10504  1F91  0876               	movf	?_strlen+1,w
 10505  1F92  00A4               	movwf	ClearString@counti+1
 10506  1F93  0875               	movf	?_strlen,w
 10507  1F94  00A3               	movwf	ClearString@counti
 10508  1F95                     l3770:	
 10509  1F95  0826               	movf	ClearString@i+1,w
 10510  1F96  3A80               	xorlw	128
 10511  1F97  00A2               	movwf	??_ClearString
 10512  1F98  0824               	movf	ClearString@counti+1,w
 10513  1F99  3A80               	xorlw	128
 10514  1F9A  0222               	subwf	??_ClearString,w
 10515  1F9B  1D03               	skipz
 10516  1F9C  2F9F               	goto	u3875
 10517  1F9D  0823               	movf	ClearString@counti,w
 10518  1F9E  0225               	subwf	ClearString@i,w
 10519  1F9F                     u3875:	
 10520  1F9F  1803               	btfsc	3,0
 10521  1FA0  0008               	return
 10522                           
 10523                           ;main.c: 42:     {;main.c: 43:         str[i] = '\0';
 10524  1FA1  0020               	movlb	0	; select bank0
 10525  1FA2  0825               	movf	ClearString@i,w
 10526  1FA3  0720               	addwf	ClearString@str,w
 10527  1FA4  0086               	movwf	6
 10528  1FA5  0826               	movf	ClearString@i+1,w
 10529  1FA6  3D21               	addwfc	ClearString@str+1,w
 10530  1FA7  0087               	movwf	7
 10531  1FA8  0181               	clrf	1
 10532                           
 10533                           ;main.c: 44:     }
 10534  1FA9  3001               	movlw	1
 10535  1FAA  07A5               	addwf	ClearString@i,f
 10536  1FAB  3000               	movlw	0
 10537  1FAC  3DA6               	addwfc	ClearString@i+1,f
 10538  1FAD  2F95               	goto	l3770
 10539  1FAE                     __end_of_ClearString:	
 10540                           
 10541                           	psect	text38
 10542  1EF3                     __ptext38:	
 10543 ;; *************** function _strlen *****************
 10544 ;; Defined at:
 10545 ;;		line 12 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strlen.c"
 10546 ;; Parameters:    Size  Location     Type
 10547 ;;  s               2    5[COMMON] PTR const unsigned char 
 10548 ;;		 -> message_end(73), message_start(70), 
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;  a               2    7[COMMON] PTR const unsigned char 
 10551 ;;		 -> message_end(73), message_start(70), 
 10552 ;; Return value:  Size  Location     Type
 10553 ;;                  2    5[COMMON] unsigned int 
 10554 ;; Registers used:
 10555 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10556 ;; Tracked objects:
 10557 ;;		On entry : 1F/0
 10558 ;;		On exit  : 1F/0
 10559 ;;		Unchanged: 1F/0
 10560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10561 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;Total ram usage:        4 bytes
 10566 ;; Hardware stack levels used:    1
 10567 ;; Hardware stack levels required when called:    3
 10568 ;; This function calls:
 10569 ;;		Nothing
 10570 ;; This function is called by:
 10571 ;;		_ClearString
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           
 10576                           ;psect for function _strlen
 10577  1EF3                     _strlen:	
 10578                           
 10579                           ;incstack = 0
 10580                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 10581  1EF3  0876               	movf	strlen@s+1,w
 10582  1EF4  00F8               	movwf	strlen@a+1
 10583  1EF5  0875               	movf	strlen@s,w
 10584  1EF6  00F7               	movwf	strlen@a
 10585  1EF7                     l3552:	
 10586  1EF7  0875               	movf	strlen@s,w
 10587  1EF8  0086               	movwf	6
 10588  1EF9  0876               	movf	strlen@s+1,w
 10589  1EFA  0087               	movwf	7
 10590  1EFB  0801               	movf	1,w
 10591  1EFC  1903               	btfsc	3,2
 10592  1EFD  2F03               	goto	l3554
 10593  1EFE  3001               	movlw	1
 10594  1EFF  07F5               	addwf	strlen@s,f
 10595  1F00  3000               	movlw	0
 10596  1F01  3DF6               	addwfc	strlen@s+1,f
 10597  1F02  2EF7               	goto	l3552
 10598  1F03                     l3554:	
 10599  1F03  0877               	movf	strlen@a,w
 10600  1F04  0275               	subwf	strlen@s,w
 10601  1F05  00F5               	movwf	?_strlen
 10602  1F06  0878               	movf	strlen@a+1,w
 10603  1F07  3B76               	subwfb	strlen@s+1,w
 10604  1F08  00F6               	movwf	?_strlen+1
 10605  1F09  0008               	return
 10606  1F0A                     __end_of_strlen:	
 10607                           
 10608                           	psect	intentry
 10609  0004                     __pintentry:	
 10610 ;; *************** function _INTERRUPT_InterruptManager *****************
 10611 ;; Defined at:
 10612 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;		None
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;		None
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      void 
 10619 ;; Registers used:
 10620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;Total ram usage:        0 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    2
 10633 ;; This function calls:
 10634 ;;		_I2C_BusCollisionISR
 10635 ;;		_I2C_ISR
 10636 ;;		_TMR0_ISR
 10637 ;; This function is called by:
 10638 ;;		Interrupt level 1
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642  0004                     _INTERRUPT_InterruptManager:	
 10643                           
 10644                           ;incstack = 0
 10645  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10646                           
 10647                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10648  0005  3180               	pagesel	$
 10649                           
 10650                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 10651  0006  1A8B               	btfsc	11,5	;volatile
 10652  0007  1D0B               	btfss	11,2	;volatile
 10653  0008  280D               	goto	i1l390
 10654                           
 10655                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 10656  0009  319E  26D2  3180   	fcall	_TMR0_ISR
 10657                           
 10658                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 10659  000C  2821               	goto	i1l398
 10660  000D                     i1l390:	
 10661                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 10662                           
 10663  000D  1F0B               	btfss	11,6	;volatile
 10664  000E  2821               	goto	i1l398
 10665                           
 10666                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 10667  000F  0021               	movlb	1	; select bank1
 10668  0010  1D91               	btfss	17,3	;volatile
 10669  0011  2819               	goto	i1l393
 10670  0012  0020               	movlb	0	; select bank0
 10671  0013  1D91               	btfss	17,3	;volatile
 10672  0014  2819               	goto	i1l393
 10673                           
 10674                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             I2C_BusCollisionISR();
 10675  0015  3180  2002  3180   	fcall	_I2C_BusCollisionISR
 10676                           
 10677                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 10678  0018  2821               	goto	i1l398
 10679  0019                     i1l393:	
 10680                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 10681                           
 10682  0019  0021               	movlb	1	; select bank1
 10683  001A  1D90               	btfss	16,3	;volatile
 10684  001B  2821               	goto	i1l398
 10685  001C  0020               	movlb	0	; select bank0
 10686  001D  1D90               	btfss	16,3	;volatile
 10687  001E  2821               	goto	i1l398
 10688                           
 10689                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             I2C_ISR();
 10690  001F  3184  24C0         	fcall	_I2C_ISR
 10691  0021                     i1l398:	
 10692                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 10693                           
 10694                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 10695                           
 10696  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10697  0022  0009               	retfie
 10698  0023                     __end_of_INTERRUPT_InterruptManager:	
 10699                           
 10700                           	psect	text40
 10701  1ED2                     __ptext40:	
 10702 ;; *************** function _TMR0_ISR *****************
 10703 ;; Defined at:
 10704 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;		None
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;		None
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      void 
 10711 ;; Registers used:
 10712 ;;		wreg, status,2, status,0, pclath, cstack
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;Total ram usage:        0 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    1
 10725 ;; This function calls:
 10726 ;;		Absolute function
 10727 ;;		_TMR0_DefaultInterruptHandler
 10728 ;;		_TimerISR
 10729 ;; This function is called by:
 10730 ;;		_INTERRUPT_InterruptManager
 10731 ;; This function uses a non-reentrant model
 10732 ;;
 10733                           
 10734                           
 10735                           ;psect for function _TMR0_ISR
 10736  1ED2                     _TMR0_ISR:	
 10737                           
 10738                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 10739                           
 10740                           ;incstack = 0
 10741                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 10742  1ED2  110B               	bcf	11,2	;volatile
 10743                           
 10744                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 10745  1ED3  0022               	movlb	2	; select bank2
 10746  1ED4  0869               	movf	_timer0ReloadVal^(0+256),w	;volatile
 10747  1ED5  0020               	movlb	0	; select bank0
 10748  1ED6  0095               	movwf	21	;volatile
 10749                           
 10750                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
 10751  1ED7  0022               	movlb	2	; select bank2
 10752  1ED8  0867               	movf	_TMR0_InterruptHandler^(0+256),w
 10753  1ED9  0468               	iorwf	(_TMR0_InterruptHandler+1)^(0+256),w
 10754  1EDA  1903               	btfsc	3,2
 10755  1EDB  0008               	return
 10756                           
 10757                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
 10758  1EDC  0868               	movf	(_TMR0_InterruptHandler+1)^(0+256),w
 10759  1EDD  008A               	movwf	10
 10760  1EDE  0867               	movf	_TMR0_InterruptHandler^(0+256),w
 10761  1EDF  000A               	callw
 10762  1EE0  319E               	pagesel	$
 10763  1EE1  0008               	return
 10764  1EE2                     __end_of_TMR0_ISR:	
 10765                           
 10766                           	psect	text41
 10767  1000                     __ptext41:	
 10768 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 10769 ;; Defined at:
 10770 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;		None
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;		None
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		None
 10779 ;; Tracked objects:
 10780 ;;		On entry : 1F/2
 10781 ;;		On exit  : 1F/2
 10782 ;;		Unchanged: 1F/0
 10783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;Total ram usage:        0 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; This function calls:
 10791 ;;		Nothing
 10792 ;; This function is called by:
 10793 ;;		_TMR0_Initialize
 10794 ;;		_TMR0_ISR
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           
 10799                           ;psect for function _TMR0_DefaultInterruptHandler
 10800  1000                     _TMR0_DefaultInterruptHandler:	
 10801                           
 10802                           ;incstack = 0
 10803                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 10804  1000  0008               	return
 10805  1001                     __end_of_TMR0_DefaultInterruptHandler:	
 10806                           
 10807                           	psect	text42
 10808  1EAF                     __ptext42:	
 10809 ;; *************** function _TimerISR *****************
 10810 ;; Defined at:
 10811 ;;		line 10 in file "main.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;		None
 10814 ;; Auto vars:     Size  Location     Type
 10815 ;;		None
 10816 ;; Return value:  Size  Location     Type
 10817 ;;                  1    wreg      void 
 10818 ;; Registers used:
 10819 ;;		wreg
 10820 ;; Tracked objects:
 10821 ;;		On entry : 1F/2
 10822 ;;		On exit  : 1F/2
 10823 ;;		Unchanged: 0/0
 10824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;Total ram usage:        0 bytes
 10830 ;; Hardware stack levels used:    1
 10831 ;; This function calls:
 10832 ;;		Nothing
 10833 ;; This function is called by:
 10834 ;;		_main
 10835 ;;		_TMR0_ISR
 10836 ;; This function uses a non-reentrant model
 10837 ;;
 10838                           
 10839                           
 10840                           ;psect for function _TimerISR
 10841  1EAF                     _TimerISR:	
 10842                           
 10843                           ;main.c: 12:     ticks++;
 10844                           
 10845                           ;incstack = 0
 10846                           ; Regs used in _TimerISR: [wreg]
 10847  1EAF  3001               	movlw	1
 10848  1EB0  07B7               	addwf	_ticks^(0+256),f
 10849  1EB1  3000               	movlw	0
 10850  1EB2  3DB8               	addwfc	(_ticks+1)^(0+256),f
 10851  1EB3  3000               	movlw	0
 10852  1EB4  3DB9               	addwfc	(_ticks+2)^(0+256),f
 10853  1EB5  3000               	movlw	0
 10854  1EB6  3DBA               	addwfc	(_ticks+3)^(0+256),f
 10855  1EB7  0008               	return
 10856  1EB8                     __end_of_TimerISR:	
 10857                           
 10858                           	psect	text43
 10859  04C0                     __ptext43:	
 10860 ;; *************** function _I2C_ISR *****************
 10861 ;; Defined at:
 10862 ;;		line 235 in file "mcc_generated_files/i2c.c"
 10863 ;; Parameters:    Size  Location     Type
 10864 ;;		None
 10865 ;; Auto vars:     Size  Location     Type
 10866 ;;		None
 10867 ;; Return value:  Size  Location     Type
 10868 ;;                  1    wreg      void 
 10869 ;; Registers used:
 10870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10871 ;; Tracked objects:
 10872 ;;		On entry : 1F/0
 10873 ;;		On exit  : 19/0
 10874 ;;		Unchanged: 0/0
 10875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10879 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;Total ram usage:        2 bytes
 10881 ;; Hardware stack levels used:    1
 10882 ;; Hardware stack levels required when called:    1
 10883 ;; This function calls:
 10884 ;;		_I2C_FunctionComplete
 10885 ;;		_I2C_Stop
 10886 ;; This function is called by:
 10887 ;;		_INTERRUPT_InterruptManager
 10888 ;; This function uses a non-reentrant model
 10889 ;;
 10890                           
 10891                           
 10892                           ;psect for function _I2C_ISR
 10893  04C0                     _I2C_ISR:	
 10894                           
 10895                           ;mcc_generated_files/i2c.c: 238:     static uint8_t *pi2c_buf_ptr;;mcc_generated_files/i
      +                          2c.c: 239:     static uint16_t i2c_address = 0;;mcc_generated_files/i2c.c: 240:     stat
      +                          ic uint8_t i2c_bytes_left = 0;;mcc_generated_files/i2c.c: 241:     static uint8_t i2c_10
      +                          bit_address_restart = 0;;mcc_generated_files/i2c.c: 243:     PIR1bits.SSP1IF = 0;
 10896                           
 10897                           ;incstack = 0
 10898                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10899  04C0  1190               	bcf	16,3	;volatile
 10900                           
 10901                           ;mcc_generated_files/i2c.c: 247:     if(SSP1CON1bits.WCOL)
 10902  04C1  0024               	movlb	4	; select bank4
 10903  04C2  1F95               	btfss	21,7	;volatile
 10904  04C3  2DE0               	goto	i1l3756
 10905                           
 10906                           ;mcc_generated_files/i2c.c: 248:     {;mcc_generated_files/i2c.c: 250:         SSP1CON1b
      +                          its.WCOL = 0;
 10907  04C4  1395               	bcf	21,7	;volatile
 10908                           
 10909                           ;mcc_generated_files/i2c.c: 251:         i2c_state = S_MASTER_IDLE;
 10910  04C5  0022               	movlb	2	; select bank2
 10911  04C6  01C0               	clrf	_i2c_state^(0+256)
 10912                           
 10913                           ;mcc_generated_files/i2c.c: 252:         *(p_i2c_current->pTrFlag) = I2C_MESSAGE_FAIL;
 10914  04C7  0879               	movf	_p_i2c_current,w
 10915  04C8  3E02               	addlw	2
 10916  04C9  0086               	movwf	6
 10917  04CA  3001               	movlw	1	; select bank2/3
 10918  04CB  0087               	movwf	7
 10919  04CC  3F40               	moviw [0]fsr1
 10920  04CD  00F3               	movwf	??_I2C_ISR
 10921  04CE  3F41               	moviw [1]fsr1
 10922  04CF  00F4               	movwf	??_I2C_ISR+1
 10923  04D0  0873               	movf	??_I2C_ISR,w
 10924  04D1  0086               	movwf	6
 10925  04D2  0874               	movf	??_I2C_ISR+1,w
 10926  04D3  0087               	movwf	7
 10927  04D4  3001               	movlw	1
 10928  04D5  0081               	movwf	1
 10929                           
 10930                           ;mcc_generated_files/i2c.c: 255:         p_i2c_current = ((void*)0);
 10931  04D6  01F9               	clrf	_p_i2c_current
 10932  04D7  0008               	return
 10933  04D8                     i1l630:	
 10934                           ;mcc_generated_files/i2c.c: 262:     {;mcc_generated_files/i2c.c: 263:         case S_MA
      +                          STER_IDLE:
 10935                           
 10936                           
 10937                           ;mcc_generated_files/i2c.c: 265:             if(i2c_object.trStatus.s.empty != 1)
 10938  04D8  18B4               	btfsc	(_i2c_object^(0+256)+2),1
 10939  04D9  0008               	return
 10940                           
 10941                           ;mcc_generated_files/i2c.c: 266:             {;mcc_generated_files/i2c.c: 268:          
      +                                 p_i2c_current = i2c_object.pTrHead;
 10942  04DA  0833               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 10943  04DB  00F3               	movwf	??_I2C_ISR
 10944  04DC  0873               	movf	??_I2C_ISR,w
 10945  04DD  00F9               	movwf	_p_i2c_current
 10946                           
 10947                           ;mcc_generated_files/i2c.c: 269:                 i2c_trb_count = i2c_object.pTrHead->cou
      +                          nt;
 10948  04DE  0833               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 10949  04DF  0086               	movwf	6
 10950  04E0  3001               	movlw	1	; select bank2/3
 10951  04E1  0087               	movwf	7
 10952  04E2  0801               	movf	1,w
 10953  04E3  00F3               	movwf	??_I2C_ISR
 10954  04E4  0873               	movf	??_I2C_ISR,w
 10955  04E5  00BF               	movwf	_i2c_trb_count^(0+256)
 10956                           
 10957                           ;mcc_generated_files/i2c.c: 270:                 p_i2c_trb_current = i2c_object.pTrHead-
      +                          >ptrb_list;
 10958  04E6  0833               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 10959  04E7  0086               	movwf	6
 10960  04E8  3001               	movlw	1	; select bank2/3
 10961  04E9  0087               	movwf	7
 10962  04EA  3001               	movlw	1	; select bank2/3
 10963  04EB  3F41               	moviw [1]fsr1
 10964  04EC  00FA               	movwf	_p_i2c_trb_current
 10965                           
 10966                           ;mcc_generated_files/i2c.c: 272:                 i2c_object.pTrHead++;
 10967  04ED  3004               	movlw	4
 10968  04EE  00F3               	movwf	??_I2C_ISR
 10969  04EF  0873               	movf	??_I2C_ISR,w
 10970  04F0  07B3               	addwf	(low ((_i2c_object| (0+256)+1)))^0,f
 10971                           
 10972                           ;mcc_generated_files/i2c.c: 275:                 if(i2c_object.pTrHead == (i2c_tr_queue 
      +                          + 1))
 10973  04F1  0833               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 10974  04F2  3A4F               	xorlw	(low ((_i2c_tr_queue| (0+256)+4)))& (0+255)
 10975  04F3  1D03               	skipz
 10976  04F4  2CF9               	goto	i1l3646
 10977                           
 10978                           ;mcc_generated_files/i2c.c: 276:                 {;mcc_generated_files/i2c.c: 278:      
      +                                         i2c_object.pTrHead = i2c_tr_queue;
 10979  04F5  304B               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
 10980  04F6  00F3               	movwf	??_I2C_ISR
 10981  04F7  0873               	movf	??_I2C_ISR,w
 10982  04F8  00B3               	movwf	(low ((_i2c_object| (0+256)+1)))^0
 10983  04F9                     i1l3646:	
 10984                           
 10985                           ;mcc_generated_files/i2c.c: 283:                 i2c_object.trStatus.s.full = 0;
 10986  04F9  1034               	bcf	(_i2c_object^(0+256)+2),0
 10987                           
 10988                           ;mcc_generated_files/i2c.c: 286:                 if(i2c_object.pTrHead == i2c_object.pTr
      +                          Tail)
 10989  04FA  0833               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 10990  04FB  0632               	xorwf	_i2c_object^(0+256),w
 10991  04FC  1903               	btfsc	3,2
 10992                           
 10993                           ;mcc_generated_files/i2c.c: 287:                 {;mcc_generated_files/i2c.c: 289:      
      +                                         i2c_object.trStatus.s.empty = 1;
 10994  04FD  14B4               	bsf	(_i2c_object^(0+256)+2),1
 10995                           
 10996                           ;mcc_generated_files/i2c.c: 293:                 SSP1CON2bits.SEN = 1;
 10997                           
 10998                           ;mcc_generated_files/i2c.c: 290:                 }
 10999  04FE  0024               	movlb	4	; select bank4
 11000  04FF  1416               	bsf	22,0	;volatile
 11001  0500                     i1l3650:	
 11002                           
 11003                           ;mcc_generated_files/i2c.c: 296:                 i2c_state = S_MASTER_SEND_ADDR;
 11004  0500  3002               	movlw	2
 11005  0501  00F3               	movwf	??_I2C_ISR
 11006  0502  0873               	movf	??_I2C_ISR,w
 11007  0503  0022               	movlb	2	; select bank2
 11008  0504  00C0               	movwf	_i2c_state^(0+256)
 11009  0505  0008               	return
 11010  0506                     i1l635:	
 11011                           ;mcc_generated_files/i2c.c: 301:         case S_MASTER_RESTART:
 11012                           
 11013  0506  2D89               	goto	i1l656
 11014  0507                     i1l636:	
 11015                           ;mcc_generated_files/i2c.c: 313:         case S_MASTER_SEND_ADDR_10BIT_LSB:
 11016                           
 11017                           ;mcc_generated_files/i2c.c: 306:             SSP1CON2bits.RSEN = 1;
 11018                           
 11019                           
 11020                           ;mcc_generated_files/i2c.c: 315:             if(SSP1CON2bits.ACKSTAT)
 11021  0507  0024               	movlb	4	; select bank4
 11022  0508  1F16               	btfss	22,6	;volatile
 11023  0509  2D13               	goto	i1l3658
 11024                           
 11025                           ;mcc_generated_files/i2c.c: 316:             {;mcc_generated_files/i2c.c: 317:          
      +                                 i2c_object.i2cErrors++;
 11026  050A  3001               	movlw	1
 11027  050B  00F3               	movwf	??_I2C_ISR
 11028  050C  0873               	movf	??_I2C_ISR,w
 11029  050D  0022               	movlb	2	; select bank2
 11030  050E  07B6               	addwf	(_i2c_object^(0+256)+4),f
 11031                           
 11032                           ;mcc_generated_files/i2c.c: 318:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 11033  050F  3004               	movlw	4
 11034  0510  319F  2723         	fcall	_I2C_Stop
 11035                           
 11036                           ;mcc_generated_files/i2c.c: 319:             }
 11037  0512  0008               	return
 11038  0513                     i1l3658:	
 11039                           
 11040                           ;mcc_generated_files/i2c.c: 321:             {;mcc_generated_files/i2c.c: 323:          
      +                                 SSP1BUF = (i2c_address >> 1) & 0x00FF;
 11041  0513  087C               	movf	I2C_ISR@i2c_address+1,w
 11042  0514  00F4               	movwf	??_I2C_ISR+1
 11043  0515  087B               	movf	I2C_ISR@i2c_address,w
 11044  0516  00F3               	movwf	??_I2C_ISR
 11045  0517  36F4               	lsrf	??_I2C_ISR+1,f
 11046  0518  0CF3               	rrf	??_I2C_ISR,f
 11047  0519  0873               	movf	??_I2C_ISR,w
 11048  051A  0091               	movwf	17	;volatile
 11049                           
 11050                           ;mcc_generated_files/i2c.c: 326:                 if(i2c_address & 0x01)
 11051  051B  1C7B               	btfss	I2C_ISR@i2c_address,0
 11052  051C  2D23               	goto	i1l3664
 11053                           
 11054                           ;mcc_generated_files/i2c.c: 327:                 {;mcc_generated_files/i2c.c: 330:      
      +                                         i2c_state = S_MASTER_10BIT_RESTART;
 11055  051D  300B               	movlw	11
 11056  051E  00F3               	movwf	??_I2C_ISR
 11057  051F  0873               	movf	??_I2C_ISR,w
 11058  0520  0022               	movlb	2	; select bank2
 11059  0521  00C0               	movwf	_i2c_state^(0+256)
 11060                           
 11061                           ;mcc_generated_files/i2c.c: 331:                 }
 11062  0522  0008               	return
 11063  0523                     i1l3664:	
 11064                           
 11065                           ;mcc_generated_files/i2c.c: 333:                 {;mcc_generated_files/i2c.c: 335:      
      +                                         i2c_state = S_MASTER_SEND_DATA;
 11066  0523  3003               	movlw	3
 11067  0524  00F3               	movwf	??_I2C_ISR
 11068  0525  0873               	movf	??_I2C_ISR,w
 11069  0526  0022               	movlb	2	; select bank2
 11070  0527  00C0               	movwf	_i2c_state^(0+256)
 11071  0528  0008               	return
 11072  0529                     i1l641:	
 11073                           ;mcc_generated_files/i2c.c: 341:         case S_MASTER_10BIT_RESTART:
 11074                           
 11075                           
 11076                           ;mcc_generated_files/i2c.c: 343:             if(SSP1CON2bits.ACKSTAT)
 11077  0529  0024               	movlb	4	; select bank4
 11078  052A  1F16               	btfss	22,6	;volatile
 11079  052B  2D35               	goto	i1l642
 11080                           
 11081                           ;mcc_generated_files/i2c.c: 344:             {;mcc_generated_files/i2c.c: 345:          
      +                                 i2c_object.i2cErrors++;
 11082  052C  3001               	movlw	1
 11083  052D  00F3               	movwf	??_I2C_ISR
 11084  052E  0873               	movf	??_I2C_ISR,w
 11085  052F  0022               	movlb	2	; select bank2
 11086  0530  07B6               	addwf	(_i2c_object^(0+256)+4),f
 11087                           
 11088                           ;mcc_generated_files/i2c.c: 346:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 11089  0531  3004               	movlw	4
 11090  0532  319F  2723         	fcall	_I2C_Stop
 11091                           
 11092                           ;mcc_generated_files/i2c.c: 347:             }
 11093  0534  0008               	return
 11094  0535                     i1l642:	
 11095                           ;mcc_generated_files/i2c.c: 348:             else
 11096                           
 11097                           
 11098                           ;mcc_generated_files/i2c.c: 349:             {;mcc_generated_files/i2c.c: 352:          
      +                                 SSP1CON2bits.RSEN = 1;
 11099  0535  1496               	bsf	22,1	;volatile
 11100                           
 11101                           ;mcc_generated_files/i2c.c: 356:                 i2c_address = 0x00F0 | ((i2c_address >>
      +                           8) & 0x0006);
 11102  0536  3006               	movlw	6
 11103  0537  057C               	andwf	I2C_ISR@i2c_address+1,w
 11104  0538  00F3               	movwf	??_I2C_ISR
 11105  0539  30F0               	movlw	240
 11106  053A  0473               	iorwf	??_I2C_ISR,w
 11107  053B  00FB               	movwf	I2C_ISR@i2c_address
 11108  053C  3000               	movlw	0
 11109  053D  00FC               	movwf	I2C_ISR@i2c_address+1
 11110                           
 11111                           ;mcc_generated_files/i2c.c: 359:                 i2c_address |= 0x0001;
 11112  053E  147B               	bsf	I2C_ISR@i2c_address,0
 11113                           
 11114                           ;mcc_generated_files/i2c.c: 362:                 i2c_10bit_address_restart = 1;
 11115  053F  0022               	movlb	2	; select bank2
 11116  0540  01BD               	clrf	I2C_ISR@i2c_10bit_address_restart^(0+256)
 11117  0541  0ABD               	incf	I2C_ISR@i2c_10bit_address_restart^(0+256),f
 11118  0542  2D00               	goto	i1l3650
 11119  0543                     i1l3678:	
 11120                           
 11121                           ;mcc_generated_files/i2c.c: 383:             if(i2c_10bit_address_restart != 1)
 11122  0543  033D               	decf	I2C_ISR@i2c_10bit_address_restart^(0+256),w
 11123  0544  1903               	btfsc	3,2
 11124  0545  2D5E               	goto	i1l3696
 11125                           
 11126                           ;mcc_generated_files/i2c.c: 384:             {;mcc_generated_files/i2c.c: 386:          
      +                                 i2c_address = p_i2c_trb_current->address;
 11127  0546  087A               	movf	_p_i2c_trb_current,w
 11128  0547  0086               	movwf	6
 11129  0548  3001               	movlw	1	; select bank2/3
 11130  0549  0087               	movwf	7
 11131  054A  3F40               	moviw [0]fsr1
 11132  054B  00FB               	movwf	I2C_ISR@i2c_address
 11133  054C  3F41               	moviw [1]fsr1
 11134  054D  00FC               	movwf	I2C_ISR@i2c_address+1
 11135                           
 11136                           ;mcc_generated_files/i2c.c: 387:                 pi2c_buf_ptr = p_i2c_trb_current->pbuff
      +                          er;
 11137  054E  087A               	movf	_p_i2c_trb_current,w
 11138  054F  3E03               	addlw	3
 11139  0550  0086               	movwf	6
 11140  0551  3001               	movlw	1	; select bank2/3
 11141  0552  0087               	movwf	7
 11142  0553  3F40               	moviw [0]fsr1
 11143  0554  00BB               	movwf	I2C_ISR@pi2c_buf_ptr^(0+256)
 11144  0555  3F41               	moviw [1]fsr1
 11145  0556  00BC               	movwf	(I2C_ISR@pi2c_buf_ptr+1)^(0+256)
 11146                           
 11147                           ;mcc_generated_files/i2c.c: 388:                 i2c_bytes_left = p_i2c_trb_current->len
      +                          gth;
 11148  0557  087A               	movf	_p_i2c_trb_current,w
 11149  0558  0086               	movwf	6
 11150  0559  3001               	movlw	1	; select bank2/3
 11151  055A  0087               	movwf	7
 11152  055B  3001               	movlw	1	; select bank2/3
 11153  055C  3F42               	moviw [2]fsr1
 11154  055D  00BE               	movwf	I2C_ISR@i2c_bytes_left^(0+256)
 11155  055E                     i1l3696:	
 11156                           
 11157                           ;mcc_generated_files/i2c.c: 412:             {;mcc_generated_files/i2c.c: 414:          
      +                                 SSP1BUF = i2c_address;
 11158  055E  087B               	movf	I2C_ISR@i2c_address,w
 11159  055F  0024               	movlb	4	; select bank4
 11160  0560  0091               	movwf	17	;volatile
 11161                           
 11162                           ;mcc_generated_files/i2c.c: 415:                 if(i2c_address & 0x01)
 11163  0561  1C7B               	btfss	I2C_ISR@i2c_address,0
 11164  0562  2D23               	goto	i1l3664
 11165                           
 11166                           ;mcc_generated_files/i2c.c: 416:                 {;mcc_generated_files/i2c.c: 418:      
      +                                         i2c_state = S_MASTER_ACK_ADDR;
 11167  0563  3005               	movlw	5
 11168  0564  00F3               	movwf	??_I2C_ISR
 11169  0565  0873               	movf	??_I2C_ISR,w
 11170  0566  0022               	movlb	2	; select bank2
 11171  0567  00C0               	movwf	_i2c_state^(0+256)
 11172                           
 11173                           ;mcc_generated_files/i2c.c: 419:                 }
 11174  0568  0008               	return
 11175  0569                     i1l652:	
 11176                           ;mcc_generated_files/i2c.c: 428:         case S_MASTER_SEND_DATA:
 11177                           
 11178                           
 11179                           ;mcc_generated_files/i2c.c: 431:             if(SSP1CON2bits.ACKSTAT)
 11180  0569  0024               	movlb	4	; select bank4
 11181  056A  1F16               	btfss	22,6	;volatile
 11182  056B  2D77               	goto	i1l3710
 11183                           
 11184                           ;mcc_generated_files/i2c.c: 432:             {;mcc_generated_files/i2c.c: 434:          
      +                                 i2c_object.i2cErrors++;
 11185  056C  3001               	movlw	1
 11186  056D  00F3               	movwf	??_I2C_ISR
 11187  056E  0873               	movf	??_I2C_ISR,w
 11188  056F  0022               	movlb	2	; select bank2
 11189  0570  07B6               	addwf	(_i2c_object^(0+256)+4),f
 11190                           
 11191                           ;mcc_generated_files/i2c.c: 437:                 SSP1CON2bits.ACKSTAT = 0;
 11192  0571  0024               	movlb	4	; select bank4
 11193  0572  1316               	bcf	22,6	;volatile
 11194                           
 11195                           ;mcc_generated_files/i2c.c: 440:                 I2C_Stop(I2C_DATA_NO_ACK);
 11196  0573  3005               	movlw	5
 11197  0574  319F  2723         	fcall	_I2C_Stop
 11198                           
 11199                           ;mcc_generated_files/i2c.c: 442:             }
 11200  0576  0008               	return
 11201  0577                     i1l3710:	
 11202                           
 11203                           ;mcc_generated_files/i2c.c: 444:             {;mcc_generated_files/i2c.c: 446:          
      +                                 if(i2c_bytes_left-- == 0U)
 11204  0577  3001               	movlw	1
 11205  0578  0022               	movlb	2	; select bank2
 11206  0579  02BE               	subwf	I2C_ISR@i2c_bytes_left^(0+256),f
 11207  057A  0A3E               	incf	I2C_ISR@i2c_bytes_left^(0+256),w
 11208  057B  1D03               	btfss	3,2
 11209  057C  2D8C               	goto	i1l3718
 11210                           
 11211                           ;mcc_generated_files/i2c.c: 447:                 {;mcc_generated_files/i2c.c: 451:      
      +                                         p_i2c_trb_current++;
 11212  057D  3005               	movlw	5
 11213  057E  00F3               	movwf	??_I2C_ISR
 11214  057F  0873               	movf	??_I2C_ISR,w
 11215  0580  07FA               	addwf	_p_i2c_trb_current,f
 11216                           
 11217                           ;mcc_generated_files/i2c.c: 454:                     if(--i2c_trb_count == 0)
 11218  0581  3001               	movlw	1
 11219  0582  02BF               	subwf	_i2c_trb_count^(0+256),f
 11220  0583  1D03               	btfss	3,2
 11221  0584  2D89               	goto	i1l656
 11222                           
 11223                           ;mcc_generated_files/i2c.c: 455:                     {;mcc_generated_files/i2c.c: 456:  
      +                                                 I2C_Stop(I2C_MESSAGE_COMPLETE);
 11224  0585  3000               	movlw	0
 11225  0586  319F  2723         	fcall	_I2C_Stop
 11226                           
 11227                           ;mcc_generated_files/i2c.c: 457:                     }
 11228  0588  0008               	return
 11229  0589                     i1l656:	
 11230                           ;mcc_generated_files/i2c.c: 458:                     else
 11231                           
 11232                           
 11233                           ;mcc_generated_files/i2c.c: 459:                     {;mcc_generated_files/i2c.c: 466:  
      +                                                 SSP1CON2bits.RSEN = 1;
 11234  0589  0024               	movlb	4	; select bank4
 11235  058A  1496               	bsf	22,1	;volatile
 11236  058B  2D00               	goto	i1l3650
 11237  058C                     i1l3718:	
 11238                           
 11239                           ;mcc_generated_files/i2c.c: 474:                 {;mcc_generated_files/i2c.c: 476:      
      +                                         SSP1BUF = *pi2c_buf_ptr++;
 11240  058C  083B               	movf	I2C_ISR@pi2c_buf_ptr^(0+256),w
 11241  058D  0086               	movwf	6
 11242  058E  083C               	movf	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),w
 11243  058F  0087               	movwf	7
 11244  0590  0801               	movf	1,w
 11245  0591  0024               	movlb	4	; select bank4
 11246  0592  0091               	movwf	17	;volatile
 11247  0593  3001               	movlw	1
 11248  0594  0022               	movlb	2	; select bank2
 11249  0595  07BB               	addwf	I2C_ISR@pi2c_buf_ptr^(0+256),f
 11250  0596  3000               	movlw	0
 11251  0597  3DBC               	addwfc	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),f
 11252  0598  0008               	return
 11253  0599                     i1l659:	
 11254                           ;mcc_generated_files/i2c.c: 481:         case S_MASTER_ACK_ADDR:
 11255                           
 11256                           
 11257                           ;mcc_generated_files/i2c.c: 484:             if(SSP1CON2bits.ACKSTAT)
 11258  0599  0024               	movlb	4	; select bank4
 11259  059A  1F16               	btfss	22,6	;volatile
 11260  059B  2DA7               	goto	i1l660
 11261                           
 11262                           ;mcc_generated_files/i2c.c: 485:             {;mcc_generated_files/i2c.c: 488:          
      +                                 i2c_object.i2cErrors++;
 11263  059C  3001               	movlw	1
 11264  059D  00F3               	movwf	??_I2C_ISR
 11265  059E  0873               	movf	??_I2C_ISR,w
 11266  059F  0022               	movlb	2	; select bank2
 11267  05A0  07B6               	addwf	(_i2c_object^(0+256)+4),f
 11268                           
 11269                           ;mcc_generated_files/i2c.c: 491:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 11270  05A1  3004               	movlw	4
 11271  05A2  319F  2723         	fcall	_I2C_Stop
 11272                           
 11273                           ;mcc_generated_files/i2c.c: 494:                 SSP1CON2bits.ACKSTAT = 0;
 11274  05A4  0024               	movlb	4	; select bank4
 11275  05A5  1316               	bcf	22,6	;volatile
 11276                           
 11277                           ;mcc_generated_files/i2c.c: 495:             }
 11278  05A6  0008               	return
 11279  05A7                     i1l660:	
 11280                           ;mcc_generated_files/i2c.c: 496:             else
 11281                           
 11282                           
 11283                           ;mcc_generated_files/i2c.c: 497:             {;mcc_generated_files/i2c.c: 498:          
      +                                 SSP1CON2bits.RCEN = 1;
 11284  05A7  1596               	bsf	22,3	;volatile
 11285                           
 11286                           ;mcc_generated_files/i2c.c: 499:                 i2c_state = S_MASTER_ACK_RCV_DATA;
 11287  05A8  3008               	movlw	8
 11288  05A9  00F3               	movwf	??_I2C_ISR
 11289  05AA  0873               	movf	??_I2C_ISR,w
 11290  05AB  0022               	movlb	2	; select bank2
 11291  05AC  00C0               	movwf	_i2c_state^(0+256)
 11292  05AD  0008               	return
 11293  05AE                     i1l3730:	
 11294                           
 11295                           ;mcc_generated_files/i2c.c: 508:             i2c_state = S_MASTER_ACK_RCV_DATA;
 11296  05AE  3008               	movlw	8
 11297  05AF  00F3               	movwf	??_I2C_ISR
 11298  05B0  0873               	movf	??_I2C_ISR,w
 11299  05B1  00C0               	movwf	_i2c_state^(0+256)
 11300                           
 11301                           ;mcc_generated_files/i2c.c: 511:             SSP1CON2bits.RCEN = 1;
 11302  05B2  0024               	movlb	4	; select bank4
 11303  05B3  1596               	bsf	22,3	;volatile
 11304                           
 11305                           ;mcc_generated_files/i2c.c: 513:             break;
 11306  05B4  0008               	return
 11307  05B5                     i1l3734:	
 11308                           
 11309                           ;mcc_generated_files/i2c.c: 518:             *pi2c_buf_ptr++ = SSP1BUF;
 11310  05B5  083B               	movf	I2C_ISR@pi2c_buf_ptr^(0+256),w
 11311  05B6  0086               	movwf	6
 11312  05B7  083C               	movf	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),w
 11313  05B8  0087               	movwf	7
 11314  05B9  0024               	movlb	4	; select bank4
 11315  05BA  0811               	movf	17,w	;volatile
 11316  05BB  0081               	movwf	1
 11317  05BC  3001               	movlw	1
 11318  05BD  0022               	movlb	2	; select bank2
 11319  05BE  07BB               	addwf	I2C_ISR@pi2c_buf_ptr^(0+256),f
 11320  05BF  3000               	movlw	0
 11321  05C0  3DBC               	addwfc	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),f
 11322                           
 11323                           ;mcc_generated_files/i2c.c: 521:             if(--i2c_bytes_left)
 11324  05C1  3001               	movlw	1
 11325  05C2  02BE               	subwf	I2C_ISR@i2c_bytes_left^(0+256),f
 11326  05C3  1903               	btfsc	3,2
 11327  05C4  2DCD               	goto	i1l664
 11328                           
 11329                           ;mcc_generated_files/i2c.c: 522:             {;mcc_generated_files/i2c.c: 528:          
      +                                 SSP1CON2bits.ACKDT = 0;
 11330  05C5  0024               	movlb	4	; select bank4
 11331  05C6  1296               	bcf	22,5	;volatile
 11332                           
 11333                           ;mcc_generated_files/i2c.c: 531:                 i2c_state = S_MASTER_RCV_DATA;
 11334  05C7  3006               	movlw	6
 11335  05C8  00F3               	movwf	??_I2C_ISR
 11336  05C9  0873               	movf	??_I2C_ISR,w
 11337  05CA  0022               	movlb	2	; select bank2
 11338  05CB  00C0               	movwf	_i2c_state^(0+256)
 11339                           
 11340                           ;mcc_generated_files/i2c.c: 532:             }
 11341  05CC  2DD1               	goto	i1l3746
 11342  05CD                     i1l664:	
 11343                           ;mcc_generated_files/i2c.c: 533:             else
 11344                           
 11345                           
 11346                           ;mcc_generated_files/i2c.c: 534:             {;mcc_generated_files/i2c.c: 538:          
      +                                 SSP1CON2bits.ACKDT = 1;
 11347  05CD  0024               	movlb	4	; select bank4
 11348  05CE  1696               	bsf	22,5	;volatile
 11349                           
 11350                           ;mcc_generated_files/i2c.c: 540:                 I2C_FunctionComplete();
 11351  05CF  319E  26E2         	fcall	_I2C_FunctionComplete
 11352  05D1                     i1l3746:	
 11353                           
 11354                           ;mcc_generated_files/i2c.c: 544:             SSP1CON2bits.ACKEN = 1;
 11355  05D1  0024               	movlb	4	; select bank4
 11356  05D2  1616               	bsf	22,4	;volatile
 11357                           
 11358                           ;mcc_generated_files/i2c.c: 545:             break;
 11359  05D3  0008               	return
 11360  05D4                     i1l3748:	
 11361                           
 11362                           ;mcc_generated_files/i2c.c: 551:             I2C_Stop(I2C_MESSAGE_COMPLETE);
 11363  05D4  3000               	movlw	0
 11364  05D5  319F  2723         	fcall	_I2C_Stop
 11365                           
 11366                           ;mcc_generated_files/i2c.c: 552:             break;
 11367  05D7  0008               	return
 11368  05D8                     i1l3750:	
 11369                           
 11370                           ;mcc_generated_files/i2c.c: 558:             i2c_object.i2cErrors++;
 11371  05D8  3001               	movlw	1
 11372  05D9  00F3               	movwf	??_I2C_ISR
 11373  05DA  0873               	movf	??_I2C_ISR,w
 11374  05DB  07B6               	addwf	(_i2c_object^(0+256)+4),f
 11375                           
 11376                           ;mcc_generated_files/i2c.c: 559:             I2C_Stop(I2C_LOST_STATE);
 11377  05DC  3006               	movlw	6
 11378  05DD  319F  2723         	fcall	_I2C_Stop
 11379                           
 11380                           ;mcc_generated_files/i2c.c: 560:             break;
 11381  05DF  0008               	return
 11382  05E0                     i1l3756:	
 11383  05E0  0022               	movlb	2	; select bank2
 11384  05E1  0840               	movf	_i2c_state^(0+256),w
 11385  05E2  00F3               	movwf	??_I2C_ISR
 11386  05E3  01F4               	clrf	??_I2C_ISR+1
 11387                           
 11388                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11389                           ; Switch size 1, requested type "simple"
 11390                           ; Number of cases is 1, Range of values is 0 to 0
 11391                           ; switch strategies available:
 11392                           ; Name         Instructions Cycles
 11393                           ; simple_byte            4     3 (average)
 11394                           ; direct_byte            8     6 (fixed)
 11395                           ; jumptable            260     6 (fixed)
 11396                           ;	Chosen strategy is simple_byte
 11397  05E4  0874               	movf	??_I2C_ISR+1,w
 11398  05E5  3A00               	xorlw	0	; case 0
 11399  05E6  1903               	skipnz
 11400  05E7  2DE9               	goto	i1l3844
 11401  05E8  2DD8               	goto	i1l3750
 11402  05E9                     i1l3844:	
 11403                           
 11404                           ; Switch size 1, requested type "simple"
 11405                           ; Number of cases is 11, Range of values is 0 to 11
 11406                           ; switch strategies available:
 11407                           ; Name         Instructions Cycles
 11408                           ; direct_byte           30     6 (fixed)
 11409                           ; simple_byte           34    18 (average)
 11410                           ; jumptable            260     6 (fixed)
 11411                           ;	Chosen strategy is simple_byte
 11412  05E9  0873               	movf	??_I2C_ISR,w
 11413  05EA  3A00               	xorlw	0	; case 0
 11414  05EB  1903               	skipnz
 11415  05EC  2CD8               	goto	i1l630
 11416  05ED  3A01               	xorlw	1	; case 1
 11417  05EE  1903               	skipnz
 11418  05EF  2D06               	goto	i1l635
 11419  05F0  3A03               	xorlw	3	; case 2
 11420  05F1  1903               	skipnz
 11421  05F2  2D43               	goto	i1l3678
 11422  05F3  3A01               	xorlw	1	; case 3
 11423  05F4  1903               	skipnz
 11424  05F5  2D69               	goto	i1l652
 11425  05F6  3A07               	xorlw	7	; case 4
 11426  05F7  1903               	skipnz
 11427  05F8  2DD4               	goto	i1l3748
 11428  05F9  3A01               	xorlw	1	; case 5
 11429  05FA  1903               	skipnz
 11430  05FB  2D99               	goto	i1l659
 11431  05FC  3A03               	xorlw	3	; case 6
 11432  05FD  1903               	skipnz
 11433  05FE  2DAE               	goto	i1l3730
 11434  05FF  3A01               	xorlw	1	; case 7
 11435  0600  1903               	skipnz
 11436  0601  2DD4               	goto	i1l3748
 11437  0602  3A0F               	xorlw	15	; case 8
 11438  0603  1903               	skipnz
 11439  0604  2DB5               	goto	i1l3734
 11440  0605  3A02               	xorlw	2	; case 10
 11441  0606  1903               	skipnz
 11442  0607  2D07               	goto	i1l636
 11443  0608  3A01               	xorlw	1	; case 11
 11444  0609  1903               	skipnz
 11445  060A  2D29               	goto	i1l641
 11446  060B  2DD8               	goto	i1l3750
 11447  060C  0008               	return
 11448  060D                     __end_of_I2C_ISR:	
 11449                           
 11450                           	psect	text44
 11451  1F23                     __ptext44:	
 11452 ;; *************** function _I2C_Stop *****************
 11453 ;; Defined at:
 11454 ;;		line 583 in file "mcc_generated_files/i2c.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;  completion_c    1    wreg     enum E9631
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  completion_c    1    2[COMMON] enum E9631
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  1    wreg      void 
 11461 ;; Registers used:
 11462 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11463 ;; Tracked objects:
 11464 ;;		On entry : 19/2
 11465 ;;		On exit  : 1F/2
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;Total ram usage:        3 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; This function calls:
 11475 ;;		Nothing
 11476 ;; This function is called by:
 11477 ;;		_I2C_ISR
 11478 ;; This function uses a non-reentrant model
 11479 ;;
 11480                           
 11481                           
 11482                           ;psect for function _I2C_Stop
 11483  1F23                     _I2C_Stop:	
 11484                           
 11485                           ;incstack = 0
 11486                           ; Regs used in _I2C_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 11487                           ;I2C_Stop@completion_code stored from wreg
 11488  1F23  00F2               	movwf	I2C_Stop@completion_code
 11489                           
 11490                           ;mcc_generated_files/i2c.c: 583: void I2C_Stop(I2C_MESSAGE_STATUS completion_code);mcc_g
      +                          enerated_files/i2c.c: 584: {;mcc_generated_files/i2c.c: 586:     SSP1CON2bits.PEN = 1;
 11491  1F24  0024               	movlb	4	; select bank4
 11492  1F25  1516               	bsf	22,2	;volatile
 11493                           
 11494                           ;mcc_generated_files/i2c.c: 589:     if (p_i2c_current->pTrFlag != ((void*)0))
 11495  1F26  0879               	movf	_p_i2c_current,w
 11496  1F27  3E02               	addlw	2
 11497  1F28  0086               	movwf	6
 11498  1F29  3001               	movlw	1	; select bank2/3
 11499  1F2A  0087               	movwf	7
 11500  1F2B  0016               	moviw fsr1++
 11501  1F2C  0401               	iorwf	1,w
 11502  1F2D  1903               	btfsc	3,2
 11503  1F2E  2F3E               	goto	i1l3564
 11504                           
 11505                           ;mcc_generated_files/i2c.c: 590:     {;mcc_generated_files/i2c.c: 592:         *(p_i2c_c
      +                          urrent->pTrFlag) = completion_code;
 11506  1F2F  0879               	movf	_p_i2c_current,w
 11507  1F30  3E02               	addlw	2
 11508  1F31  0086               	movwf	6
 11509  1F32  3001               	movlw	1	; select bank2/3
 11510  1F33  0087               	movwf	7
 11511  1F34  3F40               	moviw [0]fsr1
 11512  1F35  00F0               	movwf	??_I2C_Stop
 11513  1F36  3F41               	moviw [1]fsr1
 11514  1F37  00F1               	movwf	??_I2C_Stop+1
 11515  1F38  0870               	movf	??_I2C_Stop,w
 11516  1F39  0086               	movwf	6
 11517  1F3A  0871               	movf	??_I2C_Stop+1,w
 11518  1F3B  0087               	movwf	7
 11519  1F3C  0872               	movf	I2C_Stop@completion_code,w
 11520  1F3D  0081               	movwf	1
 11521  1F3E                     i1l3564:	
 11522                           
 11523                           ;mcc_generated_files/i2c.c: 596:     i2c_state = S_MASTER_IDLE;
 11524  1F3E  0022               	movlb	2	; select bank2
 11525  1F3F  01C0               	clrf	_i2c_state^(0+256)
 11526  1F40  0008               	return
 11527  1F41                     __end_of_I2C_Stop:	
 11528                           
 11529                           	psect	text45
 11530  1EE2                     __ptext45:	
 11531 ;; *************** function _I2C_FunctionComplete *****************
 11532 ;; Defined at:
 11533 ;;		line 565 in file "mcc_generated_files/i2c.c"
 11534 ;; Parameters:    Size  Location     Type
 11535 ;;		None
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;		None
 11538 ;; Return value:  Size  Location     Type
 11539 ;;                  1    wreg      void 
 11540 ;; Registers used:
 11541 ;;		wreg, status,2, status,0
 11542 ;; Tracked objects:
 11543 ;;		On entry : 1F/4
 11544 ;;		On exit  : 1F/2
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;Total ram usage:        1 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; This function calls:
 11554 ;;		Nothing
 11555 ;; This function is called by:
 11556 ;;		_I2C_ISR
 11557 ;; This function uses a non-reentrant model
 11558 ;;
 11559                           
 11560                           
 11561                           ;psect for function _I2C_FunctionComplete
 11562  1EE2                     _I2C_FunctionComplete:	
 11563                           
 11564                           ;mcc_generated_files/i2c.c: 569:     p_i2c_trb_current++;
 11565                           
 11566                           ;incstack = 0
 11567                           ; Regs used in _I2C_FunctionComplete: [wreg+status,2+status,0]
 11568  1EE2  3005               	movlw	5
 11569  1EE3  00F0               	movwf	??_I2C_FunctionComplete
 11570  1EE4  0870               	movf	??_I2C_FunctionComplete,w
 11571  1EE5  07FA               	addwf	_p_i2c_trb_current,f
 11572                           
 11573                           ;mcc_generated_files/i2c.c: 572:     if(--i2c_trb_count == 0)
 11574  1EE6  3001               	movlw	1
 11575  1EE7  0022               	movlb	2	; select bank2
 11576  1EE8  02BF               	subwf	_i2c_trb_count^(0+256),f
 11577  1EE9  1D03               	btfss	3,2
 11578  1EEA  2EF0               	goto	i1l671
 11579                           
 11580                           ;mcc_generated_files/i2c.c: 573:     {;mcc_generated_files/i2c.c: 574:         i2c_state
      +                           = S_MASTER_SEND_STOP;
 11581  1EEB  3004               	movlw	4
 11582  1EEC  00F0               	movwf	??_I2C_FunctionComplete
 11583  1EED  0870               	movf	??_I2C_FunctionComplete,w
 11584  1EEE  00C0               	movwf	_i2c_state^(0+256)
 11585                           
 11586                           ;mcc_generated_files/i2c.c: 575:     }
 11587  1EEF  0008               	return
 11588  1EF0                     i1l671:	
 11589                           ;mcc_generated_files/i2c.c: 576:     else
 11590                           
 11591                           
 11592                           ;mcc_generated_files/i2c.c: 577:     {;mcc_generated_files/i2c.c: 578:         i2c_state
      +                           = S_MASTER_RESTART;
 11593  1EF0  01C0               	clrf	_i2c_state^(0+256)
 11594  1EF1  0AC0               	incf	_i2c_state^(0+256),f
 11595  1EF2  0008               	return
 11596  1EF3                     __end_of_I2C_FunctionComplete:	
 11597                           
 11598                           	psect	text46
 11599  0002                     __ptext46:	
 11600 ;; *************** function _I2C_BusCollisionISR *****************
 11601 ;; Defined at:
 11602 ;;		line 742 in file "mcc_generated_files/i2c.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;		None
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;		None
 11607 ;; Return value:  Size  Location     Type
 11608 ;;                  1    wreg      void 
 11609 ;; Registers used:
 11610 ;;		None
 11611 ;; Tracked objects:
 11612 ;;		On entry : 1F/0
 11613 ;;		On exit  : 1F/0
 11614 ;;		Unchanged: 0/0
 11615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;Total ram usage:        0 bytes
 11621 ;; Hardware stack levels used:    1
 11622 ;; This function calls:
 11623 ;;		Nothing
 11624 ;; This function is called by:
 11625 ;;		_INTERRUPT_InterruptManager
 11626 ;; This function uses a non-reentrant model
 11627 ;;
 11628                           
 11629                           
 11630                           ;psect for function _I2C_BusCollisionISR
 11631  0002                     _I2C_BusCollisionISR:	
 11632                           
 11633                           ;mcc_generated_files/i2c.c: 745:  PIR2bits.BCL1IF = 0;
 11634                           
 11635                           ;incstack = 0
 11636                           ; Regs used in _I2C_BusCollisionISR: []
 11637  0002  1191               	bcf	17,3	;volatile
 11638  0003  0008               	return
 11639  0004                     __end_of_I2C_BusCollisionISR:	
 11640  007E                     btemp	set	126	;btemp
 11641  007E                     int$flags	set	126
 11642  007E                     wtemp0	set	126
 11643                           
 11644                           	psect	text23_split_1
 11645  0833                     L5:	
 11646  0833  0021               	movlb	1	; select bank1
 11647  0834  00C1               	movwf	_compensate_pressure$2393^(0+128)
 11648  0835  0020               	movlb	0	; select bank0
 11649  0836  0821               	movf	?___omul+1,w
 11650  0837  0021               	movlb	1	; select bank1
 11651  0838  00C2               	movwf	(_compensate_pressure$2393+1)^(0+128)
 11652  0839  0020               	movlb	0	; select bank0
 11653  083A  0822               	movf	?___omul+2,w
 11654  083B  0021               	movlb	1	; select bank1
 11655  083C  00C3               	movwf	(_compensate_pressure$2393+2)^(0+128)
 11656  083D  0020               	movlb	0	; select bank0
 11657  083E  0823               	movf	?___omul+3,w
 11658  083F  0021               	movlb	1	; select bank1
 11659  0840  00C4               	movwf	(_compensate_pressure$2393+3)^(0+128)
 11660  0841  0020               	movlb	0	; select bank0
 11661  0842  0824               	movf	?___omul+4,w
 11662  0843  0021               	movlb	1	; select bank1
 11663  0844  00C5               	movwf	(_compensate_pressure$2393+4)^(0+128)
 11664  0845  0020               	movlb	0	; select bank0
 11665  0846  0825               	movf	?___omul+5,w
 11666  0847  0021               	movlb	1	; select bank1
 11667  0848  00C6               	movwf	(_compensate_pressure$2393+5)^(0+128)
 11668  0849  0020               	movlb	0	; select bank0
 11669  084A  0826               	movf	?___omul+6,w
 11670  084B  0021               	movlb	1	; select bank1
 11671  084C  00C7               	movwf	(_compensate_pressure$2393+6)^(0+128)
 11672  084D  0020               	movlb	0	; select bank0
 11673  084E  0827               	movf	?___omul+7,w
 11674  084F  0021               	movlb	1	; select bank1
 11675  0850  00C8               	movwf	(_compensate_pressure$2393+7)^(0+128)
 11676                           
 11677                           ;BME280_driver/bme280.c: 1166:     var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 11678  0851  0841               	movf	_compensate_pressure$2393^(0+128),w
 11679  0852  0020               	movlb	0	; select bank0
 11680  0853  00A0               	movwf	___omul@multiplier
 11681  0854  0021               	movlb	1	; select bank1
 11682  0855  0842               	movf	(_compensate_pressure$2393+1)^(0+128),w
 11683  0856  0020               	movlb	0	; select bank0
 11684  0857  00A1               	movwf	___omul@multiplier+1
 11685  0858  0021               	movlb	1	; select bank1
 11686  0859  0843               	movf	(_compensate_pressure$2393+2)^(0+128),w
 11687  085A  0020               	movlb	0	; select bank0
 11688  085B  00A2               	movwf	___omul@multiplier+2
 11689  085C  0021               	movlb	1	; select bank1
 11690  085D  0844               	movf	(_compensate_pressure$2393+3)^(0+128),w
 11691  085E  0020               	movlb	0	; select bank0
 11692  085F  00A3               	movwf	___omul@multiplier+3
 11693  0860  0021               	movlb	1	; select bank1
 11694  0861  0845               	movf	(_compensate_pressure$2393+4)^(0+128),w
 11695  0862  0020               	movlb	0	; select bank0
 11696  0863  00A4               	movwf	___omul@multiplier+4
 11697  0864  0021               	movlb	1	; select bank1
 11698  0865  0846               	movf	(_compensate_pressure$2393+5)^(0+128),w
 11699  0866  0020               	movlb	0	; select bank0
 11700  0867  00A5               	movwf	___omul@multiplier+5
 11701  0868  0021               	movlb	1	; select bank1
 11702  0869  0847               	movf	(_compensate_pressure$2393+6)^(0+128),w
 11703  086A  0020               	movlb	0	; select bank0
 11704  086B  00A6               	movwf	___omul@multiplier+6
 11705  086C  0021               	movlb	1	; select bank1
 11706  086D  0848               	movf	(_compensate_pressure$2393+7)^(0+128),w
 11707  086E  0020               	movlb	0	; select bank0
 11708  086F  00A7               	movwf	___omul@multiplier+7
 11709  0870  0021               	movlb	1	; select bank1
 11710  0871  085D               	movf	compensate_pressure@var1^(0+128),w
 11711  0872  0020               	movlb	0	; select bank0
 11712  0873  00A8               	movwf	___omul@multiplicand
 11713  0874  0021               	movlb	1	; select bank1
 11714  0875  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 11715  0876  0020               	movlb	0	; select bank0
 11716  0877  00A9               	movwf	___omul@multiplicand+1
 11717  0878  0021               	movlb	1	; select bank1
 11718  0879  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 11719  087A  0020               	movlb	0	; select bank0
 11720  087B  00AA               	movwf	___omul@multiplicand+2
 11721  087C  0021               	movlb	1	; select bank1
 11722  087D  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 11723  087E  0020               	movlb	0	; select bank0
 11724  087F  00AB               	movwf	___omul@multiplicand+3
 11725  0880  0021               	movlb	1	; select bank1
 11726  0881  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 11727  0882  0020               	movlb	0	; select bank0
 11728  0883  00AC               	movwf	___omul@multiplicand+4
 11729  0884  0021               	movlb	1	; select bank1
 11730  0885  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 11731  0886  0020               	movlb	0	; select bank0
 11732  0887  00AD               	movwf	___omul@multiplicand+5
 11733  0888  0021               	movlb	1	; select bank1
 11734  0889  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 11735  088A  0020               	movlb	0	; select bank0
 11736  088B  00AE               	movwf	___omul@multiplicand+6
 11737  088C  0021               	movlb	1	; select bank1
 11738  088D  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 11739  088E  0020               	movlb	0	; select bank0
 11740  088F  00AF               	movwf	___omul@multiplicand+7
 11741  0890  3191  2189  3188   	fcall	___omul
 11742  0893  0820               	movf	?___omul,w
 11743  0894  0021               	movlb	1	; select bank1
 11744  0895  00CD               	movwf	compensate_pressure@var2^(0+128)
 11745  0896  0020               	movlb	0	; select bank0
 11746  0897  0821               	movf	?___omul+1,w
 11747  0898  0021               	movlb	1	; select bank1
 11748  0899  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 11749  089A  0020               	movlb	0	; select bank0
 11750  089B  0822               	movf	?___omul+2,w
 11751  089C  0021               	movlb	1	; select bank1
 11752  089D  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 11753  089E  0020               	movlb	0	; select bank0
 11754  089F  0823               	movf	?___omul+3,w
 11755  08A0  0021               	movlb	1	; select bank1
 11756  08A1  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 11757  08A2  0020               	movlb	0	; select bank0
 11758  08A3  0824               	movf	?___omul+4,w
 11759  08A4  0021               	movlb	1	; select bank1
 11760  08A5  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 11761  08A6  0020               	movlb	0	; select bank0
 11762  08A7  0825               	movf	?___omul+5,w
 11763  08A8  0021               	movlb	1	; select bank1
 11764  08A9  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 11765  08AA  0020               	movlb	0	; select bank0
 11766  08AB  0826               	movf	?___omul+6,w
 11767  08AC  0021               	movlb	1	; select bank1
 11768  08AD  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 11769  08AE  0020               	movlb	0	; select bank0
 11770  08AF  0827               	movf	?___omul+7,w
 11771  08B0  0021               	movlb	1	; select bank1
 11772  08B1  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 11773                           
 11774                           ;BME280_driver/bme280.c: 1167:     var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) *
      +                           131072);
 11775  08B2  30CD               	movlw	low compensate_pressure@var2
 11776  08B3  0086               	movwf	6
 11777  08B4  3000               	movlw	high compensate_pressure@var2
 11778  08B5  0087               	movwf	7
 11779  08B6  3F40               	moviw [0]fsr1
 11780  08B7  0020               	movlb	0	; select bank0
 11781  08B8  00D6               	movwf	??_compensate_pressure
 11782  08B9  3F41               	moviw [1]fsr1
 11783  08BA  00D7               	movwf	??_compensate_pressure+1
 11784  08BB  3F42               	moviw [2]fsr1
 11785  08BC  00D8               	movwf	??_compensate_pressure+2
 11786  08BD  3F43               	moviw [3]fsr1
 11787  08BE  00D9               	movwf	??_compensate_pressure+3
 11788  08BF  3F44               	moviw [4]fsr1
 11789  08C0  00DA               	movwf	??_compensate_pressure+4
 11790  08C1  3F45               	moviw [5]fsr1
 11791  08C2  00DB               	movwf	??_compensate_pressure+5
 11792  08C3  3F46               	moviw [6]fsr1
 11793  08C4  00DC               	movwf	??_compensate_pressure+6
 11794  08C5  3F47               	moviw [7]fsr1
 11795  08C6  00DD               	movwf	??_compensate_pressure+7
 11796  08C7  0852               	movf	compensate_pressure@calib_data,w
 11797  08C8  3E0E               	addlw	14
 11798  08C9  0086               	movwf	6
 11799  08CA  3001               	movlw	1	; select bank2/3
 11800  08CB  0087               	movwf	7
 11801  08CC  3F40               	moviw [0]fsr1
 11802  08CD  00DE               	movwf	??_compensate_pressure+8
 11803  08CE  3F41               	moviw [1]fsr1
 11804  08CF  00DF               	movwf	??_compensate_pressure+9
 11805  08D0  085E               	movf	??_compensate_pressure+8,w
 11806  08D1  00A0               	movwf	___omul@multiplier
 11807  08D2  085F               	movf	??_compensate_pressure+9,w
 11808  08D3  00A1               	movwf	___omul@multiplier+1
 11809  08D4  0D89               	rlf	9,f
 11810  08D5  3B89               	subwfb	9,f
 11811  08D6  0989               	comf	9,f
 11812  08D7  00A2               	movwf	___omul@multiplier+2
 11813  08D8  00A3               	movwf	___omul@multiplier+3
 11814  08D9  00A4               	movwf	___omul@multiplier+4
 11815  08DA  00A5               	movwf	___omul@multiplier+5
 11816  08DB  00A6               	movwf	___omul@multiplier+6
 11817  08DC  00A7               	movwf	___omul@multiplier+7
 11818  08DD  0021               	movlb	1	; select bank1
 11819  08DE  085D               	movf	compensate_pressure@var1^(0+128),w
 11820  08DF  0020               	movlb	0	; select bank0
 11821  08E0  00A8               	movwf	___omul@multiplicand
 11822  08E1  0021               	movlb	1	; select bank1
 11823  08E2  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 11824  08E3  0020               	movlb	0	; select bank0
 11825  08E4  00A9               	movwf	___omul@multiplicand+1
 11826  08E5  0021               	movlb	1	; select bank1
 11827  08E6  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 11828  08E7  0020               	movlb	0	; select bank0
 11829  08E8  00AA               	movwf	___omul@multiplicand+2
 11830  08E9  0021               	movlb	1	; select bank1
 11831  08EA  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 11832  08EB  0020               	movlb	0	; select bank0
 11833  08EC  00AB               	movwf	___omul@multiplicand+3
 11834  08ED  0021               	movlb	1	; select bank1
 11835  08EE  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 11836  08EF  0020               	movlb	0	; select bank0
 11837  08F0  00AC               	movwf	___omul@multiplicand+4
 11838  08F1  0021               	movlb	1	; select bank1
 11839  08F2  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 11840  08F3  0020               	movlb	0	; select bank0
 11841  08F4  00AD               	movwf	___omul@multiplicand+5
 11842  08F5  0021               	movlb	1	; select bank1
 11843  08F6  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 11844  08F7  0020               	movlb	0	; select bank0
 11845  08F8  00AE               	movwf	___omul@multiplicand+6
 11846  08F9  0021               	movlb	1	; select bank1
 11847  08FA  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 11848  08FB  0020               	movlb	0	; select bank0
 11849  08FC  00AF               	movwf	___omul@multiplicand+7
 11850  08FD  3191  2189  3188   	fcall	___omul
 11851  0900  3020               	movlw	low ?___omul
 11852  0901  0086               	movwf	6
 11853  0902  3000               	movlw	high ?___omul
 11854  0903  0087               	movwf	7
 11855  0904  3F40               	moviw [0]fsr1
 11856  0905  00E0               	movwf	??_compensate_pressure+10
 11857  0906  3F41               	moviw [1]fsr1
 11858  0907  00E1               	movwf	??_compensate_pressure+11
 11859  0908  3F42               	moviw [2]fsr1
 11860  0909  00E2               	movwf	??_compensate_pressure+12
 11861  090A  3F43               	moviw [3]fsr1
 11862  090B  00E3               	movwf	??_compensate_pressure+13
 11863  090C  3F44               	moviw [4]fsr1
 11864  090D  00E4               	movwf	??_compensate_pressure+14
 11865  090E  3F45               	moviw [5]fsr1
 11866  090F  00E5               	movwf	??_compensate_pressure+15
 11867  0910  3F46               	moviw [6]fsr1
 11868  0911  00E6               	movwf	??_compensate_pressure+16
 11869  0912  3F47               	moviw [7]fsr1
 11870  0913  00E7               	movwf	??_compensate_pressure+17
 11871  0914  3011               	movlw	17
 11872  0915                     u3295:	
 11873  0915  0020               	movlb	0	; select bank0
 11874  0916  35E0               	lslf	??_compensate_pressure+10,f
 11875  0917  0DE1               	rlf	??_compensate_pressure+11,f
 11876  0918  0DE2               	rlf	??_compensate_pressure+12,f
 11877  0919  0DE3               	rlf	??_compensate_pressure+13,f
 11878  091A  0DE4               	rlf	??_compensate_pressure+14,f
 11879  091B  0DE5               	rlf	??_compensate_pressure+15,f
 11880  091C  0DE6               	rlf	??_compensate_pressure+16,f
 11881  091D  0DE7               	rlf	??_compensate_pressure+17,f
 11882  091E  0B89               	decfsz	9,f
 11883  091F  2915               	goto	u3295
 11884  0920  0020               	movlb	0	; select bank0
 11885  0921  0860               	movf	??_compensate_pressure+10,w
 11886  0922  07D6               	addwf	??_compensate_pressure,f
 11887  0923  0861               	movf	??_compensate_pressure+11,w
 11888  0924  3DD7               	addwfc	??_compensate_pressure+1,f
 11889  0925  0862               	movf	??_compensate_pressure+12,w
 11890  0926  3DD8               	addwfc	??_compensate_pressure+2,f
 11891  0927  0863               	movf	??_compensate_pressure+13,w
 11892  0928  3DD9               	addwfc	??_compensate_pressure+3,f
 11893  0929  0864               	movf	??_compensate_pressure+14,w
 11894  092A  3DDA               	addwfc	??_compensate_pressure+4,f
 11895  092B  0865               	movf	??_compensate_pressure+15,w
 11896  092C  3DDB               	addwfc	??_compensate_pressure+5,f
 11897  092D  0866               	movf	??_compensate_pressure+16,w
 11898  092E  3DDC               	addwfc	??_compensate_pressure+6,f
 11899  092F  0867               	movf	??_compensate_pressure+17,w
 11900  0930  3DDD               	addwfc	??_compensate_pressure+7,f
 11901  0931  085D               	movf	??_compensate_pressure+7,w
 11902  0932  0021               	movlb	1	; select bank1
 11903  0933  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 11904  0934  0020               	movlb	0	; select bank0
 11905  0935  085C               	movf	??_compensate_pressure+6,w
 11906  0936  0021               	movlb	1	; select bank1
 11907  0937  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 11908  0938  0020               	movlb	0	; select bank0
 11909  0939  085B               	movf	??_compensate_pressure+5,w
 11910  093A  0021               	movlb	1	; select bank1
 11911  093B  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 11912  093C  0020               	movlb	0	; select bank0
 11913  093D  085A               	movf	??_compensate_pressure+4,w
 11914  093E  0021               	movlb	1	; select bank1
 11915  093F  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 11916  0940  0020               	movlb	0	; select bank0
 11917  0941  0859               	movf	??_compensate_pressure+3,w
 11918  0942  0021               	movlb	1	; select bank1
 11919  0943  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 11920  0944  0020               	movlb	0	; select bank0
 11921  0945  0858               	movf	??_compensate_pressure+2,w
 11922  0946  0021               	movlb	1	; select bank1
 11923  0947  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 11924  0948  0020               	movlb	0	; select bank0
 11925  0949  0857               	movf	??_compensate_pressure+1,w
 11926  094A  0021               	movlb	1	; select bank1
 11927  094B  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 11928  094C  0020               	movlb	0	; select bank0
 11929  094D  0856               	movf	??_compensate_pressure,w
 11930  094E  0021               	movlb	1	; select bank1
 11931  094F  00CD               	movwf	compensate_pressure@var2^(0+128)
 11932                           
 11933                           ;BME280_driver/bme280.c: 1168:     var2 = var2 + (((int64_t)calib_data->dig_P4) * 343597
      +                          38368);
 11934  0950  30CD               	movlw	low compensate_pressure@var2
 11935  0951  0086               	movwf	6
 11936  0952  3000               	movlw	high compensate_pressure@var2
 11937  0953  0087               	movwf	7
 11938  0954  3F40               	moviw [0]fsr1
 11939  0955  0020               	movlb	0	; select bank0
 11940  0956  00D6               	movwf	??_compensate_pressure
 11941  0957  3F41               	moviw [1]fsr1
 11942  0958  00D7               	movwf	??_compensate_pressure+1
 11943  0959  3F42               	moviw [2]fsr1
 11944  095A  00D8               	movwf	??_compensate_pressure+2
 11945  095B  3F43               	moviw [3]fsr1
 11946  095C  00D9               	movwf	??_compensate_pressure+3
 11947  095D  3F44               	moviw [4]fsr1
 11948  095E  00DA               	movwf	??_compensate_pressure+4
 11949  095F  3F45               	moviw [5]fsr1
 11950  0960  00DB               	movwf	??_compensate_pressure+5
 11951  0961  3F46               	moviw [6]fsr1
 11952  0962  00DC               	movwf	??_compensate_pressure+6
 11953  0963  3F47               	moviw [7]fsr1
 11954  0964  00DD               	movwf	??_compensate_pressure+7
 11955  0965  0852               	movf	compensate_pressure@calib_data,w
 11956  0966  3E0C               	addlw	12
 11957  0967  0086               	movwf	6
 11958  0968  3001               	movlw	1	; select bank2/3
 11959  0969  0087               	movwf	7
 11960  096A  3F40               	moviw [0]fsr1
 11961  096B  00DE               	movwf	??_compensate_pressure+8
 11962  096C  3F41               	moviw [1]fsr1
 11963  096D  00DF               	movwf	??_compensate_pressure+9
 11964  096E  085E               	movf	??_compensate_pressure+8,w
 11965  096F  00E0               	movwf	??_compensate_pressure+10
 11966  0970  085F               	movf	??_compensate_pressure+9,w
 11967  0971  00E1               	movwf	??_compensate_pressure+11
 11968  0972  3000               	movlw	0
 11969  0973  1BE1               	btfsc	??_compensate_pressure+11,7
 11970  0974  30FF               	movlw	255
 11971  0975  00E2               	movwf	??_compensate_pressure+12
 11972  0976  00E3               	movwf	??_compensate_pressure+13
 11973  0977  00E4               	movwf	??_compensate_pressure+14
 11974  0978  00E5               	movwf	??_compensate_pressure+15
 11975  0979  00E6               	movwf	??_compensate_pressure+16
 11976  097A  00E7               	movwf	??_compensate_pressure+17
 11977  097B  3023               	movlw	35
 11978  097C                     u3305:	
 11979  097C  0020               	movlb	0	; select bank0
 11980  097D  35E0               	lslf	??_compensate_pressure+10,f
 11981  097E  0DE1               	rlf	??_compensate_pressure+11,f
 11982  097F  0DE2               	rlf	??_compensate_pressure+12,f
 11983  0980  0DE3               	rlf	??_compensate_pressure+13,f
 11984  0981  0DE4               	rlf	??_compensate_pressure+14,f
 11985  0982  0DE5               	rlf	??_compensate_pressure+15,f
 11986  0983  0DE6               	rlf	??_compensate_pressure+16,f
 11987  0984  0DE7               	rlf	??_compensate_pressure+17,f
 11988  0985  0B89               	decfsz	9,f
 11989  0986  297C               	goto	u3305
 11990  0987  0020               	movlb	0	; select bank0
 11991  0988  0860               	movf	??_compensate_pressure+10,w
 11992  0989  07D6               	addwf	??_compensate_pressure,f
 11993  098A  0861               	movf	??_compensate_pressure+11,w
 11994  098B  3DD7               	addwfc	??_compensate_pressure+1,f
 11995  098C  0862               	movf	??_compensate_pressure+12,w
 11996  098D  3DD8               	addwfc	??_compensate_pressure+2,f
 11997  098E  0863               	movf	??_compensate_pressure+13,w
 11998  098F  3DD9               	addwfc	??_compensate_pressure+3,f
 11999  0990  0864               	movf	??_compensate_pressure+14,w
 12000  0991  3DDA               	addwfc	??_compensate_pressure+4,f
 12001  0992  0865               	movf	??_compensate_pressure+15,w
 12002  0993  3DDB               	addwfc	??_compensate_pressure+5,f
 12003  0994  0866               	movf	??_compensate_pressure+16,w
 12004  0995  3DDC               	addwfc	??_compensate_pressure+6,f
 12005  0996  0867               	movf	??_compensate_pressure+17,w
 12006  0997  3DDD               	addwfc	??_compensate_pressure+7,f
 12007  0998  085D               	movf	??_compensate_pressure+7,w
 12008  0999  0021               	movlb	1	; select bank1
 12009  099A  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 12010  099B  0020               	movlb	0	; select bank0
 12011  099C  085C               	movf	??_compensate_pressure+6,w
 12012  099D  0021               	movlb	1	; select bank1
 12013  099E  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 12014  099F  0020               	movlb	0	; select bank0
 12015  09A0  085B               	movf	??_compensate_pressure+5,w
 12016  09A1  0021               	movlb	1	; select bank1
 12017  09A2  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 12018  09A3  0020               	movlb	0	; select bank0
 12019  09A4  085A               	movf	??_compensate_pressure+4,w
 12020  09A5  0021               	movlb	1	; select bank1
 12021  09A6  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 12022  09A7  0020               	movlb	0	; select bank0
 12023  09A8  0859               	movf	??_compensate_pressure+3,w
 12024  09A9  0021               	movlb	1	; select bank1
 12025  09AA  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 12026  09AB  0020               	movlb	0	; select bank0
 12027  09AC  0858               	movf	??_compensate_pressure+2,w
 12028  09AD  0021               	movlb	1	; select bank1
 12029  09AE  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 12030  09AF  0020               	movlb	0	; select bank0
 12031  09B0  0857               	movf	??_compensate_pressure+1,w
 12032  09B1  0021               	movlb	1	; select bank1
 12033  09B2  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 12034  09B3  0020               	movlb	0	; select bank0
 12035  09B4  0856               	movf	??_compensate_pressure,w
 12036  09B5  0021               	movlb	1	; select bank1
 12037  09B6  00CD               	movwf	compensate_pressure@var2^(0+128)
 12038                           
 12039                           ;BME280_driver/bme280.c: 1169:     var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) /
      +                           256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 12040  09B7  0020               	movlb	0	; select bank0
 12041  09B8  0852               	movf	compensate_pressure@calib_data,w
 12042  09B9  3E0A               	addlw	10
 12043  09BA  0086               	movwf	6
 12044  09BB  3001               	movlw	1	; select bank2/3
 12045  09BC  0087               	movwf	7
 12046  09BD  3F40               	moviw [0]fsr1
 12047  09BE  00D6               	movwf	??_compensate_pressure
 12048  09BF  3F41               	moviw [1]fsr1
 12049  09C0  00D7               	movwf	??_compensate_pressure+1
 12050  09C1  0856               	movf	??_compensate_pressure,w
 12051  09C2  00A0               	movwf	___omul@multiplier
 12052  09C3  0857               	movf	??_compensate_pressure+1,w
 12053  09C4  00A1               	movwf	___omul@multiplier+1
 12054  09C5  0D89               	rlf	9,f
 12055  09C6  3B89               	subwfb	9,f
 12056  09C7  0989               	comf	9,f
 12057  09C8  00A2               	movwf	___omul@multiplier+2
 12058  09C9  00A3               	movwf	___omul@multiplier+3
 12059  09CA  00A4               	movwf	___omul@multiplier+4
 12060  09CB  00A5               	movwf	___omul@multiplier+5
 12061  09CC  00A6               	movwf	___omul@multiplier+6
 12062  09CD  00A7               	movwf	___omul@multiplier+7
 12063  09CE  0021               	movlb	1	; select bank1
 12064  09CF  085D               	movf	compensate_pressure@var1^(0+128),w
 12065  09D0  0020               	movlb	0	; select bank0
 12066  09D1  00A8               	movwf	___omul@multiplicand
 12067  09D2  0021               	movlb	1	; select bank1
 12068  09D3  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 12069  09D4  0020               	movlb	0	; select bank0
 12070  09D5  00A9               	movwf	___omul@multiplicand+1
 12071  09D6  0021               	movlb	1	; select bank1
 12072  09D7  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 12073  09D8  0020               	movlb	0	; select bank0
 12074  09D9  00AA               	movwf	___omul@multiplicand+2
 12075  09DA  0021               	movlb	1	; select bank1
 12076  09DB  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 12077  09DC  0020               	movlb	0	; select bank0
 12078  09DD  00AB               	movwf	___omul@multiplicand+3
 12079  09DE  0021               	movlb	1	; select bank1
 12080  09DF  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 12081  09E0  0020               	movlb	0	; select bank0
 12082  09E1  00AC               	movwf	___omul@multiplicand+4
 12083  09E2  0021               	movlb	1	; select bank1
 12084  09E3  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 12085  09E4  0020               	movlb	0	; select bank0
 12086  09E5  00AD               	movwf	___omul@multiplicand+5
 12087  09E6  0021               	movlb	1	; select bank1
 12088  09E7  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 12089  09E8  0020               	movlb	0	; select bank0
 12090  09E9  00AE               	movwf	___omul@multiplicand+6
 12091  09EA  0021               	movlb	1	; select bank1
 12092  09EB  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 12093  09EC  0020               	movlb	0	; select bank0
 12094  09ED  00AF               	movwf	___omul@multiplicand+7
 12095  09EE  3191  2189  3188   	fcall	___omul
 12096  09F1  0820               	movf	?___omul,w
 12097  09F2  0021               	movlb	1	; select bank1
 12098  09F3  00C1               	movwf	_compensate_pressure$2393^(0+128)
 12099  09F4  0020               	movlb	0	; select bank0
 12100  09F5  0821               	movf	?___omul+1,w
 12101  09F6  0021               	movlb	1	; select bank1
 12102  09F7  00C2               	movwf	(_compensate_pressure$2393+1)^(0+128)
 12103  09F8  0020               	movlb	0	; select bank0
 12104  09F9  0822               	movf	?___omul+2,w
 12105  09FA  0021               	movlb	1	; select bank1
 12106  09FB  00C3               	movwf	(_compensate_pressure$2393+2)^(0+128)
 12107  09FC  0020               	movlb	0	; select bank0
 12108  09FD  0823               	movf	?___omul+3,w
 12109  09FE  0021               	movlb	1	; select bank1
 12110  09FF  00C4               	movwf	(_compensate_pressure$2393+3)^(0+128)
 12111  0A00  0020               	movlb	0	; select bank0
 12112  0A01  0824               	movf	?___omul+4,w
 12113  0A02  0021               	movlb	1	; select bank1
 12114  0A03  00C5               	movwf	(_compensate_pressure$2393+4)^(0+128)
 12115  0A04  0020               	movlb	0	; select bank0
 12116  0A05  0825               	movf	?___omul+5,w
 12117  0A06  0021               	movlb	1	; select bank1
 12118  0A07  00C6               	movwf	(_compensate_pressure$2393+5)^(0+128)
 12119  0A08  0020               	movlb	0	; select bank0
 12120  0A09  0826               	movf	?___omul+6,w
 12121  0A0A  0021               	movlb	1	; select bank1
 12122  0A0B  00C7               	movwf	(_compensate_pressure$2393+6)^(0+128)
 12123  0A0C  0020               	movlb	0	; select bank0
 12124  0A0D  0827               	movf	?___omul+7,w
 12125  0A0E  0021               	movlb	1	; select bank1
 12126  0A0F  00C8               	movwf	(_compensate_pressure$2393+7)^(0+128)
 12127                           
 12128                           ;BME280_driver/bme280.c: 1169:     var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) /
      +                           256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 12129  0A10  0020               	movlb	0	; select bank0
 12130  0A11  0852               	movf	compensate_pressure@calib_data,w
 12131  0A12  3E08               	addlw	8
 12132  0A13  0086               	movwf	6
 12133  0A14  3001               	movlw	1	; select bank2/3
 12134  0A15  0087               	movwf	7
 12135  0A16  3F40               	moviw [0]fsr1
 12136  0A17  00D6               	movwf	??_compensate_pressure
 12137  0A18  3F41               	moviw [1]fsr1
 12138  0A19  00D7               	movwf	??_compensate_pressure+1
 12139  0A1A  0856               	movf	??_compensate_pressure,w
 12140  0A1B  00A0               	movwf	___omul@multiplier
 12141  0A1C  0857               	movf	??_compensate_pressure+1,w
 12142  0A1D  00A1               	movwf	___omul@multiplier+1
 12143  0A1E  0D89               	rlf	9,f
 12144  0A1F  3B89               	subwfb	9,f
 12145  0A20  0989               	comf	9,f
 12146  0A21  00A2               	movwf	___omul@multiplier+2
 12147  0A22  00A3               	movwf	___omul@multiplier+3
 12148  0A23  00A4               	movwf	___omul@multiplier+4
 12149  0A24  00A5               	movwf	___omul@multiplier+5
 12150  0A25  00A6               	movwf	___omul@multiplier+6
 12151  0A26  00A7               	movwf	___omul@multiplier+7
 12152  0A27  0021               	movlb	1	; select bank1
 12153  0A28  085D               	movf	compensate_pressure@var1^(0+128),w
 12154  0A29  0020               	movlb	0	; select bank0
 12155  0A2A  00A8               	movwf	___omul@multiplicand
 12156  0A2B  0021               	movlb	1	; select bank1
 12157  0A2C  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 12158  0A2D  0020               	movlb	0	; select bank0
 12159  0A2E  00A9               	movwf	___omul@multiplicand+1
 12160  0A2F  0021               	movlb	1	; select bank1
 12161  0A30  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 12162  0A31  0020               	movlb	0	; select bank0
 12163  0A32  00AA               	movwf	___omul@multiplicand+2
 12164  0A33  0021               	movlb	1	; select bank1
 12165  0A34  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 12166  0A35  0020               	movlb	0	; select bank0
 12167  0A36  00AB               	movwf	___omul@multiplicand+3
 12168  0A37  0021               	movlb	1	; select bank1
 12169  0A38  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 12170  0A39  0020               	movlb	0	; select bank0
 12171  0A3A  00AC               	movwf	___omul@multiplicand+4
 12172  0A3B  0021               	movlb	1	; select bank1
 12173  0A3C  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 12174  0A3D  0020               	movlb	0	; select bank0
 12175  0A3E  00AD               	movwf	___omul@multiplicand+5
 12176  0A3F  0021               	movlb	1	; select bank1
 12177  0A40  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 12178  0A41  0020               	movlb	0	; select bank0
 12179  0A42  00AE               	movwf	___omul@multiplicand+6
 12180  0A43  0021               	movlb	1	; select bank1
 12181  0A44  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 12182  0A45  0020               	movlb	0	; select bank0
 12183  0A46  00AF               	movwf	___omul@multiplicand+7
 12184  0A47  3191  2189  3188   	fcall	___omul
 12185  0A4A  3020               	movlw	low ?___omul
 12186  0A4B  0086               	movwf	6
 12187  0A4C  3000               	movlw	high ?___omul
 12188  0A4D  0087               	movwf	7
 12189  0A4E  3F40               	moviw [0]fsr1
 12190  0A4F  00D8               	movwf	??_compensate_pressure+2
 12191  0A50  3F41               	moviw [1]fsr1
 12192  0A51  00D9               	movwf	??_compensate_pressure+3
 12193  0A52  3F42               	moviw [2]fsr1
 12194  0A53  00DA               	movwf	??_compensate_pressure+4
 12195  0A54  3F43               	moviw [3]fsr1
 12196  0A55  00DB               	movwf	??_compensate_pressure+5
 12197  0A56  3F44               	moviw [4]fsr1
 12198  0A57  00DC               	movwf	??_compensate_pressure+6
 12199  0A58  3F45               	moviw [5]fsr1
 12200  0A59  00DD               	movwf	??_compensate_pressure+7
 12201  0A5A  3F46               	moviw [6]fsr1
 12202  0A5B  00DE               	movwf	??_compensate_pressure+8
 12203  0A5C  3F47               	moviw [7]fsr1
 12204  0A5D  00DF               	movwf	??_compensate_pressure+9
 12205  0A5E  300C               	movlw	12
 12206  0A5F                     u3315:	
 12207  0A5F  0020               	movlb	0	; select bank0
 12208  0A60  35D8               	lslf	??_compensate_pressure+2,f
 12209  0A61  0DD9               	rlf	??_compensate_pressure+3,f
 12210  0A62  0DDA               	rlf	??_compensate_pressure+4,f
 12211  0A63  0DDB               	rlf	??_compensate_pressure+5,f
 12212  0A64  0DDC               	rlf	??_compensate_pressure+6,f
 12213  0A65  0DDD               	rlf	??_compensate_pressure+7,f
 12214  0A66  0DDE               	rlf	??_compensate_pressure+8,f
 12215  0A67  0DDF               	rlf	??_compensate_pressure+9,f
 12216  0A68  0B89               	decfsz	9,f
 12217  0A69  2A5F               	goto	u3315
 12218  0A6A  3000               	movlw	0
 12219  0A6B  0020               	movlb	0	; select bank0
 12220  0A6C  00BF               	movwf	___aodiv@divisor+7
 12221  0A6D  3000               	movlw	0
 12222  0A6E  00BE               	movwf	___aodiv@divisor+6
 12223  0A6F  3000               	movlw	0
 12224  0A70  00BD               	movwf	___aodiv@divisor+5
 12225  0A71  3000               	movlw	0
 12226  0A72  00BC               	movwf	___aodiv@divisor+4
 12227  0A73  3000               	movlw	0
 12228  0A74  00BB               	movwf	___aodiv@divisor+3
 12229  0A75  3000               	movlw	0
 12230  0A76  00BA               	movwf	___aodiv@divisor+2
 12231  0A77  3001               	movlw	1
 12232  0A78  00B9               	movwf	___aodiv@divisor+1
 12233  0A79  3000               	movlw	0
 12234  0A7A  00B8               	movwf	___aodiv@divisor
 12235  0A7B  0021               	movlb	1	; select bank1
 12236  0A7C  0841               	movf	_compensate_pressure$2393^(0+128),w
 12237  0A7D  0020               	movlb	0	; select bank0
 12238  0A7E  00A0               	movwf	___omul@multiplier
 12239  0A7F  0021               	movlb	1	; select bank1
 12240  0A80  0842               	movf	(_compensate_pressure$2393+1)^(0+128),w
 12241  0A81  0020               	movlb	0	; select bank0
 12242  0A82  00A1               	movwf	___omul@multiplier+1
 12243  0A83  0021               	movlb	1	; select bank1
 12244  0A84  0843               	movf	(_compensate_pressure$2393+2)^(0+128),w
 12245  0A85  0020               	movlb	0	; select bank0
 12246  0A86  00A2               	movwf	___omul@multiplier+2
 12247  0A87  0021               	movlb	1	; select bank1
 12248  0A88  0844               	movf	(_compensate_pressure$2393+3)^(0+128),w
 12249  0A89  0020               	movlb	0	; select bank0
 12250  0A8A  00A3               	movwf	___omul@multiplier+3
 12251  0A8B  0021               	movlb	1	; select bank1
 12252  0A8C  0845               	movf	(_compensate_pressure$2393+4)^(0+128),w
 12253  0A8D  0020               	movlb	0	; select bank0
 12254  0A8E  00A4               	movwf	___omul@multiplier+4
 12255  0A8F  0021               	movlb	1	; select bank1
 12256  0A90  0846               	movf	(_compensate_pressure$2393+5)^(0+128),w
 12257  0A91  0020               	movlb	0	; select bank0
 12258  0A92  00A5               	movwf	___omul@multiplier+5
 12259  0A93  0021               	movlb	1	; select bank1
 12260  0A94  0847               	movf	(_compensate_pressure$2393+6)^(0+128),w
 12261  0A95  0020               	movlb	0	; select bank0
 12262  0A96  00A6               	movwf	___omul@multiplier+6
 12263  0A97  0021               	movlb	1	; select bank1
 12264  0A98  0848               	movf	(_compensate_pressure$2393+7)^(0+128),w
 12265  0A99  0020               	movlb	0	; select bank0
 12266  0A9A  00A7               	movwf	___omul@multiplier+7
 12267  0A9B  0021               	movlb	1	; select bank1
 12268  0A9C  085D               	movf	compensate_pressure@var1^(0+128),w
 12269  0A9D  0020               	movlb	0	; select bank0
 12270  0A9E  00A8               	movwf	___omul@multiplicand
 12271  0A9F  0021               	movlb	1	; select bank1
 12272  0AA0  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 12273  0AA1  0020               	movlb	0	; select bank0
 12274  0AA2  00A9               	movwf	___omul@multiplicand+1
 12275  0AA3  0021               	movlb	1	; select bank1
 12276  0AA4  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 12277  0AA5  0020               	movlb	0	; select bank0
 12278  0AA6  00AA               	movwf	___omul@multiplicand+2
 12279  0AA7  0021               	movlb	1	; select bank1
 12280  0AA8  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 12281  0AA9  0020               	movlb	0	; select bank0
 12282  0AAA  00AB               	movwf	___omul@multiplicand+3
 12283  0AAB  0021               	movlb	1	; select bank1
 12284  0AAC  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 12285  0AAD  0020               	movlb	0	; select bank0
 12286  0AAE  00AC               	movwf	___omul@multiplicand+4
 12287  0AAF  0021               	movlb	1	; select bank1
 12288  0AB0  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 12289  0AB1  0020               	movlb	0	; select bank0
 12290  0AB2  00AD               	movwf	___omul@multiplicand+5
 12291  0AB3  0021               	movlb	1	; select bank1
 12292  0AB4  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 12293  0AB5  0020               	movlb	0	; select bank0
 12294  0AB6  00AE               	movwf	___omul@multiplicand+6
 12295  0AB7  0021               	movlb	1	; select bank1
 12296  0AB8  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 12297  0AB9  0020               	movlb	0	; select bank0
 12298  0ABA  00AF               	movwf	___omul@multiplicand+7
 12299  0ABB  3191  2189  3188   	fcall	___omul
 12300  0ABE  0820               	movf	?___omul,w
 12301  0ABF  00C0               	movwf	___aodiv@dividend
 12302  0AC0  0821               	movf	?___omul+1,w
 12303  0AC1  00C1               	movwf	___aodiv@dividend+1
 12304  0AC2  0822               	movf	?___omul+2,w
 12305  0AC3  00C2               	movwf	___aodiv@dividend+2
 12306  0AC4  0823               	movf	?___omul+3,w
 12307  0AC5  00C3               	movwf	___aodiv@dividend+3
 12308  0AC6  0824               	movf	?___omul+4,w
 12309  0AC7  00C4               	movwf	___aodiv@dividend+4
 12310  0AC8  0825               	movf	?___omul+5,w
 12311  0AC9  00C5               	movwf	___aodiv@dividend+5
 12312  0ACA  0826               	movf	?___omul+6,w
 12313  0ACB  00C6               	movwf	___aodiv@dividend+6
 12314  0ACC  0827               	movf	?___omul+7,w
 12315  0ACD  00C7               	movwf	___aodiv@dividend+7
 12316  0ACE  3196  2616  3188   	fcall	___aodiv
 12317  0AD1  3038               	movlw	low ?___aodiv
 12318  0AD2  0086               	movwf	6
 12319  0AD3  3000               	movlw	high ?___aodiv
 12320  0AD4  0087               	movwf	7
 12321  0AD5  3F40               	moviw [0]fsr1
 12322  0AD6  07D8               	addwf	??_compensate_pressure+2,f
 12323  0AD7  3F41               	moviw [1]fsr1
 12324  0AD8  3DD9               	addwfc	??_compensate_pressure+3,f
 12325  0AD9  3F42               	moviw [2]fsr1
 12326  0ADA  3DDA               	addwfc	??_compensate_pressure+4,f
 12327  0ADB  3F43               	moviw [3]fsr1
 12328  0ADC  3DDB               	addwfc	??_compensate_pressure+5,f
 12329  0ADD  3F44               	moviw [4]fsr1
 12330  0ADE  3DDC               	addwfc	??_compensate_pressure+6,f
 12331  0ADF  3F45               	moviw [5]fsr1
 12332  0AE0  3DDD               	addwfc	??_compensate_pressure+7,f
 12333  0AE1  3F46               	moviw [6]fsr1
 12334  0AE2  3DDE               	addwfc	??_compensate_pressure+8,f
 12335  0AE3  3F47               	moviw [7]fsr1
 12336  0AE4  3DDF               	addwfc	??_compensate_pressure+9,f
 12337  0AE5  085F               	movf	??_compensate_pressure+9,w
 12338  0AE6  0021               	movlb	1	; select bank1
 12339  0AE7  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
 12340  0AE8  0020               	movlb	0	; select bank0
 12341  0AE9  085E               	movf	??_compensate_pressure+8,w
 12342  0AEA  0021               	movlb	1	; select bank1
 12343  0AEB  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
 12344  0AEC  0020               	movlb	0	; select bank0
 12345  0AED  085D               	movf	??_compensate_pressure+7,w
 12346  0AEE  0021               	movlb	1	; select bank1
 12347  0AEF  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
 12348  0AF0  0020               	movlb	0	; select bank0
 12349  0AF1  085C               	movf	??_compensate_pressure+6,w
 12350  0AF2  0021               	movlb	1	; select bank1
 12351  0AF3  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
 12352  0AF4  0020               	movlb	0	; select bank0
 12353  0AF5  085B               	movf	??_compensate_pressure+5,w
 12354  0AF6  0021               	movlb	1	; select bank1
 12355  0AF7  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
 12356  0AF8  0020               	movlb	0	; select bank0
 12357  0AF9  085A               	movf	??_compensate_pressure+4,w
 12358  0AFA  0021               	movlb	1	; select bank1
 12359  0AFB  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
 12360  0AFC  0020               	movlb	0	; select bank0
 12361  0AFD  0859               	movf	??_compensate_pressure+3,w
 12362  0AFE  0021               	movlb	1	; select bank1
 12363  0AFF  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
 12364  0B00  0020               	movlb	0	; select bank0
 12365  0B01  0858               	movf	??_compensate_pressure+2,w
 12366  0B02  0021               	movlb	1	; select bank1
 12367  0B03  00DD               	movwf	compensate_pressure@var1^(0+128)
 12368                           
 12369                           ;BME280_driver/bme280.c: 1171:     var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) 
      +                          / 8589934592;
 12370  0B04  3000               	movlw	0
 12371  0B05  0020               	movlb	0	; select bank0
 12372  0B06  00BF               	movwf	___aodiv@divisor+7
 12373  0B07  3000               	movlw	0
 12374  0B08  00BE               	movwf	___aodiv@divisor+6
 12375  0B09  3000               	movlw	0
 12376  0B0A  00BD               	movwf	___aodiv@divisor+5
 12377  0B0B  3002               	movlw	2
 12378  0B0C  00BC               	movwf	___aodiv@divisor+4
 12379  0B0D  3000               	movlw	0
 12380  0B0E  00BB               	movwf	___aodiv@divisor+3
 12381  0B0F  3000               	movlw	0
 12382  0B10  00BA               	movwf	___aodiv@divisor+2
 12383  0B11  3000               	movlw	0
 12384  0B12  00B9               	movwf	___aodiv@divisor+1
 12385  0B13  3000               	movlw	0
 12386  0B14  00B8               	movwf	___aodiv@divisor
 12387  0B15  3000               	movlw	0
 12388  0B16  00D6               	movwf	??_compensate_pressure
 12389  0B17  3000               	movlw	0
 12390  0B18  00D7               	movwf	??_compensate_pressure+1
 12391  0B19  3000               	movlw	0
 12392  0B1A  00D8               	movwf	??_compensate_pressure+2
 12393  0B1B  3000               	movlw	0
 12394  0B1C  00D9               	movwf	??_compensate_pressure+3
 12395  0B1D  3000               	movlw	0
 12396  0B1E  00DA               	movwf	??_compensate_pressure+4
 12397  0B1F  3080               	movlw	128
 12398  0B20  00DB               	movwf	??_compensate_pressure+5
 12399  0B21  3000               	movlw	0
 12400  0B22  00DC               	movwf	??_compensate_pressure+6
 12401  0B23  3000               	movlw	0
 12402  0B24  00DD               	movwf	??_compensate_pressure+7
 12403  0B25  30DD               	movlw	low compensate_pressure@var1
 12404  0B26  0086               	movwf	6
 12405  0B27  3000               	movlw	high compensate_pressure@var1
 12406  0B28  0087               	movwf	7
 12407  0B29  3F40               	moviw [0]fsr1
 12408  0B2A  07D6               	addwf	??_compensate_pressure,f
 12409  0B2B  3F41               	moviw [1]fsr1
 12410  0B2C  3DD7               	addwfc	??_compensate_pressure+1,f
 12411  0B2D  3F42               	moviw [2]fsr1
 12412  0B2E  3DD8               	addwfc	??_compensate_pressure+2,f
 12413  0B2F  3F43               	moviw [3]fsr1
 12414  0B30  3DD9               	addwfc	??_compensate_pressure+3,f
 12415  0B31  3F44               	moviw [4]fsr1
 12416  0B32  3DDA               	addwfc	??_compensate_pressure+4,f
 12417  0B33  3F45               	moviw [5]fsr1
 12418  0B34  3DDB               	addwfc	??_compensate_pressure+5,f
 12419  0B35  3F46               	moviw [6]fsr1
 12420  0B36  3DDC               	addwfc	??_compensate_pressure+6,f
 12421  0B37  3F47               	moviw [7]fsr1
 12422  0B38  3DDD               	addwfc	??_compensate_pressure+7,f
 12423  0B39  085D               	movf	??_compensate_pressure+7,w
 12424  0B3A  00A7               	movwf	___omul@multiplier+7
 12425  0B3B  085C               	movf	??_compensate_pressure+6,w
 12426  0B3C  00A6               	movwf	___omul@multiplier+6
 12427  0B3D  085B               	movf	??_compensate_pressure+5,w
 12428  0B3E  00A5               	movwf	___omul@multiplier+5
 12429  0B3F  085A               	movf	??_compensate_pressure+4,w
 12430  0B40  00A4               	movwf	___omul@multiplier+4
 12431  0B41  0859               	movf	??_compensate_pressure+3,w
 12432  0B42  00A3               	movwf	___omul@multiplier+3
 12433  0B43  0858               	movf	??_compensate_pressure+2,w
 12434  0B44  00A2               	movwf	___omul@multiplier+2
 12435  0B45  0857               	movf	??_compensate_pressure+1,w
 12436  0B46  00A1               	movwf	___omul@multiplier+1
 12437  0B47  0856               	movf	??_compensate_pressure,w
 12438  0B48  00A0               	movwf	___omul@multiplier
 12439  0B49  0852               	movf	compensate_pressure@calib_data,w
 12440  0B4A  3E06               	addlw	6
 12441  0B4B  0086               	movwf	6
 12442  0B4C  3001               	movlw	1	; select bank2/3
 12443  0B4D  0087               	movwf	7
 12444  0B4E  3F40               	moviw [0]fsr1
 12445  0B4F  00A8               	movwf	___omul@multiplicand
 12446  0B50  3F41               	moviw [1]fsr1
 12447  0B51  00A9               	movwf	___omul@multiplicand+1
 12448  0B52  01AA               	clrf	___omul@multiplicand+2
 12449  0B53  01AB               	clrf	___omul@multiplicand+3
 12450  0B54  01AC               	clrf	___omul@multiplicand+4
 12451  0B55  01AD               	clrf	___omul@multiplicand+5
 12452  0B56  01AE               	clrf	___omul@multiplicand+6
 12453  0B57  01AF               	clrf	___omul@multiplicand+7
 12454  0B58  3191  2189  3188   	fcall	___omul
 12455  0B5B  0820               	movf	?___omul,w
 12456  0B5C  00C0               	movwf	___aodiv@dividend
 12457  0B5D  0821               	movf	?___omul+1,w
 12458  0B5E  00C1               	movwf	___aodiv@dividend+1
 12459  0B5F  0822               	movf	?___omul+2,w
 12460  0B60  00C2               	movwf	___aodiv@dividend+2
 12461  0B61  0823               	movf	?___omul+3,w
 12462  0B62  00C3               	movwf	___aodiv@dividend+3
 12463  0B63  0824               	movf	?___omul+4,w
 12464  0B64  00C4               	movwf	___aodiv@dividend+4
 12465  0B65  0825               	movf	?___omul+5,w
 12466  0B66  00C5               	movwf	___aodiv@dividend+5
 12467  0B67  0826               	movf	?___omul+6,w
 12468  0B68  00C6               	movwf	___aodiv@dividend+6
 12469  0B69  0827               	movf	?___omul+7,w
 12470  0B6A  00C7               	movwf	___aodiv@dividend+7
 12471  0B6B  3196  2616  3188   	fcall	___aodiv
 12472  0B6E  0838               	movf	?___aodiv,w
 12473  0B6F  0021               	movlb	1	; select bank1
 12474  0B70  00DD               	movwf	compensate_pressure@var1^(0+128)
 12475  0B71  0020               	movlb	0	; select bank0
 12476  0B72  0839               	movf	?___aodiv+1,w
 12477  0B73  0021               	movlb	1	; select bank1
 12478  0B74  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
 12479  0B75  0020               	movlb	0	; select bank0
 12480  0B76  083A               	movf	?___aodiv+2,w
 12481  0B77  0021               	movlb	1	; select bank1
 12482  0B78  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
 12483  0B79  0020               	movlb	0	; select bank0
 12484  0B7A  083B               	movf	?___aodiv+3,w
 12485  0B7B  0021               	movlb	1	; select bank1
 12486  0B7C  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
 12487  0B7D  0020               	movlb	0	; select bank0
 12488  0B7E  083C               	movf	?___aodiv+4,w
 12489  0B7F  0021               	movlb	1	; select bank1
 12490  0B80  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
 12491  0B81  0020               	movlb	0	; select bank0
 12492  0B82  083D               	movf	?___aodiv+5,w
 12493  0B83  0021               	movlb	1	; select bank1
 12494  0B84  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
 12495  0B85  0020               	movlb	0	; select bank0
 12496  0B86  083E               	movf	?___aodiv+6,w
 12497  0B87  0021               	movlb	1	; select bank1
 12498  0B88  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
 12499  0B89  0020               	movlb	0	; select bank0
 12500  0B8A  083F               	movf	?___aodiv+7,w
 12501  0B8B  0021               	movlb	1	; select bank1
 12502  0B8C  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
 12503                           
 12504                           ;BME280_driver/bme280.c: 1174:     if (var1 != 0)
 12505  0B8D  085D               	movf	compensate_pressure@var1^(0+128),w
 12506  0B8E  045E               	iorwf	(compensate_pressure@var1+1)^(0+128),w
 12507  0B8F  045F               	iorwf	(compensate_pressure@var1+2)^(0+128),w
 12508  0B90  0460               	iorwf	(compensate_pressure@var1+3)^(0+128),w
 12509  0B91  0461               	iorwf	(compensate_pressure@var1+4)^(0+128),w
 12510  0B92  0462               	iorwf	(compensate_pressure@var1+5)^(0+128),w
 12511  0B93  0463               	iorwf	(compensate_pressure@var1+6)^(0+128),w
 12512  0B94  0464               	iorwf	(compensate_pressure@var1+7)^(0+128),w
 12513  0B95  1903               	skipnz
 12514  0B96  2FD7               	goto	l3424
 12515                           
 12516                           ;BME280_driver/bme280.c: 1175:     {;BME280_driver/bme280.c: 1176:         var4 = 104857
      +                          6 - uncomp_data->pressure;
 12517  0B97  0838               	movf	compensate_pressure@uncomp_data^(0+128),w
 12518  0B98  0086               	movwf	6
 12519  0B99  3001               	movlw	1	; select bank2/3
 12520  0B9A  0087               	movwf	7
 12521  0B9B  3F40               	moviw [0]fsr1
 12522  0B9C  0020               	movlb	0	; select bank0
 12523  0B9D  00D6               	movwf	??_compensate_pressure
 12524  0B9E  3F41               	moviw [1]fsr1
 12525  0B9F  00D7               	movwf	??_compensate_pressure+1
 12526  0BA0  3F42               	moviw [2]fsr1
 12527  0BA1  00D8               	movwf	??_compensate_pressure+2
 12528  0BA2  3F43               	moviw [3]fsr1
 12529  0BA3  00D9               	movwf	??_compensate_pressure+3
 12530  0BA4  3000               	movlw	0
 12531  0BA5  00DA               	movwf	??_compensate_pressure+4
 12532  0BA6  3000               	movlw	0
 12533  0BA7  00DB               	movwf	??_compensate_pressure+5
 12534  0BA8  3010               	movlw	16
 12535  0BA9  00DC               	movwf	??_compensate_pressure+6
 12536  0BAA  3000               	movlw	0
 12537  0BAB  00DD               	movwf	??_compensate_pressure+7
 12538  0BAC  0856               	movf	??_compensate_pressure,w
 12539  0BAD  02DA               	subwf	??_compensate_pressure+4,f
 12540  0BAE  0857               	movf	??_compensate_pressure+1,w
 12541  0BAF  3BDB               	subwfb	??_compensate_pressure+5,f
 12542  0BB0  0858               	movf	??_compensate_pressure+2,w
 12543  0BB1  3BDC               	subwfb	??_compensate_pressure+6,f
 12544  0BB2  0859               	movf	??_compensate_pressure+3,w
 12545  0BB3  3BDD               	subwfb	??_compensate_pressure+7,f
 12546  0BB4  085A               	movf	??_compensate_pressure+4,w
 12547  0BB5  00DE               	movwf	??_compensate_pressure+8
 12548  0BB6  085B               	movf	??_compensate_pressure+5,w
 12549  0BB7  00DF               	movwf	??_compensate_pressure+9
 12550  0BB8  085C               	movf	??_compensate_pressure+6,w
 12551  0BB9  00E0               	movwf	??_compensate_pressure+10
 12552  0BBA  085D               	movf	??_compensate_pressure+7,w
 12553  0BBB  00E1               	movwf	??_compensate_pressure+11
 12554  0BBC  01E2               	clrf	??_compensate_pressure+12
 12555  0BBD  01E3               	clrf	??_compensate_pressure+13
 12556  0BBE  01E4               	clrf	??_compensate_pressure+14
 12557  0BBF  01E5               	clrf	??_compensate_pressure+15
 12558  0BC0  0865               	movf	??_compensate_pressure+15,w
 12559  0BC1  0021               	movlb	1	; select bank1
 12560  0BC2  00DC               	movwf	(compensate_pressure@var4+7)^(0+128)
 12561  0BC3  0020               	movlb	0	; select bank0
 12562  0BC4  0864               	movf	??_compensate_pressure+14,w
 12563  0BC5  0021               	movlb	1	; select bank1
 12564  0BC6  00DB               	movwf	(compensate_pressure@var4+6)^(0+128)
 12565  0BC7  0020               	movlb	0	; select bank0
 12566  0BC8  0863               	movf	??_compensate_pressure+13,w
 12567  0BC9  0021               	movlb	1	; select bank1
 12568  0BCA  00DA               	movwf	(compensate_pressure@var4+5)^(0+128)
 12569  0BCB  0020               	movlb	0	; select bank0
 12570  0BCC  0862               	movf	??_compensate_pressure+12,w
 12571  0BCD  0021               	movlb	1	; select bank1
 12572  0BCE  00D9               	movwf	(compensate_pressure@var4+4)^(0+128)
 12573  0BCF  0020               	movlb	0	; select bank0
 12574  0BD0  0861               	movf	??_compensate_pressure+11,w
 12575  0BD1  0021               	movlb	1	; select bank1
 12576  0BD2  00D8               	movwf	(compensate_pressure@var4+3)^(0+128)
 12577  0BD3  0020               	movlb	0	; select bank0
 12578  0BD4  0860               	movf	??_compensate_pressure+10,w
 12579  0BD5  0021               	movlb	1	; select bank1
 12580  0BD6  00D7               	movwf	(compensate_pressure@var4+2)^(0+128)
 12581  0BD7  0020               	movlb	0	; select bank0
 12582  0BD8  085F               	movf	??_compensate_pressure+9,w
 12583  0BD9  0021               	movlb	1	; select bank1
 12584  0BDA  00D6               	movwf	(compensate_pressure@var4+1)^(0+128)
 12585  0BDB  0020               	movlb	0	; select bank0
 12586  0BDC  085E               	movf	??_compensate_pressure+8,w
 12587  0BDD  0021               	movlb	1	; select bank1
 12588  0BDE  00D5               	movwf	compensate_pressure@var4^(0+128)
 12589                           
 12590                           ;BME280_driver/bme280.c: 1177:         var4 = (((var4 * 2147483648LL) - var2) * 3125) / 
      +                          var1;
 12591  0BDF  085D               	movf	compensate_pressure@var1^(0+128),w
 12592  0BE0  0020               	movlb	0	; select bank0
 12593  0BE1  00B8               	movwf	___aodiv@divisor
 12594  0BE2  0021               	movlb	1	; select bank1
 12595  0BE3  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 12596  0BE4  0020               	movlb	0	; select bank0
 12597  0BE5  00B9               	movwf	___aodiv@divisor+1
 12598  0BE6  0021               	movlb	1	; select bank1
 12599  0BE7  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 12600  0BE8  0020               	movlb	0	; select bank0
 12601  0BE9  00BA               	movwf	___aodiv@divisor+2
 12602  0BEA  0021               	movlb	1	; select bank1
 12603  0BEB  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 12604  0BEC  0020               	movlb	0	; select bank0
 12605  0BED  00BB               	movwf	___aodiv@divisor+3
 12606  0BEE  0021               	movlb	1	; select bank1
 12607  0BEF  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 12608  0BF0  0020               	movlb	0	; select bank0
 12609  0BF1  00BC               	movwf	___aodiv@divisor+4
 12610  0BF2  0021               	movlb	1	; select bank1
 12611  0BF3  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 12612  0BF4  0020               	movlb	0	; select bank0
 12613  0BF5  00BD               	movwf	___aodiv@divisor+5
 12614  0BF6  0021               	movlb	1	; select bank1
 12615  0BF7  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 12616  0BF8  0020               	movlb	0	; select bank0
 12617  0BF9  00BE               	movwf	___aodiv@divisor+6
 12618  0BFA  0021               	movlb	1	; select bank1
 12619  0BFB  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 12620  0BFC  0020               	movlb	0	; select bank0
 12621  0BFD  00BF               	movwf	___aodiv@divisor+7
 12622  0BFE  30D5               	movlw	low compensate_pressure@var4
 12623  0BFF  0086               	movwf	6
 12624  0C00  3000               	movlw	high compensate_pressure@var4
 12625  0C01  0087               	movwf	7
 12626  0C02  3F40               	moviw [0]fsr1
 12627  0C03  00D6               	movwf	??_compensate_pressure
 12628  0C04  3F41               	moviw [1]fsr1
 12629  0C05  00D7               	movwf	??_compensate_pressure+1
 12630  0C06  3F42               	moviw [2]fsr1
 12631  0C07  00D8               	movwf	??_compensate_pressure+2
 12632  0C08  3F43               	moviw [3]fsr1
 12633  0C09  00D9               	movwf	??_compensate_pressure+3
 12634  0C0A  3F44               	moviw [4]fsr1
 12635  0C0B  00DA               	movwf	??_compensate_pressure+4
 12636  0C0C  3F45               	moviw [5]fsr1
 12637  0C0D  00DB               	movwf	??_compensate_pressure+5
 12638  0C0E  3F46               	moviw [6]fsr1
 12639  0C0F  00DC               	movwf	??_compensate_pressure+6
 12640  0C10  3F47               	moviw [7]fsr1
 12641  0C11  00DD               	movwf	??_compensate_pressure+7
 12642  0C12  301F               	movlw	31
 12643  0C13                     u3335:	
 12644  0C13  0020               	movlb	0	; select bank0
 12645  0C14  35D6               	lslf	??_compensate_pressure,f
 12646  0C15  0DD7               	rlf	??_compensate_pressure+1,f
 12647  0C16  0DD8               	rlf	??_compensate_pressure+2,f
 12648  0C17  0DD9               	rlf	??_compensate_pressure+3,f
 12649  0C18  0DDA               	rlf	??_compensate_pressure+4,f
 12650  0C19  0DDB               	rlf	??_compensate_pressure+5,f
 12651  0C1A  0DDC               	rlf	??_compensate_pressure+6,f
 12652  0C1B  0DDD               	rlf	??_compensate_pressure+7,f
 12653  0C1C  0B89               	decfsz	9,f
 12654  0C1D  2C13               	goto	u3335
 12655  0C1E  0021               	movlb	1	; select bank1
 12656  0C1F  084D               	movf	compensate_pressure@var2^(0+128),w
 12657  0C20  0020               	movlb	0	; select bank0
 12658  0C21  02D6               	subwf	??_compensate_pressure,f
 12659  0C22  0021               	movlb	1	; select bank1
 12660  0C23  084E               	movf	(compensate_pressure@var2+1)^(0+128),w
 12661  0C24  0020               	movlb	0	; select bank0
 12662  0C25  3BD7               	subwfb	??_compensate_pressure+1,f
 12663  0C26  0021               	movlb	1	; select bank1
 12664  0C27  084F               	movf	(compensate_pressure@var2+2)^(0+128),w
 12665  0C28  0020               	movlb	0	; select bank0
 12666  0C29  3BD8               	subwfb	??_compensate_pressure+2,f
 12667  0C2A  0021               	movlb	1	; select bank1
 12668  0C2B  0850               	movf	(compensate_pressure@var2+3)^(0+128),w
 12669  0C2C  0020               	movlb	0	; select bank0
 12670  0C2D  3BD9               	subwfb	??_compensate_pressure+3,f
 12671  0C2E  0021               	movlb	1	; select bank1
 12672  0C2F  0851               	movf	(compensate_pressure@var2+4)^(0+128),w
 12673  0C30  0020               	movlb	0	; select bank0
 12674  0C31  3BDA               	subwfb	??_compensate_pressure+4,f
 12675  0C32  0021               	movlb	1	; select bank1
 12676  0C33  0852               	movf	(compensate_pressure@var2+5)^(0+128),w
 12677  0C34  0020               	movlb	0	; select bank0
 12678  0C35  3BDB               	subwfb	??_compensate_pressure+5,f
 12679  0C36  0021               	movlb	1	; select bank1
 12680  0C37  0853               	movf	(compensate_pressure@var2+6)^(0+128),w
 12681  0C38  0020               	movlb	0	; select bank0
 12682  0C39  3BDC               	subwfb	??_compensate_pressure+6,f
 12683  0C3A  0021               	movlb	1	; select bank1
 12684  0C3B  0854               	movf	(compensate_pressure@var2+7)^(0+128),w
 12685  0C3C  0020               	movlb	0	; select bank0
 12686  0C3D  3BDD               	subwfb	??_compensate_pressure+7,f
 12687  0C3E  085D               	movf	??_compensate_pressure+7,w
 12688  0C3F  00A7               	movwf	___omul@multiplier+7
 12689  0C40  085C               	movf	??_compensate_pressure+6,w
 12690  0C41  00A6               	movwf	___omul@multiplier+6
 12691  0C42  085B               	movf	??_compensate_pressure+5,w
 12692  0C43  00A5               	movwf	___omul@multiplier+5
 12693  0C44  085A               	movf	??_compensate_pressure+4,w
 12694  0C45  00A4               	movwf	___omul@multiplier+4
 12695  0C46  0859               	movf	??_compensate_pressure+3,w
 12696  0C47  00A3               	movwf	___omul@multiplier+3
 12697  0C48  0858               	movf	??_compensate_pressure+2,w
 12698  0C49  00A2               	movwf	___omul@multiplier+2
 12699  0C4A  0857               	movf	??_compensate_pressure+1,w
 12700  0C4B  00A1               	movwf	___omul@multiplier+1
 12701  0C4C  0856               	movf	??_compensate_pressure,w
 12702  0C4D  00A0               	movwf	___omul@multiplier
 12703  0C4E  3000               	movlw	0
 12704  0C4F  00AF               	movwf	___omul@multiplicand+7
 12705  0C50  3000               	movlw	0
 12706  0C51  00AE               	movwf	___omul@multiplicand+6
 12707  0C52  3000               	movlw	0
 12708  0C53  00AD               	movwf	___omul@multiplicand+5
 12709  0C54  3000               	movlw	0
 12710  0C55  00AC               	movwf	___omul@multiplicand+4
 12711  0C56  3000               	movlw	0
 12712  0C57  00AB               	movwf	___omul@multiplicand+3
 12713  0C58  3000               	movlw	0
 12714  0C59  00AA               	movwf	___omul@multiplicand+2
 12715  0C5A  300C               	movlw	12
 12716  0C5B  00A9               	movwf	___omul@multiplicand+1
 12717  0C5C  3035               	movlw	53
 12718  0C5D  00A8               	movwf	___omul@multiplicand
 12719  0C5E  3191  2189  3188   	fcall	___omul
 12720  0C61  0820               	movf	?___omul,w
 12721  0C62  00C0               	movwf	___aodiv@dividend
 12722  0C63  0821               	movf	?___omul+1,w
 12723  0C64  00C1               	movwf	___aodiv@dividend+1
 12724  0C65  0822               	movf	?___omul+2,w
 12725  0C66  00C2               	movwf	___aodiv@dividend+2
 12726  0C67  0823               	movf	?___omul+3,w
 12727  0C68  00C3               	movwf	___aodiv@dividend+3
 12728  0C69  0824               	movf	?___omul+4,w
 12729  0C6A  00C4               	movwf	___aodiv@dividend+4
 12730  0C6B  0825               	movf	?___omul+5,w
 12731  0C6C  00C5               	movwf	___aodiv@dividend+5
 12732  0C6D  0826               	movf	?___omul+6,w
 12733  0C6E  00C6               	movwf	___aodiv@dividend+6
 12734  0C6F  0827               	movf	?___omul+7,w
 12735  0C70  00C7               	movwf	___aodiv@dividend+7
 12736  0C71  3196  2616  3188   	fcall	___aodiv
 12737  0C74  0838               	movf	?___aodiv,w
 12738  0C75  0021               	movlb	1	; select bank1
 12739  0C76  00D5               	movwf	compensate_pressure@var4^(0+128)
 12740  0C77  0020               	movlb	0	; select bank0
 12741  0C78  0839               	movf	?___aodiv+1,w
 12742  0C79  0021               	movlb	1	; select bank1
 12743  0C7A  00D6               	movwf	(compensate_pressure@var4+1)^(0+128)
 12744  0C7B  0020               	movlb	0	; select bank0
 12745  0C7C  083A               	movf	?___aodiv+2,w
 12746  0C7D  0021               	movlb	1	; select bank1
 12747  0C7E  00D7               	movwf	(compensate_pressure@var4+2)^(0+128)
 12748  0C7F  0020               	movlb	0	; select bank0
 12749  0C80  083B               	movf	?___aodiv+3,w
 12750  0C81  0021               	movlb	1	; select bank1
 12751  0C82  00D8               	movwf	(compensate_pressure@var4+3)^(0+128)
 12752  0C83  0020               	movlb	0	; select bank0
 12753  0C84  083C               	movf	?___aodiv+4,w
 12754  0C85  0021               	movlb	1	; select bank1
 12755  0C86  00D9               	movwf	(compensate_pressure@var4+4)^(0+128)
 12756  0C87  0020               	movlb	0	; select bank0
 12757  0C88  083D               	movf	?___aodiv+5,w
 12758  0C89  0021               	movlb	1	; select bank1
 12759  0C8A  00DA               	movwf	(compensate_pressure@var4+5)^(0+128)
 12760  0C8B  0020               	movlb	0	; select bank0
 12761  0C8C  083E               	movf	?___aodiv+6,w
 12762  0C8D  0021               	movlb	1	; select bank1
 12763  0C8E  00DB               	movwf	(compensate_pressure@var4+6)^(0+128)
 12764  0C8F  0020               	movlb	0	; select bank0
 12765  0C90  083F               	movf	?___aodiv+7,w
 12766  0C91  0021               	movlb	1	; select bank1
 12767  0C92  00DC               	movwf	(compensate_pressure@var4+7)^(0+128)
 12768                           
 12769                           ;BME280_driver/bme280.c: 1178:         var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8
      +                          192) * (var4 / 8192)) / 33554432;
 12770  0C93  0020               	movlb	0	; select bank0
 12771  0C94  0852               	movf	compensate_pressure@calib_data,w
 12772  0C95  3E16               	addlw	22
 12773  0C96  0086               	movwf	6
 12774  0C97  3001               	movlw	1	; select bank2/3
 12775  0C98  0087               	movwf	7
 12776  0C99  3F40               	moviw [0]fsr1
 12777  0C9A  00D6               	movwf	??_compensate_pressure
 12778  0C9B  3F41               	moviw [1]fsr1
 12779  0C9C  00D7               	movwf	??_compensate_pressure+1
 12780  0C9D  0856               	movf	??_compensate_pressure,w
 12781  0C9E  00A0               	movwf	___omul@multiplier
 12782  0C9F  0857               	movf	??_compensate_pressure+1,w
 12783  0CA0  00A1               	movwf	___omul@multiplier+1
 12784  0CA1  0D89               	rlf	9,f
 12785  0CA2  3B89               	subwfb	9,f
 12786  0CA3  0989               	comf	9,f
 12787  0CA4  00A2               	movwf	___omul@multiplier+2
 12788  0CA5  00A3               	movwf	___omul@multiplier+3
 12789  0CA6  00A4               	movwf	___omul@multiplier+4
 12790  0CA7  00A5               	movwf	___omul@multiplier+5
 12791  0CA8  00A6               	movwf	___omul@multiplier+6
 12792  0CA9  00A7               	movwf	___omul@multiplier+7
 12793  0CAA  3000               	movlw	0
 12794  0CAB  00BF               	movwf	___aodiv@divisor+7
 12795  0CAC  3000               	movlw	0
 12796  0CAD  00BE               	movwf	___aodiv@divisor+6
 12797  0CAE  3000               	movlw	0
 12798  0CAF  00BD               	movwf	___aodiv@divisor+5
 12799  0CB0  3000               	movlw	0
 12800  0CB1  00BC               	movwf	___aodiv@divisor+4
 12801  0CB2  3000               	movlw	0
 12802  0CB3  00BB               	movwf	___aodiv@divisor+3
 12803  0CB4  3000               	movlw	0
 12804  0CB5  00BA               	movwf	___aodiv@divisor+2
 12805  0CB6  3020               	movlw	32
 12806  0CB7  00B9               	movwf	___aodiv@divisor+1
 12807  0CB8  3000               	movlw	0
 12808  0CB9  00B8               	movwf	___aodiv@divisor
 12809  0CBA  0021               	movlb	1	; select bank1
 12810  0CBB  0855               	movf	compensate_pressure@var4^(0+128),w
 12811  0CBC  0020               	movlb	0	; select bank0
 12812  0CBD  00C0               	movwf	___aodiv@dividend
 12813  0CBE  0021               	movlb	1	; select bank1
 12814  0CBF  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 12815  0CC0  0020               	movlb	0	; select bank0
 12816  0CC1  00C1               	movwf	___aodiv@dividend+1
 12817  0CC2  0021               	movlb	1	; select bank1
 12818  0CC3  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 12819  0CC4  0020               	movlb	0	; select bank0
 12820  0CC5  00C2               	movwf	___aodiv@dividend+2
 12821  0CC6  0021               	movlb	1	; select bank1
 12822  0CC7  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 12823  0CC8  0020               	movlb	0	; select bank0
 12824  0CC9  00C3               	movwf	___aodiv@dividend+3
 12825  0CCA  0021               	movlb	1	; select bank1
 12826  0CCB  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 12827  0CCC  0020               	movlb	0	; select bank0
 12828  0CCD  00C4               	movwf	___aodiv@dividend+4
 12829  0CCE  0021               	movlb	1	; select bank1
 12830  0CCF  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 12831  0CD0  0020               	movlb	0	; select bank0
 12832  0CD1  00C5               	movwf	___aodiv@dividend+5
 12833  0CD2  0021               	movlb	1	; select bank1
 12834  0CD3  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 12835  0CD4  0020               	movlb	0	; select bank0
 12836  0CD5  00C6               	movwf	___aodiv@dividend+6
 12837  0CD6  0021               	movlb	1	; select bank1
 12838  0CD7  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 12839  0CD8  0020               	movlb	0	; select bank0
 12840  0CD9  00C7               	movwf	___aodiv@dividend+7
 12841  0CDA  3196  2616  3188   	fcall	___aodiv
 12842  0CDD  0838               	movf	?___aodiv,w
 12843  0CDE  00A8               	movwf	___omul@multiplicand
 12844  0CDF  0839               	movf	?___aodiv+1,w
 12845  0CE0  00A9               	movwf	___omul@multiplicand+1
 12846  0CE1  083A               	movf	?___aodiv+2,w
 12847  0CE2  00AA               	movwf	___omul@multiplicand+2
 12848  0CE3  083B               	movf	?___aodiv+3,w
 12849  0CE4  00AB               	movwf	___omul@multiplicand+3
 12850  0CE5  083C               	movf	?___aodiv+4,w
 12851  0CE6  00AC               	movwf	___omul@multiplicand+4
 12852  0CE7  083D               	movf	?___aodiv+5,w
 12853  0CE8  00AD               	movwf	___omul@multiplicand+5
 12854  0CE9  083E               	movf	?___aodiv+6,w
 12855  0CEA  00AE               	movwf	___omul@multiplicand+6
 12856  0CEB  083F               	movf	?___aodiv+7,w
 12857  0CEC  00AF               	movwf	___omul@multiplicand+7
 12858  0CED  3191  2189  3188   	fcall	___omul
 12859  0CF0  0820               	movf	?___omul,w
 12860  0CF1  0021               	movlb	1	; select bank1
 12861  0CF2  00C1               	movwf	_compensate_pressure$2393^(0+128)
 12862  0CF3  0020               	movlb	0	; select bank0
 12863  0CF4  0821               	movf	?___omul+1,w
 12864  0CF5  0021               	movlb	1	; select bank1
 12865  0CF6  00C2               	movwf	(_compensate_pressure$2393+1)^(0+128)
 12866  0CF7  0020               	movlb	0	; select bank0
 12867  0CF8  0822               	movf	?___omul+2,w
 12868  0CF9  0021               	movlb	1	; select bank1
 12869  0CFA  00C3               	movwf	(_compensate_pressure$2393+2)^(0+128)
 12870  0CFB  0020               	movlb	0	; select bank0
 12871  0CFC  0823               	movf	?___omul+3,w
 12872  0CFD  0021               	movlb	1	; select bank1
 12873  0CFE  00C4               	movwf	(_compensate_pressure$2393+3)^(0+128)
 12874  0CFF  0020               	movlb	0	; select bank0
 12875  0D00  0824               	movf	?___omul+4,w
 12876  0D01  0021               	movlb	1	; select bank1
 12877  0D02  00C5               	movwf	(_compensate_pressure$2393+4)^(0+128)
 12878  0D03  0020               	movlb	0	; select bank0
 12879  0D04  0825               	movf	?___omul+5,w
 12880  0D05  0021               	movlb	1	; select bank1
 12881  0D06  00C6               	movwf	(_compensate_pressure$2393+5)^(0+128)
 12882  0D07  0020               	movlb	0	; select bank0
 12883  0D08  0826               	movf	?___omul+6,w
 12884  0D09  0021               	movlb	1	; select bank1
 12885  0D0A  00C7               	movwf	(_compensate_pressure$2393+6)^(0+128)
 12886  0D0B  0020               	movlb	0	; select bank0
 12887  0D0C  0827               	movf	?___omul+7,w
 12888  0D0D  0021               	movlb	1	; select bank1
 12889  0D0E  00C8               	movwf	(_compensate_pressure$2393+7)^(0+128)
 12890                           
 12891                           ;BME280_driver/bme280.c: 1178:         var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8
      +                          192) * (var4 / 8192)) / 33554432;
 12892  0D0F  0841               	movf	_compensate_pressure$2393^(0+128),w
 12893  0D10  0020               	movlb	0	; select bank0
 12894  0D11  00A0               	movwf	___omul@multiplier
 12895  0D12  0021               	movlb	1	; select bank1
 12896  0D13  0842               	movf	(_compensate_pressure$2393+1)^(0+128),w
 12897  0D14  0020               	movlb	0	; select bank0
 12898  0D15  00A1               	movwf	___omul@multiplier+1
 12899  0D16  0021               	movlb	1	; select bank1
 12900  0D17  0843               	movf	(_compensate_pressure$2393+2)^(0+128),w
 12901  0D18  0020               	movlb	0	; select bank0
 12902  0D19  00A2               	movwf	___omul@multiplier+2
 12903  0D1A  0021               	movlb	1	; select bank1
 12904  0D1B  0844               	movf	(_compensate_pressure$2393+3)^(0+128),w
 12905  0D1C  0020               	movlb	0	; select bank0
 12906  0D1D  00A3               	movwf	___omul@multiplier+3
 12907  0D1E  0021               	movlb	1	; select bank1
 12908  0D1F  0845               	movf	(_compensate_pressure$2393+4)^(0+128),w
 12909  0D20  0020               	movlb	0	; select bank0
 12910  0D21  00A4               	movwf	___omul@multiplier+4
 12911  0D22  0021               	movlb	1	; select bank1
 12912  0D23  0846               	movf	(_compensate_pressure$2393+5)^(0+128),w
 12913  0D24  0020               	movlb	0	; select bank0
 12914  0D25  00A5               	movwf	___omul@multiplier+5
 12915  0D26  0021               	movlb	1	; select bank1
 12916  0D27  0847               	movf	(_compensate_pressure$2393+6)^(0+128),w
 12917  0D28  0020               	movlb	0	; select bank0
 12918  0D29  00A6               	movwf	___omul@multiplier+6
 12919  0D2A  0021               	movlb	1	; select bank1
 12920  0D2B  0848               	movf	(_compensate_pressure$2393+7)^(0+128),w
 12921  0D2C  0020               	movlb	0	; select bank0
 12922  0D2D  00A7               	movwf	___omul@multiplier+7
 12923  0D2E  3000               	movlw	0
 12924  0D2F  00BF               	movwf	___aodiv@divisor+7
 12925  0D30  3000               	movlw	0
 12926  0D31  00BE               	movwf	___aodiv@divisor+6
 12927  0D32  3000               	movlw	0
 12928  0D33  00BD               	movwf	___aodiv@divisor+5
 12929  0D34  3000               	movlw	0
 12930  0D35  00BC               	movwf	___aodiv@divisor+4
 12931  0D36  3000               	movlw	0
 12932  0D37  00BB               	movwf	___aodiv@divisor+3
 12933  0D38  3000               	movlw	0
 12934  0D39  00BA               	movwf	___aodiv@divisor+2
 12935  0D3A  3020               	movlw	32
 12936  0D3B  00B9               	movwf	___aodiv@divisor+1
 12937  0D3C  3000               	movlw	0
 12938  0D3D  00B8               	movwf	___aodiv@divisor
 12939  0D3E  0021               	movlb	1	; select bank1
 12940  0D3F  0855               	movf	compensate_pressure@var4^(0+128),w
 12941  0D40  0020               	movlb	0	; select bank0
 12942  0D41  00C0               	movwf	___aodiv@dividend
 12943  0D42  0021               	movlb	1	; select bank1
 12944  0D43  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 12945  0D44  0020               	movlb	0	; select bank0
 12946  0D45  00C1               	movwf	___aodiv@dividend+1
 12947  0D46  0021               	movlb	1	; select bank1
 12948  0D47  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 12949  0D48  0020               	movlb	0	; select bank0
 12950  0D49  00C2               	movwf	___aodiv@dividend+2
 12951  0D4A  0021               	movlb	1	; select bank1
 12952  0D4B  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 12953  0D4C  0020               	movlb	0	; select bank0
 12954  0D4D  00C3               	movwf	___aodiv@dividend+3
 12955  0D4E  0021               	movlb	1	; select bank1
 12956  0D4F  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 12957  0D50  0020               	movlb	0	; select bank0
 12958  0D51  00C4               	movwf	___aodiv@dividend+4
 12959  0D52  0021               	movlb	1	; select bank1
 12960  0D53  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 12961  0D54  0020               	movlb	0	; select bank0
 12962  0D55  00C5               	movwf	___aodiv@dividend+5
 12963  0D56  0021               	movlb	1	; select bank1
 12964  0D57  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 12965  0D58  0020               	movlb	0	; select bank0
 12966  0D59  00C6               	movwf	___aodiv@dividend+6
 12967  0D5A  0021               	movlb	1	; select bank1
 12968  0D5B  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 12969  0D5C  0020               	movlb	0	; select bank0
 12970  0D5D  00C7               	movwf	___aodiv@dividend+7
 12971  0D5E  3196  2616  3188   	fcall	___aodiv
 12972  0D61  0838               	movf	?___aodiv,w
 12973  0D62  00A8               	movwf	___omul@multiplicand
 12974  0D63  0839               	movf	?___aodiv+1,w
 12975  0D64  00A9               	movwf	___omul@multiplicand+1
 12976  0D65  083A               	movf	?___aodiv+2,w
 12977  0D66  00AA               	movwf	___omul@multiplicand+2
 12978  0D67  083B               	movf	?___aodiv+3,w
 12979  0D68  00AB               	movwf	___omul@multiplicand+3
 12980  0D69  083C               	movf	?___aodiv+4,w
 12981  0D6A  00AC               	movwf	___omul@multiplicand+4
 12982  0D6B  083D               	movf	?___aodiv+5,w
 12983  0D6C  00AD               	movwf	___omul@multiplicand+5
 12984  0D6D  083E               	movf	?___aodiv+6,w
 12985  0D6E  00AE               	movwf	___omul@multiplicand+6
 12986  0D6F  083F               	movf	?___aodiv+7,w
 12987  0D70  00AF               	movwf	___omul@multiplicand+7
 12988  0D71  3191  2189  3188   	fcall	___omul
 12989  0D74  0820               	movf	?___omul,w
 12990  0D75  0021               	movlb	1	; select bank1
 12991  0D76  00A8               	movwf	_compensate_pressure$2394^(0+128)
 12992  0D77  0020               	movlb	0	; select bank0
 12993  0D78  0821               	movf	?___omul+1,w
 12994  0D79  0021               	movlb	1	; select bank1
 12995  0D7A  00A9               	movwf	(_compensate_pressure$2394+1)^(0+128)
 12996  0D7B  0020               	movlb	0	; select bank0
 12997  0D7C  0822               	movf	?___omul+2,w
 12998  0D7D  0021               	movlb	1	; select bank1
 12999  0D7E  00AA               	movwf	(_compensate_pressure$2394+2)^(0+128)
 13000  0D7F  0020               	movlb	0	; select bank0
 13001  0D80  0823               	movf	?___omul+3,w
 13002  0D81  0021               	movlb	1	; select bank1
 13003  0D82  00AB               	movwf	(_compensate_pressure$2394+3)^(0+128)
 13004  0D83  0020               	movlb	0	; select bank0
 13005  0D84  0824               	movf	?___omul+4,w
 13006  0D85  0021               	movlb	1	; select bank1
 13007  0D86  00AC               	movwf	(_compensate_pressure$2394+4)^(0+128)
 13008  0D87  0020               	movlb	0	; select bank0
 13009  0D88  0825               	movf	?___omul+5,w
 13010  0D89  0021               	movlb	1	; select bank1
 13011  0D8A  00AD               	movwf	(_compensate_pressure$2394+5)^(0+128)
 13012  0D8B  0020               	movlb	0	; select bank0
 13013  0D8C  0826               	movf	?___omul+6,w
 13014  0D8D  0021               	movlb	1	; select bank1
 13015  0D8E  00AE               	movwf	(_compensate_pressure$2394+6)^(0+128)
 13016  0D8F  0020               	movlb	0	; select bank0
 13017  0D90  0827               	movf	?___omul+7,w
 13018  0D91  0021               	movlb	1	; select bank1
 13019  0D92  00AF               	movwf	(_compensate_pressure$2394+7)^(0+128)
 13020                           
 13021                           ;BME280_driver/bme280.c: 1178:         var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8
      +                          192) * (var4 / 8192)) / 33554432;
 13022  0D93  3000               	movlw	0
 13023  0D94  0020               	movlb	0	; select bank0
 13024  0D95  00BF               	movwf	___aodiv@divisor+7
 13025  0D96  3000               	movlw	0
 13026  0D97  00BE               	movwf	___aodiv@divisor+6
 13027  0D98  3000               	movlw	0
 13028  0D99  00BD               	movwf	___aodiv@divisor+5
 13029  0D9A  3000               	movlw	0
 13030  0D9B  00BC               	movwf	___aodiv@divisor+4
 13031  0D9C  3002               	movlw	2
 13032  0D9D  00BB               	movwf	___aodiv@divisor+3
 13033  0D9E  3000               	movlw	0
 13034  0D9F  00BA               	movwf	___aodiv@divisor+2
 13035  0DA0  3000               	movlw	0
 13036  0DA1  00B9               	movwf	___aodiv@divisor+1
 13037  0DA2  3000               	movlw	0
 13038  0DA3  00B8               	movwf	___aodiv@divisor
 13039  0DA4  0021               	movlb	1	; select bank1
 13040  0DA5  0828               	movf	_compensate_pressure$2394^(0+128),w
 13041  0DA6  0020               	movlb	0	; select bank0
 13042  0DA7  00C0               	movwf	___aodiv@dividend
 13043  0DA8  0021               	movlb	1	; select bank1
 13044  0DA9  0829               	movf	(_compensate_pressure$2394+1)^(0+128),w
 13045  0DAA  0020               	movlb	0	; select bank0
 13046  0DAB  00C1               	movwf	___aodiv@dividend+1
 13047  0DAC  0021               	movlb	1	; select bank1
 13048  0DAD  082A               	movf	(_compensate_pressure$2394+2)^(0+128),w
 13049  0DAE  0020               	movlb	0	; select bank0
 13050  0DAF  00C2               	movwf	___aodiv@dividend+2
 13051  0DB0  0021               	movlb	1	; select bank1
 13052  0DB1  082B               	movf	(_compensate_pressure$2394+3)^(0+128),w
 13053  0DB2  0020               	movlb	0	; select bank0
 13054  0DB3  00C3               	movwf	___aodiv@dividend+3
 13055  0DB4  0021               	movlb	1	; select bank1
 13056  0DB5  082C               	movf	(_compensate_pressure$2394+4)^(0+128),w
 13057  0DB6  0020               	movlb	0	; select bank0
 13058  0DB7  00C4               	movwf	___aodiv@dividend+4
 13059  0DB8  0021               	movlb	1	; select bank1
 13060  0DB9  082D               	movf	(_compensate_pressure$2394+5)^(0+128),w
 13061  0DBA  0020               	movlb	0	; select bank0
 13062  0DBB  00C5               	movwf	___aodiv@dividend+5
 13063  0DBC  0021               	movlb	1	; select bank1
 13064  0DBD  082E               	movf	(_compensate_pressure$2394+6)^(0+128),w
 13065  0DBE  0020               	movlb	0	; select bank0
 13066  0DBF  00C6               	movwf	___aodiv@dividend+6
 13067  0DC0  0021               	movlb	1	; select bank1
 13068  0DC1  082F               	movf	(_compensate_pressure$2394+7)^(0+128),w
 13069  0DC2  0020               	movlb	0	; select bank0
 13070  0DC3  00C7               	movwf	___aodiv@dividend+7
 13071  0DC4  3196  2616  3188   	fcall	___aodiv
 13072  0DC7  0838               	movf	?___aodiv,w
 13073  0DC8  0021               	movlb	1	; select bank1
 13074  0DC9  00DD               	movwf	compensate_pressure@var1^(0+128)
 13075  0DCA  0020               	movlb	0	; select bank0
 13076  0DCB  0839               	movf	?___aodiv+1,w
 13077  0DCC  0021               	movlb	1	; select bank1
 13078  0DCD  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
 13079  0DCE  0020               	movlb	0	; select bank0
 13080  0DCF  083A               	movf	?___aodiv+2,w
 13081  0DD0  0021               	movlb	1	; select bank1
 13082  0DD1  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
 13083  0DD2  0020               	movlb	0	; select bank0
 13084  0DD3  083B               	movf	?___aodiv+3,w
 13085  0DD4  0021               	movlb	1	; select bank1
 13086  0DD5  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
 13087  0DD6  0020               	movlb	0	; select bank0
 13088  0DD7  083C               	movf	?___aodiv+4,w
 13089  0DD8  0021               	movlb	1	; select bank1
 13090  0DD9  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
 13091  0DDA  0020               	movlb	0	; select bank0
 13092  0DDB  083D               	movf	?___aodiv+5,w
 13093  0DDC  0021               	movlb	1	; select bank1
 13094  0DDD  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
 13095  0DDE  0020               	movlb	0	; select bank0
 13096  0DDF  083E               	movf	?___aodiv+6,w
 13097  0DE0  0021               	movlb	1	; select bank1
 13098  0DE1  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
 13099  0DE2  0020               	movlb	0	; select bank0
 13100  0DE3  083F               	movf	?___aodiv+7,w
 13101  0DE4  0021               	movlb	1	; select bank1
 13102  0DE5  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
 13103                           
 13104                           ;BME280_driver/bme280.c: 1179:         var2 = (((int64_t)calib_data->dig_P8) * var4) / 5
      +                          24288;
 13105  0DE6  3000               	movlw	0
 13106  0DE7  0020               	movlb	0	; select bank0
 13107  0DE8  00BF               	movwf	___aodiv@divisor+7
 13108  0DE9  3000               	movlw	0
 13109  0DEA  00BE               	movwf	___aodiv@divisor+6
 13110  0DEB  3000               	movlw	0
 13111  0DEC  00BD               	movwf	___aodiv@divisor+5
 13112  0DED  3000               	movlw	0
 13113  0DEE  00BC               	movwf	___aodiv@divisor+4
 13114  0DEF  3000               	movlw	0
 13115  0DF0  00BB               	movwf	___aodiv@divisor+3
 13116  0DF1  3008               	movlw	8
 13117  0DF2  00BA               	movwf	___aodiv@divisor+2
 13118  0DF3  3000               	movlw	0
 13119  0DF4  00B9               	movwf	___aodiv@divisor+1
 13120  0DF5  3000               	movlw	0
 13121  0DF6  00B8               	movwf	___aodiv@divisor
 13122  0DF7  0852               	movf	compensate_pressure@calib_data,w
 13123  0DF8  3E14               	addlw	20
 13124  0DF9  0086               	movwf	6
 13125  0DFA  3001               	movlw	1	; select bank2/3
 13126  0DFB  0087               	movwf	7
 13127  0DFC  3F40               	moviw [0]fsr1
 13128  0DFD  00D6               	movwf	??_compensate_pressure
 13129  0DFE  3F41               	moviw [1]fsr1
 13130  0DFF  00D7               	movwf	??_compensate_pressure+1
 13131  0E00  0856               	movf	??_compensate_pressure,w
 13132  0E01  00A0               	movwf	___omul@multiplier
 13133  0E02  0857               	movf	??_compensate_pressure+1,w
 13134  0E03  00A1               	movwf	___omul@multiplier+1
 13135  0E04  0D89               	rlf	9,f
 13136  0E05  3B89               	subwfb	9,f
 13137  0E06  0989               	comf	9,f
 13138  0E07  00A2               	movwf	___omul@multiplier+2
 13139  0E08  00A3               	movwf	___omul@multiplier+3
 13140  0E09  00A4               	movwf	___omul@multiplier+4
 13141  0E0A  00A5               	movwf	___omul@multiplier+5
 13142  0E0B  00A6               	movwf	___omul@multiplier+6
 13143  0E0C  00A7               	movwf	___omul@multiplier+7
 13144  0E0D  0021               	movlb	1	; select bank1
 13145  0E0E  0855               	movf	compensate_pressure@var4^(0+128),w
 13146  0E0F  0020               	movlb	0	; select bank0
 13147  0E10  00A8               	movwf	___omul@multiplicand
 13148  0E11  0021               	movlb	1	; select bank1
 13149  0E12  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 13150  0E13  0020               	movlb	0	; select bank0
 13151  0E14  00A9               	movwf	___omul@multiplicand+1
 13152  0E15  0021               	movlb	1	; select bank1
 13153  0E16  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 13154  0E17  0020               	movlb	0	; select bank0
 13155  0E18  00AA               	movwf	___omul@multiplicand+2
 13156  0E19  0021               	movlb	1	; select bank1
 13157  0E1A  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 13158  0E1B  0020               	movlb	0	; select bank0
 13159  0E1C  00AB               	movwf	___omul@multiplicand+3
 13160  0E1D  0021               	movlb	1	; select bank1
 13161  0E1E  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 13162  0E1F  0020               	movlb	0	; select bank0
 13163  0E20  00AC               	movwf	___omul@multiplicand+4
 13164  0E21  0021               	movlb	1	; select bank1
 13165  0E22  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 13166  0E23  0020               	movlb	0	; select bank0
 13167  0E24  00AD               	movwf	___omul@multiplicand+5
 13168  0E25  0021               	movlb	1	; select bank1
 13169  0E26  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 13170  0E27  0020               	movlb	0	; select bank0
 13171  0E28  00AE               	movwf	___omul@multiplicand+6
 13172  0E29  0021               	movlb	1	; select bank1
 13173  0E2A  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 13174  0E2B  0020               	movlb	0	; select bank0
 13175  0E2C  00AF               	movwf	___omul@multiplicand+7
 13176  0E2D  3191  2189  3188   	fcall	___omul
 13177  0E30  0820               	movf	?___omul,w
 13178  0E31  00C0               	movwf	___aodiv@dividend
 13179  0E32  0821               	movf	?___omul+1,w
 13180  0E33  00C1               	movwf	___aodiv@dividend+1
 13181  0E34  0822               	movf	?___omul+2,w
 13182  0E35  00C2               	movwf	___aodiv@dividend+2
 13183  0E36  0823               	movf	?___omul+3,w
 13184  0E37  00C3               	movwf	___aodiv@dividend+3
 13185  0E38  0824               	movf	?___omul+4,w
 13186  0E39  00C4               	movwf	___aodiv@dividend+4
 13187  0E3A  0825               	movf	?___omul+5,w
 13188  0E3B  00C5               	movwf	___aodiv@dividend+5
 13189  0E3C  0826               	movf	?___omul+6,w
 13190  0E3D  00C6               	movwf	___aodiv@dividend+6
 13191  0E3E  0827               	movf	?___omul+7,w
 13192  0E3F  00C7               	movwf	___aodiv@dividend+7
 13193  0E40  3196  2616  3188   	fcall	___aodiv
 13194  0E43  0838               	movf	?___aodiv,w
 13195  0E44  0021               	movlb	1	; select bank1
 13196  0E45  00CD               	movwf	compensate_pressure@var2^(0+128)
 13197  0E46  0020               	movlb	0	; select bank0
 13198  0E47  0839               	movf	?___aodiv+1,w
 13199  0E48  0021               	movlb	1	; select bank1
 13200  0E49  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 13201  0E4A  0020               	movlb	0	; select bank0
 13202  0E4B  083A               	movf	?___aodiv+2,w
 13203  0E4C  0021               	movlb	1	; select bank1
 13204  0E4D  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 13205  0E4E  0020               	movlb	0	; select bank0
 13206  0E4F  083B               	movf	?___aodiv+3,w
 13207  0E50  0021               	movlb	1	; select bank1
 13208  0E51  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 13209  0E52  0020               	movlb	0	; select bank0
 13210  0E53  083C               	movf	?___aodiv+4,w
 13211  0E54  0021               	movlb	1	; select bank1
 13212  0E55  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 13213  0E56  0020               	movlb	0	; select bank0
 13214  0E57  083D               	movf	?___aodiv+5,w
 13215  0E58  0021               	movlb	1	; select bank1
 13216  0E59  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 13217  0E5A  0020               	movlb	0	; select bank0
 13218  0E5B  083E               	movf	?___aodiv+6,w
 13219  0E5C  0021               	movlb	1	; select bank1
 13220  0E5D  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 13221  0E5E  0020               	movlb	0	; select bank0
 13222  0E5F  083F               	movf	?___aodiv+7,w
 13223  0E60  0021               	movlb	1	; select bank1
 13224  0E61  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 13225                           
 13226                           ;BME280_driver/bme280.c: 1180:         var4 = ((var4 + var1 + var2) / 256) + (((int64_t)
      +                          calib_data->dig_P7) * 16);
 13227  0E62  0020               	movlb	0	; select bank0
 13228  0E63  0852               	movf	compensate_pressure@calib_data,w
 13229  0E64  3E12               	addlw	18
 13230  0E65  0086               	movwf	6
 13231  0E66  3001               	movlw	1	; select bank2/3
 13232  0E67  0087               	movwf	7
 13233  0E68  3F40               	moviw [0]fsr1
 13234  0E69  00D6               	movwf	??_compensate_pressure
 13235  0E6A  3F41               	moviw [1]fsr1
 13236  0E6B  00D7               	movwf	??_compensate_pressure+1
 13237  0E6C  0856               	movf	??_compensate_pressure,w
 13238  0E6D  00D8               	movwf	??_compensate_pressure+2
 13239  0E6E  0857               	movf	??_compensate_pressure+1,w
 13240  0E6F  00D9               	movwf	??_compensate_pressure+3
 13241  0E70  3000               	movlw	0
 13242  0E71  1BD9               	btfsc	??_compensate_pressure+3,7
 13243  0E72  30FF               	movlw	255
 13244  0E73  00DA               	movwf	??_compensate_pressure+4
 13245  0E74  00DB               	movwf	??_compensate_pressure+5
 13246  0E75  00DC               	movwf	??_compensate_pressure+6
 13247  0E76  00DD               	movwf	??_compensate_pressure+7
 13248  0E77  00DE               	movwf	??_compensate_pressure+8
 13249  0E78  00DF               	movwf	??_compensate_pressure+9
 13250  0E79  3004               	movlw	4
 13251  0E7A                     u3345:	
 13252  0E7A  0020               	movlb	0	; select bank0
 13253  0E7B  35D8               	lslf	??_compensate_pressure+2,f
 13254  0E7C  0DD9               	rlf	??_compensate_pressure+3,f
 13255  0E7D  0DDA               	rlf	??_compensate_pressure+4,f
 13256  0E7E  0DDB               	rlf	??_compensate_pressure+5,f
 13257  0E7F  0DDC               	rlf	??_compensate_pressure+6,f
 13258  0E80  0DDD               	rlf	??_compensate_pressure+7,f
 13259  0E81  0DDE               	rlf	??_compensate_pressure+8,f
 13260  0E82  0DDF               	rlf	??_compensate_pressure+9,f
 13261  0E83  0B89               	decfsz	9,f
 13262  0E84  2E7A               	goto	u3345
 13263  0E85  3000               	movlw	0
 13264  0E86  0020               	movlb	0	; select bank0
 13265  0E87  00BF               	movwf	___aodiv@divisor+7
 13266  0E88  3000               	movlw	0
 13267  0E89  00BE               	movwf	___aodiv@divisor+6
 13268  0E8A  3000               	movlw	0
 13269  0E8B  00BD               	movwf	___aodiv@divisor+5
 13270  0E8C  3000               	movlw	0
 13271  0E8D  00BC               	movwf	___aodiv@divisor+4
 13272  0E8E  3000               	movlw	0
 13273  0E8F  00BB               	movwf	___aodiv@divisor+3
 13274  0E90  3000               	movlw	0
 13275  0E91  00BA               	movwf	___aodiv@divisor+2
 13276  0E92  3001               	movlw	1
 13277  0E93  00B9               	movwf	___aodiv@divisor+1
 13278  0E94  3000               	movlw	0
 13279  0E95  00B8               	movwf	___aodiv@divisor
 13280  0E96  30CD               	movlw	low compensate_pressure@var2
 13281  0E97  0086               	movwf	6
 13282  0E98  3000               	movlw	high compensate_pressure@var2
 13283  0E99  0087               	movwf	7
 13284  0E9A  3F40               	moviw [0]fsr1
 13285  0E9B  00E0               	movwf	??_compensate_pressure+10
 13286  0E9C  3F41               	moviw [1]fsr1
 13287  0E9D  00E1               	movwf	??_compensate_pressure+11
 13288  0E9E  3F42               	moviw [2]fsr1
 13289  0E9F  00E2               	movwf	??_compensate_pressure+12
 13290  0EA0  3F43               	moviw [3]fsr1
 13291  0EA1  00E3               	movwf	??_compensate_pressure+13
 13292  0EA2  3F44               	moviw [4]fsr1
 13293  0EA3  00E4               	movwf	??_compensate_pressure+14
 13294  0EA4  3F45               	moviw [5]fsr1
 13295  0EA5  00E5               	movwf	??_compensate_pressure+15
 13296  0EA6  3F46               	moviw [6]fsr1
 13297  0EA7  00E6               	movwf	??_compensate_pressure+16
 13298  0EA8  3F47               	moviw [7]fsr1
 13299  0EA9  00E7               	movwf	??_compensate_pressure+17
 13300  0EAA  0021               	movlb	1	; select bank1
 13301  0EAB  0855               	movf	compensate_pressure@var4^(0+128),w
 13302  0EAC  075D               	addwf	compensate_pressure@var1^(0+128),w
 13303  0EAD  0020               	movlb	0	; select bank0
 13304  0EAE  00E8               	movwf	??_compensate_pressure+18
 13305  0EAF  0021               	movlb	1	; select bank1
 13306  0EB0  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 13307  0EB1  3D5E               	addwfc	(compensate_pressure@var1+1)^(0+128),w
 13308  0EB2  0020               	movlb	0	; select bank0
 13309  0EB3  00E9               	movwf	??_compensate_pressure+19
 13310  0EB4  0021               	movlb	1	; select bank1
 13311  0EB5  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 13312  0EB6  3D5F               	addwfc	(compensate_pressure@var1+2)^(0+128),w
 13313  0EB7  0020               	movlb	0	; select bank0
 13314  0EB8  00EA               	movwf	??_compensate_pressure+20
 13315  0EB9  0021               	movlb	1	; select bank1
 13316  0EBA  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 13317  0EBB  3D60               	addwfc	(compensate_pressure@var1+3)^(0+128),w
 13318  0EBC  0020               	movlb	0	; select bank0
 13319  0EBD  00EB               	movwf	??_compensate_pressure+21
 13320  0EBE  0021               	movlb	1	; select bank1
 13321  0EBF  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 13322  0EC0  3D61               	addwfc	(compensate_pressure@var1+4)^(0+128),w
 13323  0EC1  0020               	movlb	0	; select bank0
 13324  0EC2  00EC               	movwf	??_compensate_pressure+22
 13325  0EC3  0021               	movlb	1	; select bank1
 13326  0EC4  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 13327  0EC5  3D62               	addwfc	(compensate_pressure@var1+5)^(0+128),w
 13328  0EC6  0020               	movlb	0	; select bank0
 13329  0EC7  00ED               	movwf	??_compensate_pressure+23
 13330  0EC8  0021               	movlb	1	; select bank1
 13331  0EC9  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 13332  0ECA  3D63               	addwfc	(compensate_pressure@var1+6)^(0+128),w
 13333  0ECB  0020               	movlb	0	; select bank0
 13334  0ECC  00EE               	movwf	??_compensate_pressure+24
 13335  0ECD  0021               	movlb	1	; select bank1
 13336  0ECE  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 13337  0ECF  3D64               	addwfc	(compensate_pressure@var1+7)^(0+128),w
 13338  0ED0  0020               	movlb	0	; select bank0
 13339  0ED1  00EF               	movwf	??_compensate_pressure+25
 13340  0ED2  0868               	movf	??_compensate_pressure+18,w
 13341  0ED3  07E0               	addwf	??_compensate_pressure+10,f
 13342  0ED4  0869               	movf	??_compensate_pressure+19,w
 13343  0ED5  3DE1               	addwfc	??_compensate_pressure+11,f
 13344  0ED6  086A               	movf	??_compensate_pressure+20,w
 13345  0ED7  3DE2               	addwfc	??_compensate_pressure+12,f
 13346  0ED8  086B               	movf	??_compensate_pressure+21,w
 13347  0ED9  3DE3               	addwfc	??_compensate_pressure+13,f
 13348  0EDA  086C               	movf	??_compensate_pressure+22,w
 13349  0EDB  3DE4               	addwfc	??_compensate_pressure+14,f
 13350  0EDC  086D               	movf	??_compensate_pressure+23,w
 13351  0EDD  3DE5               	addwfc	??_compensate_pressure+15,f
 13352  0EDE  086E               	movf	??_compensate_pressure+24,w
 13353  0EDF  3DE6               	addwfc	??_compensate_pressure+16,f
 13354  0EE0  086F               	movf	??_compensate_pressure+25,w
 13355  0EE1  3DE7               	addwfc	??_compensate_pressure+17,f
 13356  0EE2  0867               	movf	??_compensate_pressure+17,w
 13357  0EE3  00C7               	movwf	___aodiv@dividend+7
 13358  0EE4  0866               	movf	??_compensate_pressure+16,w
 13359  0EE5  00C6               	movwf	___aodiv@dividend+6
 13360  0EE6  0865               	movf	??_compensate_pressure+15,w
 13361  0EE7  00C5               	movwf	___aodiv@dividend+5
 13362  0EE8  0864               	movf	??_compensate_pressure+14,w
 13363  0EE9  00C4               	movwf	___aodiv@dividend+4
 13364  0EEA  0863               	movf	??_compensate_pressure+13,w
 13365  0EEB  00C3               	movwf	___aodiv@dividend+3
 13366  0EEC  0862               	movf	??_compensate_pressure+12,w
 13367  0EED  00C2               	movwf	___aodiv@dividend+2
 13368  0EEE  0861               	movf	??_compensate_pressure+11,w
 13369  0EEF  00C1               	movwf	___aodiv@dividend+1
 13370  0EF0  0860               	movf	??_compensate_pressure+10,w
 13371  0EF1  00C0               	movwf	___aodiv@dividend
 13372  0EF2  3196  2616  3188   	fcall	___aodiv
 13373  0EF5  3038               	movlw	low ?___aodiv
 13374  0EF6  0086               	movwf	6
 13375  0EF7  3000               	movlw	high ?___aodiv
 13376  0EF8  0087               	movwf	7
 13377  0EF9  3F40               	moviw [0]fsr1
 13378  0EFA  07D8               	addwf	??_compensate_pressure+2,f
 13379  0EFB  3F41               	moviw [1]fsr1
 13380  0EFC  3DD9               	addwfc	??_compensate_pressure+3,f
 13381  0EFD  3F42               	moviw [2]fsr1
 13382  0EFE  3DDA               	addwfc	??_compensate_pressure+4,f
 13383  0EFF  3F43               	moviw [3]fsr1
 13384  0F00  3DDB               	addwfc	??_compensate_pressure+5,f
 13385  0F01  3F44               	moviw [4]fsr1
 13386  0F02  3DDC               	addwfc	??_compensate_pressure+6,f
 13387  0F03  3F45               	moviw [5]fsr1
 13388  0F04  3DDD               	addwfc	??_compensate_pressure+7,f
 13389  0F05  3F46               	moviw [6]fsr1
 13390  0F06  3DDE               	addwfc	??_compensate_pressure+8,f
 13391  0F07  3F47               	moviw [7]fsr1
 13392  0F08  3DDF               	addwfc	??_compensate_pressure+9,f
 13393  0F09  085F               	movf	??_compensate_pressure+9,w
 13394  0F0A  0021               	movlb	1	; select bank1
 13395  0F0B  00DC               	movwf	(compensate_pressure@var4+7)^(0+128)
 13396  0F0C  0020               	movlb	0	; select bank0
 13397  0F0D  085E               	movf	??_compensate_pressure+8,w
 13398  0F0E  0021               	movlb	1	; select bank1
 13399  0F0F  00DB               	movwf	(compensate_pressure@var4+6)^(0+128)
 13400  0F10  0020               	movlb	0	; select bank0
 13401  0F11  085D               	movf	??_compensate_pressure+7,w
 13402  0F12  0021               	movlb	1	; select bank1
 13403  0F13  00DA               	movwf	(compensate_pressure@var4+5)^(0+128)
 13404  0F14  0020               	movlb	0	; select bank0
 13405  0F15  085C               	movf	??_compensate_pressure+6,w
 13406  0F16  0021               	movlb	1	; select bank1
 13407  0F17  00D9               	movwf	(compensate_pressure@var4+4)^(0+128)
 13408  0F18  0020               	movlb	0	; select bank0
 13409  0F19  085B               	movf	??_compensate_pressure+5,w
 13410  0F1A  0021               	movlb	1	; select bank1
 13411  0F1B  00D8               	movwf	(compensate_pressure@var4+3)^(0+128)
 13412  0F1C  0020               	movlb	0	; select bank0
 13413  0F1D  085A               	movf	??_compensate_pressure+4,w
 13414  0F1E  0021               	movlb	1	; select bank1
 13415  0F1F  00D7               	movwf	(compensate_pressure@var4+2)^(0+128)
 13416  0F20  0020               	movlb	0	; select bank0
 13417  0F21  0859               	movf	??_compensate_pressure+3,w
 13418  0F22  0021               	movlb	1	; select bank1
 13419  0F23  00D6               	movwf	(compensate_pressure@var4+1)^(0+128)
 13420  0F24  0020               	movlb	0	; select bank0
 13421  0F25  0858               	movf	??_compensate_pressure+2,w
 13422  0F26  0021               	movlb	1	; select bank1
 13423  0F27  00D5               	movwf	compensate_pressure@var4^(0+128)
 13424                           
 13425                           ;BME280_driver/bme280.c: 1181:         pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 13426  0F28  3002               	movlw	2
 13427  0F29  0020               	movlb	0	; select bank0
 13428  0F2A  00B8               	movwf	___aodiv@divisor
 13429  0F2B  01B9               	clrf	___aodiv@divisor+1
 13430  0F2C  01BA               	clrf	___aodiv@divisor+2
 13431  0F2D  01BB               	clrf	___aodiv@divisor+3
 13432  0F2E  01BC               	clrf	___aodiv@divisor+4
 13433  0F2F  01BD               	clrf	___aodiv@divisor+5
 13434  0F30  01BE               	clrf	___aodiv@divisor+6
 13435  0F31  01BF               	clrf	___aodiv@divisor+7
 13436  0F32  0021               	movlb	1	; select bank1
 13437  0F33  0855               	movf	compensate_pressure@var4^(0+128),w
 13438  0F34  0020               	movlb	0	; select bank0
 13439  0F35  00C0               	movwf	___aodiv@dividend
 13440  0F36  0021               	movlb	1	; select bank1
 13441  0F37  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 13442  0F38  0020               	movlb	0	; select bank0
 13443  0F39  00C1               	movwf	___aodiv@dividend+1
 13444  0F3A  0021               	movlb	1	; select bank1
 13445  0F3B  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 13446  0F3C  0020               	movlb	0	; select bank0
 13447  0F3D  00C2               	movwf	___aodiv@dividend+2
 13448  0F3E  0021               	movlb	1	; select bank1
 13449  0F3F  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 13450  0F40  0020               	movlb	0	; select bank0
 13451  0F41  00C3               	movwf	___aodiv@dividend+3
 13452  0F42  0021               	movlb	1	; select bank1
 13453  0F43  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 13454  0F44  0020               	movlb	0	; select bank0
 13455  0F45  00C4               	movwf	___aodiv@dividend+4
 13456  0F46  0021               	movlb	1	; select bank1
 13457  0F47  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 13458  0F48  0020               	movlb	0	; select bank0
 13459  0F49  00C5               	movwf	___aodiv@dividend+5
 13460  0F4A  0021               	movlb	1	; select bank1
 13461  0F4B  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 13462  0F4C  0020               	movlb	0	; select bank0
 13463  0F4D  00C6               	movwf	___aodiv@dividend+6
 13464  0F4E  0021               	movlb	1	; select bank1
 13465  0F4F  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 13466  0F50  0020               	movlb	0	; select bank0
 13467  0F51  00C7               	movwf	___aodiv@dividend+7
 13468  0F52  3196  2616  3188   	fcall	___aodiv
 13469  0F55  0838               	movf	?___aodiv,w
 13470  0F56  00A0               	movwf	___omul@multiplier
 13471  0F57  0839               	movf	?___aodiv+1,w
 13472  0F58  00A1               	movwf	___omul@multiplier+1
 13473  0F59  083A               	movf	?___aodiv+2,w
 13474  0F5A  00A2               	movwf	___omul@multiplier+2
 13475  0F5B  083B               	movf	?___aodiv+3,w
 13476  0F5C  00A3               	movwf	___omul@multiplier+3
 13477  0F5D  083C               	movf	?___aodiv+4,w
 13478  0F5E  00A4               	movwf	___omul@multiplier+4
 13479  0F5F  083D               	movf	?___aodiv+5,w
 13480  0F60  00A5               	movwf	___omul@multiplier+5
 13481  0F61  083E               	movf	?___aodiv+6,w
 13482  0F62  00A6               	movwf	___omul@multiplier+6
 13483  0F63  083F               	movf	?___aodiv+7,w
 13484  0F64  00A7               	movwf	___omul@multiplier+7
 13485  0F65  3064               	movlw	100
 13486  0F66  00A8               	movwf	___omul@multiplicand
 13487  0F67  01A9               	clrf	___omul@multiplicand+1
 13488  0F68  01AA               	clrf	___omul@multiplicand+2
 13489  0F69  01AB               	clrf	___omul@multiplicand+3
 13490  0F6A  01AC               	clrf	___omul@multiplicand+4
 13491  0F6B  01AD               	clrf	___omul@multiplicand+5
 13492  0F6C  01AE               	clrf	___omul@multiplicand+6
 13493  0F6D  01AF               	clrf	___omul@multiplicand+7
 13494  0F6E  3191  2189  3188   	fcall	___omul
 13495  0F71  0820               	movf	?___omul,w
 13496  0F72  0021               	movlb	1	; select bank1
 13497  0F73  00B0               	movwf	_compensate_pressure$2395^(0+128)
 13498  0F74  0020               	movlb	0	; select bank0
 13499  0F75  0821               	movf	?___omul+1,w
 13500  0F76  0021               	movlb	1	; select bank1
 13501  0F77  00B1               	movwf	(_compensate_pressure$2395+1)^(0+128)
 13502  0F78  0020               	movlb	0	; select bank0
 13503  0F79  0822               	movf	?___omul+2,w
 13504  0F7A  0021               	movlb	1	; select bank1
 13505  0F7B  00B2               	movwf	(_compensate_pressure$2395+2)^(0+128)
 13506  0F7C  0020               	movlb	0	; select bank0
 13507  0F7D  0823               	movf	?___omul+3,w
 13508  0F7E  0021               	movlb	1	; select bank1
 13509  0F7F  00B3               	movwf	(_compensate_pressure$2395+3)^(0+128)
 13510  0F80  0020               	movlb	0	; select bank0
 13511  0F81  0824               	movf	?___omul+4,w
 13512  0F82  0021               	movlb	1	; select bank1
 13513  0F83  00B4               	movwf	(_compensate_pressure$2395+4)^(0+128)
 13514  0F84  0020               	movlb	0	; select bank0
 13515  0F85  0825               	movf	?___omul+5,w
 13516  0F86  0021               	movlb	1	; select bank1
 13517  0F87  00B5               	movwf	(_compensate_pressure$2395+5)^(0+128)
 13518  0F88  0020               	movlb	0	; select bank0
 13519  0F89  0826               	movf	?___omul+6,w
 13520  0F8A  0021               	movlb	1	; select bank1
 13521  0F8B  00B6               	movwf	(_compensate_pressure$2395+6)^(0+128)
 13522  0F8C  0020               	movlb	0	; select bank0
 13523  0F8D  0827               	movf	?___omul+7,w
 13524  0F8E  0021               	movlb	1	; select bank1
 13525  0F8F  00B7               	movwf	(_compensate_pressure$2395+7)^(0+128)
 13526                           
 13527                           ;BME280_driver/bme280.c: 1181:         pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 13528  0F90  3080               	movlw	128
 13529  0F91  0020               	movlb	0	; select bank0
 13530  0F92  00B8               	movwf	___aodiv@divisor
 13531  0F93  01B9               	clrf	___aodiv@divisor+1
 13532  0F94  01BA               	clrf	___aodiv@divisor+2
 13533  0F95  01BB               	clrf	___aodiv@divisor+3
 13534  0F96  01BC               	clrf	___aodiv@divisor+4
 13535  0F97  01BD               	clrf	___aodiv@divisor+5
 13536  0F98  01BE               	clrf	___aodiv@divisor+6
 13537  0F99  01BF               	clrf	___aodiv@divisor+7
 13538  0F9A  0021               	movlb	1	; select bank1
 13539  0F9B  0830               	movf	_compensate_pressure$2395^(0+128),w
 13540  0F9C  0020               	movlb	0	; select bank0
 13541  0F9D  00C0               	movwf	___aodiv@dividend
 13542  0F9E  0021               	movlb	1	; select bank1
 13543  0F9F  0831               	movf	(_compensate_pressure$2395+1)^(0+128),w
 13544  0FA0  0020               	movlb	0	; select bank0
 13545  0FA1  00C1               	movwf	___aodiv@dividend+1
 13546  0FA2  0021               	movlb	1	; select bank1
 13547  0FA3  0832               	movf	(_compensate_pressure$2395+2)^(0+128),w
 13548  0FA4  0020               	movlb	0	; select bank0
 13549  0FA5  00C2               	movwf	___aodiv@dividend+2
 13550  0FA6  0021               	movlb	1	; select bank1
 13551  0FA7  0833               	movf	(_compensate_pressure$2395+3)^(0+128),w
 13552  0FA8  0020               	movlb	0	; select bank0
 13553  0FA9  00C3               	movwf	___aodiv@dividend+3
 13554  0FAA  0021               	movlb	1	; select bank1
 13555  0FAB  0834               	movf	(_compensate_pressure$2395+4)^(0+128),w
 13556  0FAC  0020               	movlb	0	; select bank0
 13557  0FAD  00C4               	movwf	___aodiv@dividend+4
 13558  0FAE  0021               	movlb	1	; select bank1
 13559  0FAF  0835               	movf	(_compensate_pressure$2395+5)^(0+128),w
 13560  0FB0  0020               	movlb	0	; select bank0
 13561  0FB1  00C5               	movwf	___aodiv@dividend+5
 13562  0FB2  0021               	movlb	1	; select bank1
 13563  0FB3  0836               	movf	(_compensate_pressure$2395+6)^(0+128),w
 13564  0FB4  0020               	movlb	0	; select bank0
 13565  0FB5  00C6               	movwf	___aodiv@dividend+6
 13566  0FB6  0021               	movlb	1	; select bank1
 13567  0FB7  0837               	movf	(_compensate_pressure$2395+7)^(0+128),w
 13568  0FB8  0020               	movlb	0	; select bank0
 13569  0FB9  00C7               	movwf	___aodiv@dividend+7
 13570  0FBA  3196  2616  3188   	fcall	___aodiv
 13571  0FBD  083B               	movf	?___aodiv+3,w
 13572  0FBE  0021               	movlb	1	; select bank1
 13573  0FBF  00CC               	movwf	(compensate_pressure@pressure+3)^(0+128)
 13574  0FC0  0020               	movlb	0	; select bank0
 13575  0FC1  083A               	movf	?___aodiv+2,w
 13576  0FC2  0021               	movlb	1	; select bank1
 13577  0FC3  00CB               	movwf	(compensate_pressure@pressure+2)^(0+128)
 13578  0FC4  0020               	movlb	0	; select bank0
 13579  0FC5  0839               	movf	?___aodiv+1,w
 13580  0FC6  0021               	movlb	1	; select bank1
 13581  0FC7  00CA               	movwf	(compensate_pressure@pressure+1)^(0+128)
 13582  0FC8  0020               	movlb	0	; select bank0
 13583  0FC9  0838               	movf	?___aodiv,w
 13584  0FCA  0021               	movlb	1	; select bank1
 13585  0FCB  00C9               	movwf	compensate_pressure@pressure^(0+128)
 13586                           
 13587                           ;BME280_driver/bme280.c: 1182:         if (pressure < pressure_min)
 13588  0FCC  084C               	movf	(compensate_pressure@pressure+3)^(0+128),w
 13589  0FCD  1D03               	btfss	3,2
 13590  0FCE  2FDD               	goto	l3426
 13591  0FCF  30C0               	movlw	192
 13592  0FD0  0249               	subwf	compensate_pressure@pressure^(0+128),w
 13593  0FD1  30C6               	movlw	198
 13594  0FD2  3B4A               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
 13595  0FD3  302D               	movlw	45
 13596  0FD4  3B4B               	subwfb	(compensate_pressure@pressure+2)^(0+128),w
 13597  0FD5  1803               	btfsc	3,0
 13598  0FD6  2FDD               	goto	l3426
 13599  0FD7                     l3424:	
 13600                           
 13601                           ;BME280_driver/bme280.c: 1183:         {;BME280_driver/bme280.c: 1184:             press
      +                          ure = pressure_min;
 13602  0FD7  3000               	movlw	0
 13603  0FD8  00CC               	movwf	(compensate_pressure@pressure+3)^(0+128)
 13604  0FD9  302D               	movlw	45
 13605  0FDA  00CB               	movwf	(compensate_pressure@pressure+2)^(0+128)
 13606  0FDB  30C6               	movlw	198
 13607  0FDC  2FED               	goto	L4
 13608  0FDD                     l3426:	
 13609                           ;BME280_driver/bme280.c: 1185:         }
 13610                           
 13611  0FDD  084C               	movf	(compensate_pressure@pressure+3)^(0+128),w
 13612  0FDE  1D03               	btfss	3,2
 13613  0FDF  2FE8               	goto	l3428
 13614  0FE0  30C1               	movlw	193
 13615  0FE1  0249               	subwf	compensate_pressure@pressure^(0+128),w
 13616  0FE2  30D8               	movlw	216
 13617  0FE3  3B4A               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
 13618  0FE4  30A7               	movlw	167
 13619  0FE5  3B4B               	subwfb	(compensate_pressure@pressure+2)^(0+128),w
 13620  0FE6  1C03               	btfss	3,0
 13621  0FE7  2FF0               	goto	l194
 13622  0FE8                     l3428:	
 13623                           
 13624                           ;BME280_driver/bme280.c: 1187:         {;BME280_driver/bme280.c: 1188:             press
      +                          ure = pressure_max;
 13625  0FE8  3000               	movlw	0
 13626  0FE9  00CC               	movwf	(compensate_pressure@pressure+3)^(0+128)
 13627  0FEA  30A7               	movlw	167
 13628  0FEB  00CB               	movwf	(compensate_pressure@pressure+2)^(0+128)
 13629  0FEC  30D8               	movlw	216
 13630  0FED                     L4:	
 13631  0FED  00CA               	movwf	(compensate_pressure@pressure+1)^(0+128)
 13632  0FEE  30C0               	movlw	192
 13633  0FEF  00C9               	movwf	compensate_pressure@pressure^(0+128)
 13634  0FF0                     l194:	
 13635                           ;BME280_driver/bme280.c: 1194:     }
 13636                           
 13637                           
 13638                           ;BME280_driver/bme280.c: 1196:     return pressure;
 13639  0FF0  084C               	movf	(compensate_pressure@pressure+3)^(0+128),w
 13640  0FF1  0020               	movlb	0	; select bank0
 13641  0FF2  00D5               	movwf	?_compensate_pressure+3
 13642  0FF3  0021               	movlb	1	; select bank1
 13643  0FF4  084B               	movf	(compensate_pressure@pressure+2)^(0+128),w
 13644  0FF5  0020               	movlb	0	; select bank0
 13645  0FF6  00D4               	movwf	?_compensate_pressure+2
 13646  0FF7  0021               	movlb	1	; select bank1
 13647  0FF8  084A               	movf	(compensate_pressure@pressure+1)^(0+128),w
 13648  0FF9  0020               	movlb	0	; select bank0
 13649  0FFA  00D3               	movwf	?_compensate_pressure+1
 13650  0FFB  0021               	movlb	1	; select bank1
 13651  0FFC  0849               	movf	compensate_pressure@pressure^(0+128),w
 13652  0FFD  0020               	movlb	0	; select bank0
 13653  0FFE  00D2               	movwf	?_compensate_pressure
 13654  0FFF  0008               	return
 13655  1000                     __end_of_compensate_pressure:	


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         228
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     24      74
    BANK3            80     68      80
    BANK4            80      0      26
    BANK5            80      0      70
    BANK6            80      0      73
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    get_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 0
		 -> Sleep(), 

    get_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> WriteEnvSensor(), 

    get_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> ReadEnvSensor(), 

    i2c_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_tr_queue.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK2[5]), I2C_MasterWrite@trBlock(BANK2[5]), 

    S54$4$2	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    S54$3$2	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    I2C_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 20
		 -> WriteEnvSensor@local_address(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), bme280_set_regs@temp_buff(BANK0[20]), 

    I2C_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterWrite@trBlock(BANK2[5]), 

    I2C_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK2[5]), 

    i2c_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrTail.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK2[5]), I2C_MasterWrite@trBlock(BANK2[5]), 

    I2C_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK2[5]), I2C_MasterWrite@trBlock(BANK2[5]), 

    I2C_MasterTRBInsert@pflag	PTR enum E9631 size(1) Largest target is 1
		 -> WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterRead@pflag	PTR enum E9631 size(1) Largest target is 1
		 -> ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    F9742.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterWrite@pflag	PTR enum E9631 size(1) Largest target is 1
		 -> WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 20
		 -> WriteEnvSensor@local_address(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), bme280_set_regs@temp_buff(BANK0[20]), 

    F9736.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), NULL(NULL[0]), 
		 -> bme280_init@chip_id(BANK0[1]), 

    p_i2c_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK2[5]), I2C_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c_object.pTrHead.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK2[5]), I2C_MasterWrite@trBlock(BANK2[5]), 

    S1592$pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_current.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    S1604$pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_current.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    S1604$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK2[5]), I2C_MasterWrite@trBlock(BANK2[5]), 

    p_i2c_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK2[5]), I2C_MasterWrite@trBlock(BANK2[5]), 

    p_i2c_current	PTR volatile struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), NULL(NULL[0]), 

    S1615$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), 

    i2c_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), 

    S1615$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), 

    i2c_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK2[4]), 

    env_sensor.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    env_sensor.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    env_sensor.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    WriteEnvSensor@reg_data	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    ReadEnvSensor@data	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    messages	PTR unsigned char [2] size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    ClearString@str	PTR unsigned char  size(2) Largest target is 73
		 -> message_end(BANK6[73]), message_start(BANK5[70]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    null_ptr_check@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    null_ptr_check@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    null_ptr_check@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    null_ptr_check@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    parse_humidity_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_humidity_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_humidity_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_humidity_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_humidity_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    parse_humidity_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> env_sensor.calib_data(BANK0[37]), main@env_sensor(BANK3[51]), 

    parse_temp_press_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_temp_press_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_temp_press_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_temp_press_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_temp_press_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    parse_temp_press_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> env_sensor.calib_data(BANK0[37]), main@env_sensor(BANK3[51]), 

    interleave_reg_addr@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(COMMON[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    interleave_reg_addr@reg_addr	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(COMMON[1]), set_filter_standby_settings@reg_addr(COMMON[1]), set_osr_press_temp_settings@reg_addr(COMMON[1]), set_osr_humidity_settings@reg_addr(COMMON[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    interleave_reg_addr@temp_buff	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    get_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_humidity@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    compensate_humidity@calib_data	PTR const struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_pressure@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    compensate_pressure@calib_data	PTR const struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_temperature@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_temperature@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    bme280_compensate_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_compensate_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK3[12]), 

    bme280_compensate_data@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    bme280_parse_sensor_data@uncomp_data	PTR struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    bme280_parse_sensor_data@reg_data	PTR const unsigned char  size(1) Largest target is 8
		 -> bme280_get_sensor_data@reg_data(BANK2[8]), 

    bme280_get_sensor_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_sensor_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK3[12]), 

    bme280_get_sensor_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_soft_reset@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_soft_reset@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_soft_reset@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_soft_reset@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_get_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(COMMON[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    bme280_set_regs@reg_addr	PTR unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(COMMON[1]), set_filter_standby_settings@reg_addr(COMMON[1]), set_osr_press_temp_settings@reg_addr(COMMON[1]), set_osr_humidity_settings@reg_addr(COMMON[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    bme280_set_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_get_regs@reg_data	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    bme280_get_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    S54bme280_dev$delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_init@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    S54bme280_dev$write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_init@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    S54bme280_dev$read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 


Critical Paths under _main in COMMON

    _main->_FlashError
    _bme280_init->_Sleep
    _bme280_init->_null_ptr_check
    _get_calib_data->_parse_humidity_calib_data
    _get_calib_data->_parse_temp_press_calib_data
    _bme280_soft_reset->_Sleep
    _bme280_soft_reset->_null_ptr_check
    _bme280_set_regs->_null_ptr_check
    _bme280_get_sensor_data->_null_ptr_check
    _bme280_get_regs->_null_ptr_check
    _I2C_MasterWrite->_I2C_MasterTRBInsert
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2C_MasterRead->_I2C_MasterTRBInsert
    _compensate_temperature->___lmul
    _compensate_pressure->___aodiv
    ___aodiv->___omul
    _compensate_humidity->___lmul
    ___aldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _ClearString->_strlen

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_ISR->_I2C_Stop

Critical Paths under _main in BANK0

    _bme280_init->_get_calib_data
    _get_calib_data->_bme280_get_regs
    _bme280_soft_reset->_bme280_set_regs
    _bme280_set_regs->_WriteEnvSensor
    _WriteEnvSensor->_I2C_MasterWrite
    _bme280_get_regs->_ReadEnvSensor
    _ReadEnvSensor->_I2C_MasterRead
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2C_MasterRead->_I2C_MasterReadTRBBuild
    _bme280_compensate_data->_compensate_pressure
    _compensate_temperature->___aldiv
    _compensate_pressure->___aodiv
    ___aodiv->___omul
    _compensate_humidity->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_bme280_get_sensor_data
    _bme280_get_sensor_data->_bme280_compensate_data
    _bme280_compensate_data->_compensate_pressure

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_bme280_get_sensor_data

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                70    70      0   56489
                                             22 BANK2      2     2      0
                                              0 BANK3     68    68      0
                        _ClearString
                         _FlashError
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
             _bme280_get_sensor_data
                        _bme280_init
 ---------------------------------------------------------------------------------
 (1) _bme280_init                                          6     6      0   25966
                                             64 BANK0      6     6      0
                              _Sleep *
                    _bme280_get_regs
                  _bme280_soft_reset
                     _get_calib_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _get_calib_data                                      31    31      0    9743
                                             33 BANK0     31    31      0
                    _bme280_get_regs
          _parse_humidity_calib_data
        _parse_temp_press_calib_data
 ---------------------------------------------------------------------------------
 (3) _parse_temp_press_calib_data                          4     3      1     968
                                              5 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _parse_humidity_calib_data                           14    13      1     510
                                              5 COMMON     4     3      1
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (2) _bme280_soft_reset                                    7     7      0    7350
                                             52 BANK0      7     7      0
                              _Sleep *
                    _bme280_set_regs
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (3) _bme280_set_regs                                     31    28      3    6392
                                             21 BANK0     31    28      3
                     _WriteEnvSensor *
                _interleave_reg_addr
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (4) _interleave_reg_addr                                  8     5      3     622
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (4) _WriteEnvSensor                                      11     6      5    2815
                                             10 BANK0     11     6      5
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _Sleep                                               12     8      4     151
                                              5 COMMON     4     0      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _bme280_get_sensor_data                              27    25      2   29033
                                             75 BANK1      5     3      2
                                              0 BANK2     22    22      0
             _bme280_compensate_data
                    _bme280_get_regs
           _bme280_parse_sensor_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _bme280_parse_sensor_data                            22    21      1     739
                                              5 COMMON     1     0      1
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 (3) _bme280_get_regs                                      9     4      5    7691
                                             24 BANK0      9     4      5
                      _ReadEnvSensor *
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _null_ptr_check                                       4     4      0     485
                                              5 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _ReadEnvSensor                                       11     5      6    4303
                                             13 BANK0     11     5      6
                     _I2C_MasterRead
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWrite                                      7     3      4    2111
                                              3 BANK0      7     3      4
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterWriteTRBBuild                              7     3      4     492
                                              5 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterRead                                       8     2      6    1544
                                              5 BANK0      8     2      6
             _I2C_MasterReadTRBBuild
                _I2C_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterTRBInsert                                  4     2      2     546
                                              5 COMMON     4     2      2
    _I2C_WaitForLastPacketToComplete
 ---------------------------------------------------------------------------------
 (7) _I2C_WaitForLastPacketToComplete                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterReadTRBBuild                               8     3      5     523
                                              5 COMMON     3     3      0
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (2) _bme280_compensate_data                               6     3      3   19466
                                             69 BANK1      6     3      3
                _compensate_humidity
                _compensate_pressure
             _compensate_temperature
 ---------------------------------------------------------------------------------
 (3) _compensate_temperature                              39    35      4    6068
                                             23 BANK0     39    35      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _compensate_pressure                                 99    95      4    6131
                                             50 BANK0     30    26      4
                                              0 BANK1     69    69      0
                            ___aodiv
                             ___omul
 ---------------------------------------------------------------------------------
 (4) ___omul                                              25     9     16    2296
                                              5 COMMON     1     1      0
                                              0 BANK0     24     8     16
 ---------------------------------------------------------------------------------
 (4) ___aodiv                                             27    11     16    2245
                                              6 COMMON     1     1      0
                                             24 BANK0     26    10     16
                             ___omul (ARG)
 ---------------------------------------------------------------------------------
 (3) _compensate_humidity                                 45    41      4    6402
                                             23 BANK0     45    41      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    2296
                                              5 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8    2965
                                              8 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              7 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              5 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FlashError                                           4     4      0      46
                                              5 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ClearString                                          7     5      2     486
                                              0 BANK0      7     5      2
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     242
                                              5 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0      31
                _I2C_BusCollisionISR
                            _I2C_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                           _TimerISR *
 ---------------------------------------------------------------------------------
 (10) _TimerISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_ISR                                              2     2      0      31
                                              3 COMMON     2     2      0
               _I2C_FunctionComplete
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C_Stop                                            3     3      0      31
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _I2C_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearString
     _strlen
   _FlashError
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _bme280_get_sensor_data
     _bme280_compensate_data
       _compensate_humidity
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _compensate_pressure
         ___aodiv
           ___omul (ARG)
         ___omul
       _compensate_temperature
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _bme280_get_regs
       _ReadEnvSensor *
         _I2C_MasterRead
           _I2C_MasterReadTRBBuild
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
           _I2C_MasterWriteTRBBuild
       _null_ptr_check *
     _bme280_parse_sensor_data
     _null_ptr_check
   _bme280_init
     _Sleep *
     _bme280_get_regs *
       _ReadEnvSensor *
         _I2C_MasterRead
           _I2C_MasterReadTRBBuild
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
           _I2C_MasterWriteTRBBuild
       _null_ptr_check *
     _bme280_soft_reset *
       _Sleep *
       _bme280_set_regs *
         _WriteEnvSensor *
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
             _I2C_MasterWriteTRBBuild
         _interleave_reg_addr *
         _null_ptr_check *
       _null_ptr_check *
     _get_calib_data *
       _bme280_get_regs
         _ReadEnvSensor *
           _I2C_MasterRead
             _I2C_MasterReadTRBBuild
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
             _I2C_MasterWriteTRBBuild
         _null_ptr_check *
       _parse_humidity_calib_data
       _parse_temp_press_calib_data
     _null_ptr_check *

 _INTERRUPT_InterruptManager (ROOT)
   _I2C_BusCollisionISR
   _I2C_ISR
     _I2C_FunctionComplete
     _I2C_Stop
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _TimerISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     18      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     44      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1A      13       32.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      46      15       87.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      49      17       91.3%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1F0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1F0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Aug 31 19:03:13 2019

                     __end_of_ClearString 1FAE                     I2C_ISR@i2c_bytes_left 013E  
                             __CFG_CP$OFF 0000          bme280_parse_sensor_data@data_lsb 002C  
        bme280_parse_sensor_data@data_msb 0030                                        l55 13D7  
                                      l72 1612                                        l65 1187  
                         _timer0ReloadVal 0169                   ?_I2C_MasterReadTRBBuild 0020  
        __end_of_bme280_parse_sensor_data 0737                               __CFG_LVP$ON 0000  
                                     l206 0315                                       l126 14DA  
                                     l236 1F82                                       l185 04B7  
                                     l194 0FF0                                       l542 10D2  
                                     l466 1018                                       l546 1265  
                                     l488 111D                                       l853 13E9  
                                     l888 16F9         bme280_parse_sensor_data@data_xlsb 0028  
                         __end_of_I2C_ISR 060D                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
        bme280_parse_sensor_data@reg_data 0034                            bme280_init@dev 0065  
         __size_of_compensate_temperature 01A2                              __CFG_ZCD$OFF 0000  
                                    l3110 120C                                      l3200 1081  
                                    l3104 1200                                      l3210 1193  
                                    l3122 07F9                                      l3108 1207  
                                    l3140 1F86                                      l3214 11A5  
                                    l3150 1045                                      l3128 1FCE  
                                    l3304 1160                                      l3250 1443  
                                    l3090 1E94                                      l3162 10CE  
                                    l3138 1F85                                      l3236 140A  
                                    l3228 13FA                                      l3180 12A1  
                                    l3316 1581                                      l3254 1451  
                                    l3246 1438                                      l3238 1418  
                                    l3270 166D                                      l3190 12A8  
                                    l3280 1684                                      l3264 1641  
                                    l3424 0FD7                                      l3344 15DE  
                                    l3336 15A5                                      l3352 160D  
                                    l3512 125E                                      l3600 13D0  
                                    l3290 16CC                                      l3282 1693  
                                    l3426 0FDD                                      l3354 1614  
                                    l3338 15BF                                      l3196 1077  
                                    l3292 16D8                                      l3268 1668  
                                    l3428 0FE8                                      l3380 04AF  
                                    l3540 14BD                                      l3188 12A3  
                                    l3552 1EF7                                      l3544 14DC  
                                    l3536 14A2                                      l3554 1F03  
                                    l3474 02E7                                      l3378 04A1  
                                    l3490 110B                                      l3468 02D3  
                                    l3580 1385                                      l3478 030D  
                                    l3822 1357                                      l3808 132E  
                                    l3770 1F95                                      l3594 13B9  
                                    l3598 13CD                                      u2105 1140  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u3050 1674  
                                    u2095 1551                                      u3305 097C  
                  ??_I2C_FunctionComplete 0070                                      u3315 0A5F  
                                    u3085 16B9                                      u3245 0337  
                                    u3430 1220                                      u3335 0C13  
                                    u3255 034B                                      u3345 0E7A  
                                    u3265 03B5                                      u3505 06A3  
                                    u3515 06B9                                      u3525 06FD  
                                    u2575 103F                                      u3375 008E  
                                    u3295 0915                                      u3385 00AC  
                                    u3465 0619                                      u3475 0631  
                                    u2835 1275                                      u3485 0647  
                                    u2855 1082                                      u3495 068A  
                                    u2880 1190                                      u3680 12B4  
                                    u2945 140D                                      u2865 1089  
                                    u3690 12C1                                      u2965 1419  
                                    u2975 142D                                      u2985 1439  
                                    u3875 1F9F                                      u3955 136F  
                                    u3967 135B                                      u3977 1143  
                                    u3987 101F                                      u3997 102C  
             __end_of_compensate_humidity 031E                                      _TMR0 0015  
                                    _WPUA 020C                                      _WPUB 020D  
                                    _WPUC 020E                    WriteEnvSensor@reg_addr 002B  
     bme280_parse_sensor_data@uncomp_data 0075                    WriteEnvSensor@reg_data 002C  
       bme280_get_sensor_data@uncomp_data 0159                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                                      _main 130C  
           compensate_humidity@calib_data 0037                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                  interleave_reg_addr@len 0077                          __end_of_I2C_Stop 1F41  
                           __CFG_BOREN$ON 0000                                      start 0023  
                    bme280_soft_reset@dev 005A               __end_of_compensate_pressure 1000  
                           __CFG_MCLRE$ON 0000                             _ReadEnvSensor 109E  
          __end_of_I2C_MasterReadTRBBuild 2000                           bme280_init@rslt 0064  
                 __end_of_TMR0_Initialize 1016            ??_TMR0_DefaultInterruptHandler 0070  
              I2C_MasterReadTRBBuild@ptrb 0077            __size_of_OSCILLATOR_Initialize 0007  
                        ?_I2C_MasterWrite 0023             __end_of_OSCILLATOR_Initialize 1EAF  
                         __end_of___aldiv 145A                           __end_of___aodiv 170B  
                                   ?_main 0070                             __CFG_WDTE$OFF 0000  
                              _FlashError 1016                    _bme280_compensate_data 145A  
                           _i2c_trb_count 013F                                     i1l630 04D8  
                                   i1l390 000D                                     i1l641 0529  
                                   i1l393 0019                                     i1l642 0535  
                                   i1l635 0506                                     i1l660 05A7  
                                   i1l652 0569                                     i1l636 0507  
                                   i1l398 0021                                     i1l671 1EF0  
                                   i1l664 05CD                                     i1l656 0589  
                                   i1l659 0599                         _bme280_soft_reset 10D4  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _RXPPS 0E24  
       __size_of_TMR0_SetInterruptHandler 0006                  __size_of_bme280_get_regs 0042  
                     ___lmul@multiplicand 0024                 ?_TMR0_SetInterruptHandler 0075  
                                   _Sleep 110D                          __end_of_TMR0_ISR 1EE2  
          compensate_pressure@uncomp_data 00B8                bme280_compensate_data@rslt 00E9  
                      ?_bme280_soft_reset 0070                                     _ticks 0137  
                                   main@i 01A3                                     pclath 000A  
                     ??_bme280_soft_reset 0054                                     status 0003  
                                   wtemp0 007E                               _ClearString 1F88  
                __size_of_bme280_set_regs 009E                          ??_get_calib_data 0041  
                   bme280_soft_reset@rslt 0058                  I2C_MasterTRBInsert@count 0078  
                I2C_MasterTRBInsert@pflag 0076                                _i2c_object 0132  
                         __initialization 0025                    _compensate_temperature 031E  
       parse_humidity_calib_data@reg_data 0029                            ?_ReadEnvSensor 002D  
                            __end_of_main 1372                                 ??_I2C_ISR 0073  
                          __CFG_LPBOR$OFF 0000               ?_INTERRUPT_InterruptManager 0070  
                 ?_bme280_get_sensor_data 00EB                 __end_of_bme280_soft_reset 110D  
                                  ??_main 0165                   __size_of_WriteEnvSensor 004A  
                     _I2C_MasterTRBInsert 11D0                          ??_null_ptr_check 0075  
         bme280_compensate_data@comp_data 00E6                            __CFG_PLLEN$OFF 0000  
             I2C_MasterReadTRBBuild@pdata 0020                          __end_of_TimerISR 1EB8  
         compensate_pressure@pressure_max 00B9                 bme280_get_sensor_data@dev 00EC  
                   ReadEnvSensor@reg_addr 002E                                    ?_Sleep 0075  
                ?_I2C_MasterWriteTRBBuild 0075                  _bme280_parse_sensor_data 060D  
                              Sleep@start 0024                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                                  _BORCON 0116                  _compensate_humidity$2396 0043  
                                  _RC1STA 019D                                    _RB4PPS 0E9C  
                                  _RB6PPS 0E9E                                    _RB7PPS 0E9F  
                                  _ODCONA 028C                                    _ODCONB 028D  
                                  _ODCONC 028E                                    i1l3710 0577  
                                  i1l3730 05AE                                    i1l3650 0500  
                                  i1l3564 1F3E                                    i1l3750 05D8  
                                  i1l3734 05B5                                    i1l3718 058C  
                                  i1l3646 04F9                                    i1l3664 0523  
                                  i1l3746 05D1                                    i1l3658 0513  
                                  i1l3844 05E9                                    i1l3748 05D4  
                                  i1l3756 05E0                                    i1l3678 0543  
                                  i1l3696 055E                                    _OSCCON 0099  
                                  u302lld 163E                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _TX1STA 019E  
                    ?_I2C_MasterTRBInsert 0075              __size_of_interleave_reg_addr 002D  
                          __CFG_PWRTE$OFF 0000                ?_parse_humidity_calib_data 0075  
                                  ___lmul 106F                                    ___omul 1189  
                               ??___aldiv 0030                                 ??___aodiv 0076  
                          __CFG_STVREN$ON 0000              parse_humidity_calib_data@dev 0075  
          __end_of_bme280_get_sensor_data 130C             I2C_MasterReadTRBBuild@address 0023  
                        ?_TMR0_Initialize 0070               compensate_pressure@pressure 00C9  
                 __size_of_I2C_MasterRead 0027                   __size_of_I2C_Initialize 0019  
                             ?_FlashError 0070                                    _strlen 1EF3  
                interleave_reg_addr@index 0024                         get_calib_data@dev 005F  
                 compensate_pressure@var1 00DD                   compensate_pressure@var2 00CD  
                 compensate_pressure@var4 00D5                                 ?_I2C_Stop 0070  
TMR0_SetInterruptHandler@InterruptHandler 0075                         ??_bme280_get_regs 003D  
            interleave_reg_addr@temp_buff 0075          bme280_compensate_data@calib_data 00E7  
                       _SYSTEM_Initialize 1EC3                   __end_of__initialization 0061  
                   ??_I2C_MasterTRBInsert 0077                        ?_SYSTEM_Initialize 0070  
        compensate_temperature@calib_data 0037                           ??_ReadEnvSensor 0033  
                           ??_bme280_init 0060                  get_calib_data@calib_data 0043  
                          __pcstackCOMMON 0070                             __end_of_Sleep 1147  
                            __pidataBANK3 1E98                         ??_bme280_set_regs 0038  
                     ??_SYSTEM_Initialize 0078                                 ?_TMR0_ISR 0070  
              __size_of_bme280_soft_reset 0039           __end_of_I2C_MasterWriteTRBBuild 1F63  
                          _OPTION_REGbits 0095                                ??_I2C_Stop 0070  
                                 ??_Sleep 0020                 __end_of_SYSTEM_Initialize 1ED2  
                              __pbssBANK2 0120                                __pbssBANK3 01E4  
                              __pbssBANK4 0220                                __pbssBANK5 02A0  
                              __pbssBANK6 0320               interleave_reg_addr@reg_addr 0023  
             interleave_reg_addr@reg_data 0076              I2C_MasterReadTRBBuild@length 0022  
                     __size_of_FlashError 002C              __size_of_I2C_BusCollisionISR 0002  
                              __pmaintext 130C                                 ?_TimerISR 0070  
        __end_of_TMR0_SetInterruptHandler 1EA2                                   ?___lmul 0020  
                                 ?___omul 0020                                ??_TMR0_ISR 0070  
                         __CFG_PPS1WAY$ON 0000                                __pintentry 0004  
                 ?_bme280_compensate_data 00E5                                   _I2C_ISR 04C0  
                     ___omul@multiplicand 0028                            ___lmul@product 0075  
                        ReadEnvSensor@len 0031                       __end_of_bme280_init 13D9  
             I2C_MasterWriteTRBBuild@ptrb 0022                            _WriteEnvSensor 1260  
                                 ?_strlen 0075                           __CFG_WDTCCS$SWC 0000  
                          main@env_sensor 01B1                                   _OSCTUNE 0098  
                 I2C_Stop@completion_code 0072              ?_parse_temp_press_calib_data 0075  
                                 _SSP1ADD 0212                                   _SLRCONA 030C  
                                 _SLRCONB 030D                                   _SLRCONC 030E  
                                 _SSP1BUF 0211             __size_of_I2C_FunctionComplete 0011  
                            ?_ClearString 0020                   ?_compensate_temperature 0037  
           bme280_soft_reset@soft_rst_cmd 0057                                   Sleep@ms 0075  
            __size_of_compensate_humidity 02B9                                ??_TimerISR 0070  
          __end_of_bme280_compensate_data 14DF                                   ___aldiv 13D9  
                                 ___aodiv 1616                           __size_of___lmul 002F  
                         __size_of___omul 0047                    __end_of_WriteEnvSensor 12AA  
            __size_of_compensate_pressure 08C9                            _I2C_MasterRead 1FAE  
              ??_bme280_parse_sensor_data 0020                            _I2C_Initialize 1F0A  
                                 __ptext1 1372                                   __ptext2 1218  
                                 __ptext3 170B                                   __ptext4 14DF  
                                 __ptext5 10D4                                   __ptext6 1578  
                                 __ptext7 1042                                   __ptext8 1260  
                                 __ptext9 110D       parse_humidity_calib_data@dig_H4_lsb 0020  
     parse_humidity_calib_data@dig_H4_msb 0022       parse_humidity_calib_data@dig_H5_lsb 0024  
     parse_humidity_calib_data@dig_H5_msb 0026       parse_humidity_calib_data@calib_data 0028  
                         __size_of_strlen 0017                       _interleave_reg_addr 1042  
                   _OSCILLATOR_Initialize 1EA8                             _message_start 02A0  
                        ___aldiv@dividend 002C                  ??_PIN_MANAGER_Initialize 0075  
                      get_calib_data@F375 0220                  __size_of_I2C_MasterWrite 0028  
              __size_of_SYSTEM_Initialize 000F                                   clrloop0 1EA3  
           ??_parse_temp_press_calib_data 0076                      end_of_initialization 0061  
         bme280_get_sensor_data@comp_data 00EB                        get_calib_data@rslt 005E  
                          ___omul@product 0030            __end_of_compensate_temperature 04C0  
                    ?_interleave_reg_addr 0075                      I2C_MasterRead@length 0027  
                       _EUSART_Initialize 1EB8          __size_of_I2C_MasterWriteTRBBuild 0022  
             ??_parse_humidity_calib_data 0076                        ?_EUSART_Initialize 0070  
                             _bme280_init 1372                          ___aldiv@quotient 0033  
       compensate_temperature@temperature 005A                                   psplit$0 290041  
                  __end_of_I2C_MasterRead 1FD5                    __end_of_I2C_Initialize 1F23  
                   I2C_MasterWrite@length 0023                            ClearString@str 0020  
                         ?_WriteEnvSensor 002A                                   strlen@a 0077  
                                 strlen@s 0075                       ??_EUSART_Initialize 0075  
                _TMR0_SetInterruptHandler 1E9C                              ??_FlashError 0075  
                      I2C_ISR@i2c_address 007B                                 _SSPDATPPS 0E21  
                         _bme280_get_regs 1147                                 _SSPCLKPPS 0E20  
                      bme280_get_regs@dev 003C                        bme280_get_regs@len 003A  
                        __CFG_FOSC$INTOSC 0000                         __size_of_I2C_Stop 001E  
        I2C_ISR@i2c_10bit_address_restart 013D            compensate_humidity@uncomp_data 0047  
                         _bme280_set_regs 1578                 __end_of_EUSART_Initialize 1EC3  
                    bme280_init@try_count 0062                     ??_interleave_reg_addr 0020  
               bme280_soft_reset@reg_addr 0059         compensate_temperature@uncomp_data 0055  
                      __end_of_FlashError 1042                  ??_I2C_MasterReadTRBBuild 0075  
                       _p_i2c_trb_current 007A      __size_of_parse_temp_press_calib_data 00F5  
                         ?_I2C_MasterRead 0025                           ?_I2C_Initialize 0070  
                          __end_of___lmul 109E                            __end_of___omul 11D0  
                 __size_of_get_calib_data 0048                              _i2c_tr_queue 014B  
                       __size_of_TMR0_ISR 0010                    ?_OSCILLATOR_Initialize 0070  
          parse_temp_press_calib_data@dev 0075                  bme280_set_regs@temp_buff 003B  
                     _I2C_BusCollisionISR 0002                 _parse_humidity_calib_data 14DF  
                          __end_of_strlen 1F0A                       start_initialization 0025  
                __size_of_TMR0_Initialize 0015           __size_of_PIN_MANAGER_Initialize 0033  
                               _i2c_state 0140     parse_temp_press_calib_data@calib_data 0077  
             __end_of_I2C_MasterTRBInsert 1218                   __size_of_null_ptr_check 0025  
                       ??_I2C_MasterWrite 0027                         ___omul@multiplier 0020  
                    ?_I2C_BusCollisionISR 0070                      __size_of_ClearString 0026  
                      bme280_init@chip_id 0063                     __end_of_ReadEnvSensor 10D4  
                                ??___lmul 0075                                  ??___omul 0075  
                 __end_of_bme280_get_regs 1189                         __size_of_TimerISR 0009  
                             __pdataBANK3 01EC                        null_ptr_check@rslt 0077  
                                ?_I2C_ISR 0070                              ClearString@i 0025  
                                ??_strlen 0077                compensate_temperature@var1 0051  
              compensate_temperature@var2 0056     compensate_temperature@temperature_max 004D  
                             __pbssCOMMON 0079                                 ___latbits 0002  
                     _compensate_humidity 0065                             __pcstackBANK0 0020  
                           __pcstackBANK1 00A0                             __pcstackBANK2 014F  
                           __pcstackBANK3 01A0                          ___aodiv@dividend 0040  
                 __end_of_bme280_set_regs 1616                  _compensate_pressure$2393 00C1  
                _compensate_pressure$2394 00A8                  _compensate_pressure$2395 00B0  
                     _compensate_pressure 0737                __size_of_EUSART_Initialize 000B  
                 _I2C_MasterWriteTRBBuild 1F41                     ??_I2C_BusCollisionISR 0070  
                   _TMR0_InterruptHandler 0167                                 __pnvBANK2 0167  
                ??_bme280_get_sensor_data 00ED                      ?_compensate_humidity 0037  
                  _PIN_MANAGER_Initialize 0800           __size_of_I2C_MasterReadTRBBuild 002B  
                                ?___aldiv 0028                                  ?___aodiv 0038  
                        ___aodiv@quotient 004A                      ?_compensate_pressure 0052  
            __end_of_I2C_FunctionComplete 1EF3              ??_INTERRUPT_InterruptManager 0075  
                                _BAUD1CON 019F                                  _I2C_Stop 1F23  
                       ReadEnvSensor@data 002F                            __size_of_Sleep 003A  
            I2C_MasterWriteTRBBuild@pdata 0075                                pnum$text23 0029  
                           _p_i2c_current 0079                           ___aldiv@divisor 0028  
                       ??_TMR0_Initialize 0077                           ___aldiv@counter 0031  
                                _LATCbits 010E                                 clear_ram0 1EA2  
                                _PIE1bits 0090                                  _PIE2bits 0091  
                   ??_compensate_humidity 003B                       I2C_MasterRead@pdata 0025  
                     I2C_MasterRead@pflag 002A       __size_of_INTERRUPT_InterruptManager 001F  
     parse_temp_press_calib_data@reg_data 0078                          ??_WriteEnvSensor 002F  
              ??_TMR0_SetInterruptHandler 0077                                  _PIR1bits 0010  
                                _PIR2bits 0011                              ?_bme280_init 0070  
          bme280_get_sensor_data@reg_data 014F                      I2C_MasterWrite@pdata 0029  
                    I2C_MasterWrite@pflag 0026                      __CFG_WDTCPS$WDTCPS1F 0000  
                                _SSP1CON1 0215                                  _SSP1CON3 0217  
                                _TMR0_ISR 1ED2                       I2C_ISR@pi2c_buf_ptr 013B  
                   ??_compensate_pressure 0056                                  _SSP1STAT 0214  
                        ?_bme280_get_regs 0038                            _get_calib_data 1218  
                        __size_of_I2C_ISR 014D               compensate_humidity@humidity 004C  
                    WriteEnvSensor@dev_id 002A                    _I2C_MasterReadTRBBuild 1FD5  
                 compensate_humidity@var1 0050                   compensate_humidity@var2 0054  
                 compensate_humidity@var3 0060                   compensate_humidity@var4 0058  
                 compensate_humidity@var5 005C                   bme280_get_regs@reg_addr 003F  
                 bme280_set_regs@reg_addr 0053                   bme280_get_regs@reg_data 0038  
                 bme280_set_regs@reg_data 0035                      WriteEnvSensor@status 0034  
                        ?_bme280_set_regs 0035                         ___lmul@multiplier 0020  
                 bme280_set_regs@temp_len 004F         __size_of_bme280_parse_sensor_data 012A  
               ??_I2C_MasterWriteTRBBuild 0020                 ?_bme280_parse_sensor_data 0075  
                          _null_ptr_check 1F63        __size_of_parse_humidity_calib_data 0099  
                     ReadEnvSensor@dev_id 002D               bme280_set_regs@reg_addr_cnt 0051  
                        ??_I2C_MasterRead 002B                          ??_I2C_Initialize 0075  
                     ReadEnvSensor@status 0037           __size_of_bme280_get_sensor_data 0062  
                     bme280_set_regs@rslt 0052                                  _TimerISR 1EAF  
                  __end_of_get_calib_data 1260                         null_ptr_check@dev 0078  
                 ??_OSCILLATOR_Initialize 0075                          __size_of___aldiv 0081  
                        __size_of___aodiv 00F5                           ___aodiv@divisor 0038  
                         ___aodiv@counter 0048                         ClearString@counti 0023  
                                _checksum 012C                           _I2C_MasterWrite 07D8  
     __end_of_parse_temp_press_calib_data 1800               _parse_temp_press_calib_data 170B  
                                __ptext10 12AA                                  __ptext11 060D  
                                __ptext20 1FD5                                  __ptext12 1147  
                                __ptext21 145A                                  __ptext13 1F63  
                                __ptext30 1001                                  __ptext22 031E  
                                __ptext14 109E                                  __ptext31 1E9C  
                                __ptext23 0737                                  __ptext15 07D8  
                                __ptext40 1ED2                                  __ptext32 0800  
                                __ptext24 1189                                  __ptext16 1F41  
                                __ptext41 1000                                  __ptext33 1EA8  
                                __ptext25 1616                                  __ptext17 1FAE  
                                __ptext42 1EAF                                  __ptext34 1F0A  
                                __ptext26 0065                                  __ptext18 11D0  
                                __ptext43 04C0                                  __ptext35 1EB8  
                                __ptext27 106F                                  __ptext19 1E94  
                                __ptext44 1F23                                  __ptext36 1016  
                                __ptext28 13D9                                  __ptext45 1EE2  
                                __ptext37 1F88                                  __ptext29 1EC3  
                                __ptext46 0002                                  __ptext38 1EF3  
             __end_of_interleave_reg_addr 106F                              _SSP1CON1bits 0215  
                  __end_of_null_ptr_check 1F88                              _SSP1CON2bits 0216  
            I2C_MasterTRBInsert@ptrb_list 0075             compensate_pressure@calib_data 0052  
                           __size_of_main 0066                      _I2C_FunctionComplete 1EE2  
       bme280_compensate_data@sensor_comp 00EA                  ??_bme280_compensate_data 00E8  
       __end_of_parse_humidity_calib_data 1578                               _message_end 0320  
                                _messages 01EC      __end_of_TMR0_DefaultInterruptHandler 1001  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 1000  
                    __CFG_WDTCWS$WDTCWSSW 0000   __end_of_I2C_WaitForLastPacketToComplete 1E98  
__size_of_I2C_WaitForLastPacketToComplete 0004         ??_I2C_WaitForLastPacketToComplete 0075  
        ?_I2C_WaitForLastPacketToComplete 0070           _I2C_WaitForLastPacketToComplete 1E94  
                         ?_get_calib_data 0070               _compensate_temperature$2392 0045  
                                int$flags 007E        __end_of_INTERRUPT_InterruptManager 0023  
              _INTERRUPT_InterruptManager 0004                        pnum$text23_split_1 0041  
                         main@sensor_data 01A5                                _INTCONbits 000B  
                  _bme280_get_sensor_data 12AA                        bme280_set_regs@dev 0037  
                      bme280_set_regs@len 0036                  ??_compensate_temperature 003B  
                   I2C_MasterRead@address 0028         bme280_compensate_data@uncomp_data 00E5  
                         ?_null_ptr_check 0070                bme280_get_sensor_data@F271 01E4  
              bme280_get_sensor_data@F273 0120                                  intlevel1 0000  
                             FlashError@i 0077                     ?_I2C_FunctionComplete 0070  
                           ??_ClearString 0022                   ?_PIN_MANAGER_Initialize 0070  
                   I2C_MasterRead@trBlock 0141                bme280_get_sensor_data@rslt 0158  
                       __CFG_CLKOUTEN$OFF 0000              __size_of_I2C_MasterTRBInsert 0048  
           ?_TMR0_DefaultInterruptHandler 0070                    I2C_MasterWrite@address 0024  
                    __size_of_bme280_init 0067                   __end_of_I2C_MasterWrite 0800  
                  I2C_MasterWrite@trBlock 0146                                _OPTION_REG 0095  
                         _TMR0_Initialize 1001                              ___aldiv@sign 0032  
                       WriteEnvSensor@len 002D               __end_of_I2C_BusCollisionISR 0004  
                  __size_of_ReadEnvSensor 0036                              ___aodiv@sign 0049  
          __end_of_PIN_MANAGER_Initialize 0833            I2C_MasterWriteTRBBuild@address 0077  
             WriteEnvSensor@local_address 0033                       bme280_get_regs@rslt 0040  
         __size_of_bme280_compensate_data 0085             I2C_MasterWriteTRBBuild@length 0076  
       bme280_get_sensor_data@sensor_comp 0157  
