

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Sep 02 12:37:16 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	idataBANK5,global,class=CODE,delta=2
     6                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     7                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	cinit,global,class=CODE,merge=1,delta=2
    21                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    28                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    29                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    30                           	psect	inittext,global,class=CODE,delta=2
    31                           	psect	clrtext,global,class=CODE,delta=2
    32                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    33                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    34                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    37                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2
    39                           	psect	text2,local,class=CODE,merge=1,delta=2
    40                           	psect	text3,local,class=CODE,merge=1,delta=2
    41                           	psect	text4,local,class=CODE,merge=1,delta=2
    42                           	psect	text5,local,class=CODE,merge=1,delta=2
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2
    47                           	psect	text10,local,class=CODE,merge=1,delta=2
    48                           	psect	text11,local,class=CODE,merge=1,delta=2
    49                           	psect	text12,local,class=CODE,merge=1,delta=2
    50                           	psect	text13,local,class=CODE,merge=1,delta=2
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2
    58                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text22,local,class=CODE,merge=1,delta=2
    60                           	psect	text23,local,class=CODE,merge=1,delta=2
    61                           	psect	text24,local,class=CODE,merge=1,delta=2
    62                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text27,local,class=CODE,merge=1,delta=2
    65                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	text32,local,class=CODE,merge=1,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	psect	text39,local,class=CODE,merge=1,delta=2
    77                           	psect	text40,local,class=CODE,merge=1,delta=2
    78                           	psect	text41,local,class=CODE,merge=1,delta=2
    79                           	psect	text42,local,class=CODE,merge=1,delta=2
    80                           	psect	text43,local,class=CODE,merge=1,delta=2
    81                           	psect	text44,local,class=CODE,merge=1,delta=2
    82                           	psect	text45,local,class=CODE,merge=1,delta=2
    83                           	psect	text46,local,class=CODE,merge=1,delta=2
    84                           	psect	text47,local,class=CODE,merge=1,delta=2
    85                           	psect	text48,local,class=CODE,merge=1,delta=2
    86                           	psect	text49,local,class=CODE,merge=1,delta=2
    87                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    88                           	psect	text51,local,class=CODE,merge=1,delta=2
    89                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    90                           	psect	text53,local,class=CODE,merge=1,delta=2
    91                           	psect	text54,local,class=CODE,merge=1,delta=2
    92                           	psect	text55,local,class=CODE,merge=1,delta=2
    93                           	psect	text56,local,class=CODE,merge=1,delta=2
    94                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	intentry,global,class=CODE,delta=2
    96                           	psect	text59,local,class=CODE,merge=1,delta=2
    97                           	psect	text60,local,class=CODE,merge=1,delta=2
    98                           	psect	text61,local,class=CODE,merge=1,delta=2
    99                           	psect	text62,local,class=CODE,merge=1,delta=2
   100                           	psect	text63,local,class=CODE,merge=1,delta=2
   101                           	psect	text64,local,class=CODE,merge=1,delta=2
   102                           	psect	text65,local,class=CODE,merge=1,delta=2
   103                           	psect	text27_split_1,local,class=CODE,merge=1,delta=2
   104                           	dabs	1,0x7E,2
   105  0000                     
   106                           ; Version 2.05
   107                           ; Generated 20/12/2018 GMT
   108                           ; 
   109                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution.
   123                           ; 
   124                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   125                           ;        software without specific prior written permission.
   126                           ; 
   127                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   128                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   129                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   130                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   131                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   132                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   133                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   134                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   135                           ; 
   136                           ; 
   137                           ; Code-generator required, PIC16F1619 Definitions
   138                           ; 
   139                           ; SFR Addresses
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0016                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  0111                     	;# 
   197  0112                     	;# 
   198  0113                     	;# 
   199  0114                     	;# 
   200  0115                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  0118                     	;# 
   204  0119                     	;# 
   205  011C                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  0191                     	;# 
   210  0191                     	;# 
   211  0192                     	;# 
   212  0193                     	;# 
   213  0193                     	;# 
   214  0194                     	;# 
   215  0195                     	;# 
   216  0196                     	;# 
   217  0197                     	;# 
   218  0199                     	;# 
   219  0199                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019A                     	;# 
   223  019A                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019C                     	;# 
   230  019C                     	;# 
   231  019C                     	;# 
   232  019D                     	;# 
   233  019D                     	;# 
   234  019D                     	;# 
   235  019E                     	;# 
   236  019E                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  019F                     	;# 
   240  019F                     	;# 
   241  019F                     	;# 
   242  019F                     	;# 
   243  020C                     	;# 
   244  020D                     	;# 
   245  020E                     	;# 
   246  0211                     	;# 
   247  0211                     	;# 
   248  0212                     	;# 
   249  0212                     	;# 
   250  0213                     	;# 
   251  0213                     	;# 
   252  0214                     	;# 
   253  0214                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  028C                     	;# 
   263  028D                     	;# 
   264  028E                     	;# 
   265  0291                     	;# 
   266  0291                     	;# 
   267  0292                     	;# 
   268  0293                     	;# 
   269  0294                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  029A                     	;# 
   274  029B                     	;# 
   275  029E                     	;# 
   276  030C                     	;# 
   277  030D                     	;# 
   278  030E                     	;# 
   279  038C                     	;# 
   280  038D                     	;# 
   281  038E                     	;# 
   282  0391                     	;# 
   283  0392                     	;# 
   284  0393                     	;# 
   285  0394                     	;# 
   286  0395                     	;# 
   287  0396                     	;# 
   288  0397                     	;# 
   289  0398                     	;# 
   290  0399                     	;# 
   291  040E                     	;# 
   292  0413                     	;# 
   293  0413                     	;# 
   294  0414                     	;# 
   295  0414                     	;# 
   296  0415                     	;# 
   297  0416                     	;# 
   298  0417                     	;# 
   299  0418                     	;# 
   300  041A                     	;# 
   301  041A                     	;# 
   302  041B                     	;# 
   303  041B                     	;# 
   304  041C                     	;# 
   305  041D                     	;# 
   306  041E                     	;# 
   307  041F                     	;# 
   308  0493                     	;# 
   309  0494                     	;# 
   310  0495                     	;# 
   311  0496                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049C                     	;# 
   315  049D                     	;# 
   316  058C                     	;# 
   317  058C                     	;# 
   318  058D                     	;# 
   319  058E                     	;# 
   320  058E                     	;# 
   321  058F                     	;# 
   322  0590                     	;# 
   323  0590                     	;# 
   324  0591                     	;# 
   325  0592                     	;# 
   326  0592                     	;# 
   327  0593                     	;# 
   328  0594                     	;# 
   329  0594                     	;# 
   330  0595                     	;# 
   331  0596                     	;# 
   332  0596                     	;# 
   333  0597                     	;# 
   334  0598                     	;# 
   335  0599                     	;# 
   336  059A                     	;# 
   337  059B                     	;# 
   338  059B                     	;# 
   339  059C                     	;# 
   340  059D                     	;# 
   341  060C                     	;# 
   342  060C                     	;# 
   343  060D                     	;# 
   344  060E                     	;# 
   345  060F                     	;# 
   346  060F                     	;# 
   347  0610                     	;# 
   348  0611                     	;# 
   349  0612                     	;# 
   350  0613                     	;# 
   351  0614                     	;# 
   352  0617                     	;# 
   353  0617                     	;# 
   354  0618                     	;# 
   355  0619                     	;# 
   356  061A                     	;# 
   357  061A                     	;# 
   358  061B                     	;# 
   359  061C                     	;# 
   360  0691                     	;# 
   361  0692                     	;# 
   362  0693                     	;# 
   363  0694                     	;# 
   364  0695                     	;# 
   365  0696                     	;# 
   366  0697                     	;# 
   367  0699                     	;# 
   368  069A                     	;# 
   369  0711                     	;# 
   370  0712                     	;# 
   371  0713                     	;# 
   372  0714                     	;# 
   373  0715                     	;# 
   374  0718                     	;# 
   375  0718                     	;# 
   376  0719                     	;# 
   377  071A                     	;# 
   378  071A                     	;# 
   379  071B                     	;# 
   380  071C                     	;# 
   381  071D                     	;# 
   382  0791                     	;# 
   383  0791                     	;# 
   384  0792                     	;# 
   385  0793                     	;# 
   386  0793                     	;# 
   387  0794                     	;# 
   388  0795                     	;# 
   389  0795                     	;# 
   390  0796                     	;# 
   391  0797                     	;# 
   392  0797                     	;# 
   393  0798                     	;# 
   394  0799                     	;# 
   395  079A                     	;# 
   396  080C                     	;# 
   397  080C                     	;# 
   398  080D                     	;# 
   399  080E                     	;# 
   400  080E                     	;# 
   401  080F                     	;# 
   402  0810                     	;# 
   403  0810                     	;# 
   404  0811                     	;# 
   405  0812                     	;# 
   406  0812                     	;# 
   407  0813                     	;# 
   408  0814                     	;# 
   409  0815                     	;# 
   410  0816                     	;# 
   411  0817                     	;# 
   412  0818                     	;# 
   413  0819                     	;# 
   414  081A                     	;# 
   415  081A                     	;# 
   416  081B                     	;# 
   417  081C                     	;# 
   418  081C                     	;# 
   419  081D                     	;# 
   420  088C                     	;# 
   421  088D                     	;# 
   422  088E                     	;# 
   423  088F                     	;# 
   424  088F                     	;# 
   425  0890                     	;# 
   426  0891                     	;# 
   427  0892                     	;# 
   428  0893                     	;# 
   429  0893                     	;# 
   430  0894                     	;# 
   431  0895                     	;# 
   432  0896                     	;# 
   433  0897                     	;# 
   434  0897                     	;# 
   435  0898                     	;# 
   436  0899                     	;# 
   437  0D8C                     	;# 
   438  0D8C                     	;# 
   439  0D8D                     	;# 
   440  0D8E                     	;# 
   441  0D8F                     	;# 
   442  0D8F                     	;# 
   443  0D90                     	;# 
   444  0D91                     	;# 
   445  0D92                     	;# 
   446  0D92                     	;# 
   447  0D93                     	;# 
   448  0D94                     	;# 
   449  0D95                     	;# 
   450  0D95                     	;# 
   451  0D96                     	;# 
   452  0D97                     	;# 
   453  0D98                     	;# 
   454  0D99                     	;# 
   455  0D9A                     	;# 
   456  0D9B                     	;# 
   457  0D9C                     	;# 
   458  0D9D                     	;# 
   459  0D9E                     	;# 
   460  0D9E                     	;# 
   461  0D9F                     	;# 
   462  0DA0                     	;# 
   463  0DA1                     	;# 
   464  0DA1                     	;# 
   465  0DA2                     	;# 
   466  0DA3                     	;# 
   467  0DA4                     	;# 
   468  0DA4                     	;# 
   469  0DA5                     	;# 
   470  0DA6                     	;# 
   471  0DA7                     	;# 
   472  0DA7                     	;# 
   473  0DA8                     	;# 
   474  0DA9                     	;# 
   475  0DAA                     	;# 
   476  0DAB                     	;# 
   477  0DAC                     	;# 
   478  0DAD                     	;# 
   479  0DAE                     	;# 
   480  0DAF                     	;# 
   481  0E0F                     	;# 
   482  0E10                     	;# 
   483  0E11                     	;# 
   484  0E12                     	;# 
   485  0E13                     	;# 
   486  0E14                     	;# 
   487  0E15                     	;# 
   488  0E16                     	;# 
   489  0E17                     	;# 
   490  0E18                     	;# 
   491  0E19                     	;# 
   492  0E1A                     	;# 
   493  0E1B                     	;# 
   494  0E1C                     	;# 
   495  0E1D                     	;# 
   496  0E1E                     	;# 
   497  0E1F                     	;# 
   498  0E20                     	;# 
   499  0E21                     	;# 
   500  0E22                     	;# 
   501  0E23                     	;# 
   502  0E24                     	;# 
   503  0E25                     	;# 
   504  0E26                     	;# 
   505  0E27                     	;# 
   506  0E28                     	;# 
   507  0E29                     	;# 
   508  0E2A                     	;# 
   509  0E2B                     	;# 
   510  0E2C                     	;# 
   511  0E2D                     	;# 
   512  0E2E                     	;# 
   513  0E90                     	;# 
   514  0E91                     	;# 
   515  0E92                     	;# 
   516  0E94                     	;# 
   517  0E95                     	;# 
   518  0E9C                     	;# 
   519  0E9D                     	;# 
   520  0E9E                     	;# 
   521  0E9F                     	;# 
   522  0EA0                     	;# 
   523  0EA1                     	;# 
   524  0EA2                     	;# 
   525  0EA3                     	;# 
   526  0EA4                     	;# 
   527  0EA5                     	;# 
   528  0EA6                     	;# 
   529  0EA7                     	;# 
   530  0F0F                     	;# 
   531  0F10                     	;# 
   532  0F11                     	;# 
   533  0F12                     	;# 
   534  0F13                     	;# 
   535  0F14                     	;# 
   536  0F15                     	;# 
   537  0F16                     	;# 
   538  0F17                     	;# 
   539  0F18                     	;# 
   540  0F19                     	;# 
   541  0F1A                     	;# 
   542  0F1B                     	;# 
   543  0F1C                     	;# 
   544  0F1D                     	;# 
   545  0F1E                     	;# 
   546  0F1F                     	;# 
   547  0F20                     	;# 
   548  0F21                     	;# 
   549  0F22                     	;# 
   550  0F23                     	;# 
   551  0F24                     	;# 
   552  0F25                     	;# 
   553  0F26                     	;# 
   554  0F27                     	;# 
   555  0F28                     	;# 
   556  0F29                     	;# 
   557  0F2A                     	;# 
   558  0F2B                     	;# 
   559  0F2C                     	;# 
   560  0F2D                     	;# 
   561  0F2E                     	;# 
   562  0F2F                     	;# 
   563  0F30                     	;# 
   564  0F31                     	;# 
   565  0F32                     	;# 
   566  0F33                     	;# 
   567  0F34                     	;# 
   568  0F35                     	;# 
   569  0F36                     	;# 
   570  0F37                     	;# 
   571  0FE4                     	;# 
   572  0FE5                     	;# 
   573  0FE6                     	;# 
   574  0FE7                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEF                     	;# 
   582  0000                     	;# 
   583  0001                     	;# 
   584  0002                     	;# 
   585  0003                     	;# 
   586  0004                     	;# 
   587  0005                     	;# 
   588  0006                     	;# 
   589  0007                     	;# 
   590  0008                     	;# 
   591  0009                     	;# 
   592  000A                     	;# 
   593  000B                     	;# 
   594  000C                     	;# 
   595  000D                     	;# 
   596  000E                     	;# 
   597  0010                     	;# 
   598  0011                     	;# 
   599  0012                     	;# 
   600  0013                     	;# 
   601  0014                     	;# 
   602  0015                     	;# 
   603  0016                     	;# 
   604  0016                     	;# 
   605  0017                     	;# 
   606  0018                     	;# 
   607  0019                     	;# 
   608  001A                     	;# 
   609  001A                     	;# 
   610  001B                     	;# 
   611  001B                     	;# 
   612  001C                     	;# 
   613  001D                     	;# 
   614  001E                     	;# 
   615  001F                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  0090                     	;# 
   620  0091                     	;# 
   621  0092                     	;# 
   622  0093                     	;# 
   623  0094                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0098                     	;# 
   627  0099                     	;# 
   628  009A                     	;# 
   629  009B                     	;# 
   630  009B                     	;# 
   631  009C                     	;# 
   632  009D                     	;# 
   633  009E                     	;# 
   634  009F                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010E                     	;# 
   638  0111                     	;# 
   639  0112                     	;# 
   640  0113                     	;# 
   641  0114                     	;# 
   642  0115                     	;# 
   643  0116                     	;# 
   644  0117                     	;# 
   645  0118                     	;# 
   646  0119                     	;# 
   647  011C                     	;# 
   648  018C                     	;# 
   649  018D                     	;# 
   650  018E                     	;# 
   651  0191                     	;# 
   652  0191                     	;# 
   653  0192                     	;# 
   654  0193                     	;# 
   655  0193                     	;# 
   656  0194                     	;# 
   657  0195                     	;# 
   658  0196                     	;# 
   659  0197                     	;# 
   660  0199                     	;# 
   661  0199                     	;# 
   662  0199                     	;# 
   663  019A                     	;# 
   664  019A                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019C                     	;# 
   674  019D                     	;# 
   675  019D                     	;# 
   676  019D                     	;# 
   677  019E                     	;# 
   678  019E                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  019F                     	;# 
   682  019F                     	;# 
   683  019F                     	;# 
   684  019F                     	;# 
   685  020C                     	;# 
   686  020D                     	;# 
   687  020E                     	;# 
   688  0211                     	;# 
   689  0211                     	;# 
   690  0212                     	;# 
   691  0212                     	;# 
   692  0213                     	;# 
   693  0213                     	;# 
   694  0214                     	;# 
   695  0214                     	;# 
   696  0215                     	;# 
   697  0215                     	;# 
   698  0215                     	;# 
   699  0215                     	;# 
   700  0216                     	;# 
   701  0216                     	;# 
   702  0217                     	;# 
   703  0217                     	;# 
   704  028C                     	;# 
   705  028D                     	;# 
   706  028E                     	;# 
   707  0291                     	;# 
   708  0291                     	;# 
   709  0292                     	;# 
   710  0293                     	;# 
   711  0294                     	;# 
   712  0298                     	;# 
   713  0298                     	;# 
   714  0299                     	;# 
   715  029A                     	;# 
   716  029B                     	;# 
   717  029E                     	;# 
   718  030C                     	;# 
   719  030D                     	;# 
   720  030E                     	;# 
   721  038C                     	;# 
   722  038D                     	;# 
   723  038E                     	;# 
   724  0391                     	;# 
   725  0392                     	;# 
   726  0393                     	;# 
   727  0394                     	;# 
   728  0395                     	;# 
   729  0396                     	;# 
   730  0397                     	;# 
   731  0398                     	;# 
   732  0399                     	;# 
   733  040E                     	;# 
   734  0413                     	;# 
   735  0413                     	;# 
   736  0414                     	;# 
   737  0414                     	;# 
   738  0415                     	;# 
   739  0416                     	;# 
   740  0417                     	;# 
   741  0418                     	;# 
   742  041A                     	;# 
   743  041A                     	;# 
   744  041B                     	;# 
   745  041B                     	;# 
   746  041C                     	;# 
   747  041D                     	;# 
   748  041E                     	;# 
   749  041F                     	;# 
   750  0493                     	;# 
   751  0494                     	;# 
   752  0495                     	;# 
   753  0496                     	;# 
   754  049A                     	;# 
   755  049B                     	;# 
   756  049C                     	;# 
   757  049D                     	;# 
   758  058C                     	;# 
   759  058C                     	;# 
   760  058D                     	;# 
   761  058E                     	;# 
   762  058E                     	;# 
   763  058F                     	;# 
   764  0590                     	;# 
   765  0590                     	;# 
   766  0591                     	;# 
   767  0592                     	;# 
   768  0592                     	;# 
   769  0593                     	;# 
   770  0594                     	;# 
   771  0594                     	;# 
   772  0595                     	;# 
   773  0596                     	;# 
   774  0596                     	;# 
   775  0597                     	;# 
   776  0598                     	;# 
   777  0599                     	;# 
   778  059A                     	;# 
   779  059B                     	;# 
   780  059B                     	;# 
   781  059C                     	;# 
   782  059D                     	;# 
   783  060C                     	;# 
   784  060C                     	;# 
   785  060D                     	;# 
   786  060E                     	;# 
   787  060F                     	;# 
   788  060F                     	;# 
   789  0610                     	;# 
   790  0611                     	;# 
   791  0612                     	;# 
   792  0613                     	;# 
   793  0614                     	;# 
   794  0617                     	;# 
   795  0617                     	;# 
   796  0618                     	;# 
   797  0619                     	;# 
   798  061A                     	;# 
   799  061A                     	;# 
   800  061B                     	;# 
   801  061C                     	;# 
   802  0691                     	;# 
   803  0692                     	;# 
   804  0693                     	;# 
   805  0694                     	;# 
   806  0695                     	;# 
   807  0696                     	;# 
   808  0697                     	;# 
   809  0699                     	;# 
   810  069A                     	;# 
   811  0711                     	;# 
   812  0712                     	;# 
   813  0713                     	;# 
   814  0714                     	;# 
   815  0715                     	;# 
   816  0718                     	;# 
   817  0718                     	;# 
   818  0719                     	;# 
   819  071A                     	;# 
   820  071A                     	;# 
   821  071B                     	;# 
   822  071C                     	;# 
   823  071D                     	;# 
   824  0791                     	;# 
   825  0791                     	;# 
   826  0792                     	;# 
   827  0793                     	;# 
   828  0793                     	;# 
   829  0794                     	;# 
   830  0795                     	;# 
   831  0795                     	;# 
   832  0796                     	;# 
   833  0797                     	;# 
   834  0797                     	;# 
   835  0798                     	;# 
   836  0799                     	;# 
   837  079A                     	;# 
   838  080C                     	;# 
   839  080C                     	;# 
   840  080D                     	;# 
   841  080E                     	;# 
   842  080E                     	;# 
   843  080F                     	;# 
   844  0810                     	;# 
   845  0810                     	;# 
   846  0811                     	;# 
   847  0812                     	;# 
   848  0812                     	;# 
   849  0813                     	;# 
   850  0814                     	;# 
   851  0815                     	;# 
   852  0816                     	;# 
   853  0817                     	;# 
   854  0818                     	;# 
   855  0819                     	;# 
   856  081A                     	;# 
   857  081A                     	;# 
   858  081B                     	;# 
   859  081C                     	;# 
   860  081C                     	;# 
   861  081D                     	;# 
   862  088C                     	;# 
   863  088D                     	;# 
   864  088E                     	;# 
   865  088F                     	;# 
   866  088F                     	;# 
   867  0890                     	;# 
   868  0891                     	;# 
   869  0892                     	;# 
   870  0893                     	;# 
   871  0893                     	;# 
   872  0894                     	;# 
   873  0895                     	;# 
   874  0896                     	;# 
   875  0897                     	;# 
   876  0897                     	;# 
   877  0898                     	;# 
   878  0899                     	;# 
   879  0D8C                     	;# 
   880  0D8C                     	;# 
   881  0D8D                     	;# 
   882  0D8E                     	;# 
   883  0D8F                     	;# 
   884  0D8F                     	;# 
   885  0D90                     	;# 
   886  0D91                     	;# 
   887  0D92                     	;# 
   888  0D92                     	;# 
   889  0D93                     	;# 
   890  0D94                     	;# 
   891  0D95                     	;# 
   892  0D95                     	;# 
   893  0D96                     	;# 
   894  0D97                     	;# 
   895  0D98                     	;# 
   896  0D99                     	;# 
   897  0D9A                     	;# 
   898  0D9B                     	;# 
   899  0D9C                     	;# 
   900  0D9D                     	;# 
   901  0D9E                     	;# 
   902  0D9E                     	;# 
   903  0D9F                     	;# 
   904  0DA0                     	;# 
   905  0DA1                     	;# 
   906  0DA1                     	;# 
   907  0DA2                     	;# 
   908  0DA3                     	;# 
   909  0DA4                     	;# 
   910  0DA4                     	;# 
   911  0DA5                     	;# 
   912  0DA6                     	;# 
   913  0DA7                     	;# 
   914  0DA7                     	;# 
   915  0DA8                     	;# 
   916  0DA9                     	;# 
   917  0DAA                     	;# 
   918  0DAB                     	;# 
   919  0DAC                     	;# 
   920  0DAD                     	;# 
   921  0DAE                     	;# 
   922  0DAF                     	;# 
   923  0E0F                     	;# 
   924  0E10                     	;# 
   925  0E11                     	;# 
   926  0E12                     	;# 
   927  0E13                     	;# 
   928  0E14                     	;# 
   929  0E15                     	;# 
   930  0E16                     	;# 
   931  0E17                     	;# 
   932  0E18                     	;# 
   933  0E19                     	;# 
   934  0E1A                     	;# 
   935  0E1B                     	;# 
   936  0E1C                     	;# 
   937  0E1D                     	;# 
   938  0E1E                     	;# 
   939  0E1F                     	;# 
   940  0E20                     	;# 
   941  0E21                     	;# 
   942  0E22                     	;# 
   943  0E23                     	;# 
   944  0E24                     	;# 
   945  0E25                     	;# 
   946  0E26                     	;# 
   947  0E27                     	;# 
   948  0E28                     	;# 
   949  0E29                     	;# 
   950  0E2A                     	;# 
   951  0E2B                     	;# 
   952  0E2C                     	;# 
   953  0E2D                     	;# 
   954  0E2E                     	;# 
   955  0E90                     	;# 
   956  0E91                     	;# 
   957  0E92                     	;# 
   958  0E94                     	;# 
   959  0E95                     	;# 
   960  0E9C                     	;# 
   961  0E9D                     	;# 
   962  0E9E                     	;# 
   963  0E9F                     	;# 
   964  0EA0                     	;# 
   965  0EA1                     	;# 
   966  0EA2                     	;# 
   967  0EA3                     	;# 
   968  0EA4                     	;# 
   969  0EA5                     	;# 
   970  0EA6                     	;# 
   971  0EA7                     	;# 
   972  0F0F                     	;# 
   973  0F10                     	;# 
   974  0F11                     	;# 
   975  0F12                     	;# 
   976  0F13                     	;# 
   977  0F14                     	;# 
   978  0F15                     	;# 
   979  0F16                     	;# 
   980  0F17                     	;# 
   981  0F18                     	;# 
   982  0F19                     	;# 
   983  0F1A                     	;# 
   984  0F1B                     	;# 
   985  0F1C                     	;# 
   986  0F1D                     	;# 
   987  0F1E                     	;# 
   988  0F1F                     	;# 
   989  0F20                     	;# 
   990  0F21                     	;# 
   991  0F22                     	;# 
   992  0F23                     	;# 
   993  0F24                     	;# 
   994  0F25                     	;# 
   995  0F26                     	;# 
   996  0F27                     	;# 
   997  0F28                     	;# 
   998  0F29                     	;# 
   999  0F2A                     	;# 
  1000  0F2B                     	;# 
  1001  0F2C                     	;# 
  1002  0F2D                     	;# 
  1003  0F2E                     	;# 
  1004  0F2F                     	;# 
  1005  0F30                     	;# 
  1006  0F31                     	;# 
  1007  0F32                     	;# 
  1008  0F33                     	;# 
  1009  0F34                     	;# 
  1010  0F35                     	;# 
  1011  0F36                     	;# 
  1012  0F37                     	;# 
  1013  0FE4                     	;# 
  1014  0FE5                     	;# 
  1015  0FE6                     	;# 
  1016  0FE7                     	;# 
  1017  0FE8                     	;# 
  1018  0FE9                     	;# 
  1019  0FEA                     	;# 
  1020  0FEB                     	;# 
  1021  0FED                     	;# 
  1022  0FEE                     	;# 
  1023  0FEF                     	;# 
  1024  0000                     	;# 
  1025  0001                     	;# 
  1026  0002                     	;# 
  1027  0003                     	;# 
  1028  0004                     	;# 
  1029  0005                     	;# 
  1030  0006                     	;# 
  1031  0007                     	;# 
  1032  0008                     	;# 
  1033  0009                     	;# 
  1034  000A                     	;# 
  1035  000B                     	;# 
  1036  000C                     	;# 
  1037  000D                     	;# 
  1038  000E                     	;# 
  1039  0010                     	;# 
  1040  0011                     	;# 
  1041  0012                     	;# 
  1042  0013                     	;# 
  1043  0014                     	;# 
  1044  0015                     	;# 
  1045  0016                     	;# 
  1046  0016                     	;# 
  1047  0017                     	;# 
  1048  0018                     	;# 
  1049  0019                     	;# 
  1050  001A                     	;# 
  1051  001A                     	;# 
  1052  001B                     	;# 
  1053  001B                     	;# 
  1054  001C                     	;# 
  1055  001D                     	;# 
  1056  001E                     	;# 
  1057  001F                     	;# 
  1058  008C                     	;# 
  1059  008D                     	;# 
  1060  008E                     	;# 
  1061  0090                     	;# 
  1062  0091                     	;# 
  1063  0092                     	;# 
  1064  0093                     	;# 
  1065  0094                     	;# 
  1066  0095                     	;# 
  1067  0096                     	;# 
  1068  0098                     	;# 
  1069  0099                     	;# 
  1070  009A                     	;# 
  1071  009B                     	;# 
  1072  009B                     	;# 
  1073  009C                     	;# 
  1074  009D                     	;# 
  1075  009E                     	;# 
  1076  009F                     	;# 
  1077  010C                     	;# 
  1078  010D                     	;# 
  1079  010E                     	;# 
  1080  0111                     	;# 
  1081  0112                     	;# 
  1082  0113                     	;# 
  1083  0114                     	;# 
  1084  0115                     	;# 
  1085  0116                     	;# 
  1086  0117                     	;# 
  1087  0118                     	;# 
  1088  0119                     	;# 
  1089  011C                     	;# 
  1090  018C                     	;# 
  1091  018D                     	;# 
  1092  018E                     	;# 
  1093  0191                     	;# 
  1094  0191                     	;# 
  1095  0192                     	;# 
  1096  0193                     	;# 
  1097  0193                     	;# 
  1098  0194                     	;# 
  1099  0195                     	;# 
  1100  0196                     	;# 
  1101  0197                     	;# 
  1102  0199                     	;# 
  1103  0199                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019A                     	;# 
  1107  019A                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019C                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019D                     	;# 
  1118  019D                     	;# 
  1119  019E                     	;# 
  1120  019E                     	;# 
  1121  019E                     	;# 
  1122  019F                     	;# 
  1123  019F                     	;# 
  1124  019F                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  020C                     	;# 
  1128  020D                     	;# 
  1129  020E                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0216                     	;# 
  1143  0216                     	;# 
  1144  0217                     	;# 
  1145  0217                     	;# 
  1146  028C                     	;# 
  1147  028D                     	;# 
  1148  028E                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0294                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  029B                     	;# 
  1159  029E                     	;# 
  1160  030C                     	;# 
  1161  030D                     	;# 
  1162  030E                     	;# 
  1163  038C                     	;# 
  1164  038D                     	;# 
  1165  038E                     	;# 
  1166  0391                     	;# 
  1167  0392                     	;# 
  1168  0393                     	;# 
  1169  0394                     	;# 
  1170  0395                     	;# 
  1171  0396                     	;# 
  1172  0397                     	;# 
  1173  0398                     	;# 
  1174  0399                     	;# 
  1175  040E                     	;# 
  1176  0413                     	;# 
  1177  0413                     	;# 
  1178  0414                     	;# 
  1179  0414                     	;# 
  1180  0415                     	;# 
  1181  0416                     	;# 
  1182  0417                     	;# 
  1183  0418                     	;# 
  1184  041A                     	;# 
  1185  041A                     	;# 
  1186  041B                     	;# 
  1187  041B                     	;# 
  1188  041C                     	;# 
  1189  041D                     	;# 
  1190  041E                     	;# 
  1191  041F                     	;# 
  1192  0493                     	;# 
  1193  0494                     	;# 
  1194  0495                     	;# 
  1195  0496                     	;# 
  1196  049A                     	;# 
  1197  049B                     	;# 
  1198  049C                     	;# 
  1199  049D                     	;# 
  1200  058C                     	;# 
  1201  058C                     	;# 
  1202  058D                     	;# 
  1203  058E                     	;# 
  1204  058E                     	;# 
  1205  058F                     	;# 
  1206  0590                     	;# 
  1207  0590                     	;# 
  1208  0591                     	;# 
  1209  0592                     	;# 
  1210  0592                     	;# 
  1211  0593                     	;# 
  1212  0594                     	;# 
  1213  0594                     	;# 
  1214  0595                     	;# 
  1215  0596                     	;# 
  1216  0596                     	;# 
  1217  0597                     	;# 
  1218  0598                     	;# 
  1219  0599                     	;# 
  1220  059A                     	;# 
  1221  059B                     	;# 
  1222  059B                     	;# 
  1223  059C                     	;# 
  1224  059D                     	;# 
  1225  060C                     	;# 
  1226  060C                     	;# 
  1227  060D                     	;# 
  1228  060E                     	;# 
  1229  060F                     	;# 
  1230  060F                     	;# 
  1231  0610                     	;# 
  1232  0611                     	;# 
  1233  0612                     	;# 
  1234  0613                     	;# 
  1235  0614                     	;# 
  1236  0617                     	;# 
  1237  0617                     	;# 
  1238  0618                     	;# 
  1239  0619                     	;# 
  1240  061A                     	;# 
  1241  061A                     	;# 
  1242  061B                     	;# 
  1243  061C                     	;# 
  1244  0691                     	;# 
  1245  0692                     	;# 
  1246  0693                     	;# 
  1247  0694                     	;# 
  1248  0695                     	;# 
  1249  0696                     	;# 
  1250  0697                     	;# 
  1251  0699                     	;# 
  1252  069A                     	;# 
  1253  0711                     	;# 
  1254  0712                     	;# 
  1255  0713                     	;# 
  1256  0714                     	;# 
  1257  0715                     	;# 
  1258  0718                     	;# 
  1259  0718                     	;# 
  1260  0719                     	;# 
  1261  071A                     	;# 
  1262  071A                     	;# 
  1263  071B                     	;# 
  1264  071C                     	;# 
  1265  071D                     	;# 
  1266  0791                     	;# 
  1267  0791                     	;# 
  1268  0792                     	;# 
  1269  0793                     	;# 
  1270  0793                     	;# 
  1271  0794                     	;# 
  1272  0795                     	;# 
  1273  0795                     	;# 
  1274  0796                     	;# 
  1275  0797                     	;# 
  1276  0797                     	;# 
  1277  0798                     	;# 
  1278  0799                     	;# 
  1279  079A                     	;# 
  1280  080C                     	;# 
  1281  080C                     	;# 
  1282  080D                     	;# 
  1283  080E                     	;# 
  1284  080E                     	;# 
  1285  080F                     	;# 
  1286  0810                     	;# 
  1287  0810                     	;# 
  1288  0811                     	;# 
  1289  0812                     	;# 
  1290  0812                     	;# 
  1291  0813                     	;# 
  1292  0814                     	;# 
  1293  0815                     	;# 
  1294  0816                     	;# 
  1295  0817                     	;# 
  1296  0818                     	;# 
  1297  0819                     	;# 
  1298  081A                     	;# 
  1299  081A                     	;# 
  1300  081B                     	;# 
  1301  081C                     	;# 
  1302  081C                     	;# 
  1303  081D                     	;# 
  1304  088C                     	;# 
  1305  088D                     	;# 
  1306  088E                     	;# 
  1307  088F                     	;# 
  1308  088F                     	;# 
  1309  0890                     	;# 
  1310  0891                     	;# 
  1311  0892                     	;# 
  1312  0893                     	;# 
  1313  0893                     	;# 
  1314  0894                     	;# 
  1315  0895                     	;# 
  1316  0896                     	;# 
  1317  0897                     	;# 
  1318  0897                     	;# 
  1319  0898                     	;# 
  1320  0899                     	;# 
  1321  0D8C                     	;# 
  1322  0D8C                     	;# 
  1323  0D8D                     	;# 
  1324  0D8E                     	;# 
  1325  0D8F                     	;# 
  1326  0D8F                     	;# 
  1327  0D90                     	;# 
  1328  0D91                     	;# 
  1329  0D92                     	;# 
  1330  0D92                     	;# 
  1331  0D93                     	;# 
  1332  0D94                     	;# 
  1333  0D95                     	;# 
  1334  0D95                     	;# 
  1335  0D96                     	;# 
  1336  0D97                     	;# 
  1337  0D98                     	;# 
  1338  0D99                     	;# 
  1339  0D9A                     	;# 
  1340  0D9B                     	;# 
  1341  0D9C                     	;# 
  1342  0D9D                     	;# 
  1343  0D9E                     	;# 
  1344  0D9E                     	;# 
  1345  0D9F                     	;# 
  1346  0DA0                     	;# 
  1347  0DA1                     	;# 
  1348  0DA1                     	;# 
  1349  0DA2                     	;# 
  1350  0DA3                     	;# 
  1351  0DA4                     	;# 
  1352  0DA4                     	;# 
  1353  0DA5                     	;# 
  1354  0DA6                     	;# 
  1355  0DA7                     	;# 
  1356  0DA7                     	;# 
  1357  0DA8                     	;# 
  1358  0DA9                     	;# 
  1359  0DAA                     	;# 
  1360  0DAB                     	;# 
  1361  0DAC                     	;# 
  1362  0DAD                     	;# 
  1363  0DAE                     	;# 
  1364  0DAF                     	;# 
  1365  0E0F                     	;# 
  1366  0E10                     	;# 
  1367  0E11                     	;# 
  1368  0E12                     	;# 
  1369  0E13                     	;# 
  1370  0E14                     	;# 
  1371  0E15                     	;# 
  1372  0E16                     	;# 
  1373  0E17                     	;# 
  1374  0E18                     	;# 
  1375  0E19                     	;# 
  1376  0E1A                     	;# 
  1377  0E1B                     	;# 
  1378  0E1C                     	;# 
  1379  0E1D                     	;# 
  1380  0E1E                     	;# 
  1381  0E1F                     	;# 
  1382  0E20                     	;# 
  1383  0E21                     	;# 
  1384  0E22                     	;# 
  1385  0E23                     	;# 
  1386  0E24                     	;# 
  1387  0E25                     	;# 
  1388  0E26                     	;# 
  1389  0E27                     	;# 
  1390  0E28                     	;# 
  1391  0E29                     	;# 
  1392  0E2A                     	;# 
  1393  0E2B                     	;# 
  1394  0E2C                     	;# 
  1395  0E2D                     	;# 
  1396  0E2E                     	;# 
  1397  0E90                     	;# 
  1398  0E91                     	;# 
  1399  0E92                     	;# 
  1400  0E94                     	;# 
  1401  0E95                     	;# 
  1402  0E9C                     	;# 
  1403  0E9D                     	;# 
  1404  0E9E                     	;# 
  1405  0E9F                     	;# 
  1406  0EA0                     	;# 
  1407  0EA1                     	;# 
  1408  0EA2                     	;# 
  1409  0EA3                     	;# 
  1410  0EA4                     	;# 
  1411  0EA5                     	;# 
  1412  0EA6                     	;# 
  1413  0EA7                     	;# 
  1414  0F0F                     	;# 
  1415  0F10                     	;# 
  1416  0F11                     	;# 
  1417  0F12                     	;# 
  1418  0F13                     	;# 
  1419  0F14                     	;# 
  1420  0F15                     	;# 
  1421  0F16                     	;# 
  1422  0F17                     	;# 
  1423  0F18                     	;# 
  1424  0F19                     	;# 
  1425  0F1A                     	;# 
  1426  0F1B                     	;# 
  1427  0F1C                     	;# 
  1428  0F1D                     	;# 
  1429  0F1E                     	;# 
  1430  0F1F                     	;# 
  1431  0F20                     	;# 
  1432  0F21                     	;# 
  1433  0F22                     	;# 
  1434  0F23                     	;# 
  1435  0F24                     	;# 
  1436  0F25                     	;# 
  1437  0F26                     	;# 
  1438  0F27                     	;# 
  1439  0F28                     	;# 
  1440  0F29                     	;# 
  1441  0F2A                     	;# 
  1442  0F2B                     	;# 
  1443  0F2C                     	;# 
  1444  0F2D                     	;# 
  1445  0F2E                     	;# 
  1446  0F2F                     	;# 
  1447  0F30                     	;# 
  1448  0F31                     	;# 
  1449  0F32                     	;# 
  1450  0F33                     	;# 
  1451  0F34                     	;# 
  1452  0F35                     	;# 
  1453  0F36                     	;# 
  1454  0F37                     	;# 
  1455  0FE4                     	;# 
  1456  0FE5                     	;# 
  1457  0FE6                     	;# 
  1458  0FE7                     	;# 
  1459  0FE8                     	;# 
  1460  0FE9                     	;# 
  1461  0FEA                     	;# 
  1462  0FEB                     	;# 
  1463  0FED                     	;# 
  1464  0FEE                     	;# 
  1465  0FEF                     	;# 
  1466  0000                     	;# 
  1467  0001                     	;# 
  1468  0002                     	;# 
  1469  0003                     	;# 
  1470  0004                     	;# 
  1471  0005                     	;# 
  1472  0006                     	;# 
  1473  0007                     	;# 
  1474  0008                     	;# 
  1475  0009                     	;# 
  1476  000A                     	;# 
  1477  000B                     	;# 
  1478  000C                     	;# 
  1479  000D                     	;# 
  1480  000E                     	;# 
  1481  0010                     	;# 
  1482  0011                     	;# 
  1483  0012                     	;# 
  1484  0013                     	;# 
  1485  0014                     	;# 
  1486  0015                     	;# 
  1487  0016                     	;# 
  1488  0016                     	;# 
  1489  0017                     	;# 
  1490  0018                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001A                     	;# 
  1494  001B                     	;# 
  1495  001B                     	;# 
  1496  001C                     	;# 
  1497  001D                     	;# 
  1498  001E                     	;# 
  1499  001F                     	;# 
  1500  008C                     	;# 
  1501  008D                     	;# 
  1502  008E                     	;# 
  1503  0090                     	;# 
  1504  0091                     	;# 
  1505  0092                     	;# 
  1506  0093                     	;# 
  1507  0094                     	;# 
  1508  0095                     	;# 
  1509  0096                     	;# 
  1510  0098                     	;# 
  1511  0099                     	;# 
  1512  009A                     	;# 
  1513  009B                     	;# 
  1514  009B                     	;# 
  1515  009C                     	;# 
  1516  009D                     	;# 
  1517  009E                     	;# 
  1518  009F                     	;# 
  1519  010C                     	;# 
  1520  010D                     	;# 
  1521  010E                     	;# 
  1522  0111                     	;# 
  1523  0112                     	;# 
  1524  0113                     	;# 
  1525  0114                     	;# 
  1526  0115                     	;# 
  1527  0116                     	;# 
  1528  0117                     	;# 
  1529  0118                     	;# 
  1530  0119                     	;# 
  1531  011C                     	;# 
  1532  018C                     	;# 
  1533  018D                     	;# 
  1534  018E                     	;# 
  1535  0191                     	;# 
  1536  0191                     	;# 
  1537  0192                     	;# 
  1538  0193                     	;# 
  1539  0193                     	;# 
  1540  0194                     	;# 
  1541  0195                     	;# 
  1542  0196                     	;# 
  1543  0197                     	;# 
  1544  0199                     	;# 
  1545  0199                     	;# 
  1546  0199                     	;# 
  1547  019A                     	;# 
  1548  019A                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019C                     	;# 
  1558  019D                     	;# 
  1559  019D                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019E                     	;# 
  1563  019E                     	;# 
  1564  019F                     	;# 
  1565  019F                     	;# 
  1566  019F                     	;# 
  1567  019F                     	;# 
  1568  019F                     	;# 
  1569  020C                     	;# 
  1570  020D                     	;# 
  1571  020E                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  028C                     	;# 
  1589  028D                     	;# 
  1590  028E                     	;# 
  1591  0291                     	;# 
  1592  0291                     	;# 
  1593  0292                     	;# 
  1594  0293                     	;# 
  1595  0294                     	;# 
  1596  0298                     	;# 
  1597  0298                     	;# 
  1598  0299                     	;# 
  1599  029A                     	;# 
  1600  029B                     	;# 
  1601  029E                     	;# 
  1602  030C                     	;# 
  1603  030D                     	;# 
  1604  030E                     	;# 
  1605  038C                     	;# 
  1606  038D                     	;# 
  1607  038E                     	;# 
  1608  0391                     	;# 
  1609  0392                     	;# 
  1610  0393                     	;# 
  1611  0394                     	;# 
  1612  0395                     	;# 
  1613  0396                     	;# 
  1614  0397                     	;# 
  1615  0398                     	;# 
  1616  0399                     	;# 
  1617  040E                     	;# 
  1618  0413                     	;# 
  1619  0413                     	;# 
  1620  0414                     	;# 
  1621  0414                     	;# 
  1622  0415                     	;# 
  1623  0416                     	;# 
  1624  0417                     	;# 
  1625  0418                     	;# 
  1626  041A                     	;# 
  1627  041A                     	;# 
  1628  041B                     	;# 
  1629  041B                     	;# 
  1630  041C                     	;# 
  1631  041D                     	;# 
  1632  041E                     	;# 
  1633  041F                     	;# 
  1634  0493                     	;# 
  1635  0494                     	;# 
  1636  0495                     	;# 
  1637  0496                     	;# 
  1638  049A                     	;# 
  1639  049B                     	;# 
  1640  049C                     	;# 
  1641  049D                     	;# 
  1642  058C                     	;# 
  1643  058C                     	;# 
  1644  058D                     	;# 
  1645  058E                     	;# 
  1646  058E                     	;# 
  1647  058F                     	;# 
  1648  0590                     	;# 
  1649  0590                     	;# 
  1650  0591                     	;# 
  1651  0592                     	;# 
  1652  0592                     	;# 
  1653  0593                     	;# 
  1654  0594                     	;# 
  1655  0594                     	;# 
  1656  0595                     	;# 
  1657  0596                     	;# 
  1658  0596                     	;# 
  1659  0597                     	;# 
  1660  0598                     	;# 
  1661  0599                     	;# 
  1662  059A                     	;# 
  1663  059B                     	;# 
  1664  059B                     	;# 
  1665  059C                     	;# 
  1666  059D                     	;# 
  1667  060C                     	;# 
  1668  060C                     	;# 
  1669  060D                     	;# 
  1670  060E                     	;# 
  1671  060F                     	;# 
  1672  060F                     	;# 
  1673  0610                     	;# 
  1674  0611                     	;# 
  1675  0612                     	;# 
  1676  0613                     	;# 
  1677  0614                     	;# 
  1678  0617                     	;# 
  1679  0617                     	;# 
  1680  0618                     	;# 
  1681  0619                     	;# 
  1682  061A                     	;# 
  1683  061A                     	;# 
  1684  061B                     	;# 
  1685  061C                     	;# 
  1686  0691                     	;# 
  1687  0692                     	;# 
  1688  0693                     	;# 
  1689  0694                     	;# 
  1690  0695                     	;# 
  1691  0696                     	;# 
  1692  0697                     	;# 
  1693  0699                     	;# 
  1694  069A                     	;# 
  1695  0711                     	;# 
  1696  0712                     	;# 
  1697  0713                     	;# 
  1698  0714                     	;# 
  1699  0715                     	;# 
  1700  0718                     	;# 
  1701  0718                     	;# 
  1702  0719                     	;# 
  1703  071A                     	;# 
  1704  071A                     	;# 
  1705  071B                     	;# 
  1706  071C                     	;# 
  1707  071D                     	;# 
  1708  0791                     	;# 
  1709  0791                     	;# 
  1710  0792                     	;# 
  1711  0793                     	;# 
  1712  0793                     	;# 
  1713  0794                     	;# 
  1714  0795                     	;# 
  1715  0795                     	;# 
  1716  0796                     	;# 
  1717  0797                     	;# 
  1718  0797                     	;# 
  1719  0798                     	;# 
  1720  0799                     	;# 
  1721  079A                     	;# 
  1722  080C                     	;# 
  1723  080C                     	;# 
  1724  080D                     	;# 
  1725  080E                     	;# 
  1726  080E                     	;# 
  1727  080F                     	;# 
  1728  0810                     	;# 
  1729  0810                     	;# 
  1730  0811                     	;# 
  1731  0812                     	;# 
  1732  0812                     	;# 
  1733  0813                     	;# 
  1734  0814                     	;# 
  1735  0815                     	;# 
  1736  0816                     	;# 
  1737  0817                     	;# 
  1738  0818                     	;# 
  1739  0819                     	;# 
  1740  081A                     	;# 
  1741  081A                     	;# 
  1742  081B                     	;# 
  1743  081C                     	;# 
  1744  081C                     	;# 
  1745  081D                     	;# 
  1746  088C                     	;# 
  1747  088D                     	;# 
  1748  088E                     	;# 
  1749  088F                     	;# 
  1750  088F                     	;# 
  1751  0890                     	;# 
  1752  0891                     	;# 
  1753  0892                     	;# 
  1754  0893                     	;# 
  1755  0893                     	;# 
  1756  0894                     	;# 
  1757  0895                     	;# 
  1758  0896                     	;# 
  1759  0897                     	;# 
  1760  0897                     	;# 
  1761  0898                     	;# 
  1762  0899                     	;# 
  1763  0D8C                     	;# 
  1764  0D8C                     	;# 
  1765  0D8D                     	;# 
  1766  0D8E                     	;# 
  1767  0D8F                     	;# 
  1768  0D8F                     	;# 
  1769  0D90                     	;# 
  1770  0D91                     	;# 
  1771  0D92                     	;# 
  1772  0D92                     	;# 
  1773  0D93                     	;# 
  1774  0D94                     	;# 
  1775  0D95                     	;# 
  1776  0D95                     	;# 
  1777  0D96                     	;# 
  1778  0D97                     	;# 
  1779  0D98                     	;# 
  1780  0D99                     	;# 
  1781  0D9A                     	;# 
  1782  0D9B                     	;# 
  1783  0D9C                     	;# 
  1784  0D9D                     	;# 
  1785  0D9E                     	;# 
  1786  0D9E                     	;# 
  1787  0D9F                     	;# 
  1788  0DA0                     	;# 
  1789  0DA1                     	;# 
  1790  0DA1                     	;# 
  1791  0DA2                     	;# 
  1792  0DA3                     	;# 
  1793  0DA4                     	;# 
  1794  0DA4                     	;# 
  1795  0DA5                     	;# 
  1796  0DA6                     	;# 
  1797  0DA7                     	;# 
  1798  0DA7                     	;# 
  1799  0DA8                     	;# 
  1800  0DA9                     	;# 
  1801  0DAA                     	;# 
  1802  0DAB                     	;# 
  1803  0DAC                     	;# 
  1804  0DAD                     	;# 
  1805  0DAE                     	;# 
  1806  0DAF                     	;# 
  1807  0E0F                     	;# 
  1808  0E10                     	;# 
  1809  0E11                     	;# 
  1810  0E12                     	;# 
  1811  0E13                     	;# 
  1812  0E14                     	;# 
  1813  0E15                     	;# 
  1814  0E16                     	;# 
  1815  0E17                     	;# 
  1816  0E18                     	;# 
  1817  0E19                     	;# 
  1818  0E1A                     	;# 
  1819  0E1B                     	;# 
  1820  0E1C                     	;# 
  1821  0E1D                     	;# 
  1822  0E1E                     	;# 
  1823  0E1F                     	;# 
  1824  0E20                     	;# 
  1825  0E21                     	;# 
  1826  0E22                     	;# 
  1827  0E23                     	;# 
  1828  0E24                     	;# 
  1829  0E25                     	;# 
  1830  0E26                     	;# 
  1831  0E27                     	;# 
  1832  0E28                     	;# 
  1833  0E29                     	;# 
  1834  0E2A                     	;# 
  1835  0E2B                     	;# 
  1836  0E2C                     	;# 
  1837  0E2D                     	;# 
  1838  0E2E                     	;# 
  1839  0E90                     	;# 
  1840  0E91                     	;# 
  1841  0E92                     	;# 
  1842  0E94                     	;# 
  1843  0E95                     	;# 
  1844  0E9C                     	;# 
  1845  0E9D                     	;# 
  1846  0E9E                     	;# 
  1847  0E9F                     	;# 
  1848  0EA0                     	;# 
  1849  0EA1                     	;# 
  1850  0EA2                     	;# 
  1851  0EA3                     	;# 
  1852  0EA4                     	;# 
  1853  0EA5                     	;# 
  1854  0EA6                     	;# 
  1855  0EA7                     	;# 
  1856  0F0F                     	;# 
  1857  0F10                     	;# 
  1858  0F11                     	;# 
  1859  0F12                     	;# 
  1860  0F13                     	;# 
  1861  0F14                     	;# 
  1862  0F15                     	;# 
  1863  0F16                     	;# 
  1864  0F17                     	;# 
  1865  0F18                     	;# 
  1866  0F19                     	;# 
  1867  0F1A                     	;# 
  1868  0F1B                     	;# 
  1869  0F1C                     	;# 
  1870  0F1D                     	;# 
  1871  0F1E                     	;# 
  1872  0F1F                     	;# 
  1873  0F20                     	;# 
  1874  0F21                     	;# 
  1875  0F22                     	;# 
  1876  0F23                     	;# 
  1877  0F24                     	;# 
  1878  0F25                     	;# 
  1879  0F26                     	;# 
  1880  0F27                     	;# 
  1881  0F28                     	;# 
  1882  0F29                     	;# 
  1883  0F2A                     	;# 
  1884  0F2B                     	;# 
  1885  0F2C                     	;# 
  1886  0F2D                     	;# 
  1887  0F2E                     	;# 
  1888  0F2F                     	;# 
  1889  0F30                     	;# 
  1890  0F31                     	;# 
  1891  0F32                     	;# 
  1892  0F33                     	;# 
  1893  0F34                     	;# 
  1894  0F35                     	;# 
  1895  0F36                     	;# 
  1896  0F37                     	;# 
  1897  0FE4                     	;# 
  1898  0FE5                     	;# 
  1899  0FE6                     	;# 
  1900  0FE7                     	;# 
  1901  0FE8                     	;# 
  1902  0FE9                     	;# 
  1903  0FEA                     	;# 
  1904  0FEB                     	;# 
  1905  0FED                     	;# 
  1906  0FEE                     	;# 
  1907  0FEF                     	;# 
  1908  0000                     	;# 
  1909  0001                     	;# 
  1910  0002                     	;# 
  1911  0003                     	;# 
  1912  0004                     	;# 
  1913  0005                     	;# 
  1914  0006                     	;# 
  1915  0007                     	;# 
  1916  0008                     	;# 
  1917  0009                     	;# 
  1918  000A                     	;# 
  1919  000B                     	;# 
  1920  000C                     	;# 
  1921  000D                     	;# 
  1922  000E                     	;# 
  1923  0010                     	;# 
  1924  0011                     	;# 
  1925  0012                     	;# 
  1926  0013                     	;# 
  1927  0014                     	;# 
  1928  0015                     	;# 
  1929  0016                     	;# 
  1930  0016                     	;# 
  1931  0017                     	;# 
  1932  0018                     	;# 
  1933  0019                     	;# 
  1934  001A                     	;# 
  1935  001A                     	;# 
  1936  001B                     	;# 
  1937  001B                     	;# 
  1938  001C                     	;# 
  1939  001D                     	;# 
  1940  001E                     	;# 
  1941  001F                     	;# 
  1942  008C                     	;# 
  1943  008D                     	;# 
  1944  008E                     	;# 
  1945  0090                     	;# 
  1946  0091                     	;# 
  1947  0092                     	;# 
  1948  0093                     	;# 
  1949  0094                     	;# 
  1950  0095                     	;# 
  1951  0096                     	;# 
  1952  0098                     	;# 
  1953  0099                     	;# 
  1954  009A                     	;# 
  1955  009B                     	;# 
  1956  009B                     	;# 
  1957  009C                     	;# 
  1958  009D                     	;# 
  1959  009E                     	;# 
  1960  009F                     	;# 
  1961  010C                     	;# 
  1962  010D                     	;# 
  1963  010E                     	;# 
  1964  0111                     	;# 
  1965  0112                     	;# 
  1966  0113                     	;# 
  1967  0114                     	;# 
  1968  0115                     	;# 
  1969  0116                     	;# 
  1970  0117                     	;# 
  1971  0118                     	;# 
  1972  0119                     	;# 
  1973  011C                     	;# 
  1974  018C                     	;# 
  1975  018D                     	;# 
  1976  018E                     	;# 
  1977  0191                     	;# 
  1978  0191                     	;# 
  1979  0192                     	;# 
  1980  0193                     	;# 
  1981  0193                     	;# 
  1982  0194                     	;# 
  1983  0195                     	;# 
  1984  0196                     	;# 
  1985  0197                     	;# 
  1986  0199                     	;# 
  1987  0199                     	;# 
  1988  0199                     	;# 
  1989  019A                     	;# 
  1990  019A                     	;# 
  1991  019A                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019C                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019D                     	;# 
  2002  019D                     	;# 
  2003  019E                     	;# 
  2004  019E                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  019F                     	;# 
  2008  019F                     	;# 
  2009  019F                     	;# 
  2010  019F                     	;# 
  2011  020C                     	;# 
  2012  020D                     	;# 
  2013  020E                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0216                     	;# 
  2027  0216                     	;# 
  2028  0217                     	;# 
  2029  0217                     	;# 
  2030  028C                     	;# 
  2031  028D                     	;# 
  2032  028E                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0294                     	;# 
  2038  0298                     	;# 
  2039  0298                     	;# 
  2040  0299                     	;# 
  2041  029A                     	;# 
  2042  029B                     	;# 
  2043  029E                     	;# 
  2044  030C                     	;# 
  2045  030D                     	;# 
  2046  030E                     	;# 
  2047  038C                     	;# 
  2048  038D                     	;# 
  2049  038E                     	;# 
  2050  0391                     	;# 
  2051  0392                     	;# 
  2052  0393                     	;# 
  2053  0394                     	;# 
  2054  0395                     	;# 
  2055  0396                     	;# 
  2056  0397                     	;# 
  2057  0398                     	;# 
  2058  0399                     	;# 
  2059  040E                     	;# 
  2060  0413                     	;# 
  2061  0413                     	;# 
  2062  0414                     	;# 
  2063  0414                     	;# 
  2064  0415                     	;# 
  2065  0416                     	;# 
  2066  0417                     	;# 
  2067  0418                     	;# 
  2068  041A                     	;# 
  2069  041A                     	;# 
  2070  041B                     	;# 
  2071  041B                     	;# 
  2072  041C                     	;# 
  2073  041D                     	;# 
  2074  041E                     	;# 
  2075  041F                     	;# 
  2076  0493                     	;# 
  2077  0494                     	;# 
  2078  0495                     	;# 
  2079  0496                     	;# 
  2080  049A                     	;# 
  2081  049B                     	;# 
  2082  049C                     	;# 
  2083  049D                     	;# 
  2084  058C                     	;# 
  2085  058C                     	;# 
  2086  058D                     	;# 
  2087  058E                     	;# 
  2088  058E                     	;# 
  2089  058F                     	;# 
  2090  0590                     	;# 
  2091  0590                     	;# 
  2092  0591                     	;# 
  2093  0592                     	;# 
  2094  0592                     	;# 
  2095  0593                     	;# 
  2096  0594                     	;# 
  2097  0594                     	;# 
  2098  0595                     	;# 
  2099  0596                     	;# 
  2100  0596                     	;# 
  2101  0597                     	;# 
  2102  0598                     	;# 
  2103  0599                     	;# 
  2104  059A                     	;# 
  2105  059B                     	;# 
  2106  059B                     	;# 
  2107  059C                     	;# 
  2108  059D                     	;# 
  2109  060C                     	;# 
  2110  060C                     	;# 
  2111  060D                     	;# 
  2112  060E                     	;# 
  2113  060F                     	;# 
  2114  060F                     	;# 
  2115  0610                     	;# 
  2116  0611                     	;# 
  2117  0612                     	;# 
  2118  0613                     	;# 
  2119  0614                     	;# 
  2120  0617                     	;# 
  2121  0617                     	;# 
  2122  0618                     	;# 
  2123  0619                     	;# 
  2124  061A                     	;# 
  2125  061A                     	;# 
  2126  061B                     	;# 
  2127  061C                     	;# 
  2128  0691                     	;# 
  2129  0692                     	;# 
  2130  0693                     	;# 
  2131  0694                     	;# 
  2132  0695                     	;# 
  2133  0696                     	;# 
  2134  0697                     	;# 
  2135  0699                     	;# 
  2136  069A                     	;# 
  2137  0711                     	;# 
  2138  0712                     	;# 
  2139  0713                     	;# 
  2140  0714                     	;# 
  2141  0715                     	;# 
  2142  0718                     	;# 
  2143  0718                     	;# 
  2144  0719                     	;# 
  2145  071A                     	;# 
  2146  071A                     	;# 
  2147  071B                     	;# 
  2148  071C                     	;# 
  2149  071D                     	;# 
  2150  0791                     	;# 
  2151  0791                     	;# 
  2152  0792                     	;# 
  2153  0793                     	;# 
  2154  0793                     	;# 
  2155  0794                     	;# 
  2156  0795                     	;# 
  2157  0795                     	;# 
  2158  0796                     	;# 
  2159  0797                     	;# 
  2160  0797                     	;# 
  2161  0798                     	;# 
  2162  0799                     	;# 
  2163  079A                     	;# 
  2164  080C                     	;# 
  2165  080C                     	;# 
  2166  080D                     	;# 
  2167  080E                     	;# 
  2168  080E                     	;# 
  2169  080F                     	;# 
  2170  0810                     	;# 
  2171  0810                     	;# 
  2172  0811                     	;# 
  2173  0812                     	;# 
  2174  0812                     	;# 
  2175  0813                     	;# 
  2176  0814                     	;# 
  2177  0815                     	;# 
  2178  0816                     	;# 
  2179  0817                     	;# 
  2180  0818                     	;# 
  2181  0819                     	;# 
  2182  081A                     	;# 
  2183  081A                     	;# 
  2184  081B                     	;# 
  2185  081C                     	;# 
  2186  081C                     	;# 
  2187  081D                     	;# 
  2188  088C                     	;# 
  2189  088D                     	;# 
  2190  088E                     	;# 
  2191  088F                     	;# 
  2192  088F                     	;# 
  2193  0890                     	;# 
  2194  0891                     	;# 
  2195  0892                     	;# 
  2196  0893                     	;# 
  2197  0893                     	;# 
  2198  0894                     	;# 
  2199  0895                     	;# 
  2200  0896                     	;# 
  2201  0897                     	;# 
  2202  0897                     	;# 
  2203  0898                     	;# 
  2204  0899                     	;# 
  2205  0D8C                     	;# 
  2206  0D8C                     	;# 
  2207  0D8D                     	;# 
  2208  0D8E                     	;# 
  2209  0D8F                     	;# 
  2210  0D8F                     	;# 
  2211  0D90                     	;# 
  2212  0D91                     	;# 
  2213  0D92                     	;# 
  2214  0D92                     	;# 
  2215  0D93                     	;# 
  2216  0D94                     	;# 
  2217  0D95                     	;# 
  2218  0D95                     	;# 
  2219  0D96                     	;# 
  2220  0D97                     	;# 
  2221  0D98                     	;# 
  2222  0D99                     	;# 
  2223  0D9A                     	;# 
  2224  0D9B                     	;# 
  2225  0D9C                     	;# 
  2226  0D9D                     	;# 
  2227  0D9E                     	;# 
  2228  0D9E                     	;# 
  2229  0D9F                     	;# 
  2230  0DA0                     	;# 
  2231  0DA1                     	;# 
  2232  0DA1                     	;# 
  2233  0DA2                     	;# 
  2234  0DA3                     	;# 
  2235  0DA4                     	;# 
  2236  0DA4                     	;# 
  2237  0DA5                     	;# 
  2238  0DA6                     	;# 
  2239  0DA7                     	;# 
  2240  0DA7                     	;# 
  2241  0DA8                     	;# 
  2242  0DA9                     	;# 
  2243  0DAA                     	;# 
  2244  0DAB                     	;# 
  2245  0DAC                     	;# 
  2246  0DAD                     	;# 
  2247  0DAE                     	;# 
  2248  0DAF                     	;# 
  2249  0E0F                     	;# 
  2250  0E10                     	;# 
  2251  0E11                     	;# 
  2252  0E12                     	;# 
  2253  0E13                     	;# 
  2254  0E14                     	;# 
  2255  0E15                     	;# 
  2256  0E16                     	;# 
  2257  0E17                     	;# 
  2258  0E18                     	;# 
  2259  0E19                     	;# 
  2260  0E1A                     	;# 
  2261  0E1B                     	;# 
  2262  0E1C                     	;# 
  2263  0E1D                     	;# 
  2264  0E1E                     	;# 
  2265  0E1F                     	;# 
  2266  0E20                     	;# 
  2267  0E21                     	;# 
  2268  0E22                     	;# 
  2269  0E23                     	;# 
  2270  0E24                     	;# 
  2271  0E25                     	;# 
  2272  0E26                     	;# 
  2273  0E27                     	;# 
  2274  0E28                     	;# 
  2275  0E29                     	;# 
  2276  0E2A                     	;# 
  2277  0E2B                     	;# 
  2278  0E2C                     	;# 
  2279  0E2D                     	;# 
  2280  0E2E                     	;# 
  2281  0E90                     	;# 
  2282  0E91                     	;# 
  2283  0E92                     	;# 
  2284  0E94                     	;# 
  2285  0E95                     	;# 
  2286  0E9C                     	;# 
  2287  0E9D                     	;# 
  2288  0E9E                     	;# 
  2289  0E9F                     	;# 
  2290  0EA0                     	;# 
  2291  0EA1                     	;# 
  2292  0EA2                     	;# 
  2293  0EA3                     	;# 
  2294  0EA4                     	;# 
  2295  0EA5                     	;# 
  2296  0EA6                     	;# 
  2297  0EA7                     	;# 
  2298  0F0F                     	;# 
  2299  0F10                     	;# 
  2300  0F11                     	;# 
  2301  0F12                     	;# 
  2302  0F13                     	;# 
  2303  0F14                     	;# 
  2304  0F15                     	;# 
  2305  0F16                     	;# 
  2306  0F17                     	;# 
  2307  0F18                     	;# 
  2308  0F19                     	;# 
  2309  0F1A                     	;# 
  2310  0F1B                     	;# 
  2311  0F1C                     	;# 
  2312  0F1D                     	;# 
  2313  0F1E                     	;# 
  2314  0F1F                     	;# 
  2315  0F20                     	;# 
  2316  0F21                     	;# 
  2317  0F22                     	;# 
  2318  0F23                     	;# 
  2319  0F24                     	;# 
  2320  0F25                     	;# 
  2321  0F26                     	;# 
  2322  0F27                     	;# 
  2323  0F28                     	;# 
  2324  0F29                     	;# 
  2325  0F2A                     	;# 
  2326  0F2B                     	;# 
  2327  0F2C                     	;# 
  2328  0F2D                     	;# 
  2329  0F2E                     	;# 
  2330  0F2F                     	;# 
  2331  0F30                     	;# 
  2332  0F31                     	;# 
  2333  0F32                     	;# 
  2334  0F33                     	;# 
  2335  0F34                     	;# 
  2336  0F35                     	;# 
  2337  0F36                     	;# 
  2338  0F37                     	;# 
  2339  0FE4                     	;# 
  2340  0FE5                     	;# 
  2341  0FE6                     	;# 
  2342  0FE7                     	;# 
  2343  0FE8                     	;# 
  2344  0FE9                     	;# 
  2345  0FEA                     	;# 
  2346  0FEB                     	;# 
  2347  0FED                     	;# 
  2348  0FEE                     	;# 
  2349  0FEF                     	;# 
  2350  0000                     	;# 
  2351  0001                     	;# 
  2352  0002                     	;# 
  2353  0003                     	;# 
  2354  0004                     	;# 
  2355  0005                     	;# 
  2356  0006                     	;# 
  2357  0007                     	;# 
  2358  0008                     	;# 
  2359  0009                     	;# 
  2360  000A                     	;# 
  2361  000B                     	;# 
  2362  000C                     	;# 
  2363  000D                     	;# 
  2364  000E                     	;# 
  2365  0010                     	;# 
  2366  0011                     	;# 
  2367  0012                     	;# 
  2368  0013                     	;# 
  2369  0014                     	;# 
  2370  0015                     	;# 
  2371  0016                     	;# 
  2372  0016                     	;# 
  2373  0017                     	;# 
  2374  0018                     	;# 
  2375  0019                     	;# 
  2376  001A                     	;# 
  2377  001A                     	;# 
  2378  001B                     	;# 
  2379  001B                     	;# 
  2380  001C                     	;# 
  2381  001D                     	;# 
  2382  001E                     	;# 
  2383  001F                     	;# 
  2384  008C                     	;# 
  2385  008D                     	;# 
  2386  008E                     	;# 
  2387  0090                     	;# 
  2388  0091                     	;# 
  2389  0092                     	;# 
  2390  0093                     	;# 
  2391  0094                     	;# 
  2392  0095                     	;# 
  2393  0096                     	;# 
  2394  0098                     	;# 
  2395  0099                     	;# 
  2396  009A                     	;# 
  2397  009B                     	;# 
  2398  009B                     	;# 
  2399  009C                     	;# 
  2400  009D                     	;# 
  2401  009E                     	;# 
  2402  009F                     	;# 
  2403  010C                     	;# 
  2404  010D                     	;# 
  2405  010E                     	;# 
  2406  0111                     	;# 
  2407  0112                     	;# 
  2408  0113                     	;# 
  2409  0114                     	;# 
  2410  0115                     	;# 
  2411  0116                     	;# 
  2412  0117                     	;# 
  2413  0118                     	;# 
  2414  0119                     	;# 
  2415  011C                     	;# 
  2416  018C                     	;# 
  2417  018D                     	;# 
  2418  018E                     	;# 
  2419  0191                     	;# 
  2420  0191                     	;# 
  2421  0192                     	;# 
  2422  0193                     	;# 
  2423  0193                     	;# 
  2424  0194                     	;# 
  2425  0195                     	;# 
  2426  0196                     	;# 
  2427  0197                     	;# 
  2428  0199                     	;# 
  2429  0199                     	;# 
  2430  0199                     	;# 
  2431  019A                     	;# 
  2432  019A                     	;# 
  2433  019A                     	;# 
  2434  019B                     	;# 
  2435  019B                     	;# 
  2436  019B                     	;# 
  2437  019B                     	;# 
  2438  019B                     	;# 
  2439  019C                     	;# 
  2440  019C                     	;# 
  2441  019C                     	;# 
  2442  019D                     	;# 
  2443  019D                     	;# 
  2444  019D                     	;# 
  2445  019E                     	;# 
  2446  019E                     	;# 
  2447  019E                     	;# 
  2448  019F                     	;# 
  2449  019F                     	;# 
  2450  019F                     	;# 
  2451  019F                     	;# 
  2452  019F                     	;# 
  2453  020C                     	;# 
  2454  020D                     	;# 
  2455  020E                     	;# 
  2456  0211                     	;# 
  2457  0211                     	;# 
  2458  0212                     	;# 
  2459  0212                     	;# 
  2460  0213                     	;# 
  2461  0213                     	;# 
  2462  0214                     	;# 
  2463  0214                     	;# 
  2464  0215                     	;# 
  2465  0215                     	;# 
  2466  0215                     	;# 
  2467  0215                     	;# 
  2468  0216                     	;# 
  2469  0216                     	;# 
  2470  0217                     	;# 
  2471  0217                     	;# 
  2472  028C                     	;# 
  2473  028D                     	;# 
  2474  028E                     	;# 
  2475  0291                     	;# 
  2476  0291                     	;# 
  2477  0292                     	;# 
  2478  0293                     	;# 
  2479  0294                     	;# 
  2480  0298                     	;# 
  2481  0298                     	;# 
  2482  0299                     	;# 
  2483  029A                     	;# 
  2484  029B                     	;# 
  2485  029E                     	;# 
  2486  030C                     	;# 
  2487  030D                     	;# 
  2488  030E                     	;# 
  2489  038C                     	;# 
  2490  038D                     	;# 
  2491  038E                     	;# 
  2492  0391                     	;# 
  2493  0392                     	;# 
  2494  0393                     	;# 
  2495  0394                     	;# 
  2496  0395                     	;# 
  2497  0396                     	;# 
  2498  0397                     	;# 
  2499  0398                     	;# 
  2500  0399                     	;# 
  2501  040E                     	;# 
  2502  0413                     	;# 
  2503  0413                     	;# 
  2504  0414                     	;# 
  2505  0414                     	;# 
  2506  0415                     	;# 
  2507  0416                     	;# 
  2508  0417                     	;# 
  2509  0418                     	;# 
  2510  041A                     	;# 
  2511  041A                     	;# 
  2512  041B                     	;# 
  2513  041B                     	;# 
  2514  041C                     	;# 
  2515  041D                     	;# 
  2516  041E                     	;# 
  2517  041F                     	;# 
  2518  0493                     	;# 
  2519  0494                     	;# 
  2520  0495                     	;# 
  2521  0496                     	;# 
  2522  049A                     	;# 
  2523  049B                     	;# 
  2524  049C                     	;# 
  2525  049D                     	;# 
  2526  058C                     	;# 
  2527  058C                     	;# 
  2528  058D                     	;# 
  2529  058E                     	;# 
  2530  058E                     	;# 
  2531  058F                     	;# 
  2532  0590                     	;# 
  2533  0590                     	;# 
  2534  0591                     	;# 
  2535  0592                     	;# 
  2536  0592                     	;# 
  2537  0593                     	;# 
  2538  0594                     	;# 
  2539  0594                     	;# 
  2540  0595                     	;# 
  2541  0596                     	;# 
  2542  0596                     	;# 
  2543  0597                     	;# 
  2544  0598                     	;# 
  2545  0599                     	;# 
  2546  059A                     	;# 
  2547  059B                     	;# 
  2548  059B                     	;# 
  2549  059C                     	;# 
  2550  059D                     	;# 
  2551  060C                     	;# 
  2552  060C                     	;# 
  2553  060D                     	;# 
  2554  060E                     	;# 
  2555  060F                     	;# 
  2556  060F                     	;# 
  2557  0610                     	;# 
  2558  0611                     	;# 
  2559  0612                     	;# 
  2560  0613                     	;# 
  2561  0614                     	;# 
  2562  0617                     	;# 
  2563  0617                     	;# 
  2564  0618                     	;# 
  2565  0619                     	;# 
  2566  061A                     	;# 
  2567  061A                     	;# 
  2568  061B                     	;# 
  2569  061C                     	;# 
  2570  0691                     	;# 
  2571  0692                     	;# 
  2572  0693                     	;# 
  2573  0694                     	;# 
  2574  0695                     	;# 
  2575  0696                     	;# 
  2576  0697                     	;# 
  2577  0699                     	;# 
  2578  069A                     	;# 
  2579  0711                     	;# 
  2580  0712                     	;# 
  2581  0713                     	;# 
  2582  0714                     	;# 
  2583  0715                     	;# 
  2584  0718                     	;# 
  2585  0718                     	;# 
  2586  0719                     	;# 
  2587  071A                     	;# 
  2588  071A                     	;# 
  2589  071B                     	;# 
  2590  071C                     	;# 
  2591  071D                     	;# 
  2592  0791                     	;# 
  2593  0791                     	;# 
  2594  0792                     	;# 
  2595  0793                     	;# 
  2596  0793                     	;# 
  2597  0794                     	;# 
  2598  0795                     	;# 
  2599  0795                     	;# 
  2600  0796                     	;# 
  2601  0797                     	;# 
  2602  0797                     	;# 
  2603  0798                     	;# 
  2604  0799                     	;# 
  2605  079A                     	;# 
  2606  080C                     	;# 
  2607  080C                     	;# 
  2608  080D                     	;# 
  2609  080E                     	;# 
  2610  080E                     	;# 
  2611  080F                     	;# 
  2612  0810                     	;# 
  2613  0810                     	;# 
  2614  0811                     	;# 
  2615  0812                     	;# 
  2616  0812                     	;# 
  2617  0813                     	;# 
  2618  0814                     	;# 
  2619  0815                     	;# 
  2620  0816                     	;# 
  2621  0817                     	;# 
  2622  0818                     	;# 
  2623  0819                     	;# 
  2624  081A                     	;# 
  2625  081A                     	;# 
  2626  081B                     	;# 
  2627  081C                     	;# 
  2628  081C                     	;# 
  2629  081D                     	;# 
  2630  088C                     	;# 
  2631  088D                     	;# 
  2632  088E                     	;# 
  2633  088F                     	;# 
  2634  088F                     	;# 
  2635  0890                     	;# 
  2636  0891                     	;# 
  2637  0892                     	;# 
  2638  0893                     	;# 
  2639  0893                     	;# 
  2640  0894                     	;# 
  2641  0895                     	;# 
  2642  0896                     	;# 
  2643  0897                     	;# 
  2644  0897                     	;# 
  2645  0898                     	;# 
  2646  0899                     	;# 
  2647  0D8C                     	;# 
  2648  0D8C                     	;# 
  2649  0D8D                     	;# 
  2650  0D8E                     	;# 
  2651  0D8F                     	;# 
  2652  0D8F                     	;# 
  2653  0D90                     	;# 
  2654  0D91                     	;# 
  2655  0D92                     	;# 
  2656  0D92                     	;# 
  2657  0D93                     	;# 
  2658  0D94                     	;# 
  2659  0D95                     	;# 
  2660  0D95                     	;# 
  2661  0D96                     	;# 
  2662  0D97                     	;# 
  2663  0D98                     	;# 
  2664  0D99                     	;# 
  2665  0D9A                     	;# 
  2666  0D9B                     	;# 
  2667  0D9C                     	;# 
  2668  0D9D                     	;# 
  2669  0D9E                     	;# 
  2670  0D9E                     	;# 
  2671  0D9F                     	;# 
  2672  0DA0                     	;# 
  2673  0DA1                     	;# 
  2674  0DA1                     	;# 
  2675  0DA2                     	;# 
  2676  0DA3                     	;# 
  2677  0DA4                     	;# 
  2678  0DA4                     	;# 
  2679  0DA5                     	;# 
  2680  0DA6                     	;# 
  2681  0DA7                     	;# 
  2682  0DA7                     	;# 
  2683  0DA8                     	;# 
  2684  0DA9                     	;# 
  2685  0DAA                     	;# 
  2686  0DAB                     	;# 
  2687  0DAC                     	;# 
  2688  0DAD                     	;# 
  2689  0DAE                     	;# 
  2690  0DAF                     	;# 
  2691  0E0F                     	;# 
  2692  0E10                     	;# 
  2693  0E11                     	;# 
  2694  0E12                     	;# 
  2695  0E13                     	;# 
  2696  0E14                     	;# 
  2697  0E15                     	;# 
  2698  0E16                     	;# 
  2699  0E17                     	;# 
  2700  0E18                     	;# 
  2701  0E19                     	;# 
  2702  0E1A                     	;# 
  2703  0E1B                     	;# 
  2704  0E1C                     	;# 
  2705  0E1D                     	;# 
  2706  0E1E                     	;# 
  2707  0E1F                     	;# 
  2708  0E20                     	;# 
  2709  0E21                     	;# 
  2710  0E22                     	;# 
  2711  0E23                     	;# 
  2712  0E24                     	;# 
  2713  0E25                     	;# 
  2714  0E26                     	;# 
  2715  0E27                     	;# 
  2716  0E28                     	;# 
  2717  0E29                     	;# 
  2718  0E2A                     	;# 
  2719  0E2B                     	;# 
  2720  0E2C                     	;# 
  2721  0E2D                     	;# 
  2722  0E2E                     	;# 
  2723  0E90                     	;# 
  2724  0E91                     	;# 
  2725  0E92                     	;# 
  2726  0E94                     	;# 
  2727  0E95                     	;# 
  2728  0E9C                     	;# 
  2729  0E9D                     	;# 
  2730  0E9E                     	;# 
  2731  0E9F                     	;# 
  2732  0EA0                     	;# 
  2733  0EA1                     	;# 
  2734  0EA2                     	;# 
  2735  0EA3                     	;# 
  2736  0EA4                     	;# 
  2737  0EA5                     	;# 
  2738  0EA6                     	;# 
  2739  0EA7                     	;# 
  2740  0F0F                     	;# 
  2741  0F10                     	;# 
  2742  0F11                     	;# 
  2743  0F12                     	;# 
  2744  0F13                     	;# 
  2745  0F14                     	;# 
  2746  0F15                     	;# 
  2747  0F16                     	;# 
  2748  0F17                     	;# 
  2749  0F18                     	;# 
  2750  0F19                     	;# 
  2751  0F1A                     	;# 
  2752  0F1B                     	;# 
  2753  0F1C                     	;# 
  2754  0F1D                     	;# 
  2755  0F1E                     	;# 
  2756  0F1F                     	;# 
  2757  0F20                     	;# 
  2758  0F21                     	;# 
  2759  0F22                     	;# 
  2760  0F23                     	;# 
  2761  0F24                     	;# 
  2762  0F25                     	;# 
  2763  0F26                     	;# 
  2764  0F27                     	;# 
  2765  0F28                     	;# 
  2766  0F29                     	;# 
  2767  0F2A                     	;# 
  2768  0F2B                     	;# 
  2769  0F2C                     	;# 
  2770  0F2D                     	;# 
  2771  0F2E                     	;# 
  2772  0F2F                     	;# 
  2773  0F30                     	;# 
  2774  0F31                     	;# 
  2775  0F32                     	;# 
  2776  0F33                     	;# 
  2777  0F34                     	;# 
  2778  0F35                     	;# 
  2779  0F36                     	;# 
  2780  0F37                     	;# 
  2781  0FE4                     	;# 
  2782  0FE5                     	;# 
  2783  0FE6                     	;# 
  2784  0FE7                     	;# 
  2785  0FE8                     	;# 
  2786  0FE9                     	;# 
  2787  0FEA                     	;# 
  2788  0FEB                     	;# 
  2789  0FED                     	;# 
  2790  0FEE                     	;# 
  2791  0FEF                     	;# 
  2792  0000                     	;# 
  2793  0001                     	;# 
  2794  0002                     	;# 
  2795  0003                     	;# 
  2796  0004                     	;# 
  2797  0005                     	;# 
  2798  0006                     	;# 
  2799  0007                     	;# 
  2800  0008                     	;# 
  2801  0009                     	;# 
  2802  000A                     	;# 
  2803  000B                     	;# 
  2804  000C                     	;# 
  2805  000D                     	;# 
  2806  000E                     	;# 
  2807  0010                     	;# 
  2808  0011                     	;# 
  2809  0012                     	;# 
  2810  0013                     	;# 
  2811  0014                     	;# 
  2812  0015                     	;# 
  2813  0016                     	;# 
  2814  0016                     	;# 
  2815  0017                     	;# 
  2816  0018                     	;# 
  2817  0019                     	;# 
  2818  001A                     	;# 
  2819  001A                     	;# 
  2820  001B                     	;# 
  2821  001B                     	;# 
  2822  001C                     	;# 
  2823  001D                     	;# 
  2824  001E                     	;# 
  2825  001F                     	;# 
  2826  008C                     	;# 
  2827  008D                     	;# 
  2828  008E                     	;# 
  2829  0090                     	;# 
  2830  0091                     	;# 
  2831  0092                     	;# 
  2832  0093                     	;# 
  2833  0094                     	;# 
  2834  0095                     	;# 
  2835  0096                     	;# 
  2836  0098                     	;# 
  2837  0099                     	;# 
  2838  009A                     	;# 
  2839  009B                     	;# 
  2840  009B                     	;# 
  2841  009C                     	;# 
  2842  009D                     	;# 
  2843  009E                     	;# 
  2844  009F                     	;# 
  2845  010C                     	;# 
  2846  010D                     	;# 
  2847  010E                     	;# 
  2848  0111                     	;# 
  2849  0112                     	;# 
  2850  0113                     	;# 
  2851  0114                     	;# 
  2852  0115                     	;# 
  2853  0116                     	;# 
  2854  0117                     	;# 
  2855  0118                     	;# 
  2856  0119                     	;# 
  2857  011C                     	;# 
  2858  018C                     	;# 
  2859  018D                     	;# 
  2860  018E                     	;# 
  2861  0191                     	;# 
  2862  0191                     	;# 
  2863  0192                     	;# 
  2864  0193                     	;# 
  2865  0193                     	;# 
  2866  0194                     	;# 
  2867  0195                     	;# 
  2868  0196                     	;# 
  2869  0197                     	;# 
  2870  0199                     	;# 
  2871  0199                     	;# 
  2872  0199                     	;# 
  2873  019A                     	;# 
  2874  019A                     	;# 
  2875  019A                     	;# 
  2876  019B                     	;# 
  2877  019B                     	;# 
  2878  019B                     	;# 
  2879  019B                     	;# 
  2880  019B                     	;# 
  2881  019C                     	;# 
  2882  019C                     	;# 
  2883  019C                     	;# 
  2884  019D                     	;# 
  2885  019D                     	;# 
  2886  019D                     	;# 
  2887  019E                     	;# 
  2888  019E                     	;# 
  2889  019E                     	;# 
  2890  019F                     	;# 
  2891  019F                     	;# 
  2892  019F                     	;# 
  2893  019F                     	;# 
  2894  019F                     	;# 
  2895  020C                     	;# 
  2896  020D                     	;# 
  2897  020E                     	;# 
  2898  0211                     	;# 
  2899  0211                     	;# 
  2900  0212                     	;# 
  2901  0212                     	;# 
  2902  0213                     	;# 
  2903  0213                     	;# 
  2904  0214                     	;# 
  2905  0214                     	;# 
  2906  0215                     	;# 
  2907  0215                     	;# 
  2908  0215                     	;# 
  2909  0215                     	;# 
  2910  0216                     	;# 
  2911  0216                     	;# 
  2912  0217                     	;# 
  2913  0217                     	;# 
  2914  028C                     	;# 
  2915  028D                     	;# 
  2916  028E                     	;# 
  2917  0291                     	;# 
  2918  0291                     	;# 
  2919  0292                     	;# 
  2920  0293                     	;# 
  2921  0294                     	;# 
  2922  0298                     	;# 
  2923  0298                     	;# 
  2924  0299                     	;# 
  2925  029A                     	;# 
  2926  029B                     	;# 
  2927  029E                     	;# 
  2928  030C                     	;# 
  2929  030D                     	;# 
  2930  030E                     	;# 
  2931  038C                     	;# 
  2932  038D                     	;# 
  2933  038E                     	;# 
  2934  0391                     	;# 
  2935  0392                     	;# 
  2936  0393                     	;# 
  2937  0394                     	;# 
  2938  0395                     	;# 
  2939  0396                     	;# 
  2940  0397                     	;# 
  2941  0398                     	;# 
  2942  0399                     	;# 
  2943  040E                     	;# 
  2944  0413                     	;# 
  2945  0413                     	;# 
  2946  0414                     	;# 
  2947  0414                     	;# 
  2948  0415                     	;# 
  2949  0416                     	;# 
  2950  0417                     	;# 
  2951  0418                     	;# 
  2952  041A                     	;# 
  2953  041A                     	;# 
  2954  041B                     	;# 
  2955  041B                     	;# 
  2956  041C                     	;# 
  2957  041D                     	;# 
  2958  041E                     	;# 
  2959  041F                     	;# 
  2960  0493                     	;# 
  2961  0494                     	;# 
  2962  0495                     	;# 
  2963  0496                     	;# 
  2964  049A                     	;# 
  2965  049B                     	;# 
  2966  049C                     	;# 
  2967  049D                     	;# 
  2968  058C                     	;# 
  2969  058C                     	;# 
  2970  058D                     	;# 
  2971  058E                     	;# 
  2972  058E                     	;# 
  2973  058F                     	;# 
  2974  0590                     	;# 
  2975  0590                     	;# 
  2976  0591                     	;# 
  2977  0592                     	;# 
  2978  0592                     	;# 
  2979  0593                     	;# 
  2980  0594                     	;# 
  2981  0594                     	;# 
  2982  0595                     	;# 
  2983  0596                     	;# 
  2984  0596                     	;# 
  2985  0597                     	;# 
  2986  0598                     	;# 
  2987  0599                     	;# 
  2988  059A                     	;# 
  2989  059B                     	;# 
  2990  059B                     	;# 
  2991  059C                     	;# 
  2992  059D                     	;# 
  2993  060C                     	;# 
  2994  060C                     	;# 
  2995  060D                     	;# 
  2996  060E                     	;# 
  2997  060F                     	;# 
  2998  060F                     	;# 
  2999  0610                     	;# 
  3000  0611                     	;# 
  3001  0612                     	;# 
  3002  0613                     	;# 
  3003  0614                     	;# 
  3004  0617                     	;# 
  3005  0617                     	;# 
  3006  0618                     	;# 
  3007  0619                     	;# 
  3008  061A                     	;# 
  3009  061A                     	;# 
  3010  061B                     	;# 
  3011  061C                     	;# 
  3012  0691                     	;# 
  3013  0692                     	;# 
  3014  0693                     	;# 
  3015  0694                     	;# 
  3016  0695                     	;# 
  3017  0696                     	;# 
  3018  0697                     	;# 
  3019  0699                     	;# 
  3020  069A                     	;# 
  3021  0711                     	;# 
  3022  0712                     	;# 
  3023  0713                     	;# 
  3024  0714                     	;# 
  3025  0715                     	;# 
  3026  0718                     	;# 
  3027  0718                     	;# 
  3028  0719                     	;# 
  3029  071A                     	;# 
  3030  071A                     	;# 
  3031  071B                     	;# 
  3032  071C                     	;# 
  3033  071D                     	;# 
  3034  0791                     	;# 
  3035  0791                     	;# 
  3036  0792                     	;# 
  3037  0793                     	;# 
  3038  0793                     	;# 
  3039  0794                     	;# 
  3040  0795                     	;# 
  3041  0795                     	;# 
  3042  0796                     	;# 
  3043  0797                     	;# 
  3044  0797                     	;# 
  3045  0798                     	;# 
  3046  0799                     	;# 
  3047  079A                     	;# 
  3048  080C                     	;# 
  3049  080C                     	;# 
  3050  080D                     	;# 
  3051  080E                     	;# 
  3052  080E                     	;# 
  3053  080F                     	;# 
  3054  0810                     	;# 
  3055  0810                     	;# 
  3056  0811                     	;# 
  3057  0812                     	;# 
  3058  0812                     	;# 
  3059  0813                     	;# 
  3060  0814                     	;# 
  3061  0815                     	;# 
  3062  0816                     	;# 
  3063  0817                     	;# 
  3064  0818                     	;# 
  3065  0819                     	;# 
  3066  081A                     	;# 
  3067  081A                     	;# 
  3068  081B                     	;# 
  3069  081C                     	;# 
  3070  081C                     	;# 
  3071  081D                     	;# 
  3072  088C                     	;# 
  3073  088D                     	;# 
  3074  088E                     	;# 
  3075  088F                     	;# 
  3076  088F                     	;# 
  3077  0890                     	;# 
  3078  0891                     	;# 
  3079  0892                     	;# 
  3080  0893                     	;# 
  3081  0893                     	;# 
  3082  0894                     	;# 
  3083  0895                     	;# 
  3084  0896                     	;# 
  3085  0897                     	;# 
  3086  0897                     	;# 
  3087  0898                     	;# 
  3088  0899                     	;# 
  3089  0D8C                     	;# 
  3090  0D8C                     	;# 
  3091  0D8D                     	;# 
  3092  0D8E                     	;# 
  3093  0D8F                     	;# 
  3094  0D8F                     	;# 
  3095  0D90                     	;# 
  3096  0D91                     	;# 
  3097  0D92                     	;# 
  3098  0D92                     	;# 
  3099  0D93                     	;# 
  3100  0D94                     	;# 
  3101  0D95                     	;# 
  3102  0D95                     	;# 
  3103  0D96                     	;# 
  3104  0D97                     	;# 
  3105  0D98                     	;# 
  3106  0D99                     	;# 
  3107  0D9A                     	;# 
  3108  0D9B                     	;# 
  3109  0D9C                     	;# 
  3110  0D9D                     	;# 
  3111  0D9E                     	;# 
  3112  0D9E                     	;# 
  3113  0D9F                     	;# 
  3114  0DA0                     	;# 
  3115  0DA1                     	;# 
  3116  0DA1                     	;# 
  3117  0DA2                     	;# 
  3118  0DA3                     	;# 
  3119  0DA4                     	;# 
  3120  0DA4                     	;# 
  3121  0DA5                     	;# 
  3122  0DA6                     	;# 
  3123  0DA7                     	;# 
  3124  0DA7                     	;# 
  3125  0DA8                     	;# 
  3126  0DA9                     	;# 
  3127  0DAA                     	;# 
  3128  0DAB                     	;# 
  3129  0DAC                     	;# 
  3130  0DAD                     	;# 
  3131  0DAE                     	;# 
  3132  0DAF                     	;# 
  3133  0E0F                     	;# 
  3134  0E10                     	;# 
  3135  0E11                     	;# 
  3136  0E12                     	;# 
  3137  0E13                     	;# 
  3138  0E14                     	;# 
  3139  0E15                     	;# 
  3140  0E16                     	;# 
  3141  0E17                     	;# 
  3142  0E18                     	;# 
  3143  0E19                     	;# 
  3144  0E1A                     	;# 
  3145  0E1B                     	;# 
  3146  0E1C                     	;# 
  3147  0E1D                     	;# 
  3148  0E1E                     	;# 
  3149  0E1F                     	;# 
  3150  0E20                     	;# 
  3151  0E21                     	;# 
  3152  0E22                     	;# 
  3153  0E23                     	;# 
  3154  0E24                     	;# 
  3155  0E25                     	;# 
  3156  0E26                     	;# 
  3157  0E27                     	;# 
  3158  0E28                     	;# 
  3159  0E29                     	;# 
  3160  0E2A                     	;# 
  3161  0E2B                     	;# 
  3162  0E2C                     	;# 
  3163  0E2D                     	;# 
  3164  0E2E                     	;# 
  3165  0E90                     	;# 
  3166  0E91                     	;# 
  3167  0E92                     	;# 
  3168  0E94                     	;# 
  3169  0E95                     	;# 
  3170  0E9C                     	;# 
  3171  0E9D                     	;# 
  3172  0E9E                     	;# 
  3173  0E9F                     	;# 
  3174  0EA0                     	;# 
  3175  0EA1                     	;# 
  3176  0EA2                     	;# 
  3177  0EA3                     	;# 
  3178  0EA4                     	;# 
  3179  0EA5                     	;# 
  3180  0EA6                     	;# 
  3181  0EA7                     	;# 
  3182  0F0F                     	;# 
  3183  0F10                     	;# 
  3184  0F11                     	;# 
  3185  0F12                     	;# 
  3186  0F13                     	;# 
  3187  0F14                     	;# 
  3188  0F15                     	;# 
  3189  0F16                     	;# 
  3190  0F17                     	;# 
  3191  0F18                     	;# 
  3192  0F19                     	;# 
  3193  0F1A                     	;# 
  3194  0F1B                     	;# 
  3195  0F1C                     	;# 
  3196  0F1D                     	;# 
  3197  0F1E                     	;# 
  3198  0F1F                     	;# 
  3199  0F20                     	;# 
  3200  0F21                     	;# 
  3201  0F22                     	;# 
  3202  0F23                     	;# 
  3203  0F24                     	;# 
  3204  0F25                     	;# 
  3205  0F26                     	;# 
  3206  0F27                     	;# 
  3207  0F28                     	;# 
  3208  0F29                     	;# 
  3209  0F2A                     	;# 
  3210  0F2B                     	;# 
  3211  0F2C                     	;# 
  3212  0F2D                     	;# 
  3213  0F2E                     	;# 
  3214  0F2F                     	;# 
  3215  0F30                     	;# 
  3216  0F31                     	;# 
  3217  0F32                     	;# 
  3218  0F33                     	;# 
  3219  0F34                     	;# 
  3220  0F35                     	;# 
  3221  0F36                     	;# 
  3222  0F37                     	;# 
  3223  0FE4                     	;# 
  3224  0FE5                     	;# 
  3225  0FE6                     	;# 
  3226  0FE7                     	;# 
  3227  0FE8                     	;# 
  3228  0FE9                     	;# 
  3229  0FEA                     	;# 
  3230  0FEB                     	;# 
  3231  0FED                     	;# 
  3232  0FEE                     	;# 
  3233  0FEF                     	;# 
  3234                           
  3235                           	psect	idataBANK3
  3236  0002                     __pidataBANK3:	
  3237                           
  3238                           ;initializer for _messages
  3239  0002  3420               	retlw	low (_message_start| (0+768))
  3240  0003  34A0               	retlw	low (_message_end| (0+768))
  3241                           
  3242                           	psect	idataBANK5
  3243  1CDB                     __pidataBANK5:	
  3244                           
  3245                           ;initializer for _setNavFlightMode
  3246  1CDB  34B5               	retlw	181
  3247  1CDC  3462               	retlw	98
  3248  1CDD  3406               	retlw	6
  3249  1CDE  3424               	retlw	36
  3250  1CDF  3424               	retlw	36
  3251  1CE0  3400               	retlw	0
  3252  1CE1  34FF               	retlw	255
  3253  1CE2  34FF               	retlw	255
  3254  1CE3  3406               	retlw	6
  3255  1CE4  3403               	retlw	3
  3256  1CE5  3400               	retlw	0
  3257  1CE6  3400               	retlw	0
  3258  1CE7  3400               	retlw	0
  3259  1CE8  3400               	retlw	0
  3260  1CE9  3410               	retlw	16
  3261  1CEA  3427               	retlw	39
  3262  1CEB  3400               	retlw	0
  3263  1CEC  3400               	retlw	0
  3264  1CED  3405               	retlw	5
  3265  1CEE  3400               	retlw	0
  3266  1CEF  34FA               	retlw	250
  3267  1CF0  3400               	retlw	0
  3268  1CF1  34FA               	retlw	250
  3269  1CF2  3400               	retlw	0
  3270  1CF3  3464               	retlw	100
  3271  1CF4  3400               	retlw	0
  3272  1CF5  342C               	retlw	44
  3273  1CF6  3401               	retlw	1
  3274  1CF7  3400               	retlw	0
  3275  1CF8  3400               	retlw	0
  3276  1CF9  3400               	retlw	0
  3277  1CFA  3400               	retlw	0
  3278  1CFB  3400               	retlw	0
  3279  1CFC  3400               	retlw	0
  3280  1CFD  3400               	retlw	0
  3281  1CFE  3400               	retlw	0
  3282  1CFF  3400               	retlw	0
  3283  1D00  3400               	retlw	0
  3284  1D01  3400               	retlw	0
  3285  1D02  3400               	retlw	0
  3286  1D03  3400               	retlw	0
  3287  1D04  3400               	retlw	0
  3288  1D05  3416               	retlw	22
  3289  1D06  34DC               	retlw	220
  3290                           
  3291                           	psect	nvBANK2
  3292  016E                     __pnvBANK2:	
  3293  016E                     _timer0ReloadVal:	
  3294  016E                     	ds	1
  3295                           
  3296                           	psect	nvBANK3
  3297  01E9                     __pnvBANK3:	
  3298  01E9                     _TMR0_InterruptHandler:	
  3299  01E9                     	ds	2
  3300  0015                     _TMR0	set	21
  3301  0011                     _PIR2bits	set	17
  3302  000B                     _INTCONbits	set	11
  3303  0010                     _PIR1bits	set	16
  3304  0095                     _OPTION_REG	set	149
  3305  0090                     _PIE1bits	set	144
  3306  0091                     _PIE2bits	set	145
  3307  0095                     _OPTION_REGbits	set	149
  3308  008E                     _TRISC	set	142
  3309  008D                     _TRISB	set	141
  3310  008C                     _TRISA	set	140
  3311  0098                     _OSCTUNE	set	152
  3312  0099                     _OSCCON	set	153
  3313  010C                     _LATAbits	set	268
  3314  010E                     _LATCbits	set	270
  3315  010E                     _LATC	set	270
  3316  010D                     _LATB	set	269
  3317  010C                     _LATA	set	268
  3318  0116                     _BORCON	set	278
  3319  019A                     _TX1REG	set	410
  3320  0199                     _RC1REG	set	409
  3321  019D                     _RC1STAbits	set	413
  3322  019C                     _SPBRGH	set	412
  3323  019B                     _SPBRGL	set	411
  3324  019E                     _TX1STA	set	414
  3325  019D                     _RC1STA	set	413
  3326  019F                     _BAUD1CON	set	415
  3327  018C                     _ANSELA	set	396
  3328  018D                     _ANSELB	set	397
  3329  018E                     _ANSELC	set	398
  3330  0211                     _SSP1BUF	set	529
  3331  0216                     _SSP1CON2bits	set	534
  3332  0215                     _SSP1CON1bits	set	533
  3333  0212                     _SSP1ADD	set	530
  3334  0217                     _SSP1CON3	set	535
  3335  0215                     _SSP1CON1	set	533
  3336  0214                     _SSP1STAT	set	532
  3337  020E                     _WPUC	set	526
  3338  020C                     _WPUA	set	524
  3339  020D                     _WPUB	set	525
  3340  028E                     _ODCONC	set	654
  3341  028D                     _ODCONB	set	653
  3342  028C                     _ODCONA	set	652
  3343  030E                     _SLRCONC	set	782
  3344  030D                     _SLRCONB	set	781
  3345  030C                     _SLRCONA	set	780
  3346  0E20                     _SSPCLKPPS	set	3616
  3347  0E21                     _SSPDATPPS	set	3617
  3348  0E24                     _RXPPS	set	3620
  3349  0E9C                     _RB4PPS	set	3740
  3350  0E9F                     _RB7PPS	set	3743
  3351  0E9E                     _RB6PPS	set	3742
  3352                           
  3353                           	psect	stringtext1
  3354  1800                     __pstringtext1:	
  3355  1800                     STR_6:	
  3356  1800  3424               	retlw	36	;'$'
  3357  1801  3450               	retlw	80	;'P'
  3358  1802  3455               	retlw	85	;'U'
  3359  1803  3442               	retlw	66	;'B'
  3360  1804  3458               	retlw	88	;'X'
  3361  1805  342C               	retlw	44	;','
  3362  1806  3434               	retlw	52	;'4'
  3363  1807  3430               	retlw	48	;'0'
  3364  1808  342C               	retlw	44	;','
  3365  1809  3452               	retlw	82	;'R'
  3366  180A  344D               	retlw	77	;'M'
  3367  180B  3443               	retlw	67	;'C'
  3368  180C  342C               	retlw	44	;','
  3369  180D  3430               	retlw	48	;'0'
  3370  180E  342C               	retlw	44	;','
  3371  180F  3430               	retlw	48	;'0'
  3372  1810  342C               	retlw	44	;','
  3373  1811  3430               	retlw	48	;'0'
  3374  1812  342C               	retlw	44	;','
  3375  1813  3430               	retlw	48	;'0'
  3376  1814  342A               	retlw	42	;'*'
  3377  1815  3434               	retlw	52	;'4'
  3378  1816  3437               	retlw	55	;'7'
  3379  1817  340D               	retlw	13
  3380  1818  340A               	retlw	10
  3381  1819  3400               	retlw	0
  3382                           
  3383                           	psect	stringtext2
  3384  181A                     __pstringtext2:	
  3385  181A                     STR_4:	
  3386  181A  3424               	retlw	36	;'$'
  3387  181B  3450               	retlw	80	;'P'
  3388  181C  3455               	retlw	85	;'U'
  3389  181D  3442               	retlw	66	;'B'
  3390  181E  3458               	retlw	88	;'X'
  3391  181F  342C               	retlw	44	;','
  3392  1820  3434               	retlw	52	;'4'
  3393  1821  3430               	retlw	48	;'0'
  3394  1822  342C               	retlw	44	;','
  3395  1823  3447               	retlw	71	;'G'
  3396  1824  3453               	retlw	83	;'S'
  3397  1825  3456               	retlw	86	;'V'
  3398  1826  342C               	retlw	44	;','
  3399  1827  3430               	retlw	48	;'0'
  3400  1828  342C               	retlw	44	;','
  3401  1829  3430               	retlw	48	;'0'
  3402  182A  342C               	retlw	44	;','
  3403  182B  3430               	retlw	48	;'0'
  3404  182C  342C               	retlw	44	;','
  3405  182D  3430               	retlw	48	;'0'
  3406  182E  342A               	retlw	42	;'*'
  3407  182F  3435               	retlw	53	;'5'
  3408  1830  3439               	retlw	57	;'9'
  3409  1831  340D               	retlw	13
  3410  1832  340A               	retlw	10
  3411  1833  3400               	retlw	0
  3412                           
  3413                           	psect	stringtext3
  3414  1834                     __pstringtext3:	
  3415  1834                     STR_2:	
  3416  1834  3424               	retlw	36	;'$'
  3417  1835  3450               	retlw	80	;'P'
  3418  1836  3455               	retlw	85	;'U'
  3419  1837  3442               	retlw	66	;'B'
  3420  1838  3458               	retlw	88	;'X'
  3421  1839  342C               	retlw	44	;','
  3422  183A  3434               	retlw	52	;'4'
  3423  183B  3430               	retlw	48	;'0'
  3424  183C  342C               	retlw	44	;','
  3425  183D  3447               	retlw	71	;'G'
  3426  183E  3447               	retlw	71	;'G'
  3427  183F  3441               	retlw	65	;'A'
  3428  1840  342C               	retlw	44	;','
  3429  1841  3430               	retlw	48	;'0'
  3430  1842  342C               	retlw	44	;','
  3431  1843  3430               	retlw	48	;'0'
  3432  1844  342C               	retlw	44	;','
  3433  1845  3430               	retlw	48	;'0'
  3434  1846  342C               	retlw	44	;','
  3435  1847  3430               	retlw	48	;'0'
  3436  1848  342A               	retlw	42	;'*'
  3437  1849  3435               	retlw	53	;'5'
  3438  184A  3441               	retlw	65	;'A'
  3439  184B  340D               	retlw	13
  3440  184C  340A               	retlw	10
  3441  184D  3400               	retlw	0
  3442                           
  3443                           	psect	stringtext4
  3444  184E                     __pstringtext4:	
  3445  184E                     STR_1:	
  3446  184E  3424               	retlw	36	;'$'
  3447  184F  3450               	retlw	80	;'P'
  3448  1850  3455               	retlw	85	;'U'
  3449  1851  3442               	retlw	66	;'B'
  3450  1852  3458               	retlw	88	;'X'
  3451  1853  342C               	retlw	44	;','
  3452  1854  3434               	retlw	52	;'4'
  3453  1855  3430               	retlw	48	;'0'
  3454  1856  342C               	retlw	44	;','
  3455  1857  3447               	retlw	71	;'G'
  3456  1858  344C               	retlw	76	;'L'
  3457  1859  344C               	retlw	76	;'L'
  3458  185A  342C               	retlw	44	;','
  3459  185B  3430               	retlw	48	;'0'
  3460  185C  342C               	retlw	44	;','
  3461  185D  3430               	retlw	48	;'0'
  3462  185E  342C               	retlw	44	;','
  3463  185F  3430               	retlw	48	;'0'
  3464  1860  342C               	retlw	44	;','
  3465  1861  3430               	retlw	48	;'0'
  3466  1862  342A               	retlw	42	;'*'
  3467  1863  3435               	retlw	53	;'5'
  3468  1864  3443               	retlw	67	;'C'
  3469  1865  340D               	retlw	13
  3470  1866  340A               	retlw	10
  3471  1867  3400               	retlw	0
  3472                           
  3473                           	psect	stringtext5
  3474  1868                     __pstringtext5:	
  3475  1868                     STR_5:	
  3476  1868  3424               	retlw	36	;'$'
  3477  1869  3450               	retlw	80	;'P'
  3478  186A  3455               	retlw	85	;'U'
  3479  186B  3442               	retlw	66	;'B'
  3480  186C  3458               	retlw	88	;'X'
  3481  186D  342C               	retlw	44	;','
  3482  186E  3434               	retlw	52	;'4'
  3483  186F  3430               	retlw	48	;'0'
  3484  1870  342C               	retlw	44	;','
  3485  1871  3447               	retlw	71	;'G'
  3486  1872  3453               	retlw	83	;'S'
  3487  1873  3441               	retlw	65	;'A'
  3488  1874  342C               	retlw	44	;','
  3489  1875  3430               	retlw	48	;'0'
  3490  1876  342C               	retlw	44	;','
  3491  1877  3430               	retlw	48	;'0'
  3492  1878  342C               	retlw	44	;','
  3493  1879  3430               	retlw	48	;'0'
  3494  187A  342C               	retlw	44	;','
  3495  187B  3430               	retlw	48	;'0'
  3496  187C  342A               	retlw	42	;'*'
  3497  187D  3434               	retlw	52	;'4'
  3498  187E  3445               	retlw	69	;'E'
  3499  187F  340D               	retlw	13
  3500  1880  340A               	retlw	10
  3501  1881  3400               	retlw	0
  3502                           
  3503                           	psect	stringtext6
  3504  1882                     __pstringtext6:	
  3505  1882                     STR_3:	
  3506  1882  3424               	retlw	36	;'$'
  3507  1883  3450               	retlw	80	;'P'
  3508  1884  3455               	retlw	85	;'U'
  3509  1885  3442               	retlw	66	;'B'
  3510  1886  3458               	retlw	88	;'X'
  3511  1887  342C               	retlw	44	;','
  3512  1888  3434               	retlw	52	;'4'
  3513  1889  3430               	retlw	48	;'0'
  3514  188A  342C               	retlw	44	;','
  3515  188B  3456               	retlw	86	;'V'
  3516  188C  3454               	retlw	84	;'T'
  3517  188D  3447               	retlw	71	;'G'
  3518  188E  342C               	retlw	44	;','
  3519  188F  3430               	retlw	48	;'0'
  3520  1890  342C               	retlw	44	;','
  3521  1891  3430               	retlw	48	;'0'
  3522  1892  342C               	retlw	44	;','
  3523  1893  3430               	retlw	48	;'0'
  3524  1894  342C               	retlw	44	;','
  3525  1895  3430               	retlw	48	;'0'
  3526  1896  342A               	retlw	42	;'*'
  3527  1897  3435               	retlw	53	;'5'
  3528  1898  3445               	retlw	69	;'E'
  3529  1899  340D               	retlw	13
  3530  189A  340A               	retlw	10
  3531  189B  3400               	retlw	0
  3532                           
  3533                           	psect	stringtext7
  3534  189C                     __pstringtext7:	
  3535  189C                     STR_7:	
  3536  189C  3424               	retlw	36	;'$'
  3537  189D  3450               	retlw	80	;'P'
  3538  189E  3455               	retlw	85	;'U'
  3539  189F  3442               	retlw	66	;'B'
  3540  18A0  3458               	retlw	88	;'X'
  3541  18A1  342C               	retlw	44	;','
  3542  18A2  3430               	retlw	48	;'0'
  3543  18A3  3430               	retlw	48	;'0'
  3544  18A4  342A               	retlw	42	;'*'
  3545  18A5  3433               	retlw	51	;'3'
  3546  18A6  3433               	retlw	51	;'3'
  3547  18A7  340D               	retlw	13
  3548  18A8  340A               	retlw	10
  3549  18A9  3400               	retlw	0
  3550                           
  3551                           	psect	stringtext8
  3552  18AA                     __pstringtext8:	
  3553  18AA                     STR_11:	
  3554  18AA  3454               	retlw	84	;'T'
  3555  18AB  3445               	retlw	69	;'E'
  3556  18AC  3453               	retlw	83	;'S'
  3557  18AD  3454               	retlw	84	;'T'
  3558  18AE  342C               	retlw	44	;','
  3559  18AF  3400               	retlw	0
  3560                           
  3561                           	psect	stringtext9
  3562  18B0                     __pstringtext9:	
  3563  18B0                     STR_10:	
  3564  18B0  3454               	retlw	84	;'T'
  3565  18B1  3445               	retlw	69	;'E'
  3566  18B2  3453               	retlw	83	;'S'
  3567  18B3  3454               	retlw	84	;'T'
  3568  18B4  3400               	retlw	0
  3569                           
  3570                           	psect	stringtext10
  3571  18B5                     __pstringtext10:	
  3572  18B5                     STR_8:	
  3573  18B5  3450               	retlw	80	;'P'
  3574  18B6  3455               	retlw	85	;'U'
  3575  18B7  3442               	retlw	66	;'B'
  3576  18B8  3458               	retlw	88	;'X'
  3577  18B9  3400               	retlw	0
  3578                           
  3579                           	psect	stringtext11
  3580  18BA                     __pstringtext11:	
  3581  18BA                     STR_12:	
  3582  18BA  3424               	retlw	36	;'$'
  3583  18BB  3424               	retlw	36	;'$'
  3584  18BC  3400               	retlw	0
  3585                           
  3586                           	psect	stringtext12
  3587  0000                     __pstringtext12:	
  3588  18B5                     
  3589                           ; #config settings
  3590  0000                     
  3591                           	psect	cinit
  3592  0025                     start_initialization:	
  3593  0025                     __initialization:	
  3594                           
  3595                           ; Initialize objects allocated to BANK3
  3596  0025  0023               	movlb	3	; select bank3
  3597  0026  3180  2002  3180   	fcall	__pidataBANK3	;fetch initializer
  3598  0029  00EB               	movwf	__pdataBANK3& (0+127)
  3599  002A  3180  2003  3180   	fcall	__pidataBANK3+1	;fetch initializer
  3600  002D  00EC               	movwf	(__pdataBANK3+1)& (0+127)
  3601                           
  3602                           ; Initialize objects allocated to BANK5
  3603  002E  30DB               	movlw	low __pidataBANK5
  3604  002F  0084               	movwf	4
  3605  0030  309C               	movlw	(high __pidataBANK5)| (0+128)
  3606  0031  0085               	movwf	5
  3607  0032  30A0               	movlw	low __pdataBANK5
  3608  0033  0086               	movwf	6
  3609  0034  3002               	movlw	high __pdataBANK5
  3610  0035  0087               	movwf	7
  3611  0036  302C               	movlw	44
  3612  0037  319A  228E  3180   	fcall	init_ram
  3613                           
  3614                           ; Clear objects allocated to COMMON
  3615  003A  01F9               	clrf	__pbssCOMMON& (0+127)
  3616  003B  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  3617  003C  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  3618  003D  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  3619                           
  3620                           ; Clear objects allocated to BANK2
  3621  003E  305E               	movlw	low __pbssBANK2
  3622  003F  0084               	movwf	4
  3623  0040  3001               	movlw	high __pbssBANK2
  3624  0041  0085               	movwf	5
  3625  0042  3010               	movlw	16
  3626  0043  319A  2288  3180   	fcall	clear_ram0
  3627                           
  3628                           ; Clear objects allocated to BANK3
  3629  0046  30D3               	movlw	low __pbssBANK3
  3630  0047  0084               	movwf	4
  3631  0048  3001               	movlw	high __pbssBANK3
  3632  0049  0085               	movwf	5
  3633  004A  3016               	movlw	22
  3634  004B  319A  2288  3180   	fcall	clear_ram0
  3635                           
  3636                           ; Clear objects allocated to BANK4
  3637  004E  3020               	movlw	low __pbssBANK4
  3638  004F  0084               	movwf	4
  3639  0050  3002               	movlw	high __pbssBANK4
  3640  0051  0085               	movwf	5
  3641  0052  3037               	movlw	55
  3642  0053  319A  2288  3180   	fcall	clear_ram0
  3643                           
  3644                           ; Clear objects allocated to BANK5
  3645  0056  30CC               	movlw	low __pbssBANK5
  3646  0057  0084               	movwf	4
  3647  0058  3002               	movlw	high __pbssBANK5
  3648  0059  0085               	movwf	5
  3649  005A  301A               	movlw	26
  3650  005B  319A  2288  3180   	fcall	clear_ram0
  3651                           
  3652                           ; Clear objects allocated to BANK6
  3653  005E  3020               	movlw	low __pbssBANK6
  3654  005F  0084               	movwf	4
  3655  0060  3003               	movlw	high __pbssBANK6
  3656  0061  0085               	movwf	5
  3657  0062  3046               	movlw	70
  3658  0063  319A  2288  3180   	fcall	clear_ram0
  3659                           
  3660                           ; Clear objects allocated to BANK7
  3661  0066  30A0               	movlw	low __pbssBANK7
  3662  0067  0084               	movwf	4
  3663  0068  3003               	movlw	high __pbssBANK7
  3664  0069  0085               	movwf	5
  3665  006A  3049               	movlw	73
  3666  006B  319A  2288         	fcall	clear_ram0
  3667  006D                     end_of_initialization:	
  3668                           ;End of C runtime variable initialization code
  3669                           
  3670  006D                     __end_of__initialization:	
  3671  006D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3672  006E  0020               	movlb	0
  3673  006F  3180  2871         	ljmp	_main	;jump to C main() function
  3674                           
  3675                           	psect	bssCOMMON
  3676  0079                     __pbssCOMMON:	
  3677  0079                     _p_i2c_current:	
  3678  0079                     	ds	1
  3679  007A                     _p_i2c_trb_current:	
  3680  007A                     	ds	1
  3681  007B                     I2C_ISR@i2c_address:	
  3682  007B                     	ds	2
  3683                           
  3684                           	psect	bssBANK2
  3685  015E                     __pbssBANK2:	
  3686  015E                     _i2c_object:	
  3687  015E                     	ds	5
  3688  0163                     _ticks:	
  3689  0163                     	ds	4
  3690  0167                     I2C_ISR@pi2c_buf_ptr:	
  3691  0167                     	ds	2
  3692  0169                     _gps_configured:	
  3693  0169                     	ds	1
  3694  016A                     I2C_ISR@i2c_10bit_address_restart:	
  3695  016A                     	ds	1
  3696  016B                     I2C_ISR@i2c_bytes_left:	
  3697  016B                     	ds	1
  3698  016C                     _i2c_trb_count:	
  3699  016C                     	ds	1
  3700  016D                     _i2c_state:	
  3701  016D                     	ds	1
  3702                           
  3703                           	psect	bssBANK3
  3704  01D3                     __pbssBANK3:	
  3705  01D3                     _id:	
  3706  01D3                     	ds	2
  3707  01D5                     _checksum:	
  3708  01D5                     	ds	6
  3709  01DB                     I2C_MasterRead@trBlock:	
  3710  01DB                     	ds	5
  3711  01E0                     I2C_MasterWrite@trBlock:	
  3712  01E0                     	ds	5
  3713  01E5                     _i2c_tr_queue:	
  3714  01E5                     	ds	4
  3715                           
  3716                           	psect	dataBANK3
  3717  01EB                     __pdataBANK3:	
  3718  01EB                     _messages:	
  3719  01EB                     	ds	2
  3720                           
  3721                           	psect	bssBANK4
  3722  0220                     __pbssBANK4:	
  3723  0220                     main@F10166:	
  3724  0220                     	ds	16
  3725  0230                     GetNavData@F10108:	
  3726  0230                     	ds	12
  3727  023C                     bme280_get_sensor_data@F273:	
  3728  023C                     	ds	12
  3729  0248                     bme280_get_sensor_data@F271:	
  3730  0248                     	ds	8
  3731  0250                     GetNavData@F10102:	
  3732  0250                     	ds	7
  3733                           
  3734                           	psect	bssBANK5
  3735  02CC                     __pbssBANK5:	
  3736  02CC                     get_calib_data@F375:	
  3737  02CC                     	ds	26
  3738                           
  3739                           	psect	dataBANK5
  3740  02A0                     __pdataBANK5:	
  3741  02A0                     _setNavFlightMode:	
  3742  02A0                     	ds	44
  3743                           
  3744                           	psect	bssBANK6
  3745  0320                     __pbssBANK6:	
  3746  0320                     _message_start:	
  3747  0320                     	ds	70
  3748                           
  3749                           	psect	bssBANK7
  3750  03A0                     __pbssBANK7:	
  3751  03A0                     _message_end:	
  3752  03A0                     	ds	73
  3753                           
  3754                           	psect	inittext
  3755  1A8E                     init_ram:	
  3756  1A8E  00FE               	movwf	126
  3757  1A8F                     initloop:	
  3758  1A8F  0012               	moviw fsr0++
  3759  1A90  001E               	movwi fsr1++
  3760  1A91  0BFE               	decfsz	126,f
  3761  1A92  2A8F               	goto	initloop
  3762  1A93  3400               	retlw	0
  3763                           
  3764                           	psect	clrtext
  3765  1A88                     clear_ram0:	
  3766                           ;	Called with FSR0 containing the base address, and
  3767                           ;	WREG with the size to clear
  3768                           
  3769  1A88  0064               	clrwdt	;clear the watchdog before getting into this loop
  3770  1A89                     clrloop0:	
  3771  1A89  0180               	clrf	0	;clear RAM location pointed to by FSR
  3772  1A8A  3101               	addfsr 0,1
  3773  1A8B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3774  1A8C  2A89               	goto	clrloop0	;have we reached the end yet?
  3775  1A8D  3400               	retlw	0	;all done for this memory range, return
  3776                           
  3777                           	psect	cstackBANK3
  3778  01A0                     __pcstackBANK3:	
  3779  01A0                     main@env_sensor:	
  3780                           
  3781                           ; 51 bytes @ 0x0
  3782  01A0                     	ds	51
  3783                           
  3784                           	psect	cstackBANK2
  3785  0120                     __pcstackBANK2:	
  3786  0120                     bme280_get_sensor_data@reg_data:	
  3787                           
  3788                           ; 8 bytes @ 0x0
  3789  0120                     	ds	8
  3790  0128                     bme280_get_sensor_data@sensor_comp:	
  3791                           
  3792                           ; 1 bytes @ 0x8
  3793  0128                     	ds	1
  3794  0129                     bme280_get_sensor_data@rslt:	
  3795                           
  3796                           ; 1 bytes @ 0x9
  3797  0129                     	ds	1
  3798  012A                     bme280_get_sensor_data@uncomp_data:	
  3799                           
  3800                           ; 12 bytes @ 0xA
  3801  012A                     	ds	12
  3802  0136                     ??_main:	
  3803                           
  3804                           ; 1 bytes @ 0x16
  3805  0136                     	ds	5
  3806  013B                     main@convertedNumber:	
  3807                           
  3808                           ; 16 bytes @ 0x1B
  3809  013B                     	ds	17
  3810  014C                     main@end:	
  3811                           
  3812                           ; 2 bytes @ 0x2C
  3813  014C                     	ds	2
  3814  014E                     main@i:	
  3815                           
  3816                           ; 2 bytes @ 0x2E
  3817  014E                     	ds	2
  3818  0150                     main@sensor_data:	
  3819                           
  3820                           ; 12 bytes @ 0x30
  3821  0150                     	ds	12
  3822  015C                     main@index:	
  3823                           
  3824                           ; 2 bytes @ 0x3C
  3825  015C                     	ds	2
  3826                           
  3827                           	psect	cstackBANK1
  3828  00A0                     __pcstackBANK1:	
  3829  00A0                     	ds	8
  3830  00A8                     _compensate_pressure$2534:	
  3831                           
  3832                           ; 8 bytes @ 0x8
  3833  00A8                     	ds	8
  3834  00B0                     _compensate_pressure$2535:	
  3835                           
  3836                           ; 8 bytes @ 0x10
  3837  00B0                     	ds	8
  3838  00B8                     compensate_pressure@uncomp_data:	
  3839                           
  3840                           ; 1 bytes @ 0x18
  3841  00B8                     	ds	1
  3842  00B9                     compensate_pressure@pressure_max:	
  3843                           
  3844                           ; 4 bytes @ 0x19
  3845  00B9                     	ds	8
  3846  00C1                     _compensate_pressure$2533:	
  3847                           
  3848                           ; 8 bytes @ 0x21
  3849  00C1                     	ds	8
  3850  00C9                     compensate_pressure@pressure:	
  3851                           
  3852                           ; 4 bytes @ 0x29
  3853  00C9                     	ds	4
  3854  00CD                     compensate_pressure@var2:	
  3855                           
  3856                           ; 8 bytes @ 0x2D
  3857  00CD                     	ds	8
  3858  00D5                     compensate_pressure@var4:	
  3859                           
  3860                           ; 8 bytes @ 0x35
  3861  00D5                     	ds	8
  3862  00DD                     compensate_pressure@var1:	
  3863                           
  3864                           ; 8 bytes @ 0x3D
  3865  00DD                     	ds	8
  3866  00E5                     ?_bme280_compensate_data:	
  3867  00E5                     bme280_compensate_data@uncomp_data:	
  3868                           ; 1 bytes @ 0x45
  3869                           
  3870                           
  3871                           ; 1 bytes @ 0x45
  3872  00E5                     	ds	1
  3873  00E6                     bme280_compensate_data@comp_data:	
  3874                           
  3875                           ; 1 bytes @ 0x46
  3876  00E6                     	ds	1
  3877  00E7                     bme280_compensate_data@calib_data:	
  3878                           
  3879                           ; 1 bytes @ 0x47
  3880  00E7                     	ds	1
  3881  00E8                     ??_bme280_compensate_data:	
  3882                           
  3883                           ; 1 bytes @ 0x48
  3884  00E8                     	ds	1
  3885  00E9                     bme280_compensate_data@rslt:	
  3886                           
  3887                           ; 1 bytes @ 0x49
  3888  00E9                     	ds	1
  3889  00EA                     bme280_compensate_data@sensor_comp:	
  3890                           
  3891                           ; 1 bytes @ 0x4A
  3892  00EA                     	ds	1
  3893  00EB                     ?_bme280_get_sensor_data:	
  3894  00EB                     bme280_get_sensor_data@comp_data:	
  3895                           ; 1 bytes @ 0x4B
  3896                           
  3897                           
  3898                           ; 1 bytes @ 0x4B
  3899  00EB                     	ds	1
  3900  00EC                     bme280_get_sensor_data@dev:	
  3901                           
  3902                           ; 1 bytes @ 0x4C
  3903  00EC                     	ds	1
  3904  00ED                     ??_bme280_get_sensor_data:	
  3905                           
  3906                           ; 1 bytes @ 0x4D
  3907  00ED                     	ds	3
  3908                           
  3909                           	psect	cstackCOMMON
  3910  0070                     __pcstackCOMMON:	
  3911  0070                     ?_null_ptr_check:	
  3912  0070                     ?_bme280_soft_reset:	
  3913                           ; 1 bytes @ 0x0
  3914                           
  3915  0070                     ?_get_calib_data:	
  3916                           ; 1 bytes @ 0x0
  3917                           
  3918  0070                     ?_PIN_MANAGER_Initialize:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921  0070                     ?_OSCILLATOR_Initialize:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924  0070                     ?_I2C_Initialize:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927  0070                     ?_TMR0_Initialize:	
  3928                           ; 1 bytes @ 0x0
  3929                           
  3930  0070                     ?_EUSART_Initialize:	
  3931                           ; 1 bytes @ 0x0
  3932                           
  3933  0070                     ?_TMR0_ISR:	
  3934                           ; 1 bytes @ 0x0
  3935                           
  3936  0070                     ??_TMR0_ISR:	
  3937                           ; 1 bytes @ 0x0
  3938                           
  3939  0070                     ?_I2C_BusCollisionISR:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942  0070                     ??_I2C_BusCollisionISR:	
  3943                           ; 1 bytes @ 0x0
  3944                           
  3945  0070                     ?_I2C_ISR:	
  3946                           ; 1 bytes @ 0x0
  3947                           
  3948  0070                     ?_TMR0_DefaultInterruptHandler:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951  0070                     ??_TMR0_DefaultInterruptHandler:	
  3952                           ; 1 bytes @ 0x0
  3953                           
  3954  0070                     ?_I2C_Stop:	
  3955                           ; 1 bytes @ 0x0
  3956                           
  3957  0070                     ??_I2C_Stop:	
  3958                           ; 1 bytes @ 0x0
  3959                           
  3960  0070                     ?_I2C_FunctionComplete:	
  3961                           ; 1 bytes @ 0x0
  3962                           
  3963  0070                     ??_I2C_FunctionComplete:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966  0070                     ?_bme280_init:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969  0070                     ?_SYSTEM_Initialize:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972  0070                     ?_EUSART_is_rx_ready:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975  0070                     ?_EUSART_Read:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978  0070                     ?_EUSART_Write:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981  0070                     ?_INTERRUPT_InterruptManager:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984  0070                     ?_I2C_WaitForLastPacketToComplete:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0070                     ?_TimerISR:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0070                     ??_TimerISR:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0070                     ?_FlashError:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996  0070                     ?_TransmitBit:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999  0070                     ?_TransmitByte:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002  0070                     ?_TransmitString:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005  0070                     ?_GPS_SendUBX:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008  0070                     ?_GPS_HasAcknowledged:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011  0070                     ?_SetupGPS:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014  0070                     ?_main:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017                           
  4018                           ; 1 bytes @ 0x0
  4019  0070                     	ds	2
  4020  0072                     I2C_Stop@completion_code:	
  4021                           
  4022                           ; 1 bytes @ 0x2
  4023  0072                     	ds	1
  4024  0073                     ??_I2C_ISR:	
  4025                           
  4026                           ; 1 bytes @ 0x3
  4027  0073                     	ds	2
  4028  0075                     ??_null_ptr_check:	
  4029  0075                     ?_interleave_reg_addr:	
  4030                           ; 1 bytes @ 0x5
  4031                           
  4032  0075                     ?_bme280_parse_sensor_data:	
  4033                           ; 1 bytes @ 0x5
  4034                           
  4035  0075                     ?_parse_temp_press_calib_data:	
  4036                           ; 1 bytes @ 0x5
  4037                           
  4038  0075                     ?_parse_humidity_calib_data:	
  4039                           ; 1 bytes @ 0x5
  4040                           
  4041  0075                     ??_PIN_MANAGER_Initialize:	
  4042                           ; 1 bytes @ 0x5
  4043                           
  4044  0075                     ??_OSCILLATOR_Initialize:	
  4045                           ; 1 bytes @ 0x5
  4046                           
  4047  0075                     ??_I2C_Initialize:	
  4048                           ; 1 bytes @ 0x5
  4049                           
  4050  0075                     ??_EUSART_Initialize:	
  4051                           ; 1 bytes @ 0x5
  4052                           
  4053  0075                     ?_TMR0_SetInterruptHandler:	
  4054                           ; 1 bytes @ 0x5
  4055                           
  4056  0075                     ?_I2C_MasterWriteTRBBuild:	
  4057                           ; 1 bytes @ 0x5
  4058                           
  4059  0075                     ?_I2C_MasterTRBInsert:	
  4060                           ; 1 bytes @ 0x5
  4061                           
  4062  0075                     ??_I2C_MasterReadTRBBuild:	
  4063                           ; 1 bytes @ 0x5
  4064                           
  4065  0075                     ??_EUSART_is_rx_ready:	
  4066                           ; 1 bytes @ 0x5
  4067                           
  4068  0075                     ??_EUSART_Read:	
  4069                           ; 1 bytes @ 0x5
  4070                           
  4071  0075                     ??_EUSART_Write:	
  4072                           ; 1 bytes @ 0x5
  4073                           
  4074  0075                     ??_INTERRUPT_InterruptManager:	
  4075                           ; 1 bytes @ 0x5
  4076                           
  4077  0075                     ??_I2C_WaitForLastPacketToComplete:	
  4078                           ; 1 bytes @ 0x5
  4079                           
  4080  0075                     ??_FlashError:	
  4081                           ; 1 bytes @ 0x5
  4082                           
  4083  0075                     ??_Insert:	
  4084                           ; 1 bytes @ 0x5
  4085                           
  4086  0075                     ?_Sleep:	
  4087                           ; 1 bytes @ 0x5
  4088                           
  4089  0075                     ??_TransmitBit:	
  4090                           ; 1 bytes @ 0x5
  4091                           
  4092  0075                     ??_GPS_HasAcknowledged:	
  4093                           ; 1 bytes @ 0x5
  4094                           
  4095  0075                     ??___lmul:	
  4096                           ; 1 bytes @ 0x5
  4097                           
  4098  0075                     ??___omul:	
  4099                           ; 1 bytes @ 0x5
  4100                           
  4101  0075                     ?_strlen:	
  4102                           ; 1 bytes @ 0x5
  4103                           
  4104  0075                     ?_GetLengthUBX:	
  4105                           ; 2 bytes @ 0x5
  4106                           
  4107  0075                     ?___awdiv:	
  4108                           ; 2 bytes @ 0x5
  4109                           
  4110  0075                     ?___awmod:	
  4111                           ; 2 bytes @ 0x5
  4112                           
  4113  0075                     bme280_parse_sensor_data@uncomp_data:	
  4114                           ; 2 bytes @ 0x5
  4115                           
  4116  0075                     interleave_reg_addr@temp_buff:	
  4117                           ; 1 bytes @ 0x5
  4118                           
  4119  0075                     parse_temp_press_calib_data@dev:	
  4120                           ; 1 bytes @ 0x5
  4121                           
  4122  0075                     parse_humidity_calib_data@dev:	
  4123                           ; 1 bytes @ 0x5
  4124                           
  4125  0075                     EUSART_Write@txData:	
  4126                           ; 1 bytes @ 0x5
  4127                           
  4128  0075                     I2C_MasterTRBInsert@ptrb_list:	
  4129                           ; 1 bytes @ 0x5
  4130                           
  4131  0075                     I2C_MasterWriteTRBBuild@pdata:	
  4132                           ; 1 bytes @ 0x5
  4133                           
  4134  0075                     TMR0_SetInterruptHandler@InterruptHandler:	
  4135                           ; 1 bytes @ 0x5
  4136                           
  4137  0075                     ___awdiv@divisor:	
  4138                           ; 2 bytes @ 0x5
  4139                           
  4140  0075                     ___awmod@divisor:	
  4141                           ; 2 bytes @ 0x5
  4142                           
  4143  0075                     strlen@s:	
  4144                           ; 2 bytes @ 0x5
  4145                           
  4146  0075                     Sleep@ms:	
  4147                           ; 2 bytes @ 0x5
  4148                           
  4149  0075                     ___lmul@product:	
  4150                           ; 4 bytes @ 0x5
  4151                           
  4152                           
  4153                           ; 4 bytes @ 0x5
  4154  0075                     	ds	1
  4155  0076                     ??_parse_temp_press_calib_data:	
  4156  0076                     ??_parse_humidity_calib_data:	
  4157                           ; 1 bytes @ 0x6
  4158                           
  4159  0076                     ??___aodiv:	
  4160                           ; 1 bytes @ 0x6
  4161                           
  4162  0076                     interleave_reg_addr@reg_data:	
  4163                           ; 1 bytes @ 0x6
  4164                           
  4165  0076                     I2C_MasterTRBInsert@pflag:	
  4166                           ; 1 bytes @ 0x6
  4167                           
  4168  0076                     I2C_MasterWriteTRBBuild@length:	
  4169                           ; 1 bytes @ 0x6
  4170                           
  4171  0076                     TransmitBit@b:	
  4172                           ; 1 bytes @ 0x6
  4173                           
  4174                           
  4175                           ; 1 bytes @ 0x6
  4176  0076                     	ds	1
  4177  0077                     ??_TMR0_Initialize:	
  4178  0077                     ??_TMR0_SetInterruptHandler:	
  4179                           ; 1 bytes @ 0x7
  4180                           
  4181  0077                     ??_I2C_MasterTRBInsert:	
  4182                           ; 1 bytes @ 0x7
  4183                           
  4184  0077                     ??_strlen:	
  4185                           ; 1 bytes @ 0x7
  4186                           
  4187  0077                     ??_TransmitByte:	
  4188                           ; 1 bytes @ 0x7
  4189                           
  4190  0077                     interleave_reg_addr@len:	
  4191                           ; 1 bytes @ 0x7
  4192                           
  4193  0077                     parse_temp_press_calib_data@calib_data:	
  4194                           ; 1 bytes @ 0x7
  4195                           
  4196  0077                     null_ptr_check@rslt:	
  4197                           ; 1 bytes @ 0x7
  4198                           
  4199  0077                     I2C_MasterReadTRBBuild@ptrb:	
  4200                           ; 1 bytes @ 0x7
  4201                           
  4202  0077                     I2C_MasterWriteTRBBuild@address:	
  4203                           ; 1 bytes @ 0x7
  4204                           
  4205  0077                     FlashError@i:	
  4206                           ; 2 bytes @ 0x7
  4207                           
  4208  0077                     ___awdiv@dividend:	
  4209                           ; 2 bytes @ 0x7
  4210                           
  4211  0077                     ___awmod@dividend:	
  4212                           ; 2 bytes @ 0x7
  4213                           
  4214                           
  4215                           ; 2 bytes @ 0x7
  4216  0077                     	ds	1
  4217  0078                     ??_SYSTEM_Initialize:	
  4218  0078                     ??_ClearString:	
  4219                           ; 1 bytes @ 0x8
  4220                           
  4221  0078                     ??_InsertString:	
  4222                           ; 1 bytes @ 0x8
  4223                           
  4224  0078                     ??_TransmitString:	
  4225                           ; 1 bytes @ 0x8
  4226                           
  4227  0078                     ??_WriteGPS:	
  4228                           ; 1 bytes @ 0x8
  4229                           
  4230  0078                     ??_GetLengthUBX:	
  4231                           ; 1 bytes @ 0x8
  4232                           
  4233  0078                     parse_temp_press_calib_data@reg_data:	
  4234                           ; 1 bytes @ 0x8
  4235                           
  4236  0078                     null_ptr_check@dev:	
  4237                           ; 1 bytes @ 0x8
  4238                           
  4239  0078                     I2C_MasterTRBInsert@count:	
  4240                           ; 1 bytes @ 0x8
  4241                           
  4242  0078                     GetLengthUBX@data:	
  4243                           ; 1 bytes @ 0x8
  4244                           
  4245                           
  4246                           ; 1 bytes @ 0x8
  4247  0078                     	ds	1
  4248                           
  4249                           	psect	cstackBANK0
  4250  0020                     __pcstackBANK0:	
  4251  0020                     ??_interleave_reg_addr:	
  4252  0020                     ??_bme280_parse_sensor_data:	
  4253                           ; 1 bytes @ 0x0
  4254                           
  4255  0020                     ??_I2C_MasterWriteTRBBuild:	
  4256                           ; 1 bytes @ 0x0
  4257                           
  4258  0020                     ?_I2C_MasterReadTRBBuild:	
  4259                           ; 1 bytes @ 0x0
  4260                           
  4261  0020                     ??_Sleep:	
  4262                           ; 1 bytes @ 0x0
  4263                           
  4264  0020                     ??_GPS_SendUBX:	
  4265                           ; 1 bytes @ 0x0
  4266                           
  4267  0020                     ??___awdiv:	
  4268                           ; 1 bytes @ 0x0
  4269                           
  4270  0020                     ??___awmod:	
  4271                           ; 1 bytes @ 0x0
  4272                           
  4273  0020                     ?_Insert:	
  4274                           ; 1 bytes @ 0x0
  4275                           
  4276  0020                     ?___lmul:	
  4277                           ; 2 bytes @ 0x0
  4278                           
  4279  0020                     ?___omul:	
  4280                           ; 4 bytes @ 0x0
  4281                           
  4282  0020                     Insert@src:	
  4283                           ; 8 bytes @ 0x0
  4284                           
  4285  0020                     TransmitByte@byte:	
  4286                           ; 1 bytes @ 0x0
  4287                           
  4288  0020                     parse_humidity_calib_data@dig_H4_lsb:	
  4289                           ; 1 bytes @ 0x0
  4290                           
  4291  0020                     I2C_MasterReadTRBBuild@pdata:	
  4292                           ; 2 bytes @ 0x0
  4293                           
  4294  0020                     strlen@a:	
  4295                           ; 2 bytes @ 0x0
  4296                           
  4297  0020                     GPS_HasAcknowledged@startTime:	
  4298                           ; 2 bytes @ 0x0
  4299                           
  4300  0020                     ___lmul@multiplier:	
  4301                           ; 4 bytes @ 0x0
  4302                           
  4303  0020                     ___omul@multiplier:	
  4304                           ; 4 bytes @ 0x0
  4305                           
  4306                           
  4307                           ; 8 bytes @ 0x0
  4308  0020                     	ds	1
  4309  0021                     ___awdiv@counter:	
  4310  0021                     ___awmod@counter:	
  4311                           ; 1 bytes @ 0x1
  4312                           
  4313  0021                     Insert@index:	
  4314                           ; 1 bytes @ 0x1
  4315                           
  4316  0021                     TransmitByte@i:	
  4317                           ; 2 bytes @ 0x1
  4318                           
  4319  0021                     GPS_SendUBX@length:	
  4320                           ; 2 bytes @ 0x1
  4321                           
  4322                           
  4323                           ; 2 bytes @ 0x1
  4324  0021                     	ds	1
  4325  0022                     ?_ClearString:	
  4326  0022                     ?_WriteGPS:	
  4327                           ; 1 bytes @ 0x2
  4328                           
  4329  0022                     ?_crc16_update:	
  4330                           ; 1 bytes @ 0x2
  4331                           
  4332  0022                     I2C_MasterReadTRBBuild@length:	
  4333                           ; 2 bytes @ 0x2
  4334                           
  4335  0022                     I2C_MasterWriteTRBBuild@ptrb:	
  4336                           ; 1 bytes @ 0x2
  4337                           
  4338  0022                     ___awdiv@sign:	
  4339                           ; 1 bytes @ 0x2
  4340                           
  4341  0022                     ___awmod@sign:	
  4342                           ; 1 bytes @ 0x2
  4343                           
  4344  0022                     parse_humidity_calib_data@dig_H4_msb:	
  4345                           ; 1 bytes @ 0x2
  4346                           
  4347  0022                     ClearString@str:	
  4348                           ; 2 bytes @ 0x2
  4349                           
  4350  0022                     crc16_update@length:	
  4351                           ; 2 bytes @ 0x2
  4352                           
  4353  0022                     WriteGPS@message:	
  4354                           ; 2 bytes @ 0x2
  4355                           
  4356                           
  4357                           ; 2 bytes @ 0x2
  4358  0022                     	ds	1
  4359  0023                     ?_I2C_MasterWrite:	
  4360  0023                     interleave_reg_addr@reg_addr:	
  4361                           ; 1 bytes @ 0x3
  4362                           
  4363  0023                     I2C_MasterWrite@length:	
  4364                           ; 1 bytes @ 0x3
  4365                           
  4366  0023                     GPS_SendUBX@data:	
  4367                           ; 1 bytes @ 0x3
  4368                           
  4369  0023                     I2C_MasterReadTRBBuild@address:	
  4370                           ; 1 bytes @ 0x3
  4371                           
  4372  0023                     Insert@destLimit:	
  4373                           ; 2 bytes @ 0x3
  4374                           
  4375  0023                     TransmitString@counti:	
  4376                           ; 2 bytes @ 0x3
  4377                           
  4378  0023                     ___awdiv@quotient:	
  4379                           ; 2 bytes @ 0x3
  4380                           
  4381                           
  4382                           ; 2 bytes @ 0x3
  4383  0023                     	ds	1
  4384  0024                     interleave_reg_addr@index:	
  4385  0024                     GPS_HasAcknowledged@ackByte:	
  4386                           ; 1 bytes @ 0x4
  4387                           
  4388  0024                     parse_humidity_calib_data@dig_H5_lsb:	
  4389                           ; 1 bytes @ 0x4
  4390                           
  4391  0024                     I2C_MasterWrite@address:	
  4392                           ; 2 bytes @ 0x4
  4393                           
  4394  0024                     ClearString@counti:	
  4395                           ; 2 bytes @ 0x4
  4396                           
  4397  0024                     crc16_update@wCrc:	
  4398                           ; 2 bytes @ 0x4
  4399                           
  4400  0024                     WriteGPS@counti:	
  4401                           ; 2 bytes @ 0x4
  4402                           
  4403  0024                     GPS_SendUBX@i:	
  4404                           ; 2 bytes @ 0x4
  4405                           
  4406  0024                     Sleep@start:	
  4407                           ; 2 bytes @ 0x4
  4408                           
  4409  0024                     ___lmul@multiplicand:	
  4410                           ; 4 bytes @ 0x4
  4411                           
  4412                           
  4413                           ; 4 bytes @ 0x4
  4414  0024                     	ds	1
  4415  0025                     ?_I2C_MasterRead:	
  4416  0025                     ?_ReverseString:	
  4417                           ; 1 bytes @ 0x5
  4418                           
  4419  0025                     Insert@temp:	
  4420                           ; 1 bytes @ 0x5
  4421                           
  4422  0025                     I2C_MasterRead@pdata:	
  4423                           ; 1 bytes @ 0x5
  4424                           
  4425  0025                     ReverseString@str:	
  4426                           ; 2 bytes @ 0x5
  4427                           
  4428  0025                     TransmitString@i:	
  4429                           ; 2 bytes @ 0x5
  4430                           
  4431  0025                     GPS_HasAcknowledged@ackPacket:	
  4432                           ; 2 bytes @ 0x5
  4433                           
  4434                           
  4435                           ; 10 bytes @ 0x5
  4436  0025                     	ds	1
  4437  0026                     ??_crc16_update:	
  4438  0026                     I2C_MasterWrite@pflag:	
  4439                           ; 1 bytes @ 0x6
  4440                           
  4441  0026                     Insert@current:	
  4442                           ; 1 bytes @ 0x6
  4443                           
  4444  0026                     parse_humidity_calib_data@dig_H5_msb:	
  4445                           ; 1 bytes @ 0x6
  4446                           
  4447  0026                     ClearString@i:	
  4448                           ; 2 bytes @ 0x6
  4449                           
  4450  0026                     WriteGPS@i:	
  4451                           ; 2 bytes @ 0x6
  4452                           
  4453                           
  4454                           ; 2 bytes @ 0x6
  4455  0026                     	ds	1
  4456  0027                     ??_I2C_MasterWrite:	
  4457  0027                     ??_ReverseString:	
  4458                           ; 1 bytes @ 0x7
  4459                           
  4460  0027                     I2C_MasterRead@length:	
  4461                           ; 1 bytes @ 0x7
  4462                           
  4463  0027                     Insert@dest:	
  4464                           ; 1 bytes @ 0x7
  4465                           
  4466  0027                     TransmitString@message:	
  4467                           ; 1 bytes @ 0x7
  4468                           
  4469                           
  4470                           ; 1 bytes @ 0x7
  4471  0027                     	ds	1
  4472  0028                     ?_InsertString:	
  4473  0028                     ?___aldiv:	
  4474                           ; 2 bytes @ 0x8
  4475                           
  4476  0028                     parse_humidity_calib_data@calib_data:	
  4477                           ; 4 bytes @ 0x8
  4478                           
  4479  0028                     I2C_MasterRead@address:	
  4480                           ; 1 bytes @ 0x8
  4481                           
  4482  0028                     InsertString@src:	
  4483                           ; 2 bytes @ 0x8
  4484                           
  4485  0028                     bme280_parse_sensor_data@data_xlsb:	
  4486                           ; 2 bytes @ 0x8
  4487                           
  4488  0028                     ___aldiv@divisor:	
  4489                           ; 4 bytes @ 0x8
  4490                           
  4491  0028                     ___omul@multiplicand:	
  4492                           ; 4 bytes @ 0x8
  4493                           
  4494                           
  4495                           ; 8 bytes @ 0x8
  4496  0028                     	ds	1
  4497  0029                     parse_humidity_calib_data@reg_data:	
  4498  0029                     I2C_MasterWrite@pdata:	
  4499                           ; 1 bytes @ 0x9
  4500                           
  4501  0029                     crc16_update@pData:	
  4502                           ; 1 bytes @ 0x9
  4503                           
  4504                           
  4505                           ; 1 bytes @ 0x9
  4506  0029                     	ds	1
  4507  002A                     ?_WriteEnvSensor:	
  4508  002A                     I2C_MasterRead@pflag:	
  4509                           ; 1 bytes @ 0xA
  4510                           
  4511  002A                     crc16_update@i:	
  4512                           ; 1 bytes @ 0xA
  4513                           
  4514  002A                     WriteEnvSensor@dev_id:	
  4515                           ; 1 bytes @ 0xA
  4516                           
  4517  002A                     InsertString@index:	
  4518                           ; 1 bytes @ 0xA
  4519                           
  4520                           
  4521                           ; 2 bytes @ 0xA
  4522  002A                     	ds	1
  4523  002B                     ??_I2C_MasterRead:	
  4524  002B                     ?_crc16:	
  4525                           ; 1 bytes @ 0xB
  4526                           
  4527  002B                     WriteEnvSensor@reg_addr:	
  4528                           ; 2 bytes @ 0xB
  4529                           
  4530  002B                     ReverseString@halfway:	
  4531                           ; 1 bytes @ 0xB
  4532                           
  4533  002B                     crc16@segments:	
  4534                           ; 2 bytes @ 0xB
  4535                           
  4536                           
  4537                           ; 2 bytes @ 0xB
  4538  002B                     	ds	1
  4539  002C                     WriteEnvSensor@reg_data:	
  4540  002C                     InsertString@destLimit:	
  4541                           ; 1 bytes @ 0xC
  4542                           
  4543  002C                     bme280_parse_sensor_data@data_lsb:	
  4544                           ; 2 bytes @ 0xC
  4545                           
  4546  002C                     ___aldiv@dividend:	
  4547                           ; 4 bytes @ 0xC
  4548                           
  4549                           
  4550                           ; 4 bytes @ 0xC
  4551  002C                     	ds	1
  4552  002D                     ??_crc16:	
  4553  002D                     ?_ReadEnvSensor:	
  4554                           ; 1 bytes @ 0xD
  4555                           
  4556  002D                     ReverseString@temp:	
  4557                           ; 1 bytes @ 0xD
  4558                           
  4559  002D                     ReadEnvSensor@dev_id:	
  4560                           ; 1 bytes @ 0xD
  4561                           
  4562  002D                     WriteEnvSensor@len:	
  4563                           ; 1 bytes @ 0xD
  4564                           
  4565                           
  4566                           ; 2 bytes @ 0xD
  4567  002D                     	ds	1
  4568  002E                     ReadEnvSensor@reg_addr:	
  4569  002E                     InsertString@counti:	
  4570                           ; 1 bytes @ 0xE
  4571                           
  4572  002E                     ReverseString@opposite:	
  4573                           ; 2 bytes @ 0xE
  4574                           
  4575                           
  4576                           ; 2 bytes @ 0xE
  4577  002E                     	ds	1
  4578  002F                     ??_WriteEnvSensor:	
  4579  002F                     crc16@data:	
  4580                           ; 1 bytes @ 0xF
  4581                           
  4582  002F                     GPS_HasAcknowledged@data:	
  4583                           ; 1 bytes @ 0xF
  4584                           
  4585  002F                     ReadEnvSensor@data:	
  4586                           ; 1 bytes @ 0xF
  4587                           
  4588                           
  4589                           ; 2 bytes @ 0xF
  4590  002F                     	ds	1
  4591  0030                     ??___aldiv:	
  4592  0030                     GPS_HasAcknowledged@ackByteID:	
  4593                           ; 1 bytes @ 0x10
  4594                           
  4595  0030                     InsertString@i:	
  4596                           ; 1 bytes @ 0x10
  4597                           
  4598  0030                     ReverseString@counti:	
  4599                           ; 2 bytes @ 0x10
  4600                           
  4601  0030                     crc16@crc:	
  4602                           ; 2 bytes @ 0x10
  4603                           
  4604  0030                     bme280_parse_sensor_data@data_msb:	
  4605                           ; 2 bytes @ 0x10
  4606                           
  4607  0030                     ___omul@product:	
  4608                           ; 4 bytes @ 0x10
  4609                           
  4610                           
  4611                           ; 8 bytes @ 0x10
  4612  0030                     	ds	1
  4613  0031                     GPS_HasAcknowledged@i:	
  4614  0031                     ___aldiv@counter:	
  4615                           ; 1 bytes @ 0x11
  4616                           
  4617  0031                     ReadEnvSensor@len:	
  4618                           ; 1 bytes @ 0x11
  4619                           
  4620                           
  4621                           ; 2 bytes @ 0x11
  4622  0031                     	ds	1
  4623  0032                     ??_SetupGPS:	
  4624  0032                     InsertString@dest:	
  4625                           ; 1 bytes @ 0x12
  4626                           
  4627  0032                     ___aldiv@sign:	
  4628                           ; 1 bytes @ 0x12
  4629                           
  4630  0032                     ReverseString@i:	
  4631                           ; 1 bytes @ 0x12
  4632                           
  4633  0032                     crc16@i:	
  4634                           ; 2 bytes @ 0x12
  4635                           
  4636                           
  4637                           ; 2 bytes @ 0x12
  4638  0032                     	ds	1
  4639  0033                     ??_ReadEnvSensor:	
  4640  0033                     WriteEnvSensor@local_address:	
  4641                           ; 1 bytes @ 0x13
  4642                           
  4643  0033                     ___aldiv@quotient:	
  4644                           ; 1 bytes @ 0x13
  4645                           
  4646                           
  4647                           ; 4 bytes @ 0x13
  4648  0033                     	ds	1
  4649  0034                     ?_UIntToHexString:	
  4650  0034                     ?_IntToString:	
  4651                           ; 1 bytes @ 0x14
  4652                           
  4653  0034                     bme280_parse_sensor_data@reg_data:	
  4654                           ; 1 bytes @ 0x14
  4655                           
  4656  0034                     WriteEnvSensor@status:	
  4657                           ; 1 bytes @ 0x14
  4658                           
  4659  0034                     IntToString@n:	
  4660                           ; 1 bytes @ 0x14
  4661                           
  4662  0034                     UIntToHexString@n:	
  4663                           ; 2 bytes @ 0x14
  4664                           
  4665                           
  4666                           ; 4 bytes @ 0x14
  4667  0034                     	ds	1
  4668  0035                     ?_bme280_set_regs:	
  4669  0035                     bme280_set_regs@reg_data:	
  4670                           ; 1 bytes @ 0x15
  4671                           
  4672                           
  4673                           ; 1 bytes @ 0x15
  4674  0035                     	ds	1
  4675  0036                     bme280_set_regs@len:	
  4676  0036                     IntToString@dest:	
  4677                           ; 1 bytes @ 0x16
  4678                           
  4679                           
  4680                           ; 2 bytes @ 0x16
  4681  0036                     	ds	1
  4682  0037                     ?_compensate_temperature:	
  4683  0037                     bme280_set_regs@dev:	
  4684                           ; 4 bytes @ 0x17
  4685                           
  4686  0037                     compensate_temperature@calib_data:	
  4687                           ; 1 bytes @ 0x17
  4688                           
  4689  0037                     ReadEnvSensor@status:	
  4690                           ; 1 bytes @ 0x17
  4691                           
  4692                           
  4693                           ; 1 bytes @ 0x17
  4694  0037                     	ds	1
  4695  0038                     ?_bme280_get_regs:	
  4696  0038                     ??_bme280_set_regs:	
  4697                           ; 1 bytes @ 0x18
  4698                           
  4699  0038                     ??_IntToString:	
  4700                           ; 1 bytes @ 0x18
  4701                           
  4702  0038                     ?___aodiv:	
  4703                           ; 1 bytes @ 0x18
  4704                           
  4705  0038                     UIntToHexString@dest:	
  4706                           ; 8 bytes @ 0x18
  4707                           
  4708  0038                     bme280_get_regs@reg_data:	
  4709                           ; 1 bytes @ 0x18
  4710                           
  4711  0038                     ___aodiv@divisor:	
  4712                           ; 2 bytes @ 0x18
  4713                           
  4714                           
  4715                           ; 8 bytes @ 0x18
  4716  0038                     	ds	1
  4717  0039                     ??_UIntToHexString:	
  4718                           
  4719                           ; 1 bytes @ 0x19
  4720  0039                     	ds	1
  4721  003A                     bme280_get_regs@len:	
  4722                           
  4723                           ; 2 bytes @ 0x1A
  4724  003A                     	ds	1
  4725  003B                     ??_compensate_temperature:	
  4726  003B                     IntToString@sign:	
  4727                           ; 1 bytes @ 0x1B
  4728                           
  4729  003B                     _UIntToHexString$1790:	
  4730                           ; 1 bytes @ 0x1B
  4731                           
  4732  003B                     bme280_set_regs@temp_buff:	
  4733                           ; 4 bytes @ 0x1B
  4734                           
  4735                           
  4736                           ; 20 bytes @ 0x1B
  4737  003B                     	ds	1
  4738  003C                     bme280_get_regs@dev:	
  4739  003C                     IntToString@i:	
  4740                           ; 1 bytes @ 0x1C
  4741                           
  4742                           
  4743                           ; 2 bytes @ 0x1C
  4744  003C                     	ds	1
  4745  003D                     ??_bme280_get_regs:	
  4746                           
  4747                           ; 1 bytes @ 0x1D
  4748  003D                     	ds	2
  4749  003F                     bme280_get_regs@reg_addr:	
  4750  003F                     UIntToHexString@remainder:	
  4751                           ; 1 bytes @ 0x1F
  4752                           
  4753                           
  4754                           ; 4 bytes @ 0x1F
  4755  003F                     	ds	1
  4756  0040                     bme280_get_regs@rslt:	
  4757  0040                     ___aodiv@dividend:	
  4758                           ; 1 bytes @ 0x20
  4759                           
  4760                           
  4761                           ; 8 bytes @ 0x20
  4762  0040                     	ds	1
  4763  0041                     ??_get_calib_data:	
  4764                           
  4765                           ; 1 bytes @ 0x21
  4766  0041                     	ds	2
  4767  0043                     UIntToHexString@i:	
  4768  0043                     get_calib_data@calib_data:	
  4769                           ; 4 bytes @ 0x23
  4770                           
  4771                           
  4772                           ; 26 bytes @ 0x23
  4773  0043                     	ds	2
  4774  0045                     _compensate_temperature$2532:	
  4775                           
  4776                           ; 4 bytes @ 0x25
  4777  0045                     	ds	3
  4778  0048                     ___aodiv@counter:	
  4779                           
  4780                           ; 1 bytes @ 0x28
  4781  0048                     	ds	1
  4782  0049                     ___aodiv@sign:	
  4783                           
  4784                           ; 1 bytes @ 0x29
  4785  0049                     	ds	1
  4786  004A                     ___aodiv@quotient:	
  4787                           
  4788                           ; 8 bytes @ 0x2A
  4789  004A                     	ds	3
  4790  004D                     compensate_temperature@temperature_max:	
  4791                           
  4792                           ; 4 bytes @ 0x2D
  4793  004D                     	ds	2
  4794  004F                     bme280_set_regs@temp_len:	
  4795                           
  4796                           ; 2 bytes @ 0x2F
  4797  004F                     	ds	2
  4798  0051                     bme280_set_regs@reg_addr_cnt:	
  4799  0051                     compensate_temperature@var1:	
  4800                           ; 1 bytes @ 0x31
  4801                           
  4802                           
  4803                           ; 4 bytes @ 0x31
  4804  0051                     	ds	1
  4805  0052                     ?_compensate_pressure:	
  4806  0052                     bme280_set_regs@rslt:	
  4807                           ; 4 bytes @ 0x32
  4808                           
  4809  0052                     compensate_pressure@calib_data:	
  4810                           ; 1 bytes @ 0x32
  4811                           
  4812                           
  4813                           ; 1 bytes @ 0x32
  4814  0052                     	ds	1
  4815  0053                     bme280_set_regs@reg_addr:	
  4816                           
  4817                           ; 1 bytes @ 0x33
  4818  0053                     	ds	1
  4819  0054                     ??_bme280_soft_reset:	
  4820                           
  4821                           ; 1 bytes @ 0x34
  4822  0054                     	ds	1
  4823  0055                     compensate_temperature@uncomp_data:	
  4824                           
  4825                           ; 1 bytes @ 0x35
  4826  0055                     	ds	1
  4827  0056                     ??_compensate_pressure:	
  4828  0056                     compensate_temperature@var2:	
  4829                           ; 1 bytes @ 0x36
  4830                           
  4831                           
  4832                           ; 4 bytes @ 0x36
  4833  0056                     	ds	1
  4834  0057                     bme280_soft_reset@soft_rst_cmd:	
  4835                           
  4836                           ; 1 bytes @ 0x37
  4837  0057                     	ds	1
  4838  0058                     bme280_soft_reset@rslt:	
  4839                           
  4840                           ; 1 bytes @ 0x38
  4841  0058                     	ds	1
  4842  0059                     bme280_soft_reset@reg_addr:	
  4843                           
  4844                           ; 1 bytes @ 0x39
  4845  0059                     	ds	1
  4846  005A                     bme280_soft_reset@dev:	
  4847  005A                     compensate_temperature@temperature:	
  4848                           ; 1 bytes @ 0x3A
  4849                           
  4850                           
  4851                           ; 4 bytes @ 0x3A
  4852  005A                     	ds	4
  4853  005E                     get_calib_data@rslt:	
  4854                           
  4855                           ; 1 bytes @ 0x3E
  4856  005E                     	ds	1
  4857  005F                     get_calib_data@dev:	
  4858                           
  4859                           ; 1 bytes @ 0x3F
  4860  005F                     	ds	1
  4861  0060                     ??_bme280_init:	
  4862                           
  4863                           ; 1 bytes @ 0x40
  4864  0060                     	ds	2
  4865  0062                     bme280_init@try_count:	
  4866                           
  4867                           ; 1 bytes @ 0x42
  4868  0062                     	ds	1
  4869  0063                     bme280_init@chip_id:	
  4870                           
  4871                           ; 1 bytes @ 0x43
  4872  0063                     	ds	1
  4873  0064                     bme280_init@rslt:	
  4874                           
  4875                           ; 1 bytes @ 0x44
  4876  0064                     	ds	1
  4877  0065                     bme280_init@dev:	
  4878                           
  4879                           ; 1 bytes @ 0x45
  4880  0065                     	ds	11
  4881                           
  4882                           	psect	maintext
  4883  0071                     __pmaintext:	
  4884 ;;
  4885 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  4886 ;;
  4887 ;; *************** function _main *****************
  4888 ;; Defined at:
  4889 ;;		line 810 in file "main.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  i               2   46[BANK2 ] int 
  4894 ;;  convertedNum   16   27[BANK2 ] unsigned char [16]
  4895 ;;  sensor_data    12   48[BANK2 ] struct bme280_data
  4896 ;;  index           2   60[BANK2 ] int 
  4897 ;;  end             2   44[BANK2 ] int 
  4898 ;;  env_sensor     51    0[BANK3 ] struct bme280_dev
  4899 ;;  env_sensor_s    1    0        char 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      void 
  4902 ;; Registers used:
  4903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : B1F/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Locals:         0       0       0      35      51       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Temps:          0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Totals:         0       0       0      40      51       0       0       0       0       0       0       0       
      +0       0
  4913 ;;Total ram usage:       91 bytes
  4914 ;; Hardware stack levels required when called:   10
  4915 ;; This function calls:
  4916 ;;		_ClearString
  4917 ;;		_FlashError
  4918 ;;		_Insert
  4919 ;;		_InsertString
  4920 ;;		_IntToString
  4921 ;;		_SYSTEM_Initialize
  4922 ;;		_SetupGPS
  4923 ;;		_TMR0_SetInterruptHandler
  4924 ;;		_TransmitString
  4925 ;;		_UIntToHexString
  4926 ;;		_bme280_get_sensor_data
  4927 ;;		_bme280_init
  4928 ;;		_crc16
  4929 ;;		_strlen
  4930 ;; This function is called by:
  4931 ;;		Startup code after reset
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           
  4936                           ;psect for function _main
  4937  0071                     _main:	
  4938                           
  4939                           ;main.c: 813:     SYSTEM_Initialize();
  4940                           
  4941                           ;incstack = 0
  4942                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4943  0071  319A  22B5  3180   	fcall	_SYSTEM_Initialize
  4944                           
  4945                           ;main.c: 814:     (INTCONbits.GIE = 1);
  4946  0074  178B               	bsf	11,7	;volatile
  4947                           
  4948                           ;main.c: 815:     TMR0_SetInterruptHandler(TimerISR);
  4949  0075  30AB               	movlw	low _TimerISR
  4950  0076  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4951  0077  301A               	movlw	high _TimerISR
  4952  0078  00F6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4953  0079  319A  2282  3180   	fcall	_TMR0_SetInterruptHandler
  4954                           
  4955                           ;main.c: 821:     env_sensor.dev_id = 0x77;
  4956  007C  3077               	movlw	119
  4957  007D  0022               	movlb	2	; select bank2
  4958  007E  00B6               	movwf	??_main^(0+256)
  4959  007F  0836               	movf	??_main^(0+256),w
  4960  0080  0023               	movlb	3	; select bank3
  4961  0081  00A1               	movwf	(main@env_sensor^(0+384)+1)
  4962                           
  4963                           ;main.c: 822:     env_sensor.intf = BME280_I2C_INTF;
  4964  0082  01A2               	clrf	(main@env_sensor^(0+384)+2)
  4965  0083  0AA2               	incf	(main@env_sensor^(0+384)+2),f
  4966                           
  4967                           ;main.c: 823:     env_sensor.read = ReadEnvSensor;
  4968  0084  30C0               	movlw	low _ReadEnvSensor
  4969  0085  00A3               	movwf	(low ((main@env_sensor| (0+256)+3)))^(0+128)
  4970  0086  301D               	movlw	high _ReadEnvSensor
  4971  0087  00A4               	movwf	((low ((main@env_sensor| (0+256)+3)))^(0+128)+1)
  4972                           
  4973                           ;main.c: 824:     env_sensor.write = WriteEnvSensor;
  4974  0088  3054               	movlw	low _WriteEnvSensor
  4975  0089  00A5               	movwf	(low ((main@env_sensor| (0+256)+5)))^(0+128)
  4976  008A  3010               	movlw	high _WriteEnvSensor
  4977  008B  00A6               	movwf	((low ((main@env_sensor| (0+256)+5)))^(0+128)+1)
  4978                           
  4979                           ;main.c: 825:     env_sensor.delay_ms = Sleep;
  4980  008C  302F               	movlw	low _Sleep
  4981  008D  00A7               	movwf	(low ((main@env_sensor| (0+256)+7)))^(0+128)
  4982  008E  301E               	movlw	high _Sleep
  4983  008F  00A8               	movwf	((low ((main@env_sensor| (0+256)+7)))^(0+128)+1)
  4984                           
  4985                           ;main.c: 827:     ClearString(messages[0]);
  4986  0090  086B               	movf	_messages^(0+384),w
  4987  0091  0020               	movlb	0	; select bank0
  4988  0092  00A2               	movwf	ClearString@str
  4989  0093  3003               	movlw	3
  4990  0094  00A3               	movwf	ClearString@str+1
  4991  0095  319B  23BB  3180   	fcall	_ClearString
  4992                           
  4993                           ;main.c: 828:     ClearString(messages[1]);
  4994  0098  0023               	movlb	3	; select bank3
  4995  0099  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  4996  009A  0020               	movlb	0	; select bank0
  4997  009B  00A2               	movwf	ClearString@str
  4998  009C  3003               	movlw	3
  4999  009D  00A3               	movwf	ClearString@str+1
  5000  009E  319B  23BB  3180   	fcall	_ClearString
  5001  00A1  30A0               	movlw	(low (main@env_sensor| (0+256)))& (0+255)
  5002  00A2  3191  21F1  3180   	fcall	_bme280_init
  5003                           
  5004                           ;main.c: 833:     SetupGPS();
  5005  00A5  3191  213D  3180   	fcall	_SetupGPS
  5006  00A8                     l5258:	
  5007                           
  5008                           ;main.c: 847:         {;main.c: 849:             struct bme280_data sensor_data;;main.c:
      +                           850:             bme280_get_sensor_data(0x07, &sensor_data, &env_sensor);
  5009  00A8  3050               	movlw	(low (main@sensor_data| (0+256)))& (0+255)
  5010  00A9  0022               	movlb	2	; select bank2
  5011  00AA  00B6               	movwf	??_main^(0+256)
  5012  00AB  0836               	movf	??_main^(0+256),w
  5013  00AC  0021               	movlb	1	; select bank1
  5014  00AD  00EB               	movwf	bme280_get_sensor_data@comp_data^(0+128)
  5015  00AE  30A0               	movlw	(low (main@env_sensor| (0+256)))& (0+255)
  5016  00AF  0022               	movlb	2	; select bank2
  5017  00B0  00B7               	movwf	(??_main+1)^(0+256)
  5018  00B1  0837               	movf	(??_main+1)^(0+256),w
  5019  00B2  0021               	movlb	1	; select bank1
  5020  00B3  00EC               	movwf	bme280_get_sensor_data@dev^(0+128)
  5021  00B4  3007               	movlw	7
  5022  00B5  3191  218F  3180   	fcall	_bme280_get_sensor_data
  5023                           
  5024                           ;main.c: 851:             ClearString(messages[0]);
  5025  00B8  0023               	movlb	3	; select bank3
  5026  00B9  086B               	movf	_messages^(0+384),w
  5027  00BA  0020               	movlb	0	; select bank0
  5028  00BB  00A2               	movwf	ClearString@str
  5029  00BC  3003               	movlw	3
  5030  00BD  00A3               	movwf	ClearString@str+1
  5031  00BE  319B  23BB  3180   	fcall	_ClearString
  5032                           
  5033                           ;main.c: 852:             ClearString(messages[1]);
  5034  00C1  0023               	movlb	3	; select bank3
  5035  00C2  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  5036  00C3  0020               	movlb	0	; select bank0
  5037  00C4  00A2               	movwf	ClearString@str
  5038  00C5  3003               	movlw	3
  5039  00C6  00A3               	movwf	ClearString@str+1
  5040  00C7  319B  23BB  3180   	fcall	_ClearString
  5041                           
  5042                           ;main.c: 855:             char convertedNumber[16] = {'\0'};
  5043  00CA  303B               	movlw	low main@convertedNumber
  5044  00CB  0086               	movwf	6
  5045  00CC  3001               	movlw	high main@convertedNumber
  5046  00CD  0087               	movwf	7
  5047  00CE  3010               	movlw	16
  5048  00CF  0022               	movlb	2	; select bank2
  5049  00D0  00B6               	movwf	??_main^(0+256)
  5050  00D1  3000               	movlw	0
  5051  00D2                     u5510:	
  5052  00D2  001E               	movwi fsr1++
  5053  00D3  0BB6               	decfsz	??_main^(0+256),f
  5054  00D4  28D2               	goto	u5510
  5055                           
  5056                           ;main.c: 857:             IntToString(sensor_data.temperature, convertedNumber);
  5057  00D5  0855               	movf	((main@sensor_data+1)^(0+256)+4),w
  5058  00D6  0020               	movlb	0	; select bank0
  5059  00D7  00B5               	movwf	IntToString@n+1
  5060  00D8  0022               	movlb	2	; select bank2
  5061  00D9  0854               	movf	(main@sensor_data^(0+256)+4),w
  5062  00DA  0020               	movlb	0	; select bank0
  5063  00DB  00B4               	movwf	IntToString@n
  5064  00DC  303B               	movlw	low main@convertedNumber
  5065  00DD  00B6               	movwf	IntToString@dest
  5066  00DE  3001               	movlw	high main@convertedNumber
  5067  00DF  00B7               	movwf	IntToString@dest+1
  5068  00E0  3187  278F  3180   	fcall	_IntToString
  5069                           
  5070                           ;main.c: 858:             int index = strlen(messages[1]);
  5071  00E3  0023               	movlb	3	; select bank3
  5072  00E4  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  5073  00E5  00F5               	movwf	strlen@s
  5074  00E6  3003               	movlw	3
  5075  00E7  00F6               	movwf	strlen@s+1
  5076  00E8  319B  2324  3180   	fcall	_strlen
  5077  00EB  0876               	movf	?_strlen+1,w
  5078  00EC  0022               	movlb	2	; select bank2
  5079  00ED  00DD               	movwf	(main@index+1)^(0+256)
  5080  00EE  0875               	movf	?_strlen,w
  5081  00EF  00DC               	movwf	main@index^(0+256)
  5082                           
  5083                           ;main.c: 859:             index = InsertString(messages[1], convertedNumber, index, 70);
  5084  00F0  303B               	movlw	low main@convertedNumber
  5085  00F1  0020               	movlb	0	; select bank0
  5086  00F2  00A8               	movwf	InsertString@src
  5087  00F3  3001               	movlw	high main@convertedNumber
  5088  00F4  00A9               	movwf	InsertString@src+1
  5089  00F5  0022               	movlb	2	; select bank2
  5090  00F6  085D               	movf	(main@index+1)^(0+256),w
  5091  00F7  0020               	movlb	0	; select bank0
  5092  00F8  00AB               	movwf	InsertString@index+1
  5093  00F9  0022               	movlb	2	; select bank2
  5094  00FA  085C               	movf	main@index^(0+256),w
  5095  00FB  0020               	movlb	0	; select bank0
  5096  00FC  00AA               	movwf	InsertString@index
  5097  00FD  3046               	movlw	70
  5098  00FE  00AC               	movwf	InsertString@destLimit
  5099  00FF  3000               	movlw	0
  5100  0100  00AD               	movwf	InsertString@destLimit+1
  5101  0101  0023               	movlb	3	; select bank3
  5102  0102  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  5103  0103  3190  209E  3180   	fcall	_InsertString
  5104  0106  0829               	movf	?_InsertString+1,w
  5105  0107  0022               	movlb	2	; select bank2
  5106  0108  00DD               	movwf	(main@index+1)^(0+256)
  5107  0109  0020               	movlb	0	; select bank0
  5108  010A  0828               	movf	?_InsertString,w
  5109  010B  0022               	movlb	2	; select bank2
  5110  010C  00DC               	movwf	main@index^(0+256)
  5111                           
  5112                           ;main.c: 860:             index = Insert(messages[1], ',', index, 70);
  5113  010D  302C               	movlw	44
  5114  010E  00B6               	movwf	??_main^(0+256)
  5115  010F  0836               	movf	??_main^(0+256),w
  5116  0110  0020               	movlb	0	; select bank0
  5117  0111  00A0               	movwf	Insert@src
  5118  0112  0022               	movlb	2	; select bank2
  5119  0113  085D               	movf	(main@index+1)^(0+256),w
  5120  0114  0020               	movlb	0	; select bank0
  5121  0115  00A2               	movwf	Insert@index+1
  5122  0116  0022               	movlb	2	; select bank2
  5123  0117  085C               	movf	main@index^(0+256),w
  5124  0118  0020               	movlb	0	; select bank0
  5125  0119  00A1               	movwf	Insert@index
  5126  011A  3046               	movlw	70
  5127  011B  00A3               	movwf	Insert@destLimit
  5128  011C  3000               	movlw	0
  5129  011D  00A4               	movwf	Insert@destLimit+1
  5130  011E  0023               	movlb	3	; select bank3
  5131  011F  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  5132  0120  3192  22C3  3180   	fcall	_Insert
  5133  0123  0821               	movf	?_Insert+1,w
  5134  0124  0022               	movlb	2	; select bank2
  5135  0125  00DD               	movwf	(main@index+1)^(0+256)
  5136  0126  0020               	movlb	0	; select bank0
  5137  0127  0820               	movf	?_Insert,w
  5138  0128  0022               	movlb	2	; select bank2
  5139  0129  00DC               	movwf	main@index^(0+256)
  5140                           
  5141                           ;main.c: 861:             ClearString(convertedNumber);
  5142  012A  303B               	movlw	low main@convertedNumber
  5143  012B  0020               	movlb	0	; select bank0
  5144  012C  00A2               	movwf	ClearString@str
  5145  012D  3001               	movlw	high main@convertedNumber
  5146  012E  00A3               	movwf	ClearString@str+1
  5147  012F  319B  23BB  3180   	fcall	_ClearString
  5148                           
  5149                           ;main.c: 862:             IntToString(sensor_data.pressure, convertedNumber);
  5150  0132  0022               	movlb	2	; select bank2
  5151  0133  0851               	movf	(main@sensor_data+1)^(0+256),w
  5152  0134  0020               	movlb	0	; select bank0
  5153  0135  00B5               	movwf	IntToString@n+1
  5154  0136  0022               	movlb	2	; select bank2
  5155  0137  0850               	movf	main@sensor_data^(0+256),w
  5156  0138  0020               	movlb	0	; select bank0
  5157  0139  00B4               	movwf	IntToString@n
  5158  013A  303B               	movlw	low main@convertedNumber
  5159  013B  00B6               	movwf	IntToString@dest
  5160  013C  3001               	movlw	high main@convertedNumber
  5161  013D  00B7               	movwf	IntToString@dest+1
  5162  013E  3187  278F  3180   	fcall	_IntToString
  5163                           
  5164                           ;main.c: 863:             index = InsertString(messages[1], convertedNumber, index, 70);
  5165  0141  303B               	movlw	low main@convertedNumber
  5166  0142  00A8               	movwf	InsertString@src
  5167  0143  3001               	movlw	high main@convertedNumber
  5168  0144  00A9               	movwf	InsertString@src+1
  5169  0145  0022               	movlb	2	; select bank2
  5170  0146  085D               	movf	(main@index+1)^(0+256),w
  5171  0147  0020               	movlb	0	; select bank0
  5172  0148  00AB               	movwf	InsertString@index+1
  5173  0149  0022               	movlb	2	; select bank2
  5174  014A  085C               	movf	main@index^(0+256),w
  5175  014B  0020               	movlb	0	; select bank0
  5176  014C  00AA               	movwf	InsertString@index
  5177  014D  3046               	movlw	70
  5178  014E  00AC               	movwf	InsertString@destLimit
  5179  014F  3000               	movlw	0
  5180  0150  00AD               	movwf	InsertString@destLimit+1
  5181  0151  0023               	movlb	3	; select bank3
  5182  0152  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  5183  0153  3190  209E  3180   	fcall	_InsertString
  5184  0156  0829               	movf	?_InsertString+1,w
  5185  0157  0022               	movlb	2	; select bank2
  5186  0158  00DD               	movwf	(main@index+1)^(0+256)
  5187  0159  0020               	movlb	0	; select bank0
  5188  015A  0828               	movf	?_InsertString,w
  5189  015B  0022               	movlb	2	; select bank2
  5190  015C  00DC               	movwf	main@index^(0+256)
  5191                           
  5192                           ;main.c: 864:             int end = index;
  5193  015D  085D               	movf	(main@index+1)^(0+256),w
  5194  015E  00CD               	movwf	(main@end+1)^(0+256)
  5195  015F  085C               	movf	main@index^(0+256),w
  5196  0160  00CC               	movwf	main@end^(0+256)
  5197                           
  5198                           ;main.c: 867:             index = InsertString(messages[0], "TEST,", 0, 70);
  5199  0161  30AA               	movlw	low (STR_11| (0+32768))
  5200  0162  0020               	movlb	0	; select bank0
  5201  0163  00A8               	movwf	InsertString@src
  5202  0164  3098               	movlw	high (STR_11| (0+32768))
  5203  0165  00A9               	movwf	InsertString@src+1
  5204  0166  3000               	movlw	0
  5205  0167  00AA               	movwf	InsertString@index
  5206  0168  00AB               	movwf	InsertString@index+1
  5207  0169  3046               	movlw	70
  5208  016A  00AC               	movwf	InsertString@destLimit
  5209  016B  3000               	movlw	0
  5210  016C  00AD               	movwf	InsertString@destLimit+1
  5211  016D  0023               	movlb	3	; select bank3
  5212  016E  086B               	movf	_messages^(0+384),w
  5213  016F  3190  209E  3180   	fcall	_InsertString
  5214  0172  0829               	movf	?_InsertString+1,w
  5215  0173  0022               	movlb	2	; select bank2
  5216  0174  00DD               	movwf	(main@index+1)^(0+256)
  5217  0175  0020               	movlb	0	; select bank0
  5218  0176  0828               	movf	?_InsertString,w
  5219  0177  0022               	movlb	2	; select bank2
  5220  0178  00DC               	movwf	main@index^(0+256)
  5221                           
  5222                           ;main.c: 868:             ClearString(convertedNumber);
  5223  0179  303B               	movlw	low main@convertedNumber
  5224  017A  0020               	movlb	0	; select bank0
  5225  017B  00A2               	movwf	ClearString@str
  5226  017C  3001               	movlw	high main@convertedNumber
  5227  017D  00A3               	movwf	ClearString@str+1
  5228  017E  319B  23BB  3180   	fcall	_ClearString
  5229                           
  5230                           ;main.c: 869:             IntToString(id, convertedNumber);
  5231  0181  0023               	movlb	3	; select bank3
  5232  0182  0854               	movf	(_id+1)^(0+384),w
  5233  0183  0020               	movlb	0	; select bank0
  5234  0184  00B5               	movwf	IntToString@n+1
  5235  0185  0023               	movlb	3	; select bank3
  5236  0186  0853               	movf	_id^(0+384),w
  5237  0187  0020               	movlb	0	; select bank0
  5238  0188  00B4               	movwf	IntToString@n
  5239  0189  303B               	movlw	low main@convertedNumber
  5240  018A  00B6               	movwf	IntToString@dest
  5241  018B  3001               	movlw	high main@convertedNumber
  5242  018C  00B7               	movwf	IntToString@dest+1
  5243  018D  3187  278F  3180   	fcall	_IntToString
  5244                           
  5245                           ;main.c: 870:             index = InsertString(messages[0], convertedNumber, index, 70);
  5246  0190  303B               	movlw	low main@convertedNumber
  5247  0191  00A8               	movwf	InsertString@src
  5248  0192  3001               	movlw	high main@convertedNumber
  5249  0193  00A9               	movwf	InsertString@src+1
  5250  0194  0022               	movlb	2	; select bank2
  5251  0195  085D               	movf	(main@index+1)^(0+256),w
  5252  0196  0020               	movlb	0	; select bank0
  5253  0197  00AB               	movwf	InsertString@index+1
  5254  0198  0022               	movlb	2	; select bank2
  5255  0199  085C               	movf	main@index^(0+256),w
  5256  019A  0020               	movlb	0	; select bank0
  5257  019B  00AA               	movwf	InsertString@index
  5258  019C  3046               	movlw	70
  5259  019D  00AC               	movwf	InsertString@destLimit
  5260  019E  3000               	movlw	0
  5261  019F  00AD               	movwf	InsertString@destLimit+1
  5262  01A0  0023               	movlb	3	; select bank3
  5263  01A1  086B               	movf	_messages^(0+384),w
  5264  01A2  3190  209E  3180   	fcall	_InsertString
  5265  01A5  0829               	movf	?_InsertString+1,w
  5266  01A6  0022               	movlb	2	; select bank2
  5267  01A7  00DD               	movwf	(main@index+1)^(0+256)
  5268  01A8  0020               	movlb	0	; select bank0
  5269  01A9  0828               	movf	?_InsertString,w
  5270  01AA  0022               	movlb	2	; select bank2
  5271  01AB  00DC               	movwf	main@index^(0+256)
  5272                           
  5273                           ;main.c: 871:             Insert(messages[0], ',', index, 70);
  5274  01AC  302C               	movlw	44
  5275  01AD  00B6               	movwf	??_main^(0+256)
  5276  01AE  0836               	movf	??_main^(0+256),w
  5277  01AF  0020               	movlb	0	; select bank0
  5278  01B0  00A0               	movwf	Insert@src
  5279  01B1  0022               	movlb	2	; select bank2
  5280  01B2  085D               	movf	(main@index+1)^(0+256),w
  5281  01B3  0020               	movlb	0	; select bank0
  5282  01B4  00A2               	movwf	Insert@index+1
  5283  01B5  0022               	movlb	2	; select bank2
  5284  01B6  085C               	movf	main@index^(0+256),w
  5285  01B7  0020               	movlb	0	; select bank0
  5286  01B8  00A1               	movwf	Insert@index
  5287  01B9  3046               	movlw	70
  5288  01BA  00A3               	movwf	Insert@destLimit
  5289  01BB  3000               	movlw	0
  5290  01BC  00A4               	movwf	Insert@destLimit+1
  5291  01BD  0023               	movlb	3	; select bank3
  5292  01BE  086B               	movf	_messages^(0+384),w
  5293  01BF  3192  22C3  3180   	fcall	_Insert
  5294                           
  5295                           ;main.c: 873:             UIntToHexString(crc16(messages, 2), checksum);
  5296  01C2  3002               	movlw	2
  5297  01C3  00AB               	movwf	crc16@segments
  5298  01C4  3000               	movlw	0
  5299  01C5  00AC               	movwf	crc16@segments+1
  5300  01C6  30EB               	movlw	(low (_messages| (0+256)))& (0+255)
  5301  01C7  319E  26E8  3180   	fcall	_crc16
  5302  01CA  082B               	movf	?_crc16,w
  5303  01CB  0022               	movlb	2	; select bank2
  5304  01CC  00B6               	movwf	??_main^(0+256)
  5305  01CD  0020               	movlb	0	; select bank0
  5306  01CE  082C               	movf	?_crc16+1,w
  5307  01CF  0022               	movlb	2	; select bank2
  5308  01D0  00B7               	movwf	(??_main^(0+256)+1)
  5309  01D1  01B8               	clrf	(??_main^(0+256)+2)
  5310  01D2  01B9               	clrf	(??_main^(0+256)+3)
  5311  01D3  0839               	movf	(??_main+3)^(0+256),w
  5312  01D4  0020               	movlb	0	; select bank0
  5313  01D5  00B7               	movwf	UIntToHexString@n+3
  5314  01D6  0022               	movlb	2	; select bank2
  5315  01D7  0838               	movf	(??_main+2)^(0+256),w
  5316  01D8  0020               	movlb	0	; select bank0
  5317  01D9  00B6               	movwf	UIntToHexString@n+2
  5318  01DA  0022               	movlb	2	; select bank2
  5319  01DB  0837               	movf	(??_main+1)^(0+256),w
  5320  01DC  0020               	movlb	0	; select bank0
  5321  01DD  00B5               	movwf	UIntToHexString@n+1
  5322  01DE  0022               	movlb	2	; select bank2
  5323  01DF  0836               	movf	??_main^(0+256),w
  5324  01E0  0020               	movlb	0	; select bank0
  5325  01E1  00B4               	movwf	UIntToHexString@n
  5326  01E2  30D5               	movlw	(low (_checksum| (0+256)))& (0+255)
  5327  01E3  0022               	movlb	2	; select bank2
  5328  01E4  00BA               	movwf	(??_main+4)^(0+256)
  5329  01E5  083A               	movf	(??_main+4)^(0+256),w
  5330  01E6  0020               	movlb	0	; select bank0
  5331  01E7  00B8               	movwf	UIntToHexString@dest
  5332  01E8  3193  23A7  3180   	fcall	_UIntToHexString
  5333                           
  5334                           ;main.c: 876:             InsertString(messages[0], "$$", 0, 70);
  5335  01EB  30BA               	movlw	low (STR_12| (0+32768))
  5336  01EC  00A8               	movwf	InsertString@src
  5337  01ED  3098               	movlw	high (STR_12| (0+32768))
  5338  01EE  00A9               	movwf	InsertString@src+1
  5339  01EF  3000               	movlw	0
  5340  01F0  00AA               	movwf	InsertString@index
  5341  01F1  00AB               	movwf	InsertString@index+1
  5342  01F2  3046               	movlw	70
  5343  01F3  00AC               	movwf	InsertString@destLimit
  5344  01F4  3000               	movlw	0
  5345  01F5  00AD               	movwf	InsertString@destLimit+1
  5346  01F6  0023               	movlb	3	; select bank3
  5347  01F7  086B               	movf	_messages^(0+384),w
  5348  01F8  3190  209E  3180   	fcall	_InsertString
  5349                           
  5350                           ;main.c: 878:             index = Insert(messages[1], '*', end, 70);
  5351  01FB  302A               	movlw	42
  5352  01FC  0022               	movlb	2	; select bank2
  5353  01FD  00B6               	movwf	??_main^(0+256)
  5354  01FE  0836               	movf	??_main^(0+256),w
  5355  01FF  0020               	movlb	0	; select bank0
  5356  0200  00A0               	movwf	Insert@src
  5357  0201  0022               	movlb	2	; select bank2
  5358  0202  084D               	movf	(main@end+1)^(0+256),w
  5359  0203  0020               	movlb	0	; select bank0
  5360  0204  00A2               	movwf	Insert@index+1
  5361  0205  0022               	movlb	2	; select bank2
  5362  0206  084C               	movf	main@end^(0+256),w
  5363  0207  0020               	movlb	0	; select bank0
  5364  0208  00A1               	movwf	Insert@index
  5365  0209  3046               	movlw	70
  5366  020A  00A3               	movwf	Insert@destLimit
  5367  020B  3000               	movlw	0
  5368  020C  00A4               	movwf	Insert@destLimit+1
  5369  020D  0023               	movlb	3	; select bank3
  5370  020E  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  5371  020F  3192  22C3  3180   	fcall	_Insert
  5372  0212  0821               	movf	?_Insert+1,w
  5373  0213  0022               	movlb	2	; select bank2
  5374  0214  00DD               	movwf	(main@index+1)^(0+256)
  5375  0215  0020               	movlb	0	; select bank0
  5376  0216  0820               	movf	?_Insert,w
  5377  0217  0022               	movlb	2	; select bank2
  5378  0218  00DC               	movwf	main@index^(0+256)
  5379                           
  5380                           ;main.c: 879:             index = InsertString(messages[1], checksum, index, 70);
  5381  0219  30D5               	movlw	low _checksum
  5382  021A  0020               	movlb	0	; select bank0
  5383  021B  00A8               	movwf	InsertString@src
  5384  021C  3001               	movlw	high _checksum
  5385  021D  00A9               	movwf	InsertString@src+1
  5386  021E  0022               	movlb	2	; select bank2
  5387  021F  085D               	movf	(main@index+1)^(0+256),w
  5388  0220  0020               	movlb	0	; select bank0
  5389  0221  00AB               	movwf	InsertString@index+1
  5390  0222  0022               	movlb	2	; select bank2
  5391  0223  085C               	movf	main@index^(0+256),w
  5392  0224  0020               	movlb	0	; select bank0
  5393  0225  00AA               	movwf	InsertString@index
  5394  0226  3046               	movlw	70
  5395  0227  00AC               	movwf	InsertString@destLimit
  5396  0228  3000               	movlw	0
  5397  0229  00AD               	movwf	InsertString@destLimit+1
  5398  022A  0023               	movlb	3	; select bank3
  5399  022B  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  5400  022C  3190  209E  3180   	fcall	_InsertString
  5401  022F  0829               	movf	?_InsertString+1,w
  5402  0230  0022               	movlb	2	; select bank2
  5403  0231  00DD               	movwf	(main@index+1)^(0+256)
  5404  0232  0020               	movlb	0	; select bank0
  5405  0233  0828               	movf	?_InsertString,w
  5406  0234  0022               	movlb	2	; select bank2
  5407  0235  00DC               	movwf	main@index^(0+256)
  5408                           
  5409                           ;main.c: 880:             index = Insert(messages[1], '\n', index, 70);
  5410  0236  300A               	movlw	10
  5411  0237  00B6               	movwf	??_main^(0+256)
  5412  0238  0836               	movf	??_main^(0+256),w
  5413  0239  0020               	movlb	0	; select bank0
  5414  023A  00A0               	movwf	Insert@src
  5415  023B  0022               	movlb	2	; select bank2
  5416  023C  085D               	movf	(main@index+1)^(0+256),w
  5417  023D  0020               	movlb	0	; select bank0
  5418  023E  00A2               	movwf	Insert@index+1
  5419  023F  0022               	movlb	2	; select bank2
  5420  0240  085C               	movf	main@index^(0+256),w
  5421  0241  0020               	movlb	0	; select bank0
  5422  0242  00A1               	movwf	Insert@index
  5423  0243  3046               	movlw	70
  5424  0244  00A3               	movwf	Insert@destLimit
  5425  0245  3000               	movlw	0
  5426  0246  00A4               	movwf	Insert@destLimit+1
  5427  0247  0023               	movlb	3	; select bank3
  5428  0248  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  5429  0249  3192  22C3  3180   	fcall	_Insert
  5430  024C  0821               	movf	?_Insert+1,w
  5431  024D  0022               	movlb	2	; select bank2
  5432  024E  00DD               	movwf	(main@index+1)^(0+256)
  5433  024F  0020               	movlb	0	; select bank0
  5434  0250  0820               	movf	?_Insert,w
  5435  0251  0022               	movlb	2	; select bank2
  5436  0252  00DC               	movwf	main@index^(0+256)
  5437                           
  5438                           ;main.c: 882:             id++;
  5439  0253  3001               	movlw	1
  5440  0254  0023               	movlb	3	; select bank3
  5441  0255  07D3               	addwf	_id^(0+384),f
  5442  0256  3000               	movlw	0
  5443  0257  3DD4               	addwfc	(_id+1)^(0+384),f
  5444  0258  0022               	movlb	2	; select bank2
  5445  0259  150C               	bsf	12,2	;volatile
  5446                           
  5447                           ;main.c: 885:             TransmitString(messages[0]);
  5448  025A  0023               	movlb	3	; select bank3
  5449  025B  086B               	movf	_messages^(0+384),w
  5450  025C  319D  2507  3180   	fcall	_TransmitString
  5451                           
  5452                           ;main.c: 886:             TransmitString(messages[1]);
  5453  025F  0023               	movlb	3	; select bank3
  5454  0260  086C               	movf	(low ((_messages| (0+256)+1)))^(0+128),w
  5455  0261  319D  2507  3180   	fcall	_TransmitString
  5456  0264  0022               	movlb	2	; select bank2
  5457  0265  110C               	bcf	12,2	;volatile
  5458                           
  5459                           ;main.c: 897:         for (int i = 0; i < 1000; i++)
  5460  0266  01CE               	clrf	main@i^(0+256)
  5461  0267  01CF               	clrf	(main@i+1)^(0+256)
  5462  0268                     l5320:	
  5463                           
  5464                           ;main.c: 898:         {;main.c: 899:             _delay((unsigned long)((5)*(4000000/400
      +                          0.0)));
  5465  0268  3007               	movlw	7
  5466  0269  0022               	movlb	2	; select bank2
  5467  026A  00B6               	movwf	??_main^(0+256)
  5468  026B  307D               	movlw	125
  5469  026C                     u5537:	
  5470  026C  0B89               	decfsz	9,f
  5471  026D  2A6C               	goto	u5537
  5472  026E  0BB6               	decfsz	??_main^(0+256),f
  5473  026F  2A6C               	goto	u5537
  5474                           
  5475                           ;main.c: 900:         }
  5476  0270  3001               	movlw	1
  5477  0271  0022               	movlb	2	; select bank2
  5478  0272  07CE               	addwf	main@i^(0+256),f
  5479  0273  3000               	movlw	0
  5480  0274  3DCF               	addwfc	(main@i+1)^(0+256),f
  5481  0275  084F               	movf	(main@i+1)^(0+256),w
  5482  0276  3A80               	xorlw	128
  5483  0277  00B6               	movwf	??_main^(0+256)
  5484  0278  3083               	movlw	131
  5485  0279  0236               	subwf	??_main^(0+256),w
  5486  027A  1D03               	skipz
  5487  027B  2A7E               	goto	u5525
  5488  027C  30E8               	movlw	232
  5489  027D  024E               	subwf	main@i^(0+256),w
  5490  027E                     u5525:	
  5491  027E  1803               	btfsc	3,0
  5492  027F  28A8               	goto	l5258
  5493  0280  2A68               	goto	l5320
  5494  0281                     __end_of_main:	
  5495                           
  5496                           	psect	text1
  5497  1EE8                     __ptext1:	
  5498 ;; *************** function _crc16 *****************
  5499 ;; Defined at:
  5500 ;;		line 315 in file "main.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  data            1    wreg     PTR PTR unsigned char 
  5503 ;;		 -> messages(2), 
  5504 ;;  segments        2   11[BANK0 ] int 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  data            1   15[BANK0 ] PTR PTR unsigned char 
  5507 ;;		 -> messages(2), 
  5508 ;;  i               2   18[BANK0 ] int 
  5509 ;;  crc             2   16[BANK0 ] unsigned short 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  2   11[BANK0 ] unsigned short 
  5512 ;; Registers used:
  5513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5514 ;; Tracked objects:
  5515 ;;		On entry : 1F/0
  5516 ;;		On exit  : 1F/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5519 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;Total ram usage:        9 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    4
  5526 ;; This function calls:
  5527 ;;		_crc16_update
  5528 ;;		_strlen
  5529 ;; This function is called by:
  5530 ;;		_main
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           
  5535                           ;psect for function _crc16
  5536  1EE8                     _crc16:	
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in _crc16: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5540                           ;crc16@data stored from wreg
  5541  1EE8  00AF               	movwf	crc16@data
  5542                           
  5543                           ;main.c: 315: uint16_t crc16(char** data, int segments);main.c: 316: {;main.c: 317:     
      +                          uint16_t crc = 0xFFFF;
  5544  1EE9  30FF               	movlw	255
  5545  1EEA  00B0               	movwf	crc16@crc
  5546  1EEB  30FF               	movlw	255
  5547  1EEC  00B1               	movwf	crc16@crc+1
  5548                           
  5549                           ;main.c: 318:     for (int i = 0; i < segments; i++)
  5550  1EED  01B2               	clrf	crc16@i
  5551  1EEE  01B3               	clrf	crc16@i+1
  5552  1EEF                     l5176:	
  5553  1EEF  0833               	movf	crc16@i+1,w
  5554  1EF0  3A80               	xorlw	128
  5555  1EF1  00AD               	movwf	??_crc16
  5556  1EF2  082C               	movf	crc16@segments+1,w
  5557  1EF3  3A80               	xorlw	128
  5558  1EF4  022D               	subwf	??_crc16,w
  5559  1EF5  1D03               	skipz
  5560  1EF6  2EF9               	goto	u5415
  5561  1EF7  082B               	movf	crc16@segments,w
  5562  1EF8  0232               	subwf	crc16@i,w
  5563  1EF9                     u5415:	
  5564  1EF9  1803               	btfsc	3,0
  5565  1EFA  2F26               	goto	l5178
  5566                           
  5567                           ;main.c: 319:     {;main.c: 320:         crc = crc16_update(data[i], strlen(data[i]), cr
      +                          c);
  5568  1EFB  0020               	movlb	0	; select bank0
  5569  1EFC  0832               	movf	crc16@i,w
  5570  1EFD  072F               	addwf	crc16@data,w
  5571  1EFE  00AD               	movwf	??_crc16
  5572  1EFF  082D               	movf	??_crc16,w
  5573  1F00  0086               	movwf	6
  5574  1F01  3001               	movlw	1	; select bank2/3
  5575  1F02  0087               	movwf	7
  5576  1F03  0801               	movf	1,w
  5577  1F04  00F5               	movwf	strlen@s
  5578  1F05  3003               	movlw	3
  5579  1F06  00F6               	movwf	strlen@s+1
  5580  1F07  319B  2324  319E   	fcall	_strlen
  5581  1F0A  0876               	movf	?_strlen+1,w
  5582  1F0B  00A3               	movwf	crc16_update@length+1
  5583  1F0C  0875               	movf	?_strlen,w
  5584  1F0D  00A2               	movwf	crc16_update@length
  5585  1F0E  0831               	movf	crc16@crc+1,w
  5586  1F0F  00A5               	movwf	crc16_update@wCrc+1
  5587  1F10  0830               	movf	crc16@crc,w
  5588  1F11  00A4               	movwf	crc16_update@wCrc
  5589  1F12  0832               	movf	crc16@i,w
  5590  1F13  072F               	addwf	crc16@data,w
  5591  1F14  00AE               	movwf	??_crc16+1
  5592  1F15  082E               	movf	??_crc16+1,w
  5593  1F16  0086               	movwf	6
  5594  1F17  3001               	movlw	1	; select bank2/3
  5595  1F18  0087               	movwf	7
  5596  1F19  0801               	movf	1,w
  5597  1F1A  319E  2669  319E   	fcall	_crc16_update
  5598  1F1D  0823               	movf	?_crc16_update+1,w
  5599  1F1E  00B1               	movwf	crc16@crc+1
  5600  1F1F  0822               	movf	?_crc16_update,w
  5601  1F20  00B0               	movwf	crc16@crc
  5602                           
  5603                           ;main.c: 321:     }
  5604  1F21  3001               	movlw	1
  5605  1F22  07B2               	addwf	crc16@i,f
  5606  1F23  3000               	movlw	0
  5607  1F24  3DB3               	addwfc	crc16@i+1,f
  5608  1F25  2EEF               	goto	l5176
  5609  1F26                     l5178:	
  5610                           
  5611                           ;main.c: 322:     return crc & 0xFFFF;
  5612  1F26  0020               	movlb	0	; select bank0
  5613  1F27  0831               	movf	crc16@crc+1,w
  5614  1F28  00AC               	movwf	?_crc16+1
  5615  1F29  0830               	movf	crc16@crc,w
  5616  1F2A  00AB               	movwf	?_crc16
  5617  1F2B  0008               	return
  5618  1F2C                     __end_of_crc16:	
  5619                           
  5620                           	psect	text2
  5621  1E69                     __ptext2:	
  5622 ;; *************** function _crc16_update *****************
  5623 ;; Defined at:
  5624 ;;		line 304 in file "main.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;  pData           1    wreg     PTR unsigned char 
  5627 ;;		 -> message_end(73), message_start(70), 
  5628 ;;  length          2    2[BANK0 ] int 
  5629 ;;  wCrc            2    4[BANK0 ] unsigned short 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  pData           1    9[BANK0 ] PTR unsigned char 
  5632 ;;		 -> message_end(73), message_start(70), 
  5633 ;;  i               1   10[BANK0 ] unsigned char 
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  2    2[BANK0 ] unsigned short 
  5636 ;; Registers used:
  5637 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5638 ;; Tracked objects:
  5639 ;;		On entry : 1F/0
  5640 ;;		On exit  : 1F/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5643 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5644 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;Total ram usage:        9 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    3
  5650 ;; This function calls:
  5651 ;;		Nothing
  5652 ;; This function is called by:
  5653 ;;		_crc16
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           
  5658                           ;psect for function _crc16_update
  5659  1E69                     _crc16_update:	
  5660                           
  5661                           ;incstack = 0
  5662                           ; Regs used in _crc16_update: [wreg+fsr1l+fsr1h+status,2+status,0]
  5663                           ;crc16_update@pData stored from wreg
  5664  1E69  00A9               	movwf	crc16_update@pData
  5665  1E6A                     l4746:	
  5666                           ;main.c: 304: uint16_t crc16_update(char* pData, int length, uint16_t wCrc);main.c: 305:
      +                           {;main.c: 306:     uint8_t i;;main.c: 307:     while (length--) {
  5667                           
  5668                           
  5669                           ;main.c: 307:     while (length--) {
  5670  1E6A  30FF               	movlw	255
  5671  1E6B  07A2               	addwf	crc16_update@length,f
  5672  1E6C  30FF               	movlw	255
  5673  1E6D  3DA3               	addwfc	crc16_update@length+1,f
  5674  1E6E  0A22               	incf	crc16_update@length,w
  5675  1E6F  1903               	btfsc	3,2
  5676  1E70  0A23               	incf	crc16_update@length+1,w
  5677  1E71  1903               	btfsc	3,2
  5678  1E72  2EA1               	goto	l4748
  5679                           
  5680                           ;main.c: 308:         wCrc ^= *(unsigned char *)pData++ << 8;
  5681  1E73  0829               	movf	crc16_update@pData,w
  5682  1E74  0086               	movwf	6
  5683  1E75  3003               	movlw	3	; select bank6/7
  5684  1E76  0087               	movwf	7
  5685  1E77  0801               	movf	1,w
  5686  1E78  00A6               	movwf	??_crc16_update
  5687  1E79  01A7               	clrf	??_crc16_update+1
  5688  1E7A  0826               	movf	??_crc16_update,w
  5689  1E7B  00A7               	movwf	??_crc16_update+1
  5690  1E7C  01A6               	clrf	??_crc16_update
  5691  1E7D  0826               	movf	??_crc16_update,w
  5692  1E7E  06A4               	xorwf	crc16_update@wCrc,f
  5693  1E7F  0827               	movf	??_crc16_update+1,w
  5694  1E80  06A5               	xorwf	crc16_update@wCrc+1,f
  5695  1E81  3001               	movlw	1
  5696  1E82  00A6               	movwf	??_crc16_update
  5697  1E83  0826               	movf	??_crc16_update,w
  5698  1E84  07A9               	addwf	crc16_update@pData,f
  5699                           
  5700                           ;main.c: 309:         for (i=0; i < 8; i++)
  5701  1E85  01AA               	clrf	crc16_update@i
  5702  1E86                     l729:	
  5703                           
  5704                           ;main.c: 310:             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
  5705  1E86  1BA5               	btfsc	crc16_update@wCrc+1,7
  5706  1E87  2E8C               	goto	l4742
  5707  1E88  3524               	lslf	crc16_update@wCrc,w
  5708  1E89  00A4               	movwf	crc16_update@wCrc
  5709  1E8A  0D25               	rlf	crc16_update@wCrc+1,w
  5710  1E8B  2E97               	goto	L1
  5711  1E8C                     l4742:	
  5712  1E8C  0825               	movf	crc16_update@wCrc+1,w
  5713  1E8D  00A7               	movwf	??_crc16_update+1
  5714  1E8E  0824               	movf	crc16_update@wCrc,w
  5715  1E8F  00A6               	movwf	??_crc16_update
  5716  1E90  35A6               	lslf	??_crc16_update,f
  5717  1E91  0DA7               	rlf	??_crc16_update+1,f
  5718  1E92  3021               	movlw	33
  5719  1E93  0626               	xorwf	??_crc16_update,w
  5720  1E94  00A4               	movwf	crc16_update@wCrc
  5721  1E95  3010               	movlw	16
  5722  1E96  0627               	xorwf	??_crc16_update+1,w
  5723  1E97                     L1:	
  5724  1E97  00A5               	movwf	crc16_update@wCrc+1
  5725  1E98  3001               	movlw	1
  5726  1E99  00A6               	movwf	??_crc16_update
  5727  1E9A  0826               	movf	??_crc16_update,w
  5728  1E9B  07AA               	addwf	crc16_update@i,f
  5729  1E9C  3008               	movlw	8
  5730  1E9D  022A               	subwf	crc16_update@i,w
  5731  1E9E  1803               	btfsc	3,0
  5732  1E9F  2E6A               	goto	l4746
  5733  1EA0  2E86               	goto	l729
  5734  1EA1                     l4748:	
  5735                           
  5736                           ;main.c: 312:     return wCrc;
  5737  1EA1  0825               	movf	crc16_update@wCrc+1,w
  5738  1EA2  00A3               	movwf	?_crc16_update+1
  5739  1EA3  0824               	movf	crc16_update@wCrc,w
  5740  1EA4  00A2               	movwf	?_crc16_update
  5741  1EA5  0008               	return
  5742  1EA6                     __end_of_crc16_update:	
  5743                           
  5744                           	psect	text3
  5745  11F1                     __ptext3:	
  5746 ;; *************** function _bme280_init *****************
  5747 ;; Defined at:
  5748 ;;		line 357 in file "BME280_driver/bme280.c"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;  dev             1    wreg     PTR struct bme280_dev
  5751 ;;		 -> main@env_sensor(51), 
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;  dev             1   69[BANK0 ] PTR struct bme280_dev
  5754 ;;		 -> main@env_sensor(51), 
  5755 ;;  rslt            1   68[BANK0 ] char 
  5756 ;;  chip_id         1   67[BANK0 ] unsigned char 
  5757 ;;  try_count       1   66[BANK0 ] unsigned char 
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  1    wreg      char 
  5760 ;; Registers used:
  5761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/3
  5764 ;;		On exit  : 1F/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;Total ram usage:        6 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    9
  5774 ;; This function calls:
  5775 ;;		_Sleep
  5776 ;;		_bme280_get_regs
  5777 ;;		_bme280_soft_reset
  5778 ;;		_get_calib_data
  5779 ;;		_null_ptr_check
  5780 ;; This function is called by:
  5781 ;;		_main
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           
  5786                           ;psect for function _bme280_init
  5787  11F1                     _bme280_init:	
  5788                           
  5789                           ;incstack = 0
  5790                           ; Regs used in _bme280_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5791                           ;bme280_init@dev stored from wreg
  5792  11F1  0020               	movlb	0	; select bank0
  5793  11F2  00E5               	movwf	bme280_init@dev
  5794                           
  5795                           ;BME280_driver/bme280.c: 357: int8_t bme280_init(struct bme280_dev *dev);BME280_driver/b
      +                          me280.c: 358: {;BME280_driver/bme280.c: 359:     int8_t rslt;;BME280_driver/bme280.c: 36
      +                          2:     uint8_t try_count = 5;
  5796  11F3  3005               	movlw	5
  5797  11F4  00E0               	movwf	??_bme280_init
  5798  11F5  0860               	movf	??_bme280_init,w
  5799  11F6  00E2               	movwf	bme280_init@try_count
  5800                           
  5801                           ;BME280_driver/bme280.c: 363:     uint8_t chip_id = 0;
  5802  11F7  01E3               	clrf	bme280_init@chip_id
  5803                           
  5804                           ;BME280_driver/bme280.c: 366:     rslt = null_ptr_check(dev);
  5805  11F8  0865               	movf	bme280_init@dev,w
  5806  11F9  319B  2396  3191   	fcall	_null_ptr_check
  5807  11FC  0020               	movlb	0	; select bank0
  5808  11FD  00E0               	movwf	??_bme280_init
  5809  11FE  0860               	movf	??_bme280_init,w
  5810  11FF  00E4               	movwf	bme280_init@rslt
  5811                           
  5812                           ;BME280_driver/bme280.c: 369:     if (rslt == 0)
  5813  1200  0864               	movf	bme280_init@rslt,w
  5814  1201  1903               	btfsc	3,2
  5815  1202  2A4C               	goto	l4910
  5816  1203  2A56               	goto	l53
  5817  1204                     l4892:	
  5818                           
  5819                           ;BME280_driver/bme280.c: 372:         {;BME280_driver/bme280.c: 374:             rslt = 
      +                          bme280_get_regs(0xD0, &chip_id, 1, dev);
  5820  1204  3063               	movlw	low bme280_init@chip_id
  5821  1205  00B8               	movwf	bme280_get_regs@reg_data
  5822  1206  3000               	movlw	high bme280_init@chip_id
  5823  1207  00B9               	movwf	bme280_get_regs@reg_data+1
  5824  1208  3001               	movlw	1
  5825  1209  00BA               	movwf	bme280_get_regs@len
  5826  120A  3000               	movlw	0
  5827  120B  00BB               	movwf	bme280_get_regs@len+1
  5828  120C  0865               	movf	bme280_init@dev,w
  5829  120D  00E0               	movwf	??_bme280_init
  5830  120E  0860               	movf	??_bme280_init,w
  5831  120F  00BC               	movwf	bme280_get_regs@dev
  5832  1210  30D0               	movlw	208
  5833  1211  319E  26A6  3191   	fcall	_bme280_get_regs
  5834  1214  00E1               	movwf	??_bme280_init+1
  5835  1215  0861               	movf	??_bme280_init+1,w
  5836  1216  00E4               	movwf	bme280_init@rslt
  5837                           
  5838                           ;BME280_driver/bme280.c: 377:             if ((rslt == 0) && (chip_id == 0x60))
  5839  1217  0864               	movf	bme280_init@rslt,w
  5840  1218  1D03               	btfss	3,2
  5841  1219  2A38               	goto	l4906
  5842  121A  3060               	movlw	96
  5843  121B  0663               	xorwf	bme280_init@chip_id,w
  5844  121C  1D03               	btfss	3,2
  5845  121D  2A38               	goto	l4906
  5846                           
  5847                           ;BME280_driver/bme280.c: 378:             {;BME280_driver/bme280.c: 379:                
      +                           dev->chip_id = chip_id;
  5848  121E  0863               	movf	bme280_init@chip_id,w
  5849  121F  00E0               	movwf	??_bme280_init
  5850  1220  0865               	movf	bme280_init@dev,w
  5851  1221  0086               	movwf	6
  5852  1222  3001               	movlw	1	; select bank2/3
  5853  1223  0087               	movwf	7
  5854  1224  0860               	movf	??_bme280_init,w
  5855  1225  0081               	movwf	1
  5856                           
  5857                           ;BME280_driver/bme280.c: 382:                 rslt = bme280_soft_reset(dev);
  5858  1226  0865               	movf	bme280_init@dev,w
  5859  1227  319D  25F6  3191   	fcall	_bme280_soft_reset
  5860  122A  00E0               	movwf	??_bme280_init
  5861  122B  0860               	movf	??_bme280_init,w
  5862  122C  00E4               	movwf	bme280_init@rslt
  5863                           
  5864                           ;BME280_driver/bme280.c: 383:                 if (rslt == 0)
  5865  122D  0864               	movf	bme280_init@rslt,w
  5866  122E  1D03               	btfss	3,2
  5867  122F  2A4F               	goto	l4912
  5868                           
  5869                           ;BME280_driver/bme280.c: 384:                 {;BME280_driver/bme280.c: 386:            
      +                                   rslt = get_calib_data(dev);
  5870  1230  0865               	movf	bme280_init@dev,w
  5871  1231  3190  200C  3191   	fcall	_get_calib_data
  5872  1234  00E0               	movwf	??_bme280_init
  5873  1235  0860               	movf	??_bme280_init,w
  5874  1236  00E4               	movwf	bme280_init@rslt
  5875  1237  2A4F               	goto	l4912
  5876  1238                     l4906:	
  5877                           
  5878                           ;BME280_driver/bme280.c: 392:             dev->delay_ms(1);
  5879  1238  3000               	movlw	0
  5880  1239  00F8               	movwf	Sleep@ms+3
  5881  123A  3000               	movlw	0
  5882  123B  00F7               	movwf	Sleep@ms+2
  5883  123C  3000               	movlw	0
  5884  123D  00F6               	movwf	Sleep@ms+1
  5885  123E  3001               	movlw	1
  5886  123F  00F5               	movwf	Sleep@ms
  5887  1240  0865               	movf	bme280_init@dev,w
  5888  1241  3E07               	addlw	7
  5889  1242  0086               	movwf	6
  5890  1243  3001               	movlw	1	; select bank2/3
  5891  1244  0087               	movwf	7
  5892  1245  3F41               	moviw [1]fsr1
  5893  1246  008A               	movwf	10
  5894  1247  3F40               	moviw [0]fsr1
  5895  1248  000A               	callw
  5896  1249  3191               	pagesel	$
  5897                           
  5898                           ;BME280_driver/bme280.c: 393:             --try_count;
  5899  124A  3001               	movlw	1
  5900  124B  02E2               	subwf	bme280_init@try_count,f
  5901  124C                     l4910:	
  5902                           
  5903                           ;BME280_driver/bme280.c: 371:         while (try_count)
  5904  124C  0862               	movf	bme280_init@try_count,w
  5905  124D  1D03               	btfss	3,2
  5906  124E  2A04               	goto	l4892
  5907  124F                     l4912:	
  5908                           
  5909                           ;BME280_driver/bme280.c: 397:         if (!try_count)
  5910  124F  0862               	movf	bme280_init@try_count,w
  5911  1250  1D03               	btfss	3,2
  5912  1251  2A56               	goto	l53
  5913                           
  5914                           ;BME280_driver/bme280.c: 398:         {;BME280_driver/bme280.c: 399:             rslt = 
      +                          -2;
  5915  1252  30FE               	movlw	254
  5916  1253  00E0               	movwf	??_bme280_init
  5917  1254  0860               	movf	??_bme280_init,w
  5918  1255  00E4               	movwf	bme280_init@rslt
  5919  1256                     l53:	
  5920                           ;BME280_driver/bme280.c: 401:     }
  5921                           
  5922                           
  5923                           ;BME280_driver/bme280.c: 403:     return rslt;
  5924  1256  0864               	movf	bme280_init@rslt,w
  5925  1257  0008               	return
  5926  1258                     __end_of_bme280_init:	
  5927                           
  5928                           	psect	text4
  5929  100C                     __ptext4:	
  5930 ;; *************** function _get_calib_data *****************
  5931 ;; Defined at:
  5932 ;;		line 1307 in file "BME280_driver/bme280.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  dev             1    wreg     PTR struct bme280_dev
  5935 ;;		 -> main@env_sensor(51), 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;  dev             1   63[BANK0 ] PTR struct bme280_dev
  5938 ;;		 -> main@env_sensor(51), 
  5939 ;;  calib_data     26   35[BANK0 ] unsigned char [26]
  5940 ;;  rslt            1   62[BANK0 ] char 
  5941 ;;  reg_addr        1    0        unsigned char 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      char 
  5944 ;; Registers used:
  5945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 1F/0
  5948 ;;		On exit  : 1F/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;Total ram usage:       31 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    8
  5958 ;; This function calls:
  5959 ;;		_bme280_get_regs
  5960 ;;		_parse_humidity_calib_data
  5961 ;;		_parse_temp_press_calib_data
  5962 ;; This function is called by:
  5963 ;;		_bme280_init
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           
  5968                           ;psect for function _get_calib_data
  5969  100C                     _get_calib_data:	
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _get_calib_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5973                           ;get_calib_data@dev stored from wreg
  5974  100C  00DF               	movwf	get_calib_data@dev
  5975                           
  5976                           ;BME280_driver/bme280.c: 1313:     uint8_t calib_data[26] = { 0 };
  5977  100D  3043               	movlw	low get_calib_data@calib_data
  5978  100E  0086               	movwf	6
  5979  100F  3000               	movlw	high get_calib_data@calib_data
  5980  1010  0087               	movwf	7
  5981  1011  301A               	movlw	26
  5982  1012  00C1               	movwf	??_get_calib_data
  5983  1013  3000               	movlw	0
  5984  1014                     u4570:	
  5985  1014  001E               	movwi fsr1++
  5986  1015  0BC1               	decfsz	??_get_calib_data,f
  5987  1016  2814               	goto	u4570
  5988                           
  5989                           ;BME280_driver/bme280.c: 1316:     rslt = bme280_get_regs(reg_addr, calib_data, 26, dev)
      +                          ;
  5990  1017  3043               	movlw	low get_calib_data@calib_data
  5991  1018  00B8               	movwf	bme280_get_regs@reg_data
  5992  1019  3000               	movlw	high get_calib_data@calib_data
  5993  101A  00B9               	movwf	bme280_get_regs@reg_data+1
  5994  101B  301A               	movlw	26
  5995  101C  00BA               	movwf	bme280_get_regs@len
  5996  101D  3000               	movlw	0
  5997  101E  00BB               	movwf	bme280_get_regs@len+1
  5998  101F  085F               	movf	get_calib_data@dev,w
  5999  1020  00C1               	movwf	??_get_calib_data
  6000  1021  0841               	movf	??_get_calib_data,w
  6001  1022  00BC               	movwf	bme280_get_regs@dev
  6002  1023  3088               	movlw	136
  6003  1024  319E  26A6  3190   	fcall	_bme280_get_regs
  6004  1027  00C2               	movwf	??_get_calib_data+1
  6005  1028  0842               	movf	??_get_calib_data+1,w
  6006  1029  00DE               	movwf	get_calib_data@rslt
  6007                           
  6008                           ;BME280_driver/bme280.c: 1317:     if (rslt == 0)
  6009  102A  085E               	movf	get_calib_data@rslt,w
  6010  102B  1D03               	btfss	3,2
  6011  102C  2852               	goto	l4550
  6012                           
  6013                           ;BME280_driver/bme280.c: 1318:     {;BME280_driver/bme280.c: 1322:         parse_temp_pr
      +                          ess_calib_data(calib_data, dev);
  6014  102D  085F               	movf	get_calib_data@dev,w
  6015  102E  00C1               	movwf	??_get_calib_data
  6016  102F  0841               	movf	??_get_calib_data,w
  6017  1030  00F5               	movwf	parse_temp_press_calib_data@dev
  6018  1031  3043               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  6019  1032  3186  269A  3190   	fcall	_parse_temp_press_calib_data
  6020                           
  6021                           ;BME280_driver/bme280.c: 1326:         rslt = bme280_get_regs(reg_addr, calib_data, 7, d
      +                          ev);
  6022  1035  3043               	movlw	low get_calib_data@calib_data
  6023  1036  00B8               	movwf	bme280_get_regs@reg_data
  6024  1037  3000               	movlw	high get_calib_data@calib_data
  6025  1038  00B9               	movwf	bme280_get_regs@reg_data+1
  6026  1039  3007               	movlw	7
  6027  103A  00BA               	movwf	bme280_get_regs@len
  6028  103B  3000               	movlw	0
  6029  103C  00BB               	movwf	bme280_get_regs@len+1
  6030  103D  085F               	movf	get_calib_data@dev,w
  6031  103E  00C1               	movwf	??_get_calib_data
  6032  103F  0841               	movf	??_get_calib_data,w
  6033  1040  00BC               	movwf	bme280_get_regs@dev
  6034  1041  30E1               	movlw	225
  6035  1042  319E  26A6  3190   	fcall	_bme280_get_regs
  6036  1045  00C2               	movwf	??_get_calib_data+1
  6037  1046  0842               	movf	??_get_calib_data+1,w
  6038  1047  00DE               	movwf	get_calib_data@rslt
  6039                           
  6040                           ;BME280_driver/bme280.c: 1327:         if (rslt == 0)
  6041  1048  085E               	movf	get_calib_data@rslt,w
  6042  1049  1D03               	btfss	3,2
  6043  104A  2852               	goto	l4550
  6044                           
  6045                           ;BME280_driver/bme280.c: 1328:         {;BME280_driver/bme280.c: 1332:             parse
      +                          _humidity_calib_data(calib_data, dev);
  6046  104B  085F               	movf	get_calib_data@dev,w
  6047  104C  00C1               	movwf	??_get_calib_data
  6048  104D  0841               	movf	??_get_calib_data,w
  6049  104E  00F5               	movwf	parse_humidity_calib_data@dev
  6050  104F  3043               	movlw	(low (get_calib_data@calib_data| 0))& (0+255)
  6051  1050  3195  2533         	fcall	_parse_humidity_calib_data
  6052  1052                     l4550:	
  6053                           
  6054                           ;BME280_driver/bme280.c: 1336:     return rslt;
  6055  1052  085E               	movf	get_calib_data@rslt,w
  6056  1053  0008               	return
  6057  1054                     __end_of_get_calib_data:	
  6058                           
  6059                           	psect	text5
  6060  069A                     __ptext5:	
  6061 ;; *************** function _parse_temp_press_calib_data *****************
  6062 ;; Defined at:
  6063 ;;		line 1358 in file "BME280_driver/bme280.c"
  6064 ;; Parameters:    Size  Location     Type
  6065 ;;  reg_data        1    wreg     PTR const unsigned char 
  6066 ;;		 -> get_calib_data@calib_data(26), 
  6067 ;;  dev             1    5[COMMON] PTR struct bme280_dev
  6068 ;;		 -> main@env_sensor(51), 
  6069 ;; Auto vars:     Size  Location     Type
  6070 ;;  reg_data        1    8[COMMON] PTR const unsigned char 
  6071 ;;		 -> get_calib_data@calib_data(26), 
  6072 ;;  calib_data      1    7[COMMON] PTR struct bme280_calib_
  6073 ;;		 -> env_sensor.calib_data(37), main@env_sensor(51), 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      void 
  6076 ;; Registers used:
  6077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6078 ;; Tracked objects:
  6079 ;;		On entry : 1F/0
  6080 ;;		On exit  : 1F/0
  6081 ;;		Unchanged: 1F/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6083 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;Total ram usage:        4 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    3
  6090 ;; This function calls:
  6091 ;;		Nothing
  6092 ;; This function is called by:
  6093 ;;		_get_calib_data
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           
  6098                           ;psect for function _parse_temp_press_calib_data
  6099  069A                     _parse_temp_press_calib_data:	
  6100                           
  6101                           ;incstack = 0
  6102                           ; Regs used in _parse_temp_press_calib_data: [wreg-fsr1h+status,2+status,0]
  6103                           ;parse_temp_press_calib_data@reg_data stored from wreg
  6104  069A  00F8               	movwf	parse_temp_press_calib_data@reg_data
  6105                           
  6106                           ;BME280_driver/bme280.c: 1358: static void parse_temp_press_calib_data(const uint8_t *re
      +                          g_data, struct bme280_dev *dev);BME280_driver/bme280.c: 1359: {;BME280_driver/bme280.c: 
      +                          1360:     struct bme280_calib_data *calib_data = &dev->calib_data;
  6107  069B  0875               	movf	parse_temp_press_calib_data@dev,w
  6108  069C  3E09               	addlw	9
  6109  069D  00F6               	movwf	??_parse_temp_press_calib_data
  6110  069E  0876               	movf	??_parse_temp_press_calib_data,w
  6111  069F  00F7               	movwf	parse_temp_press_calib_data@calib_data
  6112                           
  6113                           ;BME280_driver/bme280.c: 1362:     calib_data->dig_T1 = (((uint16_t)reg_data[1] << 8) | 
      +                          (uint16_t)reg_data[0]);
  6114  06A0  0A78               	incf	parse_temp_press_calib_data@reg_data,w
  6115  06A1  0084               	movwf	4
  6116  06A2  0185               	clrf	5
  6117  06A3  0800               	movf	0,w
  6118  06A4  00F6               	movwf	??_parse_temp_press_calib_data
  6119  06A5  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6120  06A6  0084               	movwf	4
  6121  06A7  0185               	clrf	5
  6122  06A8  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6123  06A9  0086               	movwf	6
  6124  06AA  3001               	movlw	1	; select bank2/3
  6125  06AB  0087               	movwf	7
  6126  06AC  0800               	movf	0,w
  6127  06AD  3FC0               	movwi [0]fsr1
  6128  06AE  0876               	movf	??_parse_temp_press_calib_data,w
  6129  06AF  3FC1               	movwi [1]fsr1
  6130                           
  6131                           ;BME280_driver/bme280.c: 1363:     calib_data->dig_T2 = (int16_t)(((uint16_t)reg_data[3]
      +                           << 8) | (uint16_t)reg_data[2]);
  6132  06B0  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6133  06B1  3E03               	addlw	3
  6134  06B2  0084               	movwf	4
  6135  06B3  0185               	clrf	5
  6136  06B4  0800               	movf	0,w
  6137  06B5  00F6               	movwf	??_parse_temp_press_calib_data
  6138  06B6  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6139  06B7  3E02               	addlw	2
  6140  06B8  0084               	movwf	4
  6141  06B9  0185               	clrf	5
  6142  06BA  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6143  06BB  3E02               	addlw	2
  6144  06BC  0086               	movwf	6
  6145  06BD  3001               	movlw	1	; select bank2/3
  6146  06BE  0087               	movwf	7
  6147  06BF  0800               	movf	0,w
  6148  06C0  3FC0               	movwi [0]fsr1
  6149  06C1  0876               	movf	??_parse_temp_press_calib_data,w
  6150  06C2  3FC1               	movwi [1]fsr1
  6151                           
  6152                           ;BME280_driver/bme280.c: 1364:     calib_data->dig_T3 = (int16_t)(((uint16_t)reg_data[5]
      +                           << 8) | (uint16_t)reg_data[4]);
  6153  06C3  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6154  06C4  3E05               	addlw	5
  6155  06C5  0084               	movwf	4
  6156  06C6  0185               	clrf	5
  6157  06C7  0800               	movf	0,w
  6158  06C8  00F6               	movwf	??_parse_temp_press_calib_data
  6159  06C9  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6160  06CA  3E04               	addlw	4
  6161  06CB  0084               	movwf	4
  6162  06CC  0185               	clrf	5
  6163  06CD  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6164  06CE  3E04               	addlw	4
  6165  06CF  0086               	movwf	6
  6166  06D0  3001               	movlw	1	; select bank2/3
  6167  06D1  0087               	movwf	7
  6168  06D2  0800               	movf	0,w
  6169  06D3  3FC0               	movwi [0]fsr1
  6170  06D4  0876               	movf	??_parse_temp_press_calib_data,w
  6171  06D5  3FC1               	movwi [1]fsr1
  6172                           
  6173                           ;BME280_driver/bme280.c: 1365:     calib_data->dig_P1 = (((uint16_t)reg_data[7] << 8) | 
      +                          (uint16_t)reg_data[6]);
  6174  06D6  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6175  06D7  3E07               	addlw	7
  6176  06D8  0084               	movwf	4
  6177  06D9  0185               	clrf	5
  6178  06DA  0800               	movf	0,w
  6179  06DB  00F6               	movwf	??_parse_temp_press_calib_data
  6180  06DC  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6181  06DD  3E06               	addlw	6
  6182  06DE  0084               	movwf	4
  6183  06DF  0185               	clrf	5
  6184  06E0  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6185  06E1  3E06               	addlw	6
  6186  06E2  0086               	movwf	6
  6187  06E3  3001               	movlw	1	; select bank2/3
  6188  06E4  0087               	movwf	7
  6189  06E5  0800               	movf	0,w
  6190  06E6  3FC0               	movwi [0]fsr1
  6191  06E7  0876               	movf	??_parse_temp_press_calib_data,w
  6192  06E8  3FC1               	movwi [1]fsr1
  6193                           
  6194                           ;BME280_driver/bme280.c: 1366:     calib_data->dig_P2 = (int16_t)(((uint16_t)reg_data[9]
      +                           << 8) | (uint16_t)reg_data[8]);
  6195  06E9  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6196  06EA  3E09               	addlw	9
  6197  06EB  0084               	movwf	4
  6198  06EC  0185               	clrf	5
  6199  06ED  0800               	movf	0,w
  6200  06EE  00F6               	movwf	??_parse_temp_press_calib_data
  6201  06EF  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6202  06F0  3E08               	addlw	8
  6203  06F1  0084               	movwf	4
  6204  06F2  0185               	clrf	5
  6205  06F3  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6206  06F4  3E08               	addlw	8
  6207  06F5  0086               	movwf	6
  6208  06F6  3001               	movlw	1	; select bank2/3
  6209  06F7  0087               	movwf	7
  6210  06F8  0800               	movf	0,w
  6211  06F9  3FC0               	movwi [0]fsr1
  6212  06FA  0876               	movf	??_parse_temp_press_calib_data,w
  6213  06FB  3FC1               	movwi [1]fsr1
  6214                           
  6215                           ;BME280_driver/bme280.c: 1367:     calib_data->dig_P3 = (int16_t)(((uint16_t)reg_data[11
      +                          ] << 8) | (uint16_t)reg_data[10]);
  6216  06FC  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6217  06FD  3E0B               	addlw	11
  6218  06FE  0084               	movwf	4
  6219  06FF  0185               	clrf	5
  6220  0700  0800               	movf	0,w
  6221  0701  00F6               	movwf	??_parse_temp_press_calib_data
  6222  0702  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6223  0703  3E0A               	addlw	10
  6224  0704  0084               	movwf	4
  6225  0705  0185               	clrf	5
  6226  0706  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6227  0707  3E0A               	addlw	10
  6228  0708  0086               	movwf	6
  6229  0709  3001               	movlw	1	; select bank2/3
  6230  070A  0087               	movwf	7
  6231  070B  0800               	movf	0,w
  6232  070C  3FC0               	movwi [0]fsr1
  6233  070D  0876               	movf	??_parse_temp_press_calib_data,w
  6234  070E  3FC1               	movwi [1]fsr1
  6235                           
  6236                           ;BME280_driver/bme280.c: 1368:     calib_data->dig_P4 = (int16_t)(((uint16_t)reg_data[13
      +                          ] << 8) | (uint16_t)reg_data[12]);
  6237  070F  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6238  0710  3E0D               	addlw	13
  6239  0711  0084               	movwf	4
  6240  0712  0185               	clrf	5
  6241  0713  0800               	movf	0,w
  6242  0714  00F6               	movwf	??_parse_temp_press_calib_data
  6243  0715  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6244  0716  3E0C               	addlw	12
  6245  0717  0084               	movwf	4
  6246  0718  0185               	clrf	5
  6247  0719  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6248  071A  3E0C               	addlw	12
  6249  071B  0086               	movwf	6
  6250  071C  3001               	movlw	1	; select bank2/3
  6251  071D  0087               	movwf	7
  6252  071E  0800               	movf	0,w
  6253  071F  3FC0               	movwi [0]fsr1
  6254  0720  0876               	movf	??_parse_temp_press_calib_data,w
  6255  0721  3FC1               	movwi [1]fsr1
  6256                           
  6257                           ;BME280_driver/bme280.c: 1369:     calib_data->dig_P5 = (int16_t)(((uint16_t)reg_data[15
      +                          ] << 8) | (uint16_t)reg_data[14]);
  6258  0722  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6259  0723  3E0F               	addlw	15
  6260  0724  0084               	movwf	4
  6261  0725  0185               	clrf	5
  6262  0726  0800               	movf	0,w
  6263  0727  00F6               	movwf	??_parse_temp_press_calib_data
  6264  0728  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6265  0729  3E0E               	addlw	14
  6266  072A  0084               	movwf	4
  6267  072B  0185               	clrf	5
  6268  072C  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6269  072D  3E0E               	addlw	14
  6270  072E  0086               	movwf	6
  6271  072F  3001               	movlw	1	; select bank2/3
  6272  0730  0087               	movwf	7
  6273  0731  0800               	movf	0,w
  6274  0732  3FC0               	movwi [0]fsr1
  6275  0733  0876               	movf	??_parse_temp_press_calib_data,w
  6276  0734  3FC1               	movwi [1]fsr1
  6277                           
  6278                           ;BME280_driver/bme280.c: 1370:     calib_data->dig_P6 = (int16_t)(((uint16_t)reg_data[17
      +                          ] << 8) | (uint16_t)reg_data[16]);
  6279  0735  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6280  0736  3E11               	addlw	17
  6281  0737  0084               	movwf	4
  6282  0738  0185               	clrf	5
  6283  0739  0800               	movf	0,w
  6284  073A  00F6               	movwf	??_parse_temp_press_calib_data
  6285  073B  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6286  073C  3E10               	addlw	16
  6287  073D  0084               	movwf	4
  6288  073E  0185               	clrf	5
  6289  073F  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6290  0740  3E10               	addlw	16
  6291  0741  0086               	movwf	6
  6292  0742  3001               	movlw	1	; select bank2/3
  6293  0743  0087               	movwf	7
  6294  0744  0800               	movf	0,w
  6295  0745  3FC0               	movwi [0]fsr1
  6296  0746  0876               	movf	??_parse_temp_press_calib_data,w
  6297  0747  3FC1               	movwi [1]fsr1
  6298                           
  6299                           ;BME280_driver/bme280.c: 1371:     calib_data->dig_P7 = (int16_t)(((uint16_t)reg_data[19
      +                          ] << 8) | (uint16_t)reg_data[18]);
  6300  0748  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6301  0749  3E13               	addlw	19
  6302  074A  0084               	movwf	4
  6303  074B  0185               	clrf	5
  6304  074C  0800               	movf	0,w
  6305  074D  00F6               	movwf	??_parse_temp_press_calib_data
  6306  074E  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6307  074F  3E12               	addlw	18
  6308  0750  0084               	movwf	4
  6309  0751  0185               	clrf	5
  6310  0752  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6311  0753  3E12               	addlw	18
  6312  0754  0086               	movwf	6
  6313  0755  3001               	movlw	1	; select bank2/3
  6314  0756  0087               	movwf	7
  6315  0757  0800               	movf	0,w
  6316  0758  3FC0               	movwi [0]fsr1
  6317  0759  0876               	movf	??_parse_temp_press_calib_data,w
  6318  075A  3FC1               	movwi [1]fsr1
  6319                           
  6320                           ;BME280_driver/bme280.c: 1372:     calib_data->dig_P8 = (int16_t)(((uint16_t)reg_data[21
      +                          ] << 8) | (uint16_t)reg_data[20]);
  6321  075B  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6322  075C  3E15               	addlw	21
  6323  075D  0084               	movwf	4
  6324  075E  0185               	clrf	5
  6325  075F  0800               	movf	0,w
  6326  0760  00F6               	movwf	??_parse_temp_press_calib_data
  6327  0761  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6328  0762  3E14               	addlw	20
  6329  0763  0084               	movwf	4
  6330  0764  0185               	clrf	5
  6331  0765  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6332  0766  3E14               	addlw	20
  6333  0767  0086               	movwf	6
  6334  0768  3001               	movlw	1	; select bank2/3
  6335  0769  0087               	movwf	7
  6336  076A  0800               	movf	0,w
  6337  076B  3FC0               	movwi [0]fsr1
  6338  076C  0876               	movf	??_parse_temp_press_calib_data,w
  6339  076D  3FC1               	movwi [1]fsr1
  6340                           
  6341                           ;BME280_driver/bme280.c: 1373:     calib_data->dig_P9 = (int16_t)(((uint16_t)reg_data[23
      +                          ] << 8) | (uint16_t)reg_data[22]);
  6342  076E  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6343  076F  3E17               	addlw	23
  6344  0770  0084               	movwf	4
  6345  0771  0185               	clrf	5
  6346  0772  0800               	movf	0,w
  6347  0773  00F6               	movwf	??_parse_temp_press_calib_data
  6348  0774  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6349  0775  3E16               	addlw	22
  6350  0776  0084               	movwf	4
  6351  0777  0185               	clrf	5
  6352  0778  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6353  0779  3E16               	addlw	22
  6354  077A  0086               	movwf	6
  6355  077B  3001               	movlw	1	; select bank2/3
  6356  077C  0087               	movwf	7
  6357  077D  0800               	movf	0,w
  6358  077E  3FC0               	movwi [0]fsr1
  6359  077F  0876               	movf	??_parse_temp_press_calib_data,w
  6360  0780  3FC1               	movwi [1]fsr1
  6361                           
  6362                           ;BME280_driver/bme280.c: 1374:     calib_data->dig_H1 = reg_data[25];
  6363  0781  0878               	movf	parse_temp_press_calib_data@reg_data,w
  6364  0782  3E19               	addlw	25
  6365  0783  0086               	movwf	6
  6366  0784  0187               	clrf	7
  6367  0785  0801               	movf	1,w
  6368  0786  00F6               	movwf	??_parse_temp_press_calib_data
  6369  0787  0877               	movf	parse_temp_press_calib_data@calib_data,w
  6370  0788  3E18               	addlw	24
  6371  0789  0086               	movwf	6
  6372  078A  3001               	movlw	1	; select bank2/3
  6373  078B  0087               	movwf	7
  6374  078C  0876               	movf	??_parse_temp_press_calib_data,w
  6375  078D  0081               	movwf	1
  6376  078E  0008               	return
  6377  078F                     __end_of_parse_temp_press_calib_data:	
  6378                           
  6379                           	psect	text6
  6380  1533                     __ptext6:	
  6381 ;; *************** function _parse_humidity_calib_data *****************
  6382 ;; Defined at:
  6383 ;;		line 1381 in file "BME280_driver/bme280.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  reg_data        1    wreg     PTR const unsigned char 
  6386 ;;		 -> get_calib_data@calib_data(26), 
  6387 ;;  dev             1    5[COMMON] PTR struct bme280_dev
  6388 ;;		 -> main@env_sensor(51), 
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  reg_data        1    9[BANK0 ] PTR const unsigned char 
  6391 ;;		 -> get_calib_data@calib_data(26), 
  6392 ;;  dig_H5_msb      2    6[BANK0 ] short 
  6393 ;;  dig_H5_lsb      2    4[BANK0 ] short 
  6394 ;;  dig_H4_msb      2    2[BANK0 ] short 
  6395 ;;  dig_H4_lsb      2    0[BANK0 ] short 
  6396 ;;  calib_data      1    8[BANK0 ] PTR struct bme280_calib_
  6397 ;;		 -> env_sensor.calib_data(37), main@env_sensor(51), 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  1    wreg      void 
  6400 ;; Registers used:
  6401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6402 ;; Tracked objects:
  6403 ;;		On entry : 1F/0
  6404 ;;		On exit  : 1F/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6407 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6409 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;Total ram usage:       14 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    3
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		_get_calib_data
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           
  6422                           ;psect for function _parse_humidity_calib_data
  6423  1533                     _parse_humidity_calib_data:	
  6424                           
  6425                           ;incstack = 0
  6426                           ; Regs used in _parse_humidity_calib_data: [wreg-fsr1h+status,2+status,0]
  6427                           ;parse_humidity_calib_data@reg_data stored from wreg
  6428  1533  00A9               	movwf	parse_humidity_calib_data@reg_data
  6429                           
  6430                           ;BME280_driver/bme280.c: 1381: static void parse_humidity_calib_data(const uint8_t *reg_
      +                          data, struct bme280_dev *dev);BME280_driver/bme280.c: 1382: {;BME280_driver/bme280.c: 13
      +                          83:     struct bme280_calib_data *calib_data = &dev->calib_data;
  6431  1534  0875               	movf	parse_humidity_calib_data@dev,w
  6432  1535  3E09               	addlw	9
  6433  1536  00F6               	movwf	??_parse_humidity_calib_data
  6434  1537  0876               	movf	??_parse_humidity_calib_data,w
  6435  1538  00A8               	movwf	parse_humidity_calib_data@calib_data
  6436                           
  6437                           ;BME280_driver/bme280.c: 1384:     int16_t dig_H4_lsb;;BME280_driver/bme280.c: 1385:    
      +                           int16_t dig_H4_msb;;BME280_driver/bme280.c: 1386:     int16_t dig_H5_lsb;;BME280_driver
      +                          /bme280.c: 1387:     int16_t dig_H5_msb;;BME280_driver/bme280.c: 1389:     calib_data->d
      +                          ig_H2 = (int16_t)(((uint16_t)reg_data[1] << 8) | (uint16_t)reg_data[0]);
  6438  1539  0A29               	incf	parse_humidity_calib_data@reg_data,w
  6439  153A  0084               	movwf	4
  6440  153B  0185               	clrf	5
  6441  153C  0800               	movf	0,w
  6442  153D  00F6               	movwf	??_parse_humidity_calib_data
  6443  153E  0829               	movf	parse_humidity_calib_data@reg_data,w
  6444  153F  0084               	movwf	4
  6445  1540  0185               	clrf	5
  6446  1541  0828               	movf	parse_humidity_calib_data@calib_data,w
  6447  1542  3E19               	addlw	25
  6448  1543  0086               	movwf	6
  6449  1544  3001               	movlw	1	; select bank2/3
  6450  1545  0087               	movwf	7
  6451  1546  0800               	movf	0,w
  6452  1547  3FC0               	movwi [0]fsr1
  6453  1548  0876               	movf	??_parse_humidity_calib_data,w
  6454  1549  3FC1               	movwi [1]fsr1
  6455                           
  6456                           ;BME280_driver/bme280.c: 1390:     calib_data->dig_H3 = reg_data[2];
  6457  154A  0829               	movf	parse_humidity_calib_data@reg_data,w
  6458  154B  3E02               	addlw	2
  6459  154C  0086               	movwf	6
  6460  154D  0187               	clrf	7
  6461  154E  0801               	movf	1,w
  6462  154F  00F6               	movwf	??_parse_humidity_calib_data
  6463  1550  0828               	movf	parse_humidity_calib_data@calib_data,w
  6464  1551  3E1B               	addlw	27
  6465  1552  0086               	movwf	6
  6466  1553  3001               	movlw	1	; select bank2/3
  6467  1554  0087               	movwf	7
  6468  1555  0876               	movf	??_parse_humidity_calib_data,w
  6469  1556  0081               	movwf	1
  6470                           
  6471                           ;BME280_driver/bme280.c: 1391:     dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
  6472  1557  0829               	movf	parse_humidity_calib_data@reg_data,w
  6473  1558  3E03               	addlw	3
  6474  1559  0086               	movwf	6
  6475  155A  0187               	clrf	7
  6476  155B  0801               	movf	1,w
  6477  155C  00F6               	movwf	??_parse_humidity_calib_data
  6478  155D  01F7               	clrf	??_parse_humidity_calib_data+1
  6479  155E  1BF6               	btfsc	??_parse_humidity_calib_data,7
  6480  155F  03F7               	decf	??_parse_humidity_calib_data+1,f
  6481  1560  0EF6               	swapf	??_parse_humidity_calib_data,f
  6482  1561  0EF7               	swapf	??_parse_humidity_calib_data+1,f
  6483  1562  30F0               	movlw	240
  6484  1563  05F7               	andwf	??_parse_humidity_calib_data+1,f
  6485  1564  0876               	movf	??_parse_humidity_calib_data,w
  6486  1565  390F               	andlw	15
  6487  1566  04F7               	iorwf	??_parse_humidity_calib_data+1,f
  6488  1567  30F0               	movlw	240
  6489  1568  05F6               	andwf	??_parse_humidity_calib_data,f
  6490  1569  0876               	movf	??_parse_humidity_calib_data,w
  6491  156A  00A2               	movwf	parse_humidity_calib_data@dig_H4_msb
  6492  156B  0877               	movf	??_parse_humidity_calib_data+1,w
  6493  156C  00A3               	movwf	parse_humidity_calib_data@dig_H4_msb+1
  6494                           
  6495                           ;BME280_driver/bme280.c: 1392:     dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
  6496  156D  0829               	movf	parse_humidity_calib_data@reg_data,w
  6497  156E  3E04               	addlw	4
  6498  156F  0086               	movwf	6
  6499  1570  0187               	clrf	7
  6500  1571  0801               	movf	1,w
  6501  1572  390F               	andlw	15
  6502  1573  00F6               	movwf	??_parse_humidity_calib_data
  6503  1574  01F7               	clrf	??_parse_humidity_calib_data+1
  6504  1575  0876               	movf	??_parse_humidity_calib_data,w
  6505  1576  00A0               	movwf	parse_humidity_calib_data@dig_H4_lsb
  6506  1577  0877               	movf	??_parse_humidity_calib_data+1,w
  6507  1578  00A1               	movwf	parse_humidity_calib_data@dig_H4_lsb+1
  6508                           
  6509                           ;BME280_driver/bme280.c: 1393:     calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
  6510  1579  0820               	movf	parse_humidity_calib_data@dig_H4_lsb,w
  6511  157A  0422               	iorwf	parse_humidity_calib_data@dig_H4_msb,w
  6512  157B  00F6               	movwf	??_parse_humidity_calib_data
  6513  157C  0821               	movf	parse_humidity_calib_data@dig_H4_lsb+1,w
  6514  157D  0423               	iorwf	parse_humidity_calib_data@dig_H4_msb+1,w
  6515  157E  00F7               	movwf	??_parse_humidity_calib_data+1
  6516  157F  0828               	movf	parse_humidity_calib_data@calib_data,w
  6517  1580  3E1C               	addlw	28
  6518  1581  0086               	movwf	6
  6519  1582  3001               	movlw	1	; select bank2/3
  6520  1583  0087               	movwf	7
  6521  1584  0876               	movf	??_parse_humidity_calib_data,w
  6522  1585  3FC0               	movwi [0]fsr1
  6523  1586  0877               	movf	??_parse_humidity_calib_data+1,w
  6524  1587  3FC1               	movwi [1]fsr1
  6525                           
  6526                           ;BME280_driver/bme280.c: 1394:     dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
  6527  1588  0829               	movf	parse_humidity_calib_data@reg_data,w
  6528  1589  3E05               	addlw	5
  6529  158A  0086               	movwf	6
  6530  158B  0187               	clrf	7
  6531  158C  0801               	movf	1,w
  6532  158D  00F6               	movwf	??_parse_humidity_calib_data
  6533  158E  01F7               	clrf	??_parse_humidity_calib_data+1
  6534  158F  1BF6               	btfsc	??_parse_humidity_calib_data,7
  6535  1590  03F7               	decf	??_parse_humidity_calib_data+1,f
  6536  1591  0EF6               	swapf	??_parse_humidity_calib_data,f
  6537  1592  0EF7               	swapf	??_parse_humidity_calib_data+1,f
  6538  1593  30F0               	movlw	240
  6539  1594  05F7               	andwf	??_parse_humidity_calib_data+1,f
  6540  1595  0876               	movf	??_parse_humidity_calib_data,w
  6541  1596  390F               	andlw	15
  6542  1597  04F7               	iorwf	??_parse_humidity_calib_data+1,f
  6543  1598  30F0               	movlw	240
  6544  1599  05F6               	andwf	??_parse_humidity_calib_data,f
  6545  159A  0876               	movf	??_parse_humidity_calib_data,w
  6546  159B  00A6               	movwf	parse_humidity_calib_data@dig_H5_msb
  6547  159C  0877               	movf	??_parse_humidity_calib_data+1,w
  6548  159D  00A7               	movwf	parse_humidity_calib_data@dig_H5_msb+1
  6549                           
  6550                           ;BME280_driver/bme280.c: 1395:     dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
  6551  159E  0829               	movf	parse_humidity_calib_data@reg_data,w
  6552  159F  3E04               	addlw	4
  6553  15A0  0086               	movwf	6
  6554  15A1  0187               	clrf	7
  6555  15A2  0801               	movf	1,w
  6556  15A3  00F6               	movwf	??_parse_humidity_calib_data
  6557  15A4  3004               	movlw	4
  6558  15A5                     u4395:	
  6559  15A5  36F6               	lsrf	??_parse_humidity_calib_data,f
  6560  15A6  0B89               	decfsz	9,f
  6561  15A7  2DA5               	goto	u4395
  6562  15A8  0876               	movf	??_parse_humidity_calib_data,w
  6563  15A9  00F7               	movwf	??_parse_humidity_calib_data+1
  6564  15AA  01F8               	clrf	??_parse_humidity_calib_data+2
  6565  15AB  0877               	movf	??_parse_humidity_calib_data+1,w
  6566  15AC  00A4               	movwf	parse_humidity_calib_data@dig_H5_lsb
  6567  15AD  0878               	movf	??_parse_humidity_calib_data+2,w
  6568  15AE  00A5               	movwf	parse_humidity_calib_data@dig_H5_lsb+1
  6569                           
  6570                           ;BME280_driver/bme280.c: 1396:     calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
  6571  15AF  0824               	movf	parse_humidity_calib_data@dig_H5_lsb,w
  6572  15B0  0426               	iorwf	parse_humidity_calib_data@dig_H5_msb,w
  6573  15B1  00F6               	movwf	??_parse_humidity_calib_data
  6574  15B2  0825               	movf	parse_humidity_calib_data@dig_H5_lsb+1,w
  6575  15B3  0427               	iorwf	parse_humidity_calib_data@dig_H5_msb+1,w
  6576  15B4  00F7               	movwf	??_parse_humidity_calib_data+1
  6577  15B5  0828               	movf	parse_humidity_calib_data@calib_data,w
  6578  15B6  3E1E               	addlw	30
  6579  15B7  0086               	movwf	6
  6580  15B8  3001               	movlw	1	; select bank2/3
  6581  15B9  0087               	movwf	7
  6582  15BA  0876               	movf	??_parse_humidity_calib_data,w
  6583  15BB  3FC0               	movwi [0]fsr1
  6584  15BC  0877               	movf	??_parse_humidity_calib_data+1,w
  6585  15BD  3FC1               	movwi [1]fsr1
  6586                           
  6587                           ;BME280_driver/bme280.c: 1397:     calib_data->dig_H6 = (int8_t)reg_data[6];
  6588  15BE  0829               	movf	parse_humidity_calib_data@reg_data,w
  6589  15BF  3E06               	addlw	6
  6590  15C0  0086               	movwf	6
  6591  15C1  0187               	clrf	7
  6592  15C2  0801               	movf	1,w
  6593  15C3  00F6               	movwf	??_parse_humidity_calib_data
  6594  15C4  0828               	movf	parse_humidity_calib_data@calib_data,w
  6595  15C5  3E20               	addlw	32
  6596  15C6  0086               	movwf	6
  6597  15C7  3001               	movlw	1	; select bank2/3
  6598  15C8  0087               	movwf	7
  6599  15C9  0876               	movf	??_parse_humidity_calib_data,w
  6600  15CA  0081               	movwf	1
  6601  15CB  0008               	return
  6602  15CC                     __end_of_parse_humidity_calib_data:	
  6603                           
  6604                           	psect	text7
  6605  1DF6                     __ptext7:	
  6606 ;; *************** function _bme280_soft_reset *****************
  6607 ;; Defined at:
  6608 ;;		line 631 in file "BME280_driver/bme280.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  dev             1    wreg     PTR const struct bme280_
  6611 ;;		 -> main@env_sensor(51), 
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;  dev             1   58[BANK0 ] PTR const struct bme280_
  6614 ;;		 -> main@env_sensor(51), 
  6615 ;;  reg_addr        1   57[BANK0 ] unsigned char 
  6616 ;;  rslt            1   56[BANK0 ] char 
  6617 ;;  soft_rst_cmd    1   55[BANK0 ] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  1    wreg      char 
  6620 ;; Registers used:
  6621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 1F/0
  6624 ;;		On exit  : 1F/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;Total ram usage:        7 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    8
  6634 ;; This function calls:
  6635 ;;		_Sleep
  6636 ;;		_bme280_set_regs
  6637 ;;		_null_ptr_check
  6638 ;; This function is called by:
  6639 ;;		_bme280_init
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           
  6644                           ;psect for function _bme280_soft_reset
  6645  1DF6                     _bme280_soft_reset:	
  6646                           
  6647                           ;incstack = 0
  6648                           ; Regs used in _bme280_soft_reset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6649                           ;bme280_soft_reset@dev stored from wreg
  6650  1DF6  00DA               	movwf	bme280_soft_reset@dev
  6651                           
  6652                           ;BME280_driver/bme280.c: 631: int8_t bme280_soft_reset(const struct bme280_dev *dev);BME
      +                          280_driver/bme280.c: 632: {;BME280_driver/bme280.c: 633:     int8_t rslt;;BME280_driver/
      +                          bme280.c: 634:     uint8_t reg_addr = 0xE0;
  6653  1DF7  30E0               	movlw	224
  6654  1DF8  00D4               	movwf	??_bme280_soft_reset
  6655  1DF9  0854               	movf	??_bme280_soft_reset,w
  6656  1DFA  00D9               	movwf	bme280_soft_reset@reg_addr
  6657                           
  6658                           ;BME280_driver/bme280.c: 637:     uint8_t soft_rst_cmd = 0xB6;
  6659  1DFB  30B6               	movlw	182
  6660  1DFC  00D4               	movwf	??_bme280_soft_reset
  6661  1DFD  0854               	movf	??_bme280_soft_reset,w
  6662  1DFE  00D7               	movwf	bme280_soft_reset@soft_rst_cmd
  6663                           
  6664                           ;BME280_driver/bme280.c: 640:     rslt = null_ptr_check(dev);
  6665  1DFF  085A               	movf	bme280_soft_reset@dev,w
  6666  1E00  319B  2396  319D   	fcall	_null_ptr_check
  6667  1E03  0020               	movlb	0	; select bank0
  6668  1E04  00D4               	movwf	??_bme280_soft_reset
  6669  1E05  0854               	movf	??_bme280_soft_reset,w
  6670  1E06  00D8               	movwf	bme280_soft_reset@rslt
  6671                           
  6672                           ;BME280_driver/bme280.c: 643:     if (rslt == 0)
  6673  1E07  0858               	movf	bme280_soft_reset@rslt,w
  6674  1E08  1D03               	btfss	3,2
  6675  1E09  2E2D               	goto	l4528
  6676                           
  6677                           ;BME280_driver/bme280.c: 644:     {;BME280_driver/bme280.c: 646:         rslt = bme280_s
      +                          et_regs(&reg_addr, &soft_rst_cmd, 1, dev);
  6678  1E0A  3057               	movlw	(low (bme280_soft_reset@soft_rst_cmd| 0))& (0+255)
  6679  1E0B  00D4               	movwf	??_bme280_soft_reset
  6680  1E0C  0854               	movf	??_bme280_soft_reset,w
  6681  1E0D  00B5               	movwf	bme280_set_regs@reg_data
  6682  1E0E  01B6               	clrf	bme280_set_regs@len
  6683  1E0F  0AB6               	incf	bme280_set_regs@len,f
  6684  1E10  085A               	movf	bme280_soft_reset@dev,w
  6685  1E11  00D5               	movwf	??_bme280_soft_reset+1
  6686  1E12  0855               	movf	??_bme280_soft_reset+1,w
  6687  1E13  00B7               	movwf	bme280_set_regs@dev
  6688  1E14  3059               	movlw	(low (bme280_soft_reset@reg_addr| 0))& (0+255)
  6689  1E15  3195  25CC  319D   	fcall	_bme280_set_regs
  6690  1E18  00D6               	movwf	??_bme280_soft_reset+2
  6691  1E19  0856               	movf	??_bme280_soft_reset+2,w
  6692  1E1A  00D8               	movwf	bme280_soft_reset@rslt
  6693                           
  6694                           ;BME280_driver/bme280.c: 649:         dev->delay_ms(2);
  6695  1E1B  3000               	movlw	0
  6696  1E1C  00F8               	movwf	Sleep@ms+3
  6697  1E1D  3000               	movlw	0
  6698  1E1E  00F7               	movwf	Sleep@ms+2
  6699  1E1F  3000               	movlw	0
  6700  1E20  00F6               	movwf	Sleep@ms+1
  6701  1E21  3002               	movlw	2
  6702  1E22  00F5               	movwf	Sleep@ms
  6703  1E23  085A               	movf	bme280_soft_reset@dev,w
  6704  1E24  3E07               	addlw	7
  6705  1E25  0086               	movwf	6
  6706  1E26  3001               	movlw	1	; select bank2/3
  6707  1E27  0087               	movwf	7
  6708  1E28  3F41               	moviw [1]fsr1
  6709  1E29  008A               	movwf	10
  6710  1E2A  3F40               	moviw [0]fsr1
  6711  1E2B  000A               	callw
  6712  1E2C  319D               	pagesel	$
  6713  1E2D                     l4528:	
  6714                           
  6715                           ;BME280_driver/bme280.c: 652:     return rslt;
  6716  1E2D  0858               	movf	bme280_soft_reset@rslt,w
  6717  1E2E  0008               	return
  6718  1E2F                     __end_of_bme280_soft_reset:	
  6719                           
  6720                           	psect	text8
  6721  15CC                     __ptext8:	
  6722 ;; *************** function _bme280_set_regs *****************
  6723 ;; Defined at:
  6724 ;;		line 442 in file "BME280_driver/bme280.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  reg_addr        1    wreg     PTR unsigned char 
  6727 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6728 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6729 ;;  reg_data        1   21[BANK0 ] PTR const unsigned char 
  6730 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
  6731 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
  6732 ;;  len             1   22[BANK0 ] unsigned char 
  6733 ;;  dev             1   23[BANK0 ] PTR const struct bme280_
  6734 ;;		 -> main@env_sensor(51), 
  6735 ;; Auto vars:     Size  Location     Type
  6736 ;;  reg_addr        1   51[BANK0 ] PTR unsigned char 
  6737 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6738 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6739 ;;  temp_buff      20   27[BANK0 ] unsigned char [20]
  6740 ;;  temp_len        2   47[BANK0 ] unsigned short 
  6741 ;;  rslt            1   50[BANK0 ] char 
  6742 ;;  reg_addr_cnt    1   49[BANK0 ] unsigned char 
  6743 ;; Return value:  Size  Location     Type
  6744 ;;                  1    wreg      char 
  6745 ;; Registers used:
  6746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6747 ;; Tracked objects:
  6748 ;;		On entry : 1F/0
  6749 ;;		On exit  : 1F/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6752 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6755 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6756 ;;Total ram usage:       31 bytes
  6757 ;; Hardware stack levels used:    1
  6758 ;; Hardware stack levels required when called:    7
  6759 ;; This function calls:
  6760 ;;		_WriteEnvSensor
  6761 ;;		_interleave_reg_addr
  6762 ;;		_null_ptr_check
  6763 ;; This function is called by:
  6764 ;;		_bme280_soft_reset
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           
  6769                           ;psect for function _bme280_set_regs
  6770  15CC                     _bme280_set_regs:	
  6771                           
  6772                           ;incstack = 0
  6773                           ; Regs used in _bme280_set_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6774                           ;bme280_set_regs@reg_addr stored from wreg
  6775  15CC  00D3               	movwf	bme280_set_regs@reg_addr
  6776                           
  6777                           ;BME280_driver/bme280.c: 442: int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *r
      +                          eg_data, uint8_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 443: {;BME28
      +                          0_driver/bme280.c: 444:     int8_t rslt;;BME280_driver/bme280.c: 445:     uint8_t temp_b
      +                          uff[20];;BME280_driver/bme280.c: 447:     if (len > 10)
  6778  15CD  300B               	movlw	11
  6779  15CE  0236               	subwf	bme280_set_regs@len,w
  6780  15CF  1C03               	skipc
  6781  15D0  2DD5               	goto	l4270
  6782                           
  6783                           ;BME280_driver/bme280.c: 448:     {;BME280_driver/bme280.c: 449:         len = 10;
  6784  15D1  300A               	movlw	10
  6785  15D2  00B8               	movwf	??_bme280_set_regs
  6786  15D3  0838               	movf	??_bme280_set_regs,w
  6787  15D4  00B6               	movwf	bme280_set_regs@len
  6788  15D5                     l4270:	
  6789                           
  6790                           ;BME280_driver/bme280.c: 451:     uint16_t temp_len;;BME280_driver/bme280.c: 452:     ui
      +                          nt8_t reg_addr_cnt;;BME280_driver/bme280.c: 455:     rslt = null_ptr_check(dev);
  6791  15D5  0837               	movf	bme280_set_regs@dev,w
  6792  15D6  319B  2396  3195   	fcall	_null_ptr_check
  6793  15D9  0020               	movlb	0	; select bank0
  6794  15DA  00B8               	movwf	??_bme280_set_regs
  6795  15DB  0838               	movf	??_bme280_set_regs,w
  6796  15DC  00D2               	movwf	bme280_set_regs@rslt
  6797                           
  6798                           ;BME280_driver/bme280.c: 458:     if ((rslt == 0) && (reg_addr != ((void*)0)) && (reg_da
      +                          ta != ((void*)0)))
  6799  15DD  0852               	movf	bme280_set_regs@rslt,w
  6800  15DE  1D03               	btfss	3,2
  6801  15DF  2E66               	goto	l70
  6802  15E0  0853               	movf	bme280_set_regs@reg_addr,w
  6803  15E1  1903               	btfsc	3,2
  6804  15E2  2E66               	goto	l70
  6805  15E3  0835               	movf	bme280_set_regs@reg_data,w
  6806  15E4  1903               	btfsc	3,2
  6807  15E5  2E66               	goto	l70
  6808                           
  6809                           ;BME280_driver/bme280.c: 459:     {;BME280_driver/bme280.c: 460:         if (len != 0)
  6810  15E6  0836               	movf	bme280_set_regs@len,w
  6811  15E7  1903               	btfsc	3,2
  6812  15E8  2E61               	goto	l4306
  6813                           
  6814                           ;BME280_driver/bme280.c: 461:         {;BME280_driver/bme280.c: 462:             temp_bu
      +                          ff[0] = reg_data[0];
  6815  15E9  0835               	movf	bme280_set_regs@reg_data,w
  6816  15EA  0086               	movwf	6
  6817  15EB  0187               	clrf	7
  6818  15EC  0801               	movf	1,w
  6819  15ED  00B8               	movwf	??_bme280_set_regs
  6820  15EE  0838               	movf	??_bme280_set_regs,w
  6821  15EF  00BB               	movwf	bme280_set_regs@temp_buff
  6822                           
  6823                           ;BME280_driver/bme280.c: 465:             if (dev->intf != BME280_I2C_INTF)
  6824  15F0  0837               	movf	bme280_set_regs@dev,w
  6825  15F1  3E02               	addlw	2
  6826  15F2  0086               	movwf	6
  6827  15F3  3001               	movlw	1	; select bank2/3
  6828  15F4  0087               	movwf	7
  6829  15F5  0301               	decf	1,w
  6830  15F6  1903               	btfsc	3,2
  6831  15F7  2E13               	goto	l4292
  6832                           
  6833                           ;BME280_driver/bme280.c: 466:             {;BME280_driver/bme280.c: 467:                
      +                           for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
  6834  15F8  01D1               	clrf	bme280_set_regs@reg_addr_cnt
  6835  15F9                     l4290:	
  6836  15F9  0836               	movf	bme280_set_regs@len,w
  6837  15FA  0251               	subwf	bme280_set_regs@reg_addr_cnt,w
  6838  15FB  1803               	btfsc	3,0
  6839  15FC  2E13               	goto	l4292
  6840                           
  6841                           ;BME280_driver/bme280.c: 468:                 {;BME280_driver/bme280.c: 469:            
      +                                   reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
  6842  15FD  0851               	movf	bme280_set_regs@reg_addr_cnt,w
  6843  15FE  0753               	addwf	bme280_set_regs@reg_addr,w
  6844  15FF  00B8               	movwf	??_bme280_set_regs
  6845  1600  0838               	movf	??_bme280_set_regs,w
  6846  1601  0086               	movwf	6
  6847  1602  0187               	clrf	7
  6848  1603  0801               	movf	1,w
  6849  1604  397F               	andlw	127
  6850  1605  00B9               	movwf	??_bme280_set_regs+1
  6851  1606  0851               	movf	bme280_set_regs@reg_addr_cnt,w
  6852  1607  0753               	addwf	bme280_set_regs@reg_addr,w
  6853  1608  00BA               	movwf	??_bme280_set_regs+2
  6854  1609  083A               	movf	??_bme280_set_regs+2,w
  6855  160A  0086               	movwf	6
  6856  160B  0187               	clrf	7
  6857  160C  0839               	movf	??_bme280_set_regs+1,w
  6858  160D  0081               	movwf	1
  6859                           
  6860                           ;BME280_driver/bme280.c: 470:                 }
  6861  160E  3001               	movlw	1
  6862  160F  00B8               	movwf	??_bme280_set_regs
  6863  1610  0838               	movf	??_bme280_set_regs,w
  6864  1611  07D1               	addwf	bme280_set_regs@reg_addr_cnt,f
  6865  1612  2DF9               	goto	l4290
  6866  1613                     l4292:	
  6867                           
  6868                           ;BME280_driver/bme280.c: 474:             if (len > 1)
  6869  1613  3002               	movlw	2
  6870  1614  0236               	subwf	bme280_set_regs@len,w
  6871  1615  1C03               	skipc
  6872  1616  2E32               	goto	l4298
  6873                           
  6874                           ;BME280_driver/bme280.c: 475:             {;BME280_driver/bme280.c: 479:                
      +                           interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
  6875  1617  303B               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
  6876  1618  00B8               	movwf	??_bme280_set_regs
  6877  1619  0838               	movf	??_bme280_set_regs,w
  6878  161A  00F5               	movwf	interleave_reg_addr@temp_buff
  6879  161B  0835               	movf	bme280_set_regs@reg_data,w
  6880  161C  00B9               	movwf	??_bme280_set_regs+1
  6881  161D  0839               	movf	??_bme280_set_regs+1,w
  6882  161E  00F6               	movwf	interleave_reg_addr@reg_data
  6883  161F  0836               	movf	bme280_set_regs@len,w
  6884  1620  00BA               	movwf	??_bme280_set_regs+2
  6885  1621  083A               	movf	??_bme280_set_regs+2,w
  6886  1622  00F7               	movwf	interleave_reg_addr@len
  6887  1623  0853               	movf	bme280_set_regs@reg_addr,w
  6888  1624  319D  2534  3195   	fcall	_interleave_reg_addr
  6889                           
  6890                           ;BME280_driver/bme280.c: 480:                 temp_len = ((len * 2) - 1);
  6891  1627  0836               	movf	bme280_set_regs@len,w
  6892  1628  00B8               	movwf	??_bme280_set_regs
  6893  1629  01B9               	clrf	??_bme280_set_regs+1
  6894  162A  35B8               	lslf	??_bme280_set_regs,f
  6895  162B  0DB9               	rlf	??_bme280_set_regs+1,f
  6896  162C  0838               	movf	??_bme280_set_regs,w
  6897  162D  3EFF               	addlw	255
  6898  162E  00CF               	movwf	bme280_set_regs@temp_len
  6899  162F  30FF               	movlw	255
  6900  1630  3D39               	addwfc	??_bme280_set_regs+1,w
  6901  1631  2E38               	goto	L2
  6902  1632                     l4298:	
  6903                           ;BME280_driver/bme280.c: 481:             }
  6904                           
  6905                           
  6906                           ;BME280_driver/bme280.c: 483:             {;BME280_driver/bme280.c: 484:                
      +                           temp_len = len;
  6907  1632  0836               	movf	bme280_set_regs@len,w
  6908  1633  00B8               	movwf	??_bme280_set_regs
  6909  1634  01B9               	clrf	??_bme280_set_regs+1
  6910  1635  0838               	movf	??_bme280_set_regs,w
  6911  1636  00CF               	movwf	bme280_set_regs@temp_len
  6912  1637  0839               	movf	??_bme280_set_regs+1,w
  6913  1638                     L2:	
  6914  1638  00D0               	movwf	bme280_set_regs@temp_len+1
  6915                           
  6916                           ;BME280_driver/bme280.c: 486:             rslt = dev->write(dev->dev_id, reg_addr[0], te
      +                          mp_buff, temp_len);
  6917  1639  0837               	movf	bme280_set_regs@dev,w
  6918  163A  0086               	movwf	6
  6919  163B  3001               	movlw	1	; select bank2/3
  6920  163C  0087               	movwf	7
  6921  163D  3001               	movlw	1	; select bank2/3
  6922  163E  3F41               	moviw [1]fsr1
  6923  163F  00AA               	movwf	WriteEnvSensor@dev_id
  6924  1640  0853               	movf	bme280_set_regs@reg_addr,w
  6925  1641  0086               	movwf	6
  6926  1642  0187               	clrf	7
  6927  1643  0801               	movf	1,w
  6928  1644  00B8               	movwf	??_bme280_set_regs
  6929  1645  0838               	movf	??_bme280_set_regs,w
  6930  1646  00AB               	movwf	WriteEnvSensor@reg_addr
  6931  1647  303B               	movlw	(low (bme280_set_regs@temp_buff| 0))& (0+255)
  6932  1648  00B9               	movwf	??_bme280_set_regs+1
  6933  1649  0839               	movf	??_bme280_set_regs+1,w
  6934  164A  00AC               	movwf	WriteEnvSensor@reg_data
  6935  164B  0850               	movf	bme280_set_regs@temp_len+1,w
  6936  164C  00AE               	movwf	WriteEnvSensor@len+1
  6937  164D  084F               	movf	bme280_set_regs@temp_len,w
  6938  164E  00AD               	movwf	WriteEnvSensor@len
  6939  164F  0837               	movf	bme280_set_regs@dev,w
  6940  1650  3E05               	addlw	5
  6941  1651  0086               	movwf	6
  6942  1652  3001               	movlw	1	; select bank2/3
  6943  1653  0087               	movwf	7
  6944  1654  3F41               	moviw [1]fsr1
  6945  1655  008A               	movwf	10
  6946  1656  3F40               	moviw [0]fsr1
  6947  1657  000A               	callw
  6948  1658  3195               	pagesel	$
  6949  1659  00BA               	movwf	??_bme280_set_regs+2
  6950  165A  083A               	movf	??_bme280_set_regs+2,w
  6951  165B  00D2               	movwf	bme280_set_regs@rslt
  6952                           
  6953                           ;BME280_driver/bme280.c: 489:             if (rslt != 0)
  6954  165C  0852               	movf	bme280_set_regs@rslt,w
  6955  165D  1903               	btfsc	3,2
  6956  165E  2E68               	goto	l4308
  6957                           
  6958                           ;BME280_driver/bme280.c: 490:             {;BME280_driver/bme280.c: 491:                
      +                           rslt = -4;
  6959  165F  30FC               	movlw	252
  6960  1660  2E62               	goto	L3
  6961  1661                     l4306:	
  6962                           
  6963                           ;BME280_driver/bme280.c: 495:         {;BME280_driver/bme280.c: 496:             rslt = 
      +                          -3;
  6964  1661  30FD               	movlw	253
  6965  1662                     L3:	
  6966  1662  00B8               	movwf	??_bme280_set_regs
  6967  1663  0838               	movf	??_bme280_set_regs,w
  6968  1664  00D2               	movwf	bme280_set_regs@rslt
  6969  1665  2E68               	goto	l4308
  6970  1666                     l70:	
  6971                           ;BME280_driver/bme280.c: 499:     else
  6972                           
  6973                           
  6974                           ;BME280_driver/bme280.c: 500:     {;BME280_driver/bme280.c: 501:         rslt = -1;
  6975  1666  01D2               	clrf	bme280_set_regs@rslt
  6976  1667  03D2               	decf	bme280_set_regs@rslt,f
  6977  1668                     l4308:	
  6978                           
  6979                           ;BME280_driver/bme280.c: 504:     return rslt;
  6980  1668  0852               	movf	bme280_set_regs@rslt,w
  6981  1669  0008               	return
  6982  166A                     __end_of_bme280_set_regs:	
  6983                           
  6984                           	psect	text9
  6985  1D34                     __ptext9:	
  6986 ;; *************** function _interleave_reg_addr *****************
  6987 ;; Defined at:
  6988 ;;		line 1343 in file "BME280_driver/bme280.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  reg_addr        1    wreg     PTR const unsigned char 
  6991 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  6992 ;;		 -> bme280_soft_reset@reg_addr(1), 
  6993 ;;  temp_buff       1    5[COMMON] PTR unsigned char 
  6994 ;;		 -> bme280_set_regs@temp_buff(20), 
  6995 ;;  reg_data        1    6[COMMON] PTR const unsigned char 
  6996 ;;		 -> write_power_mode@sensor_mode_reg_val(1), set_filter_standby_settings@reg_data(1), set_osr_press_temp_settings@re
      +g_data(1), set_osr_humidity_settings@ctrl_meas(1), 
  6997 ;;		 -> set_osr_humidity_settings@ctrl_hum(1), bme280_soft_reset@soft_rst_cmd(1), 
  6998 ;;  len             1    7[COMMON] unsigned char 
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  reg_addr        1    3[BANK0 ] PTR const unsigned char 
  7001 ;;		 -> write_power_mode@reg_addr(1), set_filter_standby_settings@reg_addr(1), set_osr_press_temp_settings@reg_addr(1), 
      +set_osr_humidity_settings@reg_addr(1), 
  7002 ;;		 -> bme280_soft_reset@reg_addr(1), 
  7003 ;;  index           1    4[BANK0 ] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      void 
  7006 ;; Registers used:
  7007 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7008 ;; Tracked objects:
  7009 ;;		On entry : 1F/0
  7010 ;;		On exit  : 1F/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7013 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;Total ram usage:        8 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    3
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_bme280_set_regs
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           
  7028                           ;psect for function _interleave_reg_addr
  7029  1D34                     _interleave_reg_addr:	
  7030                           
  7031                           ;incstack = 0
  7032                           ; Regs used in _interleave_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0]
  7033                           ;interleave_reg_addr@reg_addr stored from wreg
  7034  1D34  00A3               	movwf	interleave_reg_addr@reg_addr
  7035                           
  7036                           ;BME280_driver/bme280.c: 1343: static void interleave_reg_addr(const uint8_t *reg_addr, 
      +                          uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len);BME280_driver/bme280.c: 1344: 
      +                          {;BME280_driver/bme280.c: 1345:     uint8_t index;;BME280_driver/bme280.c: 1347:     for
      +                           (index = 1; index < len; index++)
  7037  1D35  01A4               	clrf	interleave_reg_addr@index
  7038  1D36  0AA4               	incf	interleave_reg_addr@index,f
  7039  1D37                     l4104:	
  7040  1D37  0877               	movf	interleave_reg_addr@len,w
  7041  1D38  0224               	subwf	interleave_reg_addr@index,w
  7042  1D39  1803               	btfsc	3,0
  7043  1D3A  0008               	return
  7044                           
  7045                           ;BME280_driver/bme280.c: 1348:     {;BME280_driver/bme280.c: 1349:         temp_buff[(in
      +                          dex * 2) - 1] = reg_addr[index];
  7046  1D3B  0824               	movf	interleave_reg_addr@index,w
  7047  1D3C  0723               	addwf	interleave_reg_addr@reg_addr,w
  7048  1D3D  00A0               	movwf	??_interleave_reg_addr
  7049  1D3E  0820               	movf	??_interleave_reg_addr,w
  7050  1D3F  0086               	movwf	6
  7051  1D40  0187               	clrf	7
  7052  1D41  0801               	movf	1,w
  7053  1D42  00A1               	movwf	??_interleave_reg_addr+1
  7054  1D43  3524               	lslf	interleave_reg_addr@index,w
  7055  1D44  0775               	addwf	interleave_reg_addr@temp_buff,w
  7056  1D45  00A2               	movwf	??_interleave_reg_addr+2
  7057  1D46  0822               	movf	??_interleave_reg_addr+2,w
  7058  1D47  3EFF               	addlw	-1
  7059  1D48  0086               	movwf	6
  7060  1D49  0187               	clrf	7
  7061  1D4A  0821               	movf	??_interleave_reg_addr+1,w
  7062  1D4B  0081               	movwf	1
  7063                           
  7064                           ;BME280_driver/bme280.c: 1350:         temp_buff[index * 2] = reg_data[index];
  7065  1D4C  0824               	movf	interleave_reg_addr@index,w
  7066  1D4D  0776               	addwf	interleave_reg_addr@reg_data,w
  7067  1D4E  00A0               	movwf	??_interleave_reg_addr
  7068  1D4F  0820               	movf	??_interleave_reg_addr,w
  7069  1D50  0086               	movwf	6
  7070  1D51  0187               	clrf	7
  7071  1D52  0801               	movf	1,w
  7072  1D53  00A1               	movwf	??_interleave_reg_addr+1
  7073  1D54  3524               	lslf	interleave_reg_addr@index,w
  7074  1D55  0775               	addwf	interleave_reg_addr@temp_buff,w
  7075  1D56  00A2               	movwf	??_interleave_reg_addr+2
  7076  1D57  0822               	movf	??_interleave_reg_addr+2,w
  7077  1D58  0086               	movwf	6
  7078  1D59  0187               	clrf	7
  7079  1D5A  0821               	movf	??_interleave_reg_addr+1,w
  7080  1D5B  0081               	movwf	1
  7081                           
  7082                           ;BME280_driver/bme280.c: 1351:     }
  7083  1D5C  3001               	movlw	1
  7084  1D5D  00A0               	movwf	??_interleave_reg_addr
  7085  1D5E  0820               	movf	??_interleave_reg_addr,w
  7086  1D5F  07A4               	addwf	interleave_reg_addr@index,f
  7087  1D60  2D37               	goto	l4104
  7088  1D61                     __end_of_interleave_reg_addr:	
  7089                           
  7090                           	psect	text10
  7091  1054                     __ptext10:	
  7092 ;; *************** function _WriteEnvSensor *****************
  7093 ;; Defined at:
  7094 ;;		line 783 in file "main.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;  dev_id          1   10[BANK0 ] unsigned char 
  7097 ;;  reg_addr        1   11[BANK0 ] unsigned char 
  7098 ;;  reg_data        1   12[BANK0 ] PTR unsigned char 
  7099 ;;		 -> bme280_set_regs@temp_buff(20), 
  7100 ;;  len             2   13[BANK0 ] unsigned short 
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;  status          1   20[BANK0 ] enum E9633
  7103 ;;  local_addres    1   19[BANK0 ] unsigned char 
  7104 ;; Return value:  Size  Location     Type
  7105 ;;                  1    wreg      char 
  7106 ;; Registers used:
  7107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7108 ;; Tracked objects:
  7109 ;;		On entry : 1F/0
  7110 ;;		On exit  : 1F/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7113 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;Total ram usage:       11 bytes
  7118 ;; Hardware stack levels used:    1
  7119 ;; Hardware stack levels required when called:    6
  7120 ;; This function calls:
  7121 ;;		_I2C_MasterWrite
  7122 ;; This function is called by:
  7123 ;;		_main
  7124 ;;		_bme280_set_regs
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function _WriteEnvSensor
  7130  1054                     _WriteEnvSensor:	
  7131                           
  7132                           ;main.c: 783: int8_t WriteEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
      +                           uint16_t len);main.c: 784: {;main.c: 785:     I2C_MESSAGE_STATUS status = 0;
  7133                           
  7134                           ;incstack = 0
  7135                           ; Regs used in _WriteEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7136  1054  01B4               	clrf	WriteEnvSensor@status
  7137                           
  7138                           ;main.c: 786:     uint8_t local_address = reg_addr;
  7139  1055  082B               	movf	WriteEnvSensor@reg_addr,w
  7140  1056  00AF               	movwf	??_WriteEnvSensor
  7141  1057  082F               	movf	??_WriteEnvSensor,w
  7142  1058  00B3               	movwf	WriteEnvSensor@local_address
  7143  1059                     l868:	
  7144                           ;main.c: 803:     }
  7145                           
  7146                           ;main.c: 787:     while (local_address - reg_addr < len)
  7147                           
  7148                           
  7149                           ;main.c: 787:     while (local_address - reg_addr < len)
  7150  1059  0833               	movf	WriteEnvSensor@local_address,w
  7151  105A  00AF               	movwf	??_WriteEnvSensor
  7152  105B  01B0               	clrf	??_WriteEnvSensor+1
  7153  105C  0830               	movf	??_WriteEnvSensor+1,w
  7154  105D  00B2               	movwf	??_WriteEnvSensor+3
  7155  105E  082B               	movf	WriteEnvSensor@reg_addr,w
  7156  105F  022F               	subwf	??_WriteEnvSensor,w
  7157  1060  00B1               	movwf	??_WriteEnvSensor+2
  7158  1061  1C03               	skipc
  7159  1062  03B2               	decf	??_WriteEnvSensor+3,f
  7160  1063  082E               	movf	WriteEnvSensor@len+1,w
  7161  1064  0232               	subwf	??_WriteEnvSensor+3,w
  7162  1065  1D03               	skipz
  7163  1066  2869               	goto	u3855
  7164  1067  082D               	movf	WriteEnvSensor@len,w
  7165  1068  0231               	subwf	??_WriteEnvSensor+2,w
  7166  1069                     u3855:	
  7167  1069  1803               	btfsc	3,0
  7168  106A  289C               	goto	l4144
  7169                           
  7170                           ;main.c: 788:     {;main.c: 789:         I2C_MasterWrite(&local_address, 1, dev_id, &sta
      +                          tus);
  7171  106B  01A3               	clrf	I2C_MasterWrite@length
  7172  106C  0AA3               	incf	I2C_MasterWrite@length,f
  7173  106D  082A               	movf	WriteEnvSensor@dev_id,w
  7174  106E  00AF               	movwf	??_WriteEnvSensor
  7175  106F  01B0               	clrf	??_WriteEnvSensor+1
  7176  1070  082F               	movf	??_WriteEnvSensor,w
  7177  1071  00A4               	movwf	I2C_MasterWrite@address
  7178  1072  0830               	movf	??_WriteEnvSensor+1,w
  7179  1073  00A5               	movwf	I2C_MasterWrite@address+1
  7180  1074  3034               	movlw	(low (WriteEnvSensor@status| 0))& (0+255)
  7181  1075  00B1               	movwf	??_WriteEnvSensor+2
  7182  1076  0831               	movf	??_WriteEnvSensor+2,w
  7183  1077  00A6               	movwf	I2C_MasterWrite@pflag
  7184  1078  3033               	movlw	(low (WriteEnvSensor@local_address| 0))& (0+255)
  7185  1079  319C  2408  3190   	fcall	_I2C_MasterWrite
  7186                           
  7187                           ;main.c: 790:         if (status == 0)
  7188  107C  0020               	movlb	0	; select bank0
  7189  107D  0834               	movf	WriteEnvSensor@status,w
  7190  107E  1D03               	btfss	3,2
  7191  107F  2895               	goto	l4134
  7192                           
  7193                           ;main.c: 791:         {;main.c: 792:             I2C_MasterWrite(reg_data, 1, dev_id, &s
      +                          tatus);
  7194  1080  01A3               	clrf	I2C_MasterWrite@length
  7195  1081  0AA3               	incf	I2C_MasterWrite@length,f
  7196  1082  082A               	movf	WriteEnvSensor@dev_id,w
  7197  1083  00AF               	movwf	??_WriteEnvSensor
  7198  1084  01B0               	clrf	??_WriteEnvSensor+1
  7199  1085  082F               	movf	??_WriteEnvSensor,w
  7200  1086  00A4               	movwf	I2C_MasterWrite@address
  7201  1087  0830               	movf	??_WriteEnvSensor+1,w
  7202  1088  00A5               	movwf	I2C_MasterWrite@address+1
  7203  1089  3034               	movlw	(low (WriteEnvSensor@status| 0))& (0+255)
  7204  108A  00B1               	movwf	??_WriteEnvSensor+2
  7205  108B  0831               	movf	??_WriteEnvSensor+2,w
  7206  108C  00A6               	movwf	I2C_MasterWrite@pflag
  7207  108D  082C               	movf	WriteEnvSensor@reg_data,w
  7208  108E  319C  2408  3190   	fcall	_I2C_MasterWrite
  7209                           
  7210                           ;main.c: 793:             if (status != 0)
  7211  1091  0020               	movlb	0	; select bank0
  7212  1092  0834               	movf	WriteEnvSensor@status,w
  7213  1093  1903               	btfsc	3,2
  7214  1094  2897               	goto	l4142
  7215  1095                     l4134:	
  7216                           
  7217                           ;main.c: 794:             {;main.c: 795:                 return -4;
  7218  1095  30FC               	movlw	252
  7219  1096  0008               	return
  7220  1097                     l4142:	
  7221                           
  7222                           ;main.c: 802:         local_address++;
  7223  1097  3001               	movlw	1
  7224  1098  00AF               	movwf	??_WriteEnvSensor
  7225  1099  082F               	movf	??_WriteEnvSensor,w
  7226  109A  07B3               	addwf	WriteEnvSensor@local_address,f
  7227  109B  2859               	goto	l868
  7228  109C                     l4144:	
  7229                           
  7230                           ;main.c: 804:     return 0;
  7231  109C  3000               	movlw	0
  7232  109D  0008               	return
  7233  109E                     __end_of_WriteEnvSensor:	
  7234                           
  7235                           	psect	text11
  7236  1E2F                     __ptext11:	
  7237 ;; *************** function _Sleep *****************
  7238 ;; Defined at:
  7239 ;;		line 257 in file "main.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;  ms              4    5[COMMON] unsigned long 
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;  start           4    4[BANK0 ] unsigned long 
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg
  7248 ;; Tracked objects:
  7249 ;;		On entry : 1F/0
  7250 ;;		On exit  : 1F/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7253 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;Total ram usage:       12 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    3
  7260 ;; This function calls:
  7261 ;;		Nothing
  7262 ;; This function is called by:
  7263 ;;		_main
  7264 ;;		_bme280_soft_reset
  7265 ;;		_bme280_init
  7266 ;; This function uses a non-reentrant model
  7267 ;;
  7268                           
  7269                           
  7270                           ;psect for function _Sleep
  7271  1E2F                     _Sleep:	
  7272                           
  7273                           ;main.c: 257: void Sleep(uint32_t ms);main.c: 258: {;main.c: 259:     unsigned long star
      +                          t = ticks;
  7274                           
  7275                           ;incstack = 0
  7276                           ; Regs used in _Sleep: [wreg]
  7277  1E2F  0022               	movlb	2	; select bank2
  7278  1E30  0866               	movf	(_ticks+3)^(0+256),w
  7279  1E31  0020               	movlb	0	; select bank0
  7280  1E32  00A7               	movwf	Sleep@start+3
  7281  1E33  0022               	movlb	2	; select bank2
  7282  1E34  0865               	movf	(_ticks+2)^(0+256),w
  7283  1E35  0020               	movlb	0	; select bank0
  7284  1E36  00A6               	movwf	Sleep@start+2
  7285  1E37  0022               	movlb	2	; select bank2
  7286  1E38  0864               	movf	(_ticks+1)^(0+256),w
  7287  1E39  0020               	movlb	0	; select bank0
  7288  1E3A  00A5               	movwf	Sleep@start+1
  7289  1E3B  0022               	movlb	2	; select bank2
  7290  1E3C  0863               	movf	_ticks^(0+256),w
  7291  1E3D  0020               	movlb	0	; select bank0
  7292  1E3E  00A4               	movwf	Sleep@start
  7293  1E3F                     l715:	
  7294                           ;main.c: 263:     }
  7295                           
  7296                           ;main.c: 260:     while (ticks - start < ms)
  7297                           
  7298                           
  7299                           ;main.c: 260:     while (ticks - start < ms)
  7300  1E3F  0020               	movlb	0	; select bank0
  7301  1E40  0824               	movf	Sleep@start,w
  7302  1E41  0022               	movlb	2	; select bank2
  7303  1E42  0263               	subwf	_ticks^(0+256),w
  7304  1E43  0020               	movlb	0	; select bank0
  7305  1E44  00A0               	movwf	??_Sleep
  7306  1E45  0825               	movf	Sleep@start+1,w
  7307  1E46  0022               	movlb	2	; select bank2
  7308  1E47  3B64               	subwfb	(_ticks+1)^(0+256),w
  7309  1E48  0020               	movlb	0	; select bank0
  7310  1E49  00A1               	movwf	??_Sleep+1
  7311  1E4A  0826               	movf	Sleep@start+2,w
  7312  1E4B  0022               	movlb	2	; select bank2
  7313  1E4C  3B65               	subwfb	(_ticks+2)^(0+256),w
  7314  1E4D  0020               	movlb	0	; select bank0
  7315  1E4E  00A2               	movwf	??_Sleep+2
  7316  1E4F  0827               	movf	Sleep@start+3,w
  7317  1E50  0022               	movlb	2	; select bank2
  7318  1E51  3B66               	subwfb	(_ticks+3)^(0+256),w
  7319  1E52  0020               	movlb	0	; select bank0
  7320  1E53  00A3               	movwf	??_Sleep+3
  7321  1E54  0878               	movf	Sleep@ms+3,w
  7322  1E55  0223               	subwf	??_Sleep+3,w
  7323  1E56  1D03               	skipz
  7324  1E57  2E62               	goto	u4445
  7325  1E58  0877               	movf	Sleep@ms+2,w
  7326  1E59  0222               	subwf	??_Sleep+2,w
  7327  1E5A  1D03               	skipz
  7328  1E5B  2E62               	goto	u4445
  7329  1E5C  0876               	movf	Sleep@ms+1,w
  7330  1E5D  0221               	subwf	??_Sleep+1,w
  7331  1E5E  1D03               	skipz
  7332  1E5F  2E62               	goto	u4445
  7333  1E60  0875               	movf	Sleep@ms,w
  7334  1E61  0220               	subwf	??_Sleep,w
  7335  1E62                     u4445:	
  7336  1E62  1803               	btfsc	3,0
  7337  1E63  0008               	return
  7338                           
  7339                           ;main.c: 261:     {;main.c: 262:         _delay((unsigned long)((1)*(4000000/4000.0)));
  7340  1E64  30C8               	movlw	200
  7341  1E65                     u5547:	
  7342  1E65  3200               	nop2
  7343  1E66  0B89               	decfsz	9,f
  7344  1E67  2E65               	goto	u5547
  7345  1E68  2E3F               	goto	l715
  7346  1E69                     __end_of_Sleep:	
  7347                           
  7348                           	psect	text12
  7349  118F                     __ptext12:	
  7350 ;; *************** function _bme280_get_sensor_data *****************
  7351 ;; Defined at:
  7352 ;;		line 660 in file "BME280_driver/bme280.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  sensor_comp     1    wreg     unsigned char 
  7355 ;;  comp_data       1   75[BANK1 ] PTR struct bme280_data
  7356 ;;		 -> main@sensor_data(12), 
  7357 ;;  dev             1   76[BANK1 ] PTR struct bme280_dev
  7358 ;;		 -> main@env_sensor(51), 
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;  sensor_comp     1    8[BANK2 ] unsigned char 
  7361 ;;  uncomp_data    12   10[BANK2 ] struct bme280_uncomp_dat
  7362 ;;  reg_data        8    0[BANK2 ] unsigned char [8]
  7363 ;;  rslt            1    9[BANK2 ] char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      char 
  7366 ;; Registers used:
  7367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 1F/1
  7370 ;;		On exit  : 1C/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7373 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Locals:         0       0       0      22       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Totals:         0       0       5      22       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;Total ram usage:       27 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    8
  7380 ;; This function calls:
  7381 ;;		_bme280_compensate_data
  7382 ;;		_bme280_get_regs
  7383 ;;		_bme280_parse_sensor_data
  7384 ;;		_null_ptr_check
  7385 ;; This function is called by:
  7386 ;;		_main
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _bme280_get_sensor_data
  7392  118F                     _bme280_get_sensor_data:	
  7393                           
  7394                           ;incstack = 0
  7395                           ; Regs used in _bme280_get_sensor_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7396                           ;bme280_get_sensor_data@sensor_comp stored from wreg
  7397  118F  0022               	movlb	2	; select bank2
  7398  1190  00A8               	movwf	bme280_get_sensor_data@sensor_comp^(0+256)
  7399                           
  7400                           ;BME280_driver/bme280.c: 660: int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct 
      +                          bme280_data *comp_data, struct bme280_dev *dev);BME280_driver/bme280.c: 661: {;BME280_dr
      +                          iver/bme280.c: 662:     int8_t rslt;;BME280_driver/bme280.c: 667:     uint8_t reg_data[8
      +                          ] = { 0 };
  7401  1191  3020               	movlw	low bme280_get_sensor_data@reg_data
  7402  1192  0086               	movwf	6
  7403  1193  3001               	movlw	high bme280_get_sensor_data@reg_data
  7404  1194  0087               	movwf	7
  7405  1195  3008               	movlw	8
  7406  1196  0021               	movlb	1	; select bank1
  7407  1197  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7408  1198  3000               	movlw	0
  7409  1199                     u5080:	
  7410  1199  001E               	movwi fsr1++
  7411  119A  0BED               	decfsz	??_bme280_get_sensor_data^(0+128),f
  7412  119B  2999               	goto	u5080
  7413                           
  7414                           ;BME280_driver/bme280.c: 668:     struct bme280_uncomp_data uncomp_data = { 0 };
  7415  119C  303C               	movlw	low bme280_get_sensor_data@F273
  7416  119D  0086               	movwf	6
  7417  119E  3002               	movlw	high bme280_get_sensor_data@F273
  7418  119F  0087               	movwf	7
  7419  11A0  302A               	movlw	low bme280_get_sensor_data@uncomp_data
  7420  11A1  0084               	movwf	4
  7421  11A2  3001               	movlw	high bme280_get_sensor_data@uncomp_data
  7422  11A3  0085               	movwf	5
  7423  11A4  300C               	movlw	12
  7424  11A5  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7425  11A6                     u5090:	
  7426  11A6  0016               	moviw fsr1++
  7427  11A7  001A               	movwi fsr0++
  7428  11A8  0BED               	decfsz	??_bme280_get_sensor_data^(0+128),f
  7429  11A9  29A6               	goto	u5090
  7430                           
  7431                           ;BME280_driver/bme280.c: 671:     rslt = null_ptr_check(dev);
  7432  11AA  086C               	movf	bme280_get_sensor_data@dev^(0+128),w
  7433  11AB  319B  2396  3191   	fcall	_null_ptr_check
  7434  11AE  0021               	movlb	1	; select bank1
  7435  11AF  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7436  11B0  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  7437  11B1  0022               	movlb	2	; select bank2
  7438  11B2  00A9               	movwf	bme280_get_sensor_data@rslt^(0+256)
  7439                           
  7440                           ;BME280_driver/bme280.c: 672:     if ((rslt == 0) && (comp_data != ((void*)0)))
  7441  11B3  0829               	movf	bme280_get_sensor_data@rslt^(0+256),w
  7442  11B4  1D03               	btfss	3,2
  7443  11B5  0008               	return
  7444  11B6  0021               	movlb	1	; select bank1
  7445  11B7  086B               	movf	bme280_get_sensor_data@comp_data^(0+128),w
  7446  11B8  1903               	btfsc	3,2
  7447  11B9  0008               	return
  7448                           
  7449                           ;BME280_driver/bme280.c: 673:     {;BME280_driver/bme280.c: 675:         rslt = bme280_g
      +                          et_regs(0xF7, reg_data, 8, dev);
  7450  11BA  3020               	movlw	low bme280_get_sensor_data@reg_data
  7451  11BB  0020               	movlb	0	; select bank0
  7452  11BC  00B8               	movwf	bme280_get_regs@reg_data
  7453  11BD  3001               	movlw	high bme280_get_sensor_data@reg_data
  7454  11BE  00B9               	movwf	bme280_get_regs@reg_data+1
  7455  11BF  3008               	movlw	8
  7456  11C0  00BA               	movwf	bme280_get_regs@len
  7457  11C1  3000               	movlw	0
  7458  11C2  00BB               	movwf	bme280_get_regs@len+1
  7459  11C3  0021               	movlb	1	; select bank1
  7460  11C4  086C               	movf	bme280_get_sensor_data@dev^(0+128),w
  7461  11C5  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7462  11C6  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  7463  11C7  0020               	movlb	0	; select bank0
  7464  11C8  00BC               	movwf	bme280_get_regs@dev
  7465  11C9  30F7               	movlw	247
  7466  11CA  319E  26A6  3191   	fcall	_bme280_get_regs
  7467  11CD  0021               	movlb	1	; select bank1
  7468  11CE  00EE               	movwf	(??_bme280_get_sensor_data+1)^(0+128)
  7469  11CF  086E               	movf	(??_bme280_get_sensor_data+1)^(0+128),w
  7470  11D0  0022               	movlb	2	; select bank2
  7471  11D1  00A9               	movwf	bme280_get_sensor_data@rslt^(0+256)
  7472                           
  7473                           ;BME280_driver/bme280.c: 676:         if (rslt == 0)
  7474  11D2  0829               	movf	bme280_get_sensor_data@rslt^(0+256),w
  7475  11D3  1D03               	btfss	3,2
  7476  11D4  0008               	return
  7477                           
  7478                           ;BME280_driver/bme280.c: 677:         {;BME280_driver/bme280.c: 679:             bme280_
      +                          parse_sensor_data(reg_data, &uncomp_data);
  7479  11D5  302A               	movlw	(low (bme280_get_sensor_data@uncomp_data| (0+256)))& (0+255)
  7480  11D6  0021               	movlb	1	; select bank1
  7481  11D7  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7482  11D8  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  7483  11D9  00F5               	movwf	bme280_parse_sensor_data@uncomp_data
  7484  11DA  3020               	movlw	(low (bme280_get_sensor_data@reg_data| (0+256)))& (0+255)
  7485  11DB  3185  2570  3191   	fcall	_bme280_parse_sensor_data
  7486  11DE  302A               	movlw	(low (bme280_get_sensor_data@uncomp_data| (0+256)))& (0+255)
  7487  11DF  0021               	movlb	1	; select bank1
  7488  11E0  00ED               	movwf	??_bme280_get_sensor_data^(0+128)
  7489  11E1  086D               	movf	??_bme280_get_sensor_data^(0+128),w
  7490  11E2  00E5               	movwf	bme280_compensate_data@uncomp_data^(0+128)
  7491  11E3  086B               	movf	bme280_get_sensor_data@comp_data^(0+128),w
  7492  11E4  00EE               	movwf	(??_bme280_get_sensor_data+1)^(0+128)
  7493  11E5  086E               	movf	(??_bme280_get_sensor_data+1)^(0+128),w
  7494  11E6  00E6               	movwf	bme280_compensate_data@comp_data^(0+128)
  7495  11E7  086C               	movf	bme280_get_sensor_data@dev^(0+128),w
  7496  11E8  3E09               	addlw	9
  7497  11E9  00EF               	movwf	(??_bme280_get_sensor_data+2)^(0+128)
  7498  11EA  086F               	movf	(??_bme280_get_sensor_data+2)^(0+128),w
  7499  11EB  00E7               	movwf	bme280_compensate_data@calib_data^(0+128)
  7500  11EC  0022               	movlb	2	; select bank2
  7501  11ED  0828               	movf	bme280_get_sensor_data@sensor_comp^(0+256),w
  7502  11EE  3193  232F         	fcall	_bme280_compensate_data
  7503  11F0  0008               	return
  7504  11F1                     __end_of_bme280_get_sensor_data:	
  7505                           ;BME280_driver/bme280.c: 687:     else
  7506                           
  7507                           
  7508                           	psect	text13
  7509  0570                     __ptext13:	
  7510 ;; *************** function _bme280_parse_sensor_data *****************
  7511 ;; Defined at:
  7512 ;;		line 699 in file "BME280_driver/bme280.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  reg_data        1    wreg     PTR const unsigned char 
  7515 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7516 ;;  uncomp_data     1    5[COMMON] PTR struct bme280_uncomp
  7517 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;  reg_data        1   20[BANK0 ] PTR const unsigned char 
  7520 ;;		 -> bme280_get_sensor_data@reg_data(8), 
  7521 ;;  data_msb        4   16[BANK0 ] unsigned long 
  7522 ;;  data_lsb        4   12[BANK0 ] unsigned long 
  7523 ;;  data_xlsb       4    8[BANK0 ] unsigned long 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  1    wreg      void 
  7526 ;; Registers used:
  7527 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7528 ;; Tracked objects:
  7529 ;;		On entry : 1F/1
  7530 ;;		On exit  : 1F/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7533 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7536 ;;      Totals:         1      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7537 ;;Total ram usage:       22 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:    3
  7540 ;; This function calls:
  7541 ;;		Nothing
  7542 ;; This function is called by:
  7543 ;;		_bme280_get_sensor_data
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           
  7548                           ;psect for function _bme280_parse_sensor_data
  7549  0570                     _bme280_parse_sensor_data:	
  7550                           
  7551                           ;incstack = 0
  7552                           ; Regs used in _bme280_parse_sensor_data: [wreg+fsr1l+fsr1h+status,2+status,0]
  7553                           ;bme280_parse_sensor_data@reg_data stored from wreg
  7554  0570  0020               	movlb	0	; select bank0
  7555  0571  00B4               	movwf	bme280_parse_sensor_data@reg_data
  7556                           
  7557                           ;BME280_driver/bme280.c: 699: void bme280_parse_sensor_data(const uint8_t *reg_data, str
      +                          uct bme280_uncomp_data *uncomp_data);BME280_driver/bme280.c: 700: {;BME280_driver/bme280
      +                          .c: 702:     uint32_t data_xlsb;;BME280_driver/bme280.c: 703:     uint32_t data_lsb;;BME
      +                          280_driver/bme280.c: 704:     uint32_t data_msb;;BME280_driver/bme280.c: 707:     data_m
      +                          sb = (uint32_t)reg_data[0] << 12;
  7558  0572  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7559  0573  0086               	movwf	6
  7560  0574  3001               	movlw	1	; select bank2/3
  7561  0575  0087               	movwf	7
  7562  0576  0801               	movf	1,w
  7563  0577  00A0               	movwf	??_bme280_parse_sensor_data
  7564  0578  01A1               	clrf	??_bme280_parse_sensor_data+1
  7565  0579  01A2               	clrf	??_bme280_parse_sensor_data+2
  7566  057A  01A3               	clrf	??_bme280_parse_sensor_data+3
  7567  057B  300C               	movlw	12
  7568  057C                     u4605:	
  7569  057C  35A0               	lslf	??_bme280_parse_sensor_data,f
  7570  057D  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7571  057E  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7572  057F  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7573  0580  0B89               	decfsz	9,f
  7574  0581  2D7C               	goto	u4605
  7575  0582  0823               	movf	??_bme280_parse_sensor_data+3,w
  7576  0583  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  7577  0584  0822               	movf	??_bme280_parse_sensor_data+2,w
  7578  0585  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  7579  0586  0821               	movf	??_bme280_parse_sensor_data+1,w
  7580  0587  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  7581  0588  0820               	movf	??_bme280_parse_sensor_data,w
  7582  0589  00B0               	movwf	bme280_parse_sensor_data@data_msb
  7583                           
  7584                           ;BME280_driver/bme280.c: 708:     data_lsb = (uint32_t)reg_data[1] << 4;
  7585  058A  0A34               	incf	bme280_parse_sensor_data@reg_data,w
  7586  058B  0086               	movwf	6
  7587  058C  3001               	movlw	1	; select bank2/3
  7588  058D  0087               	movwf	7
  7589  058E  0801               	movf	1,w
  7590  058F  00A0               	movwf	??_bme280_parse_sensor_data
  7591  0590  01A1               	clrf	??_bme280_parse_sensor_data+1
  7592  0591  01A2               	clrf	??_bme280_parse_sensor_data+2
  7593  0592  01A3               	clrf	??_bme280_parse_sensor_data+3
  7594  0593  3004               	movlw	4
  7595  0594                     u4615:	
  7596  0594  35A0               	lslf	??_bme280_parse_sensor_data,f
  7597  0595  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7598  0596  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7599  0597  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7600  0598  0B89               	decfsz	9,f
  7601  0599  2D94               	goto	u4615
  7602  059A  0823               	movf	??_bme280_parse_sensor_data+3,w
  7603  059B  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  7604  059C  0822               	movf	??_bme280_parse_sensor_data+2,w
  7605  059D  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  7606  059E  0821               	movf	??_bme280_parse_sensor_data+1,w
  7607  059F  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  7608  05A0  0820               	movf	??_bme280_parse_sensor_data,w
  7609  05A1  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  7610                           
  7611                           ;BME280_driver/bme280.c: 709:     data_xlsb = (uint32_t)reg_data[2] >> 4;
  7612  05A2  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7613  05A3  3E02               	addlw	2
  7614  05A4  0086               	movwf	6
  7615  05A5  3001               	movlw	1	; select bank2/3
  7616  05A6  0087               	movwf	7
  7617  05A7  0801               	movf	1,w
  7618  05A8  00A0               	movwf	??_bme280_parse_sensor_data
  7619  05A9  3004               	movlw	4
  7620  05AA                     u4625:	
  7621  05AA  36A0               	lsrf	??_bme280_parse_sensor_data,f
  7622  05AB  0B89               	decfsz	9,f
  7623  05AC  2DAA               	goto	u4625
  7624  05AD  0820               	movf	??_bme280_parse_sensor_data,w
  7625  05AE  00A1               	movwf	??_bme280_parse_sensor_data+1
  7626  05AF  01A2               	clrf	??_bme280_parse_sensor_data+2
  7627  05B0  01A3               	clrf	??_bme280_parse_sensor_data+3
  7628  05B1  01A4               	clrf	??_bme280_parse_sensor_data+4
  7629  05B2  0824               	movf	??_bme280_parse_sensor_data+4,w
  7630  05B3  00AB               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7631  05B4  0823               	movf	??_bme280_parse_sensor_data+3,w
  7632  05B5  00AA               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7633  05B6  0822               	movf	??_bme280_parse_sensor_data+2,w
  7634  05B7  00A9               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7635  05B8  0821               	movf	??_bme280_parse_sensor_data+1,w
  7636  05B9  00A8               	movwf	bme280_parse_sensor_data@data_xlsb
  7637                           
  7638                           ;BME280_driver/bme280.c: 710:     uncomp_data->pressure = data_msb | data_lsb | data_xls
      +                          b;
  7639  05BA  0828               	movf	bme280_parse_sensor_data@data_xlsb,w
  7640  05BB  00A0               	movwf	??_bme280_parse_sensor_data
  7641  05BC  0829               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7642  05BD  00A1               	movwf	??_bme280_parse_sensor_data+1
  7643  05BE  082A               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7644  05BF  00A2               	movwf	??_bme280_parse_sensor_data+2
  7645  05C0  082B               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7646  05C1  00A3               	movwf	??_bme280_parse_sensor_data+3
  7647  05C2  0830               	movf	bme280_parse_sensor_data@data_msb,w
  7648  05C3  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7649  05C4  00A4               	movwf	??_bme280_parse_sensor_data+4
  7650  05C5  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  7651  05C6  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7652  05C7  00A5               	movwf	??_bme280_parse_sensor_data+5
  7653  05C8  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  7654  05C9  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7655  05CA  00A6               	movwf	??_bme280_parse_sensor_data+6
  7656  05CB  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  7657  05CC  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7658  05CD  00A7               	movwf	??_bme280_parse_sensor_data+7
  7659  05CE  0824               	movf	??_bme280_parse_sensor_data+4,w
  7660  05CF  04A0               	iorwf	??_bme280_parse_sensor_data,f
  7661  05D0  0825               	movf	??_bme280_parse_sensor_data+5,w
  7662  05D1  04A1               	iorwf	??_bme280_parse_sensor_data+1,f
  7663  05D2  0826               	movf	??_bme280_parse_sensor_data+6,w
  7664  05D3  04A2               	iorwf	??_bme280_parse_sensor_data+2,f
  7665  05D4  0827               	movf	??_bme280_parse_sensor_data+7,w
  7666  05D5  04A3               	iorwf	??_bme280_parse_sensor_data+3,f
  7667  05D6  0875               	movf	bme280_parse_sensor_data@uncomp_data,w
  7668  05D7  0086               	movwf	6
  7669  05D8  3001               	movlw	1	; select bank2/3
  7670  05D9  0087               	movwf	7
  7671  05DA  0820               	movf	??_bme280_parse_sensor_data,w
  7672  05DB  3FC0               	movwi [0]fsr1
  7673  05DC  0821               	movf	??_bme280_parse_sensor_data+1,w
  7674  05DD  3FC1               	movwi [1]fsr1
  7675  05DE  0822               	movf	??_bme280_parse_sensor_data+2,w
  7676  05DF  3FC2               	movwi [2]fsr1
  7677  05E0  0823               	movf	??_bme280_parse_sensor_data+3,w
  7678  05E1  3FC3               	movwi [3]fsr1
  7679                           
  7680                           ;BME280_driver/bme280.c: 713:     data_msb = (uint32_t)reg_data[3] << 12;
  7681  05E2  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7682  05E3  3E03               	addlw	3
  7683  05E4  0086               	movwf	6
  7684  05E5  3001               	movlw	1	; select bank2/3
  7685  05E6  0087               	movwf	7
  7686  05E7  0801               	movf	1,w
  7687  05E8  00A0               	movwf	??_bme280_parse_sensor_data
  7688  05E9  01A1               	clrf	??_bme280_parse_sensor_data+1
  7689  05EA  01A2               	clrf	??_bme280_parse_sensor_data+2
  7690  05EB  01A3               	clrf	??_bme280_parse_sensor_data+3
  7691  05EC  300C               	movlw	12
  7692  05ED                     u4635:	
  7693  05ED  35A0               	lslf	??_bme280_parse_sensor_data,f
  7694  05EE  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7695  05EF  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7696  05F0  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7697  05F1  0B89               	decfsz	9,f
  7698  05F2  2DED               	goto	u4635
  7699  05F3  0823               	movf	??_bme280_parse_sensor_data+3,w
  7700  05F4  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  7701  05F5  0822               	movf	??_bme280_parse_sensor_data+2,w
  7702  05F6  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  7703  05F7  0821               	movf	??_bme280_parse_sensor_data+1,w
  7704  05F8  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  7705  05F9  0820               	movf	??_bme280_parse_sensor_data,w
  7706  05FA  00B0               	movwf	bme280_parse_sensor_data@data_msb
  7707                           
  7708                           ;BME280_driver/bme280.c: 714:     data_lsb = (uint32_t)reg_data[4] << 4;
  7709  05FB  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7710  05FC  3E04               	addlw	4
  7711  05FD  0086               	movwf	6
  7712  05FE  3001               	movlw	1	; select bank2/3
  7713  05FF  0087               	movwf	7
  7714  0600  0801               	movf	1,w
  7715  0601  00A0               	movwf	??_bme280_parse_sensor_data
  7716  0602  01A1               	clrf	??_bme280_parse_sensor_data+1
  7717  0603  01A2               	clrf	??_bme280_parse_sensor_data+2
  7718  0604  01A3               	clrf	??_bme280_parse_sensor_data+3
  7719  0605  3004               	movlw	4
  7720  0606                     u4645:	
  7721  0606  35A0               	lslf	??_bme280_parse_sensor_data,f
  7722  0607  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7723  0608  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7724  0609  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7725  060A  0B89               	decfsz	9,f
  7726  060B  2E06               	goto	u4645
  7727  060C  0823               	movf	??_bme280_parse_sensor_data+3,w
  7728  060D  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  7729  060E  0822               	movf	??_bme280_parse_sensor_data+2,w
  7730  060F  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  7731  0610  0821               	movf	??_bme280_parse_sensor_data+1,w
  7732  0611  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  7733  0612  0820               	movf	??_bme280_parse_sensor_data,w
  7734  0613  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  7735                           
  7736                           ;BME280_driver/bme280.c: 715:     data_xlsb = (uint32_t)reg_data[5] >> 4;
  7737  0614  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7738  0615  3E05               	addlw	5
  7739  0616  0086               	movwf	6
  7740  0617  3001               	movlw	1	; select bank2/3
  7741  0618  0087               	movwf	7
  7742  0619  0801               	movf	1,w
  7743  061A  00A0               	movwf	??_bme280_parse_sensor_data
  7744  061B  3004               	movlw	4
  7745  061C                     u4655:	
  7746  061C  36A0               	lsrf	??_bme280_parse_sensor_data,f
  7747  061D  0B89               	decfsz	9,f
  7748  061E  2E1C               	goto	u4655
  7749  061F  0820               	movf	??_bme280_parse_sensor_data,w
  7750  0620  00A1               	movwf	??_bme280_parse_sensor_data+1
  7751  0621  01A2               	clrf	??_bme280_parse_sensor_data+2
  7752  0622  01A3               	clrf	??_bme280_parse_sensor_data+3
  7753  0623  01A4               	clrf	??_bme280_parse_sensor_data+4
  7754  0624  0824               	movf	??_bme280_parse_sensor_data+4,w
  7755  0625  00AB               	movwf	bme280_parse_sensor_data@data_xlsb+3
  7756  0626  0823               	movf	??_bme280_parse_sensor_data+3,w
  7757  0627  00AA               	movwf	bme280_parse_sensor_data@data_xlsb+2
  7758  0628  0822               	movf	??_bme280_parse_sensor_data+2,w
  7759  0629  00A9               	movwf	bme280_parse_sensor_data@data_xlsb+1
  7760  062A  0821               	movf	??_bme280_parse_sensor_data+1,w
  7761  062B  00A8               	movwf	bme280_parse_sensor_data@data_xlsb
  7762                           
  7763                           ;BME280_driver/bme280.c: 716:     uncomp_data->temperature = data_msb | data_lsb | data_
      +                          xlsb;
  7764  062C  0828               	movf	bme280_parse_sensor_data@data_xlsb,w
  7765  062D  00A0               	movwf	??_bme280_parse_sensor_data
  7766  062E  0829               	movf	bme280_parse_sensor_data@data_xlsb+1,w
  7767  062F  00A1               	movwf	??_bme280_parse_sensor_data+1
  7768  0630  082A               	movf	bme280_parse_sensor_data@data_xlsb+2,w
  7769  0631  00A2               	movwf	??_bme280_parse_sensor_data+2
  7770  0632  082B               	movf	bme280_parse_sensor_data@data_xlsb+3,w
  7771  0633  00A3               	movwf	??_bme280_parse_sensor_data+3
  7772  0634  0830               	movf	bme280_parse_sensor_data@data_msb,w
  7773  0635  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7774  0636  00A4               	movwf	??_bme280_parse_sensor_data+4
  7775  0637  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  7776  0638  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7777  0639  00A5               	movwf	??_bme280_parse_sensor_data+5
  7778  063A  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  7779  063B  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7780  063C  00A6               	movwf	??_bme280_parse_sensor_data+6
  7781  063D  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  7782  063E  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7783  063F  00A7               	movwf	??_bme280_parse_sensor_data+7
  7784  0640  0824               	movf	??_bme280_parse_sensor_data+4,w
  7785  0641  04A0               	iorwf	??_bme280_parse_sensor_data,f
  7786  0642  0825               	movf	??_bme280_parse_sensor_data+5,w
  7787  0643  04A1               	iorwf	??_bme280_parse_sensor_data+1,f
  7788  0644  0826               	movf	??_bme280_parse_sensor_data+6,w
  7789  0645  04A2               	iorwf	??_bme280_parse_sensor_data+2,f
  7790  0646  0827               	movf	??_bme280_parse_sensor_data+7,w
  7791  0647  04A3               	iorwf	??_bme280_parse_sensor_data+3,f
  7792  0648  0875               	movf	bme280_parse_sensor_data@uncomp_data,w
  7793  0649  3E04               	addlw	4
  7794  064A  0086               	movwf	6
  7795  064B  3001               	movlw	1	; select bank2/3
  7796  064C  0087               	movwf	7
  7797  064D  0820               	movf	??_bme280_parse_sensor_data,w
  7798  064E  3FC0               	movwi [0]fsr1
  7799  064F  0821               	movf	??_bme280_parse_sensor_data+1,w
  7800  0650  3FC1               	movwi [1]fsr1
  7801  0651  0822               	movf	??_bme280_parse_sensor_data+2,w
  7802  0652  3FC2               	movwi [2]fsr1
  7803  0653  0823               	movf	??_bme280_parse_sensor_data+3,w
  7804  0654  3FC3               	movwi [3]fsr1
  7805                           
  7806                           ;BME280_driver/bme280.c: 719:     data_lsb = (uint32_t)reg_data[6] << 8;
  7807  0655  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7808  0656  3E06               	addlw	6
  7809  0657  0086               	movwf	6
  7810  0658  3001               	movlw	1	; select bank2/3
  7811  0659  0087               	movwf	7
  7812  065A  0801               	movf	1,w
  7813  065B  00A0               	movwf	??_bme280_parse_sensor_data
  7814  065C  01A1               	clrf	??_bme280_parse_sensor_data+1
  7815  065D  01A2               	clrf	??_bme280_parse_sensor_data+2
  7816  065E  01A3               	clrf	??_bme280_parse_sensor_data+3
  7817  065F  3008               	movlw	8
  7818  0660                     u4665:	
  7819  0660  35A0               	lslf	??_bme280_parse_sensor_data,f
  7820  0661  0DA1               	rlf	??_bme280_parse_sensor_data+1,f
  7821  0662  0DA2               	rlf	??_bme280_parse_sensor_data+2,f
  7822  0663  0DA3               	rlf	??_bme280_parse_sensor_data+3,f
  7823  0664  0B89               	decfsz	9,f
  7824  0665  2E60               	goto	u4665
  7825  0666  0823               	movf	??_bme280_parse_sensor_data+3,w
  7826  0667  00AF               	movwf	bme280_parse_sensor_data@data_lsb+3
  7827  0668  0822               	movf	??_bme280_parse_sensor_data+2,w
  7828  0669  00AE               	movwf	bme280_parse_sensor_data@data_lsb+2
  7829  066A  0821               	movf	??_bme280_parse_sensor_data+1,w
  7830  066B  00AD               	movwf	bme280_parse_sensor_data@data_lsb+1
  7831  066C  0820               	movf	??_bme280_parse_sensor_data,w
  7832  066D  00AC               	movwf	bme280_parse_sensor_data@data_lsb
  7833                           
  7834                           ;BME280_driver/bme280.c: 720:     data_msb = (uint32_t)reg_data[7];
  7835  066E  0834               	movf	bme280_parse_sensor_data@reg_data,w
  7836  066F  3E07               	addlw	7
  7837  0670  0086               	movwf	6
  7838  0671  3001               	movlw	1	; select bank2/3
  7839  0672  0087               	movwf	7
  7840  0673  0801               	movf	1,w
  7841  0674  00A0               	movwf	??_bme280_parse_sensor_data
  7842  0675  01A1               	clrf	??_bme280_parse_sensor_data+1
  7843  0676  01A2               	clrf	??_bme280_parse_sensor_data+2
  7844  0677  01A3               	clrf	??_bme280_parse_sensor_data+3
  7845  0678  0823               	movf	??_bme280_parse_sensor_data+3,w
  7846  0679  00B3               	movwf	bme280_parse_sensor_data@data_msb+3
  7847  067A  0822               	movf	??_bme280_parse_sensor_data+2,w
  7848  067B  00B2               	movwf	bme280_parse_sensor_data@data_msb+2
  7849  067C  0821               	movf	??_bme280_parse_sensor_data+1,w
  7850  067D  00B1               	movwf	bme280_parse_sensor_data@data_msb+1
  7851  067E  0820               	movf	??_bme280_parse_sensor_data,w
  7852  067F  00B0               	movwf	bme280_parse_sensor_data@data_msb
  7853                           
  7854                           ;BME280_driver/bme280.c: 721:     uncomp_data->humidity = data_msb | data_lsb;
  7855  0680  0830               	movf	bme280_parse_sensor_data@data_msb,w
  7856  0681  042C               	iorwf	bme280_parse_sensor_data@data_lsb,w
  7857  0682  00A0               	movwf	??_bme280_parse_sensor_data
  7858  0683  0831               	movf	bme280_parse_sensor_data@data_msb+1,w
  7859  0684  042D               	iorwf	bme280_parse_sensor_data@data_lsb+1,w
  7860  0685  00A1               	movwf	??_bme280_parse_sensor_data+1
  7861  0686  0832               	movf	bme280_parse_sensor_data@data_msb+2,w
  7862  0687  042E               	iorwf	bme280_parse_sensor_data@data_lsb+2,w
  7863  0688  00A2               	movwf	??_bme280_parse_sensor_data+2
  7864  0689  0833               	movf	bme280_parse_sensor_data@data_msb+3,w
  7865  068A  042F               	iorwf	bme280_parse_sensor_data@data_lsb+3,w
  7866  068B  00A3               	movwf	??_bme280_parse_sensor_data+3
  7867  068C  0875               	movf	bme280_parse_sensor_data@uncomp_data,w
  7868  068D  3E08               	addlw	8
  7869  068E  0086               	movwf	6
  7870  068F  3001               	movlw	1	; select bank2/3
  7871  0690  0087               	movwf	7
  7872  0691  0820               	movf	??_bme280_parse_sensor_data,w
  7873  0692  3FC0               	movwi [0]fsr1
  7874  0693  0821               	movf	??_bme280_parse_sensor_data+1,w
  7875  0694  3FC1               	movwi [1]fsr1
  7876  0695  0822               	movf	??_bme280_parse_sensor_data+2,w
  7877  0696  3FC2               	movwi [2]fsr1
  7878  0697  0823               	movf	??_bme280_parse_sensor_data+3,w
  7879  0698  3FC3               	movwi [3]fsr1
  7880  0699  0008               	return
  7881  069A                     __end_of_bme280_parse_sensor_data:	
  7882                           
  7883                           	psect	text14
  7884  1EA6                     __ptext14:	
  7885 ;; *************** function _bme280_get_regs *****************
  7886 ;; Defined at:
  7887 ;;		line 409 in file "BME280_driver/bme280.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  reg_addr        1    wreg     unsigned char 
  7890 ;;  reg_data        2   24[BANK0 ] PTR unsigned char 
  7891 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  7892 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  7893 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  7894 ;;  len             2   26[BANK0 ] unsigned short 
  7895 ;;  dev             1   28[BANK0 ] PTR const struct bme280_
  7896 ;;		 -> main@env_sensor(51), 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  reg_addr        1   31[BANK0 ] unsigned char 
  7899 ;;  rslt            1   32[BANK0 ] char 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;                  1    wreg      char 
  7902 ;; Registers used:
  7903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : 1F/0
  7906 ;;		On exit  : 1F/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7909 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7912 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;Total ram usage:        9 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    7
  7916 ;; This function calls:
  7917 ;;		_ReadEnvSensor
  7918 ;;		_null_ptr_check
  7919 ;; This function is called by:
  7920 ;;		_bme280_init
  7921 ;;		_bme280_get_sensor_data
  7922 ;;		_get_calib_data
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           
  7927                           ;psect for function _bme280_get_regs
  7928  1EA6                     _bme280_get_regs:	
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in _bme280_get_regs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7932                           ;bme280_get_regs@reg_addr stored from wreg
  7933  1EA6  00BF               	movwf	bme280_get_regs@reg_addr
  7934                           
  7935                           ;BME280_driver/bme280.c: 409: int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data
      +                          , uint16_t len, const struct bme280_dev *dev);BME280_driver/bme280.c: 410: {;BME280_driv
      +                          er/bme280.c: 411:     int8_t rslt;;BME280_driver/bme280.c: 414:     rslt = null_ptr_chec
      +                          k(dev);
  7936  1EA7  083C               	movf	bme280_get_regs@dev,w
  7937  1EA8  319B  2396  319E   	fcall	_null_ptr_check
  7938  1EAB  0020               	movlb	0	; select bank0
  7939  1EAC  00BD               	movwf	??_bme280_get_regs
  7940  1EAD  083D               	movf	??_bme280_get_regs,w
  7941  1EAE  00C0               	movwf	bme280_get_regs@rslt
  7942                           
  7943                           ;BME280_driver/bme280.c: 417:     if (rslt == 0)
  7944  1EAF  0840               	movf	bme280_get_regs@rslt,w
  7945  1EB0  1D03               	btfss	3,2
  7946  1EB1  2EE6               	goto	l63
  7947                           
  7948                           ;BME280_driver/bme280.c: 418:     {;BME280_driver/bme280.c: 420:         if (dev->intf !
      +                          = BME280_I2C_INTF)
  7949  1EB2  083C               	movf	bme280_get_regs@dev,w
  7950  1EB3  3E02               	addlw	2
  7951  1EB4  0086               	movwf	6
  7952  1EB5  3001               	movlw	1	; select bank2/3
  7953  1EB6  0087               	movwf	7
  7954  1EB7  0301               	decf	1,w
  7955  1EB8  1903               	btfsc	3,2
  7956  1EB9  2EBF               	goto	l4258
  7957                           
  7958                           ;BME280_driver/bme280.c: 421:         {;BME280_driver/bme280.c: 422:             reg_add
      +                          r = reg_addr | 0x80;
  7959  1EBA  083F               	movf	bme280_get_regs@reg_addr,w
  7960  1EBB  3880               	iorlw	128
  7961  1EBC  00BD               	movwf	??_bme280_get_regs
  7962  1EBD  083D               	movf	??_bme280_get_regs,w
  7963  1EBE  00BF               	movwf	bme280_get_regs@reg_addr
  7964  1EBF                     l4258:	
  7965                           
  7966                           ;BME280_driver/bme280.c: 426:         rslt = dev->read(dev->dev_id, reg_addr, reg_data, 
      +                          len);
  7967  1EBF  083C               	movf	bme280_get_regs@dev,w
  7968  1EC0  0086               	movwf	6
  7969  1EC1  3001               	movlw	1	; select bank2/3
  7970  1EC2  0087               	movwf	7
  7971  1EC3  3001               	movlw	1	; select bank2/3
  7972  1EC4  3F41               	moviw [1]fsr1
  7973  1EC5  00AD               	movwf	ReadEnvSensor@dev_id
  7974  1EC6  083F               	movf	bme280_get_regs@reg_addr,w
  7975  1EC7  00BD               	movwf	??_bme280_get_regs
  7976  1EC8  083D               	movf	??_bme280_get_regs,w
  7977  1EC9  00AE               	movwf	ReadEnvSensor@reg_addr
  7978  1ECA  0839               	movf	bme280_get_regs@reg_data+1,w
  7979  1ECB  00B0               	movwf	ReadEnvSensor@data+1
  7980  1ECC  0838               	movf	bme280_get_regs@reg_data,w
  7981  1ECD  00AF               	movwf	ReadEnvSensor@data
  7982  1ECE  083B               	movf	bme280_get_regs@len+1,w
  7983  1ECF  00B2               	movwf	ReadEnvSensor@len+1
  7984  1ED0  083A               	movf	bme280_get_regs@len,w
  7985  1ED1  00B1               	movwf	ReadEnvSensor@len
  7986  1ED2  083C               	movf	bme280_get_regs@dev,w
  7987  1ED3  3E03               	addlw	3
  7988  1ED4  0086               	movwf	6
  7989  1ED5  3001               	movlw	1	; select bank2/3
  7990  1ED6  0087               	movwf	7
  7991  1ED7  3F41               	moviw [1]fsr1
  7992  1ED8  008A               	movwf	10
  7993  1ED9  3F40               	moviw [0]fsr1
  7994  1EDA  000A               	callw
  7995  1EDB  319E               	pagesel	$
  7996  1EDC  00BE               	movwf	??_bme280_get_regs+1
  7997  1EDD  083E               	movf	??_bme280_get_regs+1,w
  7998  1EDE  00C0               	movwf	bme280_get_regs@rslt
  7999                           
  8000                           ;BME280_driver/bme280.c: 429:         if (rslt != 0)
  8001  1EDF  0840               	movf	bme280_get_regs@rslt,w
  8002  1EE0  1903               	btfsc	3,2
  8003  1EE1  2EE6               	goto	l63
  8004                           
  8005                           ;BME280_driver/bme280.c: 430:         {;BME280_driver/bme280.c: 431:             rslt = 
      +                          -4;
  8006  1EE2  30FC               	movlw	252
  8007  1EE3  00BD               	movwf	??_bme280_get_regs
  8008  1EE4  083D               	movf	??_bme280_get_regs,w
  8009  1EE5  00C0               	movwf	bme280_get_regs@rslt
  8010  1EE6                     l63:	
  8011                           ;BME280_driver/bme280.c: 433:     }
  8012                           
  8013                           
  8014                           ;BME280_driver/bme280.c: 435:     return rslt;
  8015  1EE6  0840               	movf	bme280_get_regs@rslt,w
  8016  1EE7  0008               	return
  8017  1EE8                     __end_of_bme280_get_regs:	
  8018                           
  8019                           	psect	text15
  8020  1B96                     __ptext15:	
  8021 ;; *************** function _null_ptr_check *****************
  8022 ;; Defined at:
  8023 ;;		line 1426 in file "BME280_driver/bme280.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;  dev             1    wreg     PTR const struct bme280_
  8026 ;;		 -> main@env_sensor(51), 
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;  dev             1    8[COMMON] PTR const struct bme280_
  8029 ;;		 -> main@env_sensor(51), 
  8030 ;;  rslt            1    7[COMMON] char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      char 
  8033 ;; Registers used:
  8034 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8035 ;; Tracked objects:
  8036 ;;		On entry : 1E/0
  8037 ;;		On exit  : 1E/0
  8038 ;;		Unchanged: 1E/0
  8039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;Total ram usage:        4 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    3
  8047 ;; This function calls:
  8048 ;;		Nothing
  8049 ;; This function is called by:
  8050 ;;		_bme280_init
  8051 ;;		_bme280_get_regs
  8052 ;;		_bme280_set_regs
  8053 ;;		_bme280_soft_reset
  8054 ;;		_bme280_get_sensor_data
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           
  8059                           ;psect for function _null_ptr_check
  8060  1B96                     _null_ptr_check:	
  8061                           
  8062                           ;incstack = 0
  8063                           ; Regs used in _null_ptr_check: [wreg+fsr1l+fsr1h+status,2+status,0]
  8064                           ;null_ptr_check@dev stored from wreg
  8065  1B96  00F8               	movwf	null_ptr_check@dev
  8066                           
  8067                           ;BME280_driver/bme280.c: 1426: static int8_t null_ptr_check(const struct bme280_dev *dev
      +                          );BME280_driver/bme280.c: 1427: {;BME280_driver/bme280.c: 1428:     int8_t rslt;;BME280_
      +                          driver/bme280.c: 1430:     if ((dev == ((void*)0)) || (dev->read == ((void*)0)) || (dev-
      +                          >write == ((void*)0)) || (dev->delay_ms == ((void*)0)))
  8068  1B97  0878               	movf	null_ptr_check@dev,w
  8069  1B98  1903               	btfsc	3,2
  8070  1B99  2BB5               	goto	l234
  8071  1B9A  0878               	movf	null_ptr_check@dev,w
  8072  1B9B  3E03               	addlw	3
  8073  1B9C  0086               	movwf	6
  8074  1B9D  3001               	movlw	1	; select bank2/3
  8075  1B9E  0087               	movwf	7
  8076  1B9F  0016               	moviw fsr1++
  8077  1BA0  0401               	iorwf	1,w
  8078  1BA1  1903               	btfsc	3,2
  8079  1BA2  2BB5               	goto	l234
  8080  1BA3  0878               	movf	null_ptr_check@dev,w
  8081  1BA4  3E05               	addlw	5
  8082  1BA5  0086               	movwf	6
  8083  1BA6  3001               	movlw	1	; select bank2/3
  8084  1BA7  0087               	movwf	7
  8085  1BA8  0016               	moviw fsr1++
  8086  1BA9  0401               	iorwf	1,w
  8087  1BAA  1903               	btfsc	3,2
  8088  1BAB  2BB5               	goto	l234
  8089  1BAC  0878               	movf	null_ptr_check@dev,w
  8090  1BAD  3E07               	addlw	7
  8091  1BAE  0086               	movwf	6
  8092  1BAF  3001               	movlw	1	; select bank2/3
  8093  1BB0  0087               	movwf	7
  8094  1BB1  0016               	moviw fsr1++
  8095  1BB2  0401               	iorwf	1,w
  8096  1BB3  1D03               	btfss	3,2
  8097  1BB4  2BB8               	goto	l4092
  8098  1BB5                     l234:	
  8099                           
  8100                           ;BME280_driver/bme280.c: 1431:     {;BME280_driver/bme280.c: 1433:         rslt = -1;
  8101  1BB5  01F7               	clrf	null_ptr_check@rslt
  8102  1BB6  03F7               	decf	null_ptr_check@rslt,f
  8103                           
  8104                           ;BME280_driver/bme280.c: 1434:     }
  8105  1BB7  2BB9               	goto	l4094
  8106  1BB8                     l4092:	
  8107                           
  8108                           ;BME280_driver/bme280.c: 1436:     {;BME280_driver/bme280.c: 1438:         rslt = 0;
  8109  1BB8  01F7               	clrf	null_ptr_check@rslt
  8110  1BB9                     l4094:	
  8111                           
  8112                           ;BME280_driver/bme280.c: 1441:     return rslt;
  8113  1BB9  0877               	movf	null_ptr_check@rslt,w
  8114  1BBA  0008               	return
  8115  1BBB                     __end_of_null_ptr_check:	
  8116                           
  8117                           	psect	text16
  8118  1DC0                     __ptext16:	
  8119 ;; *************** function _ReadEnvSensor *****************
  8120 ;; Defined at:
  8121 ;;		line 765 in file "main.c"
  8122 ;; Parameters:    Size  Location     Type
  8123 ;;  dev_id          1   13[BANK0 ] unsigned char 
  8124 ;;  reg_addr        1   14[BANK0 ] unsigned char 
  8125 ;;  data            2   15[BANK0 ] PTR unsigned char 
  8126 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8127 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8128 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8129 ;;  len             2   17[BANK0 ] unsigned short 
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  status          1   23[BANK0 ] enum E9633
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      char 
  8134 ;; Registers used:
  8135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 1F/0
  8138 ;;		On exit  : 1F/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8141 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;Total ram usage:       11 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    6
  8148 ;; This function calls:
  8149 ;;		_I2C_MasterRead
  8150 ;;		_I2C_MasterWrite
  8151 ;; This function is called by:
  8152 ;;		_main
  8153 ;;		_bme280_get_regs
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           
  8158                           ;psect for function _ReadEnvSensor
  8159  1DC0                     _ReadEnvSensor:	
  8160                           
  8161                           ;main.c: 765: int8_t ReadEnvSensor(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint
      +                          16_t len);main.c: 766: {;main.c: 767:     I2C_MESSAGE_STATUS status = 0;
  8162                           
  8163                           ;incstack = 0
  8164                           ; Regs used in _ReadEnvSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8165  1DC0  01B7               	clrf	ReadEnvSensor@status
  8166                           
  8167                           ;main.c: 768:     I2C_MasterWrite(&reg_addr, 1, dev_id, &status);
  8168  1DC1  01A3               	clrf	I2C_MasterWrite@length
  8169  1DC2  0AA3               	incf	I2C_MasterWrite@length,f
  8170  1DC3  082D               	movf	ReadEnvSensor@dev_id,w
  8171  1DC4  00B3               	movwf	??_ReadEnvSensor
  8172  1DC5  01B4               	clrf	??_ReadEnvSensor+1
  8173  1DC6  0833               	movf	??_ReadEnvSensor,w
  8174  1DC7  00A4               	movwf	I2C_MasterWrite@address
  8175  1DC8  0834               	movf	??_ReadEnvSensor+1,w
  8176  1DC9  00A5               	movwf	I2C_MasterWrite@address+1
  8177  1DCA  3037               	movlw	(low (ReadEnvSensor@status| 0))& (0+255)
  8178  1DCB  00B5               	movwf	??_ReadEnvSensor+2
  8179  1DCC  0835               	movf	??_ReadEnvSensor+2,w
  8180  1DCD  00A6               	movwf	I2C_MasterWrite@pflag
  8181  1DCE  302E               	movlw	(low (ReadEnvSensor@reg_addr| 0))& (0+255)
  8182  1DCF  319C  2408  319D   	fcall	_I2C_MasterWrite
  8183                           
  8184                           ;main.c: 769:     if (status == 0)
  8185  1DD2  0020               	movlb	0	; select bank0
  8186  1DD3  0837               	movf	ReadEnvSensor@status,w
  8187  1DD4  1D03               	btfss	3,2
  8188  1DD5  2DF0               	goto	l4116
  8189                           
  8190                           ;main.c: 770:     {;main.c: 771:         I2C_MasterRead(data, len, dev_id, &status);
  8191  1DD6  0830               	movf	ReadEnvSensor@data+1,w
  8192  1DD7  00A6               	movwf	I2C_MasterRead@pdata+1
  8193  1DD8  082F               	movf	ReadEnvSensor@data,w
  8194  1DD9  00A5               	movwf	I2C_MasterRead@pdata
  8195  1DDA  0831               	movf	ReadEnvSensor@len,w
  8196  1DDB  00B3               	movwf	??_ReadEnvSensor
  8197  1DDC  0833               	movf	??_ReadEnvSensor,w
  8198  1DDD  00A7               	movwf	I2C_MasterRead@length
  8199  1DDE  082D               	movf	ReadEnvSensor@dev_id,w
  8200  1DDF  00B4               	movwf	??_ReadEnvSensor+1
  8201  1DE0  01B5               	clrf	??_ReadEnvSensor+2
  8202  1DE1  0834               	movf	??_ReadEnvSensor+1,w
  8203  1DE2  00A8               	movwf	I2C_MasterRead@address
  8204  1DE3  0835               	movf	??_ReadEnvSensor+2,w
  8205  1DE4  00A9               	movwf	I2C_MasterRead@address+1
  8206  1DE5  3037               	movlw	(low (ReadEnvSensor@status| 0))& (0+255)
  8207  1DE6  00B6               	movwf	??_ReadEnvSensor+3
  8208  1DE7  0836               	movf	??_ReadEnvSensor+3,w
  8209  1DE8  00AA               	movwf	I2C_MasterRead@pflag
  8210  1DE9  319B  23E1  319D   	fcall	_I2C_MasterRead
  8211                           
  8212                           ;main.c: 772:         if (status != 0)
  8213  1DEC  0020               	movlb	0	; select bank0
  8214  1DED  0837               	movf	ReadEnvSensor@status,w
  8215  1DEE  1903               	btfsc	3,2
  8216  1DEF  2DF4               	goto	l864
  8217  1DF0                     l4116:	
  8218                           
  8219                           ;main.c: 773:         {;main.c: 774:             status = -4;
  8220  1DF0  30FC               	movlw	252
  8221  1DF1  00B3               	movwf	??_ReadEnvSensor
  8222  1DF2  0833               	movf	??_ReadEnvSensor,w
  8223  1DF3  00B7               	movwf	ReadEnvSensor@status
  8224  1DF4                     l864:	
  8225                           ;main.c: 780:     }
  8226                           
  8227                           
  8228                           ;main.c: 781:     return status;
  8229  1DF4  0837               	movf	ReadEnvSensor@status,w
  8230  1DF5  0008               	return
  8231  1DF6                     __end_of_ReadEnvSensor:	
  8232                           
  8233                           	psect	text17
  8234  1C08                     __ptext17:	
  8235 ;; *************** function _I2C_MasterWrite *****************
  8236 ;; Defined at:
  8237 ;;		line 600 in file "mcc_generated_files/i2c.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;  pdata           1    wreg     PTR unsigned char 
  8240 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  8241 ;;  length          1    3[BANK0 ] unsigned char 
  8242 ;;  address         2    4[BANK0 ] unsigned short 
  8243 ;;  pflag           1    6[BANK0 ] PTR enum E9631
  8244 ;;		 -> WriteEnvSensor@status(1), ReadEnvSensor@status(1), 
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;  pdata           1    9[BANK0 ] PTR unsigned char 
  8247 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  1    wreg      void 
  8250 ;; Registers used:
  8251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8252 ;; Tracked objects:
  8253 ;;		On entry : 1F/0
  8254 ;;		On exit  : 1D/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8257 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;Total ram usage:        7 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    5
  8264 ;; This function calls:
  8265 ;;		_I2C_MasterTRBInsert
  8266 ;;		_I2C_MasterWriteTRBBuild
  8267 ;; This function is called by:
  8268 ;;		_ReadEnvSensor
  8269 ;;		_WriteEnvSensor
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           
  8274                           ;psect for function _I2C_MasterWrite
  8275  1C08                     _I2C_MasterWrite:	
  8276                           
  8277                           ;incstack = 0
  8278                           ; Regs used in _I2C_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8279                           ;I2C_MasterWrite@pdata stored from wreg
  8280  1C08  00A9               	movwf	I2C_MasterWrite@pdata
  8281                           
  8282                           ;mcc_generated_files/i2c.c: 601:                                 uint8_t *pdata,;mcc_gen
      +                          erated_files/i2c.c: 602:                                 uint8_t length,;mcc_generated_f
      +                          iles/i2c.c: 603:                                 uint16_t address,;mcc_generated_files/i
      +                          2c.c: 604:                                 I2C_MESSAGE_STATUS *pflag);mcc_generated_file
      +                          s/i2c.c: 605: {;mcc_generated_files/i2c.c: 606:     static I2C_TRANSACTION_REQUEST_BLOCK
      +                           trBlock;;mcc_generated_files/i2c.c: 609:     if (i2c_object.trStatus.s.full != 1)
  8283  1C09  0022               	movlb	2	; select bank2
  8284  1C0A  1860               	btfsc	(_i2c_object^(0+256)+2),0
  8285  1C0B  2C29               	goto	l4076
  8286                           
  8287                           ;mcc_generated_files/i2c.c: 610:     {;mcc_generated_files/i2c.c: 611:         I2C_Maste
      +                          rWriteTRBBuild(&trBlock, pdata, length, address);
  8288  1C0C  0020               	movlb	0	; select bank0
  8289  1C0D  0829               	movf	I2C_MasterWrite@pdata,w
  8290  1C0E  00A7               	movwf	??_I2C_MasterWrite
  8291  1C0F  0827               	movf	??_I2C_MasterWrite,w
  8292  1C10  00F5               	movwf	I2C_MasterWriteTRBBuild@pdata
  8293  1C11  0823               	movf	I2C_MasterWrite@length,w
  8294  1C12  00A8               	movwf	??_I2C_MasterWrite+1
  8295  1C13  0828               	movf	??_I2C_MasterWrite+1,w
  8296  1C14  00F6               	movwf	I2C_MasterWriteTRBBuild@length
  8297  1C15  0825               	movf	I2C_MasterWrite@address+1,w
  8298  1C16  00F8               	movwf	I2C_MasterWriteTRBBuild@address+1
  8299  1C17  0824               	movf	I2C_MasterWrite@address,w
  8300  1C18  00F7               	movwf	I2C_MasterWriteTRBBuild@address
  8301  1C19  30E0               	movlw	(low (I2C_MasterWrite@trBlock| (0+256)))& (0+255)
  8302  1C1A  319B  2374  319C   	fcall	_I2C_MasterWriteTRBBuild
  8303                           
  8304                           ;mcc_generated_files/i2c.c: 612:         I2C_MasterTRBInsert(1, &trBlock, pflag);
  8305  1C1D  30E0               	movlw	(low (I2C_MasterWrite@trBlock| (0+256)))& (0+255)
  8306  1C1E  00A7               	movwf	??_I2C_MasterWrite
  8307  1C1F  0827               	movf	??_I2C_MasterWrite,w
  8308  1C20  00F5               	movwf	I2C_MasterTRBInsert@ptrb_list
  8309  1C21  0826               	movf	I2C_MasterWrite@pflag,w
  8310  1C22  00A8               	movwf	??_I2C_MasterWrite+1
  8311  1C23  0828               	movf	??_I2C_MasterWrite+1,w
  8312  1C24  00F6               	movwf	I2C_MasterTRBInsert@pflag
  8313  1C25  3001               	movlw	1
  8314  1C26  319F  27B8         	fcall	_I2C_MasterTRBInsert
  8315                           
  8316                           ;mcc_generated_files/i2c.c: 613:     }
  8317  1C28  0008               	return
  8318  1C29                     l4076:	
  8319                           
  8320                           ;mcc_generated_files/i2c.c: 615:     {;mcc_generated_files/i2c.c: 616:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  8321  1C29  0020               	movlb	0	; select bank0
  8322  1C2A  0826               	movf	I2C_MasterWrite@pflag,w
  8323  1C2B  0086               	movwf	6
  8324  1C2C  0187               	clrf	7
  8325  1C2D  0181               	clrf	1
  8326  1C2E  0A81               	incf	1,f
  8327  1C2F  0008               	return
  8328  1C30                     __end_of_I2C_MasterWrite:	
  8329                           
  8330                           	psect	text18
  8331  1B74                     __ptext18:	
  8332 ;; *************** function _I2C_MasterWriteTRBBuild *****************
  8333 ;; Defined at:
  8334 ;;		line 721 in file "mcc_generated_files/i2c.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  ptrb            1    wreg     PTR struct .
  8337 ;;		 -> I2C_MasterWrite@trBlock(5), 
  8338 ;;  pdata           1    5[COMMON] PTR unsigned char 
  8339 ;;		 -> WriteEnvSensor@local_address(1), ReadEnvSensor@reg_addr(1), bme280_set_regs@temp_buff(20), 
  8340 ;;  length          1    6[COMMON] unsigned char 
  8341 ;;  address         2    7[COMMON] unsigned short 
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;  ptrb            1    2[BANK0 ] PTR struct .
  8344 ;;		 -> I2C_MasterWrite@trBlock(5), 
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  1    wreg      void 
  8347 ;; Registers used:
  8348 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8349 ;; Tracked objects:
  8350 ;;		On entry : 1F/0
  8351 ;;		On exit  : 1F/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8354 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;Total ram usage:        7 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    3
  8361 ;; This function calls:
  8362 ;;		Nothing
  8363 ;; This function is called by:
  8364 ;;		_I2C_MasterWrite
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           
  8369                           ;psect for function _I2C_MasterWriteTRBBuild
  8370  1B74                     _I2C_MasterWriteTRBBuild:	
  8371                           
  8372                           ;incstack = 0
  8373                           ; Regs used in _I2C_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  8374                           ;I2C_MasterWriteTRBBuild@ptrb stored from wreg
  8375  1B74  00A2               	movwf	I2C_MasterWriteTRBBuild@ptrb
  8376                           
  8377                           ;mcc_generated_files/i2c.c: 722:                                 I2C_TRANSACTION_REQUEST
      +                          _BLOCK *ptrb,;mcc_generated_files/i2c.c: 723:                                 uint8_t *p
      +                          data,;mcc_generated_files/i2c.c: 724:                                 uint8_t length,;mc
      +                          c_generated_files/i2c.c: 725:                                 uint16_t address);mcc_gene
      +                          rated_files/i2c.c: 726: {;mcc_generated_files/i2c.c: 727:     ptrb->address = address <<
      +                           1;
  8378  1B75  0878               	movf	I2C_MasterWriteTRBBuild@address+1,w
  8379  1B76  00A1               	movwf	??_I2C_MasterWriteTRBBuild+1
  8380  1B77  0877               	movf	I2C_MasterWriteTRBBuild@address,w
  8381  1B78  00A0               	movwf	??_I2C_MasterWriteTRBBuild
  8382  1B79  35A0               	lslf	??_I2C_MasterWriteTRBBuild,f
  8383  1B7A  0DA1               	rlf	??_I2C_MasterWriteTRBBuild+1,f
  8384  1B7B  0822               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8385  1B7C  0086               	movwf	6
  8386  1B7D  3001               	movlw	1	; select bank2/3
  8387  1B7E  0087               	movwf	7
  8388  1B7F  0820               	movf	??_I2C_MasterWriteTRBBuild,w
  8389  1B80  3FC0               	movwi [0]fsr1
  8390  1B81  0821               	movf	??_I2C_MasterWriteTRBBuild+1,w
  8391  1B82  3FC1               	movwi [1]fsr1
  8392                           
  8393                           ;mcc_generated_files/i2c.c: 728:     ptrb->length = length;
  8394  1B83  0876               	movf	I2C_MasterWriteTRBBuild@length,w
  8395  1B84  00A0               	movwf	??_I2C_MasterWriteTRBBuild
  8396  1B85  0822               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8397  1B86  3E02               	addlw	2
  8398  1B87  0086               	movwf	6
  8399  1B88  3001               	movlw	1	; select bank2/3
  8400  1B89  0087               	movwf	7
  8401  1B8A  0820               	movf	??_I2C_MasterWriteTRBBuild,w
  8402  1B8B  0081               	movwf	1
  8403                           
  8404                           ;mcc_generated_files/i2c.c: 729:     ptrb->pbuffer = pdata;
  8405  1B8C  0822               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8406  1B8D  3E03               	addlw	3
  8407  1B8E  0086               	movwf	6
  8408  1B8F  3001               	movlw	1	; select bank2/3
  8409  1B90  0087               	movwf	7
  8410  1B91  0875               	movf	I2C_MasterWriteTRBBuild@pdata,w
  8411  1B92  3FC0               	movwi [0]fsr1
  8412  1B93  3000               	movlw	0
  8413  1B94  3FC1               	movwi [1]fsr1
  8414  1B95  0008               	return
  8415  1B96                     __end_of_I2C_MasterWriteTRBBuild:	
  8416                           
  8417                           	psect	text19
  8418  1BE1                     __ptext19:	
  8419 ;; *************** function _I2C_MasterRead *****************
  8420 ;; Defined at:
  8421 ;;		line 621 in file "mcc_generated_files/i2c.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;  pdata           2    5[BANK0 ] PTR unsigned char 
  8424 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8425 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8426 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8427 ;;  length          1    7[BANK0 ] unsigned char 
  8428 ;;  address         2    8[BANK0 ] unsigned short 
  8429 ;;  pflag           1   10[BANK0 ] PTR enum E9631
  8430 ;;		 -> ReadEnvSensor@status(1), 
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;		None
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  1    wreg      void 
  8435 ;; Registers used:
  8436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 1F/0
  8439 ;;		On exit  : 1D/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8442 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;Total ram usage:        8 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    5
  8449 ;; This function calls:
  8450 ;;		_I2C_MasterReadTRBBuild
  8451 ;;		_I2C_MasterTRBInsert
  8452 ;; This function is called by:
  8453 ;;		_ReadEnvSensor
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function _I2C_MasterRead
  8459  1BE1                     _I2C_MasterRead:	
  8460                           
  8461                           ;mcc_generated_files/i2c.c: 622:                                 uint8_t *pdata,;mcc_gen
      +                          erated_files/i2c.c: 623:                                 uint8_t length,;mcc_generated_f
      +                          iles/i2c.c: 624:                                 uint16_t address,;mcc_generated_files/i
      +                          2c.c: 625:                                 I2C_MESSAGE_STATUS *pflag);mcc_generated_file
      +                          s/i2c.c: 626: {;mcc_generated_files/i2c.c: 627:     static I2C_TRANSACTION_REQUEST_BLOCK
      +                           trBlock;;mcc_generated_files/i2c.c: 631:     if (i2c_object.trStatus.s.full != 1)
  8462                           
  8463                           ;incstack = 0
  8464                           ; Regs used in _I2C_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8465  1BE1  0022               	movlb	2	; select bank2
  8466  1BE2  1860               	btfsc	(_i2c_object^(0+256)+2),0
  8467  1BE3  2C01               	goto	l4082
  8468                           
  8469                           ;mcc_generated_files/i2c.c: 632:     {;mcc_generated_files/i2c.c: 633:         I2C_Maste
      +                          rReadTRBBuild(&trBlock, pdata, length, address);
  8470  1BE4  0020               	movlb	0	; select bank0
  8471  1BE5  0826               	movf	I2C_MasterRead@pdata+1,w
  8472  1BE6  00A1               	movwf	I2C_MasterReadTRBBuild@pdata+1
  8473  1BE7  0825               	movf	I2C_MasterRead@pdata,w
  8474  1BE8  00A0               	movwf	I2C_MasterReadTRBBuild@pdata
  8475  1BE9  0827               	movf	I2C_MasterRead@length,w
  8476  1BEA  00AB               	movwf	??_I2C_MasterRead
  8477  1BEB  082B               	movf	??_I2C_MasterRead,w
  8478  1BEC  00A2               	movwf	I2C_MasterReadTRBBuild@length
  8479  1BED  0829               	movf	I2C_MasterRead@address+1,w
  8480  1BEE  00A4               	movwf	I2C_MasterReadTRBBuild@address+1
  8481  1BEF  0828               	movf	I2C_MasterRead@address,w
  8482  1BF0  00A3               	movwf	I2C_MasterReadTRBBuild@address
  8483  1BF1  30DB               	movlw	(low (I2C_MasterRead@trBlock| (0+256)))& (0+255)
  8484  1BF2  319C  2484  319B   	fcall	_I2C_MasterReadTRBBuild
  8485                           
  8486                           ;mcc_generated_files/i2c.c: 634:         I2C_MasterTRBInsert(1, &trBlock, pflag);
  8487  1BF5  30DB               	movlw	(low (I2C_MasterRead@trBlock| (0+256)))& (0+255)
  8488  1BF6  00AB               	movwf	??_I2C_MasterRead
  8489  1BF7  082B               	movf	??_I2C_MasterRead,w
  8490  1BF8  00F5               	movwf	I2C_MasterTRBInsert@ptrb_list
  8491  1BF9  082A               	movf	I2C_MasterRead@pflag,w
  8492  1BFA  00AC               	movwf	??_I2C_MasterRead+1
  8493  1BFB  082C               	movf	??_I2C_MasterRead+1,w
  8494  1BFC  00F6               	movwf	I2C_MasterTRBInsert@pflag
  8495  1BFD  3001               	movlw	1
  8496  1BFE  319F  27B8         	fcall	_I2C_MasterTRBInsert
  8497                           
  8498                           ;mcc_generated_files/i2c.c: 635:     }
  8499  1C00  0008               	return
  8500  1C01                     l4082:	
  8501                           
  8502                           ;mcc_generated_files/i2c.c: 637:     {;mcc_generated_files/i2c.c: 638:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  8503  1C01  0020               	movlb	0	; select bank0
  8504  1C02  082A               	movf	I2C_MasterRead@pflag,w
  8505  1C03  0086               	movwf	6
  8506  1C04  0187               	clrf	7
  8507  1C05  0181               	clrf	1
  8508  1C06  0A81               	incf	1,f
  8509  1C07  0008               	return
  8510  1C08                     __end_of_I2C_MasterRead:	
  8511                           
  8512                           	psect	text20
  8513  1FB8                     __ptext20:	
  8514 ;; *************** function _I2C_MasterTRBInsert *****************
  8515 ;; Defined at:
  8516 ;;		line 654 in file "mcc_generated_files/i2c.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  count           1    wreg     unsigned char 
  8519 ;;  ptrb_list       1    5[COMMON] PTR struct .
  8520 ;;		 -> I2C_MasterRead@trBlock(5), I2C_MasterWrite@trBlock(5), 
  8521 ;;  pflag           1    6[COMMON] PTR enum E9631
  8522 ;;		 -> WriteEnvSensor@status(1), ReadEnvSensor@status(1), 
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;  count           1    8[COMMON] unsigned char 
  8525 ;; Return value:  Size  Location     Type
  8526 ;;                  1    wreg      void 
  8527 ;; Registers used:
  8528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8529 ;; Tracked objects:
  8530 ;;		On entry : 1F/0
  8531 ;;		On exit  : 1D/0
  8532 ;;		Unchanged: 0/0
  8533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8534 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8537 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;Total ram usage:        4 bytes
  8539 ;; Hardware stack levels used:    1
  8540 ;; Hardware stack levels required when called:    4
  8541 ;; This function calls:
  8542 ;;		_I2C_WaitForLastPacketToComplete
  8543 ;; This function is called by:
  8544 ;;		_I2C_MasterWrite
  8545 ;;		_I2C_MasterRead
  8546 ;; This function uses a non-reentrant model
  8547 ;;
  8548                           
  8549                           
  8550                           ;psect for function _I2C_MasterTRBInsert
  8551  1FB8                     _I2C_MasterTRBInsert:	
  8552                           
  8553                           ;incstack = 0
  8554                           ; Regs used in _I2C_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8555                           ;I2C_MasterTRBInsert@count stored from wreg
  8556  1FB8  00F8               	movwf	I2C_MasterTRBInsert@count
  8557                           
  8558                           ;mcc_generated_files/i2c.c: 655:                                 uint8_t count,;mcc_gene
      +                          rated_files/i2c.c: 656:                                 I2C_TRANSACTION_REQUEST_BLOCK *p
      +                          trb_list,;mcc_generated_files/i2c.c: 657:                                 I2C_MESSAGE_ST
      +                          ATUS *pflag);mcc_generated_files/i2c.c: 658: {;mcc_generated_files/i2c.c: 661:     if (i
      +                          2c_object.trStatus.s.full != 1)
  8559  1FB9  0022               	movlb	2	; select bank2
  8560  1FBA  1860               	btfsc	(_i2c_object^(0+256)+2),0
  8561  1FBB  2FEF               	goto	l4062
  8562                           
  8563                           ;mcc_generated_files/i2c.c: 662:     {;mcc_generated_files/i2c.c: 663:         *pflag = 
      +                          I2C_MESSAGE_PENDING;
  8564  1FBC  3002               	movlw	2
  8565  1FBD  00F7               	movwf	??_I2C_MasterTRBInsert
  8566  1FBE  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8567  1FBF  0086               	movwf	6
  8568  1FC0  0187               	clrf	7
  8569  1FC1  0877               	movf	??_I2C_MasterTRBInsert,w
  8570  1FC2  0081               	movwf	1
  8571                           
  8572                           ;mcc_generated_files/i2c.c: 665:         i2c_object.pTrTail->ptrb_list = ptrb_list;
  8573  1FC3  0875               	movf	I2C_MasterTRBInsert@ptrb_list,w
  8574  1FC4  00F7               	movwf	??_I2C_MasterTRBInsert
  8575  1FC5  0A5E               	incf	_i2c_object^(0+256),w
  8576  1FC6  0086               	movwf	6
  8577  1FC7  3001               	movlw	1	; select bank2/3
  8578  1FC8  0087               	movwf	7
  8579  1FC9  0877               	movf	??_I2C_MasterTRBInsert,w
  8580  1FCA  0081               	movwf	1
  8581                           
  8582                           ;mcc_generated_files/i2c.c: 666:         i2c_object.pTrTail->count = count;
  8583  1FCB  0878               	movf	I2C_MasterTRBInsert@count,w
  8584  1FCC  00F7               	movwf	??_I2C_MasterTRBInsert
  8585  1FCD  085E               	movf	_i2c_object^(0+256),w
  8586  1FCE  0086               	movwf	6
  8587  1FCF  3001               	movlw	1	; select bank2/3
  8588  1FD0  0087               	movwf	7
  8589  1FD1  0877               	movf	??_I2C_MasterTRBInsert,w
  8590  1FD2  0081               	movwf	1
  8591                           
  8592                           ;mcc_generated_files/i2c.c: 667:         i2c_object.pTrTail->pTrFlag = pflag;
  8593  1FD3  085E               	movf	_i2c_object^(0+256),w
  8594  1FD4  3E02               	addlw	2
  8595  1FD5  0086               	movwf	6
  8596  1FD6  3001               	movlw	1	; select bank2/3
  8597  1FD7  0087               	movwf	7
  8598  1FD8  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8599  1FD9  3FC0               	movwi [0]fsr1
  8600  1FDA  3000               	movlw	0
  8601  1FDB  3FC1               	movwi [1]fsr1
  8602                           
  8603                           ;mcc_generated_files/i2c.c: 668:         i2c_object.pTrTail++;
  8604  1FDC  3004               	movlw	4
  8605  1FDD  00F7               	movwf	??_I2C_MasterTRBInsert
  8606  1FDE  0877               	movf	??_I2C_MasterTRBInsert,w
  8607  1FDF  07DE               	addwf	_i2c_object^(0+256),f
  8608                           
  8609                           ;mcc_generated_files/i2c.c: 671:         if (i2c_object.pTrTail == (i2c_tr_queue + 1))
  8610  1FE0  085E               	movf	_i2c_object^(0+256),w
  8611  1FE1  3AE9               	xorlw	(low ((_i2c_tr_queue| (0+256)+4)))& (0+255)
  8612  1FE2  1D03               	skipz
  8613  1FE3  2FE8               	goto	l4058
  8614                           
  8615                           ;mcc_generated_files/i2c.c: 672:         {;mcc_generated_files/i2c.c: 674:             i
      +                          2c_object.pTrTail = i2c_tr_queue;
  8616  1FE4  30E5               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
  8617  1FE5  00F7               	movwf	??_I2C_MasterTRBInsert
  8618  1FE6  0877               	movf	??_I2C_MasterTRBInsert,w
  8619  1FE7  00DE               	movwf	_i2c_object^(0+256)
  8620  1FE8                     l4058:	
  8621                           
  8622                           ;mcc_generated_files/i2c.c: 679:         i2c_object.trStatus.s.empty = 0;
  8623  1FE8  10E0               	bcf	(_i2c_object^(0+256)+2),1
  8624                           
  8625                           ;mcc_generated_files/i2c.c: 682:         if (i2c_object.pTrHead == i2c_object.pTrTail)
  8626  1FE9  085F               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
  8627  1FEA  065E               	xorwf	_i2c_object^(0+256),w
  8628  1FEB  1D03               	skipz
  8629  1FEC  2FF4               	goto	l4064
  8630                           
  8631                           ;mcc_generated_files/i2c.c: 683:         {;mcc_generated_files/i2c.c: 685:             i
      +                          2c_object.trStatus.s.full = 1;
  8632  1FED  1460               	bsf	(_i2c_object^(0+256)+2),0
  8633  1FEE  2FF4               	goto	l4064
  8634  1FEF                     l4062:	
  8635                           
  8636                           ;mcc_generated_files/i2c.c: 690:     {;mcc_generated_files/i2c.c: 691:         *pflag = 
      +                          I2C_MESSAGE_FAIL;
  8637  1FEF  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8638  1FF0  0086               	movwf	6
  8639  1FF1  0187               	clrf	7
  8640  1FF2  0181               	clrf	1
  8641  1FF3  0A81               	incf	1,f
  8642  1FF4                     l4064:	
  8643                           
  8644                           ;mcc_generated_files/i2c.c: 695:     if (*pflag == I2C_MESSAGE_PENDING)
  8645  1FF4  0876               	movf	I2C_MasterTRBInsert@pflag,w
  8646  1FF5  0086               	movwf	6
  8647  1FF6  0187               	clrf	7
  8648  1FF7  3002               	movlw	2
  8649  1FF8  0601               	xorwf	1,w
  8650  1FF9  1D03               	btfss	3,2
  8651  1FFA  0008               	return
  8652                           
  8653                           ;mcc_generated_files/i2c.c: 696:     {;mcc_generated_files/i2c.c: 697:         I2C_WaitF
      +                          orLastPacketToComplete();
  8654  1FFB  3187  27FC         	fcall	_I2C_WaitForLastPacketToComplete
  8655                           
  8656                           ;mcc_generated_files/i2c.c: 702:         PIR1bits.SSP1IF = 1;
  8657  1FFD  0020               	movlb	0	; select bank0
  8658  1FFE  1590               	bsf	16,3	;volatile
  8659  1FFF  0008               	return
  8660  2000                     __end_of_I2C_MasterTRBInsert:	
  8661                           
  8662                           	psect	text21
  8663  07FC                     __ptext21:	
  8664 ;; *************** function _I2C_WaitForLastPacketToComplete *****************
  8665 ;; Defined at:
  8666 ;;		line 644 in file "mcc_generated_files/i2c.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;		None
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;		None
  8671 ;; Return value:  Size  Location     Type
  8672 ;;                  1    wreg      void 
  8673 ;; Registers used:
  8674 ;;		wreg, status,2, status,0
  8675 ;; Tracked objects:
  8676 ;;		On entry : 1F/2
  8677 ;;		On exit  : 1F/2
  8678 ;;		Unchanged: 0/0
  8679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;Total ram usage:        0 bytes
  8685 ;; Hardware stack levels used:    1
  8686 ;; Hardware stack levels required when called:    3
  8687 ;; This function calls:
  8688 ;;		Nothing
  8689 ;; This function is called by:
  8690 ;;		_I2C_MasterTRBInsert
  8691 ;; This function uses a non-reentrant model
  8692 ;;
  8693                           
  8694                           
  8695                           ;psect for function _I2C_WaitForLastPacketToComplete
  8696  07FC                     _I2C_WaitForLastPacketToComplete:	
  8697  07FC                     l4044:	
  8698                           ;mcc_generated_files/i2c.c: 646:     while(i2c_state != S_MASTER_IDLE)
  8699                           
  8700                           ;incstack = 0
  8701                           ; Regs used in _I2C_WaitForLastPacketToComplete: [wreg+status,2+status,0]
  8702                           
  8703                           
  8704                           ;mcc_generated_files/i2c.c: 646:     while(i2c_state != S_MASTER_IDLE)
  8705  07FC  086D               	movf	_i2c_state^(0+256),w
  8706  07FD  1903               	btfsc	3,2
  8707  07FE  0008               	return
  8708  07FF  2FFC               	goto	l4044
  8709  0800                     __end_of_I2C_WaitForLastPacketToComplete:	
  8710                           
  8711                           	psect	text22
  8712  1C84                     __ptext22:	
  8713 ;; *************** function _I2C_MasterReadTRBBuild *****************
  8714 ;; Defined at:
  8715 ;;		line 708 in file "mcc_generated_files/i2c.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  ptrb            1    wreg     PTR struct .
  8718 ;;		 -> I2C_MasterRead@trBlock(5), 
  8719 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
  8720 ;;		 -> get_calib_data@calib_data(26), put_device_to_sleep@reg_data(4), write_power_mode@sensor_mode_reg_val(1), set_fil
      +ter_standby_settings@reg_data(1), 
  8721 ;;		 -> set_osr_press_temp_settings@reg_data(1), set_osr_humidity_settings@ctrl_meas(1), bme280_get_sensor_data@reg_data
      +(8), bme280_set_sensor_mode@last_set_mode(1), 
  8722 ;;		 -> bme280_get_sensor_settings@reg_data(4), bme280_set_sensor_settings@sensor_mode(1), bme280_init@chip_id(1), 
  8723 ;;  length          1    2[BANK0 ] unsigned char 
  8724 ;;  address         2    3[BANK0 ] unsigned short 
  8725 ;; Auto vars:     Size  Location     Type
  8726 ;;  ptrb            1    7[COMMON] PTR struct .
  8727 ;;		 -> I2C_MasterRead@trBlock(5), 
  8728 ;; Return value:  Size  Location     Type
  8729 ;;                  1    wreg      void 
  8730 ;; Registers used:
  8731 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8732 ;; Tracked objects:
  8733 ;;		On entry : 1F/0
  8734 ;;		On exit  : 1F/0
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8737 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8739 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;Total ram usage:        8 bytes
  8742 ;; Hardware stack levels used:    1
  8743 ;; Hardware stack levels required when called:    3
  8744 ;; This function calls:
  8745 ;;		Nothing
  8746 ;; This function is called by:
  8747 ;;		_I2C_MasterRead
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function _I2C_MasterReadTRBBuild
  8753  1C84                     _I2C_MasterReadTRBBuild:	
  8754                           
  8755                           ;incstack = 0
  8756                           ; Regs used in _I2C_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  8757                           ;I2C_MasterReadTRBBuild@ptrb stored from wreg
  8758  1C84  00F7               	movwf	I2C_MasterReadTRBBuild@ptrb
  8759                           
  8760                           ;mcc_generated_files/i2c.c: 709:                                 I2C_TRANSACTION_REQUEST
      +                          _BLOCK *ptrb,;mcc_generated_files/i2c.c: 710:                                 uint8_t *p
      +                          data,;mcc_generated_files/i2c.c: 711:                                 uint8_t length,;mc
      +                          c_generated_files/i2c.c: 712:                                 uint16_t address);mcc_gene
      +                          rated_files/i2c.c: 713: {;mcc_generated_files/i2c.c: 714:     ptrb->address = address <<
      +                           1;
  8761  1C85  0824               	movf	I2C_MasterReadTRBBuild@address+1,w
  8762  1C86  00F6               	movwf	??_I2C_MasterReadTRBBuild+1
  8763  1C87  0823               	movf	I2C_MasterReadTRBBuild@address,w
  8764  1C88  00F5               	movwf	??_I2C_MasterReadTRBBuild
  8765  1C89  35F5               	lslf	??_I2C_MasterReadTRBBuild,f
  8766  1C8A  0DF6               	rlf	??_I2C_MasterReadTRBBuild+1,f
  8767  1C8B  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  8768  1C8C  0086               	movwf	6
  8769  1C8D  3001               	movlw	1	; select bank2/3
  8770  1C8E  0087               	movwf	7
  8771  1C8F  0875               	movf	??_I2C_MasterReadTRBBuild,w
  8772  1C90  3FC0               	movwi [0]fsr1
  8773  1C91  0876               	movf	??_I2C_MasterReadTRBBuild+1,w
  8774  1C92  3FC1               	movwi [1]fsr1
  8775                           
  8776                           ;mcc_generated_files/i2c.c: 716:     ptrb->address |= 0x01;
  8777  1C93  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  8778  1C94  0086               	movwf	6
  8779  1C95  3001               	movlw	1	; select bank2/3
  8780  1C96  0087               	movwf	7
  8781  1C97  3001               	movlw	1
  8782  1C98  0481               	iorwf	1,f
  8783  1C99  3141               	addfsr 1,1
  8784  1C9A  3000               	movlw	0
  8785  1C9B  0481               	iorwf	1,f
  8786                           
  8787                           ;mcc_generated_files/i2c.c: 717:     ptrb->length = length;
  8788  1C9C  0822               	movf	I2C_MasterReadTRBBuild@length,w
  8789  1C9D  00F5               	movwf	??_I2C_MasterReadTRBBuild
  8790  1C9E  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  8791  1C9F  3E02               	addlw	2
  8792  1CA0  0086               	movwf	6
  8793  1CA1  3001               	movlw	1	; select bank2/3
  8794  1CA2  0087               	movwf	7
  8795  1CA3  0875               	movf	??_I2C_MasterReadTRBBuild,w
  8796  1CA4  0081               	movwf	1
  8797                           
  8798                           ;mcc_generated_files/i2c.c: 718:     ptrb->pbuffer = pdata;
  8799  1CA5  0877               	movf	I2C_MasterReadTRBBuild@ptrb,w
  8800  1CA6  3E03               	addlw	3
  8801  1CA7  0086               	movwf	6
  8802  1CA8  3001               	movlw	1	; select bank2/3
  8803  1CA9  0087               	movwf	7
  8804  1CAA  0820               	movf	I2C_MasterReadTRBBuild@pdata,w
  8805  1CAB  3FC0               	movwi [0]fsr1
  8806  1CAC  0821               	movf	I2C_MasterReadTRBBuild@pdata+1,w
  8807  1CAD  3FC1               	movwi [1]fsr1
  8808  1CAE  0008               	return
  8809  1CAF                     __end_of_I2C_MasterReadTRBBuild:	
  8810                           
  8811                           	psect	text23
  8812  132F                     __ptext23:	
  8813 ;; *************** function _bme280_compensate_data *****************
  8814 ;; Defined at:
  8815 ;;		line 729 in file "BME280_driver/bme280.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  sensor_comp     1    wreg     unsigned char 
  8818 ;;  uncomp_data     1   69[BANK1 ] PTR const struct bme280_
  8819 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  8820 ;;  comp_data       1   70[BANK1 ] PTR struct bme280_data
  8821 ;;		 -> main@sensor_data(12), 
  8822 ;;  calib_data      1   71[BANK1 ] PTR struct bme280_calib_
  8823 ;;		 -> main@env_sensor(51), 
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;  sensor_comp     1   74[BANK1 ] unsigned char 
  8826 ;;  rslt            1   73[BANK1 ] char 
  8827 ;; Return value:  Size  Location     Type
  8828 ;;                  1    wreg      char 
  8829 ;; Registers used:
  8830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8831 ;; Tracked objects:
  8832 ;;		On entry : 1F/2
  8833 ;;		On exit  : 1F/1
  8834 ;;		Unchanged: 0/0
  8835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8836 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;Total ram usage:        6 bytes
  8841 ;; Hardware stack levels used:    1
  8842 ;; Hardware stack levels required when called:    5
  8843 ;; This function calls:
  8844 ;;		_compensate_pressure
  8845 ;;		_compensate_temperature
  8846 ;; This function is called by:
  8847 ;;		_bme280_get_sensor_data
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           
  8852                           ;psect for function _bme280_compensate_data
  8853  132F                     _bme280_compensate_data:	
  8854                           
  8855                           ;incstack = 0
  8856                           ; Regs used in _bme280_compensate_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8857                           ;bme280_compensate_data@sensor_comp stored from wreg
  8858  132F  0021               	movlb	1	; select bank1
  8859  1330  00EA               	movwf	bme280_compensate_data@sensor_comp^(0+128)
  8860                           
  8861                           ;BME280_driver/bme280.c: 729: int8_t bme280_compensate_data(uint8_t sensor_comp,;BME280_
      +                          driver/bme280.c: 730:                               const struct bme280_uncomp_data *unc
      +                          omp_data,;BME280_driver/bme280.c: 731:                               struct bme280_data 
      +                          *comp_data,;BME280_driver/bme280.c: 732:                               struct bme280_cal
      +                          ib_data *calib_data);BME280_driver/bme280.c: 733: {;BME280_driver/bme280.c: 734:     int
      +                          8_t rslt = 0;
  8862  1331  01E9               	clrf	bme280_compensate_data@rslt^(0+128)
  8863                           
  8864                           ;BME280_driver/bme280.c: 736:     if ((uncomp_data != ((void*)0)) && (comp_data != ((voi
      +                          d*)0)) && (calib_data != ((void*)0)))
  8865  1332  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  8866  1333  1903               	btfsc	3,2
  8867  1334  2BA3               	goto	l124
  8868  1335  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8869  1336  1903               	btfsc	3,2
  8870  1337  2BA3               	goto	l124
  8871  1338  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  8872  1339  1903               	btfsc	3,2
  8873  133A  2BA3               	goto	l124
  8874                           
  8875                           ;BME280_driver/bme280.c: 737:     {;BME280_driver/bme280.c: 739:         comp_data->temp
      +                          erature = 0;
  8876  133B  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8877  133C  3E04               	addlw	4
  8878  133D  0086               	movwf	6
  8879  133E  3001               	movlw	1	; select bank2/3
  8880  133F  0087               	movwf	7
  8881  1340  3000               	movlw	0
  8882  1341  3FC0               	movwi [0]fsr1
  8883  1342  3000               	movlw	0
  8884  1343  3FC1               	movwi [1]fsr1
  8885  1344  3FC2               	movwi [2]fsr1
  8886  1345  3FC3               	movwi [3]fsr1
  8887                           
  8888                           ;BME280_driver/bme280.c: 740:         comp_data->pressure = 0;
  8889  1346  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8890  1347  0086               	movwf	6
  8891  1348  3001               	movlw	1	; select bank2/3
  8892  1349  0087               	movwf	7
  8893  134A  3000               	movlw	0
  8894  134B  3FC0               	movwi [0]fsr1
  8895  134C  3FC1               	movwi [1]fsr1
  8896  134D  3FC2               	movwi [2]fsr1
  8897  134E  3FC3               	movwi [3]fsr1
  8898                           
  8899                           ;BME280_driver/bme280.c: 741:         comp_data->humidity = 0;
  8900  134F  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8901  1350  3E08               	addlw	8
  8902  1351  0086               	movwf	6
  8903  1352  3001               	movlw	1	; select bank2/3
  8904  1353  0087               	movwf	7
  8905  1354  3000               	movlw	0
  8906  1355  3FC0               	movwi [0]fsr1
  8907  1356  3000               	movlw	0
  8908  1357  3FC1               	movwi [1]fsr1
  8909  1358  3FC2               	movwi [2]fsr1
  8910  1359  3FC3               	movwi [3]fsr1
  8911                           
  8912                           ;BME280_driver/bme280.c: 744:         if (sensor_comp & (1 | 1 << 1 | 1 << 2))
  8913  135A  086A               	movf	bme280_compensate_data@sensor_comp^(0+128),w
  8914  135B  3907               	andlw	7
  8915  135C  1903               	btfsc	3,2
  8916  135D  2B77               	goto	l4574
  8917                           
  8918                           ;BME280_driver/bme280.c: 745:         {;BME280_driver/bme280.c: 747:             comp_da
      +                          ta->temperature = compensate_temperature(uncomp_data, calib_data);
  8919  135E  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  8920  135F  00E8               	movwf	??_bme280_compensate_data^(0+128)
  8921  1360  0868               	movf	??_bme280_compensate_data^(0+128),w
  8922  1361  0020               	movlb	0	; select bank0
  8923  1362  00B7               	movwf	compensate_temperature@calib_data
  8924  1363  0021               	movlb	1	; select bank1
  8925  1364  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  8926  1365  3182  2281  3193   	fcall	_compensate_temperature
  8927  1368  0021               	movlb	1	; select bank1
  8928  1369  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8929  136A  3E04               	addlw	4
  8930  136B  0086               	movwf	6
  8931  136C  3001               	movlw	1	; select bank2/3
  8932  136D  0087               	movwf	7
  8933  136E  0020               	movlb	0	; select bank0
  8934  136F  0837               	movf	?_compensate_temperature,w
  8935  1370  3FC0               	movwi [0]fsr1
  8936  1371  0838               	movf	?_compensate_temperature+1,w
  8937  1372  3FC1               	movwi [1]fsr1
  8938  1373  0839               	movf	?_compensate_temperature+2,w
  8939  1374  3FC2               	movwi [2]fsr1
  8940  1375  083A               	movf	?_compensate_temperature+3,w
  8941  1376  3FC3               	movwi [3]fsr1
  8942  1377                     l4574:	
  8943                           
  8944                           ;BME280_driver/bme280.c: 749:         if (sensor_comp & 1)
  8945  1377  0021               	movlb	1	; select bank1
  8946  1378  1C6A               	btfss	bme280_compensate_data@sensor_comp^(0+128),0
  8947  1379  2B92               	goto	l4578
  8948                           
  8949                           ;BME280_driver/bme280.c: 750:         {;BME280_driver/bme280.c: 752:             comp_da
      +                          ta->pressure = compensate_pressure(uncomp_data, calib_data);
  8950  137A  0867               	movf	bme280_compensate_data@calib_data^(0+128),w
  8951  137B  00E8               	movwf	??_bme280_compensate_data^(0+128)
  8952  137C  0868               	movf	??_bme280_compensate_data^(0+128),w
  8953  137D  0020               	movlb	0	; select bank0
  8954  137E  00D2               	movwf	compensate_pressure@calib_data
  8955  137F  0021               	movlb	1	; select bank1
  8956  1380  0865               	movf	bme280_compensate_data@uncomp_data^(0+128),w
  8957  1381  3196  266A  3193   	fcall	_compensate_pressure
  8958  1384  0021               	movlb	1	; select bank1
  8959  1385  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8960  1386  0086               	movwf	6
  8961  1387  3001               	movlw	1	; select bank2/3
  8962  1388  0087               	movwf	7
  8963  1389  0020               	movlb	0	; select bank0
  8964  138A  0852               	movf	?_compensate_pressure,w
  8965  138B  3FC0               	movwi [0]fsr1
  8966  138C  0853               	movf	?_compensate_pressure+1,w
  8967  138D  3FC1               	movwi [1]fsr1
  8968  138E  0854               	movf	?_compensate_pressure+2,w
  8969  138F  3FC2               	movwi [2]fsr1
  8970  1390  0855               	movf	?_compensate_pressure+3,w
  8971  1391  3FC3               	movwi [3]fsr1
  8972  1392                     l4578:	
  8973                           
  8974                           ;BME280_driver/bme280.c: 754:         if (sensor_comp & 1 << 2)
  8975  1392  0021               	movlb	1	; select bank1
  8976  1393  1D6A               	btfss	bme280_compensate_data@sensor_comp^(0+128),2
  8977  1394  2BA5               	goto	l4582
  8978                           
  8979                           ;BME280_driver/bme280.c: 755:         {;BME280_driver/bme280.c: 761:             comp_da
      +                          ta->humidity = 0xFFFF;
  8980  1395  0866               	movf	bme280_compensate_data@comp_data^(0+128),w
  8981  1396  3E08               	addlw	8
  8982  1397  0086               	movwf	6
  8983  1398  3001               	movlw	1	; select bank2/3
  8984  1399  0087               	movwf	7
  8985  139A  30FF               	movlw	255
  8986  139B  3FC0               	movwi [0]fsr1
  8987  139C  30FF               	movlw	255
  8988  139D  3FC1               	movwi [1]fsr1
  8989  139E  3000               	movlw	0
  8990  139F  3FC2               	movwi [2]fsr1
  8991  13A0  3000               	movlw	0
  8992  13A1  3FC3               	movwi [3]fsr1
  8993  13A2  2BA5               	goto	l4582
  8994  13A3                     l124:	
  8995                           ;BME280_driver/bme280.c: 765:     else
  8996                           
  8997                           
  8998                           ;BME280_driver/bme280.c: 766:     {;BME280_driver/bme280.c: 767:         rslt = -1;
  8999  13A3  01E9               	clrf	bme280_compensate_data@rslt^(0+128)
  9000  13A4  03E9               	decf	bme280_compensate_data@rslt^(0+128),f
  9001  13A5                     l4582:	
  9002                           
  9003                           ;BME280_driver/bme280.c: 770:     return rslt;
  9004  13A5  0869               	movf	bme280_compensate_data@rslt^(0+128),w
  9005  13A6  0008               	return
  9006  13A7                     __end_of_bme280_compensate_data:	
  9007                           
  9008                           	psect	text24
  9009  0281                     __ptext24:	
  9010 ;; *************** function _compensate_temperature *****************
  9011 ;; Defined at:
  9012 ;;		line 1126 in file "BME280_driver/bme280.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  9015 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9016 ;;  calib_data      1   23[BANK0 ] PTR struct bme280_calib_
  9017 ;;		 -> main@env_sensor(51), 
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  uncomp_data     1   53[BANK0 ] PTR const struct bme280_
  9020 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9021 ;;  temperature     4   58[BANK0 ] long 
  9022 ;;  var2            4   54[BANK0 ] long 
  9023 ;;  var1            4   49[BANK0 ] long 
  9024 ;;  temperature_    4   45[BANK0 ] long 
  9025 ;;  temperature_    4    0        long 
  9026 ;; Return value:  Size  Location     Type
  9027 ;;                  4   23[BANK0 ] long 
  9028 ;; Registers used:
  9029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9030 ;; Tracked objects:
  9031 ;;		On entry : 1F/1
  9032 ;;		On exit  : 1F/0
  9033 ;;		Unchanged: 0/0
  9034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9035 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;Total ram usage:       39 bytes
  9040 ;; Hardware stack levels used:    1
  9041 ;; Hardware stack levels required when called:    4
  9042 ;; This function calls:
  9043 ;;		___aldiv
  9044 ;;		___lmul
  9045 ;; This function is called by:
  9046 ;;		_bme280_compensate_data
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           
  9051                           ;psect for function _compensate_temperature
  9052  0281                     _compensate_temperature:	
  9053                           
  9054                           ;incstack = 0
  9055                           ; Regs used in _compensate_temperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9056                           ;compensate_temperature@uncomp_data stored from wreg
  9057  0281  0020               	movlb	0	; select bank0
  9058  0282  00D5               	movwf	compensate_temperature@uncomp_data
  9059                           
  9060                           ;BME280_driver/bme280.c: 1133:     int32_t temperature_max = 8500;
  9061  0283  3000               	movlw	0
  9062  0284  00D0               	movwf	compensate_temperature@temperature_max+3
  9063  0285  3000               	movlw	0
  9064  0286  00CF               	movwf	compensate_temperature@temperature_max+2
  9065  0287  3021               	movlw	33
  9066  0288  00CE               	movwf	compensate_temperature@temperature_max+1
  9067  0289  3034               	movlw	52
  9068  028A  00CD               	movwf	compensate_temperature@temperature_max
  9069                           
  9070                           ;BME280_driver/bme280.c: 1135:     var1 = (int32_t)((uncomp_data->temperature / 8) - ((i
      +                          nt32_t)calib_data->dig_T1 * 2));
  9071  028B  0837               	movf	compensate_temperature@calib_data,w
  9072  028C  0086               	movwf	6
  9073  028D  3001               	movlw	1	; select bank2/3
  9074  028E  0087               	movwf	7
  9075  028F  3F40               	moviw [0]fsr1
  9076  0290  00BB               	movwf	??_compensate_temperature
  9077  0291  3F41               	moviw [1]fsr1
  9078  0292  00BC               	movwf	??_compensate_temperature+1
  9079  0293  083B               	movf	??_compensate_temperature,w
  9080  0294  00BD               	movwf	??_compensate_temperature+2
  9081  0295  083C               	movf	??_compensate_temperature+1,w
  9082  0296  00BE               	movwf	??_compensate_temperature+3
  9083  0297  01BF               	clrf	??_compensate_temperature+4
  9084  0298  01C0               	clrf	??_compensate_temperature+5
  9085  0299  3001               	movlw	1
  9086  029A                     u4265:	
  9087  029A  35BD               	lslf	??_compensate_temperature+2,f
  9088  029B  0DBE               	rlf	??_compensate_temperature+3,f
  9089  029C  0DBF               	rlf	??_compensate_temperature+4,f
  9090  029D  0DC0               	rlf	??_compensate_temperature+5,f
  9091  029E  0B89               	decfsz	9,f
  9092  029F  2A9A               	goto	u4265
  9093  02A0  0855               	movf	compensate_temperature@uncomp_data,w
  9094  02A1  3E04               	addlw	4
  9095  02A2  0086               	movwf	6
  9096  02A3  3001               	movlw	1	; select bank2/3
  9097  02A4  0087               	movwf	7
  9098  02A5  3F40               	moviw [0]fsr1
  9099  02A6  00C1               	movwf	??_compensate_temperature+6
  9100  02A7  3F41               	moviw [1]fsr1
  9101  02A8  00C2               	movwf	??_compensate_temperature+7
  9102  02A9  3F42               	moviw [2]fsr1
  9103  02AA  00C3               	movwf	??_compensate_temperature+8
  9104  02AB  3F43               	moviw [3]fsr1
  9105  02AC  00C4               	movwf	??_compensate_temperature+9
  9106  02AD  3003               	movlw	3
  9107  02AE                     u4275:	
  9108  02AE  36C4               	lsrf	??_compensate_temperature+9,f
  9109  02AF  0CC3               	rrf	??_compensate_temperature+8,f
  9110  02B0  0CC2               	rrf	??_compensate_temperature+7,f
  9111  02B1  0CC1               	rrf	??_compensate_temperature+6,f
  9112  02B2  0B89               	decfsz	9,f
  9113  02B3  2AAE               	goto	u4275
  9114  02B4  083D               	movf	??_compensate_temperature+2,w
  9115  02B5  02C1               	subwf	??_compensate_temperature+6,f
  9116  02B6  083E               	movf	??_compensate_temperature+3,w
  9117  02B7  3BC2               	subwfb	??_compensate_temperature+7,f
  9118  02B8  083F               	movf	??_compensate_temperature+4,w
  9119  02B9  3BC3               	subwfb	??_compensate_temperature+8,f
  9120  02BA  0840               	movf	??_compensate_temperature+5,w
  9121  02BB  3BC4               	subwfb	??_compensate_temperature+9,f
  9122  02BC  0844               	movf	??_compensate_temperature+9,w
  9123  02BD  00D4               	movwf	compensate_temperature@var1+3
  9124  02BE  0843               	movf	??_compensate_temperature+8,w
  9125  02BF  00D3               	movwf	compensate_temperature@var1+2
  9126  02C0  0842               	movf	??_compensate_temperature+7,w
  9127  02C1  00D2               	movwf	compensate_temperature@var1+1
  9128  02C2  0841               	movf	??_compensate_temperature+6,w
  9129  02C3  00D1               	movwf	compensate_temperature@var1
  9130                           
  9131                           ;BME280_driver/bme280.c: 1136:     var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
  9132  02C4  3000               	movlw	0
  9133  02C5  00AB               	movwf	___aldiv@divisor+3
  9134  02C6  3000               	movlw	0
  9135  02C7  00AA               	movwf	___aldiv@divisor+2
  9136  02C8  3008               	movlw	8
  9137  02C9  00A9               	movwf	___aldiv@divisor+1
  9138  02CA  3000               	movlw	0
  9139  02CB  00A8               	movwf	___aldiv@divisor
  9140  02CC  0837               	movf	compensate_temperature@calib_data,w
  9141  02CD  3E02               	addlw	2
  9142  02CE  0086               	movwf	6
  9143  02CF  3001               	movlw	1	; select bank2/3
  9144  02D0  0087               	movwf	7
  9145  02D1  3F40               	moviw [0]fsr1
  9146  02D2  00BB               	movwf	??_compensate_temperature
  9147  02D3  3F41               	moviw [1]fsr1
  9148  02D4  00BC               	movwf	??_compensate_temperature+1
  9149  02D5  083B               	movf	??_compensate_temperature,w
  9150  02D6  00A0               	movwf	___lmul@multiplier
  9151  02D7  083C               	movf	??_compensate_temperature+1,w
  9152  02D8  00A1               	movwf	___lmul@multiplier+1
  9153  02D9  0D89               	rlf	9,f
  9154  02DA  3B89               	subwfb	9,f
  9155  02DB  0989               	comf	9,f
  9156  02DC  00A2               	movwf	___lmul@multiplier+2
  9157  02DD  00A3               	movwf	___lmul@multiplier+3
  9158  02DE  0854               	movf	compensate_temperature@var1+3,w
  9159  02DF  00A7               	movwf	___lmul@multiplicand+3
  9160  02E0  0853               	movf	compensate_temperature@var1+2,w
  9161  02E1  00A6               	movwf	___lmul@multiplicand+2
  9162  02E2  0852               	movf	compensate_temperature@var1+1,w
  9163  02E3  00A5               	movwf	___lmul@multiplicand+1
  9164  02E4  0851               	movf	compensate_temperature@var1,w
  9165  02E5  00A4               	movwf	___lmul@multiplicand
  9166  02E6  319D  2561  3182   	fcall	___lmul
  9167  02E9  0823               	movf	?___lmul+3,w
  9168  02EA  00AF               	movwf	___aldiv@dividend+3
  9169  02EB  0822               	movf	?___lmul+2,w
  9170  02EC  00AE               	movwf	___aldiv@dividend+2
  9171  02ED  0821               	movf	?___lmul+1,w
  9172  02EE  00AD               	movwf	___aldiv@dividend+1
  9173  02EF  0820               	movf	?___lmul,w
  9174  02F0  00AC               	movwf	___aldiv@dividend
  9175  02F1  3194  2421  3182   	fcall	___aldiv
  9176  02F4  082B               	movf	?___aldiv+3,w
  9177  02F5  00D4               	movwf	compensate_temperature@var1+3
  9178  02F6  082A               	movf	?___aldiv+2,w
  9179  02F7  00D3               	movwf	compensate_temperature@var1+2
  9180  02F8  0829               	movf	?___aldiv+1,w
  9181  02F9  00D2               	movwf	compensate_temperature@var1+1
  9182  02FA  0828               	movf	?___aldiv,w
  9183  02FB  00D1               	movwf	compensate_temperature@var1
  9184                           
  9185                           ;BME280_driver/bme280.c: 1137:     var2 = (int32_t)((uncomp_data->temperature / 16) - ((
      +                          int32_t)calib_data->dig_T1));
  9186  02FC  0837               	movf	compensate_temperature@calib_data,w
  9187  02FD  0086               	movwf	6
  9188  02FE  3001               	movlw	1	; select bank2/3
  9189  02FF  0087               	movwf	7
  9190  0300  3F40               	moviw [0]fsr1
  9191  0301  00BB               	movwf	??_compensate_temperature
  9192  0302  3F41               	moviw [1]fsr1
  9193  0303  00BC               	movwf	??_compensate_temperature+1
  9194  0304  083B               	movf	??_compensate_temperature,w
  9195  0305  00BD               	movwf	??_compensate_temperature+2
  9196  0306  083C               	movf	??_compensate_temperature+1,w
  9197  0307  00BE               	movwf	??_compensate_temperature+3
  9198  0308  01BF               	clrf	??_compensate_temperature+4
  9199  0309  01C0               	clrf	??_compensate_temperature+5
  9200  030A  0855               	movf	compensate_temperature@uncomp_data,w
  9201  030B  3E04               	addlw	4
  9202  030C  0086               	movwf	6
  9203  030D  3001               	movlw	1	; select bank2/3
  9204  030E  0087               	movwf	7
  9205  030F  3F40               	moviw [0]fsr1
  9206  0310  00C1               	movwf	??_compensate_temperature+6
  9207  0311  3F41               	moviw [1]fsr1
  9208  0312  00C2               	movwf	??_compensate_temperature+7
  9209  0313  3F42               	moviw [2]fsr1
  9210  0314  00C3               	movwf	??_compensate_temperature+8
  9211  0315  3F43               	moviw [3]fsr1
  9212  0316  00C4               	movwf	??_compensate_temperature+9
  9213  0317  3004               	movlw	4
  9214  0318                     u4285:	
  9215  0318  36C4               	lsrf	??_compensate_temperature+9,f
  9216  0319  0CC3               	rrf	??_compensate_temperature+8,f
  9217  031A  0CC2               	rrf	??_compensate_temperature+7,f
  9218  031B  0CC1               	rrf	??_compensate_temperature+6,f
  9219  031C  0B89               	decfsz	9,f
  9220  031D  2B18               	goto	u4285
  9221  031E  083D               	movf	??_compensate_temperature+2,w
  9222  031F  02C1               	subwf	??_compensate_temperature+6,f
  9223  0320  083E               	movf	??_compensate_temperature+3,w
  9224  0321  3BC2               	subwfb	??_compensate_temperature+7,f
  9225  0322  083F               	movf	??_compensate_temperature+4,w
  9226  0323  3BC3               	subwfb	??_compensate_temperature+8,f
  9227  0324  0840               	movf	??_compensate_temperature+5,w
  9228  0325  3BC4               	subwfb	??_compensate_temperature+9,f
  9229  0326  0844               	movf	??_compensate_temperature+9,w
  9230  0327  00D9               	movwf	compensate_temperature@var2+3
  9231  0328  0843               	movf	??_compensate_temperature+8,w
  9232  0329  00D8               	movwf	compensate_temperature@var2+2
  9233  032A  0842               	movf	??_compensate_temperature+7,w
  9234  032B  00D7               	movwf	compensate_temperature@var2+1
  9235  032C  0841               	movf	??_compensate_temperature+6,w
  9236  032D  00D6               	movwf	compensate_temperature@var2
  9237                           
  9238                           ;BME280_driver/bme280.c: 1138:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  9239  032E  3000               	movlw	0
  9240  032F  00AB               	movwf	___aldiv@divisor+3
  9241  0330  3000               	movlw	0
  9242  0331  00AA               	movwf	___aldiv@divisor+2
  9243  0332  3010               	movlw	16
  9244  0333  00A9               	movwf	___aldiv@divisor+1
  9245  0334  3000               	movlw	0
  9246  0335  00A8               	movwf	___aldiv@divisor
  9247  0336  0859               	movf	compensate_temperature@var2+3,w
  9248  0337  00A3               	movwf	___lmul@multiplier+3
  9249  0338  0858               	movf	compensate_temperature@var2+2,w
  9250  0339  00A2               	movwf	___lmul@multiplier+2
  9251  033A  0857               	movf	compensate_temperature@var2+1,w
  9252  033B  00A1               	movwf	___lmul@multiplier+1
  9253  033C  0856               	movf	compensate_temperature@var2,w
  9254  033D  00A0               	movwf	___lmul@multiplier
  9255  033E  0859               	movf	compensate_temperature@var2+3,w
  9256  033F  00A7               	movwf	___lmul@multiplicand+3
  9257  0340  0858               	movf	compensate_temperature@var2+2,w
  9258  0341  00A6               	movwf	___lmul@multiplicand+2
  9259  0342  0857               	movf	compensate_temperature@var2+1,w
  9260  0343  00A5               	movwf	___lmul@multiplicand+1
  9261  0344  0856               	movf	compensate_temperature@var2,w
  9262  0345  00A4               	movwf	___lmul@multiplicand
  9263  0346  319D  2561  3182   	fcall	___lmul
  9264  0349  0823               	movf	?___lmul+3,w
  9265  034A  00AF               	movwf	___aldiv@dividend+3
  9266  034B  0822               	movf	?___lmul+2,w
  9267  034C  00AE               	movwf	___aldiv@dividend+2
  9268  034D  0821               	movf	?___lmul+1,w
  9269  034E  00AD               	movwf	___aldiv@dividend+1
  9270  034F  0820               	movf	?___lmul,w
  9271  0350  00AC               	movwf	___aldiv@dividend
  9272  0351  3194  2421  3182   	fcall	___aldiv
  9273  0354  082B               	movf	?___aldiv+3,w
  9274  0355  00C8               	movwf	_compensate_temperature$2532+3
  9275  0356  082A               	movf	?___aldiv+2,w
  9276  0357  00C7               	movwf	_compensate_temperature$2532+2
  9277  0358  0829               	movf	?___aldiv+1,w
  9278  0359  00C6               	movwf	_compensate_temperature$2532+1
  9279  035A  0828               	movf	?___aldiv,w
  9280  035B  00C5               	movwf	_compensate_temperature$2532
  9281                           
  9282                           ;BME280_driver/bme280.c: 1138:     var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data
      +                          ->dig_T3)) / 16384;
  9283  035C  3000               	movlw	0
  9284  035D  00AB               	movwf	___aldiv@divisor+3
  9285  035E  3000               	movlw	0
  9286  035F  00AA               	movwf	___aldiv@divisor+2
  9287  0360  3040               	movlw	64
  9288  0361  00A9               	movwf	___aldiv@divisor+1
  9289  0362  3000               	movlw	0
  9290  0363  00A8               	movwf	___aldiv@divisor
  9291  0364  0848               	movf	_compensate_temperature$2532+3,w
  9292  0365  00A3               	movwf	___lmul@multiplier+3
  9293  0366  0847               	movf	_compensate_temperature$2532+2,w
  9294  0367  00A2               	movwf	___lmul@multiplier+2
  9295  0368  0846               	movf	_compensate_temperature$2532+1,w
  9296  0369  00A1               	movwf	___lmul@multiplier+1
  9297  036A  0845               	movf	_compensate_temperature$2532,w
  9298  036B  00A0               	movwf	___lmul@multiplier
  9299  036C  0837               	movf	compensate_temperature@calib_data,w
  9300  036D  3E04               	addlw	4
  9301  036E  0086               	movwf	6
  9302  036F  3001               	movlw	1	; select bank2/3
  9303  0370  0087               	movwf	7
  9304  0371  3F40               	moviw [0]fsr1
  9305  0372  00BB               	movwf	??_compensate_temperature
  9306  0373  3F41               	moviw [1]fsr1
  9307  0374  00BC               	movwf	??_compensate_temperature+1
  9308  0375  083B               	movf	??_compensate_temperature,w
  9309  0376  00A4               	movwf	___lmul@multiplicand
  9310  0377  083C               	movf	??_compensate_temperature+1,w
  9311  0378  00A5               	movwf	___lmul@multiplicand+1
  9312  0379  0D89               	rlf	9,f
  9313  037A  3B89               	subwfb	9,f
  9314  037B  0989               	comf	9,f
  9315  037C  00A6               	movwf	___lmul@multiplicand+2
  9316  037D  00A7               	movwf	___lmul@multiplicand+3
  9317  037E  319D  2561  3182   	fcall	___lmul
  9318  0381  0823               	movf	?___lmul+3,w
  9319  0382  00AF               	movwf	___aldiv@dividend+3
  9320  0383  0822               	movf	?___lmul+2,w
  9321  0384  00AE               	movwf	___aldiv@dividend+2
  9322  0385  0821               	movf	?___lmul+1,w
  9323  0386  00AD               	movwf	___aldiv@dividend+1
  9324  0387  0820               	movf	?___lmul,w
  9325  0388  00AC               	movwf	___aldiv@dividend
  9326  0389  3194  2421  3182   	fcall	___aldiv
  9327  038C  082B               	movf	?___aldiv+3,w
  9328  038D  00D9               	movwf	compensate_temperature@var2+3
  9329  038E  082A               	movf	?___aldiv+2,w
  9330  038F  00D8               	movwf	compensate_temperature@var2+2
  9331  0390  0829               	movf	?___aldiv+1,w
  9332  0391  00D7               	movwf	compensate_temperature@var2+1
  9333  0392  0828               	movf	?___aldiv,w
  9334  0393  00D6               	movwf	compensate_temperature@var2
  9335                           
  9336                           ;BME280_driver/bme280.c: 1139:     calib_data->t_fine = var1 + var2;
  9337  0394  0851               	movf	compensate_temperature@var1,w
  9338  0395  0756               	addwf	compensate_temperature@var2,w
  9339  0396  00BB               	movwf	??_compensate_temperature
  9340  0397  0852               	movf	compensate_temperature@var1+1,w
  9341  0398  3D57               	addwfc	compensate_temperature@var2+1,w
  9342  0399  00BC               	movwf	??_compensate_temperature+1
  9343  039A  0853               	movf	compensate_temperature@var1+2,w
  9344  039B  3D58               	addwfc	compensate_temperature@var2+2,w
  9345  039C  00BD               	movwf	??_compensate_temperature+2
  9346  039D  0854               	movf	compensate_temperature@var1+3,w
  9347  039E  3D59               	addwfc	compensate_temperature@var2+3,w
  9348  039F  00BE               	movwf	??_compensate_temperature+3
  9349  03A0  0837               	movf	compensate_temperature@calib_data,w
  9350  03A1  3E21               	addlw	33
  9351  03A2  0086               	movwf	6
  9352  03A3  3001               	movlw	1	; select bank2/3
  9353  03A4  0087               	movwf	7
  9354  03A5  083B               	movf	??_compensate_temperature,w
  9355  03A6  3FC0               	movwi [0]fsr1
  9356  03A7  083C               	movf	??_compensate_temperature+1,w
  9357  03A8  3FC1               	movwi [1]fsr1
  9358  03A9  083D               	movf	??_compensate_temperature+2,w
  9359  03AA  3FC2               	movwi [2]fsr1
  9360  03AB  083E               	movf	??_compensate_temperature+3,w
  9361  03AC  3FC3               	movwi [3]fsr1
  9362                           
  9363                           ;BME280_driver/bme280.c: 1140:     temperature = (calib_data->t_fine * 5 + 128) / 256;
  9364  03AD  3000               	movlw	0
  9365  03AE  00AB               	movwf	___aldiv@divisor+3
  9366  03AF  3000               	movlw	0
  9367  03B0  00AA               	movwf	___aldiv@divisor+2
  9368  03B1  3001               	movlw	1
  9369  03B2  00A9               	movwf	___aldiv@divisor+1
  9370  03B3  3000               	movlw	0
  9371  03B4  00A8               	movwf	___aldiv@divisor
  9372  03B5  3080               	movlw	128
  9373  03B6  00BB               	movwf	??_compensate_temperature
  9374  03B7  3000               	movlw	0
  9375  03B8  00BC               	movwf	??_compensate_temperature+1
  9376  03B9  3000               	movlw	0
  9377  03BA  00BD               	movwf	??_compensate_temperature+2
  9378  03BB  3000               	movlw	0
  9379  03BC  00BE               	movwf	??_compensate_temperature+3
  9380  03BD  0837               	movf	compensate_temperature@calib_data,w
  9381  03BE  3E21               	addlw	33
  9382  03BF  0086               	movwf	6
  9383  03C0  3001               	movlw	1	; select bank2/3
  9384  03C1  0087               	movwf	7
  9385  03C2  3F40               	moviw [0]fsr1
  9386  03C3  00A0               	movwf	___lmul@multiplier
  9387  03C4  3F41               	moviw [1]fsr1
  9388  03C5  00A1               	movwf	___lmul@multiplier+1
  9389  03C6  3F42               	moviw [2]fsr1
  9390  03C7  00A2               	movwf	___lmul@multiplier+2
  9391  03C8  3F43               	moviw [3]fsr1
  9392  03C9  00A3               	movwf	___lmul@multiplier+3
  9393  03CA  3000               	movlw	0
  9394  03CB  00A7               	movwf	___lmul@multiplicand+3
  9395  03CC  3000               	movlw	0
  9396  03CD  00A6               	movwf	___lmul@multiplicand+2
  9397  03CE  3000               	movlw	0
  9398  03CF  00A5               	movwf	___lmul@multiplicand+1
  9399  03D0  3005               	movlw	5
  9400  03D1  00A4               	movwf	___lmul@multiplicand
  9401  03D2  319D  2561  3182   	fcall	___lmul
  9402  03D5  0820               	movf	?___lmul,w
  9403  03D6  07BB               	addwf	??_compensate_temperature,f
  9404  03D7  0821               	movf	?___lmul+1,w
  9405  03D8  3DBC               	addwfc	??_compensate_temperature+1,f
  9406  03D9  0822               	movf	?___lmul+2,w
  9407  03DA  3DBD               	addwfc	??_compensate_temperature+2,f
  9408  03DB  0823               	movf	?___lmul+3,w
  9409  03DC  3DBE               	addwfc	??_compensate_temperature+3,f
  9410  03DD  083E               	movf	??_compensate_temperature+3,w
  9411  03DE  00AF               	movwf	___aldiv@dividend+3
  9412  03DF  083D               	movf	??_compensate_temperature+2,w
  9413  03E0  00AE               	movwf	___aldiv@dividend+2
  9414  03E1  083C               	movf	??_compensate_temperature+1,w
  9415  03E2  00AD               	movwf	___aldiv@dividend+1
  9416  03E3  083B               	movf	??_compensate_temperature,w
  9417  03E4  00AC               	movwf	___aldiv@dividend
  9418  03E5  3194  2421  3182   	fcall	___aldiv
  9419  03E8  082B               	movf	?___aldiv+3,w
  9420  03E9  00DD               	movwf	compensate_temperature@temperature+3
  9421  03EA  082A               	movf	?___aldiv+2,w
  9422  03EB  00DC               	movwf	compensate_temperature@temperature+2
  9423  03EC  0829               	movf	?___aldiv+1,w
  9424  03ED  00DB               	movwf	compensate_temperature@temperature+1
  9425  03EE  0828               	movf	?___aldiv,w
  9426  03EF  00DA               	movwf	compensate_temperature@temperature
  9427                           
  9428                           ;BME280_driver/bme280.c: 1141:     if (temperature < temperature_min)
  9429  03F0  1FDD               	btfss	compensate_temperature@temperature+3,7
  9430  03F1  2C04               	goto	l4332
  9431  03F2  3060               	movlw	96
  9432  03F3  025A               	subwf	compensate_temperature@temperature,w
  9433  03F4  30F0               	movlw	240
  9434  03F5  3B5B               	subwfb	compensate_temperature@temperature+1,w
  9435  03F6  30FF               	movlw	255
  9436  03F7  3B5C               	subwfb	compensate_temperature@temperature+2,w
  9437  03F8  30FF               	movlw	255
  9438  03F9  3B5D               	subwfb	compensate_temperature@temperature+3,w
  9439  03FA  1803               	btfsc	3,0
  9440  03FB  2C04               	goto	l4332
  9441                           
  9442                           ;BME280_driver/bme280.c: 1142:     {;BME280_driver/bme280.c: 1143:         temperature =
      +                           temperature_min;
  9443  03FC  30FF               	movlw	255
  9444  03FD  00DD               	movwf	compensate_temperature@temperature+3
  9445  03FE  30FF               	movlw	255
  9446  03FF  00DC               	movwf	compensate_temperature@temperature+2
  9447  0400  30F0               	movlw	240
  9448  0401  00DB               	movwf	compensate_temperature@temperature+1
  9449  0402  3060               	movlw	96
  9450  0403  2C19               	goto	L4
  9451  0404                     l4332:	
  9452                           ;BME280_driver/bme280.c: 1144:     }
  9453                           
  9454  0404  1BDD               	btfsc	compensate_temperature@temperature+3,7
  9455  0405  2C1A               	goto	l183
  9456  0406  085D               	movf	compensate_temperature@temperature+3,w
  9457  0407  1D03               	btfss	3,2
  9458  0408  2C12               	goto	l4334
  9459  0409  085C               	movf	compensate_temperature@temperature+2,w
  9460  040A  1D03               	btfss	3,2
  9461  040B  2C12               	goto	l4334
  9462  040C  3035               	movlw	53
  9463  040D  025A               	subwf	compensate_temperature@temperature,w
  9464  040E  3021               	movlw	33
  9465  040F  3B5B               	subwfb	compensate_temperature@temperature+1,w
  9466  0410  1C03               	btfss	3,0
  9467  0411  2C1A               	goto	l183
  9468  0412                     l4334:	
  9469                           
  9470                           ;BME280_driver/bme280.c: 1146:     {;BME280_driver/bme280.c: 1147:         temperature =
      +                           temperature_max;
  9471  0412  3000               	movlw	0
  9472  0413  00DD               	movwf	compensate_temperature@temperature+3
  9473  0414  3000               	movlw	0
  9474  0415  00DC               	movwf	compensate_temperature@temperature+2
  9475  0416  3021               	movlw	33
  9476  0417  00DB               	movwf	compensate_temperature@temperature+1
  9477  0418  3034               	movlw	52
  9478  0419                     L4:	
  9479  0419  00DA               	movwf	compensate_temperature@temperature
  9480  041A                     l183:	
  9481                           
  9482                           ;BME280_driver/bme280.c: 1150:     return temperature;
  9483  041A  085D               	movf	compensate_temperature@temperature+3,w
  9484  041B  00BA               	movwf	?_compensate_temperature+3
  9485  041C  085C               	movf	compensate_temperature@temperature+2,w
  9486  041D  00B9               	movwf	?_compensate_temperature+2
  9487  041E  085B               	movf	compensate_temperature@temperature+1,w
  9488  041F  00B8               	movwf	?_compensate_temperature+1
  9489  0420  085A               	movf	compensate_temperature@temperature,w
  9490  0421  00B7               	movwf	?_compensate_temperature
  9491  0422  0008               	return
  9492  0423                     __end_of_compensate_temperature:	
  9493                           
  9494                           	psect	text25
  9495  1D61                     __ptext25:	
  9496 ;; *************** function ___lmul *****************
  9497 ;; Defined at:
  9498 ;;		line 15 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\Umul32.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  multiplier      4    0[BANK0 ] unsigned long 
  9501 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;  product         4    5[COMMON] unsigned long 
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  4    0[BANK0 ] unsigned long 
  9506 ;; Registers used:
  9507 ;;		wreg, status,2, status,0
  9508 ;; Tracked objects:
  9509 ;;		On entry : 1F/0
  9510 ;;		On exit  : 1F/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9513 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;Total ram usage:       12 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    3
  9520 ;; This function calls:
  9521 ;;		Nothing
  9522 ;; This function is called by:
  9523 ;;		_compensate_temperature
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           
  9528                           ;psect for function ___lmul
  9529  1D61                     ___lmul:	
  9530                           
  9531                           ;incstack = 0
  9532                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9533  1D61  3000               	movlw	0
  9534  1D62  00F8               	movwf	___lmul@product+3
  9535  1D63  3000               	movlw	0
  9536  1D64  00F7               	movwf	___lmul@product+2
  9537  1D65  3000               	movlw	0
  9538  1D66  00F6               	movwf	___lmul@product+1
  9539  1D67  3000               	movlw	0
  9540  1D68  00F5               	movwf	___lmul@product
  9541  1D69                     l4150:	
  9542  1D69  1C20               	btfss	___lmul@multiplier,0
  9543  1D6A  2D73               	goto	l4154
  9544  1D6B  0824               	movf	___lmul@multiplicand,w
  9545  1D6C  07F5               	addwf	___lmul@product,f
  9546  1D6D  0825               	movf	___lmul@multiplicand+1,w
  9547  1D6E  3DF6               	addwfc	___lmul@product+1,f
  9548  1D6F  0826               	movf	___lmul@multiplicand+2,w
  9549  1D70  3DF7               	addwfc	___lmul@product+2,f
  9550  1D71  0827               	movf	___lmul@multiplicand+3,w
  9551  1D72  3DF8               	addwfc	___lmul@product+3,f
  9552  1D73                     l4154:	
  9553  1D73  3001               	movlw	1
  9554  1D74                     u3875:	
  9555  1D74  35A4               	lslf	___lmul@multiplicand,f
  9556  1D75  0DA5               	rlf	___lmul@multiplicand+1,f
  9557  1D76  0DA6               	rlf	___lmul@multiplicand+2,f
  9558  1D77  0DA7               	rlf	___lmul@multiplicand+3,f
  9559  1D78  0B89               	decfsz	9,f
  9560  1D79  2D74               	goto	u3875
  9561  1D7A  3001               	movlw	1
  9562  1D7B                     u3885:	
  9563  1D7B  36A3               	lsrf	___lmul@multiplier+3,f
  9564  1D7C  0CA2               	rrf	___lmul@multiplier+2,f
  9565  1D7D  0CA1               	rrf	___lmul@multiplier+1,f
  9566  1D7E  0CA0               	rrf	___lmul@multiplier,f
  9567  1D7F  0B89               	decfsz	9,f
  9568  1D80  2D7B               	goto	u3885
  9569  1D81  0823               	movf	___lmul@multiplier+3,w
  9570  1D82  0422               	iorwf	___lmul@multiplier+2,w
  9571  1D83  0421               	iorwf	___lmul@multiplier+1,w
  9572  1D84  0420               	iorwf	___lmul@multiplier,w
  9573  1D85  1D03               	skipz
  9574  1D86  2D69               	goto	l4150
  9575  1D87  0878               	movf	___lmul@product+3,w
  9576  1D88  00A3               	movwf	?___lmul+3
  9577  1D89  0877               	movf	___lmul@product+2,w
  9578  1D8A  00A2               	movwf	?___lmul+2
  9579  1D8B  0876               	movf	___lmul@product+1,w
  9580  1D8C  00A1               	movwf	?___lmul+1
  9581  1D8D  0875               	movf	___lmul@product,w
  9582  1D8E  00A0               	movwf	?___lmul
  9583  1D8F  0008               	return
  9584  1D90                     __end_of___lmul:	
  9585                           
  9586                           	psect	text26
  9587  1421                     __ptext26:	
  9588 ;; *************** function ___aldiv *****************
  9589 ;; Defined at:
  9590 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aldiv.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;  divisor         4    8[BANK0 ] long 
  9593 ;;  dividend        4   12[BANK0 ] long 
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;  quotient        4   19[BANK0 ] long 
  9596 ;;  sign            1   18[BANK0 ] unsigned char 
  9597 ;;  counter         1   17[BANK0 ] unsigned char 
  9598 ;; Return value:  Size  Location     Type
  9599 ;;                  4    8[BANK0 ] long 
  9600 ;; Registers used:
  9601 ;;		wreg, status,2, status,0
  9602 ;; Tracked objects:
  9603 ;;		On entry : 1F/0
  9604 ;;		On exit  : 1F/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9607 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;Total ram usage:       15 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    3
  9614 ;; This function calls:
  9615 ;;		Nothing
  9616 ;; This function is called by:
  9617 ;;		_compensate_temperature
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           
  9622                           ;psect for function ___aldiv
  9623  1421                     ___aldiv:	
  9624                           
  9625                           ;incstack = 0
  9626                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9627  1421  01B2               	clrf	___aldiv@sign
  9628  1422  1FAB               	btfss	___aldiv@divisor+3,7
  9629  1423  2C31               	goto	l1027
  9630  1424  09A8               	comf	___aldiv@divisor,f
  9631  1425  09A9               	comf	___aldiv@divisor+1,f
  9632  1426  09AA               	comf	___aldiv@divisor+2,f
  9633  1427  09AB               	comf	___aldiv@divisor+3,f
  9634  1428  0AA8               	incf	___aldiv@divisor,f
  9635  1429  1903               	skipnz
  9636  142A  0AA9               	incf	___aldiv@divisor+1,f
  9637  142B  1903               	skipnz
  9638  142C  0AAA               	incf	___aldiv@divisor+2,f
  9639  142D  1903               	skipnz
  9640  142E  0AAB               	incf	___aldiv@divisor+3,f
  9641  142F  01B2               	clrf	___aldiv@sign
  9642  1430  0AB2               	incf	___aldiv@sign,f
  9643  1431                     l1027:	
  9644  1431  1FAF               	btfss	___aldiv@dividend+3,7
  9645  1432  2C42               	goto	l4182
  9646  1433  09AC               	comf	___aldiv@dividend,f
  9647  1434  09AD               	comf	___aldiv@dividend+1,f
  9648  1435  09AE               	comf	___aldiv@dividend+2,f
  9649  1436  09AF               	comf	___aldiv@dividend+3,f
  9650  1437  0AAC               	incf	___aldiv@dividend,f
  9651  1438  1903               	skipnz
  9652  1439  0AAD               	incf	___aldiv@dividend+1,f
  9653  143A  1903               	skipnz
  9654  143B  0AAE               	incf	___aldiv@dividend+2,f
  9655  143C  1903               	skipnz
  9656  143D  0AAF               	incf	___aldiv@dividend+3,f
  9657  143E  3001               	movlw	1
  9658  143F  00B0               	movwf	??___aldiv
  9659  1440  0830               	movf	??___aldiv,w
  9660  1441  06B2               	xorwf	___aldiv@sign,f
  9661  1442                     l4182:	
  9662  1442  3000               	movlw	0
  9663  1443  00B6               	movwf	___aldiv@quotient+3
  9664  1444  3000               	movlw	0
  9665  1445  00B5               	movwf	___aldiv@quotient+2
  9666  1446  3000               	movlw	0
  9667  1447  00B4               	movwf	___aldiv@quotient+1
  9668  1448  3000               	movlw	0
  9669  1449  00B3               	movwf	___aldiv@quotient
  9670  144A  082B               	movf	___aldiv@divisor+3,w
  9671  144B  042A               	iorwf	___aldiv@divisor+2,w
  9672  144C  0429               	iorwf	___aldiv@divisor+1,w
  9673  144D  0428               	iorwf	___aldiv@divisor,w
  9674  144E  1903               	skipnz
  9675  144F  2C8B               	goto	l4204
  9676  1450  01B1               	clrf	___aldiv@counter
  9677  1451  0AB1               	incf	___aldiv@counter,f
  9678  1452                     l4190:	
  9679  1452  1BAB               	btfsc	___aldiv@divisor+3,7
  9680  1453  2C60               	goto	l4192
  9681  1454  3001               	movlw	1
  9682  1455                     u3965:	
  9683  1455  35A8               	lslf	___aldiv@divisor,f
  9684  1456  0DA9               	rlf	___aldiv@divisor+1,f
  9685  1457  0DAA               	rlf	___aldiv@divisor+2,f
  9686  1458  0DAB               	rlf	___aldiv@divisor+3,f
  9687  1459  0B89               	decfsz	9,f
  9688  145A  2C55               	goto	u3965
  9689  145B  3001               	movlw	1
  9690  145C  00B0               	movwf	??___aldiv
  9691  145D  0830               	movf	??___aldiv,w
  9692  145E  07B1               	addwf	___aldiv@counter,f
  9693  145F  2C52               	goto	l4190
  9694  1460                     l4192:	
  9695  1460  3001               	movlw	1
  9696  1461                     u3985:	
  9697  1461  35B3               	lslf	___aldiv@quotient,f
  9698  1462  0DB4               	rlf	___aldiv@quotient+1,f
  9699  1463  0DB5               	rlf	___aldiv@quotient+2,f
  9700  1464  0DB6               	rlf	___aldiv@quotient+3,f
  9701  1465  0B89               	decfsz	9,f
  9702  1466  2C61               	goto	u3985
  9703  1467  082B               	movf	___aldiv@divisor+3,w
  9704  1468  022F               	subwf	___aldiv@dividend+3,w
  9705  1469  1D03               	skipz
  9706  146A  2C75               	goto	u3995
  9707  146B  082A               	movf	___aldiv@divisor+2,w
  9708  146C  022E               	subwf	___aldiv@dividend+2,w
  9709  146D  1D03               	skipz
  9710  146E  2C75               	goto	u3995
  9711  146F  0829               	movf	___aldiv@divisor+1,w
  9712  1470  022D               	subwf	___aldiv@dividend+1,w
  9713  1471  1D03               	skipz
  9714  1472  2C75               	goto	u3995
  9715  1473  0828               	movf	___aldiv@divisor,w
  9716  1474  022C               	subwf	___aldiv@dividend,w
  9717  1475                     u3995:	
  9718  1475  1C03               	skipc
  9719  1476  2C80               	goto	l4200
  9720  1477  0828               	movf	___aldiv@divisor,w
  9721  1478  02AC               	subwf	___aldiv@dividend,f
  9722  1479  0829               	movf	___aldiv@divisor+1,w
  9723  147A  3BAD               	subwfb	___aldiv@dividend+1,f
  9724  147B  082A               	movf	___aldiv@divisor+2,w
  9725  147C  3BAE               	subwfb	___aldiv@dividend+2,f
  9726  147D  082B               	movf	___aldiv@divisor+3,w
  9727  147E  3BAF               	subwfb	___aldiv@dividend+3,f
  9728  147F  1433               	bsf	___aldiv@quotient,0
  9729  1480                     l4200:	
  9730  1480  3001               	movlw	1
  9731  1481                     u4005:	
  9732  1481  36AB               	lsrf	___aldiv@divisor+3,f
  9733  1482  0CAA               	rrf	___aldiv@divisor+2,f
  9734  1483  0CA9               	rrf	___aldiv@divisor+1,f
  9735  1484  0CA8               	rrf	___aldiv@divisor,f
  9736  1485  0B89               	decfsz	9,f
  9737  1486  2C81               	goto	u4005
  9738  1487  3001               	movlw	1
  9739  1488  02B1               	subwf	___aldiv@counter,f
  9740  1489  1D03               	btfss	3,2
  9741  148A  2C60               	goto	l4192
  9742  148B                     l4204:	
  9743  148B  0832               	movf	___aldiv@sign,w
  9744  148C  1903               	btfsc	3,2
  9745  148D  2C99               	goto	l4208
  9746  148E  09B3               	comf	___aldiv@quotient,f
  9747  148F  09B4               	comf	___aldiv@quotient+1,f
  9748  1490  09B5               	comf	___aldiv@quotient+2,f
  9749  1491  09B6               	comf	___aldiv@quotient+3,f
  9750  1492  0AB3               	incf	___aldiv@quotient,f
  9751  1493  1903               	skipnz
  9752  1494  0AB4               	incf	___aldiv@quotient+1,f
  9753  1495  1903               	skipnz
  9754  1496  0AB5               	incf	___aldiv@quotient+2,f
  9755  1497  1903               	skipnz
  9756  1498  0AB6               	incf	___aldiv@quotient+3,f
  9757  1499                     l4208:	
  9758  1499  0836               	movf	___aldiv@quotient+3,w
  9759  149A  00AB               	movwf	?___aldiv+3
  9760  149B  0835               	movf	___aldiv@quotient+2,w
  9761  149C  00AA               	movwf	?___aldiv+2
  9762  149D  0834               	movf	___aldiv@quotient+1,w
  9763  149E  00A9               	movwf	?___aldiv+1
  9764  149F  0833               	movf	___aldiv@quotient,w
  9765  14A0  00A8               	movwf	?___aldiv
  9766  14A1  0008               	return
  9767  14A2                     __end_of___aldiv:	
  9768                           
  9769                           	psect	text27
  9770  166A                     __ptext27:	
  9771 ;; *************** function _compensate_pressure *****************
  9772 ;; Defined at:
  9773 ;;		line 1159 in file "BME280_driver/bme280.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;  uncomp_data     1    wreg     PTR const struct bme280_
  9776 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9777 ;;  calib_data      1   50[BANK0 ] PTR const struct bme280_
  9778 ;;		 -> main@env_sensor(51), 
  9779 ;; Auto vars:     Size  Location     Type
  9780 ;;  uncomp_data     1   24[BANK1 ] PTR const struct bme280_
  9781 ;;		 -> bme280_get_sensor_data@uncomp_data(12), 
  9782 ;;  var1            8   61[BANK1 ] long long 
  9783 ;;  var4            8   53[BANK1 ] long long 
  9784 ;;  var2            8   45[BANK1 ] long long 
  9785 ;;  var3            8    0        long long 
  9786 ;;  pressure        4   41[BANK1 ] unsigned long 
  9787 ;;  pressure_min    4    0        unsigned long 
  9788 ;;  pressure_max    4   25[BANK1 ] unsigned long 
  9789 ;; Return value:  Size  Location     Type
  9790 ;;                  4   50[BANK0 ] unsigned long 
  9791 ;; Registers used:
  9792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9793 ;; Tracked objects:
  9794 ;;		On entry : 1F/1
  9795 ;;		On exit  : 1F/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9798 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;      Temps:          0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;      Totals:         0      30      69       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;Total ram usage:       99 bytes
  9803 ;; Hardware stack levels used:    1
  9804 ;; Hardware stack levels required when called:    4
  9805 ;; This function calls:
  9806 ;;		___aodiv
  9807 ;;		___omul
  9808 ;; This function is called by:
  9809 ;;		_bme280_compensate_data
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           
  9814                           ;psect for function _compensate_pressure
  9815  166A                     _compensate_pressure:	
  9816                           
  9817                           ;incstack = 0
  9818                           ; Regs used in _compensate_pressure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9819                           ;compensate_pressure@uncomp_data stored from wreg
  9820  166A  00B8               	movwf	compensate_pressure@uncomp_data^(0+128)
  9821                           
  9822                           ;BME280_driver/bme280.c: 1168:     uint32_t pressure_max = 11000000;
  9823  166B  3000               	movlw	0
  9824  166C  00BC               	movwf	(compensate_pressure@pressure_max+3)^(0+128)
  9825  166D  30A7               	movlw	167
  9826  166E  00BB               	movwf	(compensate_pressure@pressure_max+2)^(0+128)
  9827  166F  30D8               	movlw	216
  9828  1670  00BA               	movwf	(compensate_pressure@pressure_max+1)^(0+128)
  9829  1671  30C0               	movlw	192
  9830  1672  00B9               	movwf	compensate_pressure@pressure_max^(0+128)
  9831                           
  9832                           ;BME280_driver/bme280.c: 1170:     var1 = ((int64_t)calib_data->t_fine) - 128000;
  9833  1673  3000               	movlw	0
  9834  1674  0020               	movlb	0	; select bank0
  9835  1675  00D6               	movwf	??_compensate_pressure
  9836  1676  300C               	movlw	12
  9837  1677  00D7               	movwf	??_compensate_pressure+1
  9838  1678  30FE               	movlw	254
  9839  1679  00D8               	movwf	??_compensate_pressure+2
  9840  167A  30FF               	movlw	255
  9841  167B  00D9               	movwf	??_compensate_pressure+3
  9842  167C  30FF               	movlw	255
  9843  167D  00DA               	movwf	??_compensate_pressure+4
  9844  167E  30FF               	movlw	255
  9845  167F  00DB               	movwf	??_compensate_pressure+5
  9846  1680  30FF               	movlw	255
  9847  1681  00DC               	movwf	??_compensate_pressure+6
  9848  1682  30FF               	movlw	255
  9849  1683  00DD               	movwf	??_compensate_pressure+7
  9850  1684  0852               	movf	compensate_pressure@calib_data,w
  9851  1685  3E21               	addlw	33
  9852  1686  0086               	movwf	6
  9853  1687  3001               	movlw	1	; select bank2/3
  9854  1688  0087               	movwf	7
  9855  1689  3F40               	moviw [0]fsr1
  9856  168A  00DE               	movwf	??_compensate_pressure+8
  9857  168B  3F41               	moviw [1]fsr1
  9858  168C  00DF               	movwf	??_compensate_pressure+9
  9859  168D  3F42               	moviw [2]fsr1
  9860  168E  00E0               	movwf	??_compensate_pressure+10
  9861  168F  3F43               	moviw [3]fsr1
  9862  1690  00E1               	movwf	??_compensate_pressure+11
  9863  1691  085E               	movf	??_compensate_pressure+8,w
  9864  1692  00E2               	movwf	??_compensate_pressure+12
  9865  1693  085F               	movf	??_compensate_pressure+9,w
  9866  1694  00E3               	movwf	??_compensate_pressure+13
  9867  1695  0860               	movf	??_compensate_pressure+10,w
  9868  1696  00E4               	movwf	??_compensate_pressure+14
  9869  1697  0861               	movf	??_compensate_pressure+11,w
  9870  1698  00E5               	movwf	??_compensate_pressure+15
  9871  1699  3000               	movlw	0
  9872  169A  1BE5               	btfsc	??_compensate_pressure+15,7
  9873  169B  30FF               	movlw	255
  9874  169C  00E6               	movwf	??_compensate_pressure+16
  9875  169D  00E7               	movwf	??_compensate_pressure+17
  9876  169E  00E8               	movwf	??_compensate_pressure+18
  9877  169F  00E9               	movwf	??_compensate_pressure+19
  9878  16A0  0862               	movf	??_compensate_pressure+12,w
  9879  16A1  07D6               	addwf	??_compensate_pressure,f
  9880  16A2  0863               	movf	??_compensate_pressure+13,w
  9881  16A3  3DD7               	addwfc	??_compensate_pressure+1,f
  9882  16A4  0864               	movf	??_compensate_pressure+14,w
  9883  16A5  3DD8               	addwfc	??_compensate_pressure+2,f
  9884  16A6  0865               	movf	??_compensate_pressure+15,w
  9885  16A7  3DD9               	addwfc	??_compensate_pressure+3,f
  9886  16A8  0866               	movf	??_compensate_pressure+16,w
  9887  16A9  3DDA               	addwfc	??_compensate_pressure+4,f
  9888  16AA  0867               	movf	??_compensate_pressure+17,w
  9889  16AB  3DDB               	addwfc	??_compensate_pressure+5,f
  9890  16AC  0868               	movf	??_compensate_pressure+18,w
  9891  16AD  3DDC               	addwfc	??_compensate_pressure+6,f
  9892  16AE  0869               	movf	??_compensate_pressure+19,w
  9893  16AF  3DDD               	addwfc	??_compensate_pressure+7,f
  9894  16B0  085D               	movf	??_compensate_pressure+7,w
  9895  16B1  0021               	movlb	1	; select bank1
  9896  16B2  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
  9897  16B3  0020               	movlb	0	; select bank0
  9898  16B4  085C               	movf	??_compensate_pressure+6,w
  9899  16B5  0021               	movlb	1	; select bank1
  9900  16B6  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
  9901  16B7  0020               	movlb	0	; select bank0
  9902  16B8  085B               	movf	??_compensate_pressure+5,w
  9903  16B9  0021               	movlb	1	; select bank1
  9904  16BA  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
  9905  16BB  0020               	movlb	0	; select bank0
  9906  16BC  085A               	movf	??_compensate_pressure+4,w
  9907  16BD  0021               	movlb	1	; select bank1
  9908  16BE  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
  9909  16BF  0020               	movlb	0	; select bank0
  9910  16C0  0859               	movf	??_compensate_pressure+3,w
  9911  16C1  0021               	movlb	1	; select bank1
  9912  16C2  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
  9913  16C3  0020               	movlb	0	; select bank0
  9914  16C4  0858               	movf	??_compensate_pressure+2,w
  9915  16C5  0021               	movlb	1	; select bank1
  9916  16C6  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
  9917  16C7  0020               	movlb	0	; select bank0
  9918  16C8  0857               	movf	??_compensate_pressure+1,w
  9919  16C9  0021               	movlb	1	; select bank1
  9920  16CA  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
  9921  16CB  0020               	movlb	0	; select bank0
  9922  16CC  0856               	movf	??_compensate_pressure,w
  9923  16CD  0021               	movlb	1	; select bank1
  9924  16CE  00DD               	movwf	compensate_pressure@var1^(0+128)
  9925                           
  9926                           ;BME280_driver/bme280.c: 1171:     var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
  9927  16CF  0020               	movlb	0	; select bank0
  9928  16D0  0852               	movf	compensate_pressure@calib_data,w
  9929  16D1  3E10               	addlw	16
  9930  16D2  0086               	movwf	6
  9931  16D3  3001               	movlw	1	; select bank2/3
  9932  16D4  0087               	movwf	7
  9933  16D5  3F40               	moviw [0]fsr1
  9934  16D6  00D6               	movwf	??_compensate_pressure
  9935  16D7  3F41               	moviw [1]fsr1
  9936  16D8  00D7               	movwf	??_compensate_pressure+1
  9937  16D9  0856               	movf	??_compensate_pressure,w
  9938  16DA  00A0               	movwf	___omul@multiplier
  9939  16DB  0857               	movf	??_compensate_pressure+1,w
  9940  16DC  00A1               	movwf	___omul@multiplier+1
  9941  16DD  0D89               	rlf	9,f
  9942  16DE  3B89               	subwfb	9,f
  9943  16DF  0989               	comf	9,f
  9944  16E0  00A2               	movwf	___omul@multiplier+2
  9945  16E1  00A3               	movwf	___omul@multiplier+3
  9946  16E2  00A4               	movwf	___omul@multiplier+4
  9947  16E3  00A5               	movwf	___omul@multiplier+5
  9948  16E4  00A6               	movwf	___omul@multiplier+6
  9949  16E5  00A7               	movwf	___omul@multiplier+7
  9950  16E6  0021               	movlb	1	; select bank1
  9951  16E7  085D               	movf	compensate_pressure@var1^(0+128),w
  9952  16E8  0020               	movlb	0	; select bank0
  9953  16E9  00A8               	movwf	___omul@multiplicand
  9954  16EA  0021               	movlb	1	; select bank1
  9955  16EB  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
  9956  16EC  0020               	movlb	0	; select bank0
  9957  16ED  00A9               	movwf	___omul@multiplicand+1
  9958  16EE  0021               	movlb	1	; select bank1
  9959  16EF  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
  9960  16F0  0020               	movlb	0	; select bank0
  9961  16F1  00AA               	movwf	___omul@multiplicand+2
  9962  16F2  0021               	movlb	1	; select bank1
  9963  16F3  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
  9964  16F4  0020               	movlb	0	; select bank0
  9965  16F5  00AB               	movwf	___omul@multiplicand+3
  9966  16F6  0021               	movlb	1	; select bank1
  9967  16F7  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
  9968  16F8  0020               	movlb	0	; select bank0
  9969  16F9  00AC               	movwf	___omul@multiplicand+4
  9970  16FA  0021               	movlb	1	; select bank1
  9971  16FB  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
  9972  16FC  0020               	movlb	0	; select bank0
  9973  16FD  00AD               	movwf	___omul@multiplicand+5
  9974  16FE  0021               	movlb	1	; select bank1
  9975  16FF  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
  9976  1700  0020               	movlb	0	; select bank0
  9977  1701  00AE               	movwf	___omul@multiplicand+6
  9978  1702  0021               	movlb	1	; select bank1
  9979  1703  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
  9980  1704  0020               	movlb	0	; select bank0
  9981  1705  00AF               	movwf	___omul@multiplicand+7
  9982  1706  319F  2771         	fcall	___omul
  9983  1708  0820               	movf	?___omul,w
  9984  1709  3188  2833         	ljmp	L7
  9985                           
  9986                           	psect	text28
  9987  1F71                     __ptext28:	
  9988 ;; *************** function ___omul *****************
  9989 ;; Defined at:
  9990 ;;		line 91 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\Umul64.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  9993 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;  product         8   16[BANK0 ] unsigned long long 
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  8    0[BANK0 ] unsigned long long 
  9998 ;; Registers used:
  9999 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10000 ;; Tracked objects:
 10001 ;;		On entry : 1F/0
 10002 ;;		On exit  : 1F/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10005 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;      Totals:         1      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;Total ram usage:       25 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    3
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_compensate_pressure
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           
 10020                           ;psect for function ___omul
 10021  1F71                     ___omul:	
 10022                           
 10023                           ;incstack = 0
 10024                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
 10025  1F71  3030               	movlw	low ___omul@product
 10026  1F72  0086               	movwf	6
 10027  1F73  3000               	movlw	high ___omul@product
 10028  1F74  0087               	movwf	7
 10029  1F75  3008               	movlw	8
 10030  1F76  00F5               	movwf	??___omul
 10031  1F77  3000               	movlw	0
 10032  1F78                     u3900:	
 10033  1F78  001E               	movwi fsr1++
 10034  1F79  0BF5               	decfsz	??___omul,f
 10035  1F7A  2F78               	goto	u3900
 10036  1F7B                     l4164:	
 10037  1F7B  1C20               	btfss	___omul@multiplier,0
 10038  1F7C  2F8D               	goto	l4168
 10039  1F7D  0828               	movf	___omul@multiplicand,w
 10040  1F7E  07B0               	addwf	___omul@product,f
 10041  1F7F  0829               	movf	___omul@multiplicand+1,w
 10042  1F80  3DB1               	addwfc	___omul@product+1,f
 10043  1F81  082A               	movf	___omul@multiplicand+2,w
 10044  1F82  3DB2               	addwfc	___omul@product+2,f
 10045  1F83  082B               	movf	___omul@multiplicand+3,w
 10046  1F84  3DB3               	addwfc	___omul@product+3,f
 10047  1F85  082C               	movf	___omul@multiplicand+4,w
 10048  1F86  3DB4               	addwfc	___omul@product+4,f
 10049  1F87  082D               	movf	___omul@multiplicand+5,w
 10050  1F88  3DB5               	addwfc	___omul@product+5,f
 10051  1F89  082E               	movf	___omul@multiplicand+6,w
 10052  1F8A  3DB6               	addwfc	___omul@product+6,f
 10053  1F8B  082F               	movf	___omul@multiplicand+7,w
 10054  1F8C  3DB7               	addwfc	___omul@product+7,f
 10055  1F8D                     l4168:	
 10056  1F8D  35A8               	lslf	___omul@multiplicand,f
 10057  1F8E  0DA9               	rlf	___omul@multiplicand+1,f
 10058  1F8F  0DAA               	rlf	___omul@multiplicand+2,f
 10059  1F90  0DAB               	rlf	___omul@multiplicand+3,f
 10060  1F91  0DAC               	rlf	___omul@multiplicand+4,f
 10061  1F92  0DAD               	rlf	___omul@multiplicand+5,f
 10062  1F93  0DAE               	rlf	___omul@multiplicand+6,f
 10063  1F94  0DAF               	rlf	___omul@multiplicand+7,f
 10064  1F95  36A7               	lsrf	___omul@multiplier+7,f
 10065  1F96  0CA6               	rrf	___omul@multiplier+6,f
 10066  1F97  0CA5               	rrf	___omul@multiplier+5,f
 10067  1F98  0CA4               	rrf	___omul@multiplier+4,f
 10068  1F99  0CA3               	rrf	___omul@multiplier+3,f
 10069  1F9A  0CA2               	rrf	___omul@multiplier+2,f
 10070  1F9B  0CA1               	rrf	___omul@multiplier+1,f
 10071  1F9C  0CA0               	rrf	___omul@multiplier,f
 10072  1F9D  0820               	movf	___omul@multiplier,w
 10073  1F9E  0421               	iorwf	___omul@multiplier+1,w
 10074  1F9F  0422               	iorwf	___omul@multiplier+2,w
 10075  1FA0  0423               	iorwf	___omul@multiplier+3,w
 10076  1FA1  0424               	iorwf	___omul@multiplier+4,w
 10077  1FA2  0425               	iorwf	___omul@multiplier+5,w
 10078  1FA3  0426               	iorwf	___omul@multiplier+6,w
 10079  1FA4  0427               	iorwf	___omul@multiplier+7,w
 10080  1FA5  1D03               	skipz
 10081  1FA6  2F7B               	goto	l4164
 10082  1FA7  0830               	movf	___omul@product,w
 10083  1FA8  00A0               	movwf	?___omul
 10084  1FA9  0831               	movf	___omul@product+1,w
 10085  1FAA  00A1               	movwf	?___omul+1
 10086  1FAB  0832               	movf	___omul@product+2,w
 10087  1FAC  00A2               	movwf	?___omul+2
 10088  1FAD  0833               	movf	___omul@product+3,w
 10089  1FAE  00A3               	movwf	?___omul+3
 10090  1FAF  0834               	movf	___omul@product+4,w
 10091  1FB0  00A4               	movwf	?___omul+4
 10092  1FB1  0835               	movf	___omul@product+5,w
 10093  1FB2  00A5               	movwf	?___omul+5
 10094  1FB3  0836               	movf	___omul@product+6,w
 10095  1FB4  00A6               	movwf	?___omul+6
 10096  1FB5  0837               	movf	___omul@product+7,w
 10097  1FB6  00A7               	movwf	?___omul+7
 10098  1FB7  0008               	return
 10099  1FB8                     __end_of___omul:	
 10100                           
 10101                           	psect	text29
 10102  170B                     __ptext29:	
 10103 ;; *************** function ___aodiv *****************
 10104 ;; Defined at:
 10105 ;;		line 7 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\aodiv.c"
 10106 ;; Parameters:    Size  Location     Type
 10107 ;;  divisor         8   24[BANK0 ] long long 
 10108 ;;  dividend        8   32[BANK0 ] long long 
 10109 ;; Auto vars:     Size  Location     Type
 10110 ;;  quotient        8   42[BANK0 ] long long 
 10111 ;;  sign            1   41[BANK0 ] unsigned char 
 10112 ;;  counter         1   40[BANK0 ] unsigned char 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  8   24[BANK0 ] long long 
 10115 ;; Registers used:
 10116 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10117 ;; Tracked objects:
 10118 ;;		On entry : 1F/0
 10119 ;;		On exit  : 1F/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10122 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Totals:         1      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;Total ram usage:       27 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; Hardware stack levels required when called:    3
 10129 ;; This function calls:
 10130 ;;		Nothing
 10131 ;; This function is called by:
 10132 ;;		_compensate_pressure
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           
 10137                           ;psect for function ___aodiv
 10138  170B                     ___aodiv:	
 10139                           
 10140                           ;incstack = 0
 10141                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 10142  170B  01C9               	clrf	___aodiv@sign
 10143  170C  3038               	movlw	low ___aodiv@divisor
 10144  170D  0086               	movwf	6
 10145  170E  3000               	movlw	high ___aodiv@divisor
 10146  170F  0087               	movwf	7
 10147  1710  3F47               	moviw [7]fsr1
 10148  1711  00F6               	movwf	??___aodiv
 10149  1712  1FF6               	btfss	??___aodiv,7
 10150  1713  2F36               	goto	l4218
 10151  1714  0020               	movlb	0	; select bank0
 10152  1715  09B8               	comf	___aodiv@divisor,f
 10153  1716  09B9               	comf	___aodiv@divisor+1,f
 10154  1717  09BA               	comf	___aodiv@divisor+2,f
 10155  1718  09BB               	comf	___aodiv@divisor+3,f
 10156  1719  09BC               	comf	___aodiv@divisor+4,f
 10157  171A  09BD               	comf	___aodiv@divisor+5,f
 10158  171B  09BE               	comf	___aodiv@divisor+6,f
 10159  171C  09BF               	comf	___aodiv@divisor+7,f
 10160  171D  0AB8               	incf	___aodiv@divisor,f
 10161  171E  1D03               	skipz
 10162  171F  2F33               	goto	u404lld
 10163  1720  0AB9               	incf	___aodiv@divisor+1,f
 10164  1721  1D03               	skipz
 10165  1722  2F33               	goto	u404lld
 10166  1723  0ABA               	incf	___aodiv@divisor+2,f
 10167  1724  1D03               	skipz
 10168  1725  2F33               	goto	u404lld
 10169  1726  0ABB               	incf	___aodiv@divisor+3,f
 10170  1727  1D03               	skipz
 10171  1728  2F33               	goto	u404lld
 10172  1729  0ABC               	incf	___aodiv@divisor+4,f
 10173  172A  1D03               	skipz
 10174  172B  2F33               	goto	u404lld
 10175  172C  0ABD               	incf	___aodiv@divisor+5,f
 10176  172D  1D03               	skipz
 10177  172E  2F33               	goto	u404lld
 10178  172F  0ABE               	incf	___aodiv@divisor+6,f
 10179  1730  1D03               	skipz
 10180  1731  2F33               	goto	u404lld
 10181  1732  0ABF               	incf	___aodiv@divisor+7,f
 10182  1733                     u404lld:	
 10183  1733  0020               	movlb	0	; select bank0
 10184  1734  01C9               	clrf	___aodiv@sign
 10185  1735  0AC9               	incf	___aodiv@sign,f
 10186  1736                     l4218:	
 10187  1736  3040               	movlw	low ___aodiv@dividend
 10188  1737  0086               	movwf	6
 10189  1738  3000               	movlw	high ___aodiv@dividend
 10190  1739  0087               	movwf	7
 10191  173A  3F47               	moviw [7]fsr1
 10192  173B  00F6               	movwf	??___aodiv
 10193  173C  1FF6               	btfss	??___aodiv,7
 10194  173D  2F62               	goto	l4224
 10195  173E  0020               	movlb	0	; select bank0
 10196  173F  09C0               	comf	___aodiv@dividend,f
 10197  1740  09C1               	comf	___aodiv@dividend+1,f
 10198  1741  09C2               	comf	___aodiv@dividend+2,f
 10199  1742  09C3               	comf	___aodiv@dividend+3,f
 10200  1743  09C4               	comf	___aodiv@dividend+4,f
 10201  1744  09C5               	comf	___aodiv@dividend+5,f
 10202  1745  09C6               	comf	___aodiv@dividend+6,f
 10203  1746  09C7               	comf	___aodiv@dividend+7,f
 10204  1747  0AC0               	incf	___aodiv@dividend,f
 10205  1748  1D03               	skipz
 10206  1749  2F5D               	goto	l4222
 10207  174A  0AC1               	incf	___aodiv@dividend+1,f
 10208  174B  1D03               	skipz
 10209  174C  2F5D               	goto	l4222
 10210  174D  0AC2               	incf	___aodiv@dividend+2,f
 10211  174E  1D03               	skipz
 10212  174F  2F5D               	goto	l4222
 10213  1750  0AC3               	incf	___aodiv@dividend+3,f
 10214  1751  1D03               	skipz
 10215  1752  2F5D               	goto	l4222
 10216  1753  0AC4               	incf	___aodiv@dividend+4,f
 10217  1754  1D03               	skipz
 10218  1755  2F5D               	goto	l4222
 10219  1756  0AC5               	incf	___aodiv@dividend+5,f
 10220  1757  1D03               	skipz
 10221  1758  2F5D               	goto	l4222
 10222  1759  0AC6               	incf	___aodiv@dividend+6,f
 10223  175A  1D03               	skipz
 10224  175B  2F5D               	goto	l4222
 10225  175C  0AC7               	incf	___aodiv@dividend+7,f
 10226  175D                     l4222:	
 10227  175D  3001               	movlw	1
 10228  175E  00F6               	movwf	??___aodiv
 10229  175F  0876               	movf	??___aodiv,w
 10230  1760  0020               	movlb	0	; select bank0
 10231  1761  06C9               	xorwf	___aodiv@sign,f
 10232  1762                     l4224:	
 10233  1762  304A               	movlw	low ___aodiv@quotient
 10234  1763  0086               	movwf	6
 10235  1764  3000               	movlw	high ___aodiv@quotient
 10236  1765  0087               	movwf	7
 10237  1766  3008               	movlw	8
 10238  1767  00F6               	movwf	??___aodiv
 10239  1768  3000               	movlw	0
 10240  1769                     u4070:	
 10241  1769  001E               	movwi fsr1++
 10242  176A  0BF6               	decfsz	??___aodiv,f
 10243  176B  2F69               	goto	u4070
 10244  176C  0020               	movlb	0	; select bank0
 10245  176D  0838               	movf	___aodiv@divisor,w
 10246  176E  0439               	iorwf	___aodiv@divisor+1,w
 10247  176F  043A               	iorwf	___aodiv@divisor+2,w
 10248  1770  043B               	iorwf	___aodiv@divisor+3,w
 10249  1771  043C               	iorwf	___aodiv@divisor+4,w
 10250  1772  043D               	iorwf	___aodiv@divisor+5,w
 10251  1773  043E               	iorwf	___aodiv@divisor+6,w
 10252  1774  043F               	iorwf	___aodiv@divisor+7,w
 10253  1775  1903               	skipnz
 10254  1776  2FCD               	goto	l4246
 10255  1777  01C8               	clrf	___aodiv@counter
 10256  1778  0AC8               	incf	___aodiv@counter,f
 10257  1779                     l4234:	
 10258  1779  1BBF               	btfsc	___aodiv@divisor+7,7
 10259  177A  2F88               	goto	l4236
 10260  177B  35B8               	lslf	___aodiv@divisor,f
 10261  177C  0DB9               	rlf	___aodiv@divisor+1,f
 10262  177D  0DBA               	rlf	___aodiv@divisor+2,f
 10263  177E  0DBB               	rlf	___aodiv@divisor+3,f
 10264  177F  0DBC               	rlf	___aodiv@divisor+4,f
 10265  1780  0DBD               	rlf	___aodiv@divisor+5,f
 10266  1781  0DBE               	rlf	___aodiv@divisor+6,f
 10267  1782  0DBF               	rlf	___aodiv@divisor+7,f
 10268  1783  3001               	movlw	1
 10269  1784  00F6               	movwf	??___aodiv
 10270  1785  0876               	movf	??___aodiv,w
 10271  1786  07C8               	addwf	___aodiv@counter,f
 10272  1787  2F79               	goto	l4234
 10273  1788                     l4236:	
 10274  1788  35CA               	lslf	___aodiv@quotient,f
 10275  1789  0DCB               	rlf	___aodiv@quotient+1,f
 10276  178A  0DCC               	rlf	___aodiv@quotient+2,f
 10277  178B  0DCD               	rlf	___aodiv@quotient+3,f
 10278  178C  0DCE               	rlf	___aodiv@quotient+4,f
 10279  178D  0DCF               	rlf	___aodiv@quotient+5,f
 10280  178E  0DD0               	rlf	___aodiv@quotient+6,f
 10281  178F  0DD1               	rlf	___aodiv@quotient+7,f
 10282  1790  083F               	movf	___aodiv@divisor+7,w
 10283  1791  0247               	subwf	___aodiv@dividend+7,w
 10284  1792  1D03               	skipz
 10285  1793  2FAE               	goto	u4105
 10286  1794  083E               	movf	___aodiv@divisor+6,w
 10287  1795  0246               	subwf	___aodiv@dividend+6,w
 10288  1796  1D03               	skipz
 10289  1797  2FAE               	goto	u4105
 10290  1798  083D               	movf	___aodiv@divisor+5,w
 10291  1799  0245               	subwf	___aodiv@dividend+5,w
 10292  179A  1D03               	skipz
 10293  179B  2FAE               	goto	u4105
 10294  179C  083C               	movf	___aodiv@divisor+4,w
 10295  179D  0244               	subwf	___aodiv@dividend+4,w
 10296  179E  1D03               	skipz
 10297  179F  2FAE               	goto	u4105
 10298  17A0  083B               	movf	___aodiv@divisor+3,w
 10299  17A1  0243               	subwf	___aodiv@dividend+3,w
 10300  17A2  1D03               	skipz
 10301  17A3  2FAE               	goto	u4105
 10302  17A4  083A               	movf	___aodiv@divisor+2,w
 10303  17A5  0242               	subwf	___aodiv@dividend+2,w
 10304  17A6  1D03               	skipz
 10305  17A7  2FAE               	goto	u4105
 10306  17A8  0839               	movf	___aodiv@divisor+1,w
 10307  17A9  0241               	subwf	___aodiv@dividend+1,w
 10308  17AA  1D03               	skipz
 10309  17AB  2FAE               	goto	u4105
 10310  17AC  0838               	movf	___aodiv@divisor,w
 10311  17AD  0240               	subwf	___aodiv@dividend,w
 10312  17AE                     u4105:	
 10313  17AE  1C03               	skipc
 10314  17AF  2FC1               	goto	l4244
 10315  17B0  0838               	movf	___aodiv@divisor,w
 10316  17B1  02C0               	subwf	___aodiv@dividend,f
 10317  17B2  0839               	movf	___aodiv@divisor+1,w
 10318  17B3  3BC1               	subwfb	___aodiv@dividend+1,f
 10319  17B4  083A               	movf	___aodiv@divisor+2,w
 10320  17B5  3BC2               	subwfb	___aodiv@dividend+2,f
 10321  17B6  083B               	movf	___aodiv@divisor+3,w
 10322  17B7  3BC3               	subwfb	___aodiv@dividend+3,f
 10323  17B8  083C               	movf	___aodiv@divisor+4,w
 10324  17B9  3BC4               	subwfb	___aodiv@dividend+4,f
 10325  17BA  083D               	movf	___aodiv@divisor+5,w
 10326  17BB  3BC5               	subwfb	___aodiv@dividend+5,f
 10327  17BC  083E               	movf	___aodiv@divisor+6,w
 10328  17BD  3BC6               	subwfb	___aodiv@dividend+6,f
 10329  17BE  083F               	movf	___aodiv@divisor+7,w
 10330  17BF  3BC7               	subwfb	___aodiv@dividend+7,f
 10331  17C0  144A               	bsf	___aodiv@quotient,0
 10332  17C1                     l4244:	
 10333  17C1  36BF               	lsrf	___aodiv@divisor+7,f
 10334  17C2  0CBE               	rrf	___aodiv@divisor+6,f
 10335  17C3  0CBD               	rrf	___aodiv@divisor+5,f
 10336  17C4  0CBC               	rrf	___aodiv@divisor+4,f
 10337  17C5  0CBB               	rrf	___aodiv@divisor+3,f
 10338  17C6  0CBA               	rrf	___aodiv@divisor+2,f
 10339  17C7  0CB9               	rrf	___aodiv@divisor+1,f
 10340  17C8  0CB8               	rrf	___aodiv@divisor,f
 10341  17C9  3001               	movlw	1
 10342  17CA  02C8               	subwf	___aodiv@counter,f
 10343  17CB  1D03               	btfss	3,2
 10344  17CC  2F88               	goto	l4236
 10345  17CD                     l4246:	
 10346  17CD  0849               	movf	___aodiv@sign,w
 10347  17CE  1903               	btfsc	3,2
 10348  17CF  2FEE               	goto	l1062
 10349  17D0  09CA               	comf	___aodiv@quotient,f
 10350  17D1  09CB               	comf	___aodiv@quotient+1,f
 10351  17D2  09CC               	comf	___aodiv@quotient+2,f
 10352  17D3  09CD               	comf	___aodiv@quotient+3,f
 10353  17D4  09CE               	comf	___aodiv@quotient+4,f
 10354  17D5  09CF               	comf	___aodiv@quotient+5,f
 10355  17D6  09D0               	comf	___aodiv@quotient+6,f
 10356  17D7  09D1               	comf	___aodiv@quotient+7,f
 10357  17D8  0ACA               	incf	___aodiv@quotient,f
 10358  17D9  1D03               	skipz
 10359  17DA  2FEE               	goto	l1062
 10360  17DB  0ACB               	incf	___aodiv@quotient+1,f
 10361  17DC  1D03               	skipz
 10362  17DD  2FEE               	goto	l1062
 10363  17DE  0ACC               	incf	___aodiv@quotient+2,f
 10364  17DF  1D03               	skipz
 10365  17E0  2FEE               	goto	l1062
 10366  17E1  0ACD               	incf	___aodiv@quotient+3,f
 10367  17E2  1D03               	skipz
 10368  17E3  2FEE               	goto	l1062
 10369  17E4  0ACE               	incf	___aodiv@quotient+4,f
 10370  17E5  1D03               	skipz
 10371  17E6  2FEE               	goto	l1062
 10372  17E7  0ACF               	incf	___aodiv@quotient+5,f
 10373  17E8  1D03               	skipz
 10374  17E9  2FEE               	goto	l1062
 10375  17EA  0AD0               	incf	___aodiv@quotient+6,f
 10376  17EB  1D03               	skipz
 10377  17EC  2FEE               	goto	l1062
 10378  17ED  0AD1               	incf	___aodiv@quotient+7,f
 10379  17EE                     l1062:	
 10380  17EE  0020               	movlb	0	; select bank0
 10381  17EF  084A               	movf	___aodiv@quotient,w
 10382  17F0  00B8               	movwf	?___aodiv
 10383  17F1  084B               	movf	___aodiv@quotient+1,w
 10384  17F2  00B9               	movwf	?___aodiv+1
 10385  17F3  084C               	movf	___aodiv@quotient+2,w
 10386  17F4  00BA               	movwf	?___aodiv+2
 10387  17F5  084D               	movf	___aodiv@quotient+3,w
 10388  17F6  00BB               	movwf	?___aodiv+3
 10389  17F7  084E               	movf	___aodiv@quotient+4,w
 10390  17F8  00BC               	movwf	?___aodiv+4
 10391  17F9  084F               	movf	___aodiv@quotient+5,w
 10392  17FA  00BD               	movwf	?___aodiv+5
 10393  17FB  0850               	movf	___aodiv@quotient+6,w
 10394  17FC  00BE               	movwf	?___aodiv+6
 10395  17FD  0851               	movf	___aodiv@quotient+7,w
 10396  17FE  00BF               	movwf	?___aodiv+7
 10397  17FF  0008               	return
 10398  1800                     __end_of___aodiv:	
 10399                           
 10400                           	psect	text30
 10401  13A7                     __ptext30:	
 10402 ;; *************** function _UIntToHexString *****************
 10403 ;; Defined at:
 10404 ;;		line 123 in file "main.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;  n               4   20[BANK0 ] unsigned long 
 10407 ;;  dest            1   24[BANK0 ] PTR unsigned char 
 10408 ;;		 -> checksum(6), 
 10409 ;; Auto vars:     Size  Location     Type
 10410 ;;  remainder       4   31[BANK0 ] unsigned long 
 10411 ;;  i               4   35[BANK0 ] unsigned long 
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  1    wreg      void 
 10414 ;; Registers used:
 10415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10416 ;; Tracked objects:
 10417 ;;		On entry : 1F/0
 10418 ;;		On exit  : 1F/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10421 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;Total ram usage:       19 bytes
 10426 ;; Hardware stack levels used:    1
 10427 ;; Hardware stack levels required when called:    5
 10428 ;; This function calls:
 10429 ;;		_ReverseString
 10430 ;; This function is called by:
 10431 ;;		_main
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           
 10436                           ;psect for function _UIntToHexString
 10437  13A7                     _UIntToHexString:	
 10438                           
 10439                           ;main.c: 123: void UIntToHexString(uint32_t n, char* dest);main.c: 124: {;main.c: 125:  
      +                             uint32_t i = 0;
 10440                           
 10441                           ;incstack = 0
 10442                           ; Regs used in _UIntToHexString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10443  13A7  3000               	movlw	0
 10444  13A8  00C6               	movwf	UIntToHexString@i+3
 10445  13A9  3000               	movlw	0
 10446  13AA  00C5               	movwf	UIntToHexString@i+2
 10447  13AB  3000               	movlw	0
 10448  13AC  00C4               	movwf	UIntToHexString@i+1
 10449  13AD  3000               	movlw	0
 10450  13AE  00C3               	movwf	UIntToHexString@i
 10451  13AF                     l664:	
 10452                           ;main.c: 126:     do {
 10453                           
 10454                           
 10455                           ;main.c: 129:         uint32_t remainder = n % 16;
 10456  13AF  300F               	movlw	15
 10457  13B0  0534               	andwf	UIntToHexString@n,w
 10458  13B1  00BF               	movwf	UIntToHexString@remainder
 10459  13B2  3000               	movlw	0
 10460  13B3  0535               	andwf	UIntToHexString@n+1,w
 10461  13B4  00C0               	movwf	UIntToHexString@remainder+1
 10462  13B5  3000               	movlw	0
 10463  13B6  0536               	andwf	UIntToHexString@n+2,w
 10464  13B7  00C1               	movwf	UIntToHexString@remainder+2
 10465  13B8  3000               	movlw	0
 10466  13B9  0537               	andwf	UIntToHexString@n+3,w
 10467  13BA  00C2               	movwf	UIntToHexString@remainder+3
 10468                           
 10469                           ;main.c: 131:         dest[i++] = remainder + (remainder >= 10 ? 55 : '0');
 10470  13BB  0842               	movf	UIntToHexString@remainder+3,w
 10471  13BC  1D03               	btfss	3,2
 10472  13BD  2BD0               	goto	l5128
 10473  13BE  0841               	movf	UIntToHexString@remainder+2,w
 10474  13BF  1D03               	btfss	3,2
 10475  13C0  2BD0               	goto	l5128
 10476  13C1  0840               	movf	UIntToHexString@remainder+1,w
 10477  13C2  1D03               	btfss	3,2
 10478  13C3  2BD0               	goto	l5128
 10479  13C4  300A               	movlw	10
 10480  13C5  023F               	subwf	UIntToHexString@remainder,w
 10481  13C6  1803               	btfsc	3,0
 10482  13C7  2BD0               	goto	l5128
 10483  13C8  3000               	movlw	0
 10484  13C9  00BE               	movwf	_UIntToHexString$1790+3
 10485  13CA  3000               	movlw	0
 10486  13CB  00BD               	movwf	_UIntToHexString$1790+2
 10487  13CC  3000               	movlw	0
 10488  13CD  00BC               	movwf	_UIntToHexString$1790+1
 10489  13CE  3030               	movlw	48
 10490  13CF  2BD7               	goto	L6
 10491  13D0                     l5128:	
 10492  13D0  3000               	movlw	0
 10493  13D1  00BE               	movwf	_UIntToHexString$1790+3
 10494  13D2  3000               	movlw	0
 10495  13D3  00BD               	movwf	_UIntToHexString$1790+2
 10496  13D4  3000               	movlw	0
 10497  13D5  00BC               	movwf	_UIntToHexString$1790+1
 10498  13D6  3037               	movlw	55
 10499  13D7                     L6:	
 10500  13D7  00BB               	movwf	_UIntToHexString$1790
 10501  13D8  083B               	movf	_UIntToHexString$1790,w
 10502  13D9  073F               	addwf	UIntToHexString@remainder,w
 10503  13DA  00B9               	movwf	??_UIntToHexString
 10504  13DB  0843               	movf	UIntToHexString@i,w
 10505  13DC  0738               	addwf	UIntToHexString@dest,w
 10506  13DD  00BA               	movwf	??_UIntToHexString+1
 10507  13DE  083A               	movf	??_UIntToHexString+1,w
 10508  13DF  0086               	movwf	6
 10509  13E0  3001               	movlw	1	; select bank2/3
 10510  13E1  0087               	movwf	7
 10511  13E2  0839               	movf	??_UIntToHexString,w
 10512  13E3  0081               	movwf	1
 10513  13E4  3001               	movlw	1
 10514  13E5  07C3               	addwf	UIntToHexString@i,f
 10515  13E6  3000               	movlw	0
 10516  13E7  3DC4               	addwfc	UIntToHexString@i+1,f
 10517  13E8  3000               	movlw	0
 10518  13E9  3DC5               	addwfc	UIntToHexString@i+2,f
 10519  13EA  3000               	movlw	0
 10520  13EB  3DC6               	addwfc	UIntToHexString@i+3,f
 10521                           
 10522                           ;main.c: 133:     } while ((n /= 16) > 0);
 10523  13EC  3004               	movlw	4
 10524  13ED                     u5335:	
 10525  13ED  36B7               	lsrf	UIntToHexString@n+3,f
 10526  13EE  0CB6               	rrf	UIntToHexString@n+2,f
 10527  13EF  0CB5               	rrf	UIntToHexString@n+1,f
 10528  13F0  0CB4               	rrf	UIntToHexString@n,f
 10529  13F1  0B89               	decfsz	9,f
 10530  13F2  2BED               	goto	u5335
 10531  13F3  0837               	movf	UIntToHexString@n+3,w
 10532  13F4  0436               	iorwf	UIntToHexString@n+2,w
 10533  13F5  0435               	iorwf	UIntToHexString@n+1,w
 10534  13F6  0434               	iorwf	UIntToHexString@n,w
 10535  13F7  1903               	btfsc	3,2
 10536  13F8  2C0D               	goto	l5140
 10537  13F9  2BAF               	goto	l664
 10538  13FA                     l5136:	
 10539                           
 10540                           ;main.c: 135:     {;main.c: 136:         dest[i] = '0';
 10541  13FA  3030               	movlw	48
 10542  13FB  00B9               	movwf	??_UIntToHexString
 10543  13FC  0843               	movf	UIntToHexString@i,w
 10544  13FD  0738               	addwf	UIntToHexString@dest,w
 10545  13FE  00BA               	movwf	??_UIntToHexString+1
 10546  13FF  083A               	movf	??_UIntToHexString+1,w
 10547  1400  0086               	movwf	6
 10548  1401  3001               	movlw	1	; select bank2/3
 10549  1402  0087               	movwf	7
 10550  1403  0839               	movf	??_UIntToHexString,w
 10551  1404  0081               	movwf	1
 10552                           
 10553                           ;main.c: 137:         i++;
 10554  1405  3001               	movlw	1
 10555  1406  07C3               	addwf	UIntToHexString@i,f
 10556  1407  3000               	movlw	0
 10557  1408  3DC4               	addwfc	UIntToHexString@i+1,f
 10558  1409  3000               	movlw	0
 10559  140A  3DC5               	addwfc	UIntToHexString@i+2,f
 10560  140B  3000               	movlw	0
 10561  140C  3DC6               	addwfc	UIntToHexString@i+3,f
 10562  140D                     l5140:	
 10563                           
 10564                           ;main.c: 134:     while (i < 4)
 10565  140D  0846               	movf	UIntToHexString@i+3,w
 10566  140E  1D03               	btfss	3,2
 10567  140F  2C1A               	goto	l5142
 10568  1410  0845               	movf	UIntToHexString@i+2,w
 10569  1411  1D03               	btfss	3,2
 10570  1412  2C1A               	goto	l5142
 10571  1413  0844               	movf	UIntToHexString@i+1,w
 10572  1414  1D03               	btfss	3,2
 10573  1415  2C1A               	goto	l5142
 10574  1416  3004               	movlw	4
 10575  1417  0243               	subwf	UIntToHexString@i,w
 10576  1418  1C03               	btfss	3,0
 10577  1419  2BFA               	goto	l5136
 10578  141A                     l5142:	
 10579                           
 10580                           ;main.c: 139:     ReverseString(dest);
 10581  141A  0838               	movf	UIntToHexString@dest,w
 10582  141B  00A5               	movwf	ReverseString@str
 10583  141C  3001               	movlw	1
 10584  141D  00A6               	movwf	ReverseString@str+1
 10585  141E  3192  2258         	fcall	_ReverseString
 10586  1420  0008               	return
 10587  1421                     __end_of_UIntToHexString:	
 10588                           
 10589                           	psect	text31
 10590  1D07                     __ptext31:	
 10591 ;; *************** function _TransmitString *****************
 10592 ;; Defined at:
 10593 ;;		line 367 in file "main.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;  message         1    wreg     PTR unsigned char 
 10596 ;;		 -> message_end(73), message_start(70), 
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  message         1    7[BANK0 ] PTR unsigned char 
 10599 ;;		 -> message_end(73), message_start(70), 
 10600 ;;  i               2    5[BANK0 ] int 
 10601 ;;  counti          2    3[BANK0 ] int 
 10602 ;; Return value:  Size  Location     Type
 10603 ;;                  1    wreg      void 
 10604 ;; Registers used:
 10605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10606 ;; Tracked objects:
 10607 ;;		On entry : 1F/3
 10608 ;;		On exit  : 0/0
 10609 ;;		Unchanged: 0/0
 10610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;Total ram usage:        6 bytes
 10616 ;; Hardware stack levels used:    1
 10617 ;; Hardware stack levels required when called:    5
 10618 ;; This function calls:
 10619 ;;		_TransmitByte
 10620 ;;		_strlen
 10621 ;; This function is called by:
 10622 ;;		_main
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           
 10627                           ;psect for function _TransmitString
 10628  1D07                     _TransmitString:	
 10629                           
 10630                           ;incstack = 0
 10631                           ; Regs used in _TransmitString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10632                           ;TransmitString@message stored from wreg
 10633  1D07  0020               	movlb	0	; select bank0
 10634  1D08  00A7               	movwf	TransmitString@message
 10635                           
 10636                           ;main.c: 367: void TransmitString(char* message);main.c: 368: {;main.c: 372:  for (int i
      +                           = 0, counti = strlen(message); i < counti; i++)
 10637  1D09  01A5               	clrf	TransmitString@i
 10638  1D0A  01A6               	clrf	TransmitString@i+1
 10639  1D0B  0827               	movf	TransmitString@message,w
 10640  1D0C  00F5               	movwf	strlen@s
 10641  1D0D  3003               	movlw	3
 10642  1D0E  00F6               	movwf	strlen@s+1
 10643  1D0F  319B  2324  319D   	fcall	_strlen
 10644  1D12  0876               	movf	?_strlen+1,w
 10645  1D13  00A4               	movwf	TransmitString@counti+1
 10646  1D14  0875               	movf	?_strlen,w
 10647  1D15  00A3               	movwf	TransmitString@counti
 10648  1D16                     l5190:	
 10649  1D16  0826               	movf	TransmitString@i+1,w
 10650  1D17  3A80               	xorlw	128
 10651  1D18  00F8               	movwf	??_TransmitString
 10652  1D19  0824               	movf	TransmitString@counti+1,w
 10653  1D1A  3A80               	xorlw	128
 10654  1D1B  0278               	subwf	??_TransmitString,w
 10655  1D1C  1D03               	skipz
 10656  1D1D  2D20               	goto	u5425
 10657  1D1E  0823               	movf	TransmitString@counti,w
 10658  1D1F  0225               	subwf	TransmitString@i,w
 10659  1D20                     u5425:	
 10660  1D20  1803               	btfsc	3,0
 10661  1D21  0008               	return
 10662                           
 10663                           ;main.c: 373:  {;main.c: 374:   TransmitByte(message[i]);
 10664  1D22  0020               	movlb	0	; select bank0
 10665  1D23  0825               	movf	TransmitString@i,w
 10666  1D24  0727               	addwf	TransmitString@message,w
 10667  1D25  00F8               	movwf	??_TransmitString
 10668  1D26  0878               	movf	??_TransmitString,w
 10669  1D27  0086               	movwf	6
 10670  1D28  3003               	movlw	3	; select bank6/7
 10671  1D29  0087               	movwf	7
 10672  1D2A  0801               	movf	1,w
 10673  1D2B  319D  2590  319D   	fcall	_TransmitByte
 10674                           
 10675                           ;main.c: 375:  }
 10676  1D2E  3001               	movlw	1
 10677  1D2F  0020               	movlb	0	; select bank0
 10678  1D30  07A5               	addwf	TransmitString@i,f
 10679  1D31  3000               	movlw	0
 10680  1D32  3DA6               	addwfc	TransmitString@i+1,f
 10681  1D33  2D16               	goto	l5190
 10682  1D34                     __end_of_TransmitString:	
 10683                           
 10684                           	psect	text32
 10685  1D90                     __ptext32:	
 10686 ;; *************** function _TransmitByte *****************
 10687 ;; Defined at:
 10688 ;;		line 345 in file "main.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;  byte            1    wreg     unsigned char 
 10691 ;; Auto vars:     Size  Location     Type
 10692 ;;  byte            1    0[BANK0 ] unsigned char 
 10693 ;;  i               2    1[BANK0 ] int 
 10694 ;; Return value:  Size  Location     Type
 10695 ;;                  1    wreg      void 
 10696 ;; Registers used:
 10697 ;;		wreg, status,2, status,0, pclath, cstack
 10698 ;; Tracked objects:
 10699 ;;		On entry : 1F/0
 10700 ;;		On exit  : 0/0
 10701 ;;		Unchanged: 0/0
 10702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;Total ram usage:        4 bytes
 10708 ;; Hardware stack levels used:    1
 10709 ;; Hardware stack levels required when called:    4
 10710 ;; This function calls:
 10711 ;;		_TransmitBit
 10712 ;; This function is called by:
 10713 ;;		_TransmitString
 10714 ;; This function uses a non-reentrant model
 10715 ;;
 10716                           
 10717                           
 10718                           ;psect for function _TransmitByte
 10719  1D90                     _TransmitByte:	
 10720                           
 10721                           ;incstack = 0
 10722                           ; Regs used in _TransmitByte: [wreg+status,2+status,0+pclath+cstack]
 10723                           ;TransmitByte@byte stored from wreg
 10724  1D90  00A0               	movwf	TransmitByte@byte
 10725                           
 10726                           ;main.c: 345: void TransmitByte(char byte);main.c: 346: {;main.c: 356:     TransmitBit(0
      +                          );
 10727  1D91  3000               	movlw	0
 10728  1D92  319B  230C  319D   	fcall	_TransmitBit
 10729                           
 10730                           ;main.c: 358:  for (int i = 0; i < 7; i++)
 10731  1D95  0020               	movlb	0	; select bank0
 10732  1D96  01A1               	clrf	TransmitByte@i
 10733  1D97  01A2               	clrf	TransmitByte@i+1
 10734  1D98                     l4760:	
 10735                           
 10736                           ;main.c: 359:  {;main.c: 360:   TransmitBit((byte >> i) & 1);
 10737  1D98  0020               	movlb	0	; select bank0
 10738  1D99  0820               	movf	TransmitByte@byte,w
 10739  1D9A  00F7               	movwf	??_TransmitByte
 10740  1D9B  0A21               	incf	TransmitByte@i,w
 10741  1D9C  2D9E               	goto	u4824
 10742  1D9D                     u4825:	
 10743  1D9D  36F7               	lsrf	??_TransmitByte,f
 10744  1D9E                     u4824:	
 10745  1D9E  0B89               	decfsz	9,f
 10746  1D9F  2D9D               	goto	u4825
 10747  1DA0  1C77               	btfss	??_TransmitByte,0
 10748  1DA1  2DA4               	goto	u4830
 10749  1DA2  3001               	movlw	1
 10750  1DA3  2DA5               	goto	u4840
 10751  1DA4                     u4830:	
 10752  1DA4  3000               	movlw	0
 10753  1DA5                     u4840:	
 10754  1DA5  319B  230C  319D   	fcall	_TransmitBit
 10755                           
 10756                           ;main.c: 361:  }
 10757  1DA8  3001               	movlw	1
 10758  1DA9  0020               	movlb	0	; select bank0
 10759  1DAA  07A1               	addwf	TransmitByte@i,f
 10760  1DAB  3000               	movlw	0
 10761  1DAC  3DA2               	addwfc	TransmitByte@i+1,f
 10762  1DAD  0822               	movf	TransmitByte@i+1,w
 10763  1DAE  3A80               	xorlw	128
 10764  1DAF  00F7               	movwf	??_TransmitByte
 10765  1DB0  3080               	movlw	128
 10766  1DB1  0277               	subwf	??_TransmitByte,w
 10767  1DB2  1D03               	skipz
 10768  1DB3  2DB6               	goto	u4855
 10769  1DB4  3007               	movlw	7
 10770  1DB5  0221               	subwf	TransmitByte@i,w
 10771  1DB6                     u4855:	
 10772  1DB6  1C03               	skipc
 10773  1DB7  2D98               	goto	l4760
 10774                           
 10775                           ;main.c: 363:  TransmitBit(1);
 10776  1DB8  3001               	movlw	1
 10777  1DB9  319B  230C  319D   	fcall	_TransmitBit
 10778                           
 10779                           ;main.c: 364:  TransmitBit(1);
 10780  1DBC  3001               	movlw	1
 10781  1DBD  319B  230C         	fcall	_TransmitBit
 10782  1DBF  0008               	return
 10783  1DC0                     __end_of_TransmitByte:	
 10784                           
 10785                           	psect	text33
 10786  1B0C                     __ptext33:	
 10787 ;; *************** function _TransmitBit *****************
 10788 ;; Defined at:
 10789 ;;		line 325 in file "main.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;  b               1    wreg     _Bool 
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;  b               1    6[COMMON] _Bool 
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      void 
 10796 ;; Registers used:
 10797 ;;		wreg, status,2, status,0
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;Total ram usage:        2 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:    3
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_TransmitByte
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           
 10818                           ;psect for function _TransmitBit
 10819  1B0C                     _TransmitBit:	
 10820                           
 10821                           ;incstack = 0
 10822                           ; Regs used in _TransmitBit: [wreg+status,2+status,0]
 10823                           ;TransmitBit@b stored from wreg
 10824  1B0C  00F6               	movwf	TransmitBit@b
 10825                           
 10826                           ;main.c: 325: void TransmitBit(_Bool b);main.c: 326: {;main.c: 327:  if (b)
 10827  1B0D  0876               	movf	TransmitBit@b,w
 10828  1B0E  1903               	btfsc	3,2
 10829  1B0F  2B13               	goto	l749
 10830                           
 10831                           ;main.c: 328:  {;main.c: 329:   do { LATAbits.LATA4 = 1; } while(0);
 10832  1B10  0022               	movlb	2	; select bank2
 10833  1B11  160C               	bsf	12,4	;volatile
 10834  1B12  2B15               	goto	l4470
 10835  1B13                     l749:	
 10836                           ;main.c: 332:  {;main.c: 333:   do { LATAbits.LATA4 = 0; } while(0);
 10837                           
 10838  1B13  0022               	movlb	2	; select bank2
 10839  1B14  120C               	bcf	12,4	;volatile
 10840  1B15                     l4470:	
 10841                           
 10842                           ;main.c: 340:  _delay((unsigned long)((((1000 / 50) / 2) * 1000)*(4000000/4000000.0)));
 10843  1B15  300D               	movlw	13
 10844  1B16  00F5               	movwf	??_TransmitBit
 10845  1B17  30FC               	movlw	252
 10846  1B18                     u5557:	
 10847  1B18  0B89               	decfsz	9,f
 10848  1B19  2B18               	goto	u5557
 10849  1B1A  0BF5               	decfsz	??_TransmitBit,f
 10850  1B1B  2B18               	goto	u5557
 10851                           
 10852                           ;main.c: 341:  _delay((unsigned long)((((1000 / 50) / 2) * 1000)*(4000000/4000000.0)));
 10853  1B1C  300D               	movlw	13
 10854  1B1D  00F5               	movwf	??_TransmitBit
 10855  1B1E  30FC               	movlw	252
 10856  1B1F                     u5567:	
 10857  1B1F  0B89               	decfsz	9,f
 10858  1B20  2B1F               	goto	u5567
 10859  1B21  0BF5               	decfsz	??_TransmitBit,f
 10860  1B22  2B1F               	goto	u5567
 10861  1B23  0008               	return
 10862  1B24                     __end_of_TransmitBit:	
 10863                           
 10864                           	psect	text34
 10865  113D                     __ptext34:	
 10866 ;; *************** function _SetupGPS *****************
 10867 ;; Defined at:
 10868 ;;		line 505 in file "main.c"
 10869 ;; Parameters:    Size  Location     Type
 10870 ;;		None
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;		None
 10873 ;; Return value:  Size  Location     Type
 10874 ;;                  1    wreg      void 
 10875 ;; Registers used:
 10876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10877 ;; Tracked objects:
 10878 ;;		On entry : 1F/0
 10879 ;;		On exit  : 0/0
 10880 ;;		Unchanged: 0/0
 10881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;Total ram usage:        2 bytes
 10887 ;; Hardware stack levels used:    1
 10888 ;; Hardware stack levels required when called:    5
 10889 ;; This function calls:
 10890 ;;		_GPS_HasAcknowledged
 10891 ;;		_GPS_SendUBX
 10892 ;;		_WriteGPS
 10893 ;; This function is called by:
 10894 ;;		_main
 10895 ;; This function uses a non-reentrant model
 10896 ;;
 10897                           
 10898                           
 10899                           ;psect for function _SetupGPS
 10900  113D                     _SetupGPS:	
 10901  113D                     l5202:	
 10902                           ;main.c: 507:     while (!gps_configured)
 10903                           
 10904                           ;incstack = 0
 10905                           ; Regs used in _SetupGPS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10906                           
 10907                           
 10908                           ;main.c: 507:     while (!gps_configured)
 10909  113D  0022               	movlb	2	; select bank2
 10910  113E  0869               	movf	_gps_configured^(0+256),w
 10911  113F  1D03               	btfss	3,2
 10912  1140  295E               	goto	l5204
 10913                           
 10914                           ;main.c: 508:     {;main.c: 509:         do { LATAbits.LATA5 = 0; } while(0);
 10915  1141  128C               	bcf	12,5	;volatile
 10916                           
 10917                           ;main.c: 510:         GPS_SendUBX(setNavFlightMode);
 10918  1142  30A0               	movlw	(low (_setNavFlightMode| (0+512)))& (0+255)
 10919  1143  319C  2430  3191   	fcall	_GPS_SendUBX
 10920                           
 10921                           ;main.c: 511:         gps_configured = GPS_HasAcknowledged(setNavFlightMode);
 10922  1146  30A0               	movlw	(low (_setNavFlightMode| (0+512)))& (0+255)
 10923  1147  3194  24A2  3191   	fcall	_GPS_HasAcknowledged
 10924  114A  0020               	movlb	0	; select bank0
 10925  114B  00B2               	movwf	??_SetupGPS
 10926  114C  0832               	movf	??_SetupGPS,w
 10927  114D  0022               	movlb	2	; select bank2
 10928  114E  00E9               	movwf	_gps_configured^(0+256)
 10929  114F  168C               	bsf	12,5	;volatile
 10930                           
 10931                           ;main.c: 514:         _delay((unsigned long)((500)*(4000000/4000.0)));
 10932  1150  3003               	movlw	3
 10933  1151  0020               	movlb	0	; select bank0
 10934  1152  00B3               	movwf	??_SetupGPS+1
 10935  1153  308A               	movlw	138
 10936  1154  00B2               	movwf	??_SetupGPS
 10937  1155  3055               	movlw	85
 10938  1156                     u5577:	
 10939  1156  0B89               	decfsz	9,f
 10940  1157  2956               	goto	u5577
 10941  1158  0BB2               	decfsz	??_SetupGPS,f
 10942  1159  2956               	goto	u5577
 10943  115A  0BB3               	decfsz	??_SetupGPS+1,f
 10944  115B  2956               	goto	u5577
 10945  115C  3200               	nop2
 10946  115D  293D               	goto	l5202
 10947  115E                     l5204:	
 10948                           
 10949                           ;main.c: 516:     gps_configured = 0;
 10950  115E  01E9               	clrf	_gps_configured^(0+256)
 10951                           
 10952                           ;main.c: 519:     WriteGPS("$PUBX,40,GLL,0,0,0,0*5C\r\n");
 10953  115F  304E               	movlw	low (STR_1| (0+32768))
 10954  1160  0020               	movlb	0	; select bank0
 10955  1161  00A2               	movwf	WriteGPS@message
 10956  1162  3098               	movlw	high (STR_1| (0+32768))
 10957  1163  00A3               	movwf	WriteGPS@message+1
 10958  1164  319C  245A  3191   	fcall	_WriteGPS
 10959                           
 10960                           ;main.c: 520:     WriteGPS("$PUBX,40,GGA,0,0,0,0*5A\r\n");
 10961  1167  3034               	movlw	low (STR_2| (0+32768))
 10962  1168  0020               	movlb	0	; select bank0
 10963  1169  00A2               	movwf	WriteGPS@message
 10964  116A  3098               	movlw	high (STR_2| (0+32768))
 10965  116B  00A3               	movwf	WriteGPS@message+1
 10966  116C  319C  245A  3191   	fcall	_WriteGPS
 10967                           
 10968                           ;main.c: 521:     WriteGPS("$PUBX,40,VTG,0,0,0,0*5E\r\n");
 10969  116F  3082               	movlw	low (STR_3| (0+32768))
 10970  1170  0020               	movlb	0	; select bank0
 10971  1171  00A2               	movwf	WriteGPS@message
 10972  1172  3098               	movlw	high (STR_3| (0+32768))
 10973  1173  00A3               	movwf	WriteGPS@message+1
 10974  1174  319C  245A  3191   	fcall	_WriteGPS
 10975                           
 10976                           ;main.c: 522:     WriteGPS("$PUBX,40,GSV,0,0,0,0*59\r\n");
 10977  1177  301A               	movlw	low (STR_4| (0+32768))
 10978  1178  0020               	movlb	0	; select bank0
 10979  1179  00A2               	movwf	WriteGPS@message
 10980  117A  3098               	movlw	high (STR_4| (0+32768))
 10981  117B  00A3               	movwf	WriteGPS@message+1
 10982  117C  319C  245A  3191   	fcall	_WriteGPS
 10983                           
 10984                           ;main.c: 523:     WriteGPS("$PUBX,40,GSA,0,0,0,0*4E\r\n");
 10985  117F  3068               	movlw	low (STR_5| (0+32768))
 10986  1180  0020               	movlb	0	; select bank0
 10987  1181  00A2               	movwf	WriteGPS@message
 10988  1182  3098               	movlw	high (STR_5| (0+32768))
 10989  1183  00A3               	movwf	WriteGPS@message+1
 10990  1184  319C  245A  3191   	fcall	_WriteGPS
 10991                           
 10992                           ;main.c: 524:     WriteGPS("$PUBX,40,RMC,0,0,0,0*47\r\n");
 10993  1187  3000               	movlw	low (STR_6| (0+32768))
 10994  1188  0020               	movlb	0	; select bank0
 10995  1189  00A2               	movwf	WriteGPS@message
 10996  118A  3098               	movlw	high (STR_6| (0+32768))
 10997  118B  00A3               	movwf	WriteGPS@message+1
 10998  118C  319C  245A         	fcall	_WriteGPS
 10999  118E  0008               	return
 11000  118F                     __end_of_SetupGPS:	
 11001                           
 11002                           	psect	text35
 11003  1C5A                     __ptext35:	
 11004 ;; *************** function _WriteGPS *****************
 11005 ;; Defined at:
 11006 ;;		line 386 in file "main.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;  message         2    2[BANK0 ] PTR unsigned char 
 11009 ;;		 -> STR_7(14), STR_6(26), STR_5(26), STR_4(26), 
 11010 ;;		 -> STR_3(26), STR_2(26), STR_1(26), 
 11011 ;; Auto vars:     Size  Location     Type
 11012 ;;  i               2    6[BANK0 ] int 
 11013 ;;  counti          2    4[BANK0 ] int 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  1    wreg      void 
 11016 ;; Registers used:
 11017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11018 ;; Tracked objects:
 11019 ;;		On entry : 1F/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11023 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11024 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11025 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11026 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;Total ram usage:        7 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    4
 11030 ;; This function calls:
 11031 ;;		_EUSART_Write
 11032 ;;		_strlen
 11033 ;; This function is called by:
 11034 ;;		_SetupGPS
 11035 ;; This function uses a non-reentrant model
 11036 ;;
 11037                           
 11038                           
 11039                           ;psect for function _WriteGPS
 11040  1C5A                     _WriteGPS:	
 11041                           
 11042                           ;main.c: 386: void WriteGPS(char* message);main.c: 387: {;main.c: 388:     for (int i = 
      +                          0, counti = strlen(message); i <= counti; i++)
 11043                           
 11044                           ;incstack = 0
 11045                           ; Regs used in _WriteGPS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11046  1C5A  01A6               	clrf	WriteGPS@i
 11047  1C5B  01A7               	clrf	WriteGPS@i+1
 11048  1C5C  0823               	movf	WriteGPS@message+1,w
 11049  1C5D  00F6               	movwf	strlen@s+1
 11050  1C5E  0822               	movf	WriteGPS@message,w
 11051  1C5F  00F5               	movwf	strlen@s
 11052  1C60  319B  2324  319C   	fcall	_strlen
 11053  1C63  0876               	movf	?_strlen+1,w
 11054  1C64  00A5               	movwf	WriteGPS@counti+1
 11055  1C65  0875               	movf	?_strlen,w
 11056  1C66  00A4               	movwf	WriteGPS@counti
 11057  1C67                     l4776:	
 11058  1C67  0825               	movf	WriteGPS@counti+1,w
 11059  1C68  3A80               	xorlw	128
 11060  1C69  00F8               	movwf	??_WriteGPS
 11061  1C6A  0827               	movf	WriteGPS@i+1,w
 11062  1C6B  3A80               	xorlw	128
 11063  1C6C  0278               	subwf	??_WriteGPS,w
 11064  1C6D  1D03               	skipz
 11065  1C6E  2C71               	goto	u4865
 11066  1C6F  0826               	movf	WriteGPS@i,w
 11067  1C70  0224               	subwf	WriteGPS@counti,w
 11068  1C71                     u4865:	
 11069  1C71  1C03               	btfss	3,0
 11070  1C72  0008               	return
 11071                           
 11072                           ;main.c: 389:     {;main.c: 390:         EUSART_Write((uint8_t)message[i]);
 11073  1C73  0020               	movlb	0	; select bank0
 11074  1C74  0822               	movf	WriteGPS@message,w
 11075  1C75  0726               	addwf	WriteGPS@i,w
 11076  1C76  0084               	movwf	4
 11077  1C77  0823               	movf	WriteGPS@message+1,w
 11078  1C78  3D27               	addwfc	WriteGPS@i+1,w
 11079  1C79  0085               	movwf	5
 11080  1C7A  0800               	movf	0,w	;code access
 11081  1C7B  319A  229B  319C   	fcall	_EUSART_Write
 11082                           
 11083                           ;main.c: 391:     }
 11084  1C7E  3001               	movlw	1
 11085  1C7F  0020               	movlb	0	; select bank0
 11086  1C80  07A6               	addwf	WriteGPS@i,f
 11087  1C81  3000               	movlw	0
 11088  1C82  3DA7               	addwfc	WriteGPS@i+1,f
 11089  1C83  2C67               	goto	l4776
 11090  1C84                     __end_of_WriteGPS:	
 11091                           
 11092                           	psect	text36
 11093  1C30                     __ptext36:	
 11094 ;; *************** function _GPS_SendUBX *****************
 11095 ;; Defined at:
 11096 ;;		line 421 in file "main.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;  data            1    wreg     PTR unsigned char 
 11099 ;;		 -> setNavFlightMode(44), 
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;  data            1    3[BANK0 ] PTR unsigned char 
 11102 ;;		 -> setNavFlightMode(44), 
 11103 ;;  i               2    4[BANK0 ] int 
 11104 ;;  length          2    1[BANK0 ] int 
 11105 ;; Return value:  Size  Location     Type
 11106 ;;                  1    wreg      void 
 11107 ;; Registers used:
 11108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11109 ;; Tracked objects:
 11110 ;;		On entry : 1F/2
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;Total ram usage:        6 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    4
 11121 ;; This function calls:
 11122 ;;		_EUSART_Write
 11123 ;;		_GetLengthUBX
 11124 ;; This function is called by:
 11125 ;;		_SetupGPS
 11126 ;; This function uses a non-reentrant model
 11127 ;;
 11128                           
 11129                           
 11130                           ;psect for function _GPS_SendUBX
 11131  1C30                     _GPS_SendUBX:	
 11132                           
 11133                           ;incstack = 0
 11134                           ; Regs used in _GPS_SendUBX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11135                           ;GPS_SendUBX@data stored from wreg
 11136  1C30  0020               	movlb	0	; select bank0
 11137  1C31  00A3               	movwf	GPS_SendUBX@data
 11138                           
 11139                           ;main.c: 421: void GPS_SendUBX(uint8_t* data);main.c: 422: {;main.c: 423:     for (int i
      +                           = 0, length = GetLengthUBX(data); i < length; i++)
 11140  1C32  01A4               	clrf	GPS_SendUBX@i
 11141  1C33  01A5               	clrf	GPS_SendUBX@i+1
 11142  1C34  0823               	movf	GPS_SendUBX@data,w
 11143  1C35  319A  22E5  319C   	fcall	_GetLengthUBX
 11144  1C38  0876               	movf	?_GetLengthUBX+1,w
 11145  1C39  00A2               	movwf	GPS_SendUBX@length+1
 11146  1C3A  0875               	movf	?_GetLengthUBX,w
 11147  1C3B  00A1               	movwf	GPS_SendUBX@length
 11148  1C3C                     l4786:	
 11149  1C3C  0825               	movf	GPS_SendUBX@i+1,w
 11150  1C3D  3A80               	xorlw	128
 11151  1C3E  00A0               	movwf	??_GPS_SendUBX
 11152  1C3F  0822               	movf	GPS_SendUBX@length+1,w
 11153  1C40  3A80               	xorlw	128
 11154  1C41  0220               	subwf	??_GPS_SendUBX,w
 11155  1C42  1D03               	skipz
 11156  1C43  2C46               	goto	u4875
 11157  1C44  0821               	movf	GPS_SendUBX@length,w
 11158  1C45  0224               	subwf	GPS_SendUBX@i,w
 11159  1C46                     u4875:	
 11160  1C46  1803               	btfsc	3,0
 11161  1C47  0008               	return
 11162                           
 11163                           ;main.c: 424:     {;main.c: 425:         EUSART_Write(data[i]);
 11164  1C48  0020               	movlb	0	; select bank0
 11165  1C49  0824               	movf	GPS_SendUBX@i,w
 11166  1C4A  0723               	addwf	GPS_SendUBX@data,w
 11167  1C4B  00A0               	movwf	??_GPS_SendUBX
 11168  1C4C  0820               	movf	??_GPS_SendUBX,w
 11169  1C4D  0086               	movwf	6
 11170  1C4E  3002               	movlw	2	; select bank4/5
 11171  1C4F  0087               	movwf	7
 11172  1C50  0801               	movf	1,w
 11173  1C51  319A  229B  319C   	fcall	_EUSART_Write
 11174                           
 11175                           ;main.c: 426:     }
 11176  1C54  3001               	movlw	1
 11177  1C55  0020               	movlb	0	; select bank0
 11178  1C56  07A4               	addwf	GPS_SendUBX@i,f
 11179  1C57  3000               	movlw	0
 11180  1C58  3DA5               	addwfc	GPS_SendUBX@i+1,f
 11181  1C59  2C3C               	goto	l4786
 11182  1C5A                     __end_of_GPS_SendUBX:	
 11183                           
 11184                           	psect	text37
 11185  1AE5                     __ptext37:	
 11186 ;; *************** function _GetLengthUBX *****************
 11187 ;; Defined at:
 11188 ;;		line 415 in file "main.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;  data            1    wreg     PTR unsigned char 
 11191 ;;		 -> setNavFlightMode(44), 
 11192 ;; Auto vars:     Size  Location     Type
 11193 ;;  data            1    8[COMMON] PTR unsigned char 
 11194 ;;		 -> setNavFlightMode(44), 
 11195 ;; Return value:  Size  Location     Type
 11196 ;;                  2    5[COMMON] unsigned int 
 11197 ;; Registers used:
 11198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11199 ;; Tracked objects:
 11200 ;;		On entry : 1F/0
 11201 ;;		On exit  : 1F/0
 11202 ;;		Unchanged: 1F/0
 11203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11204 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11205 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11207 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11208 ;;Total ram usage:        4 bytes
 11209 ;; Hardware stack levels used:    1
 11210 ;; Hardware stack levels required when called:    3
 11211 ;; This function calls:
 11212 ;;		Nothing
 11213 ;; This function is called by:
 11214 ;;		_GPS_SendUBX
 11215 ;; This function uses a non-reentrant model
 11216 ;;
 11217                           
 11218                           
 11219                           ;psect for function _GetLengthUBX
 11220  1AE5                     _GetLengthUBX:	
 11221                           
 11222                           ;incstack = 0
 11223                           ; Regs used in _GetLengthUBX: [wreg-fsr1h+status,2+status,0]
 11224                           ;GetLengthUBX@data stored from wreg
 11225  1AE5  00F8               	movwf	GetLengthUBX@data
 11226                           
 11227                           ;main.c: 415: size_t GetLengthUBX(uint8_t* data);main.c: 416: {;main.c: 417:     return 
      +                          (short)(8 + (short)((short)data[4] + (short)(data[5] << 8)));
 11228  1AE6  0878               	movf	GetLengthUBX@data,w
 11229  1AE7  3E05               	addlw	5
 11230  1AE8  0086               	movwf	6
 11231  1AE9  3002               	movlw	2	; select bank4/5
 11232  1AEA  0087               	movwf	7
 11233  1AEB  0878               	movf	GetLengthUBX@data,w
 11234  1AEC  3E04               	addlw	4
 11235  1AED  0084               	movwf	4
 11236  1AEE  3002               	movlw	2	; select bank4/5
 11237  1AEF  0085               	movwf	5
 11238  1AF0  0800               	movf	0,w
 11239  1AF1  3E08               	addlw	8
 11240  1AF2  00F5               	movwf	?_GetLengthUBX
 11241  1AF3  3000               	movlw	0
 11242  1AF4  3D01               	addwfc	1,w
 11243  1AF5  00F6               	movwf	?_GetLengthUBX+1
 11244  1AF6  0008               	return
 11245  1AF7                     __end_of_GetLengthUBX:	
 11246                           
 11247                           	psect	text38
 11248  1A9B                     __ptext38:	
 11249 ;; *************** function _EUSART_Write *****************
 11250 ;; Defined at:
 11251 ;;		line 111 in file "mcc_generated_files/eusart.c"
 11252 ;; Parameters:    Size  Location     Type
 11253 ;;  txData          1    wreg     unsigned char 
 11254 ;; Auto vars:     Size  Location     Type
 11255 ;;  txData          1    5[COMMON] unsigned char 
 11256 ;; Return value:  Size  Location     Type
 11257 ;;                  1    wreg      void 
 11258 ;; Registers used:
 11259 ;;		wreg
 11260 ;; Tracked objects:
 11261 ;;		On entry : 1F/0
 11262 ;;		On exit  : 1F/3
 11263 ;;		Unchanged: 0/0
 11264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;Total ram usage:        1 bytes
 11270 ;; Hardware stack levels used:    1
 11271 ;; Hardware stack levels required when called:    3
 11272 ;; This function calls:
 11273 ;;		Nothing
 11274 ;; This function is called by:
 11275 ;;		_WriteGPS
 11276 ;;		_GPS_SendUBX
 11277 ;; This function uses a non-reentrant model
 11278 ;;
 11279                           
 11280                           
 11281                           ;psect for function _EUSART_Write
 11282  1A9B                     _EUSART_Write:	
 11283                           
 11284                           ;incstack = 0
 11285                           ; Regs used in _EUSART_Write: [wreg]
 11286                           ;EUSART_Write@txData stored from wreg
 11287  1A9B  00F5               	movwf	EUSART_Write@txData
 11288  1A9C                     l358:	
 11289                           ;mcc_generated_files/eusart.c: 114:     {;mcc_generated_files/eusart.c: 115:     }
 11290                           
 11291                           
 11292                           ;mcc_generated_files/eusart.c: 113:     while(0 == PIR1bits.TXIF)
 11293  1A9C  1E10               	btfss	16,4	;volatile
 11294  1A9D  2A9C               	goto	l358
 11295                           
 11296                           ;mcc_generated_files/eusart.c: 117:     TX1REG = txData;
 11297  1A9E  0875               	movf	EUSART_Write@txData,w
 11298  1A9F  0023               	movlb	3	; select bank3
 11299  1AA0  009A               	movwf	26	;volatile
 11300  1AA1  0008               	return
 11301  1AA2                     __end_of_EUSART_Write:	
 11302                           
 11303                           	psect	text39
 11304  14A2                     __ptext39:	
 11305 ;; *************** function _GPS_HasAcknowledged *****************
 11306 ;; Defined at:
 11307 ;;		line 433 in file "main.c"
 11308 ;; Parameters:    Size  Location     Type
 11309 ;;  data            1    wreg     PTR unsigned char 
 11310 ;;		 -> setNavFlightMode(44), 
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;  data            1   15[BANK0 ] PTR unsigned char 
 11313 ;;		 -> setNavFlightMode(44), 
 11314 ;;  i               1   17[BANK0 ] unsigned char 
 11315 ;;  ackPacket      10    5[BANK0 ] unsigned char [10]
 11316 ;;  startTime       4    0[BANK0 ] unsigned long 
 11317 ;;  ackByteID       1   16[BANK0 ] unsigned char 
 11318 ;;  ackByte         1    4[BANK0 ] unsigned char 
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  1    wreg      _Bool 
 11321 ;; Registers used:
 11322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/2
 11325 ;;		On exit  : 1D/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Totals:         4      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;Total ram usage:       22 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    4
 11335 ;; This function calls:
 11336 ;;		_EUSART_Read
 11337 ;;		_EUSART_is_rx_ready
 11338 ;; This function is called by:
 11339 ;;		_SetupGPS
 11340 ;; This function uses a non-reentrant model
 11341 ;;
 11342                           
 11343                           
 11344                           ;psect for function _GPS_HasAcknowledged
 11345  14A2                     _GPS_HasAcknowledged:	
 11346                           
 11347                           ;incstack = 0
 11348                           ; Regs used in _GPS_HasAcknowledged: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11349                           ;GPS_HasAcknowledged@data stored from wreg
 11350  14A2  0020               	movlb	0	; select bank0
 11351  14A3  00AF               	movwf	GPS_HasAcknowledged@data
 11352                           
 11353                           ;main.c: 433: _Bool GPS_HasAcknowledged(uint8_t* data);main.c: 434: {;main.c: 435:     u
      +                          int8_t ackPacket[10];;main.c: 436:     unsigned long startTime = ticks;
 11354  14A4  0022               	movlb	2	; select bank2
 11355  14A5  0866               	movf	(_ticks+3)^(0+256),w
 11356  14A6  0020               	movlb	0	; select bank0
 11357  14A7  00A3               	movwf	GPS_HasAcknowledged@startTime+3
 11358  14A8  0022               	movlb	2	; select bank2
 11359  14A9  0865               	movf	(_ticks+2)^(0+256),w
 11360  14AA  0020               	movlb	0	; select bank0
 11361  14AB  00A2               	movwf	GPS_HasAcknowledged@startTime+2
 11362  14AC  0022               	movlb	2	; select bank2
 11363  14AD  0864               	movf	(_ticks+1)^(0+256),w
 11364  14AE  0020               	movlb	0	; select bank0
 11365  14AF  00A1               	movwf	GPS_HasAcknowledged@startTime+1
 11366  14B0  0022               	movlb	2	; select bank2
 11367  14B1  0863               	movf	_ticks^(0+256),w
 11368  14B2  0020               	movlb	0	; select bank0
 11369  14B3  00A0               	movwf	GPS_HasAcknowledged@startTime
 11370                           
 11371                           ;main.c: 439:     ackPacket[0] = 0xB5;
 11372  14B4  30B5               	movlw	181
 11373  14B5  00F5               	movwf	??_GPS_HasAcknowledged
 11374  14B6  0875               	movf	??_GPS_HasAcknowledged,w
 11375  14B7  00A5               	movwf	GPS_HasAcknowledged@ackPacket
 11376                           
 11377                           ;main.c: 440:     ackPacket[1] = 0x62;
 11378  14B8  3062               	movlw	98
 11379  14B9  00F5               	movwf	??_GPS_HasAcknowledged
 11380  14BA  0875               	movf	??_GPS_HasAcknowledged,w
 11381  14BB  00A6               	movwf	GPS_HasAcknowledged@ackPacket+1
 11382                           
 11383                           ;main.c: 441:     ackPacket[2] = 0x05;
 11384  14BC  3005               	movlw	5
 11385  14BD  00F5               	movwf	??_GPS_HasAcknowledged
 11386  14BE  0875               	movf	??_GPS_HasAcknowledged,w
 11387  14BF  00A7               	movwf	GPS_HasAcknowledged@ackPacket+2
 11388                           
 11389                           ;main.c: 442:     ackPacket[3] = 0x01;
 11390  14C0  01A8               	clrf	GPS_HasAcknowledged@ackPacket+3
 11391  14C1  0AA8               	incf	GPS_HasAcknowledged@ackPacket+3,f
 11392                           
 11393                           ;main.c: 443:     ackPacket[4] = 0x02;
 11394  14C2  3002               	movlw	2
 11395  14C3  00F5               	movwf	??_GPS_HasAcknowledged
 11396  14C4  0875               	movf	??_GPS_HasAcknowledged,w
 11397  14C5  00A9               	movwf	GPS_HasAcknowledged@ackPacket+4
 11398                           
 11399                           ;main.c: 444:     ackPacket[5] = 0x00;
 11400  14C6  01AA               	clrf	GPS_HasAcknowledged@ackPacket+5
 11401                           
 11402                           ;main.c: 445:     ackPacket[6] = data[2];
 11403  14C7  082F               	movf	GPS_HasAcknowledged@data,w
 11404  14C8  0086               	movwf	6
 11405  14C9  3002               	movlw	2	; select bank4/5
 11406  14CA  0087               	movwf	7
 11407  14CB  3002               	movlw	2	; select bank4/5
 11408  14CC  3F42               	moviw [2]fsr1
 11409  14CD  00AB               	movwf	GPS_HasAcknowledged@ackPacket+6
 11410                           
 11411                           ;main.c: 446:     ackPacket[7] = data[3];
 11412  14CE  082F               	movf	GPS_HasAcknowledged@data,w
 11413  14CF  0086               	movwf	6
 11414  14D0  3002               	movlw	2	; select bank4/5
 11415  14D1  0087               	movwf	7
 11416  14D2  3002               	movlw	2	; select bank4/5
 11417  14D3  3F43               	moviw [3]fsr1
 11418  14D4  00AC               	movwf	GPS_HasAcknowledged@ackPacket+7
 11419                           
 11420                           ;main.c: 447:     ackPacket[8] = 0;
 11421  14D5  01AD               	clrf	GPS_HasAcknowledged@ackPacket+8
 11422                           
 11423                           ;main.c: 448:     ackPacket[9] = 0;
 11424  14D6  01AE               	clrf	GPS_HasAcknowledged@ackPacket+9
 11425                           
 11426                           ;main.c: 451:     for (uint8_t i = 2; i < 8; i++)
 11427  14D7  3002               	movlw	2
 11428  14D8  00F5               	movwf	??_GPS_HasAcknowledged
 11429  14D9  0875               	movf	??_GPS_HasAcknowledged,w
 11430  14DA  00B1               	movwf	GPS_HasAcknowledged@i
 11431  14DB                     l4808:	
 11432                           
 11433                           ;main.c: 452:     {;main.c: 453:         ackPacket[8] = ackPacket[8] + ackPacket[i];
 11434  14DB  0831               	movf	GPS_HasAcknowledged@i,w
 11435  14DC  3E25               	addlw	(low (GPS_HasAcknowledged@ackPacket| 0))& (0+255)
 11436  14DD  0086               	movwf	6
 11437  14DE  0187               	clrf	7
 11438  14DF  082D               	movf	GPS_HasAcknowledged@ackPacket+8,w
 11439  14E0  0701               	addwf	1,w
 11440  14E1  00F5               	movwf	??_GPS_HasAcknowledged
 11441  14E2  0875               	movf	??_GPS_HasAcknowledged,w
 11442  14E3  00AD               	movwf	GPS_HasAcknowledged@ackPacket+8
 11443                           
 11444                           ;main.c: 454:         ackPacket[9] = ackPacket[9] + ackPacket[8];
 11445  14E4  082E               	movf	GPS_HasAcknowledged@ackPacket+9,w
 11446  14E5  072D               	addwf	GPS_HasAcknowledged@ackPacket+8,w
 11447  14E6  00F5               	movwf	??_GPS_HasAcknowledged
 11448  14E7  0875               	movf	??_GPS_HasAcknowledged,w
 11449  14E8  00AE               	movwf	GPS_HasAcknowledged@ackPacket+9
 11450                           
 11451                           ;main.c: 455:     }
 11452  14E9  3001               	movlw	1
 11453  14EA  00F5               	movwf	??_GPS_HasAcknowledged
 11454  14EB  0875               	movf	??_GPS_HasAcknowledged,w
 11455  14EC  07B1               	addwf	GPS_HasAcknowledged@i,f
 11456  14ED  3008               	movlw	8
 11457  14EE  0231               	subwf	GPS_HasAcknowledged@i,w
 11458  14EF  1C03               	skipc
 11459  14F0  2CDB               	goto	l4808
 11460  14F1                     l4816:	
 11461                           
 11462                           ;main.c: 458:     uint8_t ackByte;;main.c: 461:     uint8_t ackByteID = 0;
 11463  14F1  01B0               	clrf	GPS_HasAcknowledged@ackByteID
 11464  14F2                     l4818:	
 11465                           
 11466                           ;main.c: 465:     {;main.c: 468:         if (ackByteID > 9)
 11467  14F2  300A               	movlw	10
 11468  14F3  0230               	subwf	GPS_HasAcknowledged@ackByteID,w
 11469  14F4  1C03               	skipc
 11470  14F5  2CF8               	goto	l4824
 11471                           
 11472                           ;main.c: 469:         {;main.c: 472:             return 1;
 11473  14F6  3001               	movlw	1
 11474  14F7  0008               	return
 11475  14F8                     l4824:	
 11476                           
 11477                           ;main.c: 476:         if (ticks - startTime > 3000)
 11478  14F8  0820               	movf	GPS_HasAcknowledged@startTime,w
 11479  14F9  0022               	movlb	2	; select bank2
 11480  14FA  0263               	subwf	_ticks^(0+256),w
 11481  14FB  00F5               	movwf	??_GPS_HasAcknowledged
 11482  14FC  0020               	movlb	0	; select bank0
 11483  14FD  0821               	movf	GPS_HasAcknowledged@startTime+1,w
 11484  14FE  0022               	movlb	2	; select bank2
 11485  14FF  3B64               	subwfb	(_ticks+1)^(0+256),w
 11486  1500  00F6               	movwf	??_GPS_HasAcknowledged+1
 11487  1501  0020               	movlb	0	; select bank0
 11488  1502  0822               	movf	GPS_HasAcknowledged@startTime+2,w
 11489  1503  0022               	movlb	2	; select bank2
 11490  1504  3B65               	subwfb	(_ticks+2)^(0+256),w
 11491  1505  00F7               	movwf	??_GPS_HasAcknowledged+2
 11492  1506  0020               	movlb	0	; select bank0
 11493  1507  0823               	movf	GPS_HasAcknowledged@startTime+3,w
 11494  1508  0022               	movlb	2	; select bank2
 11495  1509  3B66               	subwfb	(_ticks+3)^(0+256),w
 11496  150A  00F8               	movwf	??_GPS_HasAcknowledged+3
 11497  150B  0878               	movf	??_GPS_HasAcknowledged+3,w
 11498  150C  1D03               	btfss	3,2
 11499  150D  2D17               	goto	l4826
 11500  150E  0877               	movf	??_GPS_HasAcknowledged+2,w
 11501  150F  1D03               	btfss	3,2
 11502  1510  2D17               	goto	l4826
 11503  1511  30B9               	movlw	185
 11504  1512  0275               	subwf	??_GPS_HasAcknowledged,w
 11505  1513  300B               	movlw	11
 11506  1514  3B76               	subwfb	??_GPS_HasAcknowledged+1,w
 11507  1515  1C03               	btfss	3,0
 11508  1516  2D19               	goto	l4830
 11509  1517                     l4826:	
 11510                           
 11511                           ;main.c: 477:         {;main.c: 478:             return 0;
 11512  1517  3000               	movlw	0
 11513  1518  0008               	return
 11514  1519                     l4830:	
 11515                           
 11516                           ;main.c: 482:         if (EUSART_is_rx_ready())
 11517  1519  319A  227D  3194   	fcall	_EUSART_is_rx_ready
 11518  151C  3A00               	xorlw	0
 11519  151D  1903               	skipnz
 11520  151E  2CF2               	goto	l4818
 11521                           
 11522                           ;main.c: 483:         {;main.c: 484:             ackByte = EUSART_Read();
 11523  151F  319A  22A2  3194   	fcall	_EUSART_Read
 11524  1522  00F5               	movwf	??_GPS_HasAcknowledged
 11525  1523  0875               	movf	??_GPS_HasAcknowledged,w
 11526  1524  0020               	movlb	0	; select bank0
 11527  1525  00A4               	movwf	GPS_HasAcknowledged@ackByte
 11528                           
 11529                           ;main.c: 487:             if (ackByte == ackPacket[ackByteID]) {
 11530  1526  0830               	movf	GPS_HasAcknowledged@ackByteID,w
 11531  1527  3E25               	addlw	(low (GPS_HasAcknowledged@ackPacket| 0))& (0+255)
 11532  1528  0086               	movwf	6
 11533  1529  0187               	clrf	7
 11534  152A  0801               	movf	1,w
 11535  152B  0624               	xorwf	GPS_HasAcknowledged@ackByte,w
 11536  152C  1D03               	skipz
 11537  152D  2CF1               	goto	l4816
 11538                           
 11539                           ;main.c: 488:                 ackByteID++;
 11540  152E  3001               	movlw	1
 11541  152F  00F5               	movwf	??_GPS_HasAcknowledged
 11542  1530  0875               	movf	??_GPS_HasAcknowledged,w
 11543  1531  07B0               	addwf	GPS_HasAcknowledged@ackByteID,f
 11544                           
 11545                           ;main.c: 489:             }
 11546  1532  2CF2               	goto	l4818
 11547  1533                     __end_of_GPS_HasAcknowledged:	
 11548                           
 11549                           	psect	text40
 11550  1A7D                     __ptext40:	
 11551 ;; *************** function _EUSART_is_rx_ready *****************
 11552 ;; Defined at:
 11553 ;;		line 83 in file "mcc_generated_files/eusart.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;		None
 11556 ;; Auto vars:     Size  Location     Type
 11557 ;;		None
 11558 ;; Return value:  Size  Location     Type
 11559 ;;                  1    wreg      _Bool 
 11560 ;; Registers used:
 11561 ;;		wreg, status,2, status,0
 11562 ;; Tracked objects:
 11563 ;;		On entry : 1F/2
 11564 ;;		On exit  : 1F/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;Total ram usage:        0 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    3
 11574 ;; This function calls:
 11575 ;;		Nothing
 11576 ;; This function is called by:
 11577 ;;		_GPS_HasAcknowledged
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function _EUSART_is_rx_ready
 11583  1A7D                     _EUSART_is_rx_ready:	
 11584                           
 11585                           ;mcc_generated_files/eusart.c: 85:     return PIR1bits.RCIF;
 11586                           
 11587                           ;incstack = 0
 11588                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
 11589  1A7D  0020               	movlb	0	; select bank0
 11590  1A7E  0E10               	swapf	16,w	;volatile
 11591  1A7F  0C89               	rrf	9,f
 11592  1A80  3901               	andlw	1
 11593  1A81  0008               	return
 11594  1A82                     __end_of_EUSART_is_rx_ready:	
 11595                           
 11596                           	psect	text41
 11597  1AA2                     __ptext41:	
 11598 ;; *************** function _EUSART_Read *****************
 11599 ;; Defined at:
 11600 ;;		line 93 in file "mcc_generated_files/eusart.c"
 11601 ;; Parameters:    Size  Location     Type
 11602 ;;		None
 11603 ;; Auto vars:     Size  Location     Type
 11604 ;;		None
 11605 ;; Return value:  Size  Location     Type
 11606 ;;                  1    wreg      unsigned char 
 11607 ;; Registers used:
 11608 ;;		wreg
 11609 ;; Tracked objects:
 11610 ;;		On entry : 1F/0
 11611 ;;		On exit  : 1F/3
 11612 ;;		Unchanged: 0/0
 11613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;Total ram usage:        0 bytes
 11619 ;; Hardware stack levels used:    1
 11620 ;; Hardware stack levels required when called:    3
 11621 ;; This function calls:
 11622 ;;		Nothing
 11623 ;; This function is called by:
 11624 ;;		_GPS_HasAcknowledged
 11625 ;; This function uses a non-reentrant model
 11626 ;;
 11627                           
 11628                           
 11629                           ;psect for function _EUSART_Read
 11630  1AA2                     _EUSART_Read:	
 11631  1AA2                     l351:	
 11632                           ;mcc_generated_files/eusart.c: 96:     {;mcc_generated_files/eusart.c: 97:     }
 11633                           
 11634                           ;incstack = 0
 11635                           ; Regs used in _EUSART_Read: [wreg]
 11636                           
 11637                           
 11638                           ;mcc_generated_files/eusart.c: 95:     while(!PIR1bits.RCIF)
 11639  1AA2  1E90               	btfss	16,5	;volatile
 11640  1AA3  2AA2               	goto	l351
 11641                           
 11642                           ;mcc_generated_files/eusart.c: 100:     if(1 == RC1STAbits.OERR)
 11643  1AA4  0023               	movlb	3	; select bank3
 11644  1AA5  1C9D               	btfss	29,1	;volatile
 11645  1AA6  2AA9               	goto	l4444
 11646                           
 11647                           ;mcc_generated_files/eusart.c: 101:     {;mcc_generated_files/eusart.c: 104:         RC1
      +                          STAbits.CREN = 0;
 11648  1AA7  121D               	bcf	29,4	;volatile
 11649                           
 11650                           ;mcc_generated_files/eusart.c: 105:         RC1STAbits.CREN = 1;
 11651  1AA8  161D               	bsf	29,4	;volatile
 11652  1AA9                     l4444:	
 11653                           
 11654                           ;mcc_generated_files/eusart.c: 108:     return RC1REG;
 11655  1AA9  0819               	movf	25,w	;volatile
 11656  1AAA  0008               	return
 11657  1AAB                     __end_of_EUSART_Read:	
 11658                           
 11659                           	psect	text42
 11660  1AB5                     __ptext42:	
 11661 ;; *************** function _SYSTEM_Initialize *****************
 11662 ;; Defined at:
 11663 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11664 ;; Parameters:    Size  Location     Type
 11665 ;;		None
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;		None
 11668 ;; Return value:  Size  Location     Type
 11669 ;;                  1    wreg      void 
 11670 ;; Registers used:
 11671 ;;		wreg, status,2, status,0, pclath, cstack
 11672 ;; Tracked objects:
 11673 ;;		On entry : B1F/0
 11674 ;;		On exit  : 1F/3
 11675 ;;		Unchanged: 0/0
 11676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;Total ram usage:        0 bytes
 11682 ;; Hardware stack levels used:    1
 11683 ;; Hardware stack levels required when called:    5
 11684 ;; This function calls:
 11685 ;;		_EUSART_Initialize
 11686 ;;		_I2C_Initialize
 11687 ;;		_OSCILLATOR_Initialize
 11688 ;;		_PIN_MANAGER_Initialize
 11689 ;;		_TMR0_Initialize
 11690 ;; This function is called by:
 11691 ;;		_main
 11692 ;; This function uses a non-reentrant model
 11693 ;;
 11694                           
 11695                           
 11696                           ;psect for function _SYSTEM_Initialize
 11697  1AB5                     _SYSTEM_Initialize:	
 11698                           
 11699                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
 11700                           
 11701                           ;incstack = 0
 11702                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11703  1AB5  3188  2000  319A   	fcall	_PIN_MANAGER_Initialize
 11704                           
 11705                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
 11706  1AB8  319A  2294  319A   	fcall	_OSCILLATOR_Initialize
 11707                           
 11708                           ;mcc_generated_files/mcc.c: 54:     I2C_Initialize();
 11709  1ABB  319B  233D  319A   	fcall	_I2C_Initialize
 11710                           
 11711                           ;mcc_generated_files/mcc.c: 55:     TMR0_Initialize();
 11712  1ABE  319A  22F7  319A   	fcall	_TMR0_Initialize
 11713                           
 11714                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
 11715  1AC1  3190  2002         	fcall	_EUSART_Initialize
 11716  1AC3  0008               	return
 11717  1AC4                     __end_of_SYSTEM_Initialize:	
 11718                           
 11719                           	psect	text43
 11720  1AF7                     __ptext43:	
 11721 ;; *************** function _TMR0_Initialize *****************
 11722 ;; Defined at:
 11723 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 11724 ;; Parameters:    Size  Location     Type
 11725 ;;		None
 11726 ;; Auto vars:     Size  Location     Type
 11727 ;;		None
 11728 ;; Return value:  Size  Location     Type
 11729 ;;                  1    wreg      void 
 11730 ;; Registers used:
 11731 ;;		wreg, status,2, status,0, pclath, cstack
 11732 ;; Tracked objects:
 11733 ;;		On entry : B1F/1
 11734 ;;		On exit  : 1F/3
 11735 ;;		Unchanged: 0/0
 11736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;Total ram usage:        1 bytes
 11742 ;; Hardware stack levels used:    1
 11743 ;; Hardware stack levels required when called:    4
 11744 ;; This function calls:
 11745 ;;		_TMR0_SetInterruptHandler
 11746 ;; This function is called by:
 11747 ;;		_SYSTEM_Initialize
 11748 ;; This function uses a non-reentrant model
 11749 ;;
 11750                           
 11751                           
 11752                           ;psect for function _TMR0_Initialize
 11753  1AF7                     _TMR0_Initialize:	
 11754                           
 11755                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
 11756                           
 11757                           ;incstack = 0
 11758                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11759  1AF7  0815               	movf	21,w	;volatile
 11760  1AF8  39C0               	andlw	192
 11761  1AF9  3812               	iorlw	18
 11762  1AFA  0095               	movwf	21	;volatile
 11763                           
 11764                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
 11765  1AFB  3083               	movlw	131
 11766  1AFC  0020               	movlb	0	; select bank0
 11767  1AFD  0095               	movwf	21	;volatile
 11768                           
 11769                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
 11770  1AFE  3083               	movlw	131
 11771  1AFF  00F7               	movwf	??_TMR0_Initialize
 11772  1B00  0877               	movf	??_TMR0_Initialize,w
 11773  1B01  0022               	movlb	2	; select bank2
 11774  1B02  00EE               	movwf	_timer0ReloadVal^(0+256)	;volatile
 11775                           
 11776                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
 11777  1B03  110B               	bcf	11,2	;volatile
 11778                           
 11779                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
 11780  1B04  168B               	bsf	11,5	;volatile
 11781                           
 11782                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11783  1B05  307C               	movlw	low _TMR0_DefaultInterruptHandler
 11784  1B06  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 11785  1B07  301A               	movlw	high _TMR0_DefaultInterruptHandler
 11786  1B08  00F6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 11787  1B09  319A  2282         	fcall	_TMR0_SetInterruptHandler
 11788  1B0B  0008               	return
 11789  1B0C                     __end_of_TMR0_Initialize:	
 11790                           
 11791                           	psect	text44
 11792  1A82                     __ptext44:	
 11793 ;; *************** function _TMR0_SetInterruptHandler *****************
 11794 ;; Defined at:
 11795 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;  InterruptHan    2    5[COMMON] PTR FTN()void 
 11798 ;;		 -> TimerISR(1), TMR0_DefaultInterruptHandler(1), 
 11799 ;; Auto vars:     Size  Location     Type
 11800 ;;		None
 11801 ;; Return value:  Size  Location     Type
 11802 ;;                  1    wreg      void 
 11803 ;; Registers used:
 11804 ;;		wreg
 11805 ;; Tracked objects:
 11806 ;;		On entry : 1E/3
 11807 ;;		On exit  : 1F/3
 11808 ;;		Unchanged: 0/0
 11809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11813 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11814 ;;Total ram usage:        2 bytes
 11815 ;; Hardware stack levels used:    1
 11816 ;; Hardware stack levels required when called:    3
 11817 ;; This function calls:
 11818 ;;		Nothing
 11819 ;; This function is called by:
 11820 ;;		_TMR0_Initialize
 11821 ;;		_main
 11822 ;; This function uses a non-reentrant model
 11823 ;;
 11824                           
 11825                           
 11826                           ;psect for function _TMR0_SetInterruptHandler
 11827  1A82                     _TMR0_SetInterruptHandler:	
 11828                           
 11829                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
 11830                           
 11831                           ;incstack = 0
 11832                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 11833  1A82  0876               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 11834  1A83  0023               	movlb	3	; select bank3
 11835  1A84  00EA               	movwf	(_TMR0_InterruptHandler+1)^(0+384)
 11836  1A85  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 11837  1A86  00E9               	movwf	_TMR0_InterruptHandler^(0+384)
 11838  1A87  0008               	return
 11839  1A88                     __end_of_TMR0_SetInterruptHandler:	
 11840                           
 11841                           	psect	text45
 11842  0800                     __ptext45:	
 11843 ;; *************** function _PIN_MANAGER_Initialize *****************
 11844 ;; Defined at:
 11845 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;		None
 11848 ;; Auto vars:     Size  Location     Type
 11849 ;;		None
 11850 ;; Return value:  Size  Location     Type
 11851 ;;                  1    wreg      void 
 11852 ;; Registers used:
 11853 ;;		wreg, status,2
 11854 ;; Tracked objects:
 11855 ;;		On entry : B1F/0
 11856 ;;		On exit  : B1F/1C
 11857 ;;		Unchanged: B00/0
 11858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;Total ram usage:        0 bytes
 11864 ;; Hardware stack levels used:    1
 11865 ;; Hardware stack levels required when called:    3
 11866 ;; This function calls:
 11867 ;;		Nothing
 11868 ;; This function is called by:
 11869 ;;		_SYSTEM_Initialize
 11870 ;; This function uses a non-reentrant model
 11871 ;;
 11872                           
 11873                           
 11874                           ;psect for function _PIN_MANAGER_Initialize
 11875  0800                     _PIN_MANAGER_Initialize:	
 11876                           
 11877                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 11878                           
 11879                           ;incstack = 0
 11880                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11881  0800  0022               	movlb	2	; select bank2
 11882  0801  018C               	clrf	12	;volatile
 11883                           
 11884                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 11885  0802  018D               	clrf	13	;volatile
 11886                           
 11887                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 11888  0803  018E               	clrf	14	;volatile
 11889                           
 11890                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x03;
 11891  0804  3003               	movlw	3
 11892  0805  0021               	movlb	1	; select bank1
 11893  0806  008C               	movwf	12	;volatile
 11894                           
 11895                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x70;
 11896  0807  3070               	movlw	112
 11897  0808  008D               	movwf	13	;volatile
 11898                           
 11899                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xDF;
 11900  0809  30DF               	movlw	223
 11901  080A  008E               	movwf	14	;volatile
 11902                           
 11903                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x4F;
 11904  080B  304F               	movlw	79
 11905  080C  0023               	movlb	3	; select bank3
 11906  080D  008E               	movwf	14	;volatile
 11907                           
 11908                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x80;
 11909  080E  3080               	movlw	128
 11910  080F  008D               	movwf	13	;volatile
 11911                           
 11912                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x03;
 11913  0810  3003               	movlw	3
 11914  0811  008C               	movwf	12	;volatile
 11915                           
 11916                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 11917  0812  0024               	movlb	4	; select bank4
 11918  0813  018D               	clrf	13	;volatile
 11919                           
 11920                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 11921  0814  018C               	clrf	12	;volatile
 11922                           
 11923                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
 11924  0815  018E               	clrf	14	;volatile
 11925                           
 11926                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 1;
 11927  0816  0021               	movlb	1	; select bank1
 11928  0817  1795               	bsf	21,7	;volatile
 11929                           
 11930                           ;mcc_generated_files/pin_manager.c: 91:     ODCONA = 0x00;
 11931  0818  0025               	movlb	5	; select bank5
 11932  0819  018C               	clrf	12	;volatile
 11933                           
 11934                           ;mcc_generated_files/pin_manager.c: 92:     ODCONB = 0x00;
 11935  081A  018D               	clrf	13	;volatile
 11936                           
 11937                           ;mcc_generated_files/pin_manager.c: 93:     ODCONC = 0x00;
 11938  081B  018E               	clrf	14	;volatile
 11939                           
 11940                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONA = 0x37;
 11941  081C  3037               	movlw	55
 11942  081D  0026               	movlb	6	; select bank6
 11943  081E  008C               	movwf	12	;volatile
 11944                           
 11945                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONB = 0xF0;
 11946  081F  30F0               	movlw	240
 11947  0820  008D               	movwf	13	;volatile
 11948                           
 11949                           ;mcc_generated_files/pin_manager.c: 100:     SLRCONC = 0xFF;
 11950  0821  30FF               	movlw	255
 11951  0822  008E               	movwf	14	;volatile
 11952                           
 11953                           ;mcc_generated_files/pin_manager.c: 109:     RXPPS = 0x0D;
 11954  0823  300D               	movlw	13
 11955  0824  003C               	movlb	28	; select bank28
 11956  0825  00A4               	movwf	36	;volatile
 11957                           
 11958                           ;mcc_generated_files/pin_manager.c: 110:     SSPDATPPS = 0x0C;
 11959  0826  300C               	movlw	12
 11960  0827  00A1               	movwf	33	;volatile
 11961                           
 11962                           ;mcc_generated_files/pin_manager.c: 111:     RB6PPS = 0x10;
 11963  0828  3010               	movlw	16
 11964  0829  003D               	movlb	29	; select bank29
 11965  082A  009E               	movwf	30	;volatile
 11966                           
 11967                           ;mcc_generated_files/pin_manager.c: 112:     RB7PPS = 0x12;
 11968  082B  3012               	movlw	18
 11969  082C  009F               	movwf	31	;volatile
 11970                           
 11971                           ;mcc_generated_files/pin_manager.c: 113:     RB4PPS = 0x11;
 11972  082D  3011               	movlw	17
 11973  082E  009C               	movwf	28	;volatile
 11974                           
 11975                           ;mcc_generated_files/pin_manager.c: 114:     SSPCLKPPS = 0x0E;
 11976  082F  300E               	movlw	14
 11977  0830  003C               	movlb	28	; select bank28
 11978  0831  00A0               	movwf	32	;volatile
 11979  0832  0008               	return
 11980  0833                     __end_of_PIN_MANAGER_Initialize:	
 11981                           
 11982                           	psect	text46
 11983  1A94                     __ptext46:	
 11984 ;; *************** function _OSCILLATOR_Initialize *****************
 11985 ;; Defined at:
 11986 ;;		line 59 in file "mcc_generated_files/mcc.c"
 11987 ;; Parameters:    Size  Location     Type
 11988 ;;		None
 11989 ;; Auto vars:     Size  Location     Type
 11990 ;;		None
 11991 ;; Return value:  Size  Location     Type
 11992 ;;                  1    wreg      void 
 11993 ;; Registers used:
 11994 ;;		wreg, status,2
 11995 ;; Tracked objects:
 11996 ;;		On entry : B1F/1C
 11997 ;;		On exit  : B1F/2
 11998 ;;		Unchanged: B00/0
 11999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;Total ram usage:        0 bytes
 12005 ;; Hardware stack levels used:    1
 12006 ;; Hardware stack levels required when called:    3
 12007 ;; This function calls:
 12008 ;;		Nothing
 12009 ;; This function is called by:
 12010 ;;		_SYSTEM_Initialize
 12011 ;; This function uses a non-reentrant model
 12012 ;;
 12013                           
 12014                           
 12015                           ;psect for function _OSCILLATOR_Initialize
 12016  1A94                     _OSCILLATOR_Initialize:	
 12017                           
 12018                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x68;
 12019                           
 12020                           ;incstack = 0
 12021                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12022  1A94  3068               	movlw	104
 12023  1A95  0021               	movlb	1	; select bank1
 12024  1A96  0099               	movwf	25	;volatile
 12025                           
 12026                           ;mcc_generated_files/mcc.c: 64:     OSCTUNE = 0x00;
 12027  1A97  0198               	clrf	24	;volatile
 12028                           
 12029                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
 12030  1A98  0022               	movlb	2	; select bank2
 12031  1A99  0196               	clrf	22	;volatile
 12032  1A9A  0008               	return
 12033  1A9B                     __end_of_OSCILLATOR_Initialize:	
 12034                           
 12035                           	psect	text47
 12036  1B3D                     __ptext47:	
 12037 ;; *************** function _I2C_Initialize *****************
 12038 ;; Defined at:
 12039 ;;		line 198 in file "mcc_generated_files/i2c.c"
 12040 ;; Parameters:    Size  Location     Type
 12041 ;;		None
 12042 ;; Auto vars:     Size  Location     Type
 12043 ;;		None
 12044 ;; Return value:  Size  Location     Type
 12045 ;;                  1    wreg      void 
 12046 ;; Registers used:
 12047 ;;		wreg, status,2
 12048 ;; Tracked objects:
 12049 ;;		On entry : B1F/2
 12050 ;;		On exit  : B1F/1
 12051 ;;		Unchanged: B00/0
 12052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;Total ram usage:        1 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; Hardware stack levels required when called:    3
 12060 ;; This function calls:
 12061 ;;		Nothing
 12062 ;; This function is called by:
 12063 ;;		_SYSTEM_Initialize
 12064 ;; This function uses a non-reentrant model
 12065 ;;
 12066                           
 12067                           
 12068                           ;psect for function _I2C_Initialize
 12069  1B3D                     _I2C_Initialize:	
 12070                           
 12071                           ;mcc_generated_files/i2c.c: 200:     i2c_object.pTrHead = i2c_tr_queue;
 12072                           
 12073                           ;incstack = 0
 12074                           ; Regs used in _I2C_Initialize: [wreg+status,2]
 12075  1B3D  30E5               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
 12076  1B3E  00F5               	movwf	??_I2C_Initialize
 12077  1B3F  0875               	movf	??_I2C_Initialize,w
 12078  1B40  00DF               	movwf	(low ((_i2c_object| (0+256)+1)))^0
 12079                           
 12080                           ;mcc_generated_files/i2c.c: 201:     i2c_object.pTrTail = i2c_tr_queue;
 12081  1B41  30E5               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
 12082  1B42  00F5               	movwf	??_I2C_Initialize
 12083  1B43  0875               	movf	??_I2C_Initialize,w
 12084  1B44  00DE               	movwf	_i2c_object^(0+256)
 12085                           
 12086                           ;mcc_generated_files/i2c.c: 202:     i2c_object.trStatus.s.empty = 1;
 12087  1B45  14E0               	bsf	(_i2c_object^(0+256)+2),1
 12088                           
 12089                           ;mcc_generated_files/i2c.c: 203:     i2c_object.trStatus.s.full = 0;
 12090  1B46  1060               	bcf	(_i2c_object^(0+256)+2),0
 12091                           
 12092                           ;mcc_generated_files/i2c.c: 205:     i2c_object.i2cErrors = 0;
 12093  1B47  01E2               	clrf	(_i2c_object^(0+256)+4)
 12094                           
 12095                           ;mcc_generated_files/i2c.c: 208:     SSP1STAT = 0x00;
 12096  1B48  0024               	movlb	4	; select bank4
 12097  1B49  0194               	clrf	20	;volatile
 12098                           
 12099                           ;mcc_generated_files/i2c.c: 210:     SSP1CON1 = 0x28;
 12100  1B4A  3028               	movlw	40
 12101  1B4B  0095               	movwf	21	;volatile
 12102                           
 12103                           ;mcc_generated_files/i2c.c: 212:     SSP1CON3 = 0x00;
 12104  1B4C  0197               	clrf	23	;volatile
 12105                           
 12106                           ;mcc_generated_files/i2c.c: 214:     SSP1ADD = 0x03;
 12107  1B4D  3003               	movlw	3
 12108  1B4E  0092               	movwf	18	;volatile
 12109                           
 12110                           ;mcc_generated_files/i2c.c: 217:     PIR1bits.SSP1IF = 0;
 12111  1B4F  0020               	movlb	0	; select bank0
 12112  1B50  1190               	bcf	16,3	;volatile
 12113                           
 12114                           ;mcc_generated_files/i2c.c: 218:     PIR2bits.BCL1IF = 0;
 12115  1B51  1191               	bcf	17,3	;volatile
 12116                           
 12117                           ;mcc_generated_files/i2c.c: 221:     PIE1bits.SSP1IE = 1;
 12118  1B52  0021               	movlb	1	; select bank1
 12119  1B53  1590               	bsf	16,3	;volatile
 12120                           
 12121                           ;mcc_generated_files/i2c.c: 222:     PIE2bits.BCL1IE = 1;
 12122  1B54  1591               	bsf	17,3	;volatile
 12123  1B55  0008               	return
 12124  1B56                     __end_of_I2C_Initialize:	
 12125                           
 12126                           	psect	text48
 12127  1002                     __ptext48:	
 12128 ;; *************** function _EUSART_Initialize *****************
 12129 ;; Defined at:
 12130 ;;		line 56 in file "mcc_generated_files/eusart.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;		None
 12135 ;; Return value:  Size  Location     Type
 12136 ;;                  1    wreg      void 
 12137 ;; Registers used:
 12138 ;;		wreg, status,2
 12139 ;; Tracked objects:
 12140 ;;		On entry : 1F/3
 12141 ;;		On exit  : 1F/3
 12142 ;;		Unchanged: 0/0
 12143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;Total ram usage:        0 bytes
 12149 ;; Hardware stack levels used:    1
 12150 ;; Hardware stack levels required when called:    3
 12151 ;; This function calls:
 12152 ;;		Nothing
 12153 ;; This function is called by:
 12154 ;;		_SYSTEM_Initialize
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           
 12159                           ;psect for function _EUSART_Initialize
 12160  1002                     _EUSART_Initialize:	
 12161                           
 12162                           ;mcc_generated_files/eusart.c: 61:     BAUD1CON = 0x08;
 12163                           
 12164                           ;incstack = 0
 12165                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 12166  1002  3008               	movlw	8
 12167  1003  009F               	movwf	31	;volatile
 12168                           
 12169                           ;mcc_generated_files/eusart.c: 64:     RC1STA = 0x90;
 12170  1004  3090               	movlw	144
 12171  1005  009D               	movwf	29	;volatile
 12172                           
 12173                           ;mcc_generated_files/eusart.c: 67:     TX1STA = 0x24;
 12174  1006  3024               	movlw	36
 12175  1007  009E               	movwf	30	;volatile
 12176                           
 12177                           ;mcc_generated_files/eusart.c: 70:     SPBRGL = 0x67;
 12178  1008  3067               	movlw	103
 12179  1009  009B               	movwf	27	;volatile
 12180                           
 12181                           ;mcc_generated_files/eusart.c: 73:     SPBRGH = 0x00;
 12182  100A  019C               	clrf	28	;volatile
 12183  100B  0008               	return
 12184  100C                     __end_of_EUSART_Initialize:	
 12185                           
 12186                           	psect	text49
 12187  078F                     __ptext49:	
 12188 ;; *************** function _IntToString *****************
 12189 ;; Defined at:
 12190 ;;		line 165 in file "main.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;  n               2   20[BANK0 ] int 
 12193 ;;  dest            2   22[BANK0 ] PTR unsigned char 
 12194 ;;		 -> main@convertedNumber(16), GetNavData@strId(12), 
 12195 ;; Auto vars:     Size  Location     Type
 12196 ;;  i               2   28[BANK0 ] int 
 12197 ;;  sign            1   27[BANK0 ] _Bool 
 12198 ;; Return value:  Size  Location     Type
 12199 ;;                  1    wreg      void 
 12200 ;; Registers used:
 12201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12202 ;; Tracked objects:
 12203 ;;		On entry : 1F/0
 12204 ;;		On exit  : 1F/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12207 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;Total ram usage:       10 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:    5
 12214 ;; This function calls:
 12215 ;;		_ReverseString
 12216 ;;		___awdiv
 12217 ;;		___awmod
 12218 ;; This function is called by:
 12219 ;;		_main
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           
 12224                           ;psect for function _IntToString
 12225  078F                     _IntToString:	
 12226                           
 12227                           ;main.c: 165: void IntToString(int n, char* dest);main.c: 166: {;main.c: 167:     int i 
      +                          = 0;
 12228                           
 12229                           ;incstack = 0
 12230                           ; Regs used in _IntToString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12231  078F  01BC               	clrf	IntToString@i
 12232  0790  01BD               	clrf	IntToString@i+1
 12233                           
 12234                           ;main.c: 168:     _Bool sign = n < 0;
 12235  0791  1FB5               	btfss	IntToString@n+1,7
 12236  0792  2F95               	goto	u5360
 12237  0793  3001               	movlw	1
 12238  0794  2F96               	goto	u5370
 12239  0795                     u5360:	
 12240  0795  3000               	movlw	0
 12241  0796                     u5370:	
 12242  0796  00B8               	movwf	??_IntToString
 12243  0797  0838               	movf	??_IntToString,w
 12244  0798  00BB               	movwf	IntToString@sign
 12245                           
 12246                           ;main.c: 169:     if (sign)
 12247  0799  083B               	movf	IntToString@sign,w
 12248  079A  1903               	btfsc	3,2
 12249  079B  2FA1               	goto	l5152
 12250                           
 12251                           ;main.c: 170:     {;main.c: 172:         n = -n;
 12252  079C  09B4               	comf	IntToString@n,f
 12253  079D  09B5               	comf	IntToString@n+1,f
 12254  079E  0AB4               	incf	IntToString@n,f
 12255  079F  1903               	skipnz
 12256  07A0  0AB5               	incf	IntToString@n+1,f
 12257  07A1                     l5152:	
 12258                           
 12259                           ;main.c: 178:         dest[i++] = n % 10 + '0';
 12260  07A1  300A               	movlw	10
 12261  07A2  00F5               	movwf	___awmod@divisor
 12262  07A3  3000               	movlw	0
 12263  07A4  00F6               	movwf	___awmod@divisor+1
 12264  07A5  0020               	movlb	0	; select bank0
 12265  07A6  0835               	movf	IntToString@n+1,w
 12266  07A7  00F8               	movwf	___awmod@dividend+1
 12267  07A8  0834               	movf	IntToString@n,w
 12268  07A9  00F7               	movwf	___awmod@dividend
 12269  07AA  319F  272C  3187   	fcall	___awmod
 12270  07AD  0875               	movf	?___awmod,w
 12271  07AE  3E30               	addlw	48
 12272  07AF  00B8               	movwf	??_IntToString
 12273  07B0  083C               	movf	IntToString@i,w
 12274  07B1  0736               	addwf	IntToString@dest,w
 12275  07B2  00B9               	movwf	??_IntToString+1
 12276  07B3  083D               	movf	IntToString@i+1,w
 12277  07B4  3D37               	addwfc	IntToString@dest+1,w
 12278  07B5  00BA               	movwf	??_IntToString+2
 12279  07B6  0839               	movf	??_IntToString+1,w
 12280  07B7  0086               	movwf	6
 12281  07B8  083A               	movf	??_IntToString+2,w
 12282  07B9  0087               	movwf	7
 12283  07BA  0838               	movf	??_IntToString,w
 12284  07BB  0081               	movwf	1
 12285  07BC  3001               	movlw	1
 12286  07BD  07BC               	addwf	IntToString@i,f
 12287  07BE  3000               	movlw	0
 12288  07BF  3DBD               	addwfc	IntToString@i+1,f
 12289                           
 12290                           ;main.c: 180:     } while ((n /= 10) > 0);
 12291  07C0  300A               	movlw	10
 12292  07C1  00F5               	movwf	___awdiv@divisor
 12293  07C2  3000               	movlw	0
 12294  07C3  00F6               	movwf	___awdiv@divisor+1
 12295  07C4  0835               	movf	IntToString@n+1,w
 12296  07C5  00F8               	movwf	___awdiv@dividend+1
 12297  07C6  0834               	movf	IntToString@n,w
 12298  07C7  00F7               	movwf	___awdiv@dividend
 12299  07C8  3190  20EC  3187   	fcall	___awdiv
 12300  07CB  0876               	movf	?___awdiv+1,w
 12301  07CC  00B5               	movwf	IntToString@n+1
 12302  07CD  0875               	movf	?___awdiv,w
 12303  07CE  00B4               	movwf	IntToString@n
 12304  07CF  0835               	movf	IntToString@n+1,w
 12305  07D0  3A80               	xorlw	128
 12306  07D1  00B8               	movwf	??_IntToString
 12307  07D2  3080               	movlw	128
 12308  07D3  0238               	subwf	??_IntToString,w
 12309  07D4  1D03               	skipz
 12310  07D5  2FD8               	goto	u5395
 12311  07D6  3001               	movlw	1
 12312  07D7  0234               	subwf	IntToString@n,w
 12313  07D8                     u5395:	
 12314  07D8  1803               	skipnc
 12315  07D9  2FA1               	goto	l5152
 12316                           
 12317                           ;main.c: 181:     if (sign)
 12318  07DA  0020               	movlb	0	; select bank0
 12319  07DB  083B               	movf	IntToString@sign,w
 12320  07DC  1903               	btfsc	3,2
 12321  07DD  2FEE               	goto	l5164
 12322                           
 12323                           ;main.c: 182:     {;main.c: 183:         dest[i++] = '-';
 12324  07DE  083C               	movf	IntToString@i,w
 12325  07DF  0736               	addwf	IntToString@dest,w
 12326  07E0  00B8               	movwf	??_IntToString
 12327  07E1  083D               	movf	IntToString@i+1,w
 12328  07E2  3D37               	addwfc	IntToString@dest+1,w
 12329  07E3  00B9               	movwf	??_IntToString+1
 12330  07E4  0838               	movf	??_IntToString,w
 12331  07E5  0086               	movwf	6
 12332  07E6  0839               	movf	??_IntToString+1,w
 12333  07E7  0087               	movwf	7
 12334  07E8  302D               	movlw	45
 12335  07E9  0081               	movwf	1
 12336  07EA  3001               	movlw	1
 12337  07EB  07BC               	addwf	IntToString@i,f
 12338  07EC  3000               	movlw	0
 12339  07ED  3DBD               	addwfc	IntToString@i+1,f
 12340  07EE                     l5164:	
 12341                           
 12342                           ;main.c: 185:     dest[i] = '\0';
 12343  07EE  083C               	movf	IntToString@i,w
 12344  07EF  0736               	addwf	IntToString@dest,w
 12345  07F0  0086               	movwf	6
 12346  07F1  083D               	movf	IntToString@i+1,w
 12347  07F2  3D37               	addwfc	IntToString@dest+1,w
 12348  07F3  0087               	movwf	7
 12349  07F4  0181               	clrf	1
 12350                           
 12351                           ;main.c: 187:     ReverseString(dest);
 12352  07F5  0837               	movf	IntToString@dest+1,w
 12353  07F6  00A6               	movwf	ReverseString@str+1
 12354  07F7  0836               	movf	IntToString@dest,w
 12355  07F8  00A5               	movwf	ReverseString@str
 12356  07F9  3192  2258         	fcall	_ReverseString
 12357  07FB  0008               	return
 12358  07FC                     __end_of_IntToString:	
 12359                           
 12360                           	psect	text50
 12361  1F2C                     __ptext50:	
 12362 ;; *************** function ___awmod *****************
 12363 ;; Defined at:
 12364 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\awmod.c"
 12365 ;; Parameters:    Size  Location     Type
 12366 ;;  divisor         2    5[COMMON] int 
 12367 ;;  dividend        2    7[COMMON] int 
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  sign            1    2[BANK0 ] unsigned char 
 12370 ;;  counter         1    1[BANK0 ] unsigned char 
 12371 ;; Return value:  Size  Location     Type
 12372 ;;                  2    5[COMMON] int 
 12373 ;; Registers used:
 12374 ;;		wreg, status,2, status,0
 12375 ;; Tracked objects:
 12376 ;;		On entry : 1F/0
 12377 ;;		On exit  : 1F/0
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12380 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12383 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;Total ram usage:        7 bytes
 12385 ;; Hardware stack levels used:    1
 12386 ;; Hardware stack levels required when called:    3
 12387 ;; This function calls:
 12388 ;;		Nothing
 12389 ;; This function is called by:
 12390 ;;		_IntToString
 12391 ;; This function uses a non-reentrant model
 12392 ;;
 12393                           
 12394                           
 12395                           ;psect for function ___awmod
 12396  1F2C                     ___awmod:	
 12397                           
 12398                           ;incstack = 0
 12399                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12400  1F2C  01A2               	clrf	___awmod@sign
 12401  1F2D  1FF8               	btfss	___awmod@dividend+1,7
 12402  1F2E  2F36               	goto	l4852
 12403  1F2F  09F7               	comf	___awmod@dividend,f
 12404  1F30  09F8               	comf	___awmod@dividend+1,f
 12405  1F31  0AF7               	incf	___awmod@dividend,f
 12406  1F32  1903               	skipnz
 12407  1F33  0AF8               	incf	___awmod@dividend+1,f
 12408  1F34  01A2               	clrf	___awmod@sign
 12409  1F35  0AA2               	incf	___awmod@sign,f
 12410  1F36                     l4852:	
 12411  1F36  1FF6               	btfss	___awmod@divisor+1,7
 12412  1F37  2F3D               	goto	l4856
 12413  1F38  09F5               	comf	___awmod@divisor,f
 12414  1F39  09F6               	comf	___awmod@divisor+1,f
 12415  1F3A  0AF5               	incf	___awmod@divisor,f
 12416  1F3B  1903               	skipnz
 12417  1F3C  0AF6               	incf	___awmod@divisor+1,f
 12418  1F3D                     l4856:	
 12419  1F3D  0875               	movf	___awmod@divisor,w
 12420  1F3E  0476               	iorwf	___awmod@divisor+1,w
 12421  1F3F  1903               	btfsc	3,2
 12422  1F40  2F64               	goto	l4874
 12423  1F41  01A1               	clrf	___awmod@counter
 12424  1F42  0AA1               	incf	___awmod@counter,f
 12425  1F43                     l4864:	
 12426  1F43  1BF6               	btfsc	___awmod@divisor+1,7
 12427  1F44  2F4F               	goto	l4866
 12428  1F45  3001               	movlw	1
 12429  1F46                     u4965:	
 12430  1F46  35F5               	lslf	___awmod@divisor,f
 12431  1F47  0DF6               	rlf	___awmod@divisor+1,f
 12432  1F48  0B89               	decfsz	9,f
 12433  1F49  2F46               	goto	u4965
 12434  1F4A  3001               	movlw	1
 12435  1F4B  00A0               	movwf	??___awmod
 12436  1F4C  0820               	movf	??___awmod,w
 12437  1F4D  07A1               	addwf	___awmod@counter,f
 12438  1F4E  2F43               	goto	l4864
 12439  1F4F                     l4866:	
 12440  1F4F  0876               	movf	___awmod@divisor+1,w
 12441  1F50  0278               	subwf	___awmod@dividend+1,w
 12442  1F51  1D03               	skipz
 12443  1F52  2F55               	goto	u4985
 12444  1F53  0875               	movf	___awmod@divisor,w
 12445  1F54  0277               	subwf	___awmod@dividend,w
 12446  1F55                     u4985:	
 12447  1F55  1C03               	skipc
 12448  1F56  2F5B               	goto	l4870
 12449  1F57  0875               	movf	___awmod@divisor,w
 12450  1F58  02F7               	subwf	___awmod@dividend,f
 12451  1F59  0876               	movf	___awmod@divisor+1,w
 12452  1F5A  3BF8               	subwfb	___awmod@dividend+1,f
 12453  1F5B                     l4870:	
 12454  1F5B  3001               	movlw	1
 12455  1F5C                     u4995:	
 12456  1F5C  36F6               	lsrf	___awmod@divisor+1,f
 12457  1F5D  0CF5               	rrf	___awmod@divisor,f
 12458  1F5E  0B89               	decfsz	9,f
 12459  1F5F  2F5C               	goto	u4995
 12460  1F60  3001               	movlw	1
 12461  1F61  02A1               	subwf	___awmod@counter,f
 12462  1F62  1D03               	btfss	3,2
 12463  1F63  2F4F               	goto	l4866
 12464  1F64                     l4874:	
 12465  1F64  0822               	movf	___awmod@sign,w
 12466  1F65  1903               	btfsc	3,2
 12467  1F66  2F6C               	goto	l4878
 12468  1F67  09F7               	comf	___awmod@dividend,f
 12469  1F68  09F8               	comf	___awmod@dividend+1,f
 12470  1F69  0AF7               	incf	___awmod@dividend,f
 12471  1F6A  1903               	skipnz
 12472  1F6B  0AF8               	incf	___awmod@dividend+1,f
 12473  1F6C                     l4878:	
 12474  1F6C  0878               	movf	___awmod@dividend+1,w
 12475  1F6D  00F6               	movwf	?___awmod+1
 12476  1F6E  0877               	movf	___awmod@dividend,w
 12477  1F6F  00F5               	movwf	?___awmod
 12478  1F70  0008               	return
 12479  1F71                     __end_of___awmod:	
 12480                           
 12481                           	psect	text51
 12482  1258                     __ptext51:	
 12483 ;; *************** function _ReverseString *****************
 12484 ;; Defined at:
 12485 ;;		line 110 in file "main.c"
 12486 ;; Parameters:    Size  Location     Type
 12487 ;;  str             2    5[BANK0 ] PTR unsigned char 
 12488 ;;		 -> checksum(6), main@convertedNumber(16), GetNavData@strId(12), 
 12489 ;; Auto vars:     Size  Location     Type
 12490 ;;  opposite        2   14[BANK0 ] PTR unsigned char 
 12491 ;;		 -> checksum(6), main@convertedNumber(16), GetNavData@strId(12), 
 12492 ;;  temp            1   13[BANK0 ] unsigned char 
 12493 ;;  i               2   18[BANK0 ] int 
 12494 ;;  halfway         2   11[BANK0 ] int 
 12495 ;;  counti          2   16[BANK0 ] int 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;                  1    wreg      void 
 12498 ;; Registers used:
 12499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 1F/0
 12502 ;;		On exit  : 1F/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12505 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;Total ram usage:       15 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    4
 12512 ;; This function calls:
 12513 ;;		___awdiv
 12514 ;;		_strlen
 12515 ;; This function is called by:
 12516 ;;		_UIntToHexString
 12517 ;;		_IntToString
 12518 ;; This function uses a non-reentrant model
 12519 ;;
 12520                           
 12521                           
 12522                           ;psect for function _ReverseString
 12523  1258                     _ReverseString:	
 12524                           
 12525                           ;main.c: 110: void ReverseString(char* str);main.c: 111: {;main.c: 112:     int counti =
      +                           strlen(str);
 12526                           
 12527                           ;incstack = 0
 12528                           ; Regs used in _ReverseString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12529  1258  0826               	movf	ReverseString@str+1,w
 12530  1259  00F6               	movwf	strlen@s+1
 12531  125A  0825               	movf	ReverseString@str,w
 12532  125B  00F5               	movwf	strlen@s
 12533  125C  319B  2324  3192   	fcall	_strlen
 12534  125F  0876               	movf	?_strlen+1,w
 12535  1260  00B1               	movwf	ReverseString@counti+1
 12536  1261  0875               	movf	?_strlen,w
 12537  1262  00B0               	movwf	ReverseString@counti
 12538                           
 12539                           ;main.c: 113:     for (int i = 0, halfway = counti / 2; i < halfway; i++)
 12540  1263  01B2               	clrf	ReverseString@i
 12541  1264  01B3               	clrf	ReverseString@i+1
 12542  1265  3002               	movlw	2
 12543  1266  00F5               	movwf	___awdiv@divisor
 12544  1267  3000               	movlw	0
 12545  1268  00F6               	movwf	___awdiv@divisor+1
 12546  1269  0831               	movf	ReverseString@counti+1,w
 12547  126A  00F8               	movwf	___awdiv@dividend+1
 12548  126B  0830               	movf	ReverseString@counti,w
 12549  126C  00F7               	movwf	___awdiv@dividend
 12550  126D  3190  20EC  3192   	fcall	___awdiv
 12551  1270  0876               	movf	?___awdiv+1,w
 12552  1271  00AC               	movwf	ReverseString@halfway+1
 12553  1272  0875               	movf	?___awdiv,w
 12554  1273  00AB               	movwf	ReverseString@halfway
 12555  1274                     l4724:	
 12556  1274  0833               	movf	ReverseString@i+1,w
 12557  1275  3A80               	xorlw	128
 12558  1276  00A7               	movwf	??_ReverseString
 12559  1277  082C               	movf	ReverseString@halfway+1,w
 12560  1278  3A80               	xorlw	128
 12561  1279  0227               	subwf	??_ReverseString,w
 12562  127A  1D03               	skipz
 12563  127B  2A7E               	goto	u4785
 12564  127C  082B               	movf	ReverseString@halfway,w
 12565  127D  0232               	subwf	ReverseString@i,w
 12566  127E                     u4785:	
 12567  127E  1803               	btfsc	3,0
 12568  127F  2ABA               	goto	l4726
 12569                           
 12570                           ;main.c: 114:     {;main.c: 115:         char temp = str[i];
 12571  1280  0020               	movlb	0	; select bank0
 12572  1281  0832               	movf	ReverseString@i,w
 12573  1282  0725               	addwf	ReverseString@str,w
 12574  1283  0086               	movwf	6
 12575  1284  0833               	movf	ReverseString@i+1,w
 12576  1285  3D26               	addwfc	ReverseString@str+1,w
 12577  1286  0087               	movwf	7
 12578  1287  0801               	movf	1,w
 12579  1288  00A7               	movwf	??_ReverseString
 12580  1289  0827               	movf	??_ReverseString,w
 12581  128A  00AD               	movwf	ReverseString@temp
 12582                           
 12583                           ;main.c: 116:         char* opposite = str + (counti - 1 - i);
 12584  128B  0832               	movf	ReverseString@i,w
 12585  128C  0225               	subwf	ReverseString@str,w
 12586  128D  00A7               	movwf	??_ReverseString
 12587  128E  0833               	movf	ReverseString@i+1,w
 12588  128F  3B26               	subwfb	ReverseString@str+1,w
 12589  1290  00A8               	movwf	??_ReverseString+1
 12590  1291  0830               	movf	ReverseString@counti,w
 12591  1292  0727               	addwf	??_ReverseString,w
 12592  1293  00A9               	movwf	??_ReverseString+2
 12593  1294  0831               	movf	ReverseString@counti+1,w
 12594  1295  3D28               	addwfc	??_ReverseString+1,w
 12595  1296  00AA               	movwf	??_ReverseString+3
 12596  1297  0829               	movf	??_ReverseString+2,w
 12597  1298  3EFF               	addlw	255
 12598  1299  00AE               	movwf	ReverseString@opposite
 12599  129A  30FF               	movlw	255
 12600  129B  3D2A               	addwfc	??_ReverseString+3,w
 12601  129C  00AF               	movwf	ReverseString@opposite+1
 12602                           
 12603                           ;main.c: 117:         str[i] = *opposite;
 12604  129D  082E               	movf	ReverseString@opposite,w
 12605  129E  0086               	movwf	6
 12606  129F  082F               	movf	ReverseString@opposite+1,w
 12607  12A0  0087               	movwf	7
 12608  12A1  0801               	movf	1,w
 12609  12A2  00A7               	movwf	??_ReverseString
 12610  12A3  0832               	movf	ReverseString@i,w
 12611  12A4  0725               	addwf	ReverseString@str,w
 12612  12A5  00A8               	movwf	??_ReverseString+1
 12613  12A6  0833               	movf	ReverseString@i+1,w
 12614  12A7  3D26               	addwfc	ReverseString@str+1,w
 12615  12A8  00A9               	movwf	??_ReverseString+2
 12616  12A9  0828               	movf	??_ReverseString+1,w
 12617  12AA  0086               	movwf	6
 12618  12AB  0829               	movf	??_ReverseString+2,w
 12619  12AC  0087               	movwf	7
 12620  12AD  0827               	movf	??_ReverseString,w
 12621  12AE  0081               	movwf	1
 12622                           
 12623                           ;main.c: 118:         *opposite = temp;
 12624  12AF  082E               	movf	ReverseString@opposite,w
 12625  12B0  0086               	movwf	6
 12626  12B1  082F               	movf	ReverseString@opposite+1,w
 12627  12B2  0087               	movwf	7
 12628  12B3  082D               	movf	ReverseString@temp,w
 12629  12B4  0081               	movwf	1
 12630                           
 12631                           ;main.c: 119:     }
 12632  12B5  3001               	movlw	1
 12633  12B6  07B2               	addwf	ReverseString@i,f
 12634  12B7  3000               	movlw	0
 12635  12B8  3DB3               	addwfc	ReverseString@i+1,f
 12636  12B9  2A74               	goto	l4724
 12637  12BA                     l4726:	
 12638                           
 12639                           ;main.c: 120:     str[counti] = '\0';
 12640  12BA  0020               	movlb	0	; select bank0
 12641  12BB  0830               	movf	ReverseString@counti,w
 12642  12BC  0725               	addwf	ReverseString@str,w
 12643  12BD  0086               	movwf	6
 12644  12BE  0831               	movf	ReverseString@counti+1,w
 12645  12BF  3D26               	addwfc	ReverseString@str+1,w
 12646  12C0  0087               	movwf	7
 12647  12C1  0181               	clrf	1
 12648  12C2  0008               	return
 12649  12C3                     __end_of_ReverseString:	
 12650                           
 12651                           	psect	text52
 12652  10EC                     __ptext52:	
 12653 ;; *************** function ___awdiv *****************
 12654 ;; Defined at:
 12655 ;;		line 5 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\awdiv.c"
 12656 ;; Parameters:    Size  Location     Type
 12657 ;;  divisor         2    5[COMMON] int 
 12658 ;;  dividend        2    7[COMMON] int 
 12659 ;; Auto vars:     Size  Location     Type
 12660 ;;  quotient        2    3[BANK0 ] int 
 12661 ;;  sign            1    2[BANK0 ] unsigned char 
 12662 ;;  counter         1    1[BANK0 ] unsigned char 
 12663 ;; Return value:  Size  Location     Type
 12664 ;;                  2    5[COMMON] int 
 12665 ;; Registers used:
 12666 ;;		wreg, status,2, status,0
 12667 ;; Tracked objects:
 12668 ;;		On entry : 1F/0
 12669 ;;		On exit  : 1F/0
 12670 ;;		Unchanged: 0/0
 12671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12672 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12673 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12675 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12676 ;;Total ram usage:        9 bytes
 12677 ;; Hardware stack levels used:    1
 12678 ;; Hardware stack levels required when called:    3
 12679 ;; This function calls:
 12680 ;;		Nothing
 12681 ;; This function is called by:
 12682 ;;		_ReverseString
 12683 ;;		_IntToString
 12684 ;; This function uses a non-reentrant model
 12685 ;;
 12686                           
 12687                           
 12688                           ;psect for function ___awdiv
 12689  10EC                     ___awdiv:	
 12690                           
 12691                           ;incstack = 0
 12692                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12693  10EC  01A2               	clrf	___awdiv@sign
 12694  10ED  1FF6               	btfss	___awdiv@divisor+1,7
 12695  10EE  28F6               	goto	l4484
 12696  10EF  09F5               	comf	___awdiv@divisor,f
 12697  10F0  09F6               	comf	___awdiv@divisor+1,f
 12698  10F1  0AF5               	incf	___awdiv@divisor,f
 12699  10F2  1903               	skipnz
 12700  10F3  0AF6               	incf	___awdiv@divisor+1,f
 12701  10F4  01A2               	clrf	___awdiv@sign
 12702  10F5  0AA2               	incf	___awdiv@sign,f
 12703  10F6                     l4484:	
 12704  10F6  1FF8               	btfss	___awdiv@dividend+1,7
 12705  10F7  2901               	goto	l4490
 12706  10F8  09F7               	comf	___awdiv@dividend,f
 12707  10F9  09F8               	comf	___awdiv@dividend+1,f
 12708  10FA  0AF7               	incf	___awdiv@dividend,f
 12709  10FB  1903               	skipnz
 12710  10FC  0AF8               	incf	___awdiv@dividend+1,f
 12711  10FD  3001               	movlw	1
 12712  10FE  00A0               	movwf	??___awdiv
 12713  10FF  0820               	movf	??___awdiv,w
 12714  1100  06A2               	xorwf	___awdiv@sign,f
 12715  1101                     l4490:	
 12716  1101  01A3               	clrf	___awdiv@quotient
 12717  1102  01A4               	clrf	___awdiv@quotient+1
 12718  1103  0875               	movf	___awdiv@divisor,w
 12719  1104  0476               	iorwf	___awdiv@divisor+1,w
 12720  1105  1903               	btfsc	3,2
 12721  1106  2930               	goto	l4512
 12722  1107  01A1               	clrf	___awdiv@counter
 12723  1108  0AA1               	incf	___awdiv@counter,f
 12724  1109                     l4500:	
 12725  1109  1BF6               	btfsc	___awdiv@divisor+1,7
 12726  110A  2915               	goto	l4502
 12727  110B  3001               	movlw	1
 12728  110C                     u4495:	
 12729  110C  35F5               	lslf	___awdiv@divisor,f
 12730  110D  0DF6               	rlf	___awdiv@divisor+1,f
 12731  110E  0B89               	decfsz	9,f
 12732  110F  290C               	goto	u4495
 12733  1110  3001               	movlw	1
 12734  1111  00A0               	movwf	??___awdiv
 12735  1112  0820               	movf	??___awdiv,w
 12736  1113  07A1               	addwf	___awdiv@counter,f
 12737  1114  2909               	goto	l4500
 12738  1115                     l4502:	
 12739  1115  3001               	movlw	1
 12740  1116                     u4515:	
 12741  1116  35A3               	lslf	___awdiv@quotient,f
 12742  1117  0DA4               	rlf	___awdiv@quotient+1,f
 12743  1118  0B89               	decfsz	9,f
 12744  1119  2916               	goto	u4515
 12745  111A  0876               	movf	___awdiv@divisor+1,w
 12746  111B  0278               	subwf	___awdiv@dividend+1,w
 12747  111C  1D03               	skipz
 12748  111D  2920               	goto	u4525
 12749  111E  0875               	movf	___awdiv@divisor,w
 12750  111F  0277               	subwf	___awdiv@dividend,w
 12751  1120                     u4525:	
 12752  1120  1C03               	skipc
 12753  1121  2927               	goto	l4508
 12754  1122  0875               	movf	___awdiv@divisor,w
 12755  1123  02F7               	subwf	___awdiv@dividend,f
 12756  1124  0876               	movf	___awdiv@divisor+1,w
 12757  1125  3BF8               	subwfb	___awdiv@dividend+1,f
 12758  1126  1423               	bsf	___awdiv@quotient,0
 12759  1127                     l4508:	
 12760  1127  3001               	movlw	1
 12761  1128                     u4535:	
 12762  1128  36F6               	lsrf	___awdiv@divisor+1,f
 12763  1129  0CF5               	rrf	___awdiv@divisor,f
 12764  112A  0B89               	decfsz	9,f
 12765  112B  2928               	goto	u4535
 12766  112C  3001               	movlw	1
 12767  112D  02A1               	subwf	___awdiv@counter,f
 12768  112E  1D03               	btfss	3,2
 12769  112F  2915               	goto	l4502
 12770  1130                     l4512:	
 12771  1130  0822               	movf	___awdiv@sign,w
 12772  1131  1903               	btfsc	3,2
 12773  1132  2938               	goto	l4516
 12774  1133  09A3               	comf	___awdiv@quotient,f
 12775  1134  09A4               	comf	___awdiv@quotient+1,f
 12776  1135  0AA3               	incf	___awdiv@quotient,f
 12777  1136  1903               	skipnz
 12778  1137  0AA4               	incf	___awdiv@quotient+1,f
 12779  1138                     l4516:	
 12780  1138  0824               	movf	___awdiv@quotient+1,w
 12781  1139  00F6               	movwf	?___awdiv+1
 12782  113A  0823               	movf	___awdiv@quotient,w
 12783  113B  00F5               	movwf	?___awdiv
 12784  113C  0008               	return
 12785  113D                     __end_of___awdiv:	
 12786                           
 12787                           	psect	text53
 12788  109E                     __ptext53:	
 12789 ;; *************** function _InsertString *****************
 12790 ;; Defined at:
 12791 ;;		line 97 in file "main.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;  dest            1    wreg     PTR unsigned char 
 12794 ;;		 -> message_end(73), message_start(70), 
 12795 ;;  src             2    8[BANK0 ] PTR unsigned char 
 12796 ;;		 -> STR_12(3), checksum(6), STR_11(6), main@convertedNumber(16), 
 12797 ;;		 -> GetNavData@strId(12), STR_10(5), 
 12798 ;;  index           2   10[BANK0 ] int 
 12799 ;;  destLimit       2   12[BANK0 ] int 
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;  dest            1   18[BANK0 ] PTR unsigned char 
 12802 ;;		 -> message_end(73), message_start(70), 
 12803 ;;  i               2   16[BANK0 ] int 
 12804 ;;  counti          2   14[BANK0 ] int 
 12805 ;; Return value:  Size  Location     Type
 12806 ;;                  2    8[BANK0 ] int 
 12807 ;; Registers used:
 12808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12809 ;; Tracked objects:
 12810 ;;		On entry : 1F/3
 12811 ;;		On exit  : 1F/0
 12812 ;;		Unchanged: 0/0
 12813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12814 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;      Totals:         1      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;Total ram usage:       12 bytes
 12819 ;; Hardware stack levels used:    1
 12820 ;; Hardware stack levels required when called:    4
 12821 ;; This function calls:
 12822 ;;		_Insert
 12823 ;;		_strlen
 12824 ;; This function is called by:
 12825 ;;		_main
 12826 ;; This function uses a non-reentrant model
 12827 ;;
 12828                           
 12829                           
 12830                           ;psect for function _InsertString
 12831  109E                     _InsertString:	
 12832                           
 12833                           ;incstack = 0
 12834                           ; Regs used in _InsertString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12835                           ;InsertString@dest stored from wreg
 12836  109E  0020               	movlb	0	; select bank0
 12837  109F  00B2               	movwf	InsertString@dest
 12838                           
 12839                           ;main.c: 97: int InsertString(char* dest, char* src, int index, int destLimit);main.c: 9
      +                          8: {;main.c: 99:     for (int i = 0, counti = strlen(src); i < counti && index < destLim
      +                          it; i++)
 12840  10A0  01B0               	clrf	InsertString@i
 12841  10A1  01B1               	clrf	InsertString@i+1
 12842  10A2  0829               	movf	InsertString@src+1,w
 12843  10A3  00F6               	movwf	strlen@s+1
 12844  10A4  0828               	movf	InsertString@src,w
 12845  10A5  00F5               	movwf	strlen@s
 12846  10A6  319B  2324  3190   	fcall	_strlen
 12847  10A9  0876               	movf	?_strlen+1,w
 12848  10AA  00AF               	movwf	InsertString@counti+1
 12849  10AB  0875               	movf	?_strlen,w
 12850  10AC  00AE               	movwf	InsertString@counti
 12851  10AD  28DA               	goto	l5114
 12852  10AE                     l5116:	
 12853  10AE  0020               	movlb	0	; select bank0
 12854  10AF  082B               	movf	InsertString@index+1,w
 12855  10B0  3A80               	xorlw	128
 12856  10B1  00F8               	movwf	??_InsertString
 12857  10B2  082D               	movf	InsertString@destLimit+1,w
 12858  10B3  3A80               	xorlw	128
 12859  10B4  0278               	subwf	??_InsertString,w
 12860  10B5  1D03               	skipz
 12861  10B6  28B9               	goto	u5315
 12862  10B7  082C               	movf	InsertString@destLimit,w
 12863  10B8  022A               	subwf	InsertString@index,w
 12864  10B9                     u5315:	
 12865  10B9  1803               	btfsc	3,0
 12866  10BA  28E6               	goto	l5118
 12867                           
 12868                           ;main.c: 100:     {;main.c: 102:         Insert(dest, src[i], index++, destLimit);
 12869  10BB  0020               	movlb	0	; select bank0
 12870  10BC  0828               	movf	InsertString@src,w
 12871  10BD  0730               	addwf	InsertString@i,w
 12872  10BE  0084               	movwf	4
 12873  10BF  0829               	movf	InsertString@src+1,w
 12874  10C0  3D31               	addwfc	InsertString@i+1,w
 12875  10C1  0085               	movwf	5
 12876  10C2  0800               	movf	0,w	;code access
 12877  10C3  00F8               	movwf	??_InsertString
 12878  10C4  0878               	movf	??_InsertString,w
 12879  10C5  00A0               	movwf	Insert@src
 12880  10C6  082B               	movf	InsertString@index+1,w
 12881  10C7  00A2               	movwf	Insert@index+1
 12882  10C8  082A               	movf	InsertString@index,w
 12883  10C9  00A1               	movwf	Insert@index
 12884  10CA  082D               	movf	InsertString@destLimit+1,w
 12885  10CB  00A4               	movwf	Insert@destLimit+1
 12886  10CC  082C               	movf	InsertString@destLimit,w
 12887  10CD  00A3               	movwf	Insert@destLimit
 12888  10CE  0832               	movf	InsertString@dest,w
 12889  10CF  3192  22C3  3190   	fcall	_Insert
 12890  10D2  3001               	movlw	1
 12891  10D3  07AA               	addwf	InsertString@index,f
 12892  10D4  3000               	movlw	0
 12893  10D5  3DAB               	addwfc	InsertString@index+1,f
 12894                           
 12895                           ;main.c: 103:     }
 12896  10D6  3001               	movlw	1
 12897  10D7  07B0               	addwf	InsertString@i,f
 12898  10D8  3000               	movlw	0
 12899  10D9  3DB1               	addwfc	InsertString@i+1,f
 12900  10DA                     l5114:	
 12901  10DA  0831               	movf	InsertString@i+1,w
 12902  10DB  3A80               	xorlw	128
 12903  10DC  00F8               	movwf	??_InsertString
 12904  10DD  082F               	movf	InsertString@counti+1,w
 12905  10DE  3A80               	xorlw	128
 12906  10DF  0278               	subwf	??_InsertString,w
 12907  10E0  1D03               	skipz
 12908  10E1  28E4               	goto	u5305
 12909  10E2  082E               	movf	InsertString@counti,w
 12910  10E3  0230               	subwf	InsertString@i,w
 12911  10E4                     u5305:	
 12912  10E4  1C03               	btfss	3,0
 12913  10E5  28AE               	goto	l5116
 12914  10E6                     l5118:	
 12915                           
 12916                           ;main.c: 104:     return index;
 12917  10E6  0020               	movlb	0	; select bank0
 12918  10E7  082B               	movf	InsertString@index+1,w
 12919  10E8  00A9               	movwf	?_InsertString+1
 12920  10E9  082A               	movf	InsertString@index,w
 12921  10EA  00A8               	movwf	?_InsertString
 12922  10EB  0008               	return
 12923  10EC                     __end_of_InsertString:	
 12924                           
 12925                           	psect	text54
 12926  12C3                     __ptext54:	
 12927 ;; *************** function _Insert *****************
 12928 ;; Defined at:
 12929 ;;		line 72 in file "main.c"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;  dest            1    wreg     PTR unsigned char 
 12932 ;;		 -> message_end(73), message_start(70), 
 12933 ;;  src             1    0[BANK0 ] unsigned char 
 12934 ;;  index           2    1[BANK0 ] int 
 12935 ;;  destLimit       2    3[BANK0 ] int 
 12936 ;; Auto vars:     Size  Location     Type
 12937 ;;  dest            1    7[BANK0 ] PTR unsigned char 
 12938 ;;		 -> message_end(73), message_start(70), 
 12939 ;;  current         1    6[BANK0 ] unsigned char 
 12940 ;;  temp            1    5[BANK0 ] unsigned char 
 12941 ;; Return value:  Size  Location     Type
 12942 ;;                  2    0[BANK0 ] int 
 12943 ;; Registers used:
 12944 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12945 ;; Tracked objects:
 12946 ;;		On entry : 1C/3
 12947 ;;		On exit  : 1F/0
 12948 ;;		Unchanged: 0/0
 12949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12950 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12951 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12952 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12953 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;Total ram usage:       10 bytes
 12955 ;; Hardware stack levels used:    1
 12956 ;; Hardware stack levels required when called:    3
 12957 ;; This function calls:
 12958 ;;		Nothing
 12959 ;; This function is called by:
 12960 ;;		_InsertString
 12961 ;;		_main
 12962 ;; This function uses a non-reentrant model
 12963 ;;
 12964                           
 12965                           
 12966                           ;psect for function _Insert
 12967  12C3                     _Insert:	
 12968                           
 12969                           ;incstack = 0
 12970                           ; Regs used in _Insert: [wreg+fsr1l+fsr1h+status,2+status,0]
 12971                           ;Insert@dest stored from wreg
 12972  12C3  0020               	movlb	0	; select bank0
 12973  12C4  00A7               	movwf	Insert@dest
 12974                           
 12975                           ;main.c: 75:     temp = dest[index];
 12976  12C5  0821               	movf	Insert@index,w
 12977  12C6  0727               	addwf	Insert@dest,w
 12978  12C7  00F5               	movwf	??_Insert
 12979  12C8  0875               	movf	??_Insert,w
 12980  12C9  0086               	movwf	6
 12981  12CA  3003               	movlw	3	; select bank6/7
 12982  12CB  0087               	movwf	7
 12983  12CC  0801               	movf	1,w
 12984  12CD  00F6               	movwf	??_Insert+1
 12985  12CE  0876               	movf	??_Insert+1,w
 12986  12CF  00A5               	movwf	Insert@temp
 12987                           
 12988                           ;main.c: 76:     dest[index] = src;
 12989  12D0  0820               	movf	Insert@src,w
 12990  12D1  00F5               	movwf	??_Insert
 12991  12D2  0821               	movf	Insert@index,w
 12992  12D3  0727               	addwf	Insert@dest,w
 12993  12D4  00F6               	movwf	??_Insert+1
 12994  12D5  0876               	movf	??_Insert+1,w
 12995  12D6  0086               	movwf	6
 12996  12D7  3003               	movlw	3	; select bank6/7
 12997  12D8  0087               	movwf	7
 12998  12D9  0875               	movf	??_Insert,w
 12999  12DA  0081               	movwf	1
 13000                           
 13001                           ;main.c: 77:     if (dest[index + 1] == '\0')
 13002  12DB  0821               	movf	Insert@index,w
 13003  12DC  0727               	addwf	Insert@dest,w
 13004  12DD  00F5               	movwf	??_Insert
 13005  12DE  0A75               	incf	??_Insert,w
 13006  12DF  0086               	movwf	6
 13007  12E0  3003               	movlw	3	; select bank6/7
 13008  12E1  0087               	movwf	7
 13009  12E2  0801               	movf	1,w
 13010  12E3  1D03               	btfss	3,2
 13011  12E4  2AEC               	goto	l4690
 13012                           
 13013                           ;main.c: 78:     {;main.c: 79:         return index + 1;
 13014  12E5  0821               	movf	Insert@index,w
 13015  12E6  3E01               	addlw	1
 13016  12E7  00A0               	movwf	?_Insert
 13017  12E8  3000               	movlw	0
 13018  12E9  3D22               	addwfc	Insert@index+1,w
 13019  12EA  00A1               	movwf	?_Insert+1
 13020  12EB  0008               	return
 13021  12EC                     l4690:	
 13022                           
 13023                           ;main.c: 81:     index++;
 13024  12EC  3001               	movlw	1
 13025  12ED  07A1               	addwf	Insert@index,f
 13026  12EE  3000               	movlw	0
 13027  12EF  3DA2               	addwfc	Insert@index+1,f
 13028  12F0                     l4702:	
 13029                           ;main.c: 82:     while (index < destLimit)
 13030                           
 13031                           
 13032                           ;main.c: 82:     while (index < destLimit)
 13033  12F0  0822               	movf	Insert@index+1,w
 13034  12F1  3A80               	xorlw	128
 13035  12F2  00F5               	movwf	??_Insert
 13036  12F3  0824               	movf	Insert@destLimit+1,w
 13037  12F4  3A80               	xorlw	128
 13038  12F5  0275               	subwf	??_Insert,w
 13039  12F6  1D03               	skipz
 13040  12F7  2AFA               	goto	u4775
 13041  12F8  0823               	movf	Insert@destLimit,w
 13042  12F9  0221               	subwf	Insert@index,w
 13043  12FA                     u4775:	
 13044  12FA  1803               	btfsc	3,0
 13045  12FB  2B29               	goto	l4704
 13046                           
 13047                           ;main.c: 83:     {;main.c: 84:         char current = dest[index];
 13048  12FC  0020               	movlb	0	; select bank0
 13049  12FD  0821               	movf	Insert@index,w
 13050  12FE  0727               	addwf	Insert@dest,w
 13051  12FF  00F5               	movwf	??_Insert
 13052  1300  0875               	movf	??_Insert,w
 13053  1301  0086               	movwf	6
 13054  1302  3003               	movlw	3	; select bank6/7
 13055  1303  0087               	movwf	7
 13056  1304  0801               	movf	1,w
 13057  1305  00F6               	movwf	??_Insert+1
 13058  1306  0876               	movf	??_Insert+1,w
 13059  1307  00A6               	movwf	Insert@current
 13060                           
 13061                           ;main.c: 85:         dest[index] = temp;
 13062  1308  0825               	movf	Insert@temp,w
 13063  1309  00F5               	movwf	??_Insert
 13064  130A  0821               	movf	Insert@index,w
 13065  130B  0727               	addwf	Insert@dest,w
 13066  130C  00F6               	movwf	??_Insert+1
 13067  130D  0876               	movf	??_Insert+1,w
 13068  130E  0086               	movwf	6
 13069  130F  3003               	movlw	3	; select bank6/7
 13070  1310  0087               	movwf	7
 13071  1311  0875               	movf	??_Insert,w
 13072  1312  0081               	movwf	1
 13073                           
 13074                           ;main.c: 86:         temp = current;
 13075  1313  0826               	movf	Insert@current,w
 13076  1314  00F5               	movwf	??_Insert
 13077  1315  0875               	movf	??_Insert,w
 13078  1316  00A5               	movwf	Insert@temp
 13079                           
 13080                           ;main.c: 87:         index++;
 13081  1317  3001               	movlw	1
 13082  1318  07A1               	addwf	Insert@index,f
 13083  1319  3000               	movlw	0
 13084  131A  3DA2               	addwfc	Insert@index+1,f
 13085                           
 13086                           ;main.c: 88:         if (current == '\0')
 13087  131B  0826               	movf	Insert@current,w
 13088  131C  1D03               	btfss	3,2
 13089  131D  2AF0               	goto	l4702
 13090                           
 13091                           ;main.c: 89:         {;main.c: 90:             dest[index] = current;
 13092  131E  0826               	movf	Insert@current,w
 13093  131F  00F5               	movwf	??_Insert
 13094  1320  0821               	movf	Insert@index,w
 13095  1321  0727               	addwf	Insert@dest,w
 13096  1322  00F6               	movwf	??_Insert+1
 13097  1323  0876               	movf	??_Insert+1,w
 13098  1324  0086               	movwf	6
 13099  1325  3003               	movlw	3	; select bank6/7
 13100  1326  0087               	movwf	7
 13101  1327  0875               	movf	??_Insert,w
 13102  1328  0081               	movwf	1
 13103  1329                     l4704:	
 13104                           ;main.c: 91:             break;
 13105                           
 13106                           
 13107                           ;main.c: 94:     return index;
 13108  1329  0020               	movlb	0	; select bank0
 13109  132A  0821               	movf	Insert@index,w
 13110  132B  00A0               	movwf	?_Insert
 13111  132C  0822               	movf	Insert@index+1,w
 13112  132D  00A1               	movwf	?_Insert+1
 13113  132E  0008               	return
 13114  132F                     __end_of_Insert:	
 13115                           
 13116                           	psect	text55
 13117  1CAF                     __ptext55:	
 13118 ;; *************** function _FlashError *****************
 13119 ;; Defined at:
 13120 ;;		line 30 in file "main.c"
 13121 ;; Parameters:    Size  Location     Type
 13122 ;;		None
 13123 ;; Auto vars:     Size  Location     Type
 13124 ;;  i               2    7[COMMON] int 
 13125 ;; Return value:  Size  Location     Type
 13126 ;;                  1    wreg      void 
 13127 ;; Registers used:
 13128 ;;		wreg, status,2
 13129 ;; Tracked objects:
 13130 ;;		On entry : 0/0
 13131 ;;		On exit  : 0/0
 13132 ;;		Unchanged: 0/0
 13133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13138 ;;Total ram usage:        4 bytes
 13139 ;; Hardware stack levels used:    1
 13140 ;; Hardware stack levels required when called:    3
 13141 ;; This function calls:
 13142 ;;		Nothing
 13143 ;; This function is called by:
 13144 ;;		_main
 13145 ;; This function uses a non-reentrant model
 13146 ;;
 13147                           
 13148                           
 13149                           ;psect for function _FlashError
 13150  1CAF                     _FlashError:	
 13151                           
 13152                           ;main.c: 32:     for (int i = 0; i < 3; i++)
 13153                           
 13154                           ;incstack = 0
 13155                           ; Regs used in _FlashError: [wreg+status,2]
 13156  1CAF  01F7               	clrf	FlashError@i
 13157  1CB0  01F8               	clrf	FlashError@i+1
 13158  1CB1                     l620:	
 13159                           ;main.c: 33:     {;main.c: 34:         do { LATCbits.LATC5 = 1; } while(0);
 13160                           
 13161  1CB1  0022               	movlb	2	; select bank2
 13162  1CB2  168E               	bsf	14,5	;volatile
 13163                           
 13164                           ;main.c: 35:         _delay((unsigned long)((250)*(4000000/4000.0)));
 13165  1CB3  3002               	movlw	2
 13166  1CB4  00F6               	movwf	??_FlashError+1
 13167  1CB5  3045               	movlw	69
 13168  1CB6  00F5               	movwf	??_FlashError
 13169  1CB7  30AA               	movlw	170
 13170  1CB8                     u5587:	
 13171  1CB8  0B89               	decfsz	9,f
 13172  1CB9  2CB8               	goto	u5587
 13173  1CBA  0BF5               	decfsz	??_FlashError,f
 13174  1CBB  2CB8               	goto	u5587
 13175  1CBC  0BF6               	decfsz	??_FlashError+1,f
 13176  1CBD  2CB8               	goto	u5587
 13177  1CBE  0022               	movlb	2	; select bank2
 13178  1CBF  128E               	bcf	14,5	;volatile
 13179                           
 13180                           ;main.c: 37:         _delay((unsigned long)((250)*(4000000/4000.0)));
 13181  1CC0  3002               	movlw	2
 13182  1CC1  00F6               	movwf	??_FlashError+1
 13183  1CC2  3045               	movlw	69
 13184  1CC3  00F5               	movwf	??_FlashError
 13185  1CC4  30AA               	movlw	170
 13186  1CC5                     u5597:	
 13187  1CC5  0B89               	decfsz	9,f
 13188  1CC6  2CC5               	goto	u5597
 13189  1CC7  0BF5               	decfsz	??_FlashError,f
 13190  1CC8  2CC5               	goto	u5597
 13191  1CC9  0BF6               	decfsz	??_FlashError+1,f
 13192  1CCA  2CC5               	goto	u5597
 13193                           
 13194                           ;main.c: 38:     }
 13195  1CCB  3001               	movlw	1
 13196  1CCC  07F7               	addwf	FlashError@i,f
 13197  1CCD  3000               	movlw	0
 13198  1CCE  3DF8               	addwfc	FlashError@i+1,f
 13199  1CCF  0878               	movf	FlashError@i+1,w
 13200  1CD0  3A80               	xorlw	128
 13201  1CD1  00F5               	movwf	??_FlashError
 13202  1CD2  3080               	movlw	128
 13203  1CD3  0275               	subwf	??_FlashError,w
 13204  1CD4  1D03               	skipz
 13205  1CD5  2CD8               	goto	u5285
 13206  1CD6  3003               	movlw	3
 13207  1CD7  0277               	subwf	FlashError@i,w
 13208  1CD8                     u5285:	
 13209  1CD8  1803               	btfsc	3,0
 13210  1CD9  0008               	return
 13211  1CDA  2CB1               	goto	l620
 13212  1CDB                     __end_of_FlashError:	
 13213                           
 13214                           	psect	text56
 13215  1BBB                     __ptext56:	
 13216 ;; *************** function _ClearString *****************
 13217 ;; Defined at:
 13218 ;;		line 42 in file "main.c"
 13219 ;; Parameters:    Size  Location     Type
 13220 ;;  str             2    2[BANK0 ] PTR unsigned char 
 13221 ;;		 -> main@convertedNumber(16), GetNavData@data_type(7), message_end(73), message_start(70), 
 13222 ;; Auto vars:     Size  Location     Type
 13223 ;;  i               2    6[BANK0 ] int 
 13224 ;;  counti          2    4[BANK0 ] int 
 13225 ;; Return value:  Size  Location     Type
 13226 ;;                  1    wreg      void 
 13227 ;; Registers used:
 13228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13229 ;; Tracked objects:
 13230 ;;		On entry : 1F/0
 13231 ;;		On exit  : 0/0
 13232 ;;		Unchanged: 0/0
 13233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13236 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13238 ;;Total ram usage:        7 bytes
 13239 ;; Hardware stack levels used:    1
 13240 ;; Hardware stack levels required when called:    4
 13241 ;; This function calls:
 13242 ;;		_strlen
 13243 ;; This function is called by:
 13244 ;;		_main
 13245 ;; This function uses a non-reentrant model
 13246 ;;
 13247                           
 13248                           
 13249                           ;psect for function _ClearString
 13250  1BBB                     _ClearString:	
 13251                           
 13252                           ;main.c: 42: void ClearString(char* str);main.c: 43: {;main.c: 44:     for (int i = 0, c
      +                          ounti = strlen(str); i < counti; i++)
 13253                           
 13254                           ;incstack = 0
 13255                           ; Regs used in _ClearString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13256  1BBB  01A6               	clrf	ClearString@i
 13257  1BBC  01A7               	clrf	ClearString@i+1
 13258  1BBD  0823               	movf	ClearString@str+1,w
 13259  1BBE  00F6               	movwf	strlen@s+1
 13260  1BBF  0822               	movf	ClearString@str,w
 13261  1BC0  00F5               	movwf	strlen@s
 13262  1BC1  319B  2324  319B   	fcall	_strlen
 13263  1BC4  0876               	movf	?_strlen+1,w
 13264  1BC5  00A5               	movwf	ClearString@counti+1
 13265  1BC6  0875               	movf	?_strlen,w
 13266  1BC7  00A4               	movwf	ClearString@counti
 13267  1BC8                     l5102:	
 13268  1BC8  0827               	movf	ClearString@i+1,w
 13269  1BC9  3A80               	xorlw	128
 13270  1BCA  00F8               	movwf	??_ClearString
 13271  1BCB  0825               	movf	ClearString@counti+1,w
 13272  1BCC  3A80               	xorlw	128
 13273  1BCD  0278               	subwf	??_ClearString,w
 13274  1BCE  1D03               	skipz
 13275  1BCF  2BD2               	goto	u5295
 13276  1BD0  0824               	movf	ClearString@counti,w
 13277  1BD1  0226               	subwf	ClearString@i,w
 13278  1BD2                     u5295:	
 13279  1BD2  1803               	btfsc	3,0
 13280  1BD3  0008               	return
 13281                           
 13282                           ;main.c: 45:     {;main.c: 46:         str[i] = '\0';
 13283  1BD4  0020               	movlb	0	; select bank0
 13284  1BD5  0826               	movf	ClearString@i,w
 13285  1BD6  0722               	addwf	ClearString@str,w
 13286  1BD7  0086               	movwf	6
 13287  1BD8  0827               	movf	ClearString@i+1,w
 13288  1BD9  3D23               	addwfc	ClearString@str+1,w
 13289  1BDA  0087               	movwf	7
 13290  1BDB  0181               	clrf	1
 13291                           
 13292                           ;main.c: 47:     }
 13293  1BDC  3001               	movlw	1
 13294  1BDD  07A6               	addwf	ClearString@i,f
 13295  1BDE  3000               	movlw	0
 13296  1BDF  3DA7               	addwfc	ClearString@i+1,f
 13297  1BE0  2BC8               	goto	l5102
 13298  1BE1                     __end_of_ClearString:	
 13299                           
 13300                           	psect	text57
 13301  1B24                     __ptext57:	
 13302 ;; *************** function _strlen *****************
 13303 ;; Defined at:
 13304 ;;		line 12 in file "K:\Programs\MPLABX\XC8 Compiler\pic\sources\c99\common\strlen.c"
 13305 ;; Parameters:    Size  Location     Type
 13306 ;;  s               2    5[COMMON] PTR const unsigned char 
 13307 ;;		 -> STR_12(3), checksum(6), STR_11(6), main@convertedNumber(16), 
 13308 ;;		 -> GetNavData@strId(12), STR_10(5), STR_7(14), GetNavData@data_type(7), 
 13309 ;;		 -> STR_6(26), STR_5(26), STR_4(26), STR_3(26), 
 13310 ;;		 -> STR_2(26), STR_1(26), message_end(73), message_start(70), 
 13311 ;; Auto vars:     Size  Location     Type
 13312 ;;  a               2    0[BANK0 ] PTR const unsigned char 
 13313 ;;		 -> STR_12(3), checksum(6), STR_11(6), main@convertedNumber(16), 
 13314 ;;		 -> GetNavData@strId(12), STR_10(5), STR_7(14), GetNavData@data_type(7), 
 13315 ;;		 -> STR_6(26), STR_5(26), STR_4(26), STR_3(26), 
 13316 ;;		 -> STR_2(26), STR_1(26), message_end(73), message_start(70), 
 13317 ;; Return value:  Size  Location     Type
 13318 ;;                  2    5[COMMON] unsigned int 
 13319 ;; Registers used:
 13320 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13321 ;; Tracked objects:
 13322 ;;		On entry : 1C/3
 13323 ;;		On exit  : 1F/0
 13324 ;;		Unchanged: 0/0
 13325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13328 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13329 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;Total ram usage:        5 bytes
 13331 ;; Hardware stack levels used:    1
 13332 ;; Hardware stack levels required when called:    3
 13333 ;; This function calls:
 13334 ;;		Nothing
 13335 ;; This function is called by:
 13336 ;;		_ClearString
 13337 ;;		_InsertString
 13338 ;;		_ReverseString
 13339 ;;		_crc16
 13340 ;;		_TransmitString
 13341 ;;		_WriteGPS
 13342 ;;		_main
 13343 ;; This function uses a non-reentrant model
 13344 ;;
 13345                           
 13346                           
 13347                           ;psect for function _strlen
 13348  1B24                     _strlen:	
 13349                           
 13350                           ;incstack = 0
 13351                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 13352  1B24  0876               	movf	strlen@s+1,w
 13353  1B25  0020               	movlb	0	; select bank0
 13354  1B26  00A1               	movwf	strlen@a+1
 13355  1B27  0875               	movf	strlen@s,w
 13356  1B28  00A0               	movwf	strlen@a
 13357  1B29                     l4458:	
 13358  1B29  0875               	movf	strlen@s,w
 13359  1B2A  0084               	movwf	4
 13360  1B2B  0876               	movf	strlen@s+1,w
 13361  1B2C  0085               	movwf	5
 13362  1B2D  0012               	moviw fsr0++
 13363  1B2E  1903               	btfsc	3,2
 13364  1B2F  2B35               	goto	l4460
 13365  1B30  3001               	movlw	1
 13366  1B31  07F5               	addwf	strlen@s,f
 13367  1B32  3000               	movlw	0
 13368  1B33  3DF6               	addwfc	strlen@s+1,f
 13369  1B34  2B29               	goto	l4458
 13370  1B35                     l4460:	
 13371  1B35  0020               	movlb	0	; select bank0
 13372  1B36  0820               	movf	strlen@a,w
 13373  1B37  0275               	subwf	strlen@s,w
 13374  1B38  00F5               	movwf	?_strlen
 13375  1B39  0821               	movf	strlen@a+1,w
 13376  1B3A  3B76               	subwfb	strlen@s+1,w
 13377  1B3B  00F6               	movwf	?_strlen+1
 13378  1B3C  0008               	return
 13379  1B3D                     __end_of_strlen:	
 13380                           
 13381                           	psect	intentry
 13382  0004                     __pintentry:	
 13383 ;; *************** function _INTERRUPT_InterruptManager *****************
 13384 ;; Defined at:
 13385 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13386 ;; Parameters:    Size  Location     Type
 13387 ;;		None
 13388 ;; Auto vars:     Size  Location     Type
 13389 ;;		None
 13390 ;; Return value:  Size  Location     Type
 13391 ;;                  1    wreg      void 
 13392 ;; Registers used:
 13393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13394 ;; Tracked objects:
 13395 ;;		On entry : 0/0
 13396 ;;		On exit  : 0/0
 13397 ;;		Unchanged: 0/0
 13398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13403 ;;Total ram usage:        0 bytes
 13404 ;; Hardware stack levels used:    1
 13405 ;; Hardware stack levels required when called:    2
 13406 ;; This function calls:
 13407 ;;		_I2C_BusCollisionISR
 13408 ;;		_I2C_ISR
 13409 ;;		_TMR0_ISR
 13410 ;; This function is called by:
 13411 ;;		Interrupt level 1
 13412 ;; This function uses a non-reentrant model
 13413 ;;
 13414                           
 13415  0004                     _INTERRUPT_InterruptManager:	
 13416                           
 13417                           ;incstack = 0
 13418  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13419                           
 13420                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13421  0005  3180               	pagesel	$
 13422                           
 13423                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 13424  0006  1A8B               	btfsc	11,5	;volatile
 13425  0007  1D0B               	btfss	11,2	;volatile
 13426  0008  280D               	goto	i1l382
 13427                           
 13428                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 13429  0009  319A  22C4  3180   	fcall	_TMR0_ISR
 13430                           
 13431                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 13432  000C  2821               	goto	i1l390
 13433  000D                     i1l382:	
 13434                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 13435                           
 13436  000D  1F0B               	btfss	11,6	;volatile
 13437  000E  2821               	goto	i1l390
 13438                           
 13439                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 13440  000F  0021               	movlb	1	; select bank1
 13441  0010  1D91               	btfss	17,3	;volatile
 13442  0011  2819               	goto	i1l385
 13443  0012  0020               	movlb	0	; select bank0
 13444  0013  1D91               	btfss	17,3	;volatile
 13445  0014  2819               	goto	i1l385
 13446                           
 13447                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             I2C_BusCollisionISR();
 13448  0015  3190  2000  3180   	fcall	_I2C_BusCollisionISR
 13449                           
 13450                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13451  0018  2821               	goto	i1l390
 13452  0019                     i1l385:	
 13453                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 13454                           
 13455  0019  0021               	movlb	1	; select bank1
 13456  001A  1D90               	btfss	16,3	;volatile
 13457  001B  2821               	goto	i1l390
 13458  001C  0020               	movlb	0	; select bank0
 13459  001D  1D90               	btfss	16,3	;volatile
 13460  001E  2821               	goto	i1l390
 13461                           
 13462                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             I2C_ISR();
 13463  001F  3184  2423         	fcall	_I2C_ISR
 13464  0021                     i1l390:	
 13465                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 13466                           
 13467                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 13468                           
 13469  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13470  0022  0009               	retfie
 13471  0023                     __end_of_INTERRUPT_InterruptManager:	
 13472                           
 13473                           	psect	text59
 13474  1AC4                     __ptext59:	
 13475 ;; *************** function _TMR0_ISR *****************
 13476 ;; Defined at:
 13477 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 13478 ;; Parameters:    Size  Location     Type
 13479 ;;		None
 13480 ;; Auto vars:     Size  Location     Type
 13481 ;;		None
 13482 ;; Return value:  Size  Location     Type
 13483 ;;                  1    wreg      void 
 13484 ;; Registers used:
 13485 ;;		wreg, status,2, status,0, pclath, cstack
 13486 ;; Tracked objects:
 13487 ;;		On entry : 0/0
 13488 ;;		On exit  : 0/0
 13489 ;;		Unchanged: 0/0
 13490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13495 ;;Total ram usage:        0 bytes
 13496 ;; Hardware stack levels used:    1
 13497 ;; Hardware stack levels required when called:    1
 13498 ;; This function calls:
 13499 ;;		Absolute function
 13500 ;;		_TMR0_DefaultInterruptHandler
 13501 ;;		_TimerISR
 13502 ;; This function is called by:
 13503 ;;		_INTERRUPT_InterruptManager
 13504 ;; This function uses a non-reentrant model
 13505 ;;
 13506                           
 13507                           
 13508                           ;psect for function _TMR0_ISR
 13509  1AC4                     _TMR0_ISR:	
 13510                           
 13511                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 13512                           
 13513                           ;incstack = 0
 13514                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 13515  1AC4  110B               	bcf	11,2	;volatile
 13516                           
 13517                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 13518  1AC5  0022               	movlb	2	; select bank2
 13519  1AC6  086E               	movf	_timer0ReloadVal^(0+256),w	;volatile
 13520  1AC7  0020               	movlb	0	; select bank0
 13521  1AC8  0095               	movwf	21	;volatile
 13522                           
 13523                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
 13524  1AC9  0023               	movlb	3	; select bank3
 13525  1ACA  0869               	movf	_TMR0_InterruptHandler^(0+384),w
 13526  1ACB  046A               	iorwf	(_TMR0_InterruptHandler+1)^(0+384),w
 13527  1ACC  1903               	btfsc	3,2
 13528  1ACD  0008               	return
 13529                           
 13530                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
 13531  1ACE  086A               	movf	(_TMR0_InterruptHandler+1)^(0+384),w
 13532  1ACF  008A               	movwf	10
 13533  1AD0  0869               	movf	_TMR0_InterruptHandler^(0+384),w
 13534  1AD1  000A               	callw
 13535  1AD2  319A               	pagesel	$
 13536  1AD3  0008               	return
 13537  1AD4                     __end_of_TMR0_ISR:	
 13538                           
 13539                           	psect	text60
 13540  1A7C                     __ptext60:	
 13541 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 13542 ;; Defined at:
 13543 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;		None
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;		None
 13548 ;; Return value:  Size  Location     Type
 13549 ;;                  1    wreg      void 
 13550 ;; Registers used:
 13551 ;;		None
 13552 ;; Tracked objects:
 13553 ;;		On entry : 1F/3
 13554 ;;		On exit  : 1F/3
 13555 ;;		Unchanged: 1E/0
 13556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;Total ram usage:        0 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; This function calls:
 13564 ;;		Nothing
 13565 ;; This function is called by:
 13566 ;;		_TMR0_Initialize
 13567 ;;		_TMR0_ISR
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function _TMR0_DefaultInterruptHandler
 13573  1A7C                     _TMR0_DefaultInterruptHandler:	
 13574                           
 13575                           ;incstack = 0
 13576                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 13577  1A7C  0008               	return
 13578  1A7D                     __end_of_TMR0_DefaultInterruptHandler:	
 13579                           
 13580                           	psect	text61
 13581  1AAB                     __ptext61:	
 13582 ;; *************** function _TimerISR *****************
 13583 ;; Defined at:
 13584 ;;		line 9 in file "main.c"
 13585 ;; Parameters:    Size  Location     Type
 13586 ;;		None
 13587 ;; Auto vars:     Size  Location     Type
 13588 ;;		None
 13589 ;; Return value:  Size  Location     Type
 13590 ;;                  1    wreg      void 
 13591 ;; Registers used:
 13592 ;;		wreg
 13593 ;; Tracked objects:
 13594 ;;		On entry : 1F/3
 13595 ;;		On exit  : 1F/2
 13596 ;;		Unchanged: 0/0
 13597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;Total ram usage:        0 bytes
 13603 ;; Hardware stack levels used:    1
 13604 ;; This function calls:
 13605 ;;		Nothing
 13606 ;; This function is called by:
 13607 ;;		_main
 13608 ;;		_TMR0_ISR
 13609 ;; This function uses a non-reentrant model
 13610 ;;
 13611                           
 13612                           
 13613                           ;psect for function _TimerISR
 13614  1AAB                     _TimerISR:	
 13615                           
 13616                           ;main.c: 11:     ticks++;
 13617                           
 13618                           ;incstack = 0
 13619                           ; Regs used in _TimerISR: [wreg]
 13620  1AAB  3001               	movlw	1
 13621  1AAC  0022               	movlb	2	; select bank2
 13622  1AAD  07E3               	addwf	_ticks^(0+256),f
 13623  1AAE  3000               	movlw	0
 13624  1AAF  3DE4               	addwfc	(_ticks+1)^(0+256),f
 13625  1AB0  3000               	movlw	0
 13626  1AB1  3DE5               	addwfc	(_ticks+2)^(0+256),f
 13627  1AB2  3000               	movlw	0
 13628  1AB3  3DE6               	addwfc	(_ticks+3)^(0+256),f
 13629  1AB4  0008               	return
 13630  1AB5                     __end_of_TimerISR:	
 13631                           
 13632                           	psect	text62
 13633  0423                     __ptext62:	
 13634 ;; *************** function _I2C_ISR *****************
 13635 ;; Defined at:
 13636 ;;		line 235 in file "mcc_generated_files/i2c.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;		None
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;		None
 13641 ;; Return value:  Size  Location     Type
 13642 ;;                  1    wreg      void 
 13643 ;; Registers used:
 13644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13645 ;; Tracked objects:
 13646 ;;		On entry : 1F/0
 13647 ;;		On exit  : 19/0
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;Total ram usage:        2 bytes
 13655 ;; Hardware stack levels used:    1
 13656 ;; Hardware stack levels required when called:    1
 13657 ;; This function calls:
 13658 ;;		_I2C_FunctionComplete
 13659 ;;		_I2C_Stop
 13660 ;; This function is called by:
 13661 ;;		_INTERRUPT_InterruptManager
 13662 ;; This function uses a non-reentrant model
 13663 ;;
 13664                           
 13665                           
 13666                           ;psect for function _I2C_ISR
 13667  0423                     _I2C_ISR:	
 13668                           
 13669                           ;mcc_generated_files/i2c.c: 238:     static uint8_t *pi2c_buf_ptr;;mcc_generated_files/i
      +                          2c.c: 239:     static uint16_t i2c_address = 0;;mcc_generated_files/i2c.c: 240:     stat
      +                          ic uint8_t i2c_bytes_left = 0;;mcc_generated_files/i2c.c: 241:     static uint8_t i2c_10
      +                          bit_address_restart = 0;;mcc_generated_files/i2c.c: 243:     PIR1bits.SSP1IF = 0;
 13670                           
 13671                           ;incstack = 0
 13672                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13673  0423  1190               	bcf	16,3	;volatile
 13674                           
 13675                           ;mcc_generated_files/i2c.c: 247:     if(SSP1CON1bits.WCOL)
 13676  0424  0024               	movlb	4	; select bank4
 13677  0425  1F95               	btfss	21,7	;volatile
 13678  0426  2D43               	goto	i1l5078
 13679                           
 13680                           ;mcc_generated_files/i2c.c: 248:     {;mcc_generated_files/i2c.c: 250:         SSP1CON1b
      +                          its.WCOL = 0;
 13681  0427  1395               	bcf	21,7	;volatile
 13682                           
 13683                           ;mcc_generated_files/i2c.c: 251:         i2c_state = S_MASTER_IDLE;
 13684  0428  0022               	movlb	2	; select bank2
 13685  0429  01ED               	clrf	_i2c_state^(0+256)
 13686                           
 13687                           ;mcc_generated_files/i2c.c: 252:         *(p_i2c_current->pTrFlag) = I2C_MESSAGE_FAIL;
 13688  042A  0879               	movf	_p_i2c_current,w
 13689  042B  3E02               	addlw	2
 13690  042C  0086               	movwf	6
 13691  042D  3001               	movlw	1	; select bank2/3
 13692  042E  0087               	movwf	7
 13693  042F  3F40               	moviw [0]fsr1
 13694  0430  00F3               	movwf	??_I2C_ISR
 13695  0431  3F41               	moviw [1]fsr1
 13696  0432  00F4               	movwf	??_I2C_ISR+1
 13697  0433  0873               	movf	??_I2C_ISR,w
 13698  0434  0086               	movwf	6
 13699  0435  0874               	movf	??_I2C_ISR+1,w
 13700  0436  0087               	movwf	7
 13701  0437  3001               	movlw	1
 13702  0438  0081               	movwf	1
 13703                           
 13704                           ;mcc_generated_files/i2c.c: 255:         p_i2c_current = ((void*)0);
 13705  0439  01F9               	clrf	_p_i2c_current
 13706  043A  0008               	return
 13707  043B                     i1l490:	
 13708                           ;mcc_generated_files/i2c.c: 262:     {;mcc_generated_files/i2c.c: 263:         case S_MA
      +                          STER_IDLE:
 13709                           
 13710                           
 13711                           ;mcc_generated_files/i2c.c: 265:             if(i2c_object.trStatus.s.empty != 1)
 13712  043B  18E0               	btfsc	(_i2c_object^(0+256)+2),1
 13713  043C  0008               	return
 13714                           
 13715                           ;mcc_generated_files/i2c.c: 266:             {;mcc_generated_files/i2c.c: 268:          
      +                                 p_i2c_current = i2c_object.pTrHead;
 13716  043D  085F               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 13717  043E  00F3               	movwf	??_I2C_ISR
 13718  043F  0873               	movf	??_I2C_ISR,w
 13719  0440  00F9               	movwf	_p_i2c_current
 13720                           
 13721                           ;mcc_generated_files/i2c.c: 269:                 i2c_trb_count = i2c_object.pTrHead->cou
      +                          nt;
 13722  0441  085F               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 13723  0442  0086               	movwf	6
 13724  0443  3001               	movlw	1	; select bank2/3
 13725  0444  0087               	movwf	7
 13726  0445  0801               	movf	1,w
 13727  0446  00F3               	movwf	??_I2C_ISR
 13728  0447  0873               	movf	??_I2C_ISR,w
 13729  0448  00EC               	movwf	_i2c_trb_count^(0+256)
 13730                           
 13731                           ;mcc_generated_files/i2c.c: 270:                 p_i2c_trb_current = i2c_object.pTrHead-
      +                          >ptrb_list;
 13732  0449  085F               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 13733  044A  0086               	movwf	6
 13734  044B  3001               	movlw	1	; select bank2/3
 13735  044C  0087               	movwf	7
 13736  044D  3001               	movlw	1	; select bank2/3
 13737  044E  3F41               	moviw [1]fsr1
 13738  044F  00FA               	movwf	_p_i2c_trb_current
 13739                           
 13740                           ;mcc_generated_files/i2c.c: 272:                 i2c_object.pTrHead++;
 13741  0450  3004               	movlw	4
 13742  0451  00F3               	movwf	??_I2C_ISR
 13743  0452  0873               	movf	??_I2C_ISR,w
 13744  0453  07DF               	addwf	(low ((_i2c_object| (0+256)+1)))^0,f
 13745                           
 13746                           ;mcc_generated_files/i2c.c: 275:                 if(i2c_object.pTrHead == (i2c_tr_queue 
      +                          + 1))
 13747  0454  085F               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 13748  0455  3AE9               	xorlw	(low ((_i2c_tr_queue| (0+256)+4)))& (0+255)
 13749  0456  1D03               	skipz
 13750  0457  2C5C               	goto	i1l4968
 13751                           
 13752                           ;mcc_generated_files/i2c.c: 276:                 {;mcc_generated_files/i2c.c: 278:      
      +                                         i2c_object.pTrHead = i2c_tr_queue;
 13753  0458  30E5               	movlw	(low (_i2c_tr_queue| (0+256)))& (0+255)
 13754  0459  00F3               	movwf	??_I2C_ISR
 13755  045A  0873               	movf	??_I2C_ISR,w
 13756  045B  00DF               	movwf	(low ((_i2c_object| (0+256)+1)))^0
 13757  045C                     i1l4968:	
 13758                           
 13759                           ;mcc_generated_files/i2c.c: 283:                 i2c_object.trStatus.s.full = 0;
 13760  045C  1060               	bcf	(_i2c_object^(0+256)+2),0
 13761                           
 13762                           ;mcc_generated_files/i2c.c: 286:                 if(i2c_object.pTrHead == i2c_object.pTr
      +                          Tail)
 13763  045D  085F               	movf	(low ((_i2c_object| (0+256)+1)))^0,w
 13764  045E  065E               	xorwf	_i2c_object^(0+256),w
 13765  045F  1903               	btfsc	3,2
 13766                           
 13767                           ;mcc_generated_files/i2c.c: 287:                 {;mcc_generated_files/i2c.c: 289:      
      +                                         i2c_object.trStatus.s.empty = 1;
 13768  0460  14E0               	bsf	(_i2c_object^(0+256)+2),1
 13769                           
 13770                           ;mcc_generated_files/i2c.c: 293:                 SSP1CON2bits.SEN = 1;
 13771                           
 13772                           ;mcc_generated_files/i2c.c: 290:                 }
 13773  0461  0024               	movlb	4	; select bank4
 13774  0462  1416               	bsf	22,0	;volatile
 13775  0463                     i1l4972:	
 13776                           
 13777                           ;mcc_generated_files/i2c.c: 296:                 i2c_state = S_MASTER_SEND_ADDR;
 13778  0463  3002               	movlw	2
 13779  0464  00F3               	movwf	??_I2C_ISR
 13780  0465  0873               	movf	??_I2C_ISR,w
 13781  0466  0022               	movlb	2	; select bank2
 13782  0467  00ED               	movwf	_i2c_state^(0+256)
 13783  0468  0008               	return
 13784  0469                     i1l495:	
 13785                           ;mcc_generated_files/i2c.c: 301:         case S_MASTER_RESTART:
 13786                           
 13787  0469  2CEC               	goto	i1l516
 13788  046A                     i1l496:	
 13789                           ;mcc_generated_files/i2c.c: 313:         case S_MASTER_SEND_ADDR_10BIT_LSB:
 13790                           
 13791                           ;mcc_generated_files/i2c.c: 306:             SSP1CON2bits.RSEN = 1;
 13792                           
 13793                           
 13794                           ;mcc_generated_files/i2c.c: 315:             if(SSP1CON2bits.ACKSTAT)
 13795  046A  0024               	movlb	4	; select bank4
 13796  046B  1F16               	btfss	22,6	;volatile
 13797  046C  2C76               	goto	i1l4980
 13798                           
 13799                           ;mcc_generated_files/i2c.c: 316:             {;mcc_generated_files/i2c.c: 317:          
      +                                 i2c_object.i2cErrors++;
 13800  046D  3001               	movlw	1
 13801  046E  00F3               	movwf	??_I2C_ISR
 13802  046F  0873               	movf	??_I2C_ISR,w
 13803  0470  0022               	movlb	2	; select bank2
 13804  0471  07E2               	addwf	(_i2c_object^(0+256)+4),f
 13805                           
 13806                           ;mcc_generated_files/i2c.c: 318:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 13807  0472  3004               	movlw	4
 13808  0473  319B  2356         	fcall	_I2C_Stop
 13809                           
 13810                           ;mcc_generated_files/i2c.c: 319:             }
 13811  0475  0008               	return
 13812  0476                     i1l4980:	
 13813                           
 13814                           ;mcc_generated_files/i2c.c: 321:             {;mcc_generated_files/i2c.c: 323:          
      +                                 SSP1BUF = (i2c_address >> 1) & 0x00FF;
 13815  0476  087C               	movf	I2C_ISR@i2c_address+1,w
 13816  0477  00F4               	movwf	??_I2C_ISR+1
 13817  0478  087B               	movf	I2C_ISR@i2c_address,w
 13818  0479  00F3               	movwf	??_I2C_ISR
 13819  047A  36F4               	lsrf	??_I2C_ISR+1,f
 13820  047B  0CF3               	rrf	??_I2C_ISR,f
 13821  047C  0873               	movf	??_I2C_ISR,w
 13822  047D  0091               	movwf	17	;volatile
 13823                           
 13824                           ;mcc_generated_files/i2c.c: 326:                 if(i2c_address & 0x01)
 13825  047E  1C7B               	btfss	I2C_ISR@i2c_address,0
 13826  047F  2C86               	goto	i1l4986
 13827                           
 13828                           ;mcc_generated_files/i2c.c: 327:                 {;mcc_generated_files/i2c.c: 330:      
      +                                         i2c_state = S_MASTER_10BIT_RESTART;
 13829  0480  300B               	movlw	11
 13830  0481  00F3               	movwf	??_I2C_ISR
 13831  0482  0873               	movf	??_I2C_ISR,w
 13832  0483  0022               	movlb	2	; select bank2
 13833  0484  00ED               	movwf	_i2c_state^(0+256)
 13834                           
 13835                           ;mcc_generated_files/i2c.c: 331:                 }
 13836  0485  0008               	return
 13837  0486                     i1l4986:	
 13838                           
 13839                           ;mcc_generated_files/i2c.c: 333:                 {;mcc_generated_files/i2c.c: 335:      
      +                                         i2c_state = S_MASTER_SEND_DATA;
 13840  0486  3003               	movlw	3
 13841  0487  00F3               	movwf	??_I2C_ISR
 13842  0488  0873               	movf	??_I2C_ISR,w
 13843  0489  0022               	movlb	2	; select bank2
 13844  048A  00ED               	movwf	_i2c_state^(0+256)
 13845  048B  0008               	return
 13846  048C                     i1l501:	
 13847                           ;mcc_generated_files/i2c.c: 341:         case S_MASTER_10BIT_RESTART:
 13848                           
 13849                           
 13850                           ;mcc_generated_files/i2c.c: 343:             if(SSP1CON2bits.ACKSTAT)
 13851  048C  0024               	movlb	4	; select bank4
 13852  048D  1F16               	btfss	22,6	;volatile
 13853  048E  2C98               	goto	i1l502
 13854                           
 13855                           ;mcc_generated_files/i2c.c: 344:             {;mcc_generated_files/i2c.c: 345:          
      +                                 i2c_object.i2cErrors++;
 13856  048F  3001               	movlw	1
 13857  0490  00F3               	movwf	??_I2C_ISR
 13858  0491  0873               	movf	??_I2C_ISR,w
 13859  0492  0022               	movlb	2	; select bank2
 13860  0493  07E2               	addwf	(_i2c_object^(0+256)+4),f
 13861                           
 13862                           ;mcc_generated_files/i2c.c: 346:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 13863  0494  3004               	movlw	4
 13864  0495  319B  2356         	fcall	_I2C_Stop
 13865                           
 13866                           ;mcc_generated_files/i2c.c: 347:             }
 13867  0497  0008               	return
 13868  0498                     i1l502:	
 13869                           ;mcc_generated_files/i2c.c: 348:             else
 13870                           
 13871                           
 13872                           ;mcc_generated_files/i2c.c: 349:             {;mcc_generated_files/i2c.c: 352:          
      +                                 SSP1CON2bits.RSEN = 1;
 13873  0498  1496               	bsf	22,1	;volatile
 13874                           
 13875                           ;mcc_generated_files/i2c.c: 356:                 i2c_address = 0x00F0 | ((i2c_address >>
      +                           8) & 0x0006);
 13876  0499  3006               	movlw	6
 13877  049A  057C               	andwf	I2C_ISR@i2c_address+1,w
 13878  049B  00F3               	movwf	??_I2C_ISR
 13879  049C  30F0               	movlw	240
 13880  049D  0473               	iorwf	??_I2C_ISR,w
 13881  049E  00FB               	movwf	I2C_ISR@i2c_address
 13882  049F  3000               	movlw	0
 13883  04A0  00FC               	movwf	I2C_ISR@i2c_address+1
 13884                           
 13885                           ;mcc_generated_files/i2c.c: 359:                 i2c_address |= 0x0001;
 13886  04A1  147B               	bsf	I2C_ISR@i2c_address,0
 13887                           
 13888                           ;mcc_generated_files/i2c.c: 362:                 i2c_10bit_address_restart = 1;
 13889  04A2  0022               	movlb	2	; select bank2
 13890  04A3  01EA               	clrf	I2C_ISR@i2c_10bit_address_restart^(0+256)
 13891  04A4  0AEA               	incf	I2C_ISR@i2c_10bit_address_restart^(0+256),f
 13892  04A5  2C63               	goto	i1l4972
 13893  04A6                     i1l5000:	
 13894                           
 13895                           ;mcc_generated_files/i2c.c: 383:             if(i2c_10bit_address_restart != 1)
 13896  04A6  036A               	decf	I2C_ISR@i2c_10bit_address_restart^(0+256),w
 13897  04A7  1903               	btfsc	3,2
 13898  04A8  2CC1               	goto	i1l5018
 13899                           
 13900                           ;mcc_generated_files/i2c.c: 384:             {;mcc_generated_files/i2c.c: 386:          
      +                                 i2c_address = p_i2c_trb_current->address;
 13901  04A9  087A               	movf	_p_i2c_trb_current,w
 13902  04AA  0086               	movwf	6
 13903  04AB  3001               	movlw	1	; select bank2/3
 13904  04AC  0087               	movwf	7
 13905  04AD  3F40               	moviw [0]fsr1
 13906  04AE  00FB               	movwf	I2C_ISR@i2c_address
 13907  04AF  3F41               	moviw [1]fsr1
 13908  04B0  00FC               	movwf	I2C_ISR@i2c_address+1
 13909                           
 13910                           ;mcc_generated_files/i2c.c: 387:                 pi2c_buf_ptr = p_i2c_trb_current->pbuff
      +                          er;
 13911  04B1  087A               	movf	_p_i2c_trb_current,w
 13912  04B2  3E03               	addlw	3
 13913  04B3  0086               	movwf	6
 13914  04B4  3001               	movlw	1	; select bank2/3
 13915  04B5  0087               	movwf	7
 13916  04B6  3F40               	moviw [0]fsr1
 13917  04B7  00E7               	movwf	I2C_ISR@pi2c_buf_ptr^(0+256)
 13918  04B8  3F41               	moviw [1]fsr1
 13919  04B9  00E8               	movwf	(I2C_ISR@pi2c_buf_ptr+1)^(0+256)
 13920                           
 13921                           ;mcc_generated_files/i2c.c: 388:                 i2c_bytes_left = p_i2c_trb_current->len
      +                          gth;
 13922  04BA  087A               	movf	_p_i2c_trb_current,w
 13923  04BB  0086               	movwf	6
 13924  04BC  3001               	movlw	1	; select bank2/3
 13925  04BD  0087               	movwf	7
 13926  04BE  3001               	movlw	1	; select bank2/3
 13927  04BF  3F42               	moviw [2]fsr1
 13928  04C0  00EB               	movwf	I2C_ISR@i2c_bytes_left^(0+256)
 13929  04C1                     i1l5018:	
 13930                           
 13931                           ;mcc_generated_files/i2c.c: 412:             {;mcc_generated_files/i2c.c: 414:          
      +                                 SSP1BUF = i2c_address;
 13932  04C1  087B               	movf	I2C_ISR@i2c_address,w
 13933  04C2  0024               	movlb	4	; select bank4
 13934  04C3  0091               	movwf	17	;volatile
 13935                           
 13936                           ;mcc_generated_files/i2c.c: 415:                 if(i2c_address & 0x01)
 13937  04C4  1C7B               	btfss	I2C_ISR@i2c_address,0
 13938  04C5  2C86               	goto	i1l4986
 13939                           
 13940                           ;mcc_generated_files/i2c.c: 416:                 {;mcc_generated_files/i2c.c: 418:      
      +                                         i2c_state = S_MASTER_ACK_ADDR;
 13941  04C6  3005               	movlw	5
 13942  04C7  00F3               	movwf	??_I2C_ISR
 13943  04C8  0873               	movf	??_I2C_ISR,w
 13944  04C9  0022               	movlb	2	; select bank2
 13945  04CA  00ED               	movwf	_i2c_state^(0+256)
 13946                           
 13947                           ;mcc_generated_files/i2c.c: 419:                 }
 13948  04CB  0008               	return
 13949  04CC                     i1l512:	
 13950                           ;mcc_generated_files/i2c.c: 428:         case S_MASTER_SEND_DATA:
 13951                           
 13952                           
 13953                           ;mcc_generated_files/i2c.c: 431:             if(SSP1CON2bits.ACKSTAT)
 13954  04CC  0024               	movlb	4	; select bank4
 13955  04CD  1F16               	btfss	22,6	;volatile
 13956  04CE  2CDA               	goto	i1l5032
 13957                           
 13958                           ;mcc_generated_files/i2c.c: 432:             {;mcc_generated_files/i2c.c: 434:          
      +                                 i2c_object.i2cErrors++;
 13959  04CF  3001               	movlw	1
 13960  04D0  00F3               	movwf	??_I2C_ISR
 13961  04D1  0873               	movf	??_I2C_ISR,w
 13962  04D2  0022               	movlb	2	; select bank2
 13963  04D3  07E2               	addwf	(_i2c_object^(0+256)+4),f
 13964                           
 13965                           ;mcc_generated_files/i2c.c: 437:                 SSP1CON2bits.ACKSTAT = 0;
 13966  04D4  0024               	movlb	4	; select bank4
 13967  04D5  1316               	bcf	22,6	;volatile
 13968                           
 13969                           ;mcc_generated_files/i2c.c: 440:                 I2C_Stop(I2C_DATA_NO_ACK);
 13970  04D6  3005               	movlw	5
 13971  04D7  319B  2356         	fcall	_I2C_Stop
 13972                           
 13973                           ;mcc_generated_files/i2c.c: 442:             }
 13974  04D9  0008               	return
 13975  04DA                     i1l5032:	
 13976                           
 13977                           ;mcc_generated_files/i2c.c: 444:             {;mcc_generated_files/i2c.c: 446:          
      +                                 if(i2c_bytes_left-- == 0U)
 13978  04DA  3001               	movlw	1
 13979  04DB  0022               	movlb	2	; select bank2
 13980  04DC  02EB               	subwf	I2C_ISR@i2c_bytes_left^(0+256),f
 13981  04DD  0A6B               	incf	I2C_ISR@i2c_bytes_left^(0+256),w
 13982  04DE  1D03               	btfss	3,2
 13983  04DF  2CEF               	goto	i1l5040
 13984                           
 13985                           ;mcc_generated_files/i2c.c: 447:                 {;mcc_generated_files/i2c.c: 451:      
      +                                         p_i2c_trb_current++;
 13986  04E0  3005               	movlw	5
 13987  04E1  00F3               	movwf	??_I2C_ISR
 13988  04E2  0873               	movf	??_I2C_ISR,w
 13989  04E3  07FA               	addwf	_p_i2c_trb_current,f
 13990                           
 13991                           ;mcc_generated_files/i2c.c: 454:                     if(--i2c_trb_count == 0)
 13992  04E4  3001               	movlw	1
 13993  04E5  02EC               	subwf	_i2c_trb_count^(0+256),f
 13994  04E6  1D03               	btfss	3,2
 13995  04E7  2CEC               	goto	i1l516
 13996                           
 13997                           ;mcc_generated_files/i2c.c: 455:                     {;mcc_generated_files/i2c.c: 456:  
      +                                                 I2C_Stop(I2C_MESSAGE_COMPLETE);
 13998  04E8  3000               	movlw	0
 13999  04E9  319B  2356         	fcall	_I2C_Stop
 14000                           
 14001                           ;mcc_generated_files/i2c.c: 457:                     }
 14002  04EB  0008               	return
 14003  04EC                     i1l516:	
 14004                           ;mcc_generated_files/i2c.c: 458:                     else
 14005                           
 14006                           
 14007                           ;mcc_generated_files/i2c.c: 459:                     {;mcc_generated_files/i2c.c: 466:  
      +                                                 SSP1CON2bits.RSEN = 1;
 14008  04EC  0024               	movlb	4	; select bank4
 14009  04ED  1496               	bsf	22,1	;volatile
 14010  04EE  2C63               	goto	i1l4972
 14011  04EF                     i1l5040:	
 14012                           
 14013                           ;mcc_generated_files/i2c.c: 474:                 {;mcc_generated_files/i2c.c: 476:      
      +                                         SSP1BUF = *pi2c_buf_ptr++;
 14014  04EF  0867               	movf	I2C_ISR@pi2c_buf_ptr^(0+256),w
 14015  04F0  0086               	movwf	6
 14016  04F1  0868               	movf	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),w
 14017  04F2  0087               	movwf	7
 14018  04F3  0801               	movf	1,w
 14019  04F4  0024               	movlb	4	; select bank4
 14020  04F5  0091               	movwf	17	;volatile
 14021  04F6  3001               	movlw	1
 14022  04F7  0022               	movlb	2	; select bank2
 14023  04F8  07E7               	addwf	I2C_ISR@pi2c_buf_ptr^(0+256),f
 14024  04F9  3000               	movlw	0
 14025  04FA  3DE8               	addwfc	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),f
 14026  04FB  0008               	return
 14027  04FC                     i1l519:	
 14028                           ;mcc_generated_files/i2c.c: 481:         case S_MASTER_ACK_ADDR:
 14029                           
 14030                           
 14031                           ;mcc_generated_files/i2c.c: 484:             if(SSP1CON2bits.ACKSTAT)
 14032  04FC  0024               	movlb	4	; select bank4
 14033  04FD  1F16               	btfss	22,6	;volatile
 14034  04FE  2D0A               	goto	i1l520
 14035                           
 14036                           ;mcc_generated_files/i2c.c: 485:             {;mcc_generated_files/i2c.c: 488:          
      +                                 i2c_object.i2cErrors++;
 14037  04FF  3001               	movlw	1
 14038  0500  00F3               	movwf	??_I2C_ISR
 14039  0501  0873               	movf	??_I2C_ISR,w
 14040  0502  0022               	movlb	2	; select bank2
 14041  0503  07E2               	addwf	(_i2c_object^(0+256)+4),f
 14042                           
 14043                           ;mcc_generated_files/i2c.c: 491:                 I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 14044  0504  3004               	movlw	4
 14045  0505  319B  2356         	fcall	_I2C_Stop
 14046                           
 14047                           ;mcc_generated_files/i2c.c: 494:                 SSP1CON2bits.ACKSTAT = 0;
 14048  0507  0024               	movlb	4	; select bank4
 14049  0508  1316               	bcf	22,6	;volatile
 14050                           
 14051                           ;mcc_generated_files/i2c.c: 495:             }
 14052  0509  0008               	return
 14053  050A                     i1l520:	
 14054                           ;mcc_generated_files/i2c.c: 496:             else
 14055                           
 14056                           
 14057                           ;mcc_generated_files/i2c.c: 497:             {;mcc_generated_files/i2c.c: 498:          
      +                                 SSP1CON2bits.RCEN = 1;
 14058  050A  1596               	bsf	22,3	;volatile
 14059                           
 14060                           ;mcc_generated_files/i2c.c: 499:                 i2c_state = S_MASTER_ACK_RCV_DATA;
 14061  050B  3008               	movlw	8
 14062  050C  00F3               	movwf	??_I2C_ISR
 14063  050D  0873               	movf	??_I2C_ISR,w
 14064  050E  0022               	movlb	2	; select bank2
 14065  050F  00ED               	movwf	_i2c_state^(0+256)
 14066  0510  0008               	return
 14067  0511                     i1l5052:	
 14068                           
 14069                           ;mcc_generated_files/i2c.c: 508:             i2c_state = S_MASTER_ACK_RCV_DATA;
 14070  0511  3008               	movlw	8
 14071  0512  00F3               	movwf	??_I2C_ISR
 14072  0513  0873               	movf	??_I2C_ISR,w
 14073  0514  00ED               	movwf	_i2c_state^(0+256)
 14074                           
 14075                           ;mcc_generated_files/i2c.c: 511:             SSP1CON2bits.RCEN = 1;
 14076  0515  0024               	movlb	4	; select bank4
 14077  0516  1596               	bsf	22,3	;volatile
 14078                           
 14079                           ;mcc_generated_files/i2c.c: 513:             break;
 14080  0517  0008               	return
 14081  0518                     i1l5056:	
 14082                           
 14083                           ;mcc_generated_files/i2c.c: 518:             *pi2c_buf_ptr++ = SSP1BUF;
 14084  0518  0867               	movf	I2C_ISR@pi2c_buf_ptr^(0+256),w
 14085  0519  0086               	movwf	6
 14086  051A  0868               	movf	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),w
 14087  051B  0087               	movwf	7
 14088  051C  0024               	movlb	4	; select bank4
 14089  051D  0811               	movf	17,w	;volatile
 14090  051E  0081               	movwf	1
 14091  051F  3001               	movlw	1
 14092  0520  0022               	movlb	2	; select bank2
 14093  0521  07E7               	addwf	I2C_ISR@pi2c_buf_ptr^(0+256),f
 14094  0522  3000               	movlw	0
 14095  0523  3DE8               	addwfc	(I2C_ISR@pi2c_buf_ptr+1)^(0+256),f
 14096                           
 14097                           ;mcc_generated_files/i2c.c: 521:             if(--i2c_bytes_left)
 14098  0524  3001               	movlw	1
 14099  0525  02EB               	subwf	I2C_ISR@i2c_bytes_left^(0+256),f
 14100  0526  1903               	btfsc	3,2
 14101  0527  2D30               	goto	i1l524
 14102                           
 14103                           ;mcc_generated_files/i2c.c: 522:             {;mcc_generated_files/i2c.c: 528:          
      +                                 SSP1CON2bits.ACKDT = 0;
 14104  0528  0024               	movlb	4	; select bank4
 14105  0529  1296               	bcf	22,5	;volatile
 14106                           
 14107                           ;mcc_generated_files/i2c.c: 531:                 i2c_state = S_MASTER_RCV_DATA;
 14108  052A  3006               	movlw	6
 14109  052B  00F3               	movwf	??_I2C_ISR
 14110  052C  0873               	movf	??_I2C_ISR,w
 14111  052D  0022               	movlb	2	; select bank2
 14112  052E  00ED               	movwf	_i2c_state^(0+256)
 14113                           
 14114                           ;mcc_generated_files/i2c.c: 532:             }
 14115  052F  2D34               	goto	i1l5068
 14116  0530                     i1l524:	
 14117                           ;mcc_generated_files/i2c.c: 533:             else
 14118                           
 14119                           
 14120                           ;mcc_generated_files/i2c.c: 534:             {;mcc_generated_files/i2c.c: 538:          
      +                                 SSP1CON2bits.ACKDT = 1;
 14121  0530  0024               	movlb	4	; select bank4
 14122  0531  1696               	bsf	22,5	;volatile
 14123                           
 14124                           ;mcc_generated_files/i2c.c: 540:                 I2C_FunctionComplete();
 14125  0532  319A  22D4         	fcall	_I2C_FunctionComplete
 14126  0534                     i1l5068:	
 14127                           
 14128                           ;mcc_generated_files/i2c.c: 544:             SSP1CON2bits.ACKEN = 1;
 14129  0534  0024               	movlb	4	; select bank4
 14130  0535  1616               	bsf	22,4	;volatile
 14131                           
 14132                           ;mcc_generated_files/i2c.c: 545:             break;
 14133  0536  0008               	return
 14134  0537                     i1l5070:	
 14135                           
 14136                           ;mcc_generated_files/i2c.c: 551:             I2C_Stop(I2C_MESSAGE_COMPLETE);
 14137  0537  3000               	movlw	0
 14138  0538  319B  2356         	fcall	_I2C_Stop
 14139                           
 14140                           ;mcc_generated_files/i2c.c: 552:             break;
 14141  053A  0008               	return
 14142  053B                     i1l5072:	
 14143                           
 14144                           ;mcc_generated_files/i2c.c: 558:             i2c_object.i2cErrors++;
 14145  053B  3001               	movlw	1
 14146  053C  00F3               	movwf	??_I2C_ISR
 14147  053D  0873               	movf	??_I2C_ISR,w
 14148  053E  07E2               	addwf	(_i2c_object^(0+256)+4),f
 14149                           
 14150                           ;mcc_generated_files/i2c.c: 559:             I2C_Stop(I2C_LOST_STATE);
 14151  053F  3006               	movlw	6
 14152  0540  319B  2356         	fcall	_I2C_Stop
 14153                           
 14154                           ;mcc_generated_files/i2c.c: 560:             break;
 14155  0542  0008               	return
 14156  0543                     i1l5078:	
 14157  0543  0022               	movlb	2	; select bank2
 14158  0544  086D               	movf	_i2c_state^(0+256),w
 14159  0545  00F3               	movwf	??_I2C_ISR
 14160  0546  01F4               	clrf	??_I2C_ISR+1
 14161                           
 14162                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14163                           ; Switch size 1, requested type "simple"
 14164                           ; Number of cases is 1, Range of values is 0 to 0
 14165                           ; switch strategies available:
 14166                           ; Name         Instructions Cycles
 14167                           ; simple_byte            4     3 (average)
 14168                           ; direct_byte            8     6 (fixed)
 14169                           ; jumptable            260     6 (fixed)
 14170                           ;	Chosen strategy is simple_byte
 14171  0547  0874               	movf	??_I2C_ISR+1,w
 14172  0548  3A00               	xorlw	0	; case 0
 14173  0549  1903               	skipnz
 14174  054A  2D4C               	goto	i1l5342
 14175  054B  2D3B               	goto	i1l5072
 14176  054C                     i1l5342:	
 14177                           
 14178                           ; Switch size 1, requested type "simple"
 14179                           ; Number of cases is 11, Range of values is 0 to 11
 14180                           ; switch strategies available:
 14181                           ; Name         Instructions Cycles
 14182                           ; direct_byte           30     6 (fixed)
 14183                           ; simple_byte           34    18 (average)
 14184                           ; jumptable            260     6 (fixed)
 14185                           ;	Chosen strategy is simple_byte
 14186  054C  0873               	movf	??_I2C_ISR,w
 14187  054D  3A00               	xorlw	0	; case 0
 14188  054E  1903               	skipnz
 14189  054F  2C3B               	goto	i1l490
 14190  0550  3A01               	xorlw	1	; case 1
 14191  0551  1903               	skipnz
 14192  0552  2C69               	goto	i1l495
 14193  0553  3A03               	xorlw	3	; case 2
 14194  0554  1903               	skipnz
 14195  0555  2CA6               	goto	i1l5000
 14196  0556  3A01               	xorlw	1	; case 3
 14197  0557  1903               	skipnz
 14198  0558  2CCC               	goto	i1l512
 14199  0559  3A07               	xorlw	7	; case 4
 14200  055A  1903               	skipnz
 14201  055B  2D37               	goto	i1l5070
 14202  055C  3A01               	xorlw	1	; case 5
 14203  055D  1903               	skipnz
 14204  055E  2CFC               	goto	i1l519
 14205  055F  3A03               	xorlw	3	; case 6
 14206  0560  1903               	skipnz
 14207  0561  2D11               	goto	i1l5052
 14208  0562  3A01               	xorlw	1	; case 7
 14209  0563  1903               	skipnz
 14210  0564  2D37               	goto	i1l5070
 14211  0565  3A0F               	xorlw	15	; case 8
 14212  0566  1903               	skipnz
 14213  0567  2D18               	goto	i1l5056
 14214  0568  3A02               	xorlw	2	; case 10
 14215  0569  1903               	skipnz
 14216  056A  2C6A               	goto	i1l496
 14217  056B  3A01               	xorlw	1	; case 11
 14218  056C  1903               	skipnz
 14219  056D  2C8C               	goto	i1l501
 14220  056E  2D3B               	goto	i1l5072
 14221  056F  0008               	return
 14222  0570                     __end_of_I2C_ISR:	
 14223                           
 14224                           	psect	text63
 14225  1B56                     __ptext63:	
 14226 ;; *************** function _I2C_Stop *****************
 14227 ;; Defined at:
 14228 ;;		line 583 in file "mcc_generated_files/i2c.c"
 14229 ;; Parameters:    Size  Location     Type
 14230 ;;  completion_c    1    wreg     enum E9631
 14231 ;; Auto vars:     Size  Location     Type
 14232 ;;  completion_c    1    2[COMMON] enum E9631
 14233 ;; Return value:  Size  Location     Type
 14234 ;;                  1    wreg      void 
 14235 ;; Registers used:
 14236 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14237 ;; Tracked objects:
 14238 ;;		On entry : 19/2
 14239 ;;		On exit  : 1F/2
 14240 ;;		Unchanged: 0/0
 14241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;Total ram usage:        3 bytes
 14247 ;; Hardware stack levels used:    1
 14248 ;; This function calls:
 14249 ;;		Nothing
 14250 ;; This function is called by:
 14251 ;;		_I2C_ISR
 14252 ;; This function uses a non-reentrant model
 14253 ;;
 14254                           
 14255                           
 14256                           ;psect for function _I2C_Stop
 14257  1B56                     _I2C_Stop:	
 14258                           
 14259                           ;incstack = 0
 14260                           ; Regs used in _I2C_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 14261                           ;I2C_Stop@completion_code stored from wreg
 14262  1B56  00F2               	movwf	I2C_Stop@completion_code
 14263                           
 14264                           ;mcc_generated_files/i2c.c: 583: void I2C_Stop(I2C_MESSAGE_STATUS completion_code);mcc_g
      +                          enerated_files/i2c.c: 584: {;mcc_generated_files/i2c.c: 586:     SSP1CON2bits.PEN = 1;
 14265  1B57  0024               	movlb	4	; select bank4
 14266  1B58  1516               	bsf	22,2	;volatile
 14267                           
 14268                           ;mcc_generated_files/i2c.c: 589:     if (p_i2c_current->pTrFlag != ((void*)0))
 14269  1B59  0879               	movf	_p_i2c_current,w
 14270  1B5A  3E02               	addlw	2
 14271  1B5B  0086               	movwf	6
 14272  1B5C  3001               	movlw	1	; select bank2/3
 14273  1B5D  0087               	movwf	7
 14274  1B5E  0016               	moviw fsr1++
 14275  1B5F  0401               	iorwf	1,w
 14276  1B60  1903               	btfsc	3,2
 14277  1B61  2B71               	goto	i1l4670
 14278                           
 14279                           ;mcc_generated_files/i2c.c: 590:     {;mcc_generated_files/i2c.c: 592:         *(p_i2c_c
      +                          urrent->pTrFlag) = completion_code;
 14280  1B62  0879               	movf	_p_i2c_current,w
 14281  1B63  3E02               	addlw	2
 14282  1B64  0086               	movwf	6
 14283  1B65  3001               	movlw	1	; select bank2/3
 14284  1B66  0087               	movwf	7
 14285  1B67  3F40               	moviw [0]fsr1
 14286  1B68  00F0               	movwf	??_I2C_Stop
 14287  1B69  3F41               	moviw [1]fsr1
 14288  1B6A  00F1               	movwf	??_I2C_Stop+1
 14289  1B6B  0870               	movf	??_I2C_Stop,w
 14290  1B6C  0086               	movwf	6
 14291  1B6D  0871               	movf	??_I2C_Stop+1,w
 14292  1B6E  0087               	movwf	7
 14293  1B6F  0872               	movf	I2C_Stop@completion_code,w
 14294  1B70  0081               	movwf	1
 14295  1B71                     i1l4670:	
 14296                           
 14297                           ;mcc_generated_files/i2c.c: 596:     i2c_state = S_MASTER_IDLE;
 14298  1B71  0022               	movlb	2	; select bank2
 14299  1B72  01ED               	clrf	_i2c_state^(0+256)
 14300  1B73  0008               	return
 14301  1B74                     __end_of_I2C_Stop:	
 14302                           
 14303                           	psect	text64
 14304  1AD4                     __ptext64:	
 14305 ;; *************** function _I2C_FunctionComplete *****************
 14306 ;; Defined at:
 14307 ;;		line 565 in file "mcc_generated_files/i2c.c"
 14308 ;; Parameters:    Size  Location     Type
 14309 ;;		None
 14310 ;; Auto vars:     Size  Location     Type
 14311 ;;		None
 14312 ;; Return value:  Size  Location     Type
 14313 ;;                  1    wreg      void 
 14314 ;; Registers used:
 14315 ;;		wreg, status,2, status,0
 14316 ;; Tracked objects:
 14317 ;;		On entry : 1F/4
 14318 ;;		On exit  : 1F/2
 14319 ;;		Unchanged: 0/0
 14320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14323 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14324 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;Total ram usage:        1 bytes
 14326 ;; Hardware stack levels used:    1
 14327 ;; This function calls:
 14328 ;;		Nothing
 14329 ;; This function is called by:
 14330 ;;		_I2C_ISR
 14331 ;; This function uses a non-reentrant model
 14332 ;;
 14333                           
 14334                           
 14335                           ;psect for function _I2C_FunctionComplete
 14336  1AD4                     _I2C_FunctionComplete:	
 14337                           
 14338                           ;mcc_generated_files/i2c.c: 569:     p_i2c_trb_current++;
 14339                           
 14340                           ;incstack = 0
 14341                           ; Regs used in _I2C_FunctionComplete: [wreg+status,2+status,0]
 14342  1AD4  3005               	movlw	5
 14343  1AD5  00F0               	movwf	??_I2C_FunctionComplete
 14344  1AD6  0870               	movf	??_I2C_FunctionComplete,w
 14345  1AD7  07FA               	addwf	_p_i2c_trb_current,f
 14346                           
 14347                           ;mcc_generated_files/i2c.c: 572:     if(--i2c_trb_count == 0)
 14348  1AD8  3001               	movlw	1
 14349  1AD9  0022               	movlb	2	; select bank2
 14350  1ADA  02EC               	subwf	_i2c_trb_count^(0+256),f
 14351  1ADB  1D03               	btfss	3,2
 14352  1ADC  2AE2               	goto	i1l531
 14353                           
 14354                           ;mcc_generated_files/i2c.c: 573:     {;mcc_generated_files/i2c.c: 574:         i2c_state
      +                           = S_MASTER_SEND_STOP;
 14355  1ADD  3004               	movlw	4
 14356  1ADE  00F0               	movwf	??_I2C_FunctionComplete
 14357  1ADF  0870               	movf	??_I2C_FunctionComplete,w
 14358  1AE0  00ED               	movwf	_i2c_state^(0+256)
 14359                           
 14360                           ;mcc_generated_files/i2c.c: 575:     }
 14361  1AE1  0008               	return
 14362  1AE2                     i1l531:	
 14363                           ;mcc_generated_files/i2c.c: 576:     else
 14364                           
 14365                           
 14366                           ;mcc_generated_files/i2c.c: 577:     {;mcc_generated_files/i2c.c: 578:         i2c_state
      +                           = S_MASTER_RESTART;
 14367  1AE2  01ED               	clrf	_i2c_state^(0+256)
 14368  1AE3  0AED               	incf	_i2c_state^(0+256),f
 14369  1AE4  0008               	return
 14370  1AE5                     __end_of_I2C_FunctionComplete:	
 14371                           
 14372                           	psect	text65
 14373  1000                     __ptext65:	
 14374 ;; *************** function _I2C_BusCollisionISR *****************
 14375 ;; Defined at:
 14376 ;;		line 742 in file "mcc_generated_files/i2c.c"
 14377 ;; Parameters:    Size  Location     Type
 14378 ;;		None
 14379 ;; Auto vars:     Size  Location     Type
 14380 ;;		None
 14381 ;; Return value:  Size  Location     Type
 14382 ;;                  1    wreg      void 
 14383 ;; Registers used:
 14384 ;;		None
 14385 ;; Tracked objects:
 14386 ;;		On entry : 1F/0
 14387 ;;		On exit  : 1F/0
 14388 ;;		Unchanged: 0/0
 14389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;Total ram usage:        0 bytes
 14395 ;; Hardware stack levels used:    1
 14396 ;; This function calls:
 14397 ;;		Nothing
 14398 ;; This function is called by:
 14399 ;;		_INTERRUPT_InterruptManager
 14400 ;; This function uses a non-reentrant model
 14401 ;;
 14402                           
 14403                           
 14404                           ;psect for function _I2C_BusCollisionISR
 14405  1000                     _I2C_BusCollisionISR:	
 14406                           
 14407                           ;mcc_generated_files/i2c.c: 745:  PIR2bits.BCL1IF = 0;
 14408                           
 14409                           ;incstack = 0
 14410                           ; Regs used in _I2C_BusCollisionISR: []
 14411  1000  1191               	bcf	17,3	;volatile
 14412  1001  0008               	return
 14413  1002                     __end_of_I2C_BusCollisionISR:	
 14414  007E                     btemp	set	126	;btemp
 14415  007E                     int$flags	set	126
 14416  007E                     wtemp0	set	126
 14417                           
 14418                           	psect	text27_split_1
 14419  0833                     L7:	
 14420  0833  0021               	movlb	1	; select bank1
 14421  0834  00C1               	movwf	_compensate_pressure$2533^(0+128)
 14422  0835  0020               	movlb	0	; select bank0
 14423  0836  0821               	movf	?___omul+1,w
 14424  0837  0021               	movlb	1	; select bank1
 14425  0838  00C2               	movwf	(_compensate_pressure$2533+1)^(0+128)
 14426  0839  0020               	movlb	0	; select bank0
 14427  083A  0822               	movf	?___omul+2,w
 14428  083B  0021               	movlb	1	; select bank1
 14429  083C  00C3               	movwf	(_compensate_pressure$2533+2)^(0+128)
 14430  083D  0020               	movlb	0	; select bank0
 14431  083E  0823               	movf	?___omul+3,w
 14432  083F  0021               	movlb	1	; select bank1
 14433  0840  00C4               	movwf	(_compensate_pressure$2533+3)^(0+128)
 14434  0841  0020               	movlb	0	; select bank0
 14435  0842  0824               	movf	?___omul+4,w
 14436  0843  0021               	movlb	1	; select bank1
 14437  0844  00C5               	movwf	(_compensate_pressure$2533+4)^(0+128)
 14438  0845  0020               	movlb	0	; select bank0
 14439  0846  0825               	movf	?___omul+5,w
 14440  0847  0021               	movlb	1	; select bank1
 14441  0848  00C6               	movwf	(_compensate_pressure$2533+5)^(0+128)
 14442  0849  0020               	movlb	0	; select bank0
 14443  084A  0826               	movf	?___omul+6,w
 14444  084B  0021               	movlb	1	; select bank1
 14445  084C  00C7               	movwf	(_compensate_pressure$2533+6)^(0+128)
 14446  084D  0020               	movlb	0	; select bank0
 14447  084E  0827               	movf	?___omul+7,w
 14448  084F  0021               	movlb	1	; select bank1
 14449  0850  00C8               	movwf	(_compensate_pressure$2533+7)^(0+128)
 14450                           
 14451                           ;BME280_driver/bme280.c: 1171:     var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 14452  0851  0841               	movf	_compensate_pressure$2533^(0+128),w
 14453  0852  0020               	movlb	0	; select bank0
 14454  0853  00A0               	movwf	___omul@multiplier
 14455  0854  0021               	movlb	1	; select bank1
 14456  0855  0842               	movf	(_compensate_pressure$2533+1)^(0+128),w
 14457  0856  0020               	movlb	0	; select bank0
 14458  0857  00A1               	movwf	___omul@multiplier+1
 14459  0858  0021               	movlb	1	; select bank1
 14460  0859  0843               	movf	(_compensate_pressure$2533+2)^(0+128),w
 14461  085A  0020               	movlb	0	; select bank0
 14462  085B  00A2               	movwf	___omul@multiplier+2
 14463  085C  0021               	movlb	1	; select bank1
 14464  085D  0844               	movf	(_compensate_pressure$2533+3)^(0+128),w
 14465  085E  0020               	movlb	0	; select bank0
 14466  085F  00A3               	movwf	___omul@multiplier+3
 14467  0860  0021               	movlb	1	; select bank1
 14468  0861  0845               	movf	(_compensate_pressure$2533+4)^(0+128),w
 14469  0862  0020               	movlb	0	; select bank0
 14470  0863  00A4               	movwf	___omul@multiplier+4
 14471  0864  0021               	movlb	1	; select bank1
 14472  0865  0846               	movf	(_compensate_pressure$2533+5)^(0+128),w
 14473  0866  0020               	movlb	0	; select bank0
 14474  0867  00A5               	movwf	___omul@multiplier+5
 14475  0868  0021               	movlb	1	; select bank1
 14476  0869  0847               	movf	(_compensate_pressure$2533+6)^(0+128),w
 14477  086A  0020               	movlb	0	; select bank0
 14478  086B  00A6               	movwf	___omul@multiplier+6
 14479  086C  0021               	movlb	1	; select bank1
 14480  086D  0848               	movf	(_compensate_pressure$2533+7)^(0+128),w
 14481  086E  0020               	movlb	0	; select bank0
 14482  086F  00A7               	movwf	___omul@multiplier+7
 14483  0870  0021               	movlb	1	; select bank1
 14484  0871  085D               	movf	compensate_pressure@var1^(0+128),w
 14485  0872  0020               	movlb	0	; select bank0
 14486  0873  00A8               	movwf	___omul@multiplicand
 14487  0874  0021               	movlb	1	; select bank1
 14488  0875  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 14489  0876  0020               	movlb	0	; select bank0
 14490  0877  00A9               	movwf	___omul@multiplicand+1
 14491  0878  0021               	movlb	1	; select bank1
 14492  0879  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 14493  087A  0020               	movlb	0	; select bank0
 14494  087B  00AA               	movwf	___omul@multiplicand+2
 14495  087C  0021               	movlb	1	; select bank1
 14496  087D  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 14497  087E  0020               	movlb	0	; select bank0
 14498  087F  00AB               	movwf	___omul@multiplicand+3
 14499  0880  0021               	movlb	1	; select bank1
 14500  0881  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 14501  0882  0020               	movlb	0	; select bank0
 14502  0883  00AC               	movwf	___omul@multiplicand+4
 14503  0884  0021               	movlb	1	; select bank1
 14504  0885  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 14505  0886  0020               	movlb	0	; select bank0
 14506  0887  00AD               	movwf	___omul@multiplicand+5
 14507  0888  0021               	movlb	1	; select bank1
 14508  0889  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 14509  088A  0020               	movlb	0	; select bank0
 14510  088B  00AE               	movwf	___omul@multiplicand+6
 14511  088C  0021               	movlb	1	; select bank1
 14512  088D  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 14513  088E  0020               	movlb	0	; select bank0
 14514  088F  00AF               	movwf	___omul@multiplicand+7
 14515  0890  319F  2771  3188   	fcall	___omul
 14516  0893  0820               	movf	?___omul,w
 14517  0894  0021               	movlb	1	; select bank1
 14518  0895  00CD               	movwf	compensate_pressure@var2^(0+128)
 14519  0896  0020               	movlb	0	; select bank0
 14520  0897  0821               	movf	?___omul+1,w
 14521  0898  0021               	movlb	1	; select bank1
 14522  0899  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 14523  089A  0020               	movlb	0	; select bank0
 14524  089B  0822               	movf	?___omul+2,w
 14525  089C  0021               	movlb	1	; select bank1
 14526  089D  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 14527  089E  0020               	movlb	0	; select bank0
 14528  089F  0823               	movf	?___omul+3,w
 14529  08A0  0021               	movlb	1	; select bank1
 14530  08A1  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 14531  08A2  0020               	movlb	0	; select bank0
 14532  08A3  0824               	movf	?___omul+4,w
 14533  08A4  0021               	movlb	1	; select bank1
 14534  08A5  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 14535  08A6  0020               	movlb	0	; select bank0
 14536  08A7  0825               	movf	?___omul+5,w
 14537  08A8  0021               	movlb	1	; select bank1
 14538  08A9  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 14539  08AA  0020               	movlb	0	; select bank0
 14540  08AB  0826               	movf	?___omul+6,w
 14541  08AC  0021               	movlb	1	; select bank1
 14542  08AD  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 14543  08AE  0020               	movlb	0	; select bank0
 14544  08AF  0827               	movf	?___omul+7,w
 14545  08B0  0021               	movlb	1	; select bank1
 14546  08B1  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 14547                           
 14548                           ;BME280_driver/bme280.c: 1172:     var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) *
      +                           131072);
 14549  08B2  30CD               	movlw	low compensate_pressure@var2
 14550  08B3  0086               	movwf	6
 14551  08B4  3000               	movlw	high compensate_pressure@var2
 14552  08B5  0087               	movwf	7
 14553  08B6  3F40               	moviw [0]fsr1
 14554  08B7  0020               	movlb	0	; select bank0
 14555  08B8  00D6               	movwf	??_compensate_pressure
 14556  08B9  3F41               	moviw [1]fsr1
 14557  08BA  00D7               	movwf	??_compensate_pressure+1
 14558  08BB  3F42               	moviw [2]fsr1
 14559  08BC  00D8               	movwf	??_compensate_pressure+2
 14560  08BD  3F43               	moviw [3]fsr1
 14561  08BE  00D9               	movwf	??_compensate_pressure+3
 14562  08BF  3F44               	moviw [4]fsr1
 14563  08C0  00DA               	movwf	??_compensate_pressure+4
 14564  08C1  3F45               	moviw [5]fsr1
 14565  08C2  00DB               	movwf	??_compensate_pressure+5
 14566  08C3  3F46               	moviw [6]fsr1
 14567  08C4  00DC               	movwf	??_compensate_pressure+6
 14568  08C5  3F47               	moviw [7]fsr1
 14569  08C6  00DD               	movwf	??_compensate_pressure+7
 14570  08C7  0852               	movf	compensate_pressure@calib_data,w
 14571  08C8  3E0E               	addlw	14
 14572  08C9  0086               	movwf	6
 14573  08CA  3001               	movlw	1	; select bank2/3
 14574  08CB  0087               	movwf	7
 14575  08CC  3F40               	moviw [0]fsr1
 14576  08CD  00DE               	movwf	??_compensate_pressure+8
 14577  08CE  3F41               	moviw [1]fsr1
 14578  08CF  00DF               	movwf	??_compensate_pressure+9
 14579  08D0  085E               	movf	??_compensate_pressure+8,w
 14580  08D1  00A0               	movwf	___omul@multiplier
 14581  08D2  085F               	movf	??_compensate_pressure+9,w
 14582  08D3  00A1               	movwf	___omul@multiplier+1
 14583  08D4  0D89               	rlf	9,f
 14584  08D5  3B89               	subwfb	9,f
 14585  08D6  0989               	comf	9,f
 14586  08D7  00A2               	movwf	___omul@multiplier+2
 14587  08D8  00A3               	movwf	___omul@multiplier+3
 14588  08D9  00A4               	movwf	___omul@multiplier+4
 14589  08DA  00A5               	movwf	___omul@multiplier+5
 14590  08DB  00A6               	movwf	___omul@multiplier+6
 14591  08DC  00A7               	movwf	___omul@multiplier+7
 14592  08DD  0021               	movlb	1	; select bank1
 14593  08DE  085D               	movf	compensate_pressure@var1^(0+128),w
 14594  08DF  0020               	movlb	0	; select bank0
 14595  08E0  00A8               	movwf	___omul@multiplicand
 14596  08E1  0021               	movlb	1	; select bank1
 14597  08E2  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 14598  08E3  0020               	movlb	0	; select bank0
 14599  08E4  00A9               	movwf	___omul@multiplicand+1
 14600  08E5  0021               	movlb	1	; select bank1
 14601  08E6  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 14602  08E7  0020               	movlb	0	; select bank0
 14603  08E8  00AA               	movwf	___omul@multiplicand+2
 14604  08E9  0021               	movlb	1	; select bank1
 14605  08EA  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 14606  08EB  0020               	movlb	0	; select bank0
 14607  08EC  00AB               	movwf	___omul@multiplicand+3
 14608  08ED  0021               	movlb	1	; select bank1
 14609  08EE  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 14610  08EF  0020               	movlb	0	; select bank0
 14611  08F0  00AC               	movwf	___omul@multiplicand+4
 14612  08F1  0021               	movlb	1	; select bank1
 14613  08F2  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 14614  08F3  0020               	movlb	0	; select bank0
 14615  08F4  00AD               	movwf	___omul@multiplicand+5
 14616  08F5  0021               	movlb	1	; select bank1
 14617  08F6  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 14618  08F7  0020               	movlb	0	; select bank0
 14619  08F8  00AE               	movwf	___omul@multiplicand+6
 14620  08F9  0021               	movlb	1	; select bank1
 14621  08FA  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 14622  08FB  0020               	movlb	0	; select bank0
 14623  08FC  00AF               	movwf	___omul@multiplicand+7
 14624  08FD  319F  2771  3188   	fcall	___omul
 14625  0900  3020               	movlw	low ?___omul
 14626  0901  0086               	movwf	6
 14627  0902  3000               	movlw	high ?___omul
 14628  0903  0087               	movwf	7
 14629  0904  3F40               	moviw [0]fsr1
 14630  0905  00E0               	movwf	??_compensate_pressure+10
 14631  0906  3F41               	moviw [1]fsr1
 14632  0907  00E1               	movwf	??_compensate_pressure+11
 14633  0908  3F42               	moviw [2]fsr1
 14634  0909  00E2               	movwf	??_compensate_pressure+12
 14635  090A  3F43               	moviw [3]fsr1
 14636  090B  00E3               	movwf	??_compensate_pressure+13
 14637  090C  3F44               	moviw [4]fsr1
 14638  090D  00E4               	movwf	??_compensate_pressure+14
 14639  090E  3F45               	moviw [5]fsr1
 14640  090F  00E5               	movwf	??_compensate_pressure+15
 14641  0910  3F46               	moviw [6]fsr1
 14642  0911  00E6               	movwf	??_compensate_pressure+16
 14643  0912  3F47               	moviw [7]fsr1
 14644  0913  00E7               	movwf	??_compensate_pressure+17
 14645  0914  3011               	movlw	17
 14646  0915                     u4315:	
 14647  0915  0020               	movlb	0	; select bank0
 14648  0916  35E0               	lslf	??_compensate_pressure+10,f
 14649  0917  0DE1               	rlf	??_compensate_pressure+11,f
 14650  0918  0DE2               	rlf	??_compensate_pressure+12,f
 14651  0919  0DE3               	rlf	??_compensate_pressure+13,f
 14652  091A  0DE4               	rlf	??_compensate_pressure+14,f
 14653  091B  0DE5               	rlf	??_compensate_pressure+15,f
 14654  091C  0DE6               	rlf	??_compensate_pressure+16,f
 14655  091D  0DE7               	rlf	??_compensate_pressure+17,f
 14656  091E  0B89               	decfsz	9,f
 14657  091F  2915               	goto	u4315
 14658  0920  0020               	movlb	0	; select bank0
 14659  0921  0860               	movf	??_compensate_pressure+10,w
 14660  0922  07D6               	addwf	??_compensate_pressure,f
 14661  0923  0861               	movf	??_compensate_pressure+11,w
 14662  0924  3DD7               	addwfc	??_compensate_pressure+1,f
 14663  0925  0862               	movf	??_compensate_pressure+12,w
 14664  0926  3DD8               	addwfc	??_compensate_pressure+2,f
 14665  0927  0863               	movf	??_compensate_pressure+13,w
 14666  0928  3DD9               	addwfc	??_compensate_pressure+3,f
 14667  0929  0864               	movf	??_compensate_pressure+14,w
 14668  092A  3DDA               	addwfc	??_compensate_pressure+4,f
 14669  092B  0865               	movf	??_compensate_pressure+15,w
 14670  092C  3DDB               	addwfc	??_compensate_pressure+5,f
 14671  092D  0866               	movf	??_compensate_pressure+16,w
 14672  092E  3DDC               	addwfc	??_compensate_pressure+6,f
 14673  092F  0867               	movf	??_compensate_pressure+17,w
 14674  0930  3DDD               	addwfc	??_compensate_pressure+7,f
 14675  0931  085D               	movf	??_compensate_pressure+7,w
 14676  0932  0021               	movlb	1	; select bank1
 14677  0933  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 14678  0934  0020               	movlb	0	; select bank0
 14679  0935  085C               	movf	??_compensate_pressure+6,w
 14680  0936  0021               	movlb	1	; select bank1
 14681  0937  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 14682  0938  0020               	movlb	0	; select bank0
 14683  0939  085B               	movf	??_compensate_pressure+5,w
 14684  093A  0021               	movlb	1	; select bank1
 14685  093B  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 14686  093C  0020               	movlb	0	; select bank0
 14687  093D  085A               	movf	??_compensate_pressure+4,w
 14688  093E  0021               	movlb	1	; select bank1
 14689  093F  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 14690  0940  0020               	movlb	0	; select bank0
 14691  0941  0859               	movf	??_compensate_pressure+3,w
 14692  0942  0021               	movlb	1	; select bank1
 14693  0943  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 14694  0944  0020               	movlb	0	; select bank0
 14695  0945  0858               	movf	??_compensate_pressure+2,w
 14696  0946  0021               	movlb	1	; select bank1
 14697  0947  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 14698  0948  0020               	movlb	0	; select bank0
 14699  0949  0857               	movf	??_compensate_pressure+1,w
 14700  094A  0021               	movlb	1	; select bank1
 14701  094B  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 14702  094C  0020               	movlb	0	; select bank0
 14703  094D  0856               	movf	??_compensate_pressure,w
 14704  094E  0021               	movlb	1	; select bank1
 14705  094F  00CD               	movwf	compensate_pressure@var2^(0+128)
 14706                           
 14707                           ;BME280_driver/bme280.c: 1173:     var2 = var2 + (((int64_t)calib_data->dig_P4) * 343597
      +                          38368);
 14708  0950  30CD               	movlw	low compensate_pressure@var2
 14709  0951  0086               	movwf	6
 14710  0952  3000               	movlw	high compensate_pressure@var2
 14711  0953  0087               	movwf	7
 14712  0954  3F40               	moviw [0]fsr1
 14713  0955  0020               	movlb	0	; select bank0
 14714  0956  00D6               	movwf	??_compensate_pressure
 14715  0957  3F41               	moviw [1]fsr1
 14716  0958  00D7               	movwf	??_compensate_pressure+1
 14717  0959  3F42               	moviw [2]fsr1
 14718  095A  00D8               	movwf	??_compensate_pressure+2
 14719  095B  3F43               	moviw [3]fsr1
 14720  095C  00D9               	movwf	??_compensate_pressure+3
 14721  095D  3F44               	moviw [4]fsr1
 14722  095E  00DA               	movwf	??_compensate_pressure+4
 14723  095F  3F45               	moviw [5]fsr1
 14724  0960  00DB               	movwf	??_compensate_pressure+5
 14725  0961  3F46               	moviw [6]fsr1
 14726  0962  00DC               	movwf	??_compensate_pressure+6
 14727  0963  3F47               	moviw [7]fsr1
 14728  0964  00DD               	movwf	??_compensate_pressure+7
 14729  0965  0852               	movf	compensate_pressure@calib_data,w
 14730  0966  3E0C               	addlw	12
 14731  0967  0086               	movwf	6
 14732  0968  3001               	movlw	1	; select bank2/3
 14733  0969  0087               	movwf	7
 14734  096A  3F40               	moviw [0]fsr1
 14735  096B  00DE               	movwf	??_compensate_pressure+8
 14736  096C  3F41               	moviw [1]fsr1
 14737  096D  00DF               	movwf	??_compensate_pressure+9
 14738  096E  085E               	movf	??_compensate_pressure+8,w
 14739  096F  00E0               	movwf	??_compensate_pressure+10
 14740  0970  085F               	movf	??_compensate_pressure+9,w
 14741  0971  00E1               	movwf	??_compensate_pressure+11
 14742  0972  3000               	movlw	0
 14743  0973  1BE1               	btfsc	??_compensate_pressure+11,7
 14744  0974  30FF               	movlw	255
 14745  0975  00E2               	movwf	??_compensate_pressure+12
 14746  0976  00E3               	movwf	??_compensate_pressure+13
 14747  0977  00E4               	movwf	??_compensate_pressure+14
 14748  0978  00E5               	movwf	??_compensate_pressure+15
 14749  0979  00E6               	movwf	??_compensate_pressure+16
 14750  097A  00E7               	movwf	??_compensate_pressure+17
 14751  097B  3023               	movlw	35
 14752  097C                     u4325:	
 14753  097C  0020               	movlb	0	; select bank0
 14754  097D  35E0               	lslf	??_compensate_pressure+10,f
 14755  097E  0DE1               	rlf	??_compensate_pressure+11,f
 14756  097F  0DE2               	rlf	??_compensate_pressure+12,f
 14757  0980  0DE3               	rlf	??_compensate_pressure+13,f
 14758  0981  0DE4               	rlf	??_compensate_pressure+14,f
 14759  0982  0DE5               	rlf	??_compensate_pressure+15,f
 14760  0983  0DE6               	rlf	??_compensate_pressure+16,f
 14761  0984  0DE7               	rlf	??_compensate_pressure+17,f
 14762  0985  0B89               	decfsz	9,f
 14763  0986  297C               	goto	u4325
 14764  0987  0020               	movlb	0	; select bank0
 14765  0988  0860               	movf	??_compensate_pressure+10,w
 14766  0989  07D6               	addwf	??_compensate_pressure,f
 14767  098A  0861               	movf	??_compensate_pressure+11,w
 14768  098B  3DD7               	addwfc	??_compensate_pressure+1,f
 14769  098C  0862               	movf	??_compensate_pressure+12,w
 14770  098D  3DD8               	addwfc	??_compensate_pressure+2,f
 14771  098E  0863               	movf	??_compensate_pressure+13,w
 14772  098F  3DD9               	addwfc	??_compensate_pressure+3,f
 14773  0990  0864               	movf	??_compensate_pressure+14,w
 14774  0991  3DDA               	addwfc	??_compensate_pressure+4,f
 14775  0992  0865               	movf	??_compensate_pressure+15,w
 14776  0993  3DDB               	addwfc	??_compensate_pressure+5,f
 14777  0994  0866               	movf	??_compensate_pressure+16,w
 14778  0995  3DDC               	addwfc	??_compensate_pressure+6,f
 14779  0996  0867               	movf	??_compensate_pressure+17,w
 14780  0997  3DDD               	addwfc	??_compensate_pressure+7,f
 14781  0998  085D               	movf	??_compensate_pressure+7,w
 14782  0999  0021               	movlb	1	; select bank1
 14783  099A  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 14784  099B  0020               	movlb	0	; select bank0
 14785  099C  085C               	movf	??_compensate_pressure+6,w
 14786  099D  0021               	movlb	1	; select bank1
 14787  099E  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 14788  099F  0020               	movlb	0	; select bank0
 14789  09A0  085B               	movf	??_compensate_pressure+5,w
 14790  09A1  0021               	movlb	1	; select bank1
 14791  09A2  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 14792  09A3  0020               	movlb	0	; select bank0
 14793  09A4  085A               	movf	??_compensate_pressure+4,w
 14794  09A5  0021               	movlb	1	; select bank1
 14795  09A6  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 14796  09A7  0020               	movlb	0	; select bank0
 14797  09A8  0859               	movf	??_compensate_pressure+3,w
 14798  09A9  0021               	movlb	1	; select bank1
 14799  09AA  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 14800  09AB  0020               	movlb	0	; select bank0
 14801  09AC  0858               	movf	??_compensate_pressure+2,w
 14802  09AD  0021               	movlb	1	; select bank1
 14803  09AE  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 14804  09AF  0020               	movlb	0	; select bank0
 14805  09B0  0857               	movf	??_compensate_pressure+1,w
 14806  09B1  0021               	movlb	1	; select bank1
 14807  09B2  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 14808  09B3  0020               	movlb	0	; select bank0
 14809  09B4  0856               	movf	??_compensate_pressure,w
 14810  09B5  0021               	movlb	1	; select bank1
 14811  09B6  00CD               	movwf	compensate_pressure@var2^(0+128)
 14812                           
 14813                           ;BME280_driver/bme280.c: 1174:     var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) /
      +                           256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 14814  09B7  0020               	movlb	0	; select bank0
 14815  09B8  0852               	movf	compensate_pressure@calib_data,w
 14816  09B9  3E0A               	addlw	10
 14817  09BA  0086               	movwf	6
 14818  09BB  3001               	movlw	1	; select bank2/3
 14819  09BC  0087               	movwf	7
 14820  09BD  3F40               	moviw [0]fsr1
 14821  09BE  00D6               	movwf	??_compensate_pressure
 14822  09BF  3F41               	moviw [1]fsr1
 14823  09C0  00D7               	movwf	??_compensate_pressure+1
 14824  09C1  0856               	movf	??_compensate_pressure,w
 14825  09C2  00A0               	movwf	___omul@multiplier
 14826  09C3  0857               	movf	??_compensate_pressure+1,w
 14827  09C4  00A1               	movwf	___omul@multiplier+1
 14828  09C5  0D89               	rlf	9,f
 14829  09C6  3B89               	subwfb	9,f
 14830  09C7  0989               	comf	9,f
 14831  09C8  00A2               	movwf	___omul@multiplier+2
 14832  09C9  00A3               	movwf	___omul@multiplier+3
 14833  09CA  00A4               	movwf	___omul@multiplier+4
 14834  09CB  00A5               	movwf	___omul@multiplier+5
 14835  09CC  00A6               	movwf	___omul@multiplier+6
 14836  09CD  00A7               	movwf	___omul@multiplier+7
 14837  09CE  0021               	movlb	1	; select bank1
 14838  09CF  085D               	movf	compensate_pressure@var1^(0+128),w
 14839  09D0  0020               	movlb	0	; select bank0
 14840  09D1  00A8               	movwf	___omul@multiplicand
 14841  09D2  0021               	movlb	1	; select bank1
 14842  09D3  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 14843  09D4  0020               	movlb	0	; select bank0
 14844  09D5  00A9               	movwf	___omul@multiplicand+1
 14845  09D6  0021               	movlb	1	; select bank1
 14846  09D7  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 14847  09D8  0020               	movlb	0	; select bank0
 14848  09D9  00AA               	movwf	___omul@multiplicand+2
 14849  09DA  0021               	movlb	1	; select bank1
 14850  09DB  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 14851  09DC  0020               	movlb	0	; select bank0
 14852  09DD  00AB               	movwf	___omul@multiplicand+3
 14853  09DE  0021               	movlb	1	; select bank1
 14854  09DF  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 14855  09E0  0020               	movlb	0	; select bank0
 14856  09E1  00AC               	movwf	___omul@multiplicand+4
 14857  09E2  0021               	movlb	1	; select bank1
 14858  09E3  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 14859  09E4  0020               	movlb	0	; select bank0
 14860  09E5  00AD               	movwf	___omul@multiplicand+5
 14861  09E6  0021               	movlb	1	; select bank1
 14862  09E7  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 14863  09E8  0020               	movlb	0	; select bank0
 14864  09E9  00AE               	movwf	___omul@multiplicand+6
 14865  09EA  0021               	movlb	1	; select bank1
 14866  09EB  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 14867  09EC  0020               	movlb	0	; select bank0
 14868  09ED  00AF               	movwf	___omul@multiplicand+7
 14869  09EE  319F  2771  3188   	fcall	___omul
 14870  09F1  0820               	movf	?___omul,w
 14871  09F2  0021               	movlb	1	; select bank1
 14872  09F3  00C1               	movwf	_compensate_pressure$2533^(0+128)
 14873  09F4  0020               	movlb	0	; select bank0
 14874  09F5  0821               	movf	?___omul+1,w
 14875  09F6  0021               	movlb	1	; select bank1
 14876  09F7  00C2               	movwf	(_compensate_pressure$2533+1)^(0+128)
 14877  09F8  0020               	movlb	0	; select bank0
 14878  09F9  0822               	movf	?___omul+2,w
 14879  09FA  0021               	movlb	1	; select bank1
 14880  09FB  00C3               	movwf	(_compensate_pressure$2533+2)^(0+128)
 14881  09FC  0020               	movlb	0	; select bank0
 14882  09FD  0823               	movf	?___omul+3,w
 14883  09FE  0021               	movlb	1	; select bank1
 14884  09FF  00C4               	movwf	(_compensate_pressure$2533+3)^(0+128)
 14885  0A00  0020               	movlb	0	; select bank0
 14886  0A01  0824               	movf	?___omul+4,w
 14887  0A02  0021               	movlb	1	; select bank1
 14888  0A03  00C5               	movwf	(_compensate_pressure$2533+4)^(0+128)
 14889  0A04  0020               	movlb	0	; select bank0
 14890  0A05  0825               	movf	?___omul+5,w
 14891  0A06  0021               	movlb	1	; select bank1
 14892  0A07  00C6               	movwf	(_compensate_pressure$2533+5)^(0+128)
 14893  0A08  0020               	movlb	0	; select bank0
 14894  0A09  0826               	movf	?___omul+6,w
 14895  0A0A  0021               	movlb	1	; select bank1
 14896  0A0B  00C7               	movwf	(_compensate_pressure$2533+6)^(0+128)
 14897  0A0C  0020               	movlb	0	; select bank0
 14898  0A0D  0827               	movf	?___omul+7,w
 14899  0A0E  0021               	movlb	1	; select bank1
 14900  0A0F  00C8               	movwf	(_compensate_pressure$2533+7)^(0+128)
 14901                           
 14902                           ;BME280_driver/bme280.c: 1174:     var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) /
      +                           256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 14903  0A10  0020               	movlb	0	; select bank0
 14904  0A11  0852               	movf	compensate_pressure@calib_data,w
 14905  0A12  3E08               	addlw	8
 14906  0A13  0086               	movwf	6
 14907  0A14  3001               	movlw	1	; select bank2/3
 14908  0A15  0087               	movwf	7
 14909  0A16  3F40               	moviw [0]fsr1
 14910  0A17  00D6               	movwf	??_compensate_pressure
 14911  0A18  3F41               	moviw [1]fsr1
 14912  0A19  00D7               	movwf	??_compensate_pressure+1
 14913  0A1A  0856               	movf	??_compensate_pressure,w
 14914  0A1B  00A0               	movwf	___omul@multiplier
 14915  0A1C  0857               	movf	??_compensate_pressure+1,w
 14916  0A1D  00A1               	movwf	___omul@multiplier+1
 14917  0A1E  0D89               	rlf	9,f
 14918  0A1F  3B89               	subwfb	9,f
 14919  0A20  0989               	comf	9,f
 14920  0A21  00A2               	movwf	___omul@multiplier+2
 14921  0A22  00A3               	movwf	___omul@multiplier+3
 14922  0A23  00A4               	movwf	___omul@multiplier+4
 14923  0A24  00A5               	movwf	___omul@multiplier+5
 14924  0A25  00A6               	movwf	___omul@multiplier+6
 14925  0A26  00A7               	movwf	___omul@multiplier+7
 14926  0A27  0021               	movlb	1	; select bank1
 14927  0A28  085D               	movf	compensate_pressure@var1^(0+128),w
 14928  0A29  0020               	movlb	0	; select bank0
 14929  0A2A  00A8               	movwf	___omul@multiplicand
 14930  0A2B  0021               	movlb	1	; select bank1
 14931  0A2C  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 14932  0A2D  0020               	movlb	0	; select bank0
 14933  0A2E  00A9               	movwf	___omul@multiplicand+1
 14934  0A2F  0021               	movlb	1	; select bank1
 14935  0A30  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 14936  0A31  0020               	movlb	0	; select bank0
 14937  0A32  00AA               	movwf	___omul@multiplicand+2
 14938  0A33  0021               	movlb	1	; select bank1
 14939  0A34  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 14940  0A35  0020               	movlb	0	; select bank0
 14941  0A36  00AB               	movwf	___omul@multiplicand+3
 14942  0A37  0021               	movlb	1	; select bank1
 14943  0A38  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 14944  0A39  0020               	movlb	0	; select bank0
 14945  0A3A  00AC               	movwf	___omul@multiplicand+4
 14946  0A3B  0021               	movlb	1	; select bank1
 14947  0A3C  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 14948  0A3D  0020               	movlb	0	; select bank0
 14949  0A3E  00AD               	movwf	___omul@multiplicand+5
 14950  0A3F  0021               	movlb	1	; select bank1
 14951  0A40  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 14952  0A41  0020               	movlb	0	; select bank0
 14953  0A42  00AE               	movwf	___omul@multiplicand+6
 14954  0A43  0021               	movlb	1	; select bank1
 14955  0A44  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 14956  0A45  0020               	movlb	0	; select bank0
 14957  0A46  00AF               	movwf	___omul@multiplicand+7
 14958  0A47  319F  2771  3188   	fcall	___omul
 14959  0A4A  3020               	movlw	low ?___omul
 14960  0A4B  0086               	movwf	6
 14961  0A4C  3000               	movlw	high ?___omul
 14962  0A4D  0087               	movwf	7
 14963  0A4E  3F40               	moviw [0]fsr1
 14964  0A4F  00D8               	movwf	??_compensate_pressure+2
 14965  0A50  3F41               	moviw [1]fsr1
 14966  0A51  00D9               	movwf	??_compensate_pressure+3
 14967  0A52  3F42               	moviw [2]fsr1
 14968  0A53  00DA               	movwf	??_compensate_pressure+4
 14969  0A54  3F43               	moviw [3]fsr1
 14970  0A55  00DB               	movwf	??_compensate_pressure+5
 14971  0A56  3F44               	moviw [4]fsr1
 14972  0A57  00DC               	movwf	??_compensate_pressure+6
 14973  0A58  3F45               	moviw [5]fsr1
 14974  0A59  00DD               	movwf	??_compensate_pressure+7
 14975  0A5A  3F46               	moviw [6]fsr1
 14976  0A5B  00DE               	movwf	??_compensate_pressure+8
 14977  0A5C  3F47               	moviw [7]fsr1
 14978  0A5D  00DF               	movwf	??_compensate_pressure+9
 14979  0A5E  300C               	movlw	12
 14980  0A5F                     u4335:	
 14981  0A5F  0020               	movlb	0	; select bank0
 14982  0A60  35D8               	lslf	??_compensate_pressure+2,f
 14983  0A61  0DD9               	rlf	??_compensate_pressure+3,f
 14984  0A62  0DDA               	rlf	??_compensate_pressure+4,f
 14985  0A63  0DDB               	rlf	??_compensate_pressure+5,f
 14986  0A64  0DDC               	rlf	??_compensate_pressure+6,f
 14987  0A65  0DDD               	rlf	??_compensate_pressure+7,f
 14988  0A66  0DDE               	rlf	??_compensate_pressure+8,f
 14989  0A67  0DDF               	rlf	??_compensate_pressure+9,f
 14990  0A68  0B89               	decfsz	9,f
 14991  0A69  2A5F               	goto	u4335
 14992  0A6A  3000               	movlw	0
 14993  0A6B  0020               	movlb	0	; select bank0
 14994  0A6C  00BF               	movwf	___aodiv@divisor+7
 14995  0A6D  3000               	movlw	0
 14996  0A6E  00BE               	movwf	___aodiv@divisor+6
 14997  0A6F  3000               	movlw	0
 14998  0A70  00BD               	movwf	___aodiv@divisor+5
 14999  0A71  3000               	movlw	0
 15000  0A72  00BC               	movwf	___aodiv@divisor+4
 15001  0A73  3000               	movlw	0
 15002  0A74  00BB               	movwf	___aodiv@divisor+3
 15003  0A75  3000               	movlw	0
 15004  0A76  00BA               	movwf	___aodiv@divisor+2
 15005  0A77  3001               	movlw	1
 15006  0A78  00B9               	movwf	___aodiv@divisor+1
 15007  0A79  3000               	movlw	0
 15008  0A7A  00B8               	movwf	___aodiv@divisor
 15009  0A7B  0021               	movlb	1	; select bank1
 15010  0A7C  0841               	movf	_compensate_pressure$2533^(0+128),w
 15011  0A7D  0020               	movlb	0	; select bank0
 15012  0A7E  00A0               	movwf	___omul@multiplier
 15013  0A7F  0021               	movlb	1	; select bank1
 15014  0A80  0842               	movf	(_compensate_pressure$2533+1)^(0+128),w
 15015  0A81  0020               	movlb	0	; select bank0
 15016  0A82  00A1               	movwf	___omul@multiplier+1
 15017  0A83  0021               	movlb	1	; select bank1
 15018  0A84  0843               	movf	(_compensate_pressure$2533+2)^(0+128),w
 15019  0A85  0020               	movlb	0	; select bank0
 15020  0A86  00A2               	movwf	___omul@multiplier+2
 15021  0A87  0021               	movlb	1	; select bank1
 15022  0A88  0844               	movf	(_compensate_pressure$2533+3)^(0+128),w
 15023  0A89  0020               	movlb	0	; select bank0
 15024  0A8A  00A3               	movwf	___omul@multiplier+3
 15025  0A8B  0021               	movlb	1	; select bank1
 15026  0A8C  0845               	movf	(_compensate_pressure$2533+4)^(0+128),w
 15027  0A8D  0020               	movlb	0	; select bank0
 15028  0A8E  00A4               	movwf	___omul@multiplier+4
 15029  0A8F  0021               	movlb	1	; select bank1
 15030  0A90  0846               	movf	(_compensate_pressure$2533+5)^(0+128),w
 15031  0A91  0020               	movlb	0	; select bank0
 15032  0A92  00A5               	movwf	___omul@multiplier+5
 15033  0A93  0021               	movlb	1	; select bank1
 15034  0A94  0847               	movf	(_compensate_pressure$2533+6)^(0+128),w
 15035  0A95  0020               	movlb	0	; select bank0
 15036  0A96  00A6               	movwf	___omul@multiplier+6
 15037  0A97  0021               	movlb	1	; select bank1
 15038  0A98  0848               	movf	(_compensate_pressure$2533+7)^(0+128),w
 15039  0A99  0020               	movlb	0	; select bank0
 15040  0A9A  00A7               	movwf	___omul@multiplier+7
 15041  0A9B  0021               	movlb	1	; select bank1
 15042  0A9C  085D               	movf	compensate_pressure@var1^(0+128),w
 15043  0A9D  0020               	movlb	0	; select bank0
 15044  0A9E  00A8               	movwf	___omul@multiplicand
 15045  0A9F  0021               	movlb	1	; select bank1
 15046  0AA0  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 15047  0AA1  0020               	movlb	0	; select bank0
 15048  0AA2  00A9               	movwf	___omul@multiplicand+1
 15049  0AA3  0021               	movlb	1	; select bank1
 15050  0AA4  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 15051  0AA5  0020               	movlb	0	; select bank0
 15052  0AA6  00AA               	movwf	___omul@multiplicand+2
 15053  0AA7  0021               	movlb	1	; select bank1
 15054  0AA8  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 15055  0AA9  0020               	movlb	0	; select bank0
 15056  0AAA  00AB               	movwf	___omul@multiplicand+3
 15057  0AAB  0021               	movlb	1	; select bank1
 15058  0AAC  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 15059  0AAD  0020               	movlb	0	; select bank0
 15060  0AAE  00AC               	movwf	___omul@multiplicand+4
 15061  0AAF  0021               	movlb	1	; select bank1
 15062  0AB0  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 15063  0AB1  0020               	movlb	0	; select bank0
 15064  0AB2  00AD               	movwf	___omul@multiplicand+5
 15065  0AB3  0021               	movlb	1	; select bank1
 15066  0AB4  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 15067  0AB5  0020               	movlb	0	; select bank0
 15068  0AB6  00AE               	movwf	___omul@multiplicand+6
 15069  0AB7  0021               	movlb	1	; select bank1
 15070  0AB8  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 15071  0AB9  0020               	movlb	0	; select bank0
 15072  0ABA  00AF               	movwf	___omul@multiplicand+7
 15073  0ABB  319F  2771  3188   	fcall	___omul
 15074  0ABE  0820               	movf	?___omul,w
 15075  0ABF  00C0               	movwf	___aodiv@dividend
 15076  0AC0  0821               	movf	?___omul+1,w
 15077  0AC1  00C1               	movwf	___aodiv@dividend+1
 15078  0AC2  0822               	movf	?___omul+2,w
 15079  0AC3  00C2               	movwf	___aodiv@dividend+2
 15080  0AC4  0823               	movf	?___omul+3,w
 15081  0AC5  00C3               	movwf	___aodiv@dividend+3
 15082  0AC6  0824               	movf	?___omul+4,w
 15083  0AC7  00C4               	movwf	___aodiv@dividend+4
 15084  0AC8  0825               	movf	?___omul+5,w
 15085  0AC9  00C5               	movwf	___aodiv@dividend+5
 15086  0ACA  0826               	movf	?___omul+6,w
 15087  0ACB  00C6               	movwf	___aodiv@dividend+6
 15088  0ACC  0827               	movf	?___omul+7,w
 15089  0ACD  00C7               	movwf	___aodiv@dividend+7
 15090  0ACE  3197  270B  3188   	fcall	___aodiv
 15091  0AD1  3038               	movlw	low ?___aodiv
 15092  0AD2  0086               	movwf	6
 15093  0AD3  3000               	movlw	high ?___aodiv
 15094  0AD4  0087               	movwf	7
 15095  0AD5  3F40               	moviw [0]fsr1
 15096  0AD6  07D8               	addwf	??_compensate_pressure+2,f
 15097  0AD7  3F41               	moviw [1]fsr1
 15098  0AD8  3DD9               	addwfc	??_compensate_pressure+3,f
 15099  0AD9  3F42               	moviw [2]fsr1
 15100  0ADA  3DDA               	addwfc	??_compensate_pressure+4,f
 15101  0ADB  3F43               	moviw [3]fsr1
 15102  0ADC  3DDB               	addwfc	??_compensate_pressure+5,f
 15103  0ADD  3F44               	moviw [4]fsr1
 15104  0ADE  3DDC               	addwfc	??_compensate_pressure+6,f
 15105  0ADF  3F45               	moviw [5]fsr1
 15106  0AE0  3DDD               	addwfc	??_compensate_pressure+7,f
 15107  0AE1  3F46               	moviw [6]fsr1
 15108  0AE2  3DDE               	addwfc	??_compensate_pressure+8,f
 15109  0AE3  3F47               	moviw [7]fsr1
 15110  0AE4  3DDF               	addwfc	??_compensate_pressure+9,f
 15111  0AE5  085F               	movf	??_compensate_pressure+9,w
 15112  0AE6  0021               	movlb	1	; select bank1
 15113  0AE7  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
 15114  0AE8  0020               	movlb	0	; select bank0
 15115  0AE9  085E               	movf	??_compensate_pressure+8,w
 15116  0AEA  0021               	movlb	1	; select bank1
 15117  0AEB  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
 15118  0AEC  0020               	movlb	0	; select bank0
 15119  0AED  085D               	movf	??_compensate_pressure+7,w
 15120  0AEE  0021               	movlb	1	; select bank1
 15121  0AEF  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
 15122  0AF0  0020               	movlb	0	; select bank0
 15123  0AF1  085C               	movf	??_compensate_pressure+6,w
 15124  0AF2  0021               	movlb	1	; select bank1
 15125  0AF3  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
 15126  0AF4  0020               	movlb	0	; select bank0
 15127  0AF5  085B               	movf	??_compensate_pressure+5,w
 15128  0AF6  0021               	movlb	1	; select bank1
 15129  0AF7  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
 15130  0AF8  0020               	movlb	0	; select bank0
 15131  0AF9  085A               	movf	??_compensate_pressure+4,w
 15132  0AFA  0021               	movlb	1	; select bank1
 15133  0AFB  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
 15134  0AFC  0020               	movlb	0	; select bank0
 15135  0AFD  0859               	movf	??_compensate_pressure+3,w
 15136  0AFE  0021               	movlb	1	; select bank1
 15137  0AFF  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
 15138  0B00  0020               	movlb	0	; select bank0
 15139  0B01  0858               	movf	??_compensate_pressure+2,w
 15140  0B02  0021               	movlb	1	; select bank1
 15141  0B03  00DD               	movwf	compensate_pressure@var1^(0+128)
 15142                           
 15143                           ;BME280_driver/bme280.c: 1176:     var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) 
      +                          / 8589934592;
 15144  0B04  3000               	movlw	0
 15145  0B05  0020               	movlb	0	; select bank0
 15146  0B06  00BF               	movwf	___aodiv@divisor+7
 15147  0B07  3000               	movlw	0
 15148  0B08  00BE               	movwf	___aodiv@divisor+6
 15149  0B09  3000               	movlw	0
 15150  0B0A  00BD               	movwf	___aodiv@divisor+5
 15151  0B0B  3002               	movlw	2
 15152  0B0C  00BC               	movwf	___aodiv@divisor+4
 15153  0B0D  3000               	movlw	0
 15154  0B0E  00BB               	movwf	___aodiv@divisor+3
 15155  0B0F  3000               	movlw	0
 15156  0B10  00BA               	movwf	___aodiv@divisor+2
 15157  0B11  3000               	movlw	0
 15158  0B12  00B9               	movwf	___aodiv@divisor+1
 15159  0B13  3000               	movlw	0
 15160  0B14  00B8               	movwf	___aodiv@divisor
 15161  0B15  3000               	movlw	0
 15162  0B16  00D6               	movwf	??_compensate_pressure
 15163  0B17  3000               	movlw	0
 15164  0B18  00D7               	movwf	??_compensate_pressure+1
 15165  0B19  3000               	movlw	0
 15166  0B1A  00D8               	movwf	??_compensate_pressure+2
 15167  0B1B  3000               	movlw	0
 15168  0B1C  00D9               	movwf	??_compensate_pressure+3
 15169  0B1D  3000               	movlw	0
 15170  0B1E  00DA               	movwf	??_compensate_pressure+4
 15171  0B1F  3080               	movlw	128
 15172  0B20  00DB               	movwf	??_compensate_pressure+5
 15173  0B21  3000               	movlw	0
 15174  0B22  00DC               	movwf	??_compensate_pressure+6
 15175  0B23  3000               	movlw	0
 15176  0B24  00DD               	movwf	??_compensate_pressure+7
 15177  0B25  30DD               	movlw	low compensate_pressure@var1
 15178  0B26  0086               	movwf	6
 15179  0B27  3000               	movlw	high compensate_pressure@var1
 15180  0B28  0087               	movwf	7
 15181  0B29  3F40               	moviw [0]fsr1
 15182  0B2A  07D6               	addwf	??_compensate_pressure,f
 15183  0B2B  3F41               	moviw [1]fsr1
 15184  0B2C  3DD7               	addwfc	??_compensate_pressure+1,f
 15185  0B2D  3F42               	moviw [2]fsr1
 15186  0B2E  3DD8               	addwfc	??_compensate_pressure+2,f
 15187  0B2F  3F43               	moviw [3]fsr1
 15188  0B30  3DD9               	addwfc	??_compensate_pressure+3,f
 15189  0B31  3F44               	moviw [4]fsr1
 15190  0B32  3DDA               	addwfc	??_compensate_pressure+4,f
 15191  0B33  3F45               	moviw [5]fsr1
 15192  0B34  3DDB               	addwfc	??_compensate_pressure+5,f
 15193  0B35  3F46               	moviw [6]fsr1
 15194  0B36  3DDC               	addwfc	??_compensate_pressure+6,f
 15195  0B37  3F47               	moviw [7]fsr1
 15196  0B38  3DDD               	addwfc	??_compensate_pressure+7,f
 15197  0B39  085D               	movf	??_compensate_pressure+7,w
 15198  0B3A  00A7               	movwf	___omul@multiplier+7
 15199  0B3B  085C               	movf	??_compensate_pressure+6,w
 15200  0B3C  00A6               	movwf	___omul@multiplier+6
 15201  0B3D  085B               	movf	??_compensate_pressure+5,w
 15202  0B3E  00A5               	movwf	___omul@multiplier+5
 15203  0B3F  085A               	movf	??_compensate_pressure+4,w
 15204  0B40  00A4               	movwf	___omul@multiplier+4
 15205  0B41  0859               	movf	??_compensate_pressure+3,w
 15206  0B42  00A3               	movwf	___omul@multiplier+3
 15207  0B43  0858               	movf	??_compensate_pressure+2,w
 15208  0B44  00A2               	movwf	___omul@multiplier+2
 15209  0B45  0857               	movf	??_compensate_pressure+1,w
 15210  0B46  00A1               	movwf	___omul@multiplier+1
 15211  0B47  0856               	movf	??_compensate_pressure,w
 15212  0B48  00A0               	movwf	___omul@multiplier
 15213  0B49  0852               	movf	compensate_pressure@calib_data,w
 15214  0B4A  3E06               	addlw	6
 15215  0B4B  0086               	movwf	6
 15216  0B4C  3001               	movlw	1	; select bank2/3
 15217  0B4D  0087               	movwf	7
 15218  0B4E  3F40               	moviw [0]fsr1
 15219  0B4F  00A8               	movwf	___omul@multiplicand
 15220  0B50  3F41               	moviw [1]fsr1
 15221  0B51  00A9               	movwf	___omul@multiplicand+1
 15222  0B52  01AA               	clrf	___omul@multiplicand+2
 15223  0B53  01AB               	clrf	___omul@multiplicand+3
 15224  0B54  01AC               	clrf	___omul@multiplicand+4
 15225  0B55  01AD               	clrf	___omul@multiplicand+5
 15226  0B56  01AE               	clrf	___omul@multiplicand+6
 15227  0B57  01AF               	clrf	___omul@multiplicand+7
 15228  0B58  319F  2771  3188   	fcall	___omul
 15229  0B5B  0820               	movf	?___omul,w
 15230  0B5C  00C0               	movwf	___aodiv@dividend
 15231  0B5D  0821               	movf	?___omul+1,w
 15232  0B5E  00C1               	movwf	___aodiv@dividend+1
 15233  0B5F  0822               	movf	?___omul+2,w
 15234  0B60  00C2               	movwf	___aodiv@dividend+2
 15235  0B61  0823               	movf	?___omul+3,w
 15236  0B62  00C3               	movwf	___aodiv@dividend+3
 15237  0B63  0824               	movf	?___omul+4,w
 15238  0B64  00C4               	movwf	___aodiv@dividend+4
 15239  0B65  0825               	movf	?___omul+5,w
 15240  0B66  00C5               	movwf	___aodiv@dividend+5
 15241  0B67  0826               	movf	?___omul+6,w
 15242  0B68  00C6               	movwf	___aodiv@dividend+6
 15243  0B69  0827               	movf	?___omul+7,w
 15244  0B6A  00C7               	movwf	___aodiv@dividend+7
 15245  0B6B  3197  270B  3188   	fcall	___aodiv
 15246  0B6E  0838               	movf	?___aodiv,w
 15247  0B6F  0021               	movlb	1	; select bank1
 15248  0B70  00DD               	movwf	compensate_pressure@var1^(0+128)
 15249  0B71  0020               	movlb	0	; select bank0
 15250  0B72  0839               	movf	?___aodiv+1,w
 15251  0B73  0021               	movlb	1	; select bank1
 15252  0B74  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
 15253  0B75  0020               	movlb	0	; select bank0
 15254  0B76  083A               	movf	?___aodiv+2,w
 15255  0B77  0021               	movlb	1	; select bank1
 15256  0B78  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
 15257  0B79  0020               	movlb	0	; select bank0
 15258  0B7A  083B               	movf	?___aodiv+3,w
 15259  0B7B  0021               	movlb	1	; select bank1
 15260  0B7C  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
 15261  0B7D  0020               	movlb	0	; select bank0
 15262  0B7E  083C               	movf	?___aodiv+4,w
 15263  0B7F  0021               	movlb	1	; select bank1
 15264  0B80  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
 15265  0B81  0020               	movlb	0	; select bank0
 15266  0B82  083D               	movf	?___aodiv+5,w
 15267  0B83  0021               	movlb	1	; select bank1
 15268  0B84  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
 15269  0B85  0020               	movlb	0	; select bank0
 15270  0B86  083E               	movf	?___aodiv+6,w
 15271  0B87  0021               	movlb	1	; select bank1
 15272  0B88  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
 15273  0B89  0020               	movlb	0	; select bank0
 15274  0B8A  083F               	movf	?___aodiv+7,w
 15275  0B8B  0021               	movlb	1	; select bank1
 15276  0B8C  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
 15277                           
 15278                           ;BME280_driver/bme280.c: 1179:     if (var1 != 0)
 15279  0B8D  085D               	movf	compensate_pressure@var1^(0+128),w
 15280  0B8E  045E               	iorwf	(compensate_pressure@var1+1)^(0+128),w
 15281  0B8F  045F               	iorwf	(compensate_pressure@var1+2)^(0+128),w
 15282  0B90  0460               	iorwf	(compensate_pressure@var1+3)^(0+128),w
 15283  0B91  0461               	iorwf	(compensate_pressure@var1+4)^(0+128),w
 15284  0B92  0462               	iorwf	(compensate_pressure@var1+5)^(0+128),w
 15285  0B93  0463               	iorwf	(compensate_pressure@var1+6)^(0+128),w
 15286  0B94  0464               	iorwf	(compensate_pressure@var1+7)^(0+128),w
 15287  0B95  1903               	skipnz
 15288  0B96  2FD7               	goto	l4378
 15289                           
 15290                           ;BME280_driver/bme280.c: 1180:     {;BME280_driver/bme280.c: 1181:         var4 = 104857
      +                          6 - uncomp_data->pressure;
 15291  0B97  0838               	movf	compensate_pressure@uncomp_data^(0+128),w
 15292  0B98  0086               	movwf	6
 15293  0B99  3001               	movlw	1	; select bank2/3
 15294  0B9A  0087               	movwf	7
 15295  0B9B  3F40               	moviw [0]fsr1
 15296  0B9C  0020               	movlb	0	; select bank0
 15297  0B9D  00D6               	movwf	??_compensate_pressure
 15298  0B9E  3F41               	moviw [1]fsr1
 15299  0B9F  00D7               	movwf	??_compensate_pressure+1
 15300  0BA0  3F42               	moviw [2]fsr1
 15301  0BA1  00D8               	movwf	??_compensate_pressure+2
 15302  0BA2  3F43               	moviw [3]fsr1
 15303  0BA3  00D9               	movwf	??_compensate_pressure+3
 15304  0BA4  3000               	movlw	0
 15305  0BA5  00DA               	movwf	??_compensate_pressure+4
 15306  0BA6  3000               	movlw	0
 15307  0BA7  00DB               	movwf	??_compensate_pressure+5
 15308  0BA8  3010               	movlw	16
 15309  0BA9  00DC               	movwf	??_compensate_pressure+6
 15310  0BAA  3000               	movlw	0
 15311  0BAB  00DD               	movwf	??_compensate_pressure+7
 15312  0BAC  0856               	movf	??_compensate_pressure,w
 15313  0BAD  02DA               	subwf	??_compensate_pressure+4,f
 15314  0BAE  0857               	movf	??_compensate_pressure+1,w
 15315  0BAF  3BDB               	subwfb	??_compensate_pressure+5,f
 15316  0BB0  0858               	movf	??_compensate_pressure+2,w
 15317  0BB1  3BDC               	subwfb	??_compensate_pressure+6,f
 15318  0BB2  0859               	movf	??_compensate_pressure+3,w
 15319  0BB3  3BDD               	subwfb	??_compensate_pressure+7,f
 15320  0BB4  085A               	movf	??_compensate_pressure+4,w
 15321  0BB5  00DE               	movwf	??_compensate_pressure+8
 15322  0BB6  085B               	movf	??_compensate_pressure+5,w
 15323  0BB7  00DF               	movwf	??_compensate_pressure+9
 15324  0BB8  085C               	movf	??_compensate_pressure+6,w
 15325  0BB9  00E0               	movwf	??_compensate_pressure+10
 15326  0BBA  085D               	movf	??_compensate_pressure+7,w
 15327  0BBB  00E1               	movwf	??_compensate_pressure+11
 15328  0BBC  01E2               	clrf	??_compensate_pressure+12
 15329  0BBD  01E3               	clrf	??_compensate_pressure+13
 15330  0BBE  01E4               	clrf	??_compensate_pressure+14
 15331  0BBF  01E5               	clrf	??_compensate_pressure+15
 15332  0BC0  0865               	movf	??_compensate_pressure+15,w
 15333  0BC1  0021               	movlb	1	; select bank1
 15334  0BC2  00DC               	movwf	(compensate_pressure@var4+7)^(0+128)
 15335  0BC3  0020               	movlb	0	; select bank0
 15336  0BC4  0864               	movf	??_compensate_pressure+14,w
 15337  0BC5  0021               	movlb	1	; select bank1
 15338  0BC6  00DB               	movwf	(compensate_pressure@var4+6)^(0+128)
 15339  0BC7  0020               	movlb	0	; select bank0
 15340  0BC8  0863               	movf	??_compensate_pressure+13,w
 15341  0BC9  0021               	movlb	1	; select bank1
 15342  0BCA  00DA               	movwf	(compensate_pressure@var4+5)^(0+128)
 15343  0BCB  0020               	movlb	0	; select bank0
 15344  0BCC  0862               	movf	??_compensate_pressure+12,w
 15345  0BCD  0021               	movlb	1	; select bank1
 15346  0BCE  00D9               	movwf	(compensate_pressure@var4+4)^(0+128)
 15347  0BCF  0020               	movlb	0	; select bank0
 15348  0BD0  0861               	movf	??_compensate_pressure+11,w
 15349  0BD1  0021               	movlb	1	; select bank1
 15350  0BD2  00D8               	movwf	(compensate_pressure@var4+3)^(0+128)
 15351  0BD3  0020               	movlb	0	; select bank0
 15352  0BD4  0860               	movf	??_compensate_pressure+10,w
 15353  0BD5  0021               	movlb	1	; select bank1
 15354  0BD6  00D7               	movwf	(compensate_pressure@var4+2)^(0+128)
 15355  0BD7  0020               	movlb	0	; select bank0
 15356  0BD8  085F               	movf	??_compensate_pressure+9,w
 15357  0BD9  0021               	movlb	1	; select bank1
 15358  0BDA  00D6               	movwf	(compensate_pressure@var4+1)^(0+128)
 15359  0BDB  0020               	movlb	0	; select bank0
 15360  0BDC  085E               	movf	??_compensate_pressure+8,w
 15361  0BDD  0021               	movlb	1	; select bank1
 15362  0BDE  00D5               	movwf	compensate_pressure@var4^(0+128)
 15363                           
 15364                           ;BME280_driver/bme280.c: 1182:         var4 = (((var4 * 2147483648LL) - var2) * 3125) / 
      +                          var1;
 15365  0BDF  085D               	movf	compensate_pressure@var1^(0+128),w
 15366  0BE0  0020               	movlb	0	; select bank0
 15367  0BE1  00B8               	movwf	___aodiv@divisor
 15368  0BE2  0021               	movlb	1	; select bank1
 15369  0BE3  085E               	movf	(compensate_pressure@var1+1)^(0+128),w
 15370  0BE4  0020               	movlb	0	; select bank0
 15371  0BE5  00B9               	movwf	___aodiv@divisor+1
 15372  0BE6  0021               	movlb	1	; select bank1
 15373  0BE7  085F               	movf	(compensate_pressure@var1+2)^(0+128),w
 15374  0BE8  0020               	movlb	0	; select bank0
 15375  0BE9  00BA               	movwf	___aodiv@divisor+2
 15376  0BEA  0021               	movlb	1	; select bank1
 15377  0BEB  0860               	movf	(compensate_pressure@var1+3)^(0+128),w
 15378  0BEC  0020               	movlb	0	; select bank0
 15379  0BED  00BB               	movwf	___aodiv@divisor+3
 15380  0BEE  0021               	movlb	1	; select bank1
 15381  0BEF  0861               	movf	(compensate_pressure@var1+4)^(0+128),w
 15382  0BF0  0020               	movlb	0	; select bank0
 15383  0BF1  00BC               	movwf	___aodiv@divisor+4
 15384  0BF2  0021               	movlb	1	; select bank1
 15385  0BF3  0862               	movf	(compensate_pressure@var1+5)^(0+128),w
 15386  0BF4  0020               	movlb	0	; select bank0
 15387  0BF5  00BD               	movwf	___aodiv@divisor+5
 15388  0BF6  0021               	movlb	1	; select bank1
 15389  0BF7  0863               	movf	(compensate_pressure@var1+6)^(0+128),w
 15390  0BF8  0020               	movlb	0	; select bank0
 15391  0BF9  00BE               	movwf	___aodiv@divisor+6
 15392  0BFA  0021               	movlb	1	; select bank1
 15393  0BFB  0864               	movf	(compensate_pressure@var1+7)^(0+128),w
 15394  0BFC  0020               	movlb	0	; select bank0
 15395  0BFD  00BF               	movwf	___aodiv@divisor+7
 15396  0BFE  30D5               	movlw	low compensate_pressure@var4
 15397  0BFF  0086               	movwf	6
 15398  0C00  3000               	movlw	high compensate_pressure@var4
 15399  0C01  0087               	movwf	7
 15400  0C02  3F40               	moviw [0]fsr1
 15401  0C03  00D6               	movwf	??_compensate_pressure
 15402  0C04  3F41               	moviw [1]fsr1
 15403  0C05  00D7               	movwf	??_compensate_pressure+1
 15404  0C06  3F42               	moviw [2]fsr1
 15405  0C07  00D8               	movwf	??_compensate_pressure+2
 15406  0C08  3F43               	moviw [3]fsr1
 15407  0C09  00D9               	movwf	??_compensate_pressure+3
 15408  0C0A  3F44               	moviw [4]fsr1
 15409  0C0B  00DA               	movwf	??_compensate_pressure+4
 15410  0C0C  3F45               	moviw [5]fsr1
 15411  0C0D  00DB               	movwf	??_compensate_pressure+5
 15412  0C0E  3F46               	moviw [6]fsr1
 15413  0C0F  00DC               	movwf	??_compensate_pressure+6
 15414  0C10  3F47               	moviw [7]fsr1
 15415  0C11  00DD               	movwf	??_compensate_pressure+7
 15416  0C12  301F               	movlw	31
 15417  0C13                     u4355:	
 15418  0C13  0020               	movlb	0	; select bank0
 15419  0C14  35D6               	lslf	??_compensate_pressure,f
 15420  0C15  0DD7               	rlf	??_compensate_pressure+1,f
 15421  0C16  0DD8               	rlf	??_compensate_pressure+2,f
 15422  0C17  0DD9               	rlf	??_compensate_pressure+3,f
 15423  0C18  0DDA               	rlf	??_compensate_pressure+4,f
 15424  0C19  0DDB               	rlf	??_compensate_pressure+5,f
 15425  0C1A  0DDC               	rlf	??_compensate_pressure+6,f
 15426  0C1B  0DDD               	rlf	??_compensate_pressure+7,f
 15427  0C1C  0B89               	decfsz	9,f
 15428  0C1D  2C13               	goto	u4355
 15429  0C1E  0021               	movlb	1	; select bank1
 15430  0C1F  084D               	movf	compensate_pressure@var2^(0+128),w
 15431  0C20  0020               	movlb	0	; select bank0
 15432  0C21  02D6               	subwf	??_compensate_pressure,f
 15433  0C22  0021               	movlb	1	; select bank1
 15434  0C23  084E               	movf	(compensate_pressure@var2+1)^(0+128),w
 15435  0C24  0020               	movlb	0	; select bank0
 15436  0C25  3BD7               	subwfb	??_compensate_pressure+1,f
 15437  0C26  0021               	movlb	1	; select bank1
 15438  0C27  084F               	movf	(compensate_pressure@var2+2)^(0+128),w
 15439  0C28  0020               	movlb	0	; select bank0
 15440  0C29  3BD8               	subwfb	??_compensate_pressure+2,f
 15441  0C2A  0021               	movlb	1	; select bank1
 15442  0C2B  0850               	movf	(compensate_pressure@var2+3)^(0+128),w
 15443  0C2C  0020               	movlb	0	; select bank0
 15444  0C2D  3BD9               	subwfb	??_compensate_pressure+3,f
 15445  0C2E  0021               	movlb	1	; select bank1
 15446  0C2F  0851               	movf	(compensate_pressure@var2+4)^(0+128),w
 15447  0C30  0020               	movlb	0	; select bank0
 15448  0C31  3BDA               	subwfb	??_compensate_pressure+4,f
 15449  0C32  0021               	movlb	1	; select bank1
 15450  0C33  0852               	movf	(compensate_pressure@var2+5)^(0+128),w
 15451  0C34  0020               	movlb	0	; select bank0
 15452  0C35  3BDB               	subwfb	??_compensate_pressure+5,f
 15453  0C36  0021               	movlb	1	; select bank1
 15454  0C37  0853               	movf	(compensate_pressure@var2+6)^(0+128),w
 15455  0C38  0020               	movlb	0	; select bank0
 15456  0C39  3BDC               	subwfb	??_compensate_pressure+6,f
 15457  0C3A  0021               	movlb	1	; select bank1
 15458  0C3B  0854               	movf	(compensate_pressure@var2+7)^(0+128),w
 15459  0C3C  0020               	movlb	0	; select bank0
 15460  0C3D  3BDD               	subwfb	??_compensate_pressure+7,f
 15461  0C3E  085D               	movf	??_compensate_pressure+7,w
 15462  0C3F  00A7               	movwf	___omul@multiplier+7
 15463  0C40  085C               	movf	??_compensate_pressure+6,w
 15464  0C41  00A6               	movwf	___omul@multiplier+6
 15465  0C42  085B               	movf	??_compensate_pressure+5,w
 15466  0C43  00A5               	movwf	___omul@multiplier+5
 15467  0C44  085A               	movf	??_compensate_pressure+4,w
 15468  0C45  00A4               	movwf	___omul@multiplier+4
 15469  0C46  0859               	movf	??_compensate_pressure+3,w
 15470  0C47  00A3               	movwf	___omul@multiplier+3
 15471  0C48  0858               	movf	??_compensate_pressure+2,w
 15472  0C49  00A2               	movwf	___omul@multiplier+2
 15473  0C4A  0857               	movf	??_compensate_pressure+1,w
 15474  0C4B  00A1               	movwf	___omul@multiplier+1
 15475  0C4C  0856               	movf	??_compensate_pressure,w
 15476  0C4D  00A0               	movwf	___omul@multiplier
 15477  0C4E  3000               	movlw	0
 15478  0C4F  00AF               	movwf	___omul@multiplicand+7
 15479  0C50  3000               	movlw	0
 15480  0C51  00AE               	movwf	___omul@multiplicand+6
 15481  0C52  3000               	movlw	0
 15482  0C53  00AD               	movwf	___omul@multiplicand+5
 15483  0C54  3000               	movlw	0
 15484  0C55  00AC               	movwf	___omul@multiplicand+4
 15485  0C56  3000               	movlw	0
 15486  0C57  00AB               	movwf	___omul@multiplicand+3
 15487  0C58  3000               	movlw	0
 15488  0C59  00AA               	movwf	___omul@multiplicand+2
 15489  0C5A  300C               	movlw	12
 15490  0C5B  00A9               	movwf	___omul@multiplicand+1
 15491  0C5C  3035               	movlw	53
 15492  0C5D  00A8               	movwf	___omul@multiplicand
 15493  0C5E  319F  2771  3188   	fcall	___omul
 15494  0C61  0820               	movf	?___omul,w
 15495  0C62  00C0               	movwf	___aodiv@dividend
 15496  0C63  0821               	movf	?___omul+1,w
 15497  0C64  00C1               	movwf	___aodiv@dividend+1
 15498  0C65  0822               	movf	?___omul+2,w
 15499  0C66  00C2               	movwf	___aodiv@dividend+2
 15500  0C67  0823               	movf	?___omul+3,w
 15501  0C68  00C3               	movwf	___aodiv@dividend+3
 15502  0C69  0824               	movf	?___omul+4,w
 15503  0C6A  00C4               	movwf	___aodiv@dividend+4
 15504  0C6B  0825               	movf	?___omul+5,w
 15505  0C6C  00C5               	movwf	___aodiv@dividend+5
 15506  0C6D  0826               	movf	?___omul+6,w
 15507  0C6E  00C6               	movwf	___aodiv@dividend+6
 15508  0C6F  0827               	movf	?___omul+7,w
 15509  0C70  00C7               	movwf	___aodiv@dividend+7
 15510  0C71  3197  270B  3188   	fcall	___aodiv
 15511  0C74  0838               	movf	?___aodiv,w
 15512  0C75  0021               	movlb	1	; select bank1
 15513  0C76  00D5               	movwf	compensate_pressure@var4^(0+128)
 15514  0C77  0020               	movlb	0	; select bank0
 15515  0C78  0839               	movf	?___aodiv+1,w
 15516  0C79  0021               	movlb	1	; select bank1
 15517  0C7A  00D6               	movwf	(compensate_pressure@var4+1)^(0+128)
 15518  0C7B  0020               	movlb	0	; select bank0
 15519  0C7C  083A               	movf	?___aodiv+2,w
 15520  0C7D  0021               	movlb	1	; select bank1
 15521  0C7E  00D7               	movwf	(compensate_pressure@var4+2)^(0+128)
 15522  0C7F  0020               	movlb	0	; select bank0
 15523  0C80  083B               	movf	?___aodiv+3,w
 15524  0C81  0021               	movlb	1	; select bank1
 15525  0C82  00D8               	movwf	(compensate_pressure@var4+3)^(0+128)
 15526  0C83  0020               	movlb	0	; select bank0
 15527  0C84  083C               	movf	?___aodiv+4,w
 15528  0C85  0021               	movlb	1	; select bank1
 15529  0C86  00D9               	movwf	(compensate_pressure@var4+4)^(0+128)
 15530  0C87  0020               	movlb	0	; select bank0
 15531  0C88  083D               	movf	?___aodiv+5,w
 15532  0C89  0021               	movlb	1	; select bank1
 15533  0C8A  00DA               	movwf	(compensate_pressure@var4+5)^(0+128)
 15534  0C8B  0020               	movlb	0	; select bank0
 15535  0C8C  083E               	movf	?___aodiv+6,w
 15536  0C8D  0021               	movlb	1	; select bank1
 15537  0C8E  00DB               	movwf	(compensate_pressure@var4+6)^(0+128)
 15538  0C8F  0020               	movlb	0	; select bank0
 15539  0C90  083F               	movf	?___aodiv+7,w
 15540  0C91  0021               	movlb	1	; select bank1
 15541  0C92  00DC               	movwf	(compensate_pressure@var4+7)^(0+128)
 15542                           
 15543                           ;BME280_driver/bme280.c: 1183:         var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8
      +                          192) * (var4 / 8192)) / 33554432;
 15544  0C93  0020               	movlb	0	; select bank0
 15545  0C94  0852               	movf	compensate_pressure@calib_data,w
 15546  0C95  3E16               	addlw	22
 15547  0C96  0086               	movwf	6
 15548  0C97  3001               	movlw	1	; select bank2/3
 15549  0C98  0087               	movwf	7
 15550  0C99  3F40               	moviw [0]fsr1
 15551  0C9A  00D6               	movwf	??_compensate_pressure
 15552  0C9B  3F41               	moviw [1]fsr1
 15553  0C9C  00D7               	movwf	??_compensate_pressure+1
 15554  0C9D  0856               	movf	??_compensate_pressure,w
 15555  0C9E  00A0               	movwf	___omul@multiplier
 15556  0C9F  0857               	movf	??_compensate_pressure+1,w
 15557  0CA0  00A1               	movwf	___omul@multiplier+1
 15558  0CA1  0D89               	rlf	9,f
 15559  0CA2  3B89               	subwfb	9,f
 15560  0CA3  0989               	comf	9,f
 15561  0CA4  00A2               	movwf	___omul@multiplier+2
 15562  0CA5  00A3               	movwf	___omul@multiplier+3
 15563  0CA6  00A4               	movwf	___omul@multiplier+4
 15564  0CA7  00A5               	movwf	___omul@multiplier+5
 15565  0CA8  00A6               	movwf	___omul@multiplier+6
 15566  0CA9  00A7               	movwf	___omul@multiplier+7
 15567  0CAA  3000               	movlw	0
 15568  0CAB  00BF               	movwf	___aodiv@divisor+7
 15569  0CAC  3000               	movlw	0
 15570  0CAD  00BE               	movwf	___aodiv@divisor+6
 15571  0CAE  3000               	movlw	0
 15572  0CAF  00BD               	movwf	___aodiv@divisor+5
 15573  0CB0  3000               	movlw	0
 15574  0CB1  00BC               	movwf	___aodiv@divisor+4
 15575  0CB2  3000               	movlw	0
 15576  0CB3  00BB               	movwf	___aodiv@divisor+3
 15577  0CB4  3000               	movlw	0
 15578  0CB5  00BA               	movwf	___aodiv@divisor+2
 15579  0CB6  3020               	movlw	32
 15580  0CB7  00B9               	movwf	___aodiv@divisor+1
 15581  0CB8  3000               	movlw	0
 15582  0CB9  00B8               	movwf	___aodiv@divisor
 15583  0CBA  0021               	movlb	1	; select bank1
 15584  0CBB  0855               	movf	compensate_pressure@var4^(0+128),w
 15585  0CBC  0020               	movlb	0	; select bank0
 15586  0CBD  00C0               	movwf	___aodiv@dividend
 15587  0CBE  0021               	movlb	1	; select bank1
 15588  0CBF  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 15589  0CC0  0020               	movlb	0	; select bank0
 15590  0CC1  00C1               	movwf	___aodiv@dividend+1
 15591  0CC2  0021               	movlb	1	; select bank1
 15592  0CC3  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 15593  0CC4  0020               	movlb	0	; select bank0
 15594  0CC5  00C2               	movwf	___aodiv@dividend+2
 15595  0CC6  0021               	movlb	1	; select bank1
 15596  0CC7  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 15597  0CC8  0020               	movlb	0	; select bank0
 15598  0CC9  00C3               	movwf	___aodiv@dividend+3
 15599  0CCA  0021               	movlb	1	; select bank1
 15600  0CCB  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 15601  0CCC  0020               	movlb	0	; select bank0
 15602  0CCD  00C4               	movwf	___aodiv@dividend+4
 15603  0CCE  0021               	movlb	1	; select bank1
 15604  0CCF  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 15605  0CD0  0020               	movlb	0	; select bank0
 15606  0CD1  00C5               	movwf	___aodiv@dividend+5
 15607  0CD2  0021               	movlb	1	; select bank1
 15608  0CD3  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 15609  0CD4  0020               	movlb	0	; select bank0
 15610  0CD5  00C6               	movwf	___aodiv@dividend+6
 15611  0CD6  0021               	movlb	1	; select bank1
 15612  0CD7  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 15613  0CD8  0020               	movlb	0	; select bank0
 15614  0CD9  00C7               	movwf	___aodiv@dividend+7
 15615  0CDA  3197  270B  3188   	fcall	___aodiv
 15616  0CDD  0838               	movf	?___aodiv,w
 15617  0CDE  00A8               	movwf	___omul@multiplicand
 15618  0CDF  0839               	movf	?___aodiv+1,w
 15619  0CE0  00A9               	movwf	___omul@multiplicand+1
 15620  0CE1  083A               	movf	?___aodiv+2,w
 15621  0CE2  00AA               	movwf	___omul@multiplicand+2
 15622  0CE3  083B               	movf	?___aodiv+3,w
 15623  0CE4  00AB               	movwf	___omul@multiplicand+3
 15624  0CE5  083C               	movf	?___aodiv+4,w
 15625  0CE6  00AC               	movwf	___omul@multiplicand+4
 15626  0CE7  083D               	movf	?___aodiv+5,w
 15627  0CE8  00AD               	movwf	___omul@multiplicand+5
 15628  0CE9  083E               	movf	?___aodiv+6,w
 15629  0CEA  00AE               	movwf	___omul@multiplicand+6
 15630  0CEB  083F               	movf	?___aodiv+7,w
 15631  0CEC  00AF               	movwf	___omul@multiplicand+7
 15632  0CED  319F  2771  3188   	fcall	___omul
 15633  0CF0  0820               	movf	?___omul,w
 15634  0CF1  0021               	movlb	1	; select bank1
 15635  0CF2  00C1               	movwf	_compensate_pressure$2533^(0+128)
 15636  0CF3  0020               	movlb	0	; select bank0
 15637  0CF4  0821               	movf	?___omul+1,w
 15638  0CF5  0021               	movlb	1	; select bank1
 15639  0CF6  00C2               	movwf	(_compensate_pressure$2533+1)^(0+128)
 15640  0CF7  0020               	movlb	0	; select bank0
 15641  0CF8  0822               	movf	?___omul+2,w
 15642  0CF9  0021               	movlb	1	; select bank1
 15643  0CFA  00C3               	movwf	(_compensate_pressure$2533+2)^(0+128)
 15644  0CFB  0020               	movlb	0	; select bank0
 15645  0CFC  0823               	movf	?___omul+3,w
 15646  0CFD  0021               	movlb	1	; select bank1
 15647  0CFE  00C4               	movwf	(_compensate_pressure$2533+3)^(0+128)
 15648  0CFF  0020               	movlb	0	; select bank0
 15649  0D00  0824               	movf	?___omul+4,w
 15650  0D01  0021               	movlb	1	; select bank1
 15651  0D02  00C5               	movwf	(_compensate_pressure$2533+4)^(0+128)
 15652  0D03  0020               	movlb	0	; select bank0
 15653  0D04  0825               	movf	?___omul+5,w
 15654  0D05  0021               	movlb	1	; select bank1
 15655  0D06  00C6               	movwf	(_compensate_pressure$2533+5)^(0+128)
 15656  0D07  0020               	movlb	0	; select bank0
 15657  0D08  0826               	movf	?___omul+6,w
 15658  0D09  0021               	movlb	1	; select bank1
 15659  0D0A  00C7               	movwf	(_compensate_pressure$2533+6)^(0+128)
 15660  0D0B  0020               	movlb	0	; select bank0
 15661  0D0C  0827               	movf	?___omul+7,w
 15662  0D0D  0021               	movlb	1	; select bank1
 15663  0D0E  00C8               	movwf	(_compensate_pressure$2533+7)^(0+128)
 15664                           
 15665                           ;BME280_driver/bme280.c: 1183:         var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8
      +                          192) * (var4 / 8192)) / 33554432;
 15666  0D0F  0841               	movf	_compensate_pressure$2533^(0+128),w
 15667  0D10  0020               	movlb	0	; select bank0
 15668  0D11  00A0               	movwf	___omul@multiplier
 15669  0D12  0021               	movlb	1	; select bank1
 15670  0D13  0842               	movf	(_compensate_pressure$2533+1)^(0+128),w
 15671  0D14  0020               	movlb	0	; select bank0
 15672  0D15  00A1               	movwf	___omul@multiplier+1
 15673  0D16  0021               	movlb	1	; select bank1
 15674  0D17  0843               	movf	(_compensate_pressure$2533+2)^(0+128),w
 15675  0D18  0020               	movlb	0	; select bank0
 15676  0D19  00A2               	movwf	___omul@multiplier+2
 15677  0D1A  0021               	movlb	1	; select bank1
 15678  0D1B  0844               	movf	(_compensate_pressure$2533+3)^(0+128),w
 15679  0D1C  0020               	movlb	0	; select bank0
 15680  0D1D  00A3               	movwf	___omul@multiplier+3
 15681  0D1E  0021               	movlb	1	; select bank1
 15682  0D1F  0845               	movf	(_compensate_pressure$2533+4)^(0+128),w
 15683  0D20  0020               	movlb	0	; select bank0
 15684  0D21  00A4               	movwf	___omul@multiplier+4
 15685  0D22  0021               	movlb	1	; select bank1
 15686  0D23  0846               	movf	(_compensate_pressure$2533+5)^(0+128),w
 15687  0D24  0020               	movlb	0	; select bank0
 15688  0D25  00A5               	movwf	___omul@multiplier+5
 15689  0D26  0021               	movlb	1	; select bank1
 15690  0D27  0847               	movf	(_compensate_pressure$2533+6)^(0+128),w
 15691  0D28  0020               	movlb	0	; select bank0
 15692  0D29  00A6               	movwf	___omul@multiplier+6
 15693  0D2A  0021               	movlb	1	; select bank1
 15694  0D2B  0848               	movf	(_compensate_pressure$2533+7)^(0+128),w
 15695  0D2C  0020               	movlb	0	; select bank0
 15696  0D2D  00A7               	movwf	___omul@multiplier+7
 15697  0D2E  3000               	movlw	0
 15698  0D2F  00BF               	movwf	___aodiv@divisor+7
 15699  0D30  3000               	movlw	0
 15700  0D31  00BE               	movwf	___aodiv@divisor+6
 15701  0D32  3000               	movlw	0
 15702  0D33  00BD               	movwf	___aodiv@divisor+5
 15703  0D34  3000               	movlw	0
 15704  0D35  00BC               	movwf	___aodiv@divisor+4
 15705  0D36  3000               	movlw	0
 15706  0D37  00BB               	movwf	___aodiv@divisor+3
 15707  0D38  3000               	movlw	0
 15708  0D39  00BA               	movwf	___aodiv@divisor+2
 15709  0D3A  3020               	movlw	32
 15710  0D3B  00B9               	movwf	___aodiv@divisor+1
 15711  0D3C  3000               	movlw	0
 15712  0D3D  00B8               	movwf	___aodiv@divisor
 15713  0D3E  0021               	movlb	1	; select bank1
 15714  0D3F  0855               	movf	compensate_pressure@var4^(0+128),w
 15715  0D40  0020               	movlb	0	; select bank0
 15716  0D41  00C0               	movwf	___aodiv@dividend
 15717  0D42  0021               	movlb	1	; select bank1
 15718  0D43  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 15719  0D44  0020               	movlb	0	; select bank0
 15720  0D45  00C1               	movwf	___aodiv@dividend+1
 15721  0D46  0021               	movlb	1	; select bank1
 15722  0D47  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 15723  0D48  0020               	movlb	0	; select bank0
 15724  0D49  00C2               	movwf	___aodiv@dividend+2
 15725  0D4A  0021               	movlb	1	; select bank1
 15726  0D4B  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 15727  0D4C  0020               	movlb	0	; select bank0
 15728  0D4D  00C3               	movwf	___aodiv@dividend+3
 15729  0D4E  0021               	movlb	1	; select bank1
 15730  0D4F  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 15731  0D50  0020               	movlb	0	; select bank0
 15732  0D51  00C4               	movwf	___aodiv@dividend+4
 15733  0D52  0021               	movlb	1	; select bank1
 15734  0D53  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 15735  0D54  0020               	movlb	0	; select bank0
 15736  0D55  00C5               	movwf	___aodiv@dividend+5
 15737  0D56  0021               	movlb	1	; select bank1
 15738  0D57  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 15739  0D58  0020               	movlb	0	; select bank0
 15740  0D59  00C6               	movwf	___aodiv@dividend+6
 15741  0D5A  0021               	movlb	1	; select bank1
 15742  0D5B  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 15743  0D5C  0020               	movlb	0	; select bank0
 15744  0D5D  00C7               	movwf	___aodiv@dividend+7
 15745  0D5E  3197  270B  3188   	fcall	___aodiv
 15746  0D61  0838               	movf	?___aodiv,w
 15747  0D62  00A8               	movwf	___omul@multiplicand
 15748  0D63  0839               	movf	?___aodiv+1,w
 15749  0D64  00A9               	movwf	___omul@multiplicand+1
 15750  0D65  083A               	movf	?___aodiv+2,w
 15751  0D66  00AA               	movwf	___omul@multiplicand+2
 15752  0D67  083B               	movf	?___aodiv+3,w
 15753  0D68  00AB               	movwf	___omul@multiplicand+3
 15754  0D69  083C               	movf	?___aodiv+4,w
 15755  0D6A  00AC               	movwf	___omul@multiplicand+4
 15756  0D6B  083D               	movf	?___aodiv+5,w
 15757  0D6C  00AD               	movwf	___omul@multiplicand+5
 15758  0D6D  083E               	movf	?___aodiv+6,w
 15759  0D6E  00AE               	movwf	___omul@multiplicand+6
 15760  0D6F  083F               	movf	?___aodiv+7,w
 15761  0D70  00AF               	movwf	___omul@multiplicand+7
 15762  0D71  319F  2771  3188   	fcall	___omul
 15763  0D74  0820               	movf	?___omul,w
 15764  0D75  0021               	movlb	1	; select bank1
 15765  0D76  00A8               	movwf	_compensate_pressure$2534^(0+128)
 15766  0D77  0020               	movlb	0	; select bank0
 15767  0D78  0821               	movf	?___omul+1,w
 15768  0D79  0021               	movlb	1	; select bank1
 15769  0D7A  00A9               	movwf	(_compensate_pressure$2534+1)^(0+128)
 15770  0D7B  0020               	movlb	0	; select bank0
 15771  0D7C  0822               	movf	?___omul+2,w
 15772  0D7D  0021               	movlb	1	; select bank1
 15773  0D7E  00AA               	movwf	(_compensate_pressure$2534+2)^(0+128)
 15774  0D7F  0020               	movlb	0	; select bank0
 15775  0D80  0823               	movf	?___omul+3,w
 15776  0D81  0021               	movlb	1	; select bank1
 15777  0D82  00AB               	movwf	(_compensate_pressure$2534+3)^(0+128)
 15778  0D83  0020               	movlb	0	; select bank0
 15779  0D84  0824               	movf	?___omul+4,w
 15780  0D85  0021               	movlb	1	; select bank1
 15781  0D86  00AC               	movwf	(_compensate_pressure$2534+4)^(0+128)
 15782  0D87  0020               	movlb	0	; select bank0
 15783  0D88  0825               	movf	?___omul+5,w
 15784  0D89  0021               	movlb	1	; select bank1
 15785  0D8A  00AD               	movwf	(_compensate_pressure$2534+5)^(0+128)
 15786  0D8B  0020               	movlb	0	; select bank0
 15787  0D8C  0826               	movf	?___omul+6,w
 15788  0D8D  0021               	movlb	1	; select bank1
 15789  0D8E  00AE               	movwf	(_compensate_pressure$2534+6)^(0+128)
 15790  0D8F  0020               	movlb	0	; select bank0
 15791  0D90  0827               	movf	?___omul+7,w
 15792  0D91  0021               	movlb	1	; select bank1
 15793  0D92  00AF               	movwf	(_compensate_pressure$2534+7)^(0+128)
 15794                           
 15795                           ;BME280_driver/bme280.c: 1183:         var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8
      +                          192) * (var4 / 8192)) / 33554432;
 15796  0D93  3000               	movlw	0
 15797  0D94  0020               	movlb	0	; select bank0
 15798  0D95  00BF               	movwf	___aodiv@divisor+7
 15799  0D96  3000               	movlw	0
 15800  0D97  00BE               	movwf	___aodiv@divisor+6
 15801  0D98  3000               	movlw	0
 15802  0D99  00BD               	movwf	___aodiv@divisor+5
 15803  0D9A  3000               	movlw	0
 15804  0D9B  00BC               	movwf	___aodiv@divisor+4
 15805  0D9C  3002               	movlw	2
 15806  0D9D  00BB               	movwf	___aodiv@divisor+3
 15807  0D9E  3000               	movlw	0
 15808  0D9F  00BA               	movwf	___aodiv@divisor+2
 15809  0DA0  3000               	movlw	0
 15810  0DA1  00B9               	movwf	___aodiv@divisor+1
 15811  0DA2  3000               	movlw	0
 15812  0DA3  00B8               	movwf	___aodiv@divisor
 15813  0DA4  0021               	movlb	1	; select bank1
 15814  0DA5  0828               	movf	_compensate_pressure$2534^(0+128),w
 15815  0DA6  0020               	movlb	0	; select bank0
 15816  0DA7  00C0               	movwf	___aodiv@dividend
 15817  0DA8  0021               	movlb	1	; select bank1
 15818  0DA9  0829               	movf	(_compensate_pressure$2534+1)^(0+128),w
 15819  0DAA  0020               	movlb	0	; select bank0
 15820  0DAB  00C1               	movwf	___aodiv@dividend+1
 15821  0DAC  0021               	movlb	1	; select bank1
 15822  0DAD  082A               	movf	(_compensate_pressure$2534+2)^(0+128),w
 15823  0DAE  0020               	movlb	0	; select bank0
 15824  0DAF  00C2               	movwf	___aodiv@dividend+2
 15825  0DB0  0021               	movlb	1	; select bank1
 15826  0DB1  082B               	movf	(_compensate_pressure$2534+3)^(0+128),w
 15827  0DB2  0020               	movlb	0	; select bank0
 15828  0DB3  00C3               	movwf	___aodiv@dividend+3
 15829  0DB4  0021               	movlb	1	; select bank1
 15830  0DB5  082C               	movf	(_compensate_pressure$2534+4)^(0+128),w
 15831  0DB6  0020               	movlb	0	; select bank0
 15832  0DB7  00C4               	movwf	___aodiv@dividend+4
 15833  0DB8  0021               	movlb	1	; select bank1
 15834  0DB9  082D               	movf	(_compensate_pressure$2534+5)^(0+128),w
 15835  0DBA  0020               	movlb	0	; select bank0
 15836  0DBB  00C5               	movwf	___aodiv@dividend+5
 15837  0DBC  0021               	movlb	1	; select bank1
 15838  0DBD  082E               	movf	(_compensate_pressure$2534+6)^(0+128),w
 15839  0DBE  0020               	movlb	0	; select bank0
 15840  0DBF  00C6               	movwf	___aodiv@dividend+6
 15841  0DC0  0021               	movlb	1	; select bank1
 15842  0DC1  082F               	movf	(_compensate_pressure$2534+7)^(0+128),w
 15843  0DC2  0020               	movlb	0	; select bank0
 15844  0DC3  00C7               	movwf	___aodiv@dividend+7
 15845  0DC4  3197  270B  3188   	fcall	___aodiv
 15846  0DC7  0838               	movf	?___aodiv,w
 15847  0DC8  0021               	movlb	1	; select bank1
 15848  0DC9  00DD               	movwf	compensate_pressure@var1^(0+128)
 15849  0DCA  0020               	movlb	0	; select bank0
 15850  0DCB  0839               	movf	?___aodiv+1,w
 15851  0DCC  0021               	movlb	1	; select bank1
 15852  0DCD  00DE               	movwf	(compensate_pressure@var1+1)^(0+128)
 15853  0DCE  0020               	movlb	0	; select bank0
 15854  0DCF  083A               	movf	?___aodiv+2,w
 15855  0DD0  0021               	movlb	1	; select bank1
 15856  0DD1  00DF               	movwf	(compensate_pressure@var1+2)^(0+128)
 15857  0DD2  0020               	movlb	0	; select bank0
 15858  0DD3  083B               	movf	?___aodiv+3,w
 15859  0DD4  0021               	movlb	1	; select bank1
 15860  0DD5  00E0               	movwf	(compensate_pressure@var1+3)^(0+128)
 15861  0DD6  0020               	movlb	0	; select bank0
 15862  0DD7  083C               	movf	?___aodiv+4,w
 15863  0DD8  0021               	movlb	1	; select bank1
 15864  0DD9  00E1               	movwf	(compensate_pressure@var1+4)^(0+128)
 15865  0DDA  0020               	movlb	0	; select bank0
 15866  0DDB  083D               	movf	?___aodiv+5,w
 15867  0DDC  0021               	movlb	1	; select bank1
 15868  0DDD  00E2               	movwf	(compensate_pressure@var1+5)^(0+128)
 15869  0DDE  0020               	movlb	0	; select bank0
 15870  0DDF  083E               	movf	?___aodiv+6,w
 15871  0DE0  0021               	movlb	1	; select bank1
 15872  0DE1  00E3               	movwf	(compensate_pressure@var1+6)^(0+128)
 15873  0DE2  0020               	movlb	0	; select bank0
 15874  0DE3  083F               	movf	?___aodiv+7,w
 15875  0DE4  0021               	movlb	1	; select bank1
 15876  0DE5  00E4               	movwf	(compensate_pressure@var1+7)^(0+128)
 15877                           
 15878                           ;BME280_driver/bme280.c: 1184:         var2 = (((int64_t)calib_data->dig_P8) * var4) / 5
      +                          24288;
 15879  0DE6  3000               	movlw	0
 15880  0DE7  0020               	movlb	0	; select bank0
 15881  0DE8  00BF               	movwf	___aodiv@divisor+7
 15882  0DE9  3000               	movlw	0
 15883  0DEA  00BE               	movwf	___aodiv@divisor+6
 15884  0DEB  3000               	movlw	0
 15885  0DEC  00BD               	movwf	___aodiv@divisor+5
 15886  0DED  3000               	movlw	0
 15887  0DEE  00BC               	movwf	___aodiv@divisor+4
 15888  0DEF  3000               	movlw	0
 15889  0DF0  00BB               	movwf	___aodiv@divisor+3
 15890  0DF1  3008               	movlw	8
 15891  0DF2  00BA               	movwf	___aodiv@divisor+2
 15892  0DF3  3000               	movlw	0
 15893  0DF4  00B9               	movwf	___aodiv@divisor+1
 15894  0DF5  3000               	movlw	0
 15895  0DF6  00B8               	movwf	___aodiv@divisor
 15896  0DF7  0852               	movf	compensate_pressure@calib_data,w
 15897  0DF8  3E14               	addlw	20
 15898  0DF9  0086               	movwf	6
 15899  0DFA  3001               	movlw	1	; select bank2/3
 15900  0DFB  0087               	movwf	7
 15901  0DFC  3F40               	moviw [0]fsr1
 15902  0DFD  00D6               	movwf	??_compensate_pressure
 15903  0DFE  3F41               	moviw [1]fsr1
 15904  0DFF  00D7               	movwf	??_compensate_pressure+1
 15905  0E00  0856               	movf	??_compensate_pressure,w
 15906  0E01  00A0               	movwf	___omul@multiplier
 15907  0E02  0857               	movf	??_compensate_pressure+1,w
 15908  0E03  00A1               	movwf	___omul@multiplier+1
 15909  0E04  0D89               	rlf	9,f
 15910  0E05  3B89               	subwfb	9,f
 15911  0E06  0989               	comf	9,f
 15912  0E07  00A2               	movwf	___omul@multiplier+2
 15913  0E08  00A3               	movwf	___omul@multiplier+3
 15914  0E09  00A4               	movwf	___omul@multiplier+4
 15915  0E0A  00A5               	movwf	___omul@multiplier+5
 15916  0E0B  00A6               	movwf	___omul@multiplier+6
 15917  0E0C  00A7               	movwf	___omul@multiplier+7
 15918  0E0D  0021               	movlb	1	; select bank1
 15919  0E0E  0855               	movf	compensate_pressure@var4^(0+128),w
 15920  0E0F  0020               	movlb	0	; select bank0
 15921  0E10  00A8               	movwf	___omul@multiplicand
 15922  0E11  0021               	movlb	1	; select bank1
 15923  0E12  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 15924  0E13  0020               	movlb	0	; select bank0
 15925  0E14  00A9               	movwf	___omul@multiplicand+1
 15926  0E15  0021               	movlb	1	; select bank1
 15927  0E16  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 15928  0E17  0020               	movlb	0	; select bank0
 15929  0E18  00AA               	movwf	___omul@multiplicand+2
 15930  0E19  0021               	movlb	1	; select bank1
 15931  0E1A  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 15932  0E1B  0020               	movlb	0	; select bank0
 15933  0E1C  00AB               	movwf	___omul@multiplicand+3
 15934  0E1D  0021               	movlb	1	; select bank1
 15935  0E1E  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 15936  0E1F  0020               	movlb	0	; select bank0
 15937  0E20  00AC               	movwf	___omul@multiplicand+4
 15938  0E21  0021               	movlb	1	; select bank1
 15939  0E22  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 15940  0E23  0020               	movlb	0	; select bank0
 15941  0E24  00AD               	movwf	___omul@multiplicand+5
 15942  0E25  0021               	movlb	1	; select bank1
 15943  0E26  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 15944  0E27  0020               	movlb	0	; select bank0
 15945  0E28  00AE               	movwf	___omul@multiplicand+6
 15946  0E29  0021               	movlb	1	; select bank1
 15947  0E2A  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 15948  0E2B  0020               	movlb	0	; select bank0
 15949  0E2C  00AF               	movwf	___omul@multiplicand+7
 15950  0E2D  319F  2771  3188   	fcall	___omul
 15951  0E30  0820               	movf	?___omul,w
 15952  0E31  00C0               	movwf	___aodiv@dividend
 15953  0E32  0821               	movf	?___omul+1,w
 15954  0E33  00C1               	movwf	___aodiv@dividend+1
 15955  0E34  0822               	movf	?___omul+2,w
 15956  0E35  00C2               	movwf	___aodiv@dividend+2
 15957  0E36  0823               	movf	?___omul+3,w
 15958  0E37  00C3               	movwf	___aodiv@dividend+3
 15959  0E38  0824               	movf	?___omul+4,w
 15960  0E39  00C4               	movwf	___aodiv@dividend+4
 15961  0E3A  0825               	movf	?___omul+5,w
 15962  0E3B  00C5               	movwf	___aodiv@dividend+5
 15963  0E3C  0826               	movf	?___omul+6,w
 15964  0E3D  00C6               	movwf	___aodiv@dividend+6
 15965  0E3E  0827               	movf	?___omul+7,w
 15966  0E3F  00C7               	movwf	___aodiv@dividend+7
 15967  0E40  3197  270B  3188   	fcall	___aodiv
 15968  0E43  0838               	movf	?___aodiv,w
 15969  0E44  0021               	movlb	1	; select bank1
 15970  0E45  00CD               	movwf	compensate_pressure@var2^(0+128)
 15971  0E46  0020               	movlb	0	; select bank0
 15972  0E47  0839               	movf	?___aodiv+1,w
 15973  0E48  0021               	movlb	1	; select bank1
 15974  0E49  00CE               	movwf	(compensate_pressure@var2+1)^(0+128)
 15975  0E4A  0020               	movlb	0	; select bank0
 15976  0E4B  083A               	movf	?___aodiv+2,w
 15977  0E4C  0021               	movlb	1	; select bank1
 15978  0E4D  00CF               	movwf	(compensate_pressure@var2+2)^(0+128)
 15979  0E4E  0020               	movlb	0	; select bank0
 15980  0E4F  083B               	movf	?___aodiv+3,w
 15981  0E50  0021               	movlb	1	; select bank1
 15982  0E51  00D0               	movwf	(compensate_pressure@var2+3)^(0+128)
 15983  0E52  0020               	movlb	0	; select bank0
 15984  0E53  083C               	movf	?___aodiv+4,w
 15985  0E54  0021               	movlb	1	; select bank1
 15986  0E55  00D1               	movwf	(compensate_pressure@var2+4)^(0+128)
 15987  0E56  0020               	movlb	0	; select bank0
 15988  0E57  083D               	movf	?___aodiv+5,w
 15989  0E58  0021               	movlb	1	; select bank1
 15990  0E59  00D2               	movwf	(compensate_pressure@var2+5)^(0+128)
 15991  0E5A  0020               	movlb	0	; select bank0
 15992  0E5B  083E               	movf	?___aodiv+6,w
 15993  0E5C  0021               	movlb	1	; select bank1
 15994  0E5D  00D3               	movwf	(compensate_pressure@var2+6)^(0+128)
 15995  0E5E  0020               	movlb	0	; select bank0
 15996  0E5F  083F               	movf	?___aodiv+7,w
 15997  0E60  0021               	movlb	1	; select bank1
 15998  0E61  00D4               	movwf	(compensate_pressure@var2+7)^(0+128)
 15999                           
 16000                           ;BME280_driver/bme280.c: 1185:         var4 = ((var4 + var1 + var2) / 256) + (((int64_t)
      +                          calib_data->dig_P7) * 16);
 16001  0E62  0020               	movlb	0	; select bank0
 16002  0E63  0852               	movf	compensate_pressure@calib_data,w
 16003  0E64  3E12               	addlw	18
 16004  0E65  0086               	movwf	6
 16005  0E66  3001               	movlw	1	; select bank2/3
 16006  0E67  0087               	movwf	7
 16007  0E68  3F40               	moviw [0]fsr1
 16008  0E69  00D6               	movwf	??_compensate_pressure
 16009  0E6A  3F41               	moviw [1]fsr1
 16010  0E6B  00D7               	movwf	??_compensate_pressure+1
 16011  0E6C  0856               	movf	??_compensate_pressure,w
 16012  0E6D  00D8               	movwf	??_compensate_pressure+2
 16013  0E6E  0857               	movf	??_compensate_pressure+1,w
 16014  0E6F  00D9               	movwf	??_compensate_pressure+3
 16015  0E70  3000               	movlw	0
 16016  0E71  1BD9               	btfsc	??_compensate_pressure+3,7
 16017  0E72  30FF               	movlw	255
 16018  0E73  00DA               	movwf	??_compensate_pressure+4
 16019  0E74  00DB               	movwf	??_compensate_pressure+5
 16020  0E75  00DC               	movwf	??_compensate_pressure+6
 16021  0E76  00DD               	movwf	??_compensate_pressure+7
 16022  0E77  00DE               	movwf	??_compensate_pressure+8
 16023  0E78  00DF               	movwf	??_compensate_pressure+9
 16024  0E79  3004               	movlw	4
 16025  0E7A                     u4365:	
 16026  0E7A  0020               	movlb	0	; select bank0
 16027  0E7B  35D8               	lslf	??_compensate_pressure+2,f
 16028  0E7C  0DD9               	rlf	??_compensate_pressure+3,f
 16029  0E7D  0DDA               	rlf	??_compensate_pressure+4,f
 16030  0E7E  0DDB               	rlf	??_compensate_pressure+5,f
 16031  0E7F  0DDC               	rlf	??_compensate_pressure+6,f
 16032  0E80  0DDD               	rlf	??_compensate_pressure+7,f
 16033  0E81  0DDE               	rlf	??_compensate_pressure+8,f
 16034  0E82  0DDF               	rlf	??_compensate_pressure+9,f
 16035  0E83  0B89               	decfsz	9,f
 16036  0E84  2E7A               	goto	u4365
 16037  0E85  3000               	movlw	0
 16038  0E86  0020               	movlb	0	; select bank0
 16039  0E87  00BF               	movwf	___aodiv@divisor+7
 16040  0E88  3000               	movlw	0
 16041  0E89  00BE               	movwf	___aodiv@divisor+6
 16042  0E8A  3000               	movlw	0
 16043  0E8B  00BD               	movwf	___aodiv@divisor+5
 16044  0E8C  3000               	movlw	0
 16045  0E8D  00BC               	movwf	___aodiv@divisor+4
 16046  0E8E  3000               	movlw	0
 16047  0E8F  00BB               	movwf	___aodiv@divisor+3
 16048  0E90  3000               	movlw	0
 16049  0E91  00BA               	movwf	___aodiv@divisor+2
 16050  0E92  3001               	movlw	1
 16051  0E93  00B9               	movwf	___aodiv@divisor+1
 16052  0E94  3000               	movlw	0
 16053  0E95  00B8               	movwf	___aodiv@divisor
 16054  0E96  30CD               	movlw	low compensate_pressure@var2
 16055  0E97  0086               	movwf	6
 16056  0E98  3000               	movlw	high compensate_pressure@var2
 16057  0E99  0087               	movwf	7
 16058  0E9A  3F40               	moviw [0]fsr1
 16059  0E9B  00E0               	movwf	??_compensate_pressure+10
 16060  0E9C  3F41               	moviw [1]fsr1
 16061  0E9D  00E1               	movwf	??_compensate_pressure+11
 16062  0E9E  3F42               	moviw [2]fsr1
 16063  0E9F  00E2               	movwf	??_compensate_pressure+12
 16064  0EA0  3F43               	moviw [3]fsr1
 16065  0EA1  00E3               	movwf	??_compensate_pressure+13
 16066  0EA2  3F44               	moviw [4]fsr1
 16067  0EA3  00E4               	movwf	??_compensate_pressure+14
 16068  0EA4  3F45               	moviw [5]fsr1
 16069  0EA5  00E5               	movwf	??_compensate_pressure+15
 16070  0EA6  3F46               	moviw [6]fsr1
 16071  0EA7  00E6               	movwf	??_compensate_pressure+16
 16072  0EA8  3F47               	moviw [7]fsr1
 16073  0EA9  00E7               	movwf	??_compensate_pressure+17
 16074  0EAA  0021               	movlb	1	; select bank1
 16075  0EAB  0855               	movf	compensate_pressure@var4^(0+128),w
 16076  0EAC  075D               	addwf	compensate_pressure@var1^(0+128),w
 16077  0EAD  0020               	movlb	0	; select bank0
 16078  0EAE  00E8               	movwf	??_compensate_pressure+18
 16079  0EAF  0021               	movlb	1	; select bank1
 16080  0EB0  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 16081  0EB1  3D5E               	addwfc	(compensate_pressure@var1+1)^(0+128),w
 16082  0EB2  0020               	movlb	0	; select bank0
 16083  0EB3  00E9               	movwf	??_compensate_pressure+19
 16084  0EB4  0021               	movlb	1	; select bank1
 16085  0EB5  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 16086  0EB6  3D5F               	addwfc	(compensate_pressure@var1+2)^(0+128),w
 16087  0EB7  0020               	movlb	0	; select bank0
 16088  0EB8  00EA               	movwf	??_compensate_pressure+20
 16089  0EB9  0021               	movlb	1	; select bank1
 16090  0EBA  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 16091  0EBB  3D60               	addwfc	(compensate_pressure@var1+3)^(0+128),w
 16092  0EBC  0020               	movlb	0	; select bank0
 16093  0EBD  00EB               	movwf	??_compensate_pressure+21
 16094  0EBE  0021               	movlb	1	; select bank1
 16095  0EBF  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 16096  0EC0  3D61               	addwfc	(compensate_pressure@var1+4)^(0+128),w
 16097  0EC1  0020               	movlb	0	; select bank0
 16098  0EC2  00EC               	movwf	??_compensate_pressure+22
 16099  0EC3  0021               	movlb	1	; select bank1
 16100  0EC4  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 16101  0EC5  3D62               	addwfc	(compensate_pressure@var1+5)^(0+128),w
 16102  0EC6  0020               	movlb	0	; select bank0
 16103  0EC7  00ED               	movwf	??_compensate_pressure+23
 16104  0EC8  0021               	movlb	1	; select bank1
 16105  0EC9  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 16106  0ECA  3D63               	addwfc	(compensate_pressure@var1+6)^(0+128),w
 16107  0ECB  0020               	movlb	0	; select bank0
 16108  0ECC  00EE               	movwf	??_compensate_pressure+24
 16109  0ECD  0021               	movlb	1	; select bank1
 16110  0ECE  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 16111  0ECF  3D64               	addwfc	(compensate_pressure@var1+7)^(0+128),w
 16112  0ED0  0020               	movlb	0	; select bank0
 16113  0ED1  00EF               	movwf	??_compensate_pressure+25
 16114  0ED2  0868               	movf	??_compensate_pressure+18,w
 16115  0ED3  07E0               	addwf	??_compensate_pressure+10,f
 16116  0ED4  0869               	movf	??_compensate_pressure+19,w
 16117  0ED5  3DE1               	addwfc	??_compensate_pressure+11,f
 16118  0ED6  086A               	movf	??_compensate_pressure+20,w
 16119  0ED7  3DE2               	addwfc	??_compensate_pressure+12,f
 16120  0ED8  086B               	movf	??_compensate_pressure+21,w
 16121  0ED9  3DE3               	addwfc	??_compensate_pressure+13,f
 16122  0EDA  086C               	movf	??_compensate_pressure+22,w
 16123  0EDB  3DE4               	addwfc	??_compensate_pressure+14,f
 16124  0EDC  086D               	movf	??_compensate_pressure+23,w
 16125  0EDD  3DE5               	addwfc	??_compensate_pressure+15,f
 16126  0EDE  086E               	movf	??_compensate_pressure+24,w
 16127  0EDF  3DE6               	addwfc	??_compensate_pressure+16,f
 16128  0EE0  086F               	movf	??_compensate_pressure+25,w
 16129  0EE1  3DE7               	addwfc	??_compensate_pressure+17,f
 16130  0EE2  0867               	movf	??_compensate_pressure+17,w
 16131  0EE3  00C7               	movwf	___aodiv@dividend+7
 16132  0EE4  0866               	movf	??_compensate_pressure+16,w
 16133  0EE5  00C6               	movwf	___aodiv@dividend+6
 16134  0EE6  0865               	movf	??_compensate_pressure+15,w
 16135  0EE7  00C5               	movwf	___aodiv@dividend+5
 16136  0EE8  0864               	movf	??_compensate_pressure+14,w
 16137  0EE9  00C4               	movwf	___aodiv@dividend+4
 16138  0EEA  0863               	movf	??_compensate_pressure+13,w
 16139  0EEB  00C3               	movwf	___aodiv@dividend+3
 16140  0EEC  0862               	movf	??_compensate_pressure+12,w
 16141  0EED  00C2               	movwf	___aodiv@dividend+2
 16142  0EEE  0861               	movf	??_compensate_pressure+11,w
 16143  0EEF  00C1               	movwf	___aodiv@dividend+1
 16144  0EF0  0860               	movf	??_compensate_pressure+10,w
 16145  0EF1  00C0               	movwf	___aodiv@dividend
 16146  0EF2  3197  270B  3188   	fcall	___aodiv
 16147  0EF5  3038               	movlw	low ?___aodiv
 16148  0EF6  0086               	movwf	6
 16149  0EF7  3000               	movlw	high ?___aodiv
 16150  0EF8  0087               	movwf	7
 16151  0EF9  3F40               	moviw [0]fsr1
 16152  0EFA  07D8               	addwf	??_compensate_pressure+2,f
 16153  0EFB  3F41               	moviw [1]fsr1
 16154  0EFC  3DD9               	addwfc	??_compensate_pressure+3,f
 16155  0EFD  3F42               	moviw [2]fsr1
 16156  0EFE  3DDA               	addwfc	??_compensate_pressure+4,f
 16157  0EFF  3F43               	moviw [3]fsr1
 16158  0F00  3DDB               	addwfc	??_compensate_pressure+5,f
 16159  0F01  3F44               	moviw [4]fsr1
 16160  0F02  3DDC               	addwfc	??_compensate_pressure+6,f
 16161  0F03  3F45               	moviw [5]fsr1
 16162  0F04  3DDD               	addwfc	??_compensate_pressure+7,f
 16163  0F05  3F46               	moviw [6]fsr1
 16164  0F06  3DDE               	addwfc	??_compensate_pressure+8,f
 16165  0F07  3F47               	moviw [7]fsr1
 16166  0F08  3DDF               	addwfc	??_compensate_pressure+9,f
 16167  0F09  085F               	movf	??_compensate_pressure+9,w
 16168  0F0A  0021               	movlb	1	; select bank1
 16169  0F0B  00DC               	movwf	(compensate_pressure@var4+7)^(0+128)
 16170  0F0C  0020               	movlb	0	; select bank0
 16171  0F0D  085E               	movf	??_compensate_pressure+8,w
 16172  0F0E  0021               	movlb	1	; select bank1
 16173  0F0F  00DB               	movwf	(compensate_pressure@var4+6)^(0+128)
 16174  0F10  0020               	movlb	0	; select bank0
 16175  0F11  085D               	movf	??_compensate_pressure+7,w
 16176  0F12  0021               	movlb	1	; select bank1
 16177  0F13  00DA               	movwf	(compensate_pressure@var4+5)^(0+128)
 16178  0F14  0020               	movlb	0	; select bank0
 16179  0F15  085C               	movf	??_compensate_pressure+6,w
 16180  0F16  0021               	movlb	1	; select bank1
 16181  0F17  00D9               	movwf	(compensate_pressure@var4+4)^(0+128)
 16182  0F18  0020               	movlb	0	; select bank0
 16183  0F19  085B               	movf	??_compensate_pressure+5,w
 16184  0F1A  0021               	movlb	1	; select bank1
 16185  0F1B  00D8               	movwf	(compensate_pressure@var4+3)^(0+128)
 16186  0F1C  0020               	movlb	0	; select bank0
 16187  0F1D  085A               	movf	??_compensate_pressure+4,w
 16188  0F1E  0021               	movlb	1	; select bank1
 16189  0F1F  00D7               	movwf	(compensate_pressure@var4+2)^(0+128)
 16190  0F20  0020               	movlb	0	; select bank0
 16191  0F21  0859               	movf	??_compensate_pressure+3,w
 16192  0F22  0021               	movlb	1	; select bank1
 16193  0F23  00D6               	movwf	(compensate_pressure@var4+1)^(0+128)
 16194  0F24  0020               	movlb	0	; select bank0
 16195  0F25  0858               	movf	??_compensate_pressure+2,w
 16196  0F26  0021               	movlb	1	; select bank1
 16197  0F27  00D5               	movwf	compensate_pressure@var4^(0+128)
 16198                           
 16199                           ;BME280_driver/bme280.c: 1186:         pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 16200  0F28  3002               	movlw	2
 16201  0F29  0020               	movlb	0	; select bank0
 16202  0F2A  00B8               	movwf	___aodiv@divisor
 16203  0F2B  01B9               	clrf	___aodiv@divisor+1
 16204  0F2C  01BA               	clrf	___aodiv@divisor+2
 16205  0F2D  01BB               	clrf	___aodiv@divisor+3
 16206  0F2E  01BC               	clrf	___aodiv@divisor+4
 16207  0F2F  01BD               	clrf	___aodiv@divisor+5
 16208  0F30  01BE               	clrf	___aodiv@divisor+6
 16209  0F31  01BF               	clrf	___aodiv@divisor+7
 16210  0F32  0021               	movlb	1	; select bank1
 16211  0F33  0855               	movf	compensate_pressure@var4^(0+128),w
 16212  0F34  0020               	movlb	0	; select bank0
 16213  0F35  00C0               	movwf	___aodiv@dividend
 16214  0F36  0021               	movlb	1	; select bank1
 16215  0F37  0856               	movf	(compensate_pressure@var4+1)^(0+128),w
 16216  0F38  0020               	movlb	0	; select bank0
 16217  0F39  00C1               	movwf	___aodiv@dividend+1
 16218  0F3A  0021               	movlb	1	; select bank1
 16219  0F3B  0857               	movf	(compensate_pressure@var4+2)^(0+128),w
 16220  0F3C  0020               	movlb	0	; select bank0
 16221  0F3D  00C2               	movwf	___aodiv@dividend+2
 16222  0F3E  0021               	movlb	1	; select bank1
 16223  0F3F  0858               	movf	(compensate_pressure@var4+3)^(0+128),w
 16224  0F40  0020               	movlb	0	; select bank0
 16225  0F41  00C3               	movwf	___aodiv@dividend+3
 16226  0F42  0021               	movlb	1	; select bank1
 16227  0F43  0859               	movf	(compensate_pressure@var4+4)^(0+128),w
 16228  0F44  0020               	movlb	0	; select bank0
 16229  0F45  00C4               	movwf	___aodiv@dividend+4
 16230  0F46  0021               	movlb	1	; select bank1
 16231  0F47  085A               	movf	(compensate_pressure@var4+5)^(0+128),w
 16232  0F48  0020               	movlb	0	; select bank0
 16233  0F49  00C5               	movwf	___aodiv@dividend+5
 16234  0F4A  0021               	movlb	1	; select bank1
 16235  0F4B  085B               	movf	(compensate_pressure@var4+6)^(0+128),w
 16236  0F4C  0020               	movlb	0	; select bank0
 16237  0F4D  00C6               	movwf	___aodiv@dividend+6
 16238  0F4E  0021               	movlb	1	; select bank1
 16239  0F4F  085C               	movf	(compensate_pressure@var4+7)^(0+128),w
 16240  0F50  0020               	movlb	0	; select bank0
 16241  0F51  00C7               	movwf	___aodiv@dividend+7
 16242  0F52  3197  270B  3188   	fcall	___aodiv
 16243  0F55  0838               	movf	?___aodiv,w
 16244  0F56  00A0               	movwf	___omul@multiplier
 16245  0F57  0839               	movf	?___aodiv+1,w
 16246  0F58  00A1               	movwf	___omul@multiplier+1
 16247  0F59  083A               	movf	?___aodiv+2,w
 16248  0F5A  00A2               	movwf	___omul@multiplier+2
 16249  0F5B  083B               	movf	?___aodiv+3,w
 16250  0F5C  00A3               	movwf	___omul@multiplier+3
 16251  0F5D  083C               	movf	?___aodiv+4,w
 16252  0F5E  00A4               	movwf	___omul@multiplier+4
 16253  0F5F  083D               	movf	?___aodiv+5,w
 16254  0F60  00A5               	movwf	___omul@multiplier+5
 16255  0F61  083E               	movf	?___aodiv+6,w
 16256  0F62  00A6               	movwf	___omul@multiplier+6
 16257  0F63  083F               	movf	?___aodiv+7,w
 16258  0F64  00A7               	movwf	___omul@multiplier+7
 16259  0F65  3064               	movlw	100
 16260  0F66  00A8               	movwf	___omul@multiplicand
 16261  0F67  01A9               	clrf	___omul@multiplicand+1
 16262  0F68  01AA               	clrf	___omul@multiplicand+2
 16263  0F69  01AB               	clrf	___omul@multiplicand+3
 16264  0F6A  01AC               	clrf	___omul@multiplicand+4
 16265  0F6B  01AD               	clrf	___omul@multiplicand+5
 16266  0F6C  01AE               	clrf	___omul@multiplicand+6
 16267  0F6D  01AF               	clrf	___omul@multiplicand+7
 16268  0F6E  319F  2771  3188   	fcall	___omul
 16269  0F71  0820               	movf	?___omul,w
 16270  0F72  0021               	movlb	1	; select bank1
 16271  0F73  00B0               	movwf	_compensate_pressure$2535^(0+128)
 16272  0F74  0020               	movlb	0	; select bank0
 16273  0F75  0821               	movf	?___omul+1,w
 16274  0F76  0021               	movlb	1	; select bank1
 16275  0F77  00B1               	movwf	(_compensate_pressure$2535+1)^(0+128)
 16276  0F78  0020               	movlb	0	; select bank0
 16277  0F79  0822               	movf	?___omul+2,w
 16278  0F7A  0021               	movlb	1	; select bank1
 16279  0F7B  00B2               	movwf	(_compensate_pressure$2535+2)^(0+128)
 16280  0F7C  0020               	movlb	0	; select bank0
 16281  0F7D  0823               	movf	?___omul+3,w
 16282  0F7E  0021               	movlb	1	; select bank1
 16283  0F7F  00B3               	movwf	(_compensate_pressure$2535+3)^(0+128)
 16284  0F80  0020               	movlb	0	; select bank0
 16285  0F81  0824               	movf	?___omul+4,w
 16286  0F82  0021               	movlb	1	; select bank1
 16287  0F83  00B4               	movwf	(_compensate_pressure$2535+4)^(0+128)
 16288  0F84  0020               	movlb	0	; select bank0
 16289  0F85  0825               	movf	?___omul+5,w
 16290  0F86  0021               	movlb	1	; select bank1
 16291  0F87  00B5               	movwf	(_compensate_pressure$2535+5)^(0+128)
 16292  0F88  0020               	movlb	0	; select bank0
 16293  0F89  0826               	movf	?___omul+6,w
 16294  0F8A  0021               	movlb	1	; select bank1
 16295  0F8B  00B6               	movwf	(_compensate_pressure$2535+6)^(0+128)
 16296  0F8C  0020               	movlb	0	; select bank0
 16297  0F8D  0827               	movf	?___omul+7,w
 16298  0F8E  0021               	movlb	1	; select bank1
 16299  0F8F  00B7               	movwf	(_compensate_pressure$2535+7)^(0+128)
 16300                           
 16301                           ;BME280_driver/bme280.c: 1186:         pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 16302  0F90  3080               	movlw	128
 16303  0F91  0020               	movlb	0	; select bank0
 16304  0F92  00B8               	movwf	___aodiv@divisor
 16305  0F93  01B9               	clrf	___aodiv@divisor+1
 16306  0F94  01BA               	clrf	___aodiv@divisor+2
 16307  0F95  01BB               	clrf	___aodiv@divisor+3
 16308  0F96  01BC               	clrf	___aodiv@divisor+4
 16309  0F97  01BD               	clrf	___aodiv@divisor+5
 16310  0F98  01BE               	clrf	___aodiv@divisor+6
 16311  0F99  01BF               	clrf	___aodiv@divisor+7
 16312  0F9A  0021               	movlb	1	; select bank1
 16313  0F9B  0830               	movf	_compensate_pressure$2535^(0+128),w
 16314  0F9C  0020               	movlb	0	; select bank0
 16315  0F9D  00C0               	movwf	___aodiv@dividend
 16316  0F9E  0021               	movlb	1	; select bank1
 16317  0F9F  0831               	movf	(_compensate_pressure$2535+1)^(0+128),w
 16318  0FA0  0020               	movlb	0	; select bank0
 16319  0FA1  00C1               	movwf	___aodiv@dividend+1
 16320  0FA2  0021               	movlb	1	; select bank1
 16321  0FA3  0832               	movf	(_compensate_pressure$2535+2)^(0+128),w
 16322  0FA4  0020               	movlb	0	; select bank0
 16323  0FA5  00C2               	movwf	___aodiv@dividend+2
 16324  0FA6  0021               	movlb	1	; select bank1
 16325  0FA7  0833               	movf	(_compensate_pressure$2535+3)^(0+128),w
 16326  0FA8  0020               	movlb	0	; select bank0
 16327  0FA9  00C3               	movwf	___aodiv@dividend+3
 16328  0FAA  0021               	movlb	1	; select bank1
 16329  0FAB  0834               	movf	(_compensate_pressure$2535+4)^(0+128),w
 16330  0FAC  0020               	movlb	0	; select bank0
 16331  0FAD  00C4               	movwf	___aodiv@dividend+4
 16332  0FAE  0021               	movlb	1	; select bank1
 16333  0FAF  0835               	movf	(_compensate_pressure$2535+5)^(0+128),w
 16334  0FB0  0020               	movlb	0	; select bank0
 16335  0FB1  00C5               	movwf	___aodiv@dividend+5
 16336  0FB2  0021               	movlb	1	; select bank1
 16337  0FB3  0836               	movf	(_compensate_pressure$2535+6)^(0+128),w
 16338  0FB4  0020               	movlb	0	; select bank0
 16339  0FB5  00C6               	movwf	___aodiv@dividend+6
 16340  0FB6  0021               	movlb	1	; select bank1
 16341  0FB7  0837               	movf	(_compensate_pressure$2535+7)^(0+128),w
 16342  0FB8  0020               	movlb	0	; select bank0
 16343  0FB9  00C7               	movwf	___aodiv@dividend+7
 16344  0FBA  3197  270B  3188   	fcall	___aodiv
 16345  0FBD  083B               	movf	?___aodiv+3,w
 16346  0FBE  0021               	movlb	1	; select bank1
 16347  0FBF  00CC               	movwf	(compensate_pressure@pressure+3)^(0+128)
 16348  0FC0  0020               	movlb	0	; select bank0
 16349  0FC1  083A               	movf	?___aodiv+2,w
 16350  0FC2  0021               	movlb	1	; select bank1
 16351  0FC3  00CB               	movwf	(compensate_pressure@pressure+2)^(0+128)
 16352  0FC4  0020               	movlb	0	; select bank0
 16353  0FC5  0839               	movf	?___aodiv+1,w
 16354  0FC6  0021               	movlb	1	; select bank1
 16355  0FC7  00CA               	movwf	(compensate_pressure@pressure+1)^(0+128)
 16356  0FC8  0020               	movlb	0	; select bank0
 16357  0FC9  0838               	movf	?___aodiv,w
 16358  0FCA  0021               	movlb	1	; select bank1
 16359  0FCB  00C9               	movwf	compensate_pressure@pressure^(0+128)
 16360                           
 16361                           ;BME280_driver/bme280.c: 1187:         if (pressure < pressure_min)
 16362  0FCC  084C               	movf	(compensate_pressure@pressure+3)^(0+128),w
 16363  0FCD  1D03               	btfss	3,2
 16364  0FCE  2FDD               	goto	l4380
 16365  0FCF  30C0               	movlw	192
 16366  0FD0  0249               	subwf	compensate_pressure@pressure^(0+128),w
 16367  0FD1  30C6               	movlw	198
 16368  0FD2  3B4A               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
 16369  0FD3  302D               	movlw	45
 16370  0FD4  3B4B               	subwfb	(compensate_pressure@pressure+2)^(0+128),w
 16371  0FD5  1803               	btfsc	3,0
 16372  0FD6  2FDD               	goto	l4380
 16373  0FD7                     l4378:	
 16374                           
 16375                           ;BME280_driver/bme280.c: 1188:         {;BME280_driver/bme280.c: 1189:             press
      +                          ure = pressure_min;
 16376  0FD7  3000               	movlw	0
 16377  0FD8  00CC               	movwf	(compensate_pressure@pressure+3)^(0+128)
 16378  0FD9  302D               	movlw	45
 16379  0FDA  00CB               	movwf	(compensate_pressure@pressure+2)^(0+128)
 16380  0FDB  30C6               	movlw	198
 16381  0FDC  2FED               	goto	L5
 16382  0FDD                     l4380:	
 16383                           ;BME280_driver/bme280.c: 1190:         }
 16384                           
 16385  0FDD  084C               	movf	(compensate_pressure@pressure+3)^(0+128),w
 16386  0FDE  1D03               	btfss	3,2
 16387  0FDF  2FE8               	goto	l4382
 16388  0FE0  30C1               	movlw	193
 16389  0FE1  0249               	subwf	compensate_pressure@pressure^(0+128),w
 16390  0FE2  30D8               	movlw	216
 16391  0FE3  3B4A               	subwfb	(compensate_pressure@pressure+1)^(0+128),w
 16392  0FE4  30A7               	movlw	167
 16393  0FE5  3B4B               	subwfb	(compensate_pressure@pressure+2)^(0+128),w
 16394  0FE6  1C03               	btfss	3,0
 16395  0FE7  2FF0               	goto	l192
 16396  0FE8                     l4382:	
 16397                           
 16398                           ;BME280_driver/bme280.c: 1192:         {;BME280_driver/bme280.c: 1193:             press
      +                          ure = pressure_max;
 16399  0FE8  3000               	movlw	0
 16400  0FE9  00CC               	movwf	(compensate_pressure@pressure+3)^(0+128)
 16401  0FEA  30A7               	movlw	167
 16402  0FEB  00CB               	movwf	(compensate_pressure@pressure+2)^(0+128)
 16403  0FEC  30D8               	movlw	216
 16404  0FED                     L5:	
 16405  0FED  00CA               	movwf	(compensate_pressure@pressure+1)^(0+128)
 16406  0FEE  30C0               	movlw	192
 16407  0FEF  00C9               	movwf	compensate_pressure@pressure^(0+128)
 16408  0FF0                     l192:	
 16409                           ;BME280_driver/bme280.c: 1199:     }
 16410                           
 16411                           
 16412                           ;BME280_driver/bme280.c: 1201:     return pressure;
 16413  0FF0  084C               	movf	(compensate_pressure@pressure+3)^(0+128),w
 16414  0FF1  0020               	movlb	0	; select bank0
 16415  0FF2  00D5               	movwf	?_compensate_pressure+3
 16416  0FF3  0021               	movlb	1	; select bank1
 16417  0FF4  084B               	movf	(compensate_pressure@pressure+2)^(0+128),w
 16418  0FF5  0020               	movlb	0	; select bank0
 16419  0FF6  00D4               	movwf	?_compensate_pressure+2
 16420  0FF7  0021               	movlb	1	; select bank1
 16421  0FF8  084A               	movf	(compensate_pressure@pressure+1)^(0+128),w
 16422  0FF9  0020               	movlb	0	; select bank0
 16423  0FFA  00D3               	movwf	?_compensate_pressure+1
 16424  0FFB  0021               	movlb	1	; select bank1
 16425  0FFC  0849               	movf	compensate_pressure@pressure^(0+128),w
 16426  0FFD  0020               	movlb	0	; select bank0
 16427  0FFE  00D2               	movwf	?_compensate_pressure
 16428  0FFF  0008               	return
 16429  1000                     __end_of_compensate_pressure:	


Data Sizes:
    Strings     189
    Constant    0
    Data        46
    BSS         266
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     62      79
    BANK3            80     51      77
    BANK4            80      0      55
    BANK5            80      0      70
    BANK6            80      0      70
    BANK7            80      0      73
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    get_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 0
		 -> Sleep(), 

    get_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> WriteEnvSensor(), 

    get_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 0
		 -> ReadEnvSensor(), 

    i2c_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_tr_queue.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    S54$4$2	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    S54$3$2	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 73
		 -> STR_12(CODE[3]), checksum(BANK3[6]), STR_11(CODE[6]), main@convertedNumber(BANK2[16]), 
		 -> GetNavData@strId(COMMON[12]), STR_10(CODE[5]), STR_7(CODE[14]), GetNavData@data_type(COMMON[7]), 
		 -> STR_6(CODE[26]), STR_5(CODE[26]), STR_4(CODE[26]), STR_3(CODE[26]), 
		 -> STR_2(CODE[26]), STR_1(CODE[26]), message_end(BANK7[73]), message_start(BANK6[70]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 73
		 -> STR_12(CODE[3]), checksum(BANK3[6]), STR_11(CODE[6]), main@convertedNumber(BANK2[16]), 
		 -> GetNavData@strId(COMMON[12]), STR_10(CODE[5]), STR_7(CODE[14]), GetNavData@data_type(COMMON[7]), 
		 -> STR_6(CODE[26]), STR_5(CODE[26]), STR_4(CODE[26]), STR_3(CODE[26]), 
		 -> STR_2(CODE[26]), STR_1(CODE[26]), message_end(BANK7[73]), message_start(BANK6[70]), 

    env_sensor.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    env_sensor.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    env_sensor.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    WriteEnvSensor@reg_data	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    ReadEnvSensor@data	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    GPS_HasAcknowledged@data	PTR unsigned char  size(1) Largest target is 44
		 -> setNavFlightMode(BANK5[44]), 

    GPS_SendUBX@data	PTR unsigned char  size(1) Largest target is 44
		 -> setNavFlightMode(BANK5[44]), 

    GetLengthUBX@data	PTR unsigned char  size(1) Largest target is 44
		 -> setNavFlightMode(BANK5[44]), 

    WriteGPS@message	PTR unsigned char  size(2) Largest target is 26
		 -> STR_7(CODE[14]), STR_6(CODE[26]), STR_5(CODE[26]), STR_4(CODE[26]), 
		 -> STR_3(CODE[26]), STR_2(CODE[26]), STR_1(CODE[26]), 

    TransmitString@message	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    crc16@data	PTR PTR unsigned char  size(1) Largest target is 2
		 -> messages(BANK3[2]), 

    crc16_update@pData	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    messages	PTR unsigned char [2] size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    IntToString@dest	PTR unsigned char  size(2) Largest target is 16
		 -> main@convertedNumber(BANK2[16]), GetNavData@strId(COMMON[12]), 

    UIntToHexString@dest	PTR unsigned char  size(1) Largest target is 6
		 -> checksum(BANK3[6]), 

    ReverseString@opposite	PTR unsigned char  size(2) Largest target is 16
		 -> checksum(BANK3[6]), main@convertedNumber(BANK2[16]), GetNavData@strId(COMMON[12]), 

    ReverseString@str	PTR unsigned char  size(2) Largest target is 16
		 -> checksum(BANK3[6]), main@convertedNumber(BANK2[16]), GetNavData@strId(COMMON[12]), 

    InsertString@dest	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    InsertString@src	PTR unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[3]), checksum(BANK3[6]), STR_11(CODE[6]), main@convertedNumber(BANK2[16]), 
		 -> GetNavData@strId(COMMON[12]), STR_10(CODE[5]), 

    Insert@dest	PTR unsigned char  size(1) Largest target is 73
		 -> message_end(BANK7[73]), message_start(BANK6[70]), 

    ClearString@str	PTR unsigned char  size(2) Largest target is 73
		 -> main@convertedNumber(BANK2[16]), GetNavData@data_type(COMMON[7]), message_end(BANK7[73]), message_start(BANK6[70]), 

    I2C_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 20
		 -> WriteEnvSensor@local_address(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), bme280_set_regs@temp_buff(BANK0[20]), 

    I2C_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterWrite@trBlock(BANK3[5]), 

    I2C_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), 

    i2c_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrTail.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    I2C_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    I2C_MasterTRBInsert@pflag	PTR enum E9631 size(1) Largest target is 1
		 -> WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterRead@pflag	PTR enum E9631 size(1) Largest target is 1
		 -> ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    F9742.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_MasterWrite@pflag	PTR enum E9631 size(1) Largest target is 1
		 -> WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 

    I2C_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 20
		 -> WriteEnvSensor@local_address(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), bme280_set_regs@temp_buff(BANK0[20]), 

    F9736.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    I2C_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), NULL(NULL[0]), 
		 -> bme280_init@chip_id(BANK0[1]), 

    p_i2c_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), NULL(NULL[0]), 

    i2c_object.pTrHead.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    i2c_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    S1297$pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_current.pbuffer	PTR unsigned char  size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    S1309$pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    p_i2c_current.pTrFlag	PTR enum E9631 size(2) Largest target is 26
		 -> WriteEnvSensor@local_address(BANK0[1]), WriteEnvSensor@status(BANK0[1]), ReadEnvSensor@reg_addr(BANK0[1]), ReadEnvSensor@status(BANK0[1]), 
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_set_regs@temp_buff(BANK0[20]), bme280_init@chip_id(BANK0[1]), 

    S1309$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    p_i2c_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK3[5]), I2C_MasterWrite@trBlock(BANK3[5]), 

    p_i2c_current	PTR volatile struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK3[4]), NULL(NULL[0]), 

    S1320$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK3[4]), 

    i2c_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK3[4]), 

    S1320$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK3[4]), 

    i2c_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK3[4]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    null_ptr_check@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    null_ptr_check@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    null_ptr_check@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    null_ptr_check@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    parse_humidity_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_humidity_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_humidity_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_humidity_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_humidity_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    parse_humidity_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> env_sensor.calib_data(BANK0[37]), main@env_sensor(BANK3[51]), 

    parse_temp_press_calib_data@reg_data	PTR const unsigned char  size(1) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), 

    parse_temp_press_calib_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    parse_temp_press_calib_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    parse_temp_press_calib_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    parse_temp_press_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    parse_temp_press_calib_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> env_sensor.calib_data(BANK0[37]), main@env_sensor(BANK3[51]), 

    interleave_reg_addr@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(COMMON[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    interleave_reg_addr@reg_addr	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(COMMON[1]), set_filter_standby_settings@reg_addr(COMMON[1]), set_osr_press_temp_settings@reg_addr(COMMON[1]), set_osr_humidity_settings@reg_addr(COMMON[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    interleave_reg_addr@temp_buff	PTR unsigned char  size(1) Largest target is 20
		 -> bme280_set_regs@temp_buff(BANK0[20]), 

    get_calib_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_pressure@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    compensate_pressure@calib_data	PTR const struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_temperature@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    compensate_temperature@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    bme280_compensate_data@calib_data	PTR struct bme280_calib_data size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_compensate_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_compensate_data@uncomp_data	PTR const struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    bme280_parse_sensor_data@uncomp_data	PTR struct bme280_uncomp_data size(1) Largest target is 12
		 -> bme280_get_sensor_data@uncomp_data(BANK2[12]), 

    bme280_parse_sensor_data@reg_data	PTR const unsigned char  size(1) Largest target is 8
		 -> bme280_get_sensor_data@reg_data(BANK2[8]), 

    bme280_get_sensor_data@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_data@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_data@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_sensor_data@comp_data	PTR struct bme280_data size(1) Largest target is 12
		 -> main@sensor_data(BANK2[12]), 

    bme280_get_sensor_data@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_soft_reset@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_soft_reset@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_soft_reset@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_soft_reset@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_get_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_sensor_settings@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_sensor_settings@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_sensor_settings@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_set_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_set_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_set_regs@reg_data	PTR const unsigned char  size(1) Largest target is 1
		 -> write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), 
		 -> set_osr_humidity_settings@ctrl_hum(COMMON[1]), bme280_soft_reset@soft_rst_cmd(BANK0[1]), 

    bme280_set_regs@reg_addr	PTR unsigned char  size(1) Largest target is 1
		 -> write_power_mode@reg_addr(COMMON[1]), set_filter_standby_settings@reg_addr(COMMON[1]), set_osr_press_temp_settings@reg_addr(COMMON[1]), set_osr_humidity_settings@reg_addr(COMMON[1]), 
		 -> bme280_soft_reset@reg_addr(BANK0[1]), 

    bme280_set_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    bme280_get_regs@reg_data	PTR unsigned char  size(2) Largest target is 26
		 -> get_calib_data@calib_data(BANK0[26]), put_device_to_sleep@reg_data(COMMON[4]), write_power_mode@sensor_mode_reg_val(COMMON[1]), set_filter_standby_settings@reg_data(COMMON[1]), 
		 -> set_osr_press_temp_settings@reg_data(COMMON[1]), set_osr_humidity_settings@ctrl_meas(COMMON[1]), bme280_get_sensor_data@reg_data(BANK2[8]), bme280_set_sensor_mode@last_set_mode(COMMON[1]), 
		 -> bme280_get_sensor_settings@reg_data(COMMON[4]), bme280_set_sensor_settings@sensor_mode(COMMON[1]), bme280_init@chip_id(BANK0[1]), 

    bme280_get_regs@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_get_regs@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_get_regs@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_get_regs@dev	PTR const struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 

    S54bme280_dev$delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    bme280_init@dev.delay_ms	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> Sleep(), 

    S54bme280_dev$write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    bme280_init@dev.write	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> WriteEnvSensor(), 

    S54bme280_dev$read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev.read	PTR FTN(unsigned char ,unsigned char ,PTR unsigned char ,unsigned short ,)char  size(2) Largest target is 1
		 -> ReadEnvSensor(), 

    bme280_init@dev	PTR struct bme280_dev size(1) Largest target is 51
		 -> main@env_sensor(BANK3[51]), 


Critical Paths under _main in COMMON

    _main->_ClearString
    _main->_FlashError
    _main->_InsertString
    _main->_TransmitString
    _crc16->_strlen
    _crc16_update->_strlen
    _bme280_init->_Sleep
    _bme280_init->_null_ptr_check
    _get_calib_data->_parse_humidity_calib_data
    _get_calib_data->_parse_temp_press_calib_data
    _bme280_soft_reset->_Sleep
    _bme280_soft_reset->_null_ptr_check
    _bme280_set_regs->_null_ptr_check
    _bme280_get_sensor_data->_null_ptr_check
    _bme280_get_regs->_null_ptr_check
    _I2C_MasterWrite->_I2C_MasterTRBInsert
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2C_MasterRead->_I2C_MasterTRBInsert
    _compensate_temperature->___lmul
    ___aldiv->___lmul
    _compensate_pressure->___aodiv
    ___aodiv->___omul
    _TransmitString->_TransmitByte
    _TransmitString->_strlen
    _TransmitByte->_TransmitBit
    _SetupGPS->_GPS_HasAcknowledged
    _SetupGPS->_WriteGPS
    _WriteGPS->_strlen
    _GPS_SendUBX->_GetLengthUBX
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _IntToString->___awdiv
    _IntToString->___awmod
    _ReverseString->___awdiv
    _InsertString->_strlen
    _ClearString->_strlen

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_ISR->_I2C_Stop

Critical Paths under _main in BANK0

    _crc16->_crc16_update
    _crc16_update->_strlen
    _bme280_init->_get_calib_data
    _get_calib_data->_bme280_get_regs
    _bme280_soft_reset->_bme280_set_regs
    _bme280_set_regs->_WriteEnvSensor
    _WriteEnvSensor->_I2C_MasterWrite
    _bme280_get_regs->_ReadEnvSensor
    _ReadEnvSensor->_I2C_MasterRead
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2C_MasterRead->_I2C_MasterReadTRBBuild
    _bme280_compensate_data->_compensate_pressure
    _compensate_temperature->___aldiv
    ___aldiv->___lmul
    _compensate_pressure->___aodiv
    ___aodiv->___omul
    _UIntToHexString->_ReverseString
    _UIntToHexString->_crc16
    _TransmitString->_TransmitByte
    _SetupGPS->_GPS_HasAcknowledged
    _WriteGPS->_strlen
    _IntToString->_ReverseString
    _ReverseString->___awdiv
    _InsertString->_Insert
    _ClearString->_strlen

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_bme280_get_sensor_data
    _bme280_get_sensor_data->_bme280_compensate_data
    _bme280_compensate_data->_compensate_pressure

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_bme280_get_sensor_data

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                91    91      0   76492
                                             22 BANK2     40    40      0
                                              0 BANK3     51    51      0
                        _ClearString
                         _FlashError
                             _Insert
                       _InsertString
                        _IntToString
                  _SYSTEM_Initialize
                           _SetupGPS
           _TMR0_SetInterruptHandler
                     _TransmitString
                    _UIntToHexString
             _bme280_get_sensor_data
                        _bme280_init
                              _crc16
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _crc16                                                9     7      2    1838
                                             11 BANK0      9     7      2
                       _crc16_update
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _crc16_update                                         9     5      4     482
                                              2 BANK0      9     5      4
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _bme280_init                                          6     6      0   26613
                                             64 BANK0      6     6      0
                              _Sleep *
                    _bme280_get_regs
                  _bme280_soft_reset
                     _get_calib_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _get_calib_data                                      31    31      0   10302
                                             33 BANK0     31    31      0
                    _bme280_get_regs
          _parse_humidity_calib_data
        _parse_temp_press_calib_data
 ---------------------------------------------------------------------------------
 (3) _parse_temp_press_calib_data                          4     3      1    1338
                                              5 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _parse_humidity_calib_data                           14    13      1     699
                                              5 COMMON     4     3      1
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (2) _bme280_soft_reset                                    7     7      0    7394
                                             52 BANK0      7     7      0
                              _Sleep *
                    _bme280_set_regs
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (3) _bme280_set_regs                                     31    28      3    6392
                                             21 BANK0     31    28      3
                     _WriteEnvSensor *
                _interleave_reg_addr
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (4) _interleave_reg_addr                                  8     5      3     622
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (4) _WriteEnvSensor                                      11     6      5    2815
                                             10 BANK0     11     6      5
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _Sleep                                               12     8      4     195
                                              5 COMMON     4     0      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _bme280_get_sensor_data                              27    25      2   21846
                                             75 BANK1      5     3      2
                                              0 BANK2     22    22      0
             _bme280_compensate_data
                    _bme280_get_regs
           _bme280_parse_sensor_data
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _bme280_parse_sensor_data                            22    21      1     739
                                              5 COMMON     1     0      1
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 (3) _bme280_get_regs                                      9     4      5    7691
                                             24 BANK0      9     4      5
                      _ReadEnvSensor *
                     _null_ptr_check
 ---------------------------------------------------------------------------------
 (2) _null_ptr_check                                       4     4      0     485
                                              5 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _ReadEnvSensor                                       11     5      6    4303
                                             13 BANK0     11     5      6
                     _I2C_MasterRead
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWrite                                      7     3      4    2111
                                              3 BANK0      7     3      4
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterWriteTRBBuild                              7     3      4     492
                                              5 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterRead                                       8     2      6    1544
                                              5 BANK0      8     2      6
             _I2C_MasterReadTRBBuild
                _I2C_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterTRBInsert                                  4     2      2     546
                                              5 COMMON     4     2      2
    _I2C_WaitForLastPacketToComplete
 ---------------------------------------------------------------------------------
 (7) _I2C_WaitForLastPacketToComplete                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterReadTRBBuild                               8     3      5     523
                                              5 COMMON     3     3      0
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (2) _bme280_compensate_data                               6     3      3   12282
                                             69 BANK1      6     3      3
                _compensate_pressure
             _compensate_temperature
 ---------------------------------------------------------------------------------
 (3) _compensate_temperature                              39    35      4    5348
                                             23 BANK0     39    35      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    1976
                                              5 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8    2565
                                              8 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _compensate_pressure                                 99    95      4    6131
                                             50 BANK0     30    26      4
                                              0 BANK1     69    69      0
                            ___aodiv
                             ___omul
 ---------------------------------------------------------------------------------
 (4) ___omul                                              25     9     16    2296
                                              5 COMMON     1     1      0
                                              0 BANK0     24     8     16
 ---------------------------------------------------------------------------------
 (4) ___aodiv                                             27    11     16    2245
                                              6 COMMON     1     1      0
                                             24 BANK0     26    10     16
                             ___omul (ARG)
 ---------------------------------------------------------------------------------
 (1) _UIntToHexString                                     19    14      5    3084
                                             20 BANK0     19    14      5
                      _ReverseString
                              _crc16 (ARG)
 ---------------------------------------------------------------------------------
 (1) _TransmitString                                       6     6      0    1367
                                              8 COMMON     1     1      0
                                              3 BANK0      5     5      0
                       _TransmitByte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _TransmitByte                                         4     4      0     161
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                        _TransmitBit
 ---------------------------------------------------------------------------------
 (3) _TransmitBit                                          2     2      0      31
                                              5 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SetupGPS                                             2     2      0    3020
                                             18 BANK0      2     2      0
                _GPS_HasAcknowledged
                        _GPS_SendUBX
                           _WriteGPS
 ---------------------------------------------------------------------------------
 (2) _WriteGPS                                             7     5      2    1775
                                              8 COMMON     1     1      0
                                              2 BANK0      6     4      2
                       _EUSART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _GPS_SendUBX                                          6     6      0     329
                                              0 BANK0      6     6      0
                       _EUSART_Write
                       _GetLengthUBX
 ---------------------------------------------------------------------------------
 (3) _GetLengthUBX                                         4     1      3      98
                                              5 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      31
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GPS_HasAcknowledged                                 22    22      0     916
                                              5 COMMON     4     4      0
                                              0 BANK0     18    18      0
                        _EUSART_Read
                 _EUSART_is_rx_ready
 ---------------------------------------------------------------------------------
 (3) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     211
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     211
                                              7 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     211
                                              5 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IntToString                                         10     6      4    5484
                                             20 BANK0     10     6      4
                      _ReverseString
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     613
                                              5 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ReverseString                                       15    13      2    2545
                                              5 BANK0     15    13      2
                            ___awdiv
                             _strlen
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     945
                                              5 COMMON     4     0      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _InsertString                                        12     6      6    6342
                                              8 COMMON     1     1      0
                                              8 BANK0     11     5      6
                             _Insert
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _Insert                                              10     5      5    2691
                                              5 COMMON     2     2      0
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _FlashError                                           4     4      0      68
                                              5 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ClearString                                          7     5      2    1482
                                              8 COMMON     1     1      0
                                              2 BANK0      6     4      2
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               5     3      2     970
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0      31
                _I2C_BusCollisionISR
                            _I2C_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                           _TimerISR *
 ---------------------------------------------------------------------------------
 (10) _TimerISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_ISR                                              2     2      0      31
                                              3 COMMON     2     2      0
               _I2C_FunctionComplete
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C_Stop                                            3     3      0      31
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _I2C_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearString
     _strlen
   _FlashError
   _Insert
   _InsertString
     _Insert
     _strlen
   _IntToString
     _ReverseString
       ___awdiv
       _strlen
     ___awdiv
     ___awmod
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _SetupGPS
     _GPS_HasAcknowledged
       _EUSART_Read
       _EUSART_is_rx_ready
     _GPS_SendUBX
       _EUSART_Write
       _GetLengthUBX
     _WriteGPS
       _EUSART_Write
       _strlen
   _TMR0_SetInterruptHandler
   _TransmitString
     _TransmitByte
       _TransmitBit
     _strlen
   _UIntToHexString
     _ReverseString
       ___awdiv
       _strlen
     _crc16 (ARG)
       _crc16_update
         _strlen (ARG)
       _strlen
   _bme280_get_sensor_data
     _bme280_compensate_data
       _compensate_pressure
         ___aodiv
           ___omul (ARG)
         ___omul
       _compensate_temperature
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _bme280_get_regs
       _ReadEnvSensor *
         _I2C_MasterRead
           _I2C_MasterReadTRBBuild
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
           _I2C_MasterWriteTRBBuild
       _null_ptr_check *
     _bme280_parse_sensor_data
     _null_ptr_check
   _bme280_init
     _Sleep *
     _bme280_get_regs *
       _ReadEnvSensor *
         _I2C_MasterRead
           _I2C_MasterReadTRBBuild
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
             _I2C_WaitForLastPacketToComplete
           _I2C_MasterWriteTRBBuild
       _null_ptr_check *
     _bme280_soft_reset *
       _Sleep *
       _bme280_set_regs *
         _WriteEnvSensor *
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
             _I2C_MasterWriteTRBBuild
         _interleave_reg_addr *
         _null_ptr_check *
       _null_ptr_check *
     _get_calib_data *
       _bme280_get_regs
         _ReadEnvSensor *
           _I2C_MasterRead
             _I2C_MasterReadTRBBuild
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
               _I2C_WaitForLastPacketToComplete
             _I2C_MasterWriteTRBBuild
         _null_ptr_check *
       _parse_humidity_calib_data
       _parse_temp_press_calib_data
     _null_ptr_check *
   _crc16
     _crc16_update
       _strlen (ARG)
     _strlen
   _strlen

 _INTERRUPT_InterruptManager (ROOT)
   _I2C_BusCollisionISR
   _I2C_ISR
     _I2C_FunctionComplete
     _I2C_Stop
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _TimerISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3E      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     33      4D      11       96.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      37      13       68.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      46      15       87.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      46      17       87.5%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      49      19       91.3%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     255      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     255      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Sep 02 12:37:16 2019

                     __end_of_ClearString 1BE1                     I2C_ISR@i2c_bytes_left 016B  
                             __CFG_CP$OFF 0000          bme280_parse_sensor_data@data_lsb 002C  
        bme280_parse_sensor_data@data_msb 0030                                        l53 1256  
                                      l70 1666                                        l63 1EE6  
                            ___awdiv@sign 0022                           GPS_SendUBX@data 0023  
                                      _id 01D3                           _timer0ReloadVal 016E  
                 ?_I2C_MasterReadTRBBuild 0020          __end_of_bme280_parse_sensor_data 069A  
                             __CFG_LVP$ON 0000                                       l124 13A3  
                                     l234 1BB5                                       l351 1AA2  
                                     l183 041A                                       l192 0FF0  
                                     l620 1CB1                                       l358 1A9C  
                                     l715 1E3F                                       l664 13AF  
                                     l729 1E86                                       l749 1B13  
                                     l864 1DF4                                       l868 1059  
       bme280_parse_sensor_data@data_xlsb 0028                           __end_of_I2C_ISR 0570  
                            ___awmod@sign 0022                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
        bme280_parse_sensor_data@reg_data 0034                            bme280_init@dev 0065  
                            ?_EUSART_Read 0070           __size_of_compensate_temperature 01A2  
                          ReverseString@i 0032                              __CFG_ZCD$OFF 0000  
                          WriteGPS@counti 0024                                      l1027 1431  
                                    l1062 17EE                                      l4200 1480  
                                    l4104 1D37                                      l4204 148B  
                                    l4044 07FC                                      l4116 1DF0  
                                    l5102 1BC8                                      l4222 175D  
                                    l4150 1D69                                      l4062 1FEF  
                                    l4142 1097                                      l4134 1095  
                   __size_of_crc16_update 003D                                      l4224 1762  
                                    l4208 1499                                      l4064 1FF4  
                                    l4144 109C                                      l5114 10DA  
                                    l5202 113D                                      l4234 1779  
                                    l4218 1736                                      l4154 1D73  
                                    l4058 1FE8                                      l4082 1C01  
                                    l4306 1661                                      l5116 10AE  
                                    l4500 1109                                      l5204 115E  
                                    l5140 140D                                      l4244 17C1  
                                    l4236 1788                                      l4164 1F7B  
                                    l4332 0404                                      l4076 1C29  
                                    l4092 1BB8                                      l4308 1668  
                                    l5118 10E6                                      l4502 1115  
                                    l5142 141A                                      l4246 17CD  
                                    l4190 1452                                      l4182 1442  
                                    l4334 0412                                      l4094 1BB9  
                                    l4270 15D5                                      l4512 1130  
                                    l5152 07A1                                      l5136 13FA  
                                    l5128 13D0                                      l4168 1F8D  
                                    l4192 1460                                      l5320 0268  
                                    l4258 1EBF                                      l4290 15F9  
                                    l4460 1B35                                      l4516 1138  
                                    l4508 1127                                      l5164 07EE  
                                    l4444 1AA9                                      l4380 0FDD  
                                    l4292 1613                                      l4702 12F0  
                                    l4470 1B15                                      l5190 1D16  
                                    l4382 0FE8                                      l4550 1052  
                                    l4704 1329                                      l4528 1E2D  
                                    l5176 1EEF                                      l4458 1B29  
                                    l4490 1101                                      l4378 0FD7  
                                    l4298 1632                                      l5178 1F26  
                                    l5258 00A8                                      l4484 10F6  
                                    l4724 1274                                      l4726 12BA  
                                    l4830 1519                                      l4582 13A5  
                                    l4574 1377                                      l4910 124C  
                                    l4742 1E8C                                      l4824 14F8  
                                    l4816 14F1                                      l4808 14DB  
                                    l4760 1D98                                      l4912 124F  
                                    l4690 12EC                                      l4826 1517  
                                    l4818 14F2                                      l4578 1392  
                                    l4906 1238                                      l4746 1E6A  
                                    l4852 1F36                                      l4748 1EA1  
                                    l4870 1F5B                                      l4864 1F43  
                                    l4856 1F3D                                      l4776 1C67  
                                    l4866 1F4F                                      l4874 1F64  
                                    l4786 1C3C                                      l4892 1204  
                                    l4878 1F6C                                      STR_1 184E  
                                    STR_2 1834                                      STR_3 1882  
                                    STR_4 181A                                      STR_5 1868  
                                    STR_6 1800                                      STR_7 189C  
                                    STR_8 18B5                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u4005 1481                                      u4105 17AE  
                  ??_I2C_FunctionComplete 0070                                      u4070 1769  
                                    u4315 0915                                      u4325 097C  
                                    u4335 0A5F                                      u5080 1199  
                                    u5305 10E4                                      u4265 029A  
                                    u5090 11A6                                      u5315 10B9  
                                    u4515 1116                                      u4355 0C13  
                                    u4275 02AE                                      u3900 1F78  
                                    u4525 1120                                      u4365 0E7A  
                                    u4285 0318                                      u4605 057C  
                                    u4445 1E62                                      u5510 00D2  
                                    u4535 1128                                      u5335 13ED  
                                    u4615 0594                                      u5415 1EF9  
                                    u5360 0795                                      u5425 1D20  
                                    u4625 05AA                                      u5370 0796  
                                    u4570 1014                                      u4635 05ED  
                                    u4395 15A5                                      u5285 1CD8  
                                    u4645 0606                                      u5525 027E  
                                    u4830 1DA4                                      u5295 1BD2  
                                    u4495 110C                                      u4655 061C  
                                    u3855 1069                                      u4840 1DA5  
                                    u4824 1D9E                                      u4825 1D9D  
                                    u4665 0660                                      u5537 026C  
                                    u5395 07D8                                      u3875 1D74  
                                    u5547 1E65                                      u5557 1B18  
                                    u3965 1455                                      u3885 1D7B  
                                    u4775 12FA                                      u5567 1B1F  
                                    u4855 1DB6                                      u4785 127E  
                                    u4865 1C71                                      u5577 1156  
                                    u3985 1461                                      u5587 1CB8  
                                    u4875 1C46                                      u3995 1475  
                                    u5597 1CC5                                      u4965 1F46  
                                    u4985 1F55                                      u4995 1F5C  
                                    _TMR0 0015                                      _WPUA 020C  
                                    _WPUB 020D                                      _WPUC 020E  
                  WriteEnvSensor@reg_addr 002B       bme280_parse_sensor_data@uncomp_data 0075  
                  WriteEnvSensor@reg_data 002C         bme280_get_sensor_data@uncomp_data 012A  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                                    _main 0071                      __end_of_GetLengthUBX 1AF7  
                            TransmitBit@b 0076                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                  interleave_reg_addr@len 0077                          __end_of_I2C_Stop 1B74  
                           __CFG_BOREN$ON 0000                         GPS_SendUBX@length 0021  
            GPS_HasAcknowledged@startTime 0020                                      start 0023  
                    bme280_soft_reset@dev 005A               __end_of_compensate_pressure 1000  
                           __CFG_MCLRE$ON 0000                             ??_IntToString 0038  
                           _ReadEnvSensor 1DC0            __end_of_I2C_MasterReadTRBBuild 1CAF  
                         bme280_init@rslt 0064                   __end_of_TMR0_Initialize 1B0C  
          ??_TMR0_DefaultInterruptHandler 0070                I2C_MasterReadTRBBuild@ptrb 0077  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 0007  
                        ?_I2C_MasterWrite 0023             __end_of_OSCILLATOR_Initialize 1A9B  
                         __end_of___aldiv 14A2                           __end_of___aodiv 1800  
                   ReverseString@opposite 002E                                     ?_main 0070  
              GPS_HasAcknowledged@ackByte 0024                           __end_of___awdiv 113D  
                                   STR_10 18B0                                     STR_11 18AA  
                                   STR_12 18BA                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 1F71                                _FlashError 1CAF  
                         WriteGPS@message 0022                    _bme280_compensate_data 132F  
                         ___awdiv@divisor 0075                             _i2c_trb_count 016C  
                                   i1l501 048C                                     i1l502 0498  
                                   i1l520 050A                                     i1l512 04CC  
                                   i1l531 1AE2                                     i1l524 0530  
                                   i1l516 04EC                                     i1l390 0021  
                                   i1l382 000D                                     i1l519 04FC  
                                   i1l385 0019                                     i1l490 043B  
                                   i1l495 0469                                     i1l496 046A  
                         ___awdiv@counter 0021                              _crc16_update 1E69  
                              Insert@dest 0027                         _bme280_soft_reset 1DF6  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _RXPPS 0E24  
                              Insert@temp 0025         __size_of_TMR0_SetInterruptHandler 0006  
                __size_of_bme280_get_regs 0042                       ___lmul@multiplicand 0024  
               ?_TMR0_SetInterruptHandler 0075                                     _Sleep 1E2F  
                        __end_of_TMR0_ISR 1AD4            compensate_pressure@uncomp_data 00B8  
              bme280_compensate_data@rslt 00E9                        ?_bme280_soft_reset 0070  
                UIntToHexString@remainder 003F                                     _crc16 1EE8  
                        crc16_update@wCrc 0024                          ?_UIntToHexString 0034  
                            ?_GPS_SendUBX 0070                                     _ticks 0163  
                                   main@i 014E                                     pclath 000A  
                 GPS_HasAcknowledged@data 002F                             TransmitByte@i 0021  
                     ??_bme280_soft_reset 0054                                     status 0003  
                                   wtemp0 007E                               _ClearString 1BBB  
                __size_of_bme280_set_regs 009E                          ??_get_calib_data 0041  
                   bme280_soft_reset@rslt 0058                  I2C_MasterTRBInsert@count 0078  
                I2C_MasterTRBInsert@pflag 0076                                _i2c_object 015E  
                         __initialization 0025                    _compensate_temperature 0281  
       parse_humidity_calib_data@reg_data 0029                            ?_ReadEnvSensor 002D  
                            __end_of_main 0281                      GPS_HasAcknowledged@i 0031  
                          ??_EUSART_Write 0075                                 ??_I2C_ISR 0073  
                          __CFG_LPBOR$OFF 0000               ?_INTERRUPT_InterruptManager 0070  
                 ?_bme280_get_sensor_data 00EB                 __end_of_bme280_soft_reset 1E2F  
                                  ??_main 0136                     __end_of_ReverseString 12C3  
                     __end_of_IntToString 07FC                   __size_of_WriteEnvSensor 004A  
                     _I2C_MasterTRBInsert 1FB8                          ??_null_ptr_check 0075  
         bme280_compensate_data@comp_data 00E6                          ReverseString@str 0025  
                          __CFG_PLLEN$OFF 0000               I2C_MasterReadTRBBuild@pdata 0020  
                        __end_of_TimerISR 1AB5           compensate_pressure@pressure_max 00B9  
                        __end_of_SetupGPS 118F                 bme280_get_sensor_data@dev 00EC  
                   ReadEnvSensor@reg_addr 002E                             ?_InsertString 0028  
                                  ?_Sleep 0075                  ?_I2C_MasterWriteTRBBuild 0075  
                _bme280_parse_sensor_data 0570                                    ?_crc16 002B  
                              Sleep@start 0024                          ___awdiv@dividend 0077  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of_WriteGPS 1C84  
              __end_of_EUSART_is_rx_ready 1A82                                    _BORCON 0116  
                                  _RC1REG 0199                                    _RC1STA 019D  
                                  _RB4PPS 0E9C                                    _RB6PPS 0E9E  
                                  _RB7PPS 0E9F                                    _ODCONA 028C  
                                  _ODCONB 028D                                    _ODCONC 028E  
                                  i1l5000 04A6                                    i1l5040 04EF  
                                  i1l5032 04DA                                    i1l5018 04C1  
                                  i1l5052 0511                                    i1l5070 0537  
                                  i1l5072 053B                                    i1l5056 0518  
                                  i1l5068 0534                                    i1l5342 054C  
                                  i1l5078 0543                                    i1l4670 1B71  
                                  i1l4980 0476                                    i1l4972 0463  
                                  i1l4968 045C                                    i1l4986 0486  
                                  _OSCCON 0099                                    u404lld 1733  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                                  _TX1REG 019A                                    _TX1STA 019E  
                             Insert@index 0021                      ?_I2C_MasterTRBInsert 0075  
            __size_of_interleave_reg_addr 002D                            __CFG_PWRTE$OFF 0000  
              ?_parse_humidity_calib_data 0075                                    _Insert 12C3  
                                  ___lmul 1D61                         crc16_update@pData 0029  
                                  ___omul 1F71                                 ??___aldiv 0030  
                               ??___aodiv 0076                                 ??___awdiv 0020  
                                  crc16@i 0032                            __CFG_STVREN$ON 0000  
                               ??___awmod 0020              parse_humidity_calib_data@dev 0075  
          __end_of_bme280_get_sensor_data 11F1             I2C_MasterReadTRBBuild@address 0023  
                        ?_TMR0_Initialize 0070               compensate_pressure@pressure 00C9  
                        ___awdiv@quotient 0023                           ___awmod@divisor 0075  
                 __size_of_I2C_MasterRead 0027                           ___awmod@counter 0021  
                 __size_of_I2C_Initialize 0019                               ?_FlashError 0070  
                                  _strlen 1B24                  interleave_reg_addr@index 0024  
                       get_calib_data@dev 005F                              IntToString@i 003C  
                            IntToString@n 0034                           InsertString@src 0028  
                 compensate_pressure@var1 00DD                   compensate_pressure@var2 00CD  
                 compensate_pressure@var4 00D5                            ??_InsertString 0078  
                               ?_I2C_Stop 0070                          ??_TransmitString 0078  
TMR0_SetInterruptHandler@InterruptHandler 0075                     __size_of_GetLengthUBX 0012  
                       ??_bme280_get_regs 003D                      __size_of_EUSART_Read 0009  
            interleave_reg_addr@temp_buff 0075          bme280_compensate_data@calib_data 00E7  
                       _SYSTEM_Initialize 1AB5                   __end_of__initialization 006D  
                   ??_I2C_MasterTRBInsert 0077                        ?_SYSTEM_Initialize 0070  
                     main@convertedNumber 013B                      _UIntToHexString$1790 003B  
        compensate_temperature@calib_data 0037                           ??_ReadEnvSensor 0033  
                     ReverseString@counti 0030                             ??_bme280_init 0060  
                get_calib_data@calib_data 0043                            __pcstackCOMMON 0070  
                           __end_of_Sleep 1E69                              __pidataBANK3 0002  
                            __pidataBANK5 1CDB                         ??_bme280_set_regs 0038  
                           __end_of_crc16 1F2C                       ??_SYSTEM_Initialize 0078  
                             _IntToString 078F                                 ?_TMR0_ISR 0070  
                           ??_TransmitBit 0075                __size_of_bme280_soft_reset 0039  
         __end_of_I2C_MasterWriteTRBBuild 1B96                              _GetLengthUBX 1AE5  
                          _OPTION_REGbits 0095                                ??_I2C_Stop 0070  
                                 ??_Sleep 0020                                   ??_crc16 002D  
             __end_of_GPS_HasAcknowledged 1533                 __end_of_SYSTEM_Initialize 1AC4  
                              __pbssBANK2 015E                                __pbssBANK3 01D3  
                              __pbssBANK4 0220                                __pbssBANK5 02CC  
                              __pbssBANK6 0320                                __pbssBANK7 03A0  
                    __end_of_EUSART_Write 1AA2               interleave_reg_addr@reg_addr 0023  
                    __size_of_GPS_SendUBX 002A                         ReverseString@temp 002D  
             interleave_reg_addr@reg_data 0076                     InsertString@destLimit 002C  
            I2C_MasterReadTRBBuild@length 0022                       __size_of_FlashError 002C  
            __size_of_I2C_BusCollisionISR 0002                          _setNavFlightMode 02A0  
                                 ?_Insert 0020                                __pmaintext 0071  
                               ?_TimerISR 0070                                 ?_SetupGPS 0070  
        __end_of_TMR0_SetInterruptHandler 1A88                                   ?___lmul 0020  
                                 ?___omul 0020                                ??_TMR0_ISR 0070  
                         __CFG_PPS1WAY$ON 0000                                __pintentry 0004  
                 ?_bme280_compensate_data 00E5                                   _I2C_ISR 0423  
                     ___omul@multiplicand 0028                            ___lmul@product 0075  
                        ReadEnvSensor@len 0031                                 ?_WriteGPS 0022  
                     __end_of_bme280_init 1258               I2C_MasterWriteTRBBuild@ptrb 0022  
                          _WriteEnvSensor 1054                                   ?_strlen 0075  
                         __CFG_WDTCCS$SWC 0000                            main@env_sensor 01A0  
                     __end_of_TransmitBit 1B24                                   _OSCTUNE 0098  
                 I2C_Stop@completion_code 0072              ?_parse_temp_press_calib_data 0075  
                                 _SSP1ADD 0212                                   _SLRCONA 030C  
                                 _SLRCONB 030D                                   _SLRCONC 030E  
                                 _SSP1BUF 0211             __size_of_I2C_FunctionComplete 0011  
                            ?_ClearString 0022                   ?_compensate_temperature 0037  
           bme280_soft_reset@soft_rst_cmd 0057                                   Sleep@ms 0075  
                    __end_of_InsertString 10EC                           __size_of_Insert 006C  
                              ??_TimerISR 0070                                ??_SetupGPS 0032  
          __end_of_bme280_compensate_data 13A7                                   ___aldiv 1421  
                                 ___aodiv 170B                          GetLengthUBX@data 0078  
                                 ___awdiv 10EC                           __size_of___lmul 002F  
                                 ___awmod 1F2C                           __size_of___omul 0047  
                  __end_of_WriteEnvSensor 109E              __size_of_compensate_pressure F996  
                          _I2C_MasterRead 1BE1                ??_bme280_parse_sensor_data 0020  
                          _I2C_Initialize 1B3D                                ??_WriteGPS 0078  
                      crc16_update@length 0022                                   __ptext1 1EE8  
                                 __ptext2 1E69                                   __ptext3 11F1  
                                 __ptext4 100C                                   __ptext5 069A  
                                 __ptext6 1533                                   __ptext7 1DF6  
                                 __ptext8 15CC                                   __ptext9 1D34  
     parse_humidity_calib_data@dig_H4_lsb 0020       parse_humidity_calib_data@dig_H4_msb 0022  
     parse_humidity_calib_data@dig_H5_lsb 0024       parse_humidity_calib_data@dig_H5_msb 0026  
     parse_humidity_calib_data@calib_data 0028                           __size_of_strlen 0019  
                     _interleave_reg_addr 1D34                     _OSCILLATOR_Initialize 1A94  
                        ___awmod@dividend 0077                             _message_start 0320  
                        ___aldiv@dividend 002C                  ??_PIN_MANAGER_Initialize 0075  
                      get_calib_data@F375 02CC                  __size_of_I2C_MasterWrite 0028  
                                 main@end 014C                __size_of_SYSTEM_Initialize 000F  
                                 clrloop0 1A89             ??_parse_temp_press_calib_data 0076  
                    end_of_initialization 006D           bme280_get_sensor_data@comp_data 00EB  
                      get_calib_data@rslt 005E                          InsertString@dest 0032  
                          ___omul@product 0030                                   init_ram 1A8E  
          __end_of_compensate_temperature 0423                                   initloop 1A8F  
                    ?_interleave_reg_addr 0075                  __size_of_UIntToHexString 007A  
                    I2C_MasterRead@length 0027                         _EUSART_Initialize 1002  
        __size_of_I2C_MasterWriteTRBBuild 0022               ??_parse_humidity_calib_data 0076  
                      ?_EUSART_Initialize 0070                               _bme280_init 11F1  
                      _EUSART_is_rx_ready 1A7D                          ___aldiv@quotient 0033  
       compensate_temperature@temperature 005A                                   psplit$0 3E0065  
                  __end_of_I2C_MasterRead 1C08                    __end_of_I2C_Initialize 1B56  
                              main@F10166 0220                     I2C_MasterWrite@length 0023  
                          ClearString@str 0022                           ?_WriteEnvSensor 002A  
                             _TransmitBit 1B0C                                   strlen@a 0020  
                                 strlen@s 0075                       ??_EUSART_Initialize 0075  
                _TMR0_SetInterruptHandler 1A82                       ?_EUSART_is_rx_ready 0070  
                            ??_FlashError 0075                        I2C_ISR@i2c_address 007B  
                               _SSPDATPPS 0E21                           _bme280_get_regs 1EA6  
                               _SSPCLKPPS 0E20                        bme280_get_regs@dev 003C  
                      bme280_get_regs@len 003A                           TransmitString@i 0025  
                           ?_TransmitByte 0070                          __CFG_FOSC$INTOSC 0000  
                           crc16@segments 002B                     __size_of_EUSART_Write 0007  
                            GPS_SendUBX@i 0024                         __size_of_I2C_Stop 001E  
        I2C_ISR@i2c_10bit_address_restart 016A                           _bme280_set_regs 15CC  
               __end_of_EUSART_Initialize 100C                      ??_EUSART_is_rx_ready 0075  
                    bme280_init@try_count 0062                     ??_interleave_reg_addr 0020  
               bme280_soft_reset@reg_addr 0059         compensate_temperature@uncomp_data 0055  
                          _gps_configured 0169                      ReverseString@halfway 002B  
                  __size_of_ReverseString 006B                        __end_of_FlashError 1CDB  
                ??_I2C_MasterReadTRBBuild 0075                     TransmitString@message 0027  
                       _p_i2c_trb_current 007A      __size_of_parse_temp_press_calib_data 00F5  
                          __end_of_Insert 132F                              ?_IntToString 0034  
                         ?_I2C_MasterRead 0025                           ?_I2C_Initialize 0070  
                          __end_of___lmul 1D90                            __end_of___omul 1FB8  
                 __size_of_get_calib_data 0048                                 Insert@src 0020  
                            _i2c_tr_queue 01E5                              _EUSART_Write 1A9B  
                       __size_of_TMR0_ISR 0010                    ?_OSCILLATOR_Initialize 0070  
          parse_temp_press_calib_data@dev 0075                  bme280_set_regs@temp_buff 003B  
                          ??_TransmitByte 0077                       _I2C_BusCollisionISR 1000  
               _parse_humidity_calib_data 1533                            __end_of_strlen 1B3D  
                     start_initialization 0025                       UIntToHexString@dest 0038  
                __size_of_TMR0_Initialize 0015           __size_of_PIN_MANAGER_Initialize 0033  
                               _i2c_state 016D     parse_temp_press_calib_data@calib_data 0077  
                           ??_EUSART_Read 0075                          UIntToHexString@i 0043  
                        UIntToHexString@n 0034               __end_of_I2C_MasterTRBInsert 2000  
                 __size_of_null_ptr_check 0025                     __size_of_InsertString 004E  
                       ??_I2C_MasterWrite 0027                         ___omul@multiplier 0020  
                    ?_I2C_BusCollisionISR 0070                      __size_of_ClearString 0026  
                                ??_Insert 0075                        bme280_init@chip_id 0063  
                   __end_of_ReadEnvSensor 1DF6                                  ??___lmul 0075  
                                ??___omul 0075                   __end_of_bme280_get_regs 1EE8  
                       ??_UIntToHexString 0039                         __size_of_TimerISR 000A  
                             __pdataBANK3 01EB                               __pdataBANK5 02A0  
                       __size_of_SetupGPS 0052                        null_ptr_check@rslt 0077  
                                ?_I2C_ISR 0070                              ClearString@i 0026  
                                ??_strlen 0077                             ?_crc16_update 0022  
              compensate_temperature@var1 0051                compensate_temperature@var2 0056  
   compensate_temperature@temperature_max 004D                             _ReverseString 1258  
                       __size_of_WriteGPS 002A                               __pbssCOMMON 0079  
                               ___latbits 0002                             __pcstackBANK0 0020  
                           __pcstackBANK1 00A0                             __pcstackBANK2 0120  
                           __pcstackBANK3 01A0                          ___aodiv@dividend 0040  
                 __end_of_bme280_set_regs 166A                              _InsertString 109E  
                           crc16_update@i 002A                             ??_GPS_SendUBX 0020  
                _compensate_pressure$2533 00C1                  _compensate_pressure$2534 00A8  
                _compensate_pressure$2535 00B0                       _compensate_pressure 166A  
              __size_of_EUSART_Initialize 000A                                 crc16@data 002F  
                     __end_of_EUSART_Read 1AAB                   __size_of_TransmitString 002D  
                 _I2C_MasterWriteTRBBuild 1B74                     ??_I2C_BusCollisionISR 0070  
                   _TMR0_InterruptHandler 01E9                                 WriteGPS@i 0026  
                               __pnvBANK2 016E                                 __pnvBANK3 01E9  
            __size_of_GPS_HasAcknowledged 0091                  ??_bme280_get_sensor_data 00ED  
                  _PIN_MANAGER_Initialize 0800           __size_of_I2C_MasterReadTRBBuild 002B  
                                ?___aldiv 0028                                  ?___aodiv 0038  
                                ?___awdiv 0075                          ___aodiv@quotient 004A  
                                ?___awmod 0075                      ?_compensate_pressure 0052  
            __end_of_I2C_FunctionComplete 1AE5              ??_INTERRUPT_InterruptManager 0075  
                          ??_crc16_update 0026                            ?_ReverseString 0025  
                                _BAUD1CON 019F                                  _I2C_Stop 1B56  
                       ReadEnvSensor@data 002F                            __size_of_Sleep 003A  
                          __size_of_crc16 0044              I2C_MasterWriteTRBBuild@pdata 0075  
                              pnum$text27 003E                             _p_i2c_current 0079  
                         ___aldiv@divisor 0028                         ??_TMR0_Initialize 0077  
                         ___aldiv@counter 0031                                  _LATAbits 010C  
                                _LATCbits 010E                       __end_of_GPS_SendUBX 1C5A  
                               clear_ram0 1A88                                  _PIE1bits 0090  
                                _PIE2bits 0091                      __end_of_TransmitByte 1DC0  
                     I2C_MasterRead@pdata 0025                       I2C_MasterRead@pflag 002A  
     __size_of_INTERRUPT_InterruptManager 001F       parse_temp_press_calib_data@reg_data 0078  
                        ??_WriteEnvSensor 002F                ??_TMR0_SetInterruptHandler 0077  
                                _PIR1bits 0010                                  _PIR2bits 0011  
                            ?_bme280_init 0070            bme280_get_sensor_data@reg_data 0120  
                    I2C_MasterWrite@pdata 0029                      I2C_MasterWrite@pflag 0026  
                    __CFG_WDTCPS$WDTCPS1F 0000                                  _SSP1CON1 0215  
                                _SSP1CON3 0217                                  _TMR0_ISR 1AC4  
                     I2C_ISR@pi2c_buf_ptr 0167                     ??_compensate_pressure 0056  
                                _SSP1STAT 0214                          ?_bme280_get_regs 0038  
                          _get_calib_data 100C                              ?_TransmitBit 0070  
                    __size_of_IntToString 006D                          __size_of_I2C_ISR 014D  
                           Insert@current 0026                      WriteEnvSensor@dev_id 002A  
                               main@index 015C                    _I2C_MasterReadTRBBuild 1C84  
                    TransmitString@counti 0023                   bme280_get_regs@reg_addr 003F  
                 bme280_set_regs@reg_addr 0053                   bme280_get_regs@reg_data 0038  
                 bme280_set_regs@reg_data 0035                      WriteEnvSensor@status 0034  
                        ?_bme280_set_regs 0035                               _EUSART_Read 1AA2  
                       ___lmul@multiplier 0020                   bme280_set_regs@temp_len 004F  
       __size_of_bme280_parse_sensor_data 012A                 ??_I2C_MasterWriteTRBBuild 0020  
               ?_bme280_parse_sensor_data 0075                            _null_ptr_check 1B96  
      __size_of_parse_humidity_calib_data 0099                       ReadEnvSensor@dev_id 002D  
             bme280_set_regs@reg_addr_cnt 0051                          ??_I2C_MasterRead 002B  
                      InsertString@counti 002E                          ??_I2C_Initialize 0075  
                         IntToString@dest 0036                       ReadEnvSensor@status 0037  
                         IntToString@sign 003B           __size_of_bme280_get_sensor_data 0062  
                     bme280_set_regs@rslt 0052                                  _TimerISR 1AAB  
                                _SetupGPS 113D                    __end_of_get_calib_data 1054  
                       null_ptr_check@dev 0078                             InsertString@i 0030  
                 ??_OSCILLATOR_Initialize 0075                          __size_of___aldiv 0081  
                        __size_of___aodiv 00F5                          __size_of___awdiv 0051  
                        __size_of___awmod 0045                           ??_ReverseString 0027  
                                _WriteGPS 1C5A                           ___aodiv@divisor 0038  
                         ___aodiv@counter 0048                             ?_GetLengthUBX 0075  
                       ClearString@counti 0024                                  crc16@crc 0030  
                                _checksum 01D5                           _I2C_MasterWrite 1C08  
     __end_of_parse_temp_press_calib_data 078F               _parse_temp_press_calib_data 069A  
                                __ptext10 1054                                  __ptext11 1E2F  
                                __ptext20 1FB8                                  __ptext12 118F  
                                __ptext21 07FC                                  __ptext13 0570  
                                __ptext30 13A7                                  __ptext22 1C84  
                                __ptext14 1EA6                                  __ptext31 1D07  
                                __ptext23 132F                                  __ptext15 1B96  
                                __ptext40 1A7D                                  __ptext32 1D90  
                                __ptext24 0281                                  __ptext16 1DC0  
                                __ptext41 1AA2                                  __ptext33 1B0C  
                                __ptext25 1D61                                  __ptext17 1C08  
                                __ptext50 1F2C                                  __ptext42 1AB5  
                                __ptext34 113D                                  __ptext26 1421  
                                __ptext18 1B74                                  __ptext51 1258  
                                __ptext43 1AF7                                  __ptext35 1C5A  
                                __ptext27 166A                                  __ptext19 1BE1  
                                __ptext60 1A7C                                  __ptext52 10EC  
                                __ptext44 1A82                                  __ptext36 1C30  
                                __ptext28 1F71                                  __ptext61 1AAB  
                                __ptext53 109E                                  __ptext45 0800  
                                __ptext37 1AE5                                  __ptext29 170B  
                                __ptext62 0423                                  __ptext54 12C3  
                                __ptext46 1A94                                  __ptext38 1A9B  
                                __ptext63 1B56                                  __ptext55 1CAF  
                                __ptext47 1B3D                                  __ptext39 14A2  
                                __ptext64 1AD4                                  __ptext56 1BBB  
                                __ptext48 1002                                  __ptext65 1000  
                                __ptext57 1B24                                  __ptext49 078F  
                                __ptext59 1AC4               __end_of_interleave_reg_addr 1D61  
                            _SSP1CON1bits 0215                    __end_of_null_ptr_check 1BBB  
                            _SSP1CON2bits 0216                               _GPS_SendUBX 1C30  
            I2C_MasterTRBInsert@ptrb_list 0075             compensate_pressure@calib_data 0052  
                         _UIntToHexString 13A7               __size_of_EUSART_is_rx_ready 0005  
                          _TransmitString 1D07                             __size_of_main 0210  
                    _I2C_FunctionComplete 1AD4         bme280_compensate_data@sensor_comp 00EA  
                ??_bme280_compensate_data 00E8         __end_of_parse_humidity_calib_data 15CC  
                             _message_end 03A0                      __end_of_crc16_update 1EA6  
                                _messages 01EB      __end_of_TMR0_DefaultInterruptHandler 1A7D  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 1A7C  
                    __CFG_WDTCWS$WDTCWSSW 0000   __end_of_I2C_WaitForLastPacketToComplete 0800  
__size_of_I2C_WaitForLastPacketToComplete 0004         ??_I2C_WaitForLastPacketToComplete 0075  
        ?_I2C_WaitForLastPacketToComplete 0070           _I2C_WaitForLastPacketToComplete 07FC  
                              _RC1STAbits 019D                           ?_get_calib_data 0070  
             _compensate_temperature$2532 0045                                  int$flags 007E  
      __end_of_INTERRUPT_InterruptManager 0023                _INTERRUPT_InterruptManager 0004  
                          ??_GetLengthUBX 0078                           main@sensor_data 0150  
                     _GPS_HasAcknowledged 14A2                                _INTCONbits 000B  
                  _bme280_get_sensor_data 118F                         InsertString@index 002A  
                      bme280_set_regs@dev 0037                        bme280_set_regs@len 0036  
                          __pstringtext10 18B5                            __pstringtext11 18BA  
                          __pstringtext12 0000                        pnum$text27_split_1 0065  
                ??_compensate_temperature 003B                     I2C_MasterRead@address 0028  
       bme280_compensate_data@uncomp_data 00E5                           ?_null_ptr_check 0070  
              bme280_get_sensor_data@F271 0248                bme280_get_sensor_data@F273 023C  
                  __end_of_TransmitString 1D34                     __size_of_TransmitByte 0030  
                                intlevel1 0000                          TransmitByte@byte 0020  
                             FlashError@i 0077                     ?_I2C_FunctionComplete 0070  
                           ??_ClearString 0078                   ?_PIN_MANAGER_Initialize 0070  
                   I2C_MasterRead@trBlock 01DB                bme280_get_sensor_data@rslt 0129  
                       __CFG_CLKOUTEN$OFF 0000              __size_of_I2C_MasterTRBInsert 0048  
                    ?_GPS_HasAcknowledged 0070             ?_TMR0_DefaultInterruptHandler 0070  
            GPS_HasAcknowledged@ackByteID 0030              GPS_HasAcknowledged@ackPacket 0025  
                  I2C_MasterWrite@address 0024                      __size_of_bme280_init 0067  
                 __end_of_I2C_MasterWrite 1C30                             __pstringtext1 1800  
                           __pstringtext2 181A                             __pstringtext3 1834  
                           __pstringtext4 184E                             __pstringtext5 1868  
                           __pstringtext6 1882                             __pstringtext7 189C  
                           __pstringtext8 18AA                             __pstringtext9 18B0  
                    __size_of_TransmitBit 0018                    I2C_MasterWrite@trBlock 01E0  
                              _OPTION_REG 0095                              _TransmitByte 1D90  
                         _TMR0_Initialize 1AF7                              ___aldiv@sign 0032  
                 __end_of_UIntToHexString 1421                         WriteEnvSensor@len 002D  
                        GetNavData@F10102 0250                          GetNavData@F10108 0230  
             __end_of_I2C_BusCollisionISR 1002                    __size_of_ReadEnvSensor 0036  
                      EUSART_Write@txData 0075                              ___aodiv@sign 0049  
                         ?_TransmitString 0070            __end_of_PIN_MANAGER_Initialize 0833  
                         Insert@destLimit 0023            I2C_MasterWriteTRBBuild@address 0077  
             WriteEnvSensor@local_address 0033                       bme280_get_regs@rslt 0040  
                   ??_GPS_HasAcknowledged 0075           __size_of_bme280_compensate_data 0078  
           I2C_MasterWriteTRBBuild@length 0076         bme280_get_sensor_data@sensor_comp 0128  
